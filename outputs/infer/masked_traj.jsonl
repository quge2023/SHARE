{"idx": 0, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Alameda').where(element = frpm.Enrollment (K-12), filter = '> 0')\nres = df1.select(max(divide(frpm.Free Meal Count (K-12), frpm.Enrollment (K-12))))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alameda').where(element = [MASK], filter = '> 0')\nres = df1.select(max(divide([MASK], [MASK])))\n```"}
{"idx": 1, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.School Type, filter = 'Continuation').where(element = frpm.`Enrollment (Ages 5-17)`, filter = '> 0')\nres = df1.orderby(by = frpm.`EligibleFreeRate`, asc).limit(3).select(frpm.CDSCode, frpm.`School Name`, frpm.`EligibleFreeRate`)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Continuation').where(element = [MASK], filter = '> 0')\nres = df1.orderby(by = [MASK], asc).limit(3).select([MASK], [MASK], [MASK])\n```"}
{"idx": 2, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`Charter School (Y/N)`, filter = 1)\ndf2 = df1.where(element = schools.County, filter = 'Fresno')\nres = df2.select(schools.Zip)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 'Fresno')\nres = df2.select([MASK])\n```"}
{"idx": 3, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = frpm.FRPM Count (K-12), desc).limit(1)\nres = df1.select(schools.MailStreet)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 4, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`Charter School (Y/N)`, filter = 1)\ndf2 = df1.where(element = frpm.`Charter Funding Type`, filter = 'Direct')\ndf3 = df2.where(element = schools.OpenDate, filter = '> 2000-01-01')\nres = df3.select(schools.Phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 'Direct')\ndf3 = df2.where(element = [MASK], filter = '> 2000-01-01')\nres = df3.select([MASK])\n```"}
{"idx": 5, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.Virtual, filter = 'F')\ndf2 = df1.where(element = satscores.AvgScrMath, filter = '> 400')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '> 400')\nres = df2.count()\n```"}
{"idx": 6, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.NumTstTakr, filter = '> 500')\ndf2 = df1.where(element = schools.Magnet, filter = 1)\nres = df2.select(schools.School, schools.District, schools.County, satscores.NumTstTakr)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 500')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 7, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.NumGE1500, filter = max(satscores.NumGE1500))\nres = df1.select(schools.Phone).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK]).limit(1)\n```"}
{"idx": 8, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.FRPM Count (K-12), filter = max(frpm.FRPM Count (K-12)))\nres = df1.select(satscores.NumTstTakr)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 9, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.FundingType, filter = 'Directly Charter-Funded')\ndf2 = df1.where(element = satscores.AvgScrMath, filter = '> 560')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Directly Charter-Funded')\ndf2 = df1.where(element = [MASK], filter = '> 560')\nres = df2.count()\n```"}
{"idx": 10, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.AvgScrRead, filter = max(satscores.AvgScrRead))\nres = df1.select(frpm.`FRPM Count (Ages 5-17)`)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 11, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.Enrollment (K-12) + frpm.Enrollment (Ages 5-17), filter = '> 500')\nres = df1.select(frpm.CDSCode)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 500')\nres = df1.select([MASK])\n```"}
{"idx": 12, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.NumGE1500, filter = '> 0.3 * satscores.NumTstTakr')\ndf2 = df1.where(element = frpm.Enrollment (Ages 5-17), filter = '> 0')\nres = df2.select(max(divide(frpm.Free Meal Count (Ages 5-17), frpm.Enrollment (Ages 5-17))))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = satscores.NumGE1500, filter = '> 0.3 * satscores.NumTstTakr')\ndf2 = df1.where(element = frpm.Enrollment (Ages 5-17), filter = '> 0')\nres = df2.select(max(divide(frpm.Free Meal Count (Ages 5-17), frpm.Enrollment (Ages 5-17))))\n```"}
{"idx": 13, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = divide(satscores.NumGE1500, satscores.NumTstTakr), desc).limit(3)\nres = df1.select(schools.Phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = divide([MASK1], [MASK2]), desc).limit(3)\nres = df1.select([MASK3])\n```"}
{"idx": 14, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = frpm.`Enrollment (Ages 5-17)`, desc).limit(5)\nres = df1.select(schools.NCESSchool)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(5)\nres = df1.select([MASK])\n```"}
{"idx": 15, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.StatusType, filter = 'Active')\ndf2 = df1.groupby(schools.District).agg(avg(satscores.AvgScrRead))\ndf3 = df2.orderby(by = avg(satscores.AvgScrRead), desc).limit(1)\nres = df3.select(schools.District, avg(satscores.AvgScrRead))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [schools.StatusType], filter = 'Active')\ndf2 = df1.groupby([schools.District]).agg(avg([satscores.AvgScrRead]))\ndf3 = df2.orderby(by = avg([satscores.AvgScrRead]), desc).limit(1)\nres = df3.select([schools.District], avg([satscores.AvgScrRead]))\n```"}
{"idx": 16, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Alameda')\ndf2 = df1.where(element = satscores.NumTstTakr, filter = '< 100')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alameda')\ndf2 = df1.where(element = [MASK], filter = '< 100')\nres = df2.count()\n```"}
{"idx": 17, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.AvgScrWrite, filter = '> 499')\ndf2 = df1.where(element = schools.CharterNum, filter = 'is not null')\nres = df2.orderby(by = satscores.AvgScrWrite, desc).select(schools.School, schools.CharterNum, satscores.AvgScrWrite)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 499')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.orderby(by = [MASK], desc).select([MASK], [MASK], [MASK])\n```"}
{"idx": 18, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Fresno')\ndf2 = df1.where(element = schools.FundingType, filter = 'Directly Funded')\ndf3 = df2.where(element = satscores.NumTstTakr, filter = '<= 250')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fresno')\ndf2 = df1.where(element = [MASK], filter = 'Directly Funded')\ndf3 = df2.where(element = [MASK], filter = '<= 250')\nres = df3.count()\n```"}
{"idx": 19, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.AvgScrMath, filter = max(satscores.AvgScrMath))\nres = df1.select(schools.Phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 20, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`County Name`, filter = 'Amador')\ndf2 = df1.where(element = frpm.`Low Grade`, filter = '9')\ndf3 = df2.where(element = frpm.`High Grade`, filter = '12')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Amador')\ndf2 = df1.where(element = [MASK], filter = '9')\ndf3 = df2.where(element = [MASK], filter = '12')\nres = df3.count()\n```"}
{"idx": 21, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Los Angeles')\ndf2 = df1.where(element = frpm.`Free Meal Count (K-12)`, filter = '> 500')\ndf3 = df2.where(element = frpm.`FRPM Count (K-12)`, filter = '< 700')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Los Angeles')\ndf2 = df1.where(element = [MASK], filter = '> 500')\ndf3 = df2.where(element = [MASK], filter = '< 700')\nres = df3.count()\n```"}
{"idx": 22, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Contra Costa')\ndf2 = df1.orderby(by = satscores.NumTstTakr, desc).limit(1)\nres = df2.select(schools.School, satscores.NumTstTakr)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.County], filter = 'Contra Costa')\ndf2 = df1.orderby(by = [satscores.NumTstTakr], desc).limit(1)\nres = df2.select([schools.School, satscores.NumTstTakr])\n```"}
{"idx": 23, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = subtract(frpm.Enrollment (K-12), frpm.Enrollment (Ages 5-17)), filter = '> 30')\nres = df1.select(schools.School, concat(schools.Street, ', ', schools.City, ', ', schools.State, ' ', schools.Zip))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = subtract(frpm.Enrollment(K-12), frpm.Enrollment(Ages 5-17)), filter = '> 30')\nres = df1.select(schools.[MASK], concat(schools.[MASK], ', ', schools.[MASK], ', ', schools.[MASK], ' ', schools.[MASK]))\n```"}
{"idx": 24, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`Percent (%) Eligible Free (K-12)`, filter = '> 0.1')\ndf2 = df1.where(element = satscores.NumGE1500, filter = '> 0')\nres = df2.select(frpm.School Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 0.1')\ndf2 = df1.where(element = [MASK], filter = '> 0')\nres = df2.select([MASK])\n```"}
{"idx": 25, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Riverside')\ndf2 = df1.groupby(schools.School, schools.FundingType).having(element = avg(satscores.AvgScrMath), filter = '> 400')\nres = df2.select(schools.School, schools.FundingType)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Riverside')\ndf2 = df1.groupby([MASK], [MASK]).having(element = avg([MASK]), filter = '> 400')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 26, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Monterey')\ndf2 = df1.where(element = frpm.`High Grade`, filter = '12')\ndf3 = df2.where(element = frpm.`FRPM Count (Ages 5-17)`, filter = '> 800')\nres = df3.select(schools.School as SchoolName, concat(schools.Street, ', ', schools.City, ', ', schools.State, ' ', schools.Zip) as FullAddress)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Monterey')\ndf2 = df1.where(element = [MASK], filter = '12')\ndf3 = df2.where(element = [MASK], filter = '> 800')\nres = df3.select([MASK as SchoolName, concat([MASK], ', ', [MASK], ', ', [MASK], ' ', [MASK]) as FullAddress])\n```"}
{"idx": 27, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.OpenDate, filter = '> 1991-12-31').orwhere(element = schools.ClosedDate, filter = '< 2000-01-01')\ndf2 = df1.where(element = satscores.AvgScrWrite, filter = 'is not null')\nres = df2.select(schools.School, satscores.AvgScrWrite, schools.Phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK1], filter = '> 1991-12-31').orwhere(element = [MASK2], filter = '< 2000-01-01')\ndf2 = df1.where(element = [MASK3], filter = 'is not null')\nres = df2.select([MASK4], [MASK5], [MASK6])\n```"}
{"idx": 28, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.FundingType, filter = 'Locally Funded')\ndf2 = df1.select(schools.School, schools.DOCType, frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)` as EnrollmentDiff)\navg_diff = df2.select(avg(EnrollmentDiff))\nres = df2.where(element = EnrollmentDiff, filter = '> avg_diff').select(schools.School, schools.DOCType)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.FundingType], filter = 'Locally Funded')\ndf2 = df1.select([schools.School], [schools.DOCType], [frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`] as [EnrollmentDiff])\navg_diff = df2.select(avg([EnrollmentDiff]))\nres = df2.where(element = [EnrollmentDiff], filter = '> avg_diff').select([schools.School], [schools.DOCType])\n```"}
{"idx": 29, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`Low Grade`, filter = '1').where(element = frpm.`High Grade`, filter = '12')\ndf2 = df1.orderby(by = frpm.`Enrollment (K-12)`, desc).limit(1)\nres = df2.select(schools.School, schools.OpenDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1').where(element = [MASK], filter = '12')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 30, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`Enrollment (K-12)`, filter = 'is not null')\ndf2 = df1.orderby(by = frpm.`Enrollment (K-12)`, asc).limit(5)\nres = df2.select(schools.City, frpm.`Enrollment (K-12)`)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.orderby(by = [MASK], asc).limit(5)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 31, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.Enrollment (K-12), filter = 'is not null')\ndf2 = df1.orderby(by = frpm.Enrollment (K-12), desc).limit(10).offset(9)\nres = df2.select(frpm.CDSCode, frpm.Enrollment (K-12), frpm.Free Meal Count (K-12), (frpm.Free Meal Count (K-12) / frpm.Enrollment (K-12)) as EligibleFreeRate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.orderby(by = [MASK], desc).limit(10).offset(9)\nres = df2.select([MASK], [MASK], [MASK], (div([MASK], [MASK]) as [MASK]))\n```"}
{"idx": 32, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.DOC, filter = '66')\ndf2 = df1.orderby(by = frpm.FRPM Count (K-12), desc).limit(5)\nres = df2.select(schools.School, frpm.FRPM Count (K-12), frpm.Enrollment (K-12), (frpm.FRPM Count (K-12) / frpm.Enrollment (K-12)) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '66')\ndf2 = df1.orderby(by = [MASK], desc).limit(5)\nres = df2.select([MASK], [MASK], [MASK], ([MASK] / [MASK]) * 100)\n```"}
{"idx": 33, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`Free Meal Count (Ages 5-17)`, filter = 'BETWEEN 1900 AND 2000')\nres = df1.select(schools.School, schools.Website)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'BETWEEN 1900 AND 2000')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 34, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.AdmFName1, filter = 'Kacey').where(element = schools.AdmLName1, filter = 'Gibson')\ndf2 = df.where(element = schools.AdmFName2, filter = 'Kacey').where(element = schools.AdmLName2, filter = 'Gibson')\ndf3 = df.where(element = schools.AdmFName3, filter = 'Kacey').where(element = schools.AdmLName3, filter = 'Gibson')\ndf4 = df1.union(df2).union(df3)\nres = df4.select(frpm.CDSCode, frpm.`School Name`, frpm.`Free Meal Count (Ages 5-17)`, frpm.`Enrollment (Ages 5-17)`, divide(frpm.`Free Meal Count (Ages 5-17)`, frpm.`Enrollment (Ages 5-17)`) as FreeRate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.AdmFName1], filter = 'Kacey').where(element = [schools.AdmLName1], filter = 'Gibson')\ndf2 = df.where(element = [schools.AdmFName2], filter = 'Kacey').where(element = [schools.AdmLName2], filter = 'Gibson')\ndf3 = df.where(element = [schools.AdmFName3], filter = 'Kacey').where(element = [schools.AdmLName3], filter = 'Gibson')\ndf4 = df1.union(df2).union(df3)\nres = df4.select([frpm.CDSCode], [frpm.`School Name`], [frpm.`Free Meal Count (Ages 5-17)`], [frpm.`Enrollment (Ages 5-17)`], divide([frpm.`Free Meal Count (Ages 5-17)`], [frpm.`Enrollment (Ages 5-17)`]) as [FreeRate])\n```"}
{"idx": 35, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.`Charter School (Y/N)`, filter = 1)\ndf2 = df1.orderby(by = frpm.Enrollment (K-12), asc).limit(1)\nres = df2.select(schools.AdmEmail1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 36, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.NumGE1500, filter = max(satscores.NumGE1500))\nres = df1.select(schools.AdmFName1 || ' ' || schools.AdmLName1 as Admin1_FullName, \n                schools.AdmFName2 || ' ' || schools.AdmLName2 as Admin2_FullName, \n                schools.AdmFName3 || ' ' || schools.AdmLName3 as Admin3_FullName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = satscores.NumGE1500, filter = max(satscores.NumGE1500))\nres = df1.select(schools.AdmFName1 || ' ' || schools.AdmLName1 as Admin1_FullName, \n                schools.AdmFName2 || ' ' || schools.AdmLName2 as Admin2_FullName, \n                schools.AdmFName3 || ' ' || schools.AdmLName3 as Admin3_FullName)\n```"}
{"idx": 37, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.NumTstTakr, filter = '> 0')\nmin_ratio = df1.select(satscores.NumGE1500 * 1.0 / satscores.NumTstTakr).min()\ndf2 = df.where(element = satscores.NumGE1500 * 1.0 / satscores.NumTstTakr, filter = min_ratio)\nres = df2.select(schools.Street, schools.City, schools.Zip, schools.State)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [satscores.NumTstTakr], filter = '> 0')\nmin_ratio = df1.select([satscores.NumGE1500 * 1.0 / satscores.NumTstTakr]).min()\ndf2 = df.where(element = [satscores.NumGE1500 * 1.0 / satscores.NumTstTakr], filter = [min_ratio])\nres = df2.select([schools.Street, schools.City, schools.Zip, schools.State])\n```"}
{"idx": 38, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Los Angeles')\ndf2 = df1.where(element = satscores.NumTstTakr, filter = 'BETWEEN 2000 AND 3000')\nres = df2.select(schools.Website)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Los Angeles')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN 2000 AND 3000')\nres = df2.select([MASK])\n```"}
{"idx": 39, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Fresno')\ndf2 = df1.where(element = schools.OpenDate, filter = 'between 1980-01-01 and 1980-12-31')\nres = df2.select(avg(satscores.NumTstTakr))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fresno')\ndf2 = df1.where(element = [MASK], filter = 'between 1980-01-01 and 1980-12-31')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 40, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.District, filter = 'Fresno Unified')\ndf2 = df1.orderby(by = satscores.AvgScrRead, asc).limit(1)\nres = df2.select(schools.Phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fresno Unified')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 41, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.Virtual, filter = 'F')\ndf2 = df1.orderby(by = satscores.AvgScrRead, desc).limit(5)\nres = df2.select(schools.School)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.orderby(by = [MASK], desc).limit(5)\nres = df2.select([MASK])\n```"}
{"idx": 42, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.AvgScrMath, filter = max(satscores.AvgScrMath))\nres = df1.select(schools.EdOpsName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 43, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite, filter = min(satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite))\nres = df1.select(satscores.AvgScrMath, schools.County)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 44, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.NumGE1500, filter = max(satscores.NumGE1500))\nres = df1.select(satscores.AvgScrWrite, schools.City).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK]).limit(1)\n```"}
{"idx": 45, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.AdmFName1, filter = 'Ricci')\ndf2 = df1.where(element = schools.AdmLName1, filter = 'Ulrich')\nres = df2.select(schools.School, satscores.AvgScrWrite)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ricci')\ndf2 = df1.where(element = [MASK], filter = 'Ulrich')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 46, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.DOC, filter = '31')\ndf2 = df1.orderby(by = frpm.`Enrollment (K-12)`, desc)\nres = df2.select(schools.School, frpm.`Enrollment (K-12)`)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '31')\ndf2 = df1.orderby(by = [MASK], desc)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 47, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Alameda')\ndf2 = df1.where(element = schools.DOC, filter = '52')\ndf3 = df2.where(element = schools.OpenDate, filter = \"like '1980%'\")\nres = df3.count().divide(12.0)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alameda')\ndf2 = df1.where(element = [MASK], filter = '52')\ndf3 = df2.where(element = [MASK], filter = \"like '1980%'\")\nres = df3.count().divide(12.0)\n```"}
{"idx": 48, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Orange')\ndf2 = df1.where(element = schools.DOC, filter = '54')\ndf3 = df1.where(element = schools.DOC, filter = '52')\nres = df.select((df2.count() * 1.0 / df3.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [schools.County], filter = 'Orange')\ndf2 = df1.where(element = [schools.DOC], filter = '54')\ndf3 = df1.where(element = [schools.DOC], filter = '52')\nres = df.select((df2.count() * 1.0 / df3.count()))\n```"}
{"idx": 49, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.StatusType, filter = 'Closed').orwhere(element = schools.ClosedDate, filter = 'is not null')\ndf2 = df1.groupby(schools.County).count()\ndf3 = df2.orderby(by = count, desc).limit(1)\nres = df1.where(element = schools.County, filter = df3.select(schools.County)).orderby(by = schools.County, schools.ClosedDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.StatusType], filter = 'Closed').orwhere(element = [schools.ClosedDate], filter = 'is not null')\ndf2 = df1.groupby([schools.County]).count()\ndf3 = df2.orderby(by = [count], desc).limit(1)\nres = df1.where(element = [schools.County], filter = df3.select([schools.County])).orderby(by = [schools.County], [schools.ClosedDate])\n```"}
{"idx": 50, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = satscores.AvgScrMath, desc).limit(7)\nres = df1.select(schools.School, schools.Street)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(7)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 51, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = satscores.AvgScrRead, asc).limit(1)\nres = df1.select(schools.MailStreet, schools.School)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], asc).limit(1)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 52, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.MailCity, filter = 'Lakeport')\ndf2 = df1.where(element = (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite), filter = '>= 1500')\nres = df2.select(schools.CDSCode).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lakeport')\ndf2 = df1.where(element = [MASK], filter = '>= 1500')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 53, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.MailCity, filter = 'Fresno')\nres = df1.select(satscores.NumTstTakr).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fresno')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 54, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.AdmFName1, filter = 'Avetik').where(element = schools.AdmLName1, filter = 'Atoian')\ndf2 = df.where(element = schools.AdmFName2, filter = 'Avetik').where(element = schools.AdmLName2, filter = 'Atoian')\ndf3 = df.where(element = schools.AdmFName3, filter = 'Avetik').where(element = schools.AdmLName3, filter = 'Atoian')\nres = df1.union(df2).union(df3).select(schools.School, schools.MailZip)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.AdmFName1], filter = 'Avetik').where(element = [schools.AdmLName1], filter = 'Atoian')\ndf2 = df.where(element = [schools.AdmFName2], filter = 'Avetik').where(element = [schools.AdmLName2], filter = 'Atoian')\ndf3 = df.where(element = [schools.AdmFName3], filter = 'Avetik').where(element = [schools.AdmLName3], filter = 'Atoian')\nres = df1.union(df2).union(df3).select([schools.School], [schools.MailZip])\n```"}
{"idx": 55, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.MailState, filter = 'CA')\ndf2 = df1.groupby(schools.County).count()\ntmp_res1 = df2.where(element = schools.County, filter = 'Colusa').select(schools.County).sum()\ntmp_res2 = df2.where(element = schools.County, filter = 'Humboldt').select(schools.County).sum()\nres = df.select((tmp_res1 * 1.0) / tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CA')\ndf2 = df1.groupby([MASK]).count()\ntmp_res1 = df2.where(element = [MASK], filter = 'Colusa').select([MASK]).sum()\ntmp_res2 = df2.where(element = [MASK], filter = 'Humboldt').select([MASK]).sum()\nres = df.select((tmp_res1 * 1.0) / tmp_res2)\n```"}
{"idx": 56, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.MailState, filter = 'CA')\ndf2 = df1.where(element = schools.MailCity, filter = 'San Joaquin')\ndf3 = df2.where(element = schools.StatusType, filter = 'Active')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.MailState], filter = 'CA')\ndf2 = df1.where(element = [schools.MailCity], filter = 'San Joaquin')\ndf3 = df2.where(element = [schools.StatusType], filter = 'Active')\nres = df3.count()\n```"}
{"idx": 57, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.AvgScrWrite, filter = 'is not null')\ndf2 = df1.orderby(by = satscores.AvgScrWrite, desc).limit(333)\nres = df2.select(schools.Phone, schools.Ext)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.orderby(by = [MASK], desc).limit(333)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 58, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.Zip, filter = '95203-3704')\nres = df1.select(schools.School, schools.Phone, schools.Ext)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '95203-3704')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 59, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.AdmFName1, filter = 'Mike').where(element = schools.AdmLName1, filter = 'Larson')\ndf2 = df.where(element = schools.AdmFName2, filter = 'Dante').where(element = schools.AdmLName2, filter = 'Alvarez')\nres = df1.union(df2).select(schools.Website)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [schools.AdmFName1], filter = 'Mike').where(element = [schools.AdmLName1], filter = 'Larson')\ndf2 = df.where(element = [schools.AdmFName2], filter = 'Dante').where(element = [schools.AdmLName2], filter = 'Alvarez')\nres = df1.union(df2).select([schools.Website])\n```"}
{"idx": 60, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.Virtual, filter = 'P')\ndf2 = df1.where(element = schools.Charter, filter = 1)\ndf3 = df2.where(element = schools.County, filter = 'San Joaquin')\nres = df3.select(schools.Website)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'P')\ndf2 = df1.where(element = [MASK], filter = 1)\ndf3 = df2.where(element = [MASK], filter = 'San Joaquin')\nres = df3.select([MASK])\n```"}
{"idx": 61, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.City, filter = 'Hickman')\ndf2 = df1.where(element = schools.DOC, filter = 52)\ndf3 = df2.where(element = schools.Charter, filter = 1)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hickman')\ndf2 = df1.where(element = [MASK], filter = 52)\ndf3 = df2.where(element = [MASK], filter = 1)\nres = df3.count()\n```"}
{"idx": 62, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Los Angeles')\ndf2 = df1.where(element = schools.Charter, filter = 0)\ndf3 = df2.where(element = frpm.`Free Meal Count (K-12)`, filter = '< 0.18 * frpm.Enrollment (K-12)')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Los Angeles')\ndf2 = df1.where(element = [MASK], filter = 0)\ndf3 = df2.where(element = [MASK], filter = '< 0.18 * [MASK]')\nres = df3.count()\n```"}
{"idx": 63, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.Charter, filter = 1)\ndf2 = df1.where(element = schools.CharterNum, filter = '00D2')\nres = df2.select(schools.School, schools.City, concat(schools.AdmFName1, ' ', schools.AdmLName1) as Admin1, concat(schools.AdmFName2, ' ', schools.AdmLName2) as Admin2, concat(schools.AdmFName3, ' ', schools.AdmLName3) as Admin3)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = '00D2')\nres = df2.select([MASK], [MASK], concat([MASK], ' ', [MASK]) as Admin1, concat([MASK], ' ', [MASK]) as Admin2, concat([MASK], ' ', [MASK]) as Admin3)\n```"}
{"idx": 64, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.MailCity, filter = 'Hickman')\ndf2 = df1.where(element = schools.CharterNum, filter = '00D4')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hickman')\ndf2 = df1.where(element = [MASK], filter = '00D4')\nres = df2.count()\n```"}
{"idx": 65, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Santa Clara')\ndf2 = df1.where(element = schools.Charter, filter = 'is not null')\nres = df2.select((df2.where(element = schools.FundingType, filter = 'Locally Funded').count() * 100.0 / df2.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [schools.County], filter = 'Santa Clara')\ndf2 = df1.where(element = [schools.Charter], filter = 'is not null')\nres = df2.select((df2.where(element = [schools.FundingType], filter = 'Locally Funded').count() * 100.0 / df2.count()))\n```"}
{"idx": 66, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Stanislaus')\ndf2 = df1.where(element = schools.FundingType, filter = 'Directly Funded')\ndf3 = df2.where(element = schools.OpenDate, filter = 'between 2000-01-01 and 2005-12-31')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.County], filter = 'Stanislaus')\ndf2 = df1.where(element = [schools.FundingType], filter = 'Directly Funded')\ndf3 = df2.where(element = [schools.OpenDate], filter = 'between 2000-01-01 and 2005-12-31')\nres = df3.count()\n```"}
{"idx": 67, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.City, filter = 'San Francisco')\ndf2 = df1.where(element = schools.strftime('%Y', schools.ClosedDate), filter = '1989')\ndf3 = df2.where(element = schools.DOCType, filter = 'Community College District')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'San Francisco')\ndf2 = df1.where(element = [MASK], filter = '1989')\ndf3 = df2.where(element = [MASK], filter = 'Community College District')\nres = df3.count()\n```"}
{"idx": 68, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.ClosedDate, filter = 'between 1980-01-01 and 1989-12-31')\ndf2 = df1.where(element = schools.SOC, filter = '11')\ndf3 = df2.groupby(schools.County).agg(count(schools.*))\ndf4 = df3.orderby(by = count(schools.*), desc).limit(1)\nres = df4.select(schools.County, count(schools.*))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.ClosedDate], filter = 'between 1980-01-01 and 1989-12-31')\ndf2 = df1.where(element = [schools.SOC], filter = '11')\ndf3 = df2.groupby([schools.County]).agg(count([schools.*]))\ndf4 = df3.orderby(by = count([schools.*]), desc).limit(1)\nres = df4.select([schools.County], count([schools.*]))\n```"}
{"idx": 69, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.SOC, filter = '31')\nres = df1.select(schools.NCESDist)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '31')\nres = df1.select([MASK])\n```"}
{"idx": 70, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Alpine')\ndf2 = df1.where(element = schools.DOCType, filter = 'District Community Day School')\nres = df2.groupby(schools.StatusType).count().select(schools.StatusType, count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alpine')\ndf2 = df1.where(element = [MASK], filter = 'District Community Day School')\nres = df2.groupby([MASK]).count().select([MASK], count)\n```"}
{"idx": 71, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.City, filter = 'Fresno')\ndf2 = df1.where(element = schools.Magnet, filter = 0)\nres = df2.select(schools.District)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fresno')\ndf2 = df1.where(element = [MASK], filter = 0)\nres = df2.select([MASK])\n```"}
{"idx": 72, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.City, filter = 'Fremont')\ndf2 = df1.where(element = schools.EdOpsCode, filter = 'SSS')\ndf3 = df2.where(element = frpm.Academic Year, filter = '2014-2015')\nres = df3.select(sum(frpm.Enrollment))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fremont')\ndf2 = df1.where(element = [MASK], filter = 'SSS')\ndf3 = df2.where(element = [MASK], filter = '2014-2015')\nres = df3.select(sum([MASK]))\n```"}
{"idx": 73, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.MailStreet, filter = 'PO Box 1040')\ndf2 = df1.where(element = schools.EdOpsName, filter = 'Youth Authority School')\nres = df2.select(frpm.`FRPM Count (Ages 5-17)`)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.MailStreet], filter = 'PO Box 1040')\ndf2 = df1.where(element = [schools.EdOpsName], filter = 'Youth Authority School')\nres = df2.select([frpm.`FRPM Count (Ages 5-17)'])\n```"}
{"idx": 74, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.EdOpsCode, filter = 'SPECON')\ndf2 = df1.where(element = schools.NCESDist, filter = '0613360')\nres = df2.select(frpm.Low Grade)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SPECON')\ndf2 = df1.where(element = [MASK], filter = '0613360')\nres = df2.select([MASK])\n```"}
{"idx": 75, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.County Code, filter = '37')\ndf2 = df1.where(element = frpm.NSLP Provision Status, filter = 'Breakfast Provision 2')\nres = df2.select(frpm.School Name, frpm.Educational Option Type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '37')\ndf2 = df1.where(element = [MASK], filter = 'Breakfast Provision 2')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 76, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = frpm.NSLP Provision Status, filter = '2')\ndf2 = df1.where(element = frpm.Low Grade, filter = '9')\ndf3 = df2.where(element = frpm.High Grade, filter = '12')\ndf4 = df3.where(element = frpm.County Name, filter = 'Merced')\ndf5 = df4.where(element = schools.EILCode, filter = 'HS')\nres = df5.select(schools.City)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2')\ndf2 = df1.where(element = [MASK], filter = '9')\ndf3 = df2.where(element = [MASK], filter = '12')\ndf4 = df3.where(element = [MASK], filter = 'Merced')\ndf5 = df4.where(element = [MASK], filter = 'HS')\nres = df5.select([MASK])\n```"}
{"idx": 77, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'Los Angeles')\ndf2 = df1.where(element = frpm.Low Grade, filter = 'K').where(element = frpm.High Grade, filter = '9')\ndf3 = df2.where(element = frpm.Enrollment (Ages 5-17), filter = 'is not null').where(element = frpm.FRPM Count (Ages 5-17), filter = 'is not null')\nres = df3.select(schools.School, multiply(divide(frpm.FRPM Count (Ages 5-17), frpm.Enrollment (Ages 5-17)), 100) as PercentEligibleFRPM)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Los Angeles')\ndf2 = df1.where(element = [MASK], filter = 'K').where(element = [MASK], filter = '9')\ndf3 = df2.where(element = [MASK], filter = 'is not null').where(element = [MASK], filter = 'is not null')\nres = df3.select([MASK], multiply(divide([MASK], [MASK]), 100) as [MASK])\n```"}
{"idx": 78, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.City, filter = 'Adelanto')\ndf2 = df1.groupby(schools.GSserved).count()\nres = df2.orderby(by = count, desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Adelanto')\ndf2 = df1.groupby([MASK]).count()\nres = df2.orderby(by = count, desc).limit(1)\n```"}
{"idx": 79, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'San Diego').where(element = schools.Virtual, filter = 'F')\ndf2 = df.where(element = schools.County, filter = 'Santa Barbara').where(element = schools.Virtual, filter = 'F')\ndf3 = df1.union(df2)\nres = df3.groupby(schools.County).count().orderby(by = count(schools.*), desc)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.County], filter = 'San Diego').where(element = [schools.Virtual], filter = 'F')\ndf2 = df.where(element = [schools.County], filter = 'Santa Barbara').where(element = [schools.Virtual], filter = 'F')\ndf3 = df1.union(df2)\nres = df3.groupby([schools.County]).count().orderby(by = count([schools.*]), desc)\n```"}
{"idx": 80, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.Latitude, filter = max(schools.Latitude))\nres = df1.select(schools.School, schools.StatusType, schools.Latitude)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 81, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.State, filter = 'CA')\ndf2 = df1.orderby(by = schools.Latitude, asc).limit(1)\nres = df2.select(schools.School, schools.City, schools.GSoffered as Lowest_Grade)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [schools.State], filter = 'CA')\ndf2 = df1.orderby(by = [schools.Latitude], asc).limit(1)\nres = df2.select([schools.School, schools.City, schools.Grade_offered as Lowest_Grade])\n```"}
{"idx": 82, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = schools.Longitude, desc, by_type = abs).limit(1)\nres = df1.select(schools.GSoffered)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc, by_type = abs).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 83, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.Magnet, filter = 1).where(element = schools.GSserved, filter = 'K-8')\ndf2 = df1.where(element = frpm.NSLP Provision Status, filter = 'Multiple Provision Types')\nres = df.select(\n    df2.count(), \n    df.groupby(schools.City).count().select(schools.CDSCode).orderby(by = schools.City).limit(10).select(schools.City), \n    df.groupby(schools.City).count().select(schools.CDSCode)\n)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1).where(element = [MASK], filter = 'K-8')\ndf2 = df1.where(element = [MASK], filter = 'Multiple Provision Types')\nres = df.select(\n    df2.count(), \n    df.groupby([MASK]).count().select([MASK]).orderby(by = [MASK]).limit(10).select([MASK]), \n    df.groupby([MASK]).count().select([MASK])\n)\n```"}
{"idx": 84, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.select(schools.AdmFName1 as FirstName, schools.District)\ndf2 = df.select(schools.AdmFName2 as FirstName, schools.District)\ndf3 = df.select(schools.AdmFName3 as FirstName, schools.District)\n\ndf4 = df1.union(df2).union(df3)\ndf5 = df4.where(element = FirstName, filter = 'is not null')\ndf6 = df5.groupby(FirstName, District).count()\n\ndf7 = df6.orderby(by = TotalCount, desc).limit(2)\nres = df7.select(FirstName, District, TotalCount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.select([MASK1 as FirstName, schools.District])\ndf2 = df.select([MASK2 as FirstName, schools.District])\ndf3 = df.select([MASK3 as FirstName, schools.District])\n\ndf4 = df1.union(df2).union(df3)\ndf5 = df4.where(element = [MASK], filter = 'is not null')\ndf6 = df5.groupby([MASK], [MASK]).count()\n\ndf7 = df6.orderby(by = [MASK], desc).limit(2)\nres = df7.select([MASK], [MASK], [MASK])\n```"}
{"idx": 85, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.AdmFName1, filter = 'Alusine')\ndf2 = df1.where(element = frpm.Enrollment (K-12), filter = '> 0')\ndf3 = df2.where(element = frpm.`Free Meal Count (K-12) / Enrollment (K-12) * 100`, filter = '= frpm.`Percent (%) Eligible Free (K-12)`)\nres = df3.select(frpm.`District Code`)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alusine')\ndf2 = df1.where(element = [MASK], filter = '> 0')\ndf3 = df2.where(element = [MASK], filter = '= [MASK]')\nres = df3.select([MASK])\n```"}
{"idx": 86, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.CharterNum, filter = '40')\nres = df1.select(schools.AdmLName1, schools.District, schools.County, schools.School)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '40')\nres = df1.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 87, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = schools.County, filter = 'San Bernardino')\ndf2 = df1.where(element = schools.District, filter = 'San Bernardino City Unified')\ndf3 = df2.where(element = schools.OpenDate, filter = 'between 2009-01-01 and 2010-12-31')\ndf4 = df3.where(element = schools.SOC, filter = '62').orwhere(element = schools.DOC, filter = '54')\ndf5 = df4.where(element = schools.AdmEmail1, filter = 'is not null').orwhere(element = schools.AdmEmail2, filter = 'is not null').orwhere(element = schools.AdmEmail3, filter = 'is not null')\nres = df5.select(schools.AdmEmail1, schools.AdmEmail2, schools.AdmEmail3)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'San Bernardino')\ndf2 = df1.where(element = [MASK], filter = 'San Bernardino City Unified')\ndf3 = df2.where(element = [MASK], filter = 'between 2009-01-01 and 2010-12-31')\ndf4 = df3.where(element = [MASK], filter = '62').orwhere(element = [MASK], filter = '54')\ndf5 = df4.where(element = [MASK], filter = 'is not null').orwhere(element = [MASK], filter = 'is not null').orwhere(element = [MASK], filter = 'is not null')\nres = df5.select([MASK], [MASK], [MASK])\n```"}
{"idx": 88, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = satscores.NumGE1500, filter = max(satscores.NumGE1500))\nres = df1.select(schools.School, schools.AdmEmail1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MAX(satscores.NumGE1500)], filter = [MAX(satscores.NumGE1500)])\nres = df1.select([schools.School, schools.AdmEmail1])\n```"}
{"idx": 89, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.type, filter = 'POPLATEK PO OBRATU')\ndf2 = df1.where(element = district.A3, filter = 'East Bohemia')\nres = df2.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK PO OBRATU')\ndf2 = df1.where(element = [MASK], filter = 'East Bohemia')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 90, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'Prague')\nres = df1.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Prague')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 91, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\nres = df.select(avg(district.A12) as avg_unemployment_1995, avg(district.A13) as avg_unemployment_1996)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\nres = df.select(avg([MASK].A12) as avg_unemployment_1995, avg([MASK].A13) as avg_unemployment_1996)\n```"}
{"idx": 92, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A11, filter = '> 6000')\ndf2 = df1.where(element = district.A11, filter = '< 10000')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 6000')\ndf2 = df1.where(element = [MASK], filter = '< 10000')\nres = df2.count()\n```"}
{"idx": 93, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'M')\ndf2 = df1.where(element = district.A3, filter = 'North Bohemia')\ndf3 = df2.where(element = district.A11, filter = '> 8000')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = 'North Bohemia')\ndf3 = df2.where(element = [MASK], filter = '> 8000')\nres = df3.count()\n```"}
{"idx": 94, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F').groupby(client.district_id).agg(min(client.birth_date))\ndf2 = df.groupby(district.district_id).agg(min(district.A11)).orderby(by = min(district.A11)).limit(1)\ndf3 = df.groupby(district.district_id).agg(max(district.A11))\ndf4 = df.where(element = disp.client_id, filter = in(df1.client_id)).where(element = disp.district_id, filter = in(df2.district_id))\nres = df4.select(disp.account_id, df3.max(district.A11) - df2.min(district.A11))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'F').groupby([MASK]).agg(min([MASK]))\ndf2 = df.groupby([MASK]).agg(min([MASK])).orderby(by = min([MASK])).limit(1)\ndf3 = df.groupby([MASK]).agg(max([MASK]))\ndf4 = df.where(element = [MASK], filter = in(df1.[MASK])).where(element = [MASK], filter = in(df2.[MASK]))\nres = df4.select([MASK], df3.max([MASK]) - df2.min([MASK]))\n```"}
{"idx": 95, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.birth_date, filter = max(client.birth_date))\ndf2 = df.where(element = district.A11, filter = max(district.A11))\ndf3 = df1.intersect(df2)\nres = df3.select(account.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = max([MASK]))\ndf2 = df.where(element = [MASK], filter = max([MASK]))\ndf3 = df1.intersect(df2)\nres = df3.select([MASK])\n```"}
{"idx": 96, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = disp.type, filter = 'Owner')\nres = df2.select(disp.client_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = [MASK], filter = 'Owner')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 97, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK PO OBRATU')\ndf2 = df1.where(element = disp.type, filter = 'DISPONENT')\nres = df2.select(disp.client_id).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK PO OBRATU')\ndf2 = df1.where(element = [MASK], filter = 'DISPONENT')\nres = df2.select([MASK]).distinct()\n```"}
{"idx": 98, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.status, filter = 'approved').where(element = strftime(loan.date, '%Y'), filter = '1997')\ndf2 = df1.where(element = account.frequency, filter = 'POPLATEK TYDNE')\ndf3 = df1.orderby(by = loan.amount).limit(1)\nres = df2.where(element = loan.account_id, filter = df3.select(loan.account_id))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [loan.status], filter = 'approved').where(element = [loan.date], filter = '1997')\ndf2 = df1.where(element = [account.frequency], filter = 'POPLATEK TYDNE')\ndf3 = df1.orderby(by = [loan.amount]).limit(1)\nres = df2.where(element = [loan.account_id], filter = df3.select([loan.account_id]))\n```"}
{"idx": 99, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.date, filter = 'year = 1993')\ndf2 = df1.where(element = loan.duration, filter = '> 12')\ndf3 = df2.orderby(by = loan.amount, desc).limit(1)\nres = df3.select(loan.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'year = 1993')\ndf2 = df1.where(element = [MASK], filter = '> 12')\ndf3 = df2.orderby(by = [MASK], desc).limit(1)\nres = df3.select([MASK])\n```"}
{"idx": 100, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\ndf2 = df1.where(element = client.birth_date, filter = '< 1950-01-01')\ndf3 = df2.where(element = district.A2, filter = 'Sokolov')\nres = df3.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '< 1950-01-01')\ndf3 = df2.where(element = [MASK], filter = 'Sokolov')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 101, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.date, filter = 'year = 1995')\ndf2 = df1.orderby(by = trans.date).limit(1)\nres = df2.select(trans.account_id).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [trans.date], filter = 'year = 1995')\ndf2 = df1.orderby(by = [trans.date]).limit(1)\nres = df2.select([trans.account_id]).distinct()\n```"}
{"idx": 102, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.date, filter = \"< '1997-01-01'\")\ndf2 = df1.where(element = trans.balance, filter = '> 3000')\nres = df2.select(distinct(account.account_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< ''1997-01-01'')\ndf2 = df1.where(element = [MASK], filter = '> 3000')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 103, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.issued, filter = '1994-03-03')\nres = df1.select(client.client_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1994-03-03')\nres = df1.select([MASK])\n```"}
{"idx": 104, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.amount, filter = 840)\ndf2 = df1.where(element = trans.date, filter = '1998-10-14')\nres = df2.select(account.date).as(account_opened_date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [trans.amount], filter = 840)\ndf2 = df1.where(element = [trans.date], filter = '1998-10-14')\nres = df2.select([account.date]).as([account_opened_date])\n```"}
{"idx": 105, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.date, filter = '1994-08-25')\nres = df1.select(account.district_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1994-08-25')\nres = df1.select([MASK])\n```"}
{"idx": 106, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.issued, filter = '1996-10-21')\nres = df1.select(max(trans.amount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1996-10-21')\nres = df1.select(max([MASK]))\n```"}
{"idx": 107, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = district.A11, desc).limit(1)\ndf2 = df.where(element = client.district_id, filter = df1.select(district.district_id))\ndf3 = df2.orderby(by = client.birth_date).limit(1)\nres = df3.select(client.gender)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\ndf2 = df.where(element = [MASK], filter = df1.select([MASK]))\ndf3 = df2.orderby(by = [MASK]).limit(1)\nres = df3.select([MASK])\n```"}
{"idx": 108, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = loan.amount, desc).limit(1)\ndf2 = df.where(element = disp.account_id, filter = df1.select(loan.account_id))\ndf3 = df.where(element = trans.account_id, filter = df2.select(disp.account_id)).groupby(trans.account_id).agg(min(trans.date))\nres = df3.select(trans.amount)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.orderby(by = [MASK], desc).limit(1)\ndf2 = df.where(element = [MASK], filter = df1.select([MASK]))\ndf3 = df.where(element = [MASK], filter = df2.select([MASK])).groupby([MASK]).agg(min([MASK]))\nres = df3.select([MASK])\n```"}
{"idx": 109, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A2, filter = 'Jesenik')\ndf2 = df1.where(element = client.gender, filter = 'F')\nres = df2.count(distinct = client.client_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Jesenik')\ndf2 = df1.where(element = [MASK], filter = 'F')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 110, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.date, filter = '1998-09-02')\ndf2 = df1.where(element = trans.amount, filter = 5100)\nres = df2.select(disp.disp_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1998-09-02')\ndf2 = df1.where(element = [MASK], filter = 5100)\nres = df2.select([MASK])\n```"}
{"idx": 111, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A2, filter = 'Litomerice')\ndf2 = df.where(element = account.date, filter = \"like '1996%'\")\nres = df2.where(element = account.district_id, filter = df1.select(district.district_id)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Litomerice')\ndf2 = df.where(element = [MASK], filter = \"like '1996%'\")\nres = df2.where(element = [MASK], filter = df1.select([MASK])).count()\n```"}
{"idx": 112, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\ndf2 = df1.where(element = client.birth_date, filter = '1976-01-29')\nres = df2.select(district.A2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '1976-01-29')\nres = df2.select([MASK])\n```"}
{"idx": 113, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.amount, filter = 98832)\ndf2 = df1.where(element = loan.date, filter = '1996-01-03')\nres = df2.select(client.birth_date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 98832)\ndf2 = df1.where(element = [MASK], filter = '1996-01-03')\nres = df2.select([MASK])\n```"}
{"idx": 114, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'Prague')\ndf2 = df1.orderby(by = account.date, asc).limit(1)\nres = df2.select(account.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Prague')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 115, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'south Bohemia').orderby(by = cast(district.A4, int), desc).limit(1)\ndf2 = df.where(element = client.district_id, filter = df1.select(district.district_id)).select(client.gender).groupby().agg(count(), case(when = 'M', then = 1, else = 0).sum())\nres = df2.select((df2.select(case(when = 'M', then = 1, else = 0).sum()) * 100.0 / df2.select(count())))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [A3], filter = 'south Bohemia').orderby(by = cast([A4], int), desc).limit(1)\ndf2 = df.where(element = [district_id], filter = df1.select([district.district_id])).select([gender]).groupby().agg(count(), case(when = 'M', then = 1, else = 0).sum())\nres = df2.select((df2.select(case(when = 'M', then = 1, else = 0).sum()) * 100.0 / df2.select(count())))\n```"}
{"idx": 116, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.date, filter = '1993-07-05').orderby(by = loan.loan_id).limit(1)\ntmp_res1 = df1.select(loan.loan_id, loan.account_id)\n\ndf2 = df.where(element = disp.account_id, filter = 'in', value = tmp_res1.select(loan.account_id))\ntmp_res2 = df2.select(disp.client_id, disp.account_id)\n\ndf3 = df.where(element = trans.account_id, filter = 'in', value = tmp_res2.select(disp.account_id)).groupby(trans.account_id).select(trans.balance).where(element = trans.date, filter = '1993-03-22').max() as balance_1993_03_22, trans.balance.where(element = trans.date, filter = '1998-12-27').max() as balance_1998_12_27)\ntmp_res3 = df3.select(account_id, balance_1998_12_27, balance_1993_03_22)\n\nres = tmp_res3.select(account_id, (balance_1998_12_27 - balance_1993_03_22) / balance_1993_03_22 * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '1993-07-05').orderby(by = [MASK]).limit(1)\ntmp_res1 = df1.select([MASK], [MASK])\n\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1.select([MASK]))\ntmp_res2 = df2.select([MASK], [MASK])\n\ndf3 = df.where(element = [MASK], filter = 'in', value = tmp_res2.select([MASK])).groupby([MASK]).select(max([MASK]) as [MASK], max([MASK]) as [MASK])\ntmp_res3 = df3.select([MASK], [MASK], [MASK])\n\nres = tmp_res3.select([MASK], (([MASK] - [MASK]) / [MASK] * 100))\n```"}
{"idx": 117, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.status, filter = 'A')\ntmp_res1 = df1.select(loan.amount).sum()\n\ntmp_res2 = df.select(loan.amount).sum()\n\nres = df.select((tmp_res1 * 100.0) / tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [loan.status], filter = 'A')\ntmp_res1 = df1.select([loan.amount]).sum()\n\ntmp_res2 = df.select([loan.amount]).sum()\n\nres = df.select((tmp_res1 * 100.0) / tmp_res2)\n```"}
{"idx": 118, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.amount, filter = '< 100000')\ndf2 = df1.where(element = loan.status, filter = 'C')\nres = df.select(cast(df2.count(distinct = loan.account_id), real) / df1.count(distinct = loan.account_id) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [loan.amount], filter = '< 100000')\ndf2 = df1.where(element = [loan.status], filter = 'C')\nres = df.select(cast(df2.count(distinct = [loan.account_id]), real) / df1.count(distinct = [loan.account_id]) * 100)\n```"}
{"idx": 119, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.date, filter = 'year = 1993')\ndf2 = df1.where(element = trans.k_symbol, filter = 'POPLATEK PO OBRATU')\nres = df2.select(account.account_id, district.A2 as district_name, district.A3 as district_region).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'year = 1993')\ndf2 = df1.where(element = [MASK], filter = 'POPLATEK PO OBRATU')\nres = df2.select([MASK], [MASK], [MASK]).distinct()\n```"}
{"idx": 120, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'east Bohemia')\ndf2 = df1.where(element = account.date, filter = 'between 1995-01-01 and 2000-12-31')\ndf3 = df2.where(element = disp.type, filter = 'OWNER')\nres = df3.select(account.account_id, account.frequency)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'east Bohemia')\ndf2 = df1.where(element = [MASK], filter = 'between 1995-01-01 and 2000-12-31')\ndf3 = df2.where(element = [MASK], filter = 'OWNER')\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 121, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A2, filter = 'Prachatice')\nres = df.where(element = account.district_id, filter = df1.district_id).select(account.account_id, account.date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Prachatice')\nres = df.where(element = [MASK], filter = df1.[MASK]).select([MASK], [MASK])\n```"}
{"idx": 122, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(loan.loan_id, filter = 4990)\nres = df1.select(district.A2 as district, district.A3 as region)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(loan.[MASK], filter = 4990)\nres = df1.select(district.[MASK] as district, district.[MASK] as region)\n```"}
{"idx": 123, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(loan.amount, filter = '> 300000')\nres = df1.select(loan.account_id, district.A2 as district, district.A3 as region)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(loan.[MASK], filter = '> 300000')\nres = df1.select(loan.[MASK], district.[MASK], district.[MASK])\n```"}
{"idx": 124, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.duration, filter = 60)\nres = df1.select(loan.loan_id, district.A3 as district, district.A11 as average_salary)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [loan.duration], filter = 60)\nres = df1.select([loan.loan_id], [district.A3 as district], [district.A11 as average_salary])\n```"}
{"idx": 125, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.status, filter = 'D')\ndf2 = df1.groupby(district.district_id).select(district.district_id, (district.A13 - district.A12) / district.A12 * 100 as unemployment_rate_increment)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'D')\ndf2 = df1.groupby([MASK]).select([MASK], (district.A13 - district.A12) / district.A12 * 100 as [MASK])\n```"}
{"idx": 126, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.date, filter = 'like 1993%')\ndf2 = df1.where(element = district.A2, filter = 'Decin')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like 1993%')\ndf2 = df1.where(element = [MASK], filter = 'Decin')\nres = df2.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 127, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK MESICNE')\nres = df1.select(account.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK MESICNE')\nres = df1.select([MASK])\n```"}
{"idx": 128, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\ndf2 = df1.groupby(district.district_id).count(distinct(client.client_id))\nres = df2.orderby(by = count(client.client_id), desc).limit(9)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.groupby([MASK]).count(distinct([MASK]))\nres = df2.orderby(by = count([MASK]), desc).limit(9)\n```"}
{"idx": 129, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.type, filter = 'VYDAJ')\ndf2 = df1.where(element = trans.date, filter = 'like 1996-01%')\ndf3 = df2.groupby(district.A2).agg(sum(trans.amount))\ndf4 = df3.orderby(by = sum(trans.amount), desc).limit(10)\nres = df4.select(district.A2, sum(trans.amount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'VYDAJ')\ndf2 = df1.where(element = [MASK], filter = 'like 1996-01%')\ndf3 = df2.groupby([MASK]).agg(sum([MASK]))\ndf4 = df3.orderby(by = sum([MASK]), desc).limit(10)\nres = df4.select([MASK], sum([MASK]))\n```"}
{"idx": 130, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'South Bohemia')\ndf2 = df1.where(element = card.card_id, filter = 'is NULL')\nres = df2.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'South Bohemia')\ndf2 = df1.where(element = [MASK], filter = 'is NULL')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 131, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.status, filter = 'C').or(element = loan.status, filter = 'D')\ndf2 = df1.groupby(district.district_id).agg(sum(loan.amount))\ndf3 = df2.orderby(by = sum(loan.amount), desc).limit(1)\nres = df3.select(district.district_id, sum(loan.amount) as total_active_loan)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [loan.status], filter = 'C').or(element = [loan.status], filter = 'D')\ndf2 = df1.groupby([district.district_id]).agg(sum([loan.amount]))\ndf3 = df2.orderby(by = sum([loan.amount]), desc).limit(1)\nres = df3.select([district.district_id], sum([loan.amount]) as [total_active_loan])\n```"}
{"idx": 132, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'M')\nres = df1.select(avg(loan.amount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 133, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = district.A13, desc)\nres = df1.select(district.A2 as district_name, district.A4 as branch_location, district.A13 as unemployment_rate_1996)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc)\nres = df1.select([MASK] as [MASK], [MASK] as [MASK], [MASK] as [MASK])\n```"}
{"idx": 134, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A16, filter = max(district.A16))\nres = df1.count(account.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.count([MASK])\n```"}
{"idx": 135, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.operation, filter = 'VYBER KARTOU')\ndf2 = df1.where(element = trans.balance, filter = '< 0')\ndf3 = df2.where(element = account.frequency, filter = 'POPLATEK MESICNE')\nres = df3.select(distinct(account.account_id))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [trans.operation], filter = 'VYBER KARTOU')\ndf2 = df1.where(element = [trans.balance], filter = '< 0')\ndf3 = df2.where(element = [account.frequency], filter = 'POPLATEK MESICNE')\nres = df3.select(distinct([account.account_id]))\n```"}
{"idx": 136, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.amount, filter = '>= 250000')\ndf2 = df1.where(element = loan.status, filter = 'A')\ndf3 = df2.where(element = loan.date, filter = 'between 1995-01-01 and 1997-12-31')\ndf4 = df3.where(element = account.frequency, filter = 'POPLATEK MESICNE')\nres = df4.select(loan.loan_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 250000')\ndf2 = df1.where(element = [MASK], filter = 'A')\ndf3 = df2.where(element = [MASK], filter = 'between 1995-01-01 and 1997-12-31')\ndf4 = df3.where(element = [MASK], filter = 'POPLATEK MESICNE')\nres = df4.select([MASK]).distinct().count()\n```"}
{"idx": 137, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A2, filter = 'Branch location 1')\ndf2 = df1.where(element = loan.status, filter = 'IN', values = ['C', 'D'])\nres = df2.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Branch location 1')\ndf2 = df1.where(element = [MASK], filter = 'IN', values = ['C', 'D'])\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 138, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'M')\ndf2 = df.orderby(by = district.A15, desc).limit(2)\ndf3 = df1.where(element = client.district_id, filter = df2.select(district.district_id))\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df.orderby(by = [MASK], desc).limit(2)\ndf3 = df1.where(element = [MASK], filter = df2.select([MASK]))\nres = df3.count()\n```"}
{"idx": 139, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.type, filter = 'gold')\ndf2 = df1.where(element = disp.type, filter = 'OWNER')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'gold')\ndf2 = df1.where(element = [MASK], filter = 'OWNER')\nres = df2.count()\n```"}
{"idx": 140, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A2, filter = 'Pisek')\ntmp_res1 = df1.select(district.district_id)\n\ndf2 = df.where(element = account.district_id, filter = 'in', value = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Pisek')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df2.count()\n```"}
{"idx": 141, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.amount, filter = '> 10000')\ndf2 = df1.where(element = trans.date, filter = \"like '1997%'\")\nres = df2.select(district.district_id, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [trans.amount], filter = '> 10000')\ndf2 = df1.where(element = [trans.date], filter = \"like '1997%'\")\nres = df2.select([district.district_id, district.A2, district.A3, district.A4, district.A5, district.A6, district.A7]).distinct()\n```"}
{"idx": 142, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'Pisek')\ndf2 = df1.where(element = order.k_symbol, filter = 'SIPO')\nres = df2.select(distinct(order.account_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Pisek')\ndf2 = df1.where(element = [MASK], filter = 'SIPO')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 143, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.type, filter = 'gold')\nres = df1.select(distinct(account.account_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'gold')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 144, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.operation, filter = 'VYBER KARTOU').where(element = trans.date, filter = \"like '2021%'\")\ndf2 = df1.groupby(trans.date).agg(avg_amount = avg(trans.amount))\nres = df2.select(avg(avg_amount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [trans.operation], filter = 'VYBER KARTOU').where(element = [trans.date], filter = \"like '2021%'\")\ndf2 = df1.groupby([trans.date]).agg(avg_amount = avg([trans.amount]))\nres = df2.select(avg(avg_amount))\n```"}
{"idx": 145, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.operation, filter = 'VYBER KARTOU').where(element = trans.date, filter = \"like '1998%'\")\ndf2 = df1.select(trans.account_id, trans.amount).avg(trans.amount)\ndf3 = df1.where(element = trans.amount, filter = '< df2.avg_amount')\nres = df3.select(distinct(disp.client_id)).where(element = disp.type, filter = 'OWNER')\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [trans.operation], filter = 'VYBER KARTOU').where(element = [trans.date], filter = \"like '1998%'\")\ndf2 = df1.select([trans.account_id], [trans.amount]).avg([trans.amount])\ndf3 = df1.where(element = [trans.amount], filter = '< df2.avg_amount')\nres = df3.select(distinct([disp.[MASK])).where(element = [disp.[MASK]], filter = 'OWNER')\n```"}
{"idx": 146, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\nres = df1.select(distinct(client.client_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 147, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\ndf2 = df1.where(element = district.A3, filter = 'south Bohemia')\nres = df2.count(distinct = account.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = 'south Bohemia')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 148, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A2, filter = 'Tabor')\ndf2 = df1.where(element = disp.type, filter = 'OWNER')\nres = df2.select(account.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Tabor')\ndf2 = df1.where(element = [MASK], filter = 'OWNER')\nres = df2.select([MASK])\n```"}
{"idx": 149, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A11, filter = '> 8000')\ndf2 = df1.where(element = district.A11, filter = '<= 9000')\ndf3 = df2.where(element = disp.type, filter = \"!= 'OWNER'\")\nres = df3.select(disp.type).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 8000')\ndf2 = df1.where(element = [MASK], filter = '<= 9000')\ndf3 = df2.where(element = [MASK], filter = \"!= 'OWNER'\")\nres = df3.select([MASK]).distinct()\n```"}
{"idx": 150, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'North Bohemia')\ndf2 = df1.where(element = trans.bank, filter = 'AB')\nres = df2.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'North Bohemia')\ndf2 = df1.where(element = [MASK], filter = 'AB')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 151, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.type, filter = 'VYDAJ')\nres = df1.select(district.A2).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'VYDAJ')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 152, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.date, filter = '>= 1997', mode = 'year')\ndf2 = df1.where(element = district.A15, filter = '> 4000')\nres = df2.select(avg(district.A15))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 1997', mode = 'year')\ndf2 = df1.where(element = [MASK], filter = '> 4000')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 153, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = disp.type, filter = 'OWNER')\ndf2 = df1.where(element = card.type, filter = 'classic')\nres = df2.count(distinct = card.card_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'OWNER')\ndf2 = df1.where(element = [MASK], filter = 'classic')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 154, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'M')\ndf2 = df1.where(element = district.A2, filter = 'Hl.m. Praha')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = 'Hl.m. Praha')\nres = df2.count()\n```"}
{"idx": 155, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.type, filter = 'gold').where(element = card.issued, filter = '< 1998-01-01')\nres = df.select(cast(df1.count(), real) * 100 / df.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [card.type], filter = 'gold').where(element = [card.issued], filter = '< 1998-01-01')\nres = df.select(cast(df1.count(), real) * 100 / [df.count()])\n```"}
{"idx": 156, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.amount, filter = max(loan.amount))\nres = df1.select(client.client_id, client.gender, client.birth_date, client.district_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 157, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.account_id, filter = 532)\nres = df1.select(district.A15).as(crimes_1995)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 532)\nres = df1.select([MASK]).as([MASK])\n```"}
{"idx": 158, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = order.order_id, filter = 33333)\nres = df1.select(district.district_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 33333)\nres = df1.select([MASK])\n```"}
{"idx": 159, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.client_id, filter = 3356)\ndf2 = df1.where(element = trans.operation, filter = 'VYBER')\nres = df2.select(trans.*)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 3356)\ndf2 = df1.where(element = [MASK], filter = 'VYBER')\nres = df2.select([MASK])\n```"}
{"idx": 160, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = loan.amount, filter = '< 200000')\nres = df2.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = [MASK], filter = '< 200000')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 161, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = disp.client_id, filter = 13539)\nres = df1.select(card.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 13539)\nres = df1.select([MASK])\n```"}
{"idx": 162, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.client_id, filter = 3541)\nres = df1.select(district.A3).as(region)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 3541)\nres = df1.select([MASK]).as([MASK])\n```"}
{"idx": 163, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.status, filter = 'A')\ndf2 = df1.groupby(district.district_id).count(account.account_id)\nres = df2.orderby(by = count(account.account_id), desc).limit(1).select(district.district_id, count(account.account_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [loan.status], filter = 'A')\ndf2 = df1.groupby([district.district_id]).count([account.account_id])\nres = df2.orderby(by = [count([account.account_id])], desc).limit(1).select([district.district_id], [count([account.account_id])])\n```"}
{"idx": 164, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = order.order_id, filter = 32423)\nres = df1.select(client.client_id, client.gender, client.birth_date, client.district_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 32423)\nres = df1.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 165, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.district_id, filter = 5)\nres = df1.select(trans.*)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 5)\nres = df1.select([MASK])\n```"}
{"idx": 166, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A2, filter = 'Jesenik')\nres = df.where(element = account.district_id, filter = df1.select(district.district_id)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Jesenik')\nres = df.where(element = [MASK], filter = df1.select([MASK])).count()\n```"}
{"idx": 167, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.type, filter = 'junior')\ndf2 = df1.where(element = card.issued, filter = '>= 1997-01-01')\nres = df2.select(disp.client_id).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'junior')\ndf2 = df1.where(element = [MASK], filter = '>= 1997-01-01')\nres = df2.select([MASK]).distinct()\n```"}
{"idx": 168, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A11, filter = '> 10000')\ndf2 = df1.where(element = client.gender, filter = 'F')\nres = df.select((df2.count(distinct = client.client_id) * 100.0 / df1.count(distinct = client.client_id)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 10000')\ndf2 = df1.where(element = [MASK], filter = 'F')\nres = df2.select((df2.count(distinct = [MASK]) * 100.0 / df1.count(distinct = [MASK])))\n```"}
{"idx": 169, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'M')\ndf2 = df1.groupby(loan.date).agg(sum(loan.amount))\ndf3 = df2.where(element = loan.date, filter = 'in', values = ['1996', '1997'])\ndf4 = df3.groupby(loan.date).agg(sum(loan.amount))\ndf5 = df4.select(loan.date).where(element = loan.date, filter = '1997')\ntmp_res1 = df5.sum(loan.amount)\n\ndf6 = df4.select(loan.date).where(element = loan.date, filter = '1996')\ntmp_res2 = df6.sum(loan.amount)\n\nres = df.select((tmp_res1 - tmp_res2) / tmp_res2 * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [client.gender], filter = 'M')\ndf2 = df1.groupby([loan.date]).agg(sum([loan.amount]))\ndf3 = df2.where(element = [loan.date], filter = 'in', values = ['1996', '1997'])\ndf4 = df3.groupby([loan.date]).agg(sum([loan.amount]))\ndf5 = df4.select([loan.date]).where(element = [loan.date], filter = '1997')\ntmp_res1 = df5.sum([loan.amount])\n\ndf6 = df4.select([loan.date]).where(element = [loan.date], filter = '1996')\ntmp_res2 = df6.sum([loan.amount])\n\nres = df.select((tmp_res1 - tmp_res2) / tmp_res2 * 100)\n```"}
{"idx": 170, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.operation, filter = 'VYBER KARTOU')\ndf2 = df1.where(element = trans.date, filter = '> 1995-12-31')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'VYBER KARTOU')\ndf2 = df1.where(element = [MASK], filter = '> 1995-12-31')\nres = df2.count()\n```"}
{"idx": 171, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'North Bohemia')\ntmp_res1 = df1.select(district.A16).sum()\n\ndf2 = df.where(element = district.A3, filter = 'East Bohemia')\ntmp_res2 = df2.select(district.A16).sum()\n\nres = df.select(tmp_res1 - tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [district.A3], filter = 'North Bohemia')\ntmp_res1 = df1.select([district.A16]).sum()\n\ndf2 = df.where(element = [district.A3], filter = 'East Bohemia')\ntmp_res2 = df2.select([district.A16]).sum()\n\nres = df.select(tmp_res1 - tmp_res2)\n```"}
{"idx": 172, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = disp.account_id, filter = 'BETWEEN 1 AND 10')\nres = df1.groupby(disp.type).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'BETWEEN 1 AND 10')\nres = df1.groupby([MASK]).count()\n```"}
{"idx": 173, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = trans.type, filter = 'debit')\ndf2 = df1.where(element = trans.amount, filter = 3539)\ndf3 = df2.where(element = account.account_id, filter = 3)\nres = df3.select(account.frequency, trans.k_symbol)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'debit')\ndf2 = df1.where(element = [MASK], filter = 3539)\ndf3 = df2.where(element = [MASK], filter = 3)\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 174, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = disp.account_id, filter = 130)\nres = df1.select(strftime(client.birth_date, '%Y'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 130)\nres = df1.select([MASK])\n```"}
{"idx": 175, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK PO OBRATU')\ndf2 = df1.where(element = disp.type, filter = 'OWNER')\nres = df2.select(account.account_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK PO OBRATU')\ndf2 = df1.where(element = [MASK], filter = 'OWNER')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 176, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.client_id, filter = 992)\ntmp_res1 = df1.select(loan.amount).sum()\ntmp_res2 = df1.select(loan.status).distinct().groupby()\nres = df1.select(tmp_res1, tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 992)\ntmp_res1 = df1.select([MASK]).sum()\ntmp_res2 = df1.select([MASK]).distinct().groupby()\nres = df1.select(tmp_res1, tmp_res2)\n```"}
{"idx": 177, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.client_id, filter = 4)\ndf2 = df1.where(element = trans.trans_id, filter = 851)\nres = df2.select(trans.balance, client.gender)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 4)\ndf2 = df1.where(element = [MASK], filter = 851)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 178, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = disp.client_id, filter = 9)\nres = df1.select(card.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 9)\nres = df1.select([MASK])\n```"}
{"idx": 179, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = disp.client_id, filter = 617)\ndf2 = df1.where(element = trans.type, filter = 'debit')\ndf3 = df2.where(element = trans.date, filter = \"like '1998%'\")\nres = df3.select(sum(trans.amount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 617)\ndf2 = df1.where(element = [MASK], filter = 'debit')\ndf3 = df2.where(element = [MASK], filter = \"like '1998%'\")\nres = df3.select(sum([MASK]))\n```"}
{"idx": 180, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.birth_date, filter = 'between 1983-01-01 and 1987-12-31')\ndf2 = df1.where(element = district.A2, filter = 'East Bohemia')\nres = df2.select(client.client_id, client.birth_date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 1983-01-01 and 1987-12-31')\ndf2 = df1.where(element = [MASK], filter = 'East Bohemia')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 181, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\ndf2 = df1.orderby(by = loan.amount, desc).limit(3)\nres = df2.select(client.client_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.orderby(by = [MASK], desc).limit(3)\nres = df2.select([MASK])\n```"}
{"idx": 182, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'M')\ndf2 = df1.where(element = client.birth_date, filter = 'between 1974-01-01 and 1976-12-31')\ndf3 = df2.where(element = trans.type, filter = 'debit')\ndf4 = df3.where(element = trans.k_symbol, filter = 'SIPO')\ndf5 = df4.where(element = trans.amount, filter = '> 4000')\nres = df5.count(distinct = client.client_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = 'between 1974-01-01 and 1976-12-31')\ndf3 = df2.where(element = [MASK], filter = 'debit')\ndf4 = df3.where(element = [MASK], filter = 'SIPO')\ndf5 = df4.where(element = [MASK], filter = '> 4000')\nres = df5.count(distinct = [MASK])\n```"}
{"idx": 183, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'Beroun')\ntmp_res1 = df1.select(district.district_id)\n\ndf2 = df.where(element = account.district_id, filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = account.date, filter = '> 1996-12-31')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Beroun')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = [MASK], filter = '> 1996-12-31')\nres = df3.count()\n```"}
{"idx": 184, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\ndf2 = df1.where(element = card.type, filter = 'junior')\nres = df2.count(distinct = client.client_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = 'junior')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 185, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = district.A3, filter = 'like %Prague%')\ndf2 = df.where(element = account.district_id, filter = 'in', value = df1.select(district.district_id))\ndf3 = df.where(element = disp.account_id, filter = 'in', value = df2.select(account.account_id))\ndf4 = df.where(element = client.client_id, filter = 'in', value = df3.select(disp.client_id)).select(client.gender)\ndf5 = df4.where(element = client.gender, filter = 'F').count()\ndf6 = df3.count()\nres = df.select((df5 * 100.0 / df6))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like %Prague%')\ndf2 = df.where(element = [MASK], filter = 'in', value = df1.select([MASK]))\ndf3 = df.where(element = [MASK], filter = 'in', value = df2.select([MASK]))\ndf4 = df.where(element = [MASK], filter = 'in', value = df3.select([MASK])).select([MASK])\ndf5 = df4.where(element = [MASK], filter = 'F').count()\ndf6 = df3.count()\nres = df.select((df5 * 100.0 / df6))\n```"}
{"idx": 186, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = client.gender, filter = 'M')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = [MASK], filter = 'M')\nres = df2.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 187, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = disp.type, filter = 'OWNER')\nres = df2.select(disp.client_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = [MASK], filter = 'OWNER')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 188, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.duration, filter = '> 24')\ndf2 = df1.where(element = loan.amount, filter = min(loan.amount))\ndf3 = df.where(element = account.date, filter = '< 1997-01-01')\nres = df3.where(element = account.account_id, filter = in, df1.account_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [loan.duration], filter = '> 24')\ndf2 = df1.where(element = [loan.amount], filter = min([loan.amount]))\ndf3 = df.where(element = [account.date], filter = '< 1997-01-01')\nres = df3.where(element = [account.account_id], filter = in, df1.[account_id])\n```"}
{"idx": 189, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.gender, filter = 'F')\ndf2 = df1.orderby(by = client.birth_date, asc).limit(1)\ndf3 = df.where(element = district.A11, filter = min(district.A11))\nres = df.where(element = account.account_id, filter = 'in', value = [df.select(disp.account_id).where(element = disp.client_id, filter = df2.client_id).where(element = disp.district_id, filter = df3.district_id)])\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\ndf3 = df.where(element = [MASK], filter = min([MASK]))\nres = df.where(element = [MASK], filter = 'in', value = [df.select([MASK]).where(element = [MASK], filter = df2.[MASK]).where(element = [MASK], filter = df3.[MASK])])\n```"}
{"idx": 190, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = client.birth_date, filter = \"year = 1920\")\ndf2 = df1.where(element = district.A3, filter = 'East Bohemia')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"year = 1920\")\ndf2 = df1.where(element = [MASK], filter = 'East Bohemia')\nres = df2.count()\n```"}
{"idx": 191, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = account.frequency, filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = loan.duration, filter = 24)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'POPLATEK TYDNE')\ndf2 = df1.where(element = [MASK], filter = 24)\nres = df2.count()\n```"}
{"idx": 192, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = loan.status, filter = 'C')\ndf2 = df1.where(element = order.k_symbol, filter = 'POPLATEK PO OBRATU')\nres = df2.select(avg(loan.amount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'C')\ndf2 = df1.where(element = [MASK], filter = 'POPLATEK PO OBRATU')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 193, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = disp.type, filter = 'OWNER')\nres = df1.select(client.client_id, client.district_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'OWNER')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 194, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = card.type, filter = 'gold')\ndf2 = df1.where(element = disp.type, filter = 'OWNER')\nres = df2.select(client.client_id, (strftime('%Y', 'now') - strftime('%Y', client.birth_date)) - (strftime('%m-%d', 'now') < strftime('%m-%d', client.birth_date)) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'gold')\ndf2 = df1.where(element = [MASK], filter = 'OWNER')\nres = df2.select([MASK], (strftime('%Y', 'now') - strftime('%Y', [MASK]) - (strftime('%m-%d', 'now') < strftime('%m-%d', [MASK])))\n```"}
{"idx": 195, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(bond.bond_type).count()\ndf2 = df1.orderby(by = count(bond.bond_type), desc).limit(1)\nres = df2.select(bond.bond_type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).count()\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 196, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.element, filter = 'cl')\ndf2 = df.where(element = molecule.label, filter = '-')\nres = df.select(df1.intersect(df2).count(distinct(molecule.molecule_id)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'cl')\ndf2 = df.where(element = [MASK], filter = '-')\nres = df.select(df1.intersect(df2).count(distinct([MASK])))\n```"}
{"idx": 197, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'o').where(bond.bond_type, filter = '-')\ntmp_res1 = df1.groupby(molecule.molecule_id).count()\ndf2 = df.where(element, filter = 'o').where(molecule.molecule_id, filter = 'in', value = tmp_res1.select(molecule.molecule_id))\nres = df2.groupby(molecule.molecule_id).avg()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'o').where(bond.bond_type, filter = '-')\ntmp_res1 = df1.groupby(molecule.molecule_id).count()\ndf2 = df.where(element, filter = 'o').where(molecule.molecule_id, filter = 'in', value = tmp_res1.select(molecule.molecule_id))\nres = df2.groupby(molecule.molecule_id).avg()\n```"}
{"idx": 198, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df1.where(element = bond.bond_type, filter = '-')\nres = df2.groupby(molecule.molecule_id).count(bond.bond_id).avg()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = '-')\nres = df2.groupby([MASK]).count([MASK]).avg()\n```"}
{"idx": 199, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'na')\ndf2 = df1.where(molecule.label, filter = '-')\nres = df2.select_distinct(molecule.molecule_id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'na')\ndf2 = df1.where(molecule.label, filter = '-')\nres = df2.select_distinct(molecule.molecule_id).count()\n```"}
{"idx": 200, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\ndf2 = df1.where(element = molecule.label, filter = '+')\nres = df2.select(molecule.molecule_id, molecule.label).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '#')\ndf2 = df1.where(element = [MASK], filter = '+')\nres = df2.select([MASK], [MASK]).distinct()\n```"}
{"idx": 201, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '=')\ndf2 = df1.where(element = atom.element, filter = 'c')\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '=')\ndf2 = df1.where(element = [MASK], filter = 'c')\nres = df2.select((df2.count() * 100.0 / df1.count()))\n```"}
{"idx": 202, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '#')\nres = df1.count()\n```"}
{"idx": 203, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = '!= br')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '!= [MASK]')\nres = df1.count()\n```"}
{"idx": 204, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.molecule_id, filter = 'BETWEEN TR000 AND TR099')\ndf2 = df1.where(element = molecule.label, filter = '+')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'BETWEEN TR000 AND TR099')\ndf2 = df1.where(element = [MASK], filter = '+')\nres = df2.count()\n```"}
{"idx": 205, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\nres = df1.select(atom.molecule_id).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'c')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 206, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR004_8_9')\nres = df1.select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR004_8_9')\nres = df1.select([MASK])\n```"}
{"idx": 207, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '=')\ntmp_res1 = df1.select(atom.element).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '=')\ntmp_res1 = df1.select([MASK]).distinct()\n```"}
{"idx": 208, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'h')\ndf2 = df1.groupby(molecule.label).agg(count = count())\ndf3 = df2.orderby(by = count, desc).limit(1)\nres = df3.select(molecule.label, count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = [MASK])\ndf2 = df1.groupby([MASK]).agg(count = count())\ndf3 = df2.orderby(by = count, desc).limit(1)\nres = df3.select([MASK], count)\n```"}
{"idx": 209, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'cl')\ntmp_res1 = df1.select(bond.bond_type).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = 'cl')\ntmp_res1 = df1.select([MASK]).distinct()\n```"}
{"idx": 210, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '-')\nres = df1.select(connected.atom_id, connected.atom_id2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 211, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '-')\ntmp_res1 = df1.select(atom.atom_id)\ntmp_res2 = df1.select(atom.atom_id2)\nres = tmp_res1.combine(tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ntmp_res1 = df1.select([MASK])\ntmp_res2 = df1.select([MASK])\nres = tmp_res1.combine(tmp_res2)\n```"}
{"idx": 212, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '-')\ndf2 = df1.groupby(atom.element).count()\nres = df2.orderby(by = count(atom.element), asc).limit(1).select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.groupby([MASK]).count()\nres = df2.orderby(by = [MASK], asc).limit(1).select([MASK])\n```"}
{"idx": 213, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.atom_id, filter = 'TR004_8').where(element = connected.atom_id2, filter = 'TR004_20')\ndf2 = df.where(element = connected.atom_id, filter = 'TR004_20').where(element = connected.atom_id2, filter = 'TR004_8')\nres = df1.union(df2).select(bond.bond_type)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'TR004_8').where(element = [MASK2], filter = 'TR004_20')\ndf2 = df.where(element = [MASK], filter = 'TR004_20').where(element = [MASK2], filter = 'TR004_8')\nres = df1.union(df2).select([MASK3])\n```"}
{"idx": 214, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'sn')\ntmp_res1 = df1.select(atom.molecule_id).distinct()\n\ndf2 = df.where_not_in(molecule.molecule_id, tmp_res1)\nres = df2.select(molecule.label).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'sn')\ntmp_res1 = df1.select([MASK]).distinct()\n\ndf2 = df.where_not_in([MASK], tmp_res1)\nres = df2.select([MASK]).distinct()\n```"}
{"idx": 215, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(bond.molecule_id).having(element = count(distinct(bond.bond_type)), filter = '= 1').having(element = min(bond.bond_type), filter = '-')\ndf2 = df.where(element, filter = 'i', 's').where(molecule_id, filter = 'in', df1.select(bond.molecule_id))\nres = df2.select(atom.atom_id).count(distinct())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.groupby([MASK]).having(element = count(distinct([MASK])), filter = '= 1').having(element = min([MASK]), filter = '-')\ndf2 = df.where(element, filter = 'i', 's').where([MASK], filter = 'in', df1.select([MASK]))\nres = df2.select([MASK]).count(distinct())\n```"}
{"idx": 216, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\nres = df1.select(connected.atom_id, connected.atom_id2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '#')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 217, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.molecule_id, filter = 'TR181')\ntmp_res1 = df1.select(connected.atom_id2)\n\ndf2 = df.where(element = atom.molecule_id, filter = 'TR181')\ntmp_res2 = df2.select(connected.atom_id)\n\nres = tmp_res1.union(tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [atom.molecule_id], filter = 'TR181')\ntmp_res1 = df1.select([connected.atom_id2])\n\ndf2 = df.where(element = [atom.molecule_id], filter = 'TR181')\ntmp_res2 = df2.select([connected.atom_id])\n\nres = tmp_res1.union(tmp_res2)\n```"}
{"idx": 218, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'f')\ntmp_res1 = df1.select(molecule.molecule_id).distinct()\n\ndf2 = df.where(molecule.label, filter = '+')\ntmp_res2 = df2.except(tmp_res1)\n\nres = df.select((tmp_res2.count() * 100.0 / df2.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'f')\ntmp_res1 = df1.select([MASK]).distinct()\n\ndf2 = df.where(element = [MASK], filter = '+')\ntmp_res2 = df2.except(tmp_res1)\n\nres = df.select((tmp_res2.count() * 100.0 / df2.count()))\n```"}
{"idx": 219, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df1.where(element = bond.bond_type, filter = '#')\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = '#')\nres = df2.select((df2.count() * 100.0 / df1.count()))\n```"}
{"idx": 220, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.molecule_id, filter = 'TR000')\nres = df1.groupby(atom.element).orderby(by = atom.element).limit(3).select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000')\nres = df1.groupby([MASK]).orderby(by = [MASK]).limit(3).select([MASK])\n```"}
{"idx": 221, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR001')\ndf2 = df1.where(element = bond.bond_id, filter = 'TR001_2_6')\nres = df2.select(connected.atom_id, connected.atom_id2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001')\ndf2 = df1.where(element = [MASK], filter = 'TR001_2_6')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 222, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df.where(element = molecule.label, filter = '-')\nres = df.select(df1.count() - df2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df.where(element = [MASK], filter = '-')\nres = df.select(df1.count() - df2.count())\n```"}
{"idx": 223, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR000_2_5')\nres = df1.select(connected.atom_id, connected.atom_id2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_2_5')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 224, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.atom_id2, filter = 'TR000_2')\nres = df1.select(connected.bond_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_2')\nres = df1.select([MASK])\n```"}
{"idx": 225, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = ' = ')\nres = df1.select(molecule.label).distinct().orderby(by = molecule.label).limit(5)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = ' = ')\nres = df1.select([MASK]).distinct().orderby(by = [MASK]).limit(5)\n```"}
{"idx": 226, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR008')\ndf2 = df1.where(element = bond.bond_type, filter = '=')\nres = df.select(cast(df2.count(), float) / df1.count() * 100.0)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR008')\ndf2 = df1.where(element = [MASK], filter = '=')\nres = df.select(cast(df2.count(), float) / df1.count() * 100.0)\n```"}
{"idx": 227, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\nres = df.select(round((df1.count() * 100.0) / df.count(), 3))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\nres = df.select(round((df1.count() * 100.0) / [MASK], 3))\n```"}
{"idx": 228, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'TR206')\ndf2 = df1.where(element, filter = 'h')\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = 'TR206')\ndf2 = df1.where(element, filter = 'h')\nres = df2.select((df2.count() * 100.0 / df1.count()))\n```"}
{"idx": 229, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR000')\nres = df1.select(bond.bond_type).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 230, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.molecule_id, filter = 'TR060')\nres = df1.select(atom.element, molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR060')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 231, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR010')\ndf2 = df1.groupby(bond.bond_type).count()\nres = df2.orderby(by = count(bond.bond_type), desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR010')\ndf2 = df1.groupby([MASK]).count()\nres = df2.orderby(by = count([MASK]), desc).limit(1)\n```"}
{"idx": 232, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '-')\ndf2 = df1.where(element = bond.bond_type, filter = '-')\nres = df2.select(distinct(molecule.molecule_id)).orderby(by = molecule.molecule_id).limit(3)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = '-')\nres = df2.select(distinct([MASK])).orderby(by = [MASK]).limit(3)\n```"}
{"idx": 233, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR006')\nres = df1.orderby(by = bond.bond_id).limit(2).select(bond.bond_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR006')\nres = df1.orderby(by = [MASK]).limit(2).select([MASK])\n```"}
{"idx": 234, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.atom_id, filter = 'TR009_12').orwhere(element = connected.atom_id2, filter = 'TR009_12')\ndf2 = df1.where(element = bond.molecule_id, filter = 'TR009')\nres = df2.select(bond.bond_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK1], filter = 'TR009_12').orwhere(element = [MASK2], filter = 'TR009_12')\ndf2 = df1.where(element = [MASK3], filter = 'TR009')\nres = df2.select([MASK4]).distinct().count()\n```"}
{"idx": 235, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.element, filter = 'br')\ndf2 = df1.where(element = molecule.label, filter = '+')\nres = df2.select(molecule.molecule_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [atom.element], filter = 'br')\ndf2 = df1.where(element = [molecule.label], filter = '+')\nres = df2.select([molecule.molecule_id]).distinct().count()\n```"}
{"idx": 236, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(bond.bond_id, filter = 'TR001_6_9')\nres = df1.select(bond.bond_type, atom.atom_id as atom1_id, atom1.element as atom1_element, atom2.atom_id as atom2_id, atom2.element as atom2_element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(bond.bond_id, filter = '[MASK]')\nres = df1.select(bond.bond_type, atom.atom_id as atom1_id, atom.atom_element as atom1_element, atom2.atom_id as atom2_id, atom2.atom_element as atom2_element)\n```"}
{"idx": 237, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.atom_id, filter = 'TR001_10')\nres = df1.select(molecule.molecule_id, case(element = molecule.label, when = '+', then = 'Carcinogenic', else = 'Not Carcinogenic'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_10')\nres = df1.select([MASK], case(element = [MASK], when = '+', then = 'Carcinogenic', else = 'Not Carcinogenic'))\n```"}
{"idx": 238, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\nres = df1.select(bond.molecule_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '#')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 239, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.atom_id, filter = 'LIKE TR%_19')\ndf2 = df.where(element = connected.atom_id2, filter = 'LIKE TR%_19')\nres = df.select(df1.count() + df2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'LIKE TR%_19')\ndf2 = df.where(element = [MASK], filter = 'LIKE TR%_19')\nres = df.select(df1.count() + df2.count())\n```"}
{"idx": 240, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.molecule_id, filter = 'TR004')\nres = df1.select_distinct(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR004')\nres = df1.select_distinct([MASK])\n```"}
{"idx": 241, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '-')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\nres = df1.count()\n```"}
{"idx": 242, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.atom_id, filter = 'between 21 and 25')\ndf2 = df1.where(element = molecule.label, filter = '+')\nres = df2.select(distinct(molecule.molecule_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [atom.atom_id], filter = 'between 21 and 25')\ndf2 = df1.where(element = [molecule.label], filter = '+')\nres = df2.select(distinct([molecule.molecule_id]))\n```"}
{"idx": 243, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.element, filter = 'p')\ntmp_res1 = df1.select(connected.bond_id)\n\ndf2 = df.where(element = atom.element, filter = 'n')\ntmp_res2 = df2.select(connected.bond_id)\n\nres = tmp_res1.union(tmp_res2).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [atom.element], filter = 'p')\ntmp_res1 = df1.select([connected.bond_id])\n\ndf2 = df.where(element = [atom.element], filter = 'n')\ntmp_res2 = df2.select([connected.bond_id])\n\nres = tmp_res1.union(tmp_res2).distinct()\n```"}
{"idx": 244, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = 'double')\ndf2 = df1.groupby(bond.molecule_id).count()\nmax_count = df2.max()\ndf3 = df2.where(element = count, filter = max_count)\nres = df3.select(molecule.molecule_id, molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [bond.bond_type], filter = 'double')\ndf2 = df1.groupby([bond.molecule_id]).count()\nmax_count = df2.max()\ndf3 = df2.where(element = [count], filter = max_count)\nres = df3.select([molecule.molecule_id, molecule.label])\n```"}
{"idx": 245, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'i')\ndf2 = df1.groupby(atom.atom_id).agg(count(connected.bond_id) as bond_count)\nres = df2.avg(bond_count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'i')\ndf2 = df1.groupby([MASK]).agg(count([MASK]) as bond_count)\nres = df2.avg(bond_count)\n```"}
{"idx": 246, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.atom_id, filter = 'SUBSTR(atom_id, 7, 2) + 0 = 45')\nres = df1.select(bond.bond_type, bond.bond_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SUBSTR([MASK], 7, 2) + 0 = 45')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 247, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.select(connected.atom_id)\ndf2 = df.select(connected.atom_id2)\ntmp_res1 = df1.union(df2)\n\nres = df.where(atom.atom_id, filter = 'not in', value = tmp_res1).select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.select([MASK])\ndf2 = df.select([MASK])\ntmp_res1 = df1.union(df2)\n\nres = df.where(atom.[MASK], filter = 'not in', value = tmp_res1).select(atom.[MASK])\n```"}
{"idx": 248, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR041')\ndf2 = df1.where(element = bond.bond_type, filter = '#')\nres = df2.select(connected.atom_id, connected.atom_id2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR041')\ndf2 = df1.where(element = [MASK], filter = '#')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 249, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR144_8_19')\nres = df1.select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR144_8_19')\nres = df1.select([MASK])\n```"}
{"idx": 250, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df1.where(element = bond.bond_type, filter = ' = ')\ndf3 = df2.groupby(molecule.molecule_id).count(bond.bond_id)\nres = df3.orderby(by = count(bond.bond_id), desc).limit(1).select(molecule.molecule_id, count(bond.bond_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = ' = ')\ndf3 = df2.groupby([MASK]).count([MASK])\nres = df3.orderby(by = count([MASK]), desc).limit(1).select([MASK], count([MASK]))\n```"}
{"idx": 251, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df.where(element = atom.molecule_id, filter = 'in', df1.select(molecule.molecule_id))\nres = df2.groupby(atom.element).orderby(by = count(atom.element), asc).limit(1).select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df.where(element = [MASK], filter = 'in', df1.select([MASK]))\nres = df2.groupby([MASK]).orderby(by = count([MASK]), asc).limit(1).select([MASK])\n```"}
{"idx": 252, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'pb')\ntmp_res1 = df1.select(connected.atom_id, connected.atom_id2)\n\ntmp_res2 = df1.select(connected.atom_id).except(df1.select(connected.atom_id2))\ntmp_res3 = df1.select(connected.atom_id2).except(df1.select(connected.atom_id))\n\nres = tmp_res2.union(tmp_res3).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'pb')\ntmp_res1 = df1.select([MASK], [MASK])\n\ntmp_res2 = df1.select([MASK]).except(df1.select([MASK]))\ntmp_res3 = df1.select([MASK]).except(df1.select([MASK]))\n\nres = tmp_res2.union(tmp_res3).distinct()\n```"}
{"idx": 253, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\nres = df1.select(distinct(atom.element))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '#')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 254, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.select(connected.bond_id, atom.element as element1, atom2.element as element2)\ndf2 = df1.groupby(element1, element2).count()\ndf3 = df2.max(combination_count)\nres = df.select((df3 / df.count()) * 100.0)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.select([MASK], [MASK] as element1, [MASK] as element2)\ndf2 = df1.groupby(element1, element2).count()\ndf3 = df2.max([MASK])\nres = df.select((df3 / [MASK]) * 100.0)\n```"}
{"idx": 255, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '-')\ndf2 = df1.where(element = molecule.label, filter = '+')\nres = df.select(cast(df2.count(), float) / df1.count() * 100.0)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = '+')\nres = df2.select(cast(df2.count(), float) / df1.count() * 100.0)\n```"}
{"idx": 256, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\ndf2 = df.where(element, filter = 'h')\nres = df.select(df1.count() + df2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'c')\ndf2 = df.where(element = [MASK], filter = 'h')\nres = df.select(df1.count() + df2.count())\n```"}
{"idx": 257, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 's')\nres = df1.select(connected.atom_id2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 's')\nres = df1.select([MASK])\n```"}
{"idx": 258, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'sn')\nres = df1.select(bond.bond_type).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'sn')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 259, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(bond.molecule_id).having(element = count(distinct(bond.bond_type)), filter = '= 1').having(element = min(bond.bond_type), filter = '-')\nres = df1.select(count(distinct(atom.element)))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.groupby([MASK]).having(element = count(distinct([MASK])), filter = '= 1').having(element = min([MASK]), filter = '-')\nres = df1.select(count(distinct([MASK])))\n```"}
{"idx": 260, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.element, filter = 'p')\ndf2 = df.where(element = atom.element, filter = 'br')\ndf3 = df1.union(df2)\ndf4 = df3.where(bond.bond_type, filter = '#')\nres = df4.count(distinct = atom.atom_id)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [atom.element], filter = 'p')\ndf2 = df.where(element = [atom.element], filter = 'br')\ndf3 = df1.union(df2)\ndf4 = df3.where([bond.bond_type], filter = '#')\nres = df4.count(distinct = [atom.atom_id])\n```"}
{"idx": 261, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\nres = df1.select(bond.bond_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\nres = df1.select([MASK])\n```"}
{"idx": 262, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '-')\ndf2 = df1.where(element = molecule.label, filter = '-')\nres = df2.select(distinct(molecule.molecule_id))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = '-')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 263, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.element, filter = 'cl')\ndf2 = df.where(bond.bond_type, filter = '-')\nres = df.select((df1.count() * 100.0 / df2.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'cl')\ndf2 = df.where([MASK], filter = '-')\nres = df.select((df1.count() * 100.0 / df2.count()))\n```"}
{"idx": 264, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.molecule_id, filter = 'TR000')\ndf2 = df.where(element = molecule.molecule_id, filter = 'TR001')\ndf3 = df.where(element = molecule.molecule_id, filter = 'TR002')\nres = df1.union(df2).union(df3).select(molecule.molecule_id, molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [molecule.molecule_id], filter = 'TR000')\ndf2 = df.where(element = [molecule.molecule_id], filter = 'TR001')\ndf3 = df.where(element = [molecule.molecule_id], filter = 'TR002')\nres = df1.union(df2).union(df3).select([molecule.molecule_id], [molecule.label])\n```"}
{"idx": 265, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '-')\nres = df1.select(molecule.molecule_id)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '-')\nres = df1.select([MASK])\n```"}
{"idx": 266, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df1.where(element = molecule.molecule_id, filter = 'BETWEEN TR000 AND TR030')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN TR000 AND TR030')\nres = df2.count()\n```"}
{"idx": 267, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'between TR000 and TR050')\nres = df1.select(bond.molecule_id, bond.bond_type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between TR000 and TR050')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 268, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR001_10_11')\nres = df1.select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_10_11')\nres = df1.select([MASK])\n```"}
{"idx": 269, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'i')\ntmp_res1 = df1.select(connected.bond_id).distinct()\nres = tmp_res1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'i')\ntmp_res1 = df1.select([MASK]).distinct()\nres = tmp_res1.count()\n```"}
{"idx": 270, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'ca')\ndf2 = df1.groupby(molecule.label).agg(count = count())\ndf3 = df2.orderby(by = count, desc).limit(1)\nres = df3.select(molecule.label, count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = [MASK])\ndf2 = df1.groupby([MASK]).agg(count = count())\ndf3 = df2.orderby(by = count, desc).limit(1)\nres = df3.select([MASK], count)\n```"}
{"idx": 271, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR001_1_8')\ndf2 = df1.where(element = atom.element, filter = 'cl', 'c')\nres = df2.select(atom.element as element1, atom.element as element2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_1_8')\ndf2 = df1.where(element = [MASK], filter = 'cl', 'c')\nres = df2.select([MASK] as element1, [MASK] as element2)\n```"}
{"idx": 272, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.element, filter = 'c')\ndf2 = df.where(element = molecule.label, filter = '-')\ndf3 = df2.where(bond.bond_type, filter = '#')\nres = df3.select(distinct(molecule.molecule_id)).limit(2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'c')\ndf2 = df.where(element = [MASK], filter = '-')\ndf3 = df2.where(element = [MASK], filter = '#')\nres = df3.select(distinct([MASK])).limit(2)\n```"}
{"idx": 273, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'cl')\ndf2 = df.where(molecule.label, filter = '+')\nres = df.select((df1.count() * 1.0 / df2.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = '[MASK]')\ndf2 = df.where([MASK], filter = '+')\nres = df.select((df1.count() * 1.0 / df2.count()) * 100)\n```"}
{"idx": 274, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.molecule_id, filter = 'TR001')\nres = df1.select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001')\nres = df1.select([MASK])\n```"}
{"idx": 275, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = ' = ')\nres = df1.select(bond.molecule_id).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = ' = ')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 276, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\nres = df1.select(connected.atom_id, connected.atom_id2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '#')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 277, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR000_1_2')\nres = df1.select(atom.element).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_1_2')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 278, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '-')\ndf2 = df1.where(element = bond.bond_type, filter = '-')\nres = df2.select(bond.molecule_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = '-')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 279, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_id, filter = 'TR001_10_11')\nres = df1.select(molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_10_11')\nres = df1.select([MASK])\n```"}
{"idx": 280, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\ndf2 = df1.select(bond.bond_id, case(element = molecule.label, when = '+', then = 'Carcinogenic', when = '-', then = 'Non-carcinogenic', else = 'Unknown'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [bond.bond_type], filter = '#')\ndf2 = df1.select([bond.bond_id], case(element = [molecule.label], when = '+', then = 'Carcinogenic', when = '-', then = 'Non-carcinogenic', else = 'Unknown'))\n```"}
{"idx": 281, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df1.where(element = atom.atom_id, filter = \"substr(_, 7, 1) = '4'\")\nres = df2.groupby(atom.element).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = \"substr(_, 7, 1) = '4'\")\nres = df2.groupby([MASK]).count()\n```"}
{"idx": 282, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'h')\ntmp_res1 = df1.count()\ndf2 = df.where(element, filter = 'TR006')\ntmp_res2 = df2.count()\nres = df.select((tmp_res1 * 1.0 / tmp_res2) as hydrogen_ratio, label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = [MASK])\ntmp_res1 = df1.count()\ndf2 = df.where(element, filter = [MASK])\ntmp_res2 = df2.count()\nres = df.select((tmp_res1 * 1.0 / tmp_res2) as [MASK], label)\n```"}
{"idx": 283, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'ca')\ndf2 = df.where(molecule.label, filter = '+')\nres = df1.intersect(df2).select(distinct(molecule.molecule_id))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = '[MASK]')\ndf2 = df.where(molecule.label, filter = '[MASK]')\nres = df1.intersect(df2).select(distinct(molecule.molecule_id))\n```"}
{"idx": 284, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\nres = df1.select(bond.bond_type).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'c')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 285, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR001_10_11')\nres = df1.select(atom.element, atom.element as element2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_10_11')\nres = df1.select([MASK], [MASK] as [MASK])\n```"}
{"idx": 286, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\ntmp_res1 = df1.select(bond.molecule_id).distinct()\n\ndf2 = df.select(molecule.molecule_id).distinct()\ntmp_res2 = df2.count()\n\nres = df.select((tmp_res1.count() * 100.0 / tmp_res2).cast('double'))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [bond.bond_type], filter = '#')\ntmp_res1 = df1.select([bond.molecule_id]).distinct()\n\ndf2 = df.select([molecule.molecule_id]).distinct()\ntmp_res2 = df2.count()\n\nres = df.select((tmp_res1.count() * 100.0 / tmp_res2).cast('double'))\n```"}
{"idx": 287, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR047')\ndf2 = df1.where(element = bond.bond_type, filter = 'double')\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR047')\ndf2 = df1.where(element = [MASK], filter = 'double')\nres = df2.select([MASK])\n```"}
{"idx": 288, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.atom_id, filter = 'TR001_1')\nres = df1.select(molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_1')\nres = df1.select([MASK])\n```"}
{"idx": 289, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.molecule_id, filter = 'TR151')\nres = df1.select(case(element = molecule.label, when = '+', then = 'Carcinogenic', else = 'Not Carcinogenic'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR151')\nres = df1.select(case(element = [MASK], when = '+', then = 'Carcinogenic', else = 'Not Carcinogenic'))\n```"}
{"idx": 290, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = 'TR151')\ndf2 = df1.where(element = atom.element, filter = 'in', values = ['pb', 'sn'])\nres = df2.select(distinct(atom.element))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR151')\ndf2 = df1.where(element = [MASK], filter = 'in', values = ['pb', 'sn'])\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 291, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\nres = df1.count()\n```"}
{"idx": 292, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\ndf2 = df.where(element = molecule.molecule_id, filter = \"BETWEEN 10 AND 50\")\nres = df1.intersect(df2).select(atom.atom_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = [MASK])\ndf2 = df.where(element = molecule.molecule_id, filter = \"BETWEEN 10 AND 50\")\nres = df1.intersect(df2).select([MASK])\n```"}
{"idx": 293, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\nres = df1.count(atom.atom_id)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '+')\nres = df1.count([MASK])\n```"}
{"idx": 294, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '=')\ndf2 = df1.where(element = molecule.label, filter = '+')\nres = df2.select(bond.bond_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '=')\ndf2 = df1.where(element = [MASK], filter = '+')\nres = df2.select([MASK])\n```"}
{"idx": 295, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ntmp_res1 = df1.select(atom.molecule_id)\n\ndf2 = df.where(element = atom.molecule_id, filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = atom.element, filter = 'h')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [molecule.label], filter = '+')\ntmp_res1 = df1.select([atom.molecule_id])\n\ndf2 = df.where(element = [atom.molecule_id], filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = [atom.element], filter = 'h')\nres = df3.count()\n```"}
{"idx": 296, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.atom_id, filter = 'TR000_1')\ndf2 = df1.where(element = connected.bond_id, filter = 'TR000_1_2')\nres = df2.select(bond.molecule_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_1')\ndf2 = df1.where(element = [MASK], filter = 'TR000_1_2')\nres = df2.select([MASK])\n```"}
{"idx": 297, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\ndf2 = df1.where(molecule.label, filter = '-')\nres = df2.select(atom.atom_id)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = [MASK])\ndf2 = df1.where(molecule.label, filter = '-')\nres = df2.select(atom.atom_id)\n```"}
{"idx": 298, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'h')\ndf2 = df.where(molecule.label, filter = '+')\nres = df.select(cast(df1.count(), float) / df2.count(distinct(molecule.molecule_id)) * 100.0)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = '[MASK]')\ndf2 = df.where(molecule.label, filter = '[MASK]')\nres = df.select(cast(df1.count(), float) / df2.count(distinct(molecule.molecule_id)) * 100.0)\n```"}
{"idx": 299, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.molecule_id, filter = 'TR124')\nres = df1.select(case(element = molecule.label, when = '+', then = 'Carcinogenic', else = 'Not Carcinogenic'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR124')\nres = df1.select(case(element = [MASK], when = '+', then = 'Carcinogenic', else = 'Not Carcinogenic'))\n```"}
{"idx": 300, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.molecule_id, filter = 'TR186')\nres = df1.select(atom.atom_id, atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR186')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 301, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_id, filter = 'TR007_4_19')\nres = df1.select(bond.bond_type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR007_4_19')\nres = df1.select([MASK])\n```"}
{"idx": 302, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR001_2_4')\nres = df1.select(atom.element).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_2_4')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 303, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR006')\ndf2 = df1.where(element = bond.bond_type, filter = 'double')\nres = df2.groupby(bond.molecule_id).count().select(count(bond.bond_id) as double_bond_count, molecule.label as carcinogenic_status)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [bond.molecule_id], filter = 'TR006')\ndf2 = df1.where(element = [bond.bond_type], filter = 'double')\nres = df2.groupby([bond.molecule_id]).count().select(count([bond.bond_id]) as [double_bond_count], [molecule.label] as [carcinogenic_status])\n```"}
{"idx": 304, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\nres = df1.select(molecule.molecule_id, atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 305, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '-')\nres = df1.select(bond.bond_id, atom1.atom_id, atom1.element, atom2.atom_id, atom2.element, molecule.molecule_id, molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\nres = df1.select([MASK], [MASK].atom_id, [MASK].element, [MASK].atom_id, [MASK].element, [MASK].molecule_id, [MASK].label)\n```"}
{"idx": 306, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\nres = df1.select(molecule.molecule_id, atom.element).distinct().orderby(by = [molecule.molecule_id, atom.element])\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [bond.bond_type], filter = '#')\nres = df1.select([molecule.molecule_id, atom.element]).distinct().orderby(by = [molecule.molecule_id, atom.element])\n```"}
{"idx": 307, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR000_2_3')\nres = df1.select(atom.element, atom.element as atom2_element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_2_3')\nres = df1.select([MASK], [MASK] as [MASK2])\n```"}
{"idx": 308, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'cl')\ntmp_res1 = df1.select(connected.bond_id).distinct().count()\n\ndf2 = df.where(element, filter = 'cl')\ntmp_res2 = df2.select(connected.bond_id).distinct().count()\n\nres = tmp_res1 + tmp_res2\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = [MASK])\ntmp_res1 = df1.select([MASK]).distinct().count()\n\ndf2 = df.where(element, filter = [MASK])\ntmp_res2 = df2.select([MASK]).distinct().count()\n\nres = tmp_res1 + tmp_res2\n```"}
{"idx": 309, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.molecule_id, filter = 'TR346')\ndf2 = df1.groupby(atom.atom_id).agg(count_distinct(bond.bond_type))\nres = df2.select(atom.atom_id, count_distinct(bond.bond_type) as bond_type_count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [atom.molecule_id], filter = 'TR346')\ndf2 = df1.groupby([atom.atom_id]).agg(count_distinct([bond.bond_type]))\nres = df2.select([atom.atom_id], count_distinct([bond.bond_type]) as [bond_type_count])\n```"}
{"idx": 310, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '==')\ntmp_res1 = df1.groupby(molecule.molecule_id).count().select()\n\ndf2 = df.where(element = molecule.label, filter = '+')\ntmp_res2 = df2.count()\n\nres = df.select(tmp_res1, tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [bond.bond_type], filter = '==')\ntmp_res1 = df1.groupby([molecule.molecule_id]).count().select()\n\ndf2 = df.where(element = [molecule.label], filter = '+')\ntmp_res2 = df2.count()\n\nres = df.select(tmp_res1, tmp_res2)\n```"}
{"idx": 311, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 's', not_exists = True)\ndf2 = df.where(bond.bond_type, filter = ' = ')\nres = df.select(count(distinct(molecule.molecule_id)))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 's', not_exists = True)\ndf2 = df.where([MASK], filter = ' = ')\nres = df.select(count(distinct([MASK])))\n```"}
{"idx": 312, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_id, filter = 'TR001_2_4')\nres = df1.select(molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_2_4')\nres = df1.select([MASK])\n```"}
{"idx": 313, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.molecule_id, filter = 'TR001')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001')\nres = df1.count()\n```"}
{"idx": 314, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '-')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\nres = df1.count()\n```"}
{"idx": 315, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'cl')\ndf2 = df.where(molecule.label, filter = '+')\nres = df1.intersect(df2).select(distinct(molecule.molecule_id))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = '[MASK]')\ndf2 = df.where([MASK], filter = '+')\nres = df1.intersect(df2).select(distinct([MASK]))\n```"}
{"idx": 316, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\ndf2 = df.where(molecule.label, filter = '-')\nres = df1.intersect(df2).select(distinct(molecule.molecule_id))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'c')\ndf2 = df.where(molecule.label, filter = '-')\nres = df1.intersect(df2).select(distinct(molecule.molecule_id))\n```"}
{"idx": 317, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'cl')\ntmp_res1 = df1.select(molecule_id).distinct()\n\ndf2 = df.where(molecule.label, filter = '+')\ntmp_res2 = df2.select(molecule_id).distinct()\n\nres = df.select((cast(tmp_res1.count(), float) / tmp_res2.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = '[Molecule].label', filter = 'cl')\ntmp_res1 = df1.select([Molecule].molecule_id).distinct()\n\ndf2 = df.where(element = [Molecule].label, filter = '+')\ntmp_res2 = df2.select([Molecule].molecule_id).distinct()\n\nres = df.select((cast(tmp_res1.count(), float) / tmp_res2.count()) * 100)\n```"}
{"idx": 318, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_id, filter = 'TR001_1_7')\nres = df1.select(bond.molecule_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR001_1_7')\nres = df1.select([MASK])\n```"}
{"idx": 319, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.bond_id, filter = 'TR001_3_4')\ntmp_res1 = df1.select(atom.element).distinct()\nres = tmp_res1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'TR001_3_4')\ntmp_res1 = df1.select([MASK]).distinct()\nres = tmp_res1.count()\n```"}
{"idx": 320, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = connected.atom_id, filter = 'TR000_1')\ndf2 = df1.where(element = connected.atom_id2, filter = 'TR000_2')\nres = df2.select(bond.bond_type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_1')\ndf2 = df1.where(element = [MASK], filter = 'TR000_2')\nres = df2.select([MASK])\n```"}
{"idx": 321, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.atom_id, filter = 'TR000_2')\ndf2 = df.where(element = atom.atom_id2, filter = 'TR000_4')\nres = df1.intersect(df2).select(molecule.molecule_id, molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_2')\ndf2 = df.where(element = [MASK], filter = 'TR000_4')\nres = df1.intersect(df2).select([MASK], [MASK])\n```"}
{"idx": 322, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.atom_id, filter = 'TR000_1')\nres = df1.select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000_1')\nres = df1.select([MASK])\n```"}
{"idx": 323, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.molecule_id, filter = 'TR000')\nres = df1.select(molecule.label)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR000')\nres = df1.select([MASK])\n```"}
{"idx": 324, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '-')\ntmp_res1 = df1.select(connected.atom_id).distinct()\n\ndf2 = df.select(connected.atom_id).distinct()\ntmp_res2 = df2\n\nres = df.select((cast(tmp_res1.count(), real) / tmp_res2.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [bond.bond_type], filter = '-')\ntmp_res1 = df1.select([connected.atom_id]).distinct()\n\ntmp_res2 = df.select([connected.atom_id]).distinct()\nres = df.select((cast(tmp_res1.count(), real) / tmp_res2.count()) * 100)\n```"}
{"idx": 325, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.element, filter = 'n')\ndf2 = df.where(element = molecule.label, filter = '+')\nres = df.select(df1.intersect(df2).count(distinct(molecule.molecule_id)))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [atom.element], filter = 'n')\ndf2 = df.where(element = [molecule.label], filter = '+')\nres = df.select(df1.intersect(df2).count(distinct([molecule.molecule_id])))\n```"}
{"idx": 326, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 's')\ndf2 = df.where(bond.bond_type, filter = '=')\nres = df1.intersect(df2).select(distinct(molecule.molecule_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = 's')\ndf2 = df.where(bond.bond_type, filter = '=')\nres = df1.intersect(df2).select(distinct(molecule.molecule_id))\n```"}
{"idx": 327, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '-')\ndf2 = df1.groupby(molecule.molecule_id).having(element = count(atom.atom_id), filter = '> 5')\nres = df2.select(molecule.molecule_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.groupby([MASK]).having(element = count([MASK]), filter = '> 5')\nres = df2.select([MASK])\n```"}
{"idx": 328, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.molecule_id, filter = 'TR024')\ndf2 = df1.where(element = bond.bond_type, filter = '=')\nres = df2.select(distinct(atom.element))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR024')\ndf2 = df1.where(element = [MASK], filter = '=')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 329, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df1.groupby(molecule.molecule_id).agg(count(atom.atom_id))\nres = df2.orderby(by = count(atom.atom_id), desc).limit(1).select(molecule.molecule_id, count(atom.atom_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.groupby([MASK]).agg(count([MASK]))\nres = df2.orderby(by = count([MASK]), desc).limit(1).select([MASK], count([MASK]))\n```"}
{"idx": 330, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'h').where(bond.bond_type, filter = '#')\ntmp_res1 = df1.select(connected.atom_id).distinct()\n\ndf2 = df.where(molecule.label, filter = '+')\ntmp_res2 = df2.select(molecule.molecule_id)\n\ndf3 = df.where(atom.atom_id, in, tmp_res1)\nres = df.select((df3.count(distinct = molecule.molecule_id) * 100.0) / tmp_res2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element, filter = 'h').where(bond.bond_type, filter = '#')\ntmp_res1 = df1.select(connected.atom_id).distinct()\n\ndf2 = df.where(molecule.label, filter = '+')\ntmp_res2 = df2.select(molecule.molecule_id)\n\ndf3 = df.where(connected.atom_id, in, tmp_res1)\nres = df.select((df3.count(distinct = molecule.molecule_id) * 100.0) / tmp_res2.count())\n```"}
{"idx": 331, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\nres = df1.count()\n```"}
{"idx": 332, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '-')\ndf2 = df1.where(element = bond.molecule_id, filter = 'BETWEEN TR004 AND TR010')\nres = df2.select(bond.molecule_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN TR004 AND TR010')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 333, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\ndf2 = df1.where(molecule_id, filter = 'TR008')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = [MASK])\ndf2 = df1.where(molecule_id, filter = [MASK])\nres = df2.count()\n```"}
{"idx": 334, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = atom.atom_id, filter = 'TR004_7')\ndf2 = df1.where(element = molecule.label, filter = '-')\nres = df2.select(atom.element)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [atom.atom_id], filter = 'TR004_7')\ndf2 = df1.where(element = [molecule.label], filter = '-')\nres = df2.select([atom.element])\n```"}
{"idx": 335, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'o')\ndf2 = df1.where(bond.bond_type, filter = '=')\nres = df2.select_distinct(molecule.molecule_id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = 'o')\ndf2 = df1.where(bond.bond_type, filter = '=')\nres = df2.select_distinct(molecule.molecule_id).count()\n```"}
{"idx": 336, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = bond.bond_type, filter = '#')\ndf2 = df1.where(element = molecule.label, filter = '-')\nres = df2.select(bond.molecule_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '#')\ndf2 = df1.where(element = [MASK], filter = '-')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 337, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.molecule_id, filter = 'TR002')\nres = df1.select(atom.element, bond.bond_type).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'TR002')\nres = df1.select([MASK], [MASK]).distinct()\n```"}
{"idx": 338, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element, filter = 'c')\ndf2 = df.where(bond.bond_type, filter = '=')\ndf3 = df1.intersect(df2)\ndf4 = df3.where(molecule.molecule_id, filter = 'TR012')\nres = df4.select(atom.atom_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element, filter = 'c')\ndf2 = df.where(bond.bond_type, filter = '=')\ndf3 = df1.intersect(df2)\ndf4 = df3.where(molecule.molecule_id, filter = 'TR012')\nres = df4.select(atom.atom_id)\n```"}
{"idx": 339, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = molecule.label, filter = '+')\ndf2 = df1.where(element = atom.element, filter = 'o')\nres = df2.select(atom.atom_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = 'o')\nres = df2.select([MASK])\n```"}
{"idx": 340, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.cardKingdomFoilId, filter = 'is not null')\ndf2 = df1.where(element = cards.cardKingdomId, filter = 'is not null')\nres = df2.select(cards.id, cards.name, cards.cardKingdomFoilId, cards.cardKingdomId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 341, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'borderless')\ndf2 = df1.where(element = cards.cardKingdomFoilId, filter = 'is null or == \"\"')\ndf3 = df2.where(element = cards.cardKingdomId, filter = 'is null or == \"\"')\nres = df3.select(cards.*)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [cards.borderColor], filter = 'borderless')\ndf2 = df1.where(element = [cards.cardKingdomFoilId], filter = 'is null or == \"\"')\ndf3 = df2.where(element = [cards.cardKingdomId], filter = 'is null or == \"\"')\nres = df3.select([cards.*])\n```"}
{"idx": 342, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = cards.faceConvertedManaCost, desc).limit(1)\nres = df1.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 343, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameVersion, filter = '2015')\ndf2 = df1.where(element = cards.edhrecRank, filter = '< 100')\nres = df2.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2015')\ndf2 = df1.where(element = [MASK], filter = '< 100')\nres = df2.select([MASK])\n```"}
{"idx": 344, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.rarity, filter = 'mythic')\ndf2 = df1.where(element = legalities.format, filter = 'gladiator')\ndf3 = df2.where(element = legalities.status, filter = 'Banned')\nres = df3.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'mythic')\ndf2 = df1.where(element = [MASK], filter = 'gladiator')\ndf3 = df2.where(element = [MASK], filter = 'Banned')\nres = df3.select([MASK])\n```"}
{"idx": 345, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.types, filter = 'Artifact')\ndf2 = df1.where(element = cards.side, filter = 'is NULL')\ndf3 = df2.where(element = legalities.format, filter = 'vintage')\nres = df3.select(cards.name, legalities.status)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Artifact')\ndf2 = df1.where(element = [MASK], filter = 'is NULL')\ndf3 = df2.where(element = [MASK], filter = 'vintage')\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 346, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.power, filter = '*').orwhere(element = cards.power, filter = 'is null')\ndf2 = df1.where(element = legalities.format, filter = 'commander')\ndf3 = df2.where(element = legalities.status, filter = 'Legal')\nres = df3.select(cards.id, cards.artist)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '*').orwhere(element = [MASK], filter = 'is null')\ndf2 = df1.where(element = [MASK], filter = 'commander')\ndf3 = df2.where(element = [MASK], filter = 'Legal')\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 347, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Stephen Daniele')\ndf2 = df1.where(element = cards.hasContentWarning, filter = 1)\nres = df2.select(cards.id as card_id, rulings.text as ruling_text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Stephen Daniele')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 348, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Sublime Epiphany')\ndf2 = df1.where(element = cards.number, filter = '74s')\nres = df2.select(rulings.date, rulings.text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sublime Epiphany')\ndf2 = df1.where(element = [MASK], filter = '74s')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 349, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(cards.uuid).orderby(by = count(rulings.uuid), desc).limit(1)\nres = df1.select(cards.name, cards.artist, cards.isPromo)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).orderby(by = count([MASK]), desc).limit(1)\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 350, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Annul')\ndf2 = df1.where(element = cards.number, filter = '29')\nres = df2.select(foreign_data.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Annul')\ndf2 = df1.where(element = [MASK], filter = 29)\nres = df2.select([MASK])\n```"}
{"idx": 351, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Japanese')\nres = df1.select(distinct(cards.name))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Japanese')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 352, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Chinese Simplified')\nres = df.select(cast(df1.count(), real) / df.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Chinese Simplified')\nres = df1.select(cast([MASK], real) / [MASK] * 100)\n```"}
{"idx": 353, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.language, filter = 'Italian')\nres = df1.select(sets.name, sets.totalSetSize)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italian')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 354, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Aaron Boyd')\nres = df1.select_distinct(cards.type).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aaron Boyd')\nres = df1.select_distinct([MASK]).count()\n```"}
{"idx": 355, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Angel of Mercy')\nres = df1.select(cards.keywords)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Angel of Mercy')\nres = df1.select([MASK])\n```"}
{"idx": 356, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.power, filter = '*')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '*')\nres = df1.count()\n```"}
{"idx": 357, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Duress')\nres = df1.select(cards.promoTypes)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Duress')\nres = df1.select([MASK])\n```"}
{"idx": 358, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\nres = df1.select(cards.borderColor)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\nres = df1.select([MASK])\n```"}
{"idx": 359, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Ancestor''s Chosen')\nres = df1.select(cards.originalType)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ancestor''s Chosen')\nres = df1.select([MASK])\n```"}
{"idx": 360, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Angel of Mercy')\nres = df1.select(set_translations.language).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Angel of Mercy')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 361, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.status, filter = 'restricted')\ndf2 = df1.where(element = cards.isTextless, filter = '0')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'restricted')\ndf2 = df1.where(element = [MASK], filter = '0')\nres = df2.count()\n```"}
{"idx": 362, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Condemn')\nres = df1.select(rulings.text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Condemn')\nres = df1.select([MASK])\n```"}
{"idx": 363, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.status, filter = 'restricted')\ndf2 = df1.where(element = cards.isStarter, filter = 1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'restricted')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.count()\n```"}
{"idx": 364, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Cloudchaser Eagle')\nres = df1.select(legalities.format, legalities.status)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Cloudchaser Eagle')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 365, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Benalish Knight')\nres = df1.select(cards.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Benalish Knight')\nres = df1.select([MASK])\n```"}
{"idx": 366, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Benalish Knight')\nres = df1.select(legalities.format, legalities.status)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Benalish Knight')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 367, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Phyrexian')\nres = df1.select(distinct(c.artist))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Phyrexian')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 368, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'borderless')\nres = df.select(cast(df1.count(), real) / df.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'borderless')\nres = df.select(cast(df1.[MASK], real) / [MASK] * 100)\n```"}
{"idx": 369, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'German')\ndf2 = df1.where(element = cards.isReprint, filter = 1)\nres = df2.select(cards.uuid).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'German')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 370, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'borderless')\ndf2 = df1.where(element = foreign_data.language, filter = 'Russian')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'borderless')\ndf2 = df1.where(element = [MASK], filter = 'Russian')\nres = df2.count()\n```"}
{"idx": 371, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'French').where(element = cards.isStorySpotlight, filter = 1)\ntmp_res1 = df1.count()\ndf2 = df.where(element = cards.isStorySpotlight, filter = 1)\ntmp_res2 = df2.count()\nres = df.select(cast(tmp_res1, float) / tmp_res2 * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'French').where(element = [MASK], filter = 1)\ntmp_res1 = df1.count()\ndf2 = df.where(element = [MASK], filter = 1)\ntmp_res2 = df2.count()\nres = df.select(cast(tmp_res1, float) / tmp_res2 * 100)\n```"}
{"idx": 372, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.toughness, filter = '99')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '99')\nres = df1.count()\n```"}
{"idx": 373, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Aaron Boyd')\nres = df1.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aaron Boyd')\nres = df1.select([MASK])\n```"}
{"idx": 374, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'black')\ndf2 = df1.where(element = cards.availability, filter = 'mtgo')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'black')\ndf2 = df1.where(element = [MASK], filter = 'mtgo')\nres = df2.count()\n```"}
{"idx": 375, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.convertedManaCost, filter = 0)\nres = df1.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 0)\nres = df1.select([MASK])\n```"}
{"idx": 376, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.keywords, filter = 'LIKE %flying%')\nres = df1.select(cards.layout)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'LIKE %flying%')\nres = df1.select([MASK])\n```"}
{"idx": 377, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.originalType, filter = 'Summon - Angel')\ndf2 = df1.where(element = cards.subtypes, filter = 'is not like', pattern = '%Angel%', ignore_null = True)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Summon - Angel')\ndf2 = df1.where(element = [MASK], filter = 'is not like', pattern = '%Angel%', ignore_null = True)\nres = df2.count()\n```"}
{"idx": 378, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.cardKingdomFoilId, filter = 'is not null')\ndf2 = df1.where(element = cards.cardKingdomId, filter = 'is not null')\ndf3 = df2.where(element = cards.hasFoil, filter = 1)\ndf4 = df3.where(element = cards.hasNonFoil, filter = 1)\nres = df4.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\ndf3 = df2.where(element = [MASK], filter = 1)\ndf4 = df3.where(element = [MASK], filter = 1)\nres = df4.select([MASK])\n```"}
{"idx": 379, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.duelDeck, filter = 'a')\nres = df1.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'a')\nres = df1.select([MASK])\n```"}
{"idx": 380, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameVersion, filter = '2015')\nres = df1.select(cards.edhrecRank)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2015')\nres = df1.select([MASK])\n```"}
{"idx": 381, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Chinese Simplified')\nres = df1.select(c.artist).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Chinese Simplified')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 382, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.availability, filter = 'paper')\ndf2 = df1.where(element = foreign_data.language, filter = 'Japanese')\nres = df2.select(cards.id, cards.name, cards.availability, foreign_data.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'paper')\ndf2 = df1.where(element = [MASK], filter = 'Japanese')\nres = df2.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 383, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'white')\ndf2 = df1.where(element = legalities.status, filter = 'Banned')\nres = df2.select(cards.uuid).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'white')\ndf2 = df1.where(element = [MASK], filter = 'Banned')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 384, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.format, filter = 'legacy')\nres = df1.select(foreign_data.uuid, foreign_data.language).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'legacy')\nres = df1.select([MASK], [MASK]).distinct()\n```"}
{"idx": 385, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Beacon of Immortality')\nres = df1.select(rulings.text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Beacon of Immortality')\nres = df1.select([MASK])\n```"}
{"idx": 386, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameVersion, filter = 'future')\ndf2 = df1.groupby(legalities.status).select(cards.uuid).distinct()\nres = df2.count().as('future_frame_card_count').select(legalities.status)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [cards.frameVersion], filter = 'future')\ndf2 = df1.groupby([legalities.status]).select([cards.uuid]).distinct()\nres = df2.count().as('[MASK]').select([legalities.status])\n```"}
{"idx": 387, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.code, filter = 'OGW')\nres = df1.select(cards.name, cards.colors)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'OGW')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 388, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.setCode, filter = '10E')\ndf2 = df1.where(element = cards.convertedManaCost, filter = 5)\nres = df2.select(cards.name, set_translations.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '10E')\ndf2 = df1.where(element = [MASK], filter = 5)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 389, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.originalType, filter = 'Creature - Elf')\nres = df1.select(cards.name, rulings.date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Creature - Elf')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 390, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.id, filter = 'between 1 and 20')\nres = df1.select(cards.colors, legalities.format)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 1 and 20')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 391, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.originalType, filter = 'Artifact')\ndf2 = df1.where(element = cards.colors, filter = 'B')\nres = df2.select(cards.name, cards.uuid, foreign_data.language, foreign_data.flavorText)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Artifact')\ndf2 = df1.where(element = [MASK], filter = 'B')\nres = df2.select([MASK], [MASK], foreign_data.[MASK], foreign_data.[MASK])\n```"}
{"idx": 392, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.rarity, filter = 'uncommon')\ndf2 = df1.orderby(by = rulings.date, asc).limit(3)\nres = df2.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'uncommon')\ndf2 = df1.orderby(by = [MASK], asc).limit(3)\nres = df2.select([MASK])\n```"}
{"idx": 393, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'John Avon')\ndf2 = df1.where(element = cards.cardKingdomFoilId, filter = 'is not null')\ndf3 = df2.where(element = cards.cardKingdomId, filter = 'is null')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'John Avon')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\ndf3 = df2.where(element = [MASK], filter = 'is null')\nres = df3.count()\n```"}
{"idx": 394, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'white')\ndf2 = df1.where(element = cards.cardKingdomFoilId, filter = 'is not null')\ndf3 = df2.where(element = cards.cardKingdomId, filter = 'is not null')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'white')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\ndf3 = df2.where(element = [MASK], filter = 'is not null')\nres = df3.count()\n```"}
{"idx": 395, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'UDON')\ndf2 = df1.where(element = cards.availability, filter = 'like', pattern = '%mtgo%')\ndf3 = df2.where(element = cards.hand, filter = '-1')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'UDON')\ndf2 = df1.where(element = [MASK], filter = 'like', pattern = '%mtgo%')\ndf3 = df2.where(element = [MASK], filter = '-1')\nres = df3.count()\n```"}
{"idx": 396, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameVersion, filter = '1993')\ndf2 = df1.where(element = cards.availability, filter = 'like', pattern = '%paper%')\ndf3 = df2.where(element = cards.hasContentWarning, filter = 1)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1993')\ndf2 = df1.where(element = [MASK], filter = 'like', pattern = '%paper%')\ndf3 = df2.where(element = [MASK], filter = 1)\nres = df3.count()\n```"}
{"idx": 397, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.layout, filter = 'normal')\ndf2 = df1.where(element = cards.frameVersion, filter = '2003')\ndf3 = df2.where(element = cards.borderColor, filter = 'black')\ndf4 = df3.where(element = cards.availability, filter = 'mtgo,paper')\nres = df4.select(cards.manaCost)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'normal')\ndf2 = df1.where(element = [MASK], filter = '2003')\ndf3 = df2.where(element = [MASK], filter = 'black')\ndf4 = df3.where(element = [MASK], filter = 'mtgo,paper')\nres = df4.select([MASK])\n```"}
{"idx": 398, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Rob Alexander')\nres = df1.select(cards.convertedManaCost).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Rob Alexander')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 399, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.availability, filter = 'like %arena%')\nres = df1.select_distinct(cards.types)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like %arena%')\nres = df1.select_distinct([MASK])\n```"}
{"idx": 400, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Spanish')\nres = df1.select(c.setCode).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Spanish')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 401, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameEffects, filter = 'legendary')\ndf2 = df1.where(element = cards.isOnlineOnly, filter = 1)\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'legendary')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 402, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.isStorySpotlight, filter = 1).where(element = cards.isTextless, filter = 0)\ndf2 = df.select(cards.id).where(element = cards.isStorySpotlight, filter = 1)\ndf3 = df.select(cards.id).count()\ndf4 = df.select(cards.id).count()\nres = df.select((df2.count() * 100.0 / df4.count()) as percentage, df1.select(cards.id))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 1).where(element = [MASK], filter = 0)\ndf2 = df.where(element = [MASK], filter = 1)\nres = df.select((df2.count() * 100.0 / df.select([MASK]).count()) as percentage, df1.select([MASK]))\n```"}
{"idx": 403, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Spanish')\ndf2 = df.select(foreign_data.name)\ndf3 = df.groupby().count()\ndf4 = df1.groupby().count()\nres = df2.select(foreign_data.name, (df4.count() * 100.0 / df3.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [foreign_data.language], filter = 'Spanish')\ndf2 = df.select([foreign_data.name])\ndf3 = df.groupby().count()\ndf4 = df1.groupby().count()\nres = df2.select([foreign_data.name], (df4.count() * 100.0 / df3.count()))\n```"}
{"idx": 404, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.baseSetSize, filter = 309)\nres = df1.select(set_translations.language).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 309)\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 405, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.block, filter = 'Commander')\ndf2 = df1.where(element = set_translations.language, filter = 'Portuguese (Brasil)')\nres = df2.select(set_translations.setCode).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Commander')\ndf2 = df1.where(element = [MASK], filter = 'Portuguese (Brasil)')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 406, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.types, filter = 'like %Creature%')\ndf2 = df1.where(element = legalities.status, filter = 'legal')\nres = df2.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like %Creature%')\ndf2 = df1.where(element = [MASK], filter = 'legal')\nres = df2.select([MASK])\n```"}
{"idx": 407, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'German')\ndf2 = df1.where(element = foreign_data.type, filter = 'is not null')\nres = df2.select_distinct(foreign_data.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'German')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select_distinct([MASK])\n```"}
{"idx": 408, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.power, filter = 'is NULL or = *')\ndf2 = df1.where(element = cards.text, filter = 'like %triggered ability%')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is NULL or = *')\ndf2 = df1.where(element = [MASK], filter = 'like %triggered ability%')\nres = df2.count()\n```"}
{"idx": 409, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.format, filter = 'premodern')\ndf2 = df1.where(element = rulings.text, filter = 'This is a triggered mana ability.')\ndf3 = df2.where(element = cards.side, filter = 'is NULL')\nres = df3.select(cards.uuid).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'premodern')\ndf2 = df1.where(element = [MASK], filter = 'This is a triggered mana ability.')\ndf3 = df2.where(element = [MASK], filter = 'is NULL')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 410, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Erica Yang')\ndf2 = df1.where(element = cards.availability, filter = 'like', value = '%paper%')\ndf3 = df2.where(element = legalities.format, filter = 'pauper')\ndf4 = df3.where(element = legalities.status, filter = 'legal')\nres = df4.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Erica Yang')\ndf2 = df1.where(element = [MASK], filter = 'like', value = '%paper%')\ndf3 = df2.where(element = [MASK], filter = 'pauper')\ndf4 = df3.where(element = [MASK], filter = 'legal')\nres = df4.select([MASK])\n```"}
{"idx": 411, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(foreign_data.text, filter = 'Das perfekte Gegenmittel zu einer dichten Formation')\nres = df1.select(cards.artist)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(foreign_data.[MASK], filter = 'Das perfekte Gegenmittel zu einer dichten Formation')\nres = df1.select(cards.[MASK])\n```"}
{"idx": 412, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.type, filter = 'like %Creature%')\ndf2 = df1.where(element = cards.layout, filter = 'normal')\ndf3 = df2.where(element = cards.borderColor, filter = 'black')\ndf4 = df3.where(element = cards.artist, filter = 'Matthew D. Wilson')\ndf5 = df4.where(element = foreign_data.language, filter = 'French')\nres = df5.select(foreign_data.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like %Creature%')\ndf2 = df1.where(element = [MASK], filter = 'normal')\ndf3 = df2.where(element = [MASK], filter = 'black')\ndf4 = df3.where(element = [MASK], filter = 'Matthew D. Wilson')\ndf5 = df4.where(element = [MASK], filter = 'French')\nres = df5.select([MASK])\n```"}
{"idx": 413, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.rarity, filter = 'rare')\ndf2 = df1.where(element = rulings.date, filter = '2007-02-01')\nres = df2.select(cards.id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'rare')\ndf2 = df1.where(element = [MASK], filter = '2007-02-01')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 414, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.baseSetSize, filter = 180)\ndf2 = df1.where(element = sets.block, filter = 'Ravnica')\nres = df2.select(set_translations.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 180)\ndf2 = df1.where(element = [MASK], filter = 'Ravnica')\nres = df2.select([MASK])\n```"}
{"idx": 415, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.format, filter = 'commander').where(element = legalities.status, filter = 'legal')\ndf2 = df1.where(element = cards.hasContentWarning, filter = '= 0')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'commander').where(element = [MASK], filter = 'legal')\ndf2 = df1.where(element = [MASK], filter = '= 0')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 416, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.power, filter = 'is NULL or = *')\ndf2 = df.where(element = foreign_data.language, filter = 'French').where(element = foreign_data.uuid, filter = in, df1.uuid)\nres = df.select((df2.count(distinct = foreign_data.uuid) * 100.0 / df1.count(distinct = cards.uuid)))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [cards.power], filter = 'is NULL or = *')\ndf2 = df.where(element = [foreign_data.language], filter = 'French').where(element = [foreign_data.uuid], filter = in, df1.[cards.uuid])\nres = df.select((df2.count(distinct = [foreign_data.uuid]) * 100.0 / df1.count(distinct = [cards.uuid])))\n```"}
{"idx": 417, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.language, filter = 'Japanese')\ndf2 = df.where(element = sets.type, filter = 'expansion').where(element = sets.code, filter = in, df1.select(set_translations.setCode))\nres = df.select((df2.count() * 100.0) / df1.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Japanese')\ndf2 = df.where(element = [MASK], filter = 'expansion').where(element = [MASK], filter = in, df1.select([MASK]))\nres = df.select((df2.count() * 100.0) / df1.count())\n```"}
{"idx": 418, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Daren Bader')\nres = df1.select(cards.availability)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Daren Bader')\nres = df1.select([MASK])\n```"}
{"idx": 419, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.colors, filter = 'is not null')\ndf2 = df1.where(element = cards.colors, filter = '!= \"\"')\ndf3 = df2.where(element = cards.borderColor, filter = 'borderless')\ndf4 = df3.where(element = cards.edhrecRank, filter = '> 12000')\nres = df4.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.where(element = [MASK], filter = \"''\")\ndf3 = df2.where(element = [MASK], filter = 'borderless')\ndf4 = df3.where(element = [MASK], filter = '> 12000')\nres = df4.count()\n```"}
{"idx": 420, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.isOversized, filter = 1)\ndf2 = df1.where(element = cards.isReprint, filter = 1)\ndf3 = df2.where(element = cards.isPromo, filter = 1)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 1)\ndf3 = df2.where(element = [MASK], filter = 1)\nres = df3.count()\n```"}
{"idx": 421, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.promoTypes, filter = 'arenaleague')\ndf2 = df1.where(element = cards.power, filter = 'is null or = *')\nres = df2.orderby(by = cards.name).limit(3).select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'arenaleague')\ndf2 = df1.where(element = [MASK], filter = 'is null or = *')\nres = df2.orderby(by = [MASK]).limit(3).select([MASK])\n```"}
{"idx": 422, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.multiverseid, filter = 149934)\nres = df1.select(foreign_data.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 149934)\nres = df1.select([MASK])\n```"}
{"idx": 423, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.cardKingdomFoilId, filter = 'is not null').where(element = cards.cardKingdomId, filter = 'is not null')\ndf2 = df1.orderby(by = cards.cardKingdomFoilId, asc).limit(3)\nres = df2.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null').where(element = [MASK], filter = 'is not null')\ndf2 = df1.orderby(by = [MASK], asc).limit(3)\nres = df2.select([MASK])\n```"}
{"idx": 424, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.isTextless, filter = 1)\ndf2 = df1.where(element = cards.layout, filter = 'normal')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 'normal')\nres = df2.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 425, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.side, filter = 'is NULL')\ndf2 = df1.where(element = cards.subtypes, filter = 'like %Angel%')\ndf3 = df2.where(element = cards.subtypes, filter = 'like %Wizard%')\nres = df3.select(cards.number)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is NULL')\ndf2 = df1.where(element = [MASK], filter = 'like %Angel%')\ndf3 = df2.where(element = [MASK], filter = 'like %Wizard%')\nres = df3.select([MASK])\n```"}
{"idx": 426, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.mtgoCode, filter = 'IS NULL OR = \"\"')\nres = df1.orderby(by = sets.name).limit(3).select(sets.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'IS NULL OR = \"\"')\nres = df1.orderby(by = [MASK]).limit(3).select([MASK])\n```"}
{"idx": 427, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.mcmName, filter = 'Archenemy')\ndf2 = df1.where(element = sets.code, filter = 'ARC')\nres = df2.select(set_translations.language).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Archenemy')\ndf2 = df1.where(element = [MASK], filter = 'ARC')\nres = df2.select([MASK]).distinct()\n```"}
{"idx": 428, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.id, filter = 5)\nres = df1.select(sets.name, set_translations.translation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 5)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 429, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.id, filter = 206)\nres = df1.select(set_translations.language, sets.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 206)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 430, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.block, filter = 'Shadowmoor')\ndf2 = df1.where(element = foreign_data.language, filter = 'Italian')\nres = df2.select(sets.id, sets.name).distinct().orderby(by = sets.name).limit(2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Shadowmoor')\ndf2 = df1.where(element = [MASK], filter = 'Italian')\nres = df2.select([MASK], [MASK]).distinct().orderby(by = [MASK]).limit(2)\n```"}
{"idx": 431, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.isForeignOnly, filter = 0)\ndf2 = df1.where(element = sets.isFoilOnly, filter = 1)\ndf3 = df2.where(element = set_translations.language, filter = 'Japanese')\nres = df3.select(sets.id, sets.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 0)\ndf2 = df1.where(element = [MASK], filter = 1)\ndf3 = df2.where(element = [MASK], filter = 'Japanese')\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 432, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.language, filter = 'Russian')\ndf2 = df1.orderby(by = sets.baseSetSize, desc).limit(1)\nres = df2.select(sets.name, sets.baseSetSize)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Russian')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 433, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Chinese Simplified')\ndf2 = df1.where(element = cards.isOnlineOnly, filter = 1)\ntmp_res1 = df2.select(foreign_data.uuid).distinct().count()\ntmp_res2 = df.where(element = cards.isOnlineOnly, filter = 1).count()\nres = df.select((tmp_res1 / tmp_res2) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [foreign_data.language], filter = 'Chinese Simplified')\ndf2 = df1.where(element = [cards.isOnlineOnly], filter = 1)\ntmp_res1 = df2.select([foreign_data.uuid]).distinct().count()\ntmp_res2 = df.where(element = [cards.isOnlineOnly], filter = 1).count()\nres = df.select((tmp_res1 / tmp_res2) * 100)\n```"}
{"idx": 434, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.language, filter = 'Japanese')\ndf2 = df1.where(element = sets.mtgoCode, filter = 'is null or == \"\"')\ndf3 = df2.where_not_exists(element = sets.code, subquery = 'set_translations.language != Japanese')\nres = df3.count(distinct = sets.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Japanese')\ndf2 = df1.where(element = [MASK], filter = 'is null or == \"\"')\ndf3 = df2.where_not_exists(element = [MASK], subquery = '[MASK] != Japanese')\nres = df3.count(distinct = [MASK])\n```"}
{"idx": 435, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'black')\nres = df1.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'black')\nres = df1.select([MASK])\n```"}
{"idx": 436, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameEffects, filter = 'extendedart')\nres = df1.select(cards.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'extendedart')\nres = df1.select([MASK])\n```"}
{"idx": 437, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'black')\ndf2 = df1.where(element = cards.isFullArt, filter = 1)\nres = df2.select(cards.*)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'black')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.select([MASK])\n```"}
{"idx": 438, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.id, filter = 174)\nres = df1.select(set_translations.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 174)\nres = df1.select([MASK])\n```"}
{"idx": 439, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.code, filter = 'ALL')\nres = df1.select(sets.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'ALL')\nres = df1.select([MASK])\n```"}
{"idx": 440, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.name, filter = 'A Pedra Fellwar')\nres = df1.select(foreign_data.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'A Pedra Fellwar')\nres = df1.select([MASK])\n```"}
{"idx": 441, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.releaseDate, filter = '2007-07-13')\nres = df1.select(sets.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2007-07-13')\nres = df1.select([MASK])\n```"}
{"idx": 442, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.block, filter = 'Masques')\ndf2 = df.where(element = sets.block, filter = 'Mirage')\nres = df1.union(df2).select(sets.baseSetSize, sets.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Masques')\ndf2 = df.where(element = [MASK], filter = 'Mirage')\nres = df1.union(df2).select([MASK], [MASK])\n```"}
{"idx": 443, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.type, filter = 'expansion')\nres = df1.select(sets.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'expansion')\nres = df1.select([MASK])\n```"}
{"idx": 444, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.watermark, filter = 'boros')\nres = df1.select(foreign_data.name, foreign_data.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'boros')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 445, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.watermark, filter = 'colorpie')\nres = df1.select(foreign_data.language, foreign_data.flavorText, cards.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'colorpie')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 446, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Abyssal Horror')\ndf2 = df1.where(element = cards.convertedManaCost, filter = 10)\nres = df.select((df2.count() / df1.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Abyssal Horror')\ndf2 = df1.where(element = [MASK], filter = 10)\nres = df2.select((df2.count() / df1.count()) * 100)\n```"}
{"idx": 447, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.type, filter = 'expansion')\ndf2 = df.where(element = sets.type, filter = 'commander')\nres = df1.union(df2).select(sets.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'expansion')\ndf2 = df.where(element = [MASK], filter = 'commander')\nres = df1.union(df2).select([MASK])\n```"}
{"idx": 448, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.watermark, filter = 'abzan')\nres = df1.select(foreign_data.name, foreign_data.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'abzan')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 449, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.watermark, filter = 'Azorius')\nres = df1.select(foreign_data.language, cards.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Azorius')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 450, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Aaron Miller')\ndf2 = df1.where(element = cards.cardKingdomFoilId, filter = 'is not null')\ndf3 = df2.where(element = cards.cardKingdomId, filter = 'is not null')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aaron Miller')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\ndf3 = df2.where(element = [MASK], filter = 'is not null')\nres = df3.count()\n```"}
{"idx": 451, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.hand, filter = 3)\ndf2 = df1.where(element = cards.availability, filter = 'like %paper%')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 3)\ndf2 = df1.where(element = [MASK], filter = 'like %paper%')\nres = df2.count()\n```"}
{"idx": 452, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.isTextless, filter = 0)\nres = df1.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 0)\nres = df1.select([MASK])\n```"}
{"idx": 453, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\nres = df1.select(cards.convertedManaCost)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\nres = df1.select([MASK])\n```"}
{"idx": 454, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'white')\ndf2 = df1.where(element = cards.power, filter = 'is null').orwhere(element = cards.power, filter = '*')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'white')\ndf2 = df1.where(element = [MASK], filter = 'is null').orwhere(element = [MASK], filter = '*')\nres = df2.count()\n```"}
{"idx": 455, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.isPromo, filter = 1)\ndf2 = df1.where(element = cards.side, filter = 'is not null')\nres = df2.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK])\n```"}
{"idx": 456, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Molimo, Maro-Sorcerer')\nres = df1.select(cards.subtypes, cards.supertypes)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Molimo, Maro-Sorcerer')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 457, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.promoTypes, filter = 'bundle')\nres = df1.select(cards.purchaseUrls)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'bundle')\nres = df1.select([MASK])\n```"}
{"idx": 458, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'black')\ndf2 = df1.where(element = cards.availability, filter = 'like', pattern = '%arena%')\ndf3 = df2.where(element = cards.availability, filter = 'like', pattern = '%mtgo%')\nres = df3.select_distinct(cards.artist).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'black')\ndf2 = df1.where(element = [MASK], filter = 'like', pattern = '%arena%')\ndf3 = df2.where(element = [MASK], filter = 'like', pattern = '%mtgo%')\nres = df3.select_distinct([MASK]).count()\n```"}
{"idx": 459, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Serra Angel', 'Shrine Keeper')\ndf2 = df1.orderby(by = cards.convertedManaCost, desc).limit(1)\nres = df2.select(cards.name, cards.convertedManaCost)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Serra Angel', 'Shrine Keeper')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 460, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.flavorName, filter = 'Battra, Dark Destroyer')\nres = df1.select(cards.artist)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Battra, Dark Destroyer')\nres = df1.select([MASK])\n```"}
{"idx": 461, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameVersion, filter = '2003')\ndf2 = df1.orderby(by = cards.convertedManaCost, desc).limit(3)\nres = df2.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2003')\ndf2 = df1.orderby(by = [MASK], desc).limit(3)\nres = df2.select([MASK])\n```"}
{"idx": 462, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = set_translations.language, filter = 'Italian')\nres = df2.select(set_translations.translation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = [MASK], filter = 'Italian')\nres = df2.select([MASK])\n```"}
{"idx": 463, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Angel of Mercy')\ntmp_res1 = df1.select(cards.setCode)\n\ndf2 = df.where(element = set_translations.setCode, filter = 'in', value = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Angel of Mercy')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df2.count()\n```"}
{"idx": 464, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.translation, filter = 'Hauptset Zehnte Edition')\nres = df1.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hauptset Zehnte Edition')\nres = df1.select([MASK])\n```"}
{"idx": 465, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = foreign_data.language, filter = 'Korean')\nres = df2.select(foreign_data.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = [MASK], filter = 'Korean')\nres = df2.select([MASK])\n```"}
{"idx": 466, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.translation, filter = 'Hauptset Zehnte Edition')\ntmp_res1 = df1.select(set_translations.setCode)\n\ndf2 = df.where(element = cards.setCode, filter = tmp_res1).where(element = cards.artist, filter = 'Adam Rex')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [set_translations.translation], filter = 'Hauptset Zehnte Edition')\ntmp_res1 = df1.select([set_translations.setCode])\n\ndf2 = df.where(element = [cards.setCode], filter = tmp_res1).where(element = [cards.artist], filter = 'Adam Rex')\nres = df2.count()\n```"}
{"idx": 467, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.translation, filter = 'Hauptset Zehnte Edition')\nres = df1.select(sets.baseSetSize)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hauptset Zehnte Edition')\nres = df1.select([MASK])\n```"}
{"idx": 468, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Eighth Edition')\ndf2 = df1.where(element = set_translations.language, filter = 'Chinese Simplified')\nres = df2.select(set_translations.translation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Eighth Edition')\ndf2 = df1.where(element = [MASK], filter = 'Chinese Simplified')\nres = df2.select([MASK])\n```"}
{"idx": 469, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Angel of Mercy')\ndf2 = df1.where(element = sets.mtgoCode, filter = 'is not null')\nres = df2.select(sets.name).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Angel of Mercy')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK]).distinct()\n```"}
{"idx": 470, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\nres = df1.select(sets.releaseDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\nres = df1.select([MASK])\n```"}
{"idx": 471, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.translation, filter = 'Hauptset Zehnte Edition')\nres = df1.select(sets.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hauptset Zehnte Edition')\nres = df1.select([MASK])\n```"}
{"idx": 472, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.block, filter = 'Ice Age')\ndf2 = df1.where(element = set_translations.language, filter = 'Italian')\ndf3 = df2.where(element = set_translations.translation, filter = 'is not null')\nres = df3.select(set_translations.setCode).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ice Age')\ndf2 = df1.where(element = [MASK], filter = 'Italian')\ndf3 = df2.where(element = [MASK], filter = 'is not null')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 473, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Adarkar Valkyrie')\nres = df1.select(sets.isForeignOnly)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Adarkar Valkyrie')\nres = df1.select([MASK])\n```"}
{"idx": 474, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.language, filter = 'Italian')\ndf2 = df1.where(element = set_translations.translation, filter = 'is not null')\ndf3 = df2.where(element = sets.baseSetSize, filter = '< 100')\nres = df3.select(sets.code).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Italian')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\ndf3 = df2.where(element = [MASK], filter = '< 100')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 475, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df1.where(element = cards.borderColor, filter = 'black')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df1.where(element = [MASK], filter = 'black')\nres = df2.count()\n```"}
{"idx": 476, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df1.orderby(by = cards.convertedManaCost, desc).limit(1)\nres = df2.select(cards.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 477, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df.where(element = cards.artist, filter = 'IN', values = ['Jeremy Jarvis', 'Aaron Miller', 'Chippy'])\nres = df2.select(distinct = cards.artist)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df.where(element = [MASK], filter = 'IN', values = ['[MASK]', '[MASK]', '[MASK]'])\nres = df2.select(distinct = [MASK])\n```"}
{"idx": 478, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df1.where(element = cards.number, filter = 4)\nres = df2.select(cards.*)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df1.where(element = [MASK], filter = 4)\nres = df2.select([MASK])\n```"}
{"idx": 479, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.setCode, filter = 'CSP')\ndf2 = df1.where(element = cards.convertedManaCost, filter = '> 5')\ndf3 = df2.where(element = cards.power, filter = '*').orwhere(element = cards.power, filter = 'is null')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'CSP')\ndf2 = df1.where(element = [MASK], filter = '> 5')\ndf3 = df2.where(element = [MASK], filter = '*').orwhere(element = [MASK], filter = 'is null')\nres = df3.count()\n```"}
{"idx": 480, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = foreign_data.language, filter = 'Italian')\nres = df2.select(foreign_data.flavorText)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = [MASK], filter = 'Italian')\nres = df2.select([MASK])\n```"}
{"idx": 481, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = foreign_data.flavorText, filter = 'is not null')\nres = df2.select(foreign_data.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK])\n```"}
{"idx": 482, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = foreign_data.language, filter = 'German')\nres = df2.select(foreign_data.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Ancestor's Chosen\")\ndf2 = df1.where(element = [MASK], filter = 'German')\nres = df2.select([MASK])\n```"}
{"idx": 483, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df1.where(element = foreign_data.language, filter = 'Italian')\nres = df2.select(foreign_data.text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df1.where(element = [MASK], filter = 'Italian')\nres = df2.select([MASK])\n```"}
{"idx": 484, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df1.where(element = foreign_data.language, filter = 'Italian')\ndf3 = df2.where(element = cards.convertedManaCost, filter = max(cards.convertedManaCost))\nres = df3.select(foreign_data.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df1.where(element = [MASK], filter = 'Italian')\ndf3 = df2.where(element = [MASK], filter = max([MASK]))\nres = df3.select([MASK])\n```"}
{"idx": 485, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Reminisce')\nres = df1.select(rulings.date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Reminisce')\nres = df1.select([MASK])\n```"}
{"idx": 486, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df1.where(element = cards.convertedManaCost, filter = 7)\nres = df.select((df2.count() * 100.0) / df1.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df1.where(element = [MASK], filter = 7)\nres = df2.select((df2.count() * 100.0) / df1.count())\n```"}
{"idx": 487, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Coldsnap')\ndf2 = df.where(element = cards.setCode, filter = df1.select(sets.code))\nres = df2.select((cast(df2.where(element = cards.cardKingdomFoilId, filter = 'is not null').where(element = cards.cardKingdomId, filter = 'is not null').count(), real) / df2.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Coldsnap')\ndf2 = df.where(element = [MASK], filter = df1.select([MASK]))\nres = df2.select((cast(df2.where(element = [MASK], filter = 'is not null').where(element = [MASK], filter = 'is not null').count(), real) / df2.count()) * 100)\n```"}
{"idx": 488, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.releaseDate, filter = '2017-07-14')\nres = df1.select(sets.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2017-07-14')\nres = df1.select([MASK])\n```"}
{"idx": 489, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.code, filter = 'PKHC')\nres = df1.select(sets.keyruneCode)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'PKHC')\nres = df1.select([MASK])\n```"}
{"idx": 490, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.code, filter = 'SS2')\nres = df1.select(sets.mcmId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SS2')\nres = df1.select([MASK])\n```"}
{"idx": 491, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.releaseDate, filter = '2017-06-09')\nres = df1.select(sets.mcmName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2017-06-09')\nres = df1.select([MASK])\n```"}
{"idx": 492, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'From the Vault: Lore')\nres = df1.select(sets.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'From the Vault: Lore')\nres = df1.select([MASK])\n```"}
{"idx": 493, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Commander 2014 Oversized')\nres = df1.select(sets.parentCode)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Commander 2014 Oversized')\nres = df1.select([MASK])\n```"}
{"idx": 494, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Jim Pavelec')\nres = df1.select(cards.name, rulings.text, cards.hasContentWarning)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Jim Pavelec')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 495, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Evacuation')\nres = df1.select(sets.releaseDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Evacuation')\nres = df1.select([MASK])\n```"}
{"idx": 496, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.translation, filter = 'Rinascita di Alara')\nres = df1.select(sets.baseSetSize)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Rinascita di Alara')\nres = df1.select([MASK])\n```"}
{"idx": 497, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.translation, filter = 'Huiti\u00e8me \u00e9dition')\nres = df1.select(sets.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Huiti\u00e8me \u00e9dition')\nres = df1.select([MASK])\n```"}
{"idx": 498, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Tendo Ice Bridge')\ndf2 = df1.where(element = set_translations.language, filter = 'French')\nres = df2.select(set_translations.translation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Tendo Ice Bridge')\ndf2 = df1.where(element = [MASK], filter = 'French')\nres = df2.select([MASK])\n```"}
{"idx": 499, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Tenth Edition')\ntmp_res1 = df1.select(sets.code)\n\ndf2 = df.where(element = set_translations.setCode, filter = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Tenth Edition')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = tmp_res1)\nres = df2.count()\n```"}
{"idx": 500, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Fellwar Stone')\ndf2 = df1.where(element = set_translations.language, filter = 'Japanese')\nres = df2.select(set_translations.translation).as(japanese_set_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fellwar Stone')\ndf2 = df1.where(element = [MASK], filter = 'Japanese')\nres = df2.select([MASK])\n```"}
{"idx": 501, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = \"Journey into Nyx Hero's Path\")\ndf2 = df1.orderby(by = cards.convertedManaCost, desc).limit(1)\nres = df2.select(cards.name, cards.convertedManaCost)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '[MASK]')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 502, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.translation, filter = 'Ola de fr\u00edo')\nres = df1.select(sets.releaseDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ola de fr\u00edo')\nres = df1.select([MASK])\n```"}
{"idx": 503, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Samite Pilgrim')\nres = df1.select(sets.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Samite Pilgrim')\nres = df1.select([MASK])\n```"}
{"idx": 504, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'World Championship Decks 2004')\ntmp_res1 = df1.select(sets.code)\n\ndf2 = df.where(element = cards.setCode, filter = tmp_res1)\ndf3 = df2.where(element = cards.convertedManaCost, filter = 3)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [sets.name], filter = 'World Championship Decks 2004')\ntmp_res1 = df1.select([sets.code])\n\ndf2 = df.where(element = [cards.setCode], filter = tmp_res1)\ndf3 = df2.where(element = [cards.convertedManaCost], filter = 3)\nres = df3.count()\n```"}
{"idx": 505, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Mirrodin')\ndf2 = df1.where(element = set_translations.language, filter = 'Chinese Simplified')\nres = df2.select(set_translations.translation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Mirrodin')\ndf2 = df1.where(element = [MASK], filter = 'Chinese Simplified')\nres = df2.select([MASK])\n```"}
{"idx": 506, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Japanese')\ndf2 = df.where(element = sets.isNonFoilOnly, filter = 1).select(foreign_data.uuid).distinct()\ndf3 = df1.select(cards.uuid).distinct()\nres = df.select((df2.count() * 100.0 / df3.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [foreign_data.language], filter = 'Japanese')\ndf2 = df.where(element = [sets.isNonFoilOnly], filter = 1).select([foreign_data.uuid]).distinct()\ndf3 = df1.select([cards.uuid]).distinct()\nres = df.select((df2.count() * 100.0 / df3.count()))\n```"}
{"idx": 507, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = foreign_data.language, filter = 'Portuguese (Brazil)')\ndf2 = df1.where(element = cards.isOnlineOnly, filter = 1)\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Portuguese (Brazil)')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 508, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Aleksi Briclot')\ndf2 = df1.where(element = cards.isTextless, filter = 1)\nres = df2.select(cards.availability)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aleksi Briclot')\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.select([MASK])\n```"}
{"idx": 509, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = sets.baseSetSize, desc).limit(1)\nres = df1.select(sets.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 510, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.side, filter = 'is null')\ndf2 = df1.orderby(by = cards.convertedManaCost, desc).limit(1)\nres = df2.select(cards.artist)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is null')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 511, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.cardKingdomFoilId, filter = 'is not null').where(element = cards.cardKingdomId, filter = 'is not null')\ndf2 = df1.groupby(cards.frameEffects).orderby(by = count(), desc).limit(1)\nres = df2.select(cards.frameEffects, count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'is not null').where(element = [MASK], filter = 'is not null')\ndf2 = df1.groupby([MASK]).orderby(by = count(), desc).limit(1)\nres = df2.select([MASK], count())\n```"}
{"idx": 512, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.duelDeck, filter = 'a')\ndf2 = df1.where(element = cards.hasFoil, filter = 0)\ndf3 = df2.where(element = cards.power, filter = 'is null or *')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'a')\ndf2 = df1.where(element = [MASK], filter = 0)\ndf3 = df2.where(element = [MASK], filter = 'is null or *')\nres = df3.count()\n```"}
{"idx": 513, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.type, filter = 'commander')\ndf2 = df1.orderby(by = sets.totalSetSize, desc).limit(1)\nres = df2.select(sets.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'commander')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 514, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.format, filter = 'duel')\ndf2 = df1.orderby(by = cards.convertedManaCost, desc).limit(10)\nres = df2.select(cards.name, cards.manaCost)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'duel')\ndf2 = df1.orderby(by = [MASK], desc).limit(10)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 515, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.rarity, filter = 'mythic')\ndf2 = df1.groupby(cards.uuid).agg(min(cards.originalReleaseDate))\ndf3 = df2.orderby(by = min(cards.originalReleaseDate)).limit(1)\nres = df3.select(legalities.format).where(legalities.status, filter = 'legal')\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [cards.rarity], filter = 'mythic')\ndf2 = df1.groupby([cards.uuid]).agg(min([cards.originalReleaseDate]))\ndf3 = df2.orderby(by = min([cards.originalReleaseDate])).limit(1)\nres = df3.select([legalities.format]).where([legalities.status], filter = 'legal')\n```"}
{"idx": 516, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Volkan Ba\u01f5a')\ndf2 = df1.where(element = foreign_data.language, filter = 'French')\nres = df2.select(cards.uuid).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Volkan Ba\u01f5a')\ndf2 = df1.where(element = [MASK], filter = 'French')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 517, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.name, filter = 'Abundance')\ndf2 = df1.where(element = cards.rarity, filter = 'rare')\ndf3 = df2.where(element = cards.types, filter = 'like %Enchantment%')\ndf4 = df3.groupby(cards.uuid).having(element = count(distinct(legalities.format)), filter = '= (select count(distinct(legalities.format)) from legalities where legalities.status = \"Legal\"'))\nres = df4.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Abundance')\ndf2 = df1.where(element = [MASK], filter = 'rare')\ndf3 = df2.where(element = [MASK], filter = 'like %Enchantment%')\ndf4 = df3.groupby([MASK]).having(element = count(distinct([MASK])), filter = '= (select count(distinct([MASK])) from [MASK] where [MASK] = \"Legal\"'))\nres = df4.count()\n```"}
{"idx": 518, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.status, filter = 'Banned')\ndf2 = df1.groupby(legalities.format).count().orderby(by = count, desc).limit(1)\ntmp_res1 = df2.select(legalities.format)\ndf3 = df.where(element = legalities.status, filter = 'Banned').select(cards.name, legalities.format)\nres = df3.where(element = legalities.format, filter = 'in', value = tmp_res1).select(cards.name, legalities.format)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Banned')\ndf2 = df1.groupby([MASK]).count().orderby(by = count, desc).limit(1)\ntmp_res1 = df2.select([MASK])\ndf3 = df.where(element = [MASK], filter = 'Banned').select([MASK], [MASK])\nres = df3.where(element = [MASK], filter = 'in', value = tmp_res1).select([MASK], [MASK])\n```"}
{"idx": 519, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Battlebond')\nres = df1.select(set_translations.language)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Battlebond')\nres = df1.select([MASK])\n```"}
{"idx": 520, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(cards.artist, filter = 'is not null')\ndf2 = df1.groupby(cards.artist).agg(count())\nmin_count = df2.min(cards.card_count)\ndf3 = df2.where(element = cards.card_count, filter = min_count)\nres = df3.select(legalities.format).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where([MASK], filter = 'is not null')\ndf2 = df1.groupby([MASK]).agg(count())\nmin_count = df2.min([MASK])\ndf3 = df2.where(element = [MASK], filter = min_count)\nres = df3.select([MASK]).distinct()\n```"}
{"idx": 521, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.frameVersion, filter = '1997')\ndf2 = df1.where(element = cards.artist, filter = 'D. Alexander Gregory')\ndf3 = df2.where(element = cards.hasContentWarning, filter = 1)\ndf4 = df2.where(element = cards.hasContentWarning, filter = 'does not exist')\ndf5 = df3.union(df4)\ndf6 = df5.where(element = legalities.format, filter = 'legacy')\nres = df6.select(legalities.status)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [cards.frameVersion], filter = '1997')\ndf2 = df1.where(element = [cards.artist], filter = 'D. Alexander Gregory')\ndf3 = df2.where(element = [cards.hasContentWarning], filter = 1)\ndf4 = df2.where(element = [cards.hasContentWarning], filter = 'does not exist')\ndf5 = df3.union(df4)\ndf6 = df5.where(element = [legalities.format], filter = 'legacy')\nres = df6.select([legalities.status])\n```"}
{"idx": 522, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.edhrecRank, filter = 1)\ndf2 = df1.where(element = legalities.status, filter = 'Banned')\nres = df2.select(cards.name, legalities.format)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 'Banned')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 523, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(sets.releaseDate, filter = 'between 2012-01-01 and 2015-12-31')\ndf2 = df1.groupby(sets.releaseDate).count()\ndf3 = df2.select(sets.releaseDate).groupby().count()\ndf4 = df.groupby(foreign_data.language).count()\ndf5 = df4.orderby(by = count(foreign_data.language), desc).limit(1)\nres = df.select(df3.avg(df2.count()), df5.select(foreign_data.language))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(sets.[MASK], filter = 'between 2012-01-01 and 2015-12-31')\ndf2 = df1.groupby(sets.[MASK]).count()\ndf3 = df2.select(sets.[MASK]).groupby().count()\ndf4 = df.groupby(foreign_data.[MASK]).count()\ndf5 = df4.orderby(by = count(foreign_data.[MASK]), desc).limit(1)\nres = df.select(df3.avg(df2.count()), df5.select(foreign_data.[MASK]))\n```"}
{"idx": 524, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.borderColor, filter = 'black')\ndf2 = df1.where(element = cards.availability, filter = 'arena')\nres = df2.select(distinct(cards.artist))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'black')\ndf2 = df1.where(element = [MASK], filter = 'arena')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 525, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = legalities.format, filter = 'oldschool')\ndf2 = df1.where(element = legalities.status, filter = 'in', values = ['banned', 'restricted'])\nres = df2.select(legalities.uuid)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'oldschool')\ndf2 = df1.where(element = [MASK], filter = 'in', values = ['banned', 'restricted'])\nres = df2.select([MASK])\n```"}
{"idx": 526, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Matthew D. Wilson')\ndf2 = df1.where(element = cards.availability, filter = 'paper')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Matthew D. Wilson')\ndf2 = df1.where(element = [MASK], filter = 'paper')\nres = df2.count()\n```"}
{"idx": 527, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = cards.artist, filter = 'Kev Walker')\nres = df1.orderby(by = rulings.date, desc).select(rulings.date, rulings.text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Kev Walker')\nres = df1.orderby(by = [MASK], desc).select([MASK], [MASK])\n```"}
{"idx": 528, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = sets.name, filter = 'Hour of Devastation')\ndf2 = df1.where(element = legalities.status, filter = 'Legal')\nres = df2.select(cards.name, legalities.format).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hour of Devastation')\ndf2 = df1.where(element = [MASK], filter = 'Legal')\nres = df2.select([MASK], [MASK]).distinct()\n```"}
{"idx": 529, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = set_translations.language, filter = 'Korean')\ntmp_res1 = df1.select(set_translations.setCode)\n\ndf2 = df.where(element = sets.code, filter = 'in', value = tmp_res1)\n\ndf3 = df.where(element = set_translations.language, filter = 'like', value = '%Japanese%')\ntmp_res2 = df3.select(set_translations.setCode)\n\ndf4 = df2.where(element = sets.code, filter = 'not in', value = tmp_res2)\n\nres = df4.select(sets.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Korean')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\n\ndf3 = df.where(element = [MASK], filter = 'like', value = '%Japanese%')\ntmp_res2 = df3.select([MASK])\n\ndf4 = df2.where(element = [MASK], filter = 'not in', value = tmp_res2)\n\nres = df4.select([MASK])\n```"}
{"idx": 530, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(cards.frameVersion, filter = 'is not null')\ntmp_res1 = df1.select(cards.frameVersion)\n\ndf2 = df.where(element = cards.artist, filter = 'Allen Williams')\ntmp_res2 = df2.select(cards.name)\n\ndf3 = df.where(element = legalities.status, filter = 'Banned')\ntmp_res3 = df3.select(cards.name)\n\nres = tmp_res1.union(tmp_res2).union(tmp_res3)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where([MASK], filter = 'is not null')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = 'Allen Williams')\ntmp_res2 = df2.select([MASK])\n\ndf3 = df.where(element = [MASK], filter = 'Banned')\ntmp_res3 = df3.select([MASK])\n\nres = tmp_res1.union(tmp_res2).union(tmp_res3)\n```"}
{"idx": 531, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Harlan')\ndf2 = df.where(element = users.DisplayName, filter = 'Jarrod Dixon')\ndf3 = df1.union(df2)\nres = df3.orderby(by = users.Reputation, desc).select(users.Id, users.DisplayName, users.Reputation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [users.DisplayName], filter = 'Harlan')\ndf2 = df.where(element = [users.DisplayName], filter = 'Jarrod Dixon')\ndf3 = df1.union(df2)\nres = df3.orderby(by = [users.Reputation], desc).select([users.Id, users.DisplayName, users.Reputation])\n```"}
{"idx": 532, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.CreationDate, filter = \"like '2011%'\")\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"like '2011%'\")\nres = df1.select([MASK])\n```"}
{"idx": 533, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.LastAccessDate, filter = \"> '2014-09-01'\")\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> '2014-09-01')\nres = df1.count()\n```"}
{"idx": 534, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = users.Views, desc).limit(1)\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 535, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DownVotes, filter = '> 1')\ndf2 = df1.where(element = users.UpVotes, filter = '> 100')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 1')\ndf2 = df1.where(element = [MASK], filter = '> 100')\nres = df2.count()\n```"}
{"idx": 536, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Views, filter = '> 10')\ndf2 = df1.where(element = users.CreationDate, filter = \"year > 2013\")\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [users.Views], filter = '> 10')\ndf2 = df1.where(element = [users.CreationDate], filter = \"year > 2013\")\nres = df2.count()\n```"}
{"idx": 537, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ntmp_res1 = df1.select(users.Id)\ndf2 = df.where(element = posts.OwnerUserId, filter = 'in', value = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df2.count()\n```"}
{"idx": 538, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\nres = df1.select(posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\nres = df1.select([MASK])\n```"}
{"idx": 539, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Eliciting priors from experts')\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.Title], filter = 'Eliciting priors from experts')\nres = df1.select([users.DisplayName])\n```"}
{"idx": 540, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ndf2 = df1.orderby(by = posts.ViewCount, desc).limit(1)\nres = df2.select(posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 541, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.FavoriteCount, filter = max(posts.FavoriteCount))\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 542, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ntmp_res1 = df1.select(users.Id)\ndf2 = df.where(element = posts.OwnerUserId, filter = in(tmp_res1))\nres = df2.select(posts.CommentCount).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = in(tmp_res1))\nres = df2.select([MASK]).sum()\n```"}
{"idx": 543, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ndf2 = df1.orderby(by = posts.AnswerCount, desc).limit(1)\nres = df2.select(posts.AnswerCount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 544, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Examples for teaching: Correlation does not mean causation')\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Examples for teaching: Correlation does not mean causation')\nres = df1.select([MASK])\n```"}
{"idx": 545, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ntmp_res1 = df1.select(users.Id)\n\ndf2 = df.where(element = posts.OwnerUserId, filter = tmp_res1).where(element = posts.ParentId, filter = 'is null')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [users.DisplayName], filter = 'csgillespie')\ntmp_res1 = df1.select([users.Id])\n\ndf2 = df.where(element = [posts.OwnerUserId], filter = tmp_res1).where(element = [posts.ParentId], filter = 'is null')\nres = df2.count()\n```"}
{"idx": 546, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ClosedDate, filter = 'is not null')\nres = df1.select(users.DisplayName).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 547, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = '> 65')\ndf2 = df.where(element = posts.Score, filter = '>= 20')\nres = df2.intersect(df1).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [users.Age], filter = '> 65')\ndf2 = df.where(element = [posts.Score], filter = '>= 20')\nres = df2.intersect(df1).count()\n```"}
{"idx": 548, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Eliciting priors from experts')\nres = df1.select(users.Location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Eliciting priors from experts')\nres = df1.select([MASK])\n```"}
{"idx": 549, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = tags.TagName, filter = 'bayesian')\nres = df1.select(posts.Body)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'bayesian')\nres = df1.select([MASK])\n```"}
{"idx": 550, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = tags.Count, filter = max(tags.Count))\nres = df1.select(posts.Body)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 551, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ntmp_res1 = df1.select(badges.Id)\nres = df.where(element = badges.Id, filter = 'in', value = tmp_res1).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\ntmp_res1 = df1.select([MASK])\nres = df.where(element = [MASK], filter = 'in', value = tmp_res1).count()\n```"}
{"idx": 552, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\nres = df1.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\nres = df1.select([MASK])\n```"}
{"idx": 553, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ndf2 = df1.where(element = badges.Date, filter = \"strftime('%Y') = '2011'\")\nres = df2.count(badges.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'csgillespie')\ndf2 = df1.where(element = [MASK], filter = \"strftime('%Y') = '2011'\")\nres = df2.count([MASK])\n```"}
{"idx": 554, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(badges.UserId).agg(count(badges.Id) as BadgeCount).orderby(by = BadgeCount, desc).limit(1)\ndf2 = df.where(element = users.Id, filter = df1.UserId)\nres = df2.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(count([MASK]) as [MASK]).orderby(by = [MASK], desc).limit(1)\ndf2 = df.where(element = [MASK], filter = df1.[MASK])\nres = df2.select([MASK])\n```"}
{"idx": 555, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'csgillespie')\ntmp_res1 = df1.select(users.Id)\ndf2 = df.where(element = posts.OwnerUserId, filter = in(tmp_res1))\nres = df2.select(avg(posts.Score))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [users.DisplayName], filter = 'csgillespie')\ntmp_res1 = df1.select([users.Id])\ndf2 = df.where(element = [posts.OwnerUserId], filter = in(tmp_res1))\nres = df2.select(avg([posts.Score]))\n```"}
{"idx": 556, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Views, filter = '> 200')\ndf2 = df1.groupby(users.Id).agg(count(badges.Id) as badge_count)\nres = df2.select(avg(badge_count))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 200')\ndf2 = df1.groupby([MASK]).agg(count([MASK]) as badge_count)\nres = df2.select(avg(badge_count))\n```"}
{"idx": 557, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Score, filter = '> 5')\ndf2 = df1.where(element = users.Age, filter = '> 65')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.Score], filter = '> 5')\ndf2 = df1.where(element = [users.Age], filter = '> 65')\nres = df.select(cast(df2.count(), float) / [df1.count()] * 100)\n```"}
{"idx": 558, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.UserId, filter = 58)\ndf2 = df1.where(element = votes.CreationDate, filter = '2010-07-19')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 58)\ndf2 = df1.where(element = [MASK], filter = '2010-07-19')\nres = df2.count()\n```"}
{"idx": 559, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(votes.CreationDate).orderby(by = count(votes.Id), desc).limit(1)\nres = df1.select(votes.CreationDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).orderby(by = count([MASK]), desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 560, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Revival')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Revival')\nres = df1.count()\n```"}
{"idx": 561, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Score, filter = max(comments.Score))\nres = df1.select(posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 562, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ViewCount, filter = 1910)\nres = df.where(element = comments.PostId, filter = df1.select(posts.Id)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1910)\nres = df.where(element = [MASK], filter = df1.select([MASK])).count()\n```"}
{"idx": 563, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.UserId, filter = 3025)\ndf2 = df1.where(element = comments.CreationDate, filter = '2014-04-23 20:29:39.0')\nres = df2.select(posts.FavoriteCount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [comments.UserId], filter = 3025)\ndf2 = df1.where(element = [comments.CreationDate], filter = '2014-04-23 20:29:39.0')\nres = df2.select([posts.FavoriteCount])\n```"}
{"idx": 564, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ParentId, filter = 107829)\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 107829)\nres = df1.select([MASK])\n```"}
{"idx": 565, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.UserId, filter = 23853)\ndf2 = df1.where(element = comments.CreationDate, filter = '2013-07-12 09:08:18.0')\nres = df2.select(posts.Id, case(posts.ClosedDate, when = 'is null', then = 'Not Well-Finished', else = 'Well-Finished'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 23853)\ndf2 = df1.where(element = [MASK], filter = '2013-07-12 09:08:18.0')\nres = df2.select([MASK], case([MASK], when = 'is null', then = 'Not Well-Finished', else = 'Well-Finished'))\n```"}
{"idx": 566, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Id, filter = 65041)\nres = df1.select(users.Reputation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 65041)\nres = df1.select([MASK])\n```"}
{"idx": 567, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Tiago Pasqualini')\ntmp_res1 = df1.select(users.Id)\ndf2 = df.where(element = posts.OwnerUserId, filter = in(tmp_res1))\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Tiago Pasqualini')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = in(tmp_res1))\nres = df2.count()\n```"}
{"idx": 568, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.Id, filter = 6347)\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 6347)\nres = df1.select([MASK])\n```"}
{"idx": 569, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'like %data visualization%')\nres = df1.count(votes.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like %data visualization%')\nres = df1.count([MASK])\n```"}
{"idx": 570, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'DatEpicCoderGuyWhoPrograms')\nres = df1.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'DatEpicCoderGuyWhoPrograms')\nres = df1.select([MASK])\n```"}
{"idx": 571, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.OwnerUserId, filter = 24)\ndf2 = df.where(element = votes.UserId, filter = 24)\nres = df.select((df1.count() * 1.0) / df2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 24)\ndf2 = df.where(element = [MASK], filter = 24)\nres = df.select((df1.count() * 1.0) / df2.count())\n```"}
{"idx": 572, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer')\nres = df1.select(posts.ViewCount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer')\nres = df1.select([MASK])\n```"}
{"idx": 573, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Score, filter = 17)\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 17)\nres = df1.select([MASK])\n```"}
{"idx": 574, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.WebsiteUrl, filter = 'http://stackoverflow.com')\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'http://stackoverflow.com')\nres = df1.select([MASK])\n```"}
{"idx": 575, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'SilentGhost')\nres = df1.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SilentGhost')\nres = df1.select([MASK])\n```"}
{"idx": 576, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Text, filter = 'thank you user93!')\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'thank you user93!')\nres = df1.select([MASK])\n```"}
{"idx": 577, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'A Lion')\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'A Lion')\nres = df1.select([MASK])\n```"}
{"idx": 578, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Understanding what Dassault iSight is doing?')\nres = df1.select(users.DisplayName, users.Reputation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.Title], filter = 'Understanding what Dassault iSight is doing?')\nres = df1.select([users.DisplayName, users.Reputation])\n```"}
{"idx": 579, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'How does gentle boosting differ from AdaBoost?')\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'How does gentle boosting differ from AdaBoost?')\nres = df1.select([MASK])\n```"}
{"idx": 580, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Necromancer')\nres = df1.select(users.DisplayName).limit(10)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Necromancer')\nres = df1.select([MASK]).limit(10)\n```"}
{"idx": 581, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Open source tools for visualizing multi-dimensional data')\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Open source tools for visualizing multi-dimensional data')\nres = df1.select([MASK])\n```"}
{"idx": 582, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Vebjorn Ljosa')\nres = df1.select(posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vebjorn Ljosa')\nres = df1.select([MASK])\n```"}
{"idx": 583, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Yevgeny')\nres = df1.select(sum(posts.Score), users.WebsiteUrl)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Yevgeny')\nres = df1.select([sum([MASK]), [MASK]])\n```"}
{"idx": 584, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Why square the difference instead of taking the absolute value in standard deviation?')\ndf2 = df.where(element = comments.PostId, filter = posts.Id)\nres = df2.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Why square the difference instead of taking the absolute value in standard deviation?')\ndf2 = df.where(element = [MASK], filter = [MASK])\nres = df2.select([MASK])\n```"}
{"idx": 585, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'like %data%')\ndf2 = df1.where(element = votes.BountyAmount, filter = 'is not null')\nres = df2.select(sum(votes.BountyAmount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.Title], filter = 'like %data%')\ndf2 = df1.where(element = [votes.BountyAmount], filter = 'is not null')\nres = df2.select(sum([votes.BountyAmount]))\n```"}
{"idx": 586, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.BountyAmount, filter = 50)\ndf2 = df1.where(element = posts.Title, filter = 'like %variance%')\nres = df2.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 50)\ndf2 = df1.where(element = [MASK], filter = 'like %variance%')\nres = df2.select([MASK])\n```"}
{"idx": 587, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Tags, filter = 'like %<humor>%')\nres = df1.select(posts.Title, comments.Text as Comment, avg(posts.ViewCount) as AverageViewCount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = posts.Tags, filter = 'like %<humor>%')\nres = df1.select(posts.Title, comments.Text as Comment, avg(posts.ViewCount) as AverageViewCount)\n```"}
{"idx": 588, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.UserId, filter = 13)\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 13)\nres = df1.count()\n```"}
{"idx": 589, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = users.Reputation, desc).limit(1)\nres = df1.select(users.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 590, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = users.Views).limit(1)\nres = df1.select(users.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK]).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 591, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Supporter')\ndf2 = df1.where(element = badges.Date, filter = \"like '2011%'\")\nres = df2.select(badges.UserId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Supporter')\ndf2 = df1.where(element = [MASK], filter = \"like '2011%'\")\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 592, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(badges.UserId).having(element = count(badges.Name), filter = '> 5')\nres = df1.count(distinct = badges.UserId)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.groupby([MASK]).having(element = count([MASK]), filter = '> 5')\nres = df1.count(distinct = [MASK])\n```"}
{"idx": 593, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Location, filter = 'New York')\ndf2 = df1.where(element = badges.Name, filter = 'Teacher')\ndf3 = df1.where(element = badges.Name, filter = 'Supporter')\nres = df2.intersect(df3).select(users.Id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'New York')\ndf2 = df1.where(element = [MASK], filter = 'Teacher')\ndf3 = df1.where(element = [MASK], filter = 'Supporter')\nres = df2.intersect(df3).select([MASK]).distinct().count()\n```"}
{"idx": 594, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Id, filter = 1)\nres = df1.select(users.Id, users.Reputation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 595, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(postHistory.PostId, postHistory.UserId).having(element = count(postHistory.Id), filter = '= 1')\ndf2 = df.where(posts.ViewCount, filter = '>= 1000')\nres = df2.select(users.Id, users.DisplayName).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK], [MASK]).having(element = count([MASK]), filter = '= 1')\ndf2 = df.where([MASK], filter = '>= 1000')\nres = df2.select([MASK], [MASK]).distinct()\n```"}
{"idx": 596, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(comments.UserId).having(element = count(comments.Id), filter = '!= 0')\ndf2 = df1.max(comments.Id)\ndf3 = df1.where(element = comments.Id, filter = '= df2')\nres = df3.select(badges.UserId, badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).having(element = count([MASK]), filter = '!= 0')\ndf2 = df1.max([MASK])\ndf3 = df1.where(element = [MASK], filter = '= df2')\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 597, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Location, filter = 'India')\ndf2 = df1.where(element = badges.Name, filter = 'Teacher')\nres = df2.select(users.Id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'India')\ndf2 = df1.where(element = [MASK], filter = 'Teacher')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 598, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Student')\ndf2 = df1.where(element = badges.Date, filter = \"like '2010%'\").count()\ndf3 = df1.where(element = badges.Date, filter = \"like '2011%'\").count()\nres = df.select((df2.as(float) / df1.count() * 100) - (df3.as(float) / df1.count() * 100))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [badges.Name], filter = 'Student')\ndf2 = df1.where(element = [badges.Date], filter = \"like '2010%'\").count()\ndf3 = df1.where(element = [badges.Date], filter = \"like '2011%'\").count()\nres = df.select((df2.as(float) / df1.count() * 100) - (df3.as(float) / df1.count() * 100))\n```"}
{"idx": 599, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.PostId, filter = 3720)\ntmp_res1 = df1.select(postHistory.PostHistoryTypeId).distinct()\n\ndf2 = df.where(element = comments.PostId, filter = 3720)\nres = df.select(\n    union = (tmp_res1, df2.select(comments.UserId).distinct().count())\n)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [comments.PostId], filter = 3720)\ntmp_res1 = df1.select([postHistory.PostHistoryTypeId]).distinct()\n\ndf2 = df.where(element = [comments.PostId], filter = 3720)\nres = df.select(\n    union = (tmp_res1, df2.select([comments.UserId]).distinct().count())\n)\n```"}
{"idx": 600, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = postLinks.RelatedPostId, filter = 61217)\ndf2 = df1.where(element = posts.Id, filter = 61217)\nres = df2.select(postLinks.PostId as RelatedPostId, posts.ViewCount as Popularity)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 61217)\ndf2 = df1.where(element = [MASK], filter = 61217)\nres = df2.select([MASK1] as [MASK2], [MASK3] as [MASK4])\n```"}
{"idx": 601, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Id, filter = 395)\nres = df1.select(posts.Score, postLinks.LinkTypeId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 395)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 602, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Score, filter = '> 60')\nres = df1.select(posts.Id, posts.OwnerUserId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 60')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 603, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.OwnerUserId, filter = 686)\ndf2 = df1.where(element = posts.CreationDate, filter = \"like '2011%'\")\nres = df2.select(posts.FavoriteCount).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.OwnerUserId], filter = 686)\ndf2 = df1.where(element = [posts.CreationDate], filter = \"like '2011%'\")\nres = df2.select([posts.FavoriteCount]).sum()\n```"}
{"idx": 604, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(posts.OwnerUserId).having(element = count(*), filter = '> 10')\ndf2 = df1.select(users.Id, users.UpVotes, users.Age)\nres = df2.aggregate(average(users.UpVotes), average(users.Age))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).having(element = count(*), filter = '> 10')\ndf2 = df1.select([MASK], [MASK], [MASK])\nres = df2.aggregate(average([MASK]), average([MASK]))\n```"}
{"idx": 605, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Announcer')\nres = df1.select(badges.UserId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Announcer')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 606, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Date, filter = '2010-07-19 19:39:08.0')\nres = df1.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2010-07-19 19:39:08.0')\nres = df1.select([MASK])\n```"}
{"idx": 607, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Score, filter = '> 60')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 60')\nres = df1.count()\n```"}
{"idx": 608, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.CreationDate, filter = '2010-07-19 19:25:47.0')\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2010-07-19 19:25:47.0')\nres = df1.select([MASK])\n```"}
{"idx": 609, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Score, filter = 10)\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 10)\nres = df1.count()\n```"}
{"idx": 610, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Reputation, filter = max(users.Reputation))\nres = df1.select(badges.Name).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 611, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Date, filter = '2010-07-19 19:39:08.0')\nres = df1.select(users.Reputation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2010-07-19 19:39:08.0')\nres = df1.select([MASK])\n```"}
{"idx": 612, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Pierre')\nres = df1.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Pierre')\nres = df1.select([MASK])\n```"}
{"idx": 613, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Location, filter = 'Rochester, NY')\nres = df1.select(badges.Date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Rochester, NY')\nres = df1.select([MASK])\n```"}
{"idx": 614, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Teacher')\nres = df.select(cast(df1.count(distinct(badges.UserId)), float) / df.count(distinct(users.Id)) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Teacher')\nres = df.select(cast(df1.count(distinct([MASK])), float) / df.count(distinct([MASK])) * 100)\n```"}
{"idx": 615, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Organizer')\ndf2 = df1.where(element = users.Age, filter = 'between 13 and 18')\nres = df.select(cast(df2.count(distinct = users.Id), real) / df1.count(distinct = users.Id) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Organizer')\ndf2 = df1.where(element = [MASK], filter = 'between 13 and 18')\nres = df.select(cast(df2.count(distinct = [MASK]), real) / df1.count(distinct = [MASK]) * 100)\n```"}
{"idx": 616, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.CreationDate, filter = '2010-07-19 19:19:56.0')\nres = df1.select(comments.Score)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2010-07-19 19:19:56.0')\nres = df1.select([MASK])\n```"}
{"idx": 617, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(posts.CreationDate, filter = '2010-07-19 19:37:33.0')\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(posts.[MASK], filter = '2010-07-19 19:37:33.0')\nres = df1.select(posts.[MASK])\n```"}
{"idx": 618, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Location, filter = 'Vienna, Austria')\nres = df1.select(users.Age).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vienna, Austria')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 619, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = 'between 19 and 65')\ndf2 = df1.where(element = badges.Name, filter = 'Supporter')\nres = df2.count(distinct = users.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 19 and 65')\ndf2 = df1.where(element = [MASK], filter = 'Supporter')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 620, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Date, filter = '2010-07-19 19:39:08.0')\nres = df1.select(users.Views)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2010-07-19 19:39:08.0')\nres = df1.select([MASK])\n```"}
{"idx": 621, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Reputation, filter = min(users.Reputation))\nres = df1.select(badges.Name).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 622, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Sharpie')\nres = df1.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sharpie')\nres = df1.select([MASK])\n```"}
{"idx": 623, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = '> 65')\ndf2 = df1.where(element = badges.Name, filter = 'Supporter')\nres = df2.select(badges.UserId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 65')\ndf2 = df1.where(element = [MASK], filter = 'Supporter')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 624, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Id, filter = 30)\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 30)\nres = df1.select([MASK])\n```"}
{"idx": 625, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Location, filter = 'New York')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'New York')\nres = df1.count()\n```"}
{"idx": 626, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.CreationDate, filter = \"like '2010%'\")\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"like '2010%'\")\nres = df1.count()\n```"}
{"idx": 627, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = '>= 19')\ndf2 = df1.where(element = users.Age, filter = '<= 65')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 19')\ndf2 = df1.where(element = [MASK], filter = '<= 65')\nres = df2.count()\n```"}
{"idx": 628, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = users.Views, desc).limit(1)\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 629, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.CreationDate, filter = 'like 2010%')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = votes.CreationDate, filter = 'like 2011%')\ntmp_res2 = df2.count()\n\nres = df.select(cast(tmp_res1, float) / nullif(tmp_res2, 0))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [votes.CreationDate], filter = 'like 2010%')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = [votes.CreationDate], filter = 'like 2011%')\ntmp_res2 = df2.count()\n\nres = df.select(cast(tmp_res1, float) / nullif(tmp_res2, 0))\n```"}
{"idx": 630, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'John Salvatier')\ntmp_res1 = df1.select(posts.Tags)\n\nres = tmp_res1.select_distinct(tags.TagName)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [users.DisplayName], filter = 'John Salvatier')\ntmp_res1 = df1.select([posts.Tags])\n\nres = tmp_res1.select_distinct([tags.TagName])\n```"}
{"idx": 631, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Daniel Vassallo')\ntmp_res1 = df1.select(users.Id)\ndf2 = df.where(element = posts.OwnerUserId, filter = in(tmp_res1))\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Daniel Vassallo')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = in(tmp_res1))\nres = df2.count()\n```"}
{"idx": 632, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Harlan')\ntmp_res1 = df1.select(users.Id)\ndf2 = df.where(element = votes.UserId, filter = in(tmp_res1))\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Harlan')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = in(tmp_res1))\nres = df2.count()\n```"}
{"idx": 633, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'slashnick')\ndf2 = df1.orderby(by = posts.AnswerCount, desc).limit(1)\nres = df2.select(posts.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'slashnick')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 634, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Harvey Motulsky', 'Noah Snyder')\ndf2 = df1.groupby(users.DisplayName).agg(sum(posts.ViewCount))\nres = df2.orderby(by = sum(posts.ViewCount), desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [users.DisplayName], filter = 'Harvey Motulsky', 'Noah Snyder')\ndf2 = df1.groupby([users.DisplayName]).agg(sum([posts.ViewCount]))\nres = df2.orderby(by = sum([posts.ViewCount]), desc).limit(1)\n```"}
{"idx": 635, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Matt Parker')\ndf2 = df1.groupby(posts.Id).having(element = count(votes.Id), filter = '> 4')\nres = df2.count(distinct = posts.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Matt Parker')\ndf2 = df1.groupby([MASK]).having(element = count([MASK]), filter = '> 4')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 636, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Neil McGuigan')\ndf2 = df1.where(element = comments.Score, filter = '< 60')\nres = df2.count(comments.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Neil McGuigan')\ndf2 = df1.where(element = [MASK], filter = '< 60')\nres = df2.count([MASK])\n```"}
{"idx": 637, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Mark Meckes')\ndf2 = df1.where(element = posts.CommentCount, filter = '= 0')\ndf3 = df2.where(element = posts.Tags, filter = 'is not null')\nres = df3.select(distinct(posts.Tags))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Mark Meckes')\ndf2 = df1.where(element = [MASK], filter = '= 0')\ndf3 = df2.where(element = [MASK], filter = 'is not null')\nres = df3.select(distinct([MASK]))\n```"}
{"idx": 638, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Organizer')\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Organizer')\nres = df1.select([MASK])\n```"}
{"idx": 639, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Community')\ntmp_res1 = df1.select(users.Id)\n\ndf2 = df.where(element = posts.OwnerUserId, filter = tmp_res1)\ntmp_res2 = df2.select(posts.Id)\n\ndf3 = df.where(element = posts.Tags, filter = 'contains', value = 'r')\ntmp_res3 = df3.select(posts.Id)\n\nres = df.select((df3.count() * 100.0 / df2.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [users.DisplayName], filter = 'Community')\ntmp_res1 = df1.select([users.Id])\n\ndf2 = df.where(element = [posts.OwnerUserId], filter = tmp_res1)\ntmp_res2 = df2.select([posts.Id])\n\ndf3 = df.where(element = [posts.Tags], filter = 'contains', value = '[MASK]')\ntmp_res3 = df3.select([posts.Id])\n\nres = df.select((tmp_res3.count() * 100.0 / tmp_res2.count()))\n```"}
{"idx": 640, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Mornington')\ntmp_res1 = df1.select(posts.ViewCount).sum()\n\ndf2 = df.where(element = users.DisplayName, filter = 'Amos')\ntmp_res2 = df2.select(posts.ViewCount).sum()\n\nres = df.select(tmp_res1 - tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [users.DisplayName], filter = 'Mornington')\ntmp_res1 = df1.select([posts.ViewCount]).sum()\n\ndf2 = df.where(element = [users.DisplayName], filter = 'Amos')\ntmp_res2 = df2.select([posts.ViewCount]).sum()\n\nres = df.select(tmp_res1 - tmp_res2)\n```"}
{"idx": 641, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Commentator')\ndf2 = df1.where(element = badges.Date, filter = \"like '2014%'\")\nres = df2.select(badges.UserId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Commentator')\ndf2 = df1.where(element = [MASK], filter = \"like '2014%'\")\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 642, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.CreationDate, filter = '2010-07-21')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2010-07-21')\nres = df1.count()\n```"}
{"idx": 643, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Views, filter = max(users.Views))\nres = df1.select(users.DisplayName, users.Age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 644, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Detecting a given face in a database of facial images')\nres = df1.select(posts.LastEditDate, posts.LastEditorUserId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Detecting a given face in a database of facial images')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 645, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.UserId, filter = 13)\ndf2 = df1.where(element = comments.Score, filter = '< 60')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 13)\ndf2 = df1.where(element = [MASK], filter = '< 60')\nres = df2.count()\n```"}
{"idx": 646, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Score, filter = '> 60')\nres = df1.select(posts.Title, users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 60')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 647, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Location, filter = 'North Pole')\ndf2 = df1.where(element = badges.Date, filter = \"like '2011%'\")\nres = df2.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'North Pole')\ndf2 = df1.where(element = [MASK], filter = \"like '2011%'\")\nres = df2.select([MASK])\n```"}
{"idx": 648, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.FavoriteCount, filter = '> 150')\nres = df1.select(users.DisplayName, users.WebsiteUrl)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 150')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 649, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'What is the best introductory Bayesian statistics textbook?')\nres = df1.groupby(posts.Id).select(posts.Id, count(postHistory.Id), posts.LastEditDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = posts.Title, filter = '[MASK]')\nres = df1.groupby(posts.Id).select(posts.Id, count(postHistory.Id), posts.LastEditDate)\n```"}
{"idx": 650, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Outliers')\nres = df1.select(users.LastAccessDate, users.Location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Outliers')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 651, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'How to tell if something happened in a data set which monitors a value over time')\nres = df1.select(posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'How to tell if something happened in a data set which monitors a value over time')\nres = df1.select([MASK])\n```"}
{"idx": 652, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Samuel')\ndf2 = df1.where(element = posts.CreationDate, filter = \"like '2013%'\")\ndf3 = df1.where(element = badges.Date, filter = \"like '2013%'\")\nres = df2.union(df3).select(posts.Id as PostId, badges.Name as BadgeName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Samuel')\ndf2 = df1.where(element = [MASK], filter = \"like '2013%'\")\ndf3 = df1.where(element = [MASK], filter = \"like '2013%'\")\nres = df2.union(df3).select([MASK1] as PostId, [MASK2] as BadgeName)\n```"}
{"idx": 653, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ViewCount, filter = max(posts.ViewCount))\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 654, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = tags.TagName, filter = 'hypothesis-testing')\nres = df1.select(users.DisplayName, users.Location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'hypothesis-testing')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 655, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'What are principal component scores?')\nres = df1.select(posts.Title as RelatedPostTitle, postLinks.LinkTypeId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.Title], filter = 'What are principal component scores?')\nres = df1.select([posts.Title as RelatedPostTitle, postLinks.LinkTypeId])\n```"}
{"idx": 656, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ParentId, filter = 'is not null')\ndf2 = df1.orderby(by = posts.Score, desc).limit(1)\nres = df2.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.ParentId], filter = 'is not null')\ndf2 = df1.orderby(by = [posts.Score], desc).limit(1)\nres = df2.select([users.DisplayName])\n```"}
{"idx": 657, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.VoteTypeId, filter = 8)\ndf2 = df1.orderby(by = votes.BountyAmount, desc).limit(1)\nres = df2.select(users.DisplayName, users.WebsiteUrl)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [VOTES.VOTE_TYPE_ID], filter = 8)\ndf2 = df1.orderby(by = [VOTES.BOUNTY_AMOUNT], desc).limit(1)\nres = df2.select([USERS.DISPLAY_NAME, USERS.WEBSITE_URL])\n```"}
{"idx": 658, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = posts.ViewCount, desc).limit(5)\nres = df1.select(posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(5)\nres = df1.select([MASK])\n```"}
{"idx": 659, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = tags.Count, filter = '>= 5000')\ndf2 = df1.where(element = tags.Count, filter = '<= 7000')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 5000')\ndf2 = df1.where(element = [MASK], filter = '<= 7000')\nres = df2.count()\n```"}
{"idx": 660, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = posts.FavoriteCount, desc).limit(1)\nres = df1.select(posts.OwnerUserId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 661, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Reputation, filter = max(users.Reputation))\nres = df1.select(users.Age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 662, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.CreationDate, filter = \"like '2011%'\")\ndf2 = df1.where(element = votes.BountyAmount, filter = 50)\nres = df2.select(votes.PostId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"like '2011%'\")\ndf2 = df1.where(element = [MASK], filter = 50)\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 663, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = min(users.Age))\nres = df1.select(users.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 664, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.LasActivityDate, filter = 'like 2010-07-19%')\nres = df1.select(posts.Score).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = posts.LasActivityDate, filter = 'like 2010-07-19%')\nres = df1.select(posts.Score).sum()\n```"}
{"idx": 665, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.AnswerCount, filter = '<= 2')\ndf2 = df1.where(element = postLinks.CreationDate, filter = \"like '2010%'\")\nres = df2.count(postLinks.Id) / 12.0\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '<= 2')\ndf2 = df1.where(element = [MASK], filter = \"like '2010%'\")\nres = df2.count([MASK]) / 12.0\n```"}
{"idx": 666, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.UserId, filter = 1465)\ndf2 = df1.orderby(by = posts.FavoriteCount, desc).limit(1)\nres = df2.select(posts.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1465)\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 667, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = postLinks.CreationDate, filter = min(postLinks.CreationDate))\nres = df1.select(posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 668, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(badges.UserId).agg(count(badges.Id))\nmax_badge_count = df1.max(badges.Id)\ndf2 = df1.where(element = badges.Id, filter = max_badge_count)\nres = df2.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(count([MASK]))\nmax_[MASK] = df1.max([MASK])\ndf2 = df1.where(element = [MASK], filter = max_[MASK])\nres = df2.select([MASK])\n```"}
{"idx": 669, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'chl')\nres = df1.select(min(votes.CreationDate))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'chl')\nres = df1.select([MASK])\n```"}
{"idx": 670, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = min(users.Age))\nres = df1.select(min(posts.CreationDate))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select(min([MASK]))\n```"}
{"idx": 671, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Autobiographer')\ndf2 = df1.orderby(by = badges.Date, asc).limit(1)\nres = df2.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Autobiographer')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 672, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Location, filter = 'United Kingdom')\ndf2 = df1.where(element = posts.FavoriteCount, filter = '>= 4')\nres = df2.select(users.Id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'United Kingdom')\ndf2 = df1.where(element = [MASK], filter = '>= 4')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 673, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = max(users.Age))\ndf2 = df.where(element = votes.UserId, filter = 'in', value = df1.select(users.Id))\ndf3 = df2.groupby(votes.UserId).agg(count(votes.PostId) as VoteCount)\nres = df3.avg(VoteCount)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [users.Age], filter = max([users.Age]))\ndf2 = df.where(element = [votes.UserId], filter = 'in', value = df1.select([users.Id]))\ndf3 = df2.groupby([votes.UserId]).agg(count([votes.PostId]) as VoteCount)\nres = df3.avg(VoteCount)\n```"}
{"idx": 674, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Reputation, filter = max(users.Reputation))\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 675, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Reputation, filter = '> 2000')\ndf2 = df1.where(element = users.Views, filter = '> 1000')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 2000')\ndf2 = df1.where(element = [MASK], filter = '> 1000')\nres = df2.count()\n```"}
{"idx": 676, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = 'between 19 and 65')\nres = df1.select(users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 19 and 65')\nres = df1.select([MASK])\n```"}
{"idx": 677, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Jay Stevens')\ndf2 = df1.where(element = posts.CreationDate, filter = \"like '2010%'\")\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Jay Stevens')\ndf2 = df1.where(element = [MASK], filter = \"like '2010%'\")\nres = df2.count()\n```"}
{"idx": 678, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Harvey Motulsky')\ndf2 = df1.orderby(by = posts.ViewCount, desc).limit(1)\nres = df2.select(posts.Id, posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Harvey Motulsky')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 679, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Score, filter = max(posts.Score))\nres = df1.select(posts.Id, posts.Title)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 680, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Stephen Turner')\ntmp_res1 = df1.select(posts.OwnerUserId)\ndf2 = df.where(element = posts.OwnerUserId, filter = in(tmp_res1))\nres = df2.select(avg(posts.Score))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Stephen Turner')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = in(tmp_res1))\nres = df2.select(avg([MASK]))\n```"}
{"idx": 681, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ViewCount, filter = '> 20000')\ndf2 = df1.where(element = posts.CreationDate, filter = \"like '2011%'\")\nres = df2.select(users.DisplayName).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.ViewCount], filter = '> 20000')\ndf2 = df1.where(element = [posts.CreationDate], filter = \"like '2011%'\")\nres = df2.select([users.[MASK]]).distinct()\n```"}
{"idx": 682, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.CreationDate, filter = \"year = 2010\")\ndf2 = df1.orderby(by = posts.FavoriteCount, desc).limit(1)\nres = df2.select(posts.Id, users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.CreationDate], filter = \"year = 2010\")\ndf2 = df1.orderby(by = [posts.FavoriteCount], desc).limit(1)\nres = df2.select([posts.Id, users.DisplayName])\n```"}
{"idx": 683, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Reputation, filter = '> 1000').where(element = users.CreationDate, filter = \"like '2011%'\")\ntmp_res1 = df1.select(users.Id).count()\n\ndf2 = df.where(element = posts.OwnerUserId, filter = 'in', value = tmp_res1)\ntmp_res2 = df2.count()\n\ntmp_res3 = df.count(posts.Id)\n\nres = df.select((tmp_res2 / tmp_res3) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [users.Reputation], filter = '> 1000').where(element = [users.CreationDate], filter = \"like '2011%'\")\ntmp_res1 = df1.select([users.Id]).count()\n\ndf2 = df.where(element = [posts.OwnerUserId], filter = 'in', value = tmp_res1)\ntmp_res2 = df2.count()\n\ntmp_res3 = df.count([posts.Id])\n\nres = df.select((tmp_res2 / tmp_res3) * 100)\n```"}
{"idx": 684, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = 'BETWEEN 13 AND 18')\nres = df.select(cast(df1.count(), float) / df.count()) * 100\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [users.Age], filter = 'BETWEEN 13 AND 18')\nres = df.select(cast(df1.count(), float) / [df.count()] * 100)\n```"}
{"idx": 685, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Body, filter = 'Computer Game Datasets')\nres = df1.select(posts.ViewCount as TotalViews, users.DisplayName as LastEditorName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = posts.Body, filter = 'Computer Game Datasets')\nres = df1.select(posts.ViewCount as TotalViews, users.DisplayName as LastEditorName)\n```"}
{"idx": 686, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\navg_views = df.select(posts.ViewCount).avg()\ndf1 = df.where(element = posts.ViewCount, filter = '> avg_views')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\navg_views = df.select([MASK]).avg()\ndf1 = df.where(element = [MASK], filter = '> avg_views')\nres = df1.count()\n```"}
{"idx": 687, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = posts.Score, desc).limit(1)\ntmp_res1 = df1.select(posts.Id)\ndf2 = df.where(element = comments.PostId, filter = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = tmp_res1)\nres = df2.count()\n```"}
{"idx": 688, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ViewCount, filter = '> 35000')\ndf2 = df1.where(element = posts.CommentCount, filter = '= 0')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.ViewCount], filter = '> 35000')\ndf2 = df1.where(element = [posts.CommentCount], filter = '= 0')\nres = df2.count()\n```"}
{"idx": 689, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Id, filter = 183)\nres = df1.select(users.DisplayName, users.Location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 183)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 690, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Emmett')\ndf2 = df1.orderby(by = badges.Date, desc).limit(1)\nres = df2.select(badges.Name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Emmett')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 691, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = '>= 19').where(element = users.Age, filter = '<= 65')\ndf2 = df1.where(element = users.UpVotes, filter = '> 5000')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [users.Age], filter = '>= 19').where(element = [users.Age], filter = '<= 65')\ndf2 = df1.where(element = [users.UpVotes], filter = '> 5000')\nres = df2.count()\n```"}
{"idx": 692, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Zolomon')\nres = df1.select(julianday(badges.Date) - julianday(users.CreationDate))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Zolomon')\nres = df1.select([MASK] - [MASK])\n```"}
{"idx": 693, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = users.CreationDate, desc).limit(1)\ntmp_res1 = df.where(element = posts.OwnerUserId, filter = df1.select(users.Id)).count()\ntmp_res2 = df.where(element = comments.UserId, filter = df1.select(users.Id)).count()\nres = df.select(tmp_res1, tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\ntmp_res1 = df.where(element = [MASK], filter = df1.select([MASK])).count()\ntmp_res2 = df.where(element = [MASK], filter = df1.select([MASK])).count()\nres = df.select(tmp_res1, tmp_res2)\n```"}
{"idx": 694, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Analysing wind data with R')\ndf2 = df1.orderby(by = comments.CreationDate, desc).limit(10)\nres = df2.select(comments.Text, users.DisplayName)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = posts.Title, filter = '[MASK]')\ndf2 = df1.orderby(by = [MASK], desc).limit(10)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 695, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = badges.Name, filter = 'Citizen Patrol')\nres = df1.select(badges.UserId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Citizen Patrol')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 696, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(posts.Tags, filter = 'contains <careers>')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(posts.Tags, filter = 'contains <careers>')\nres = df1.count()\n```"}
{"idx": 697, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Jarrod Dixon')\nres = df1.select(users.Reputation, users.Views)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Jarrod Dixon')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 698, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Clustering 1D data')\ntmp_res1 = df1.select(comments.PostId).count()\ntmp_res2 = df1.select(posts.ParentId).count()\nres = df.select(tmp_res1, tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.Title], filter = 'Clustering 1D data')\ntmp_res1 = df1.select([posts.PostId]).count()\ntmp_res2 = df1.select([posts.ParentId]).count()\nres = df.select(tmp_res1, tmp_res2)\n```"}
{"idx": 699, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'IrishStat')\nres = df1.select(users.CreationDate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'IrishStat')\nres = df1.select([MASK])\n```"}
{"idx": 700, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = votes.BountyAmount, filter = '> 30')\nres = df1.select_distinct(votes.PostId).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 30')\nres = df1.select_distinct([MASK]).count()\n```"}
{"idx": 701, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = users.Reputation, desc).limit(1)\ndf2 = df.where(element = posts.OwnerUserId, filter = df1.select(users.Id))\ndf3 = df2.where(element = posts.Score, filter = '> 50')\nres = df.select(cast(df3.count(), float) / df2.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\ndf2 = df.where(element = [MASK], filter = df1.select([MASK]))\ndf3 = df2.where(element = [MASK], filter = '> 50')\nres = df.select(cast(df3.count(), float) / df2.count() * 100)\n```"}
{"idx": 702, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Score, filter = '< 20')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 20')\nres = df1.count()\n```"}
{"idx": 703, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = tags.Id, filter = '< 15')\ndf2 = df1.where(element = tags.Count, filter = '<= 20')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 15')\ndf2 = df1.where(element = [MASK], filter = '<= 20')\nres = df2.count()\n```"}
{"idx": 704, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = tags.TagName, filter = 'sample')\nres = df1.select(tags.ExcerptPostId, tags.WikiPostId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'sample')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 705, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Text, filter = 'fine, you win :)')\nres = df1.select(users.Reputation, users.UpVotes)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'fine, you win :)')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 706, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'LIKE %linear regression%')\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'LIKE %linear regression%')\nres = df1.select([MASK])\n```"}
{"idx": 707, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.ViewCount, filter = 'BETWEEN 100 AND 150')\ndf2 = df1.orderby(by = comments.Score, desc).limit(1)\nres = df2.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.ViewCount], filter = 'BETWEEN 100 AND 150')\ndf2 = df1.orderby(by = [comments.Score], desc).limit(1)\nres = df2.select([comments.Text])\n```"}
{"idx": 708, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(users.WebsiteUrl, filter = \"like '%http%'\")\nres = df1.select(users.CreationDate, users.Age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(users.[MASK], filter = \"like '%http%'\")\nres = df1.select(users.[MASK1], users.[MASK2])\n```"}
{"idx": 709, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Score, filter = 0)\ndf2 = df1.where(element = posts.ViewCount, filter = '< 5')\nres = df2.select(posts.Id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [comments.Score], filter = 0)\ndf2 = df1.where(element = [posts.ViewCount], filter = '< 5')\nres = df2.select([posts.Id]).distinct().count()\n```"}
{"idx": 710, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.CommentCount, filter = 1)\ndf2 = df1.where(element = comments.Score, filter = 0)\nres = df2.count(comments.Id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 0)\nres = df2.count([MASK])\n```"}
{"idx": 711, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.Age, filter = 40)\ndf2 = df1.where(element = comments.Score, filter = 0)\nres = df2.select(users.Id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 40)\ndf2 = df1.where(element = [MASK], filter = 0)\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 712, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = posts.Title, filter = 'Group differences on a five point Likert item')\nres = df1.select(posts.Id as PostId, comments.Id as CommentId, comments.Text as CommentText)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [posts.Title], filter = 'Group differences on a five point Likert item')\nres = df1.select([posts.Id as PostId, comments.Id as CommentId, comments.Text as CommentText])\n```"}
{"idx": 713, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Text, filter = 'R is also lazy evaluated.')\nres = df1.select(users.UpVotes)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'R is also lazy evaluated.')\nres = df1.select([MASK])\n```"}
{"idx": 714, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DisplayName, filter = 'Harvey Motulsky')\nres = df1.select(comments.Text)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Harvey Motulsky')\nres = df1.select([MASK])\n```"}
{"idx": 715, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = users.DownVotes, filter = 0)\ndf2 = df1.where(element = comments.Score, filter = 'BETWEEN 1 AND 5')\nres = df2.select(distinct(users.DisplayName))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 0)\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN 1 AND 5')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 716, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = comments.Score, filter = 'BETWEEN 5 AND 10')\ndf2 = df.where(element = users.UpVotes, filter = '= 0')\nres = df.select((df2.count() * 100.0) / df1.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [comments.Score], filter = 'BETWEEN 5 AND 10')\ndf2 = df.where(element = [users.UpVotes], filter = '= 0')\nres = df.select((df2.count() * 100.0) / df1.count())\n```"}
{"idx": 717, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = '3-D Man')\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '3-D Man')\nres = df1.select([MASK])\n```"}
{"idx": 718, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Super Strength')\ntmp_res1 = df1.select(superpower.id)\n\ndf2 = df.where(element = hero_power.power_id, filter = 'in', value = tmp_res1)\nres = df2.select(hero_power.hero_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [superpower.power_name], filter = 'Super Strength')\ntmp_res1 = df1.select([superpower.id])\n\ndf2 = df.where(element = [hero_power.power_id], filter = 'in', value = tmp_res1)\nres = df2.select([hero_power.hero_id]).distinct().count()\n```"}
{"idx": 719, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Super Strength')\ndf2 = df1.where(element = superhero.height_cm, filter = '> 200')\nres = df2.select(superhero.id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Super Strength')\ndf2 = df1.where(element = [MASK], filter = '> 200')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 720, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(superhero.id).having(element = count(hero_power.power_id), filter = '> 15')\nres = df1.select(superhero.full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).having(element = count([MASK]), filter = '> 15')\nres = df1.select([MASK])\n```"}
{"idx": 721, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Blue')\nres = df.where(element = superhero.eye_colour_id, filter = df1.id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Blue')\nres = df.where(element = [MASK], filter = df1.[MASK]).count()\n```"}
{"idx": 722, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Apocalypse')\nres = df1.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Apocalypse')\nres = df1.select([MASK])\n```"}
{"idx": 723, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Blue')\ndf2 = df.where(element = superpower.power_name, filter = 'Agility')\ndf3 = df1.intersect(df2)\nres = df3.select(superhero.id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Blue')\ndf2 = df.where(element = [MASK], filter = 'Agility')\ndf3 = df1.intersect(df2)\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 724, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Blue')\ndf2 = df.where(element = colour.colour, filter = 'Blond')\nres = df1.intersect(df2).select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [colour.colour], filter = 'Blue')\ndf2 = df.where(element = [colour.colour], filter = 'Blond')\nres = df1.intersect(df2).select([superhero.superhero_name])\n```"}
{"idx": 725, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\nres = df.where(element = superhero.publisher_id, filter = df1.publisher.id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marvel Comics')\nres = df.where(element = [MASK], filter = df1.[MASK]).count()\n```"}
{"idx": 726, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\nres = df1.orderby(by = superhero.height_cm, desc).select(superhero.superhero_name, superhero.height_cm)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marvel Comics')\nres = df1.orderby(by = [MASK], desc).select([MASK], [MASK])\n```"}
{"idx": 727, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Sauron')\nres = df1.select(publisher.publisher_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sauron')\nres = df1.select([MASK])\n```"}
{"idx": 728, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\ndf2 = df1.groupby(colour.colour).agg(count(superhero.id))\nres = df2.orderby(by = count(superhero.id), desc)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [publisher.publisher_name], filter = 'Marvel Comics')\ndf2 = df1.groupby([colour.colour]).agg(count([superhero.id]))\nres = df2.orderby(by = count([superhero.id]), desc)\n```"}
{"idx": 729, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\nres = df1.select(avg(superhero.height_cm))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marvel Comics')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 730, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\ndf2 = df.where(element = superpower.power_name, filter = 'Super Strength')\nres = df1.intersect(df2).select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marvel Comics')\ndf2 = df.where(element = [MASK], filter = 'Super Strength')\nres = df1.intersect(df2).select([MASK])\n```"}
{"idx": 731, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'DC Comics')\nres = df.where(element = superhero.publisher_id, filter = df1.publisher.id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'DC Comics')\nres = df.where(element = [MASK], filter = df1.[MASK]).count()\n```"}
{"idx": 732, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = attribute.attribute_name, filter = 'Speed')\ndf2 = df1.orderby(by = hero_attribute.attribute_value, asc).limit(1)\nres = df2.select(publisher.publisher_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Speed')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 733, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Gold')\ndf2 = df.where(element = superhero.publisher_id, filter = 1)\nres = df1.intersect(df2).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Gold')\ndf2 = df.where(element = [MASK], filter = 1)\nres = df1.intersect(df2).count()\n```"}
{"idx": 734, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Blue Beetle II')\nres = df1.select(publisher.publisher_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Blue Beetle II')\nres = df1.select([MASK])\n```"}
{"idx": 735, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Blond')\ntmp_res1 = df1.select(colour.id)\n\ndf2 = df.where(element = superhero.hair_colour_id, filter = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [colour.colour], filter = 'Blond')\ntmp_res1 = df1.select([colour.id])\n\ndf2 = df.where(element = [superhero.hair_colour_id], filter = tmp_res1)\nres = df2.count()\n```"}
{"idx": 736, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = attribute.attribute_name, filter = 'Intelligence')\ndf2 = df.where(element = hero_attribute.attribute_id, filter = df1.id).where(element = hero_attribute.attribute_value, filter = min(hero_attribute.attribute_value))\nres = df2.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Intelligence')\ndf2 = df.where(element = [MASK], filter = df1.[MASK]).where(element = [MASK], filter = min([MASK]))\nres = df2.select([MASK])\n```"}
{"idx": 737, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Copycat')\nres = df1.select(race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Copycat')\nres = df1.select([MASK])\n```"}
{"idx": 738, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = attribute.attribute_name, filter = 'Durability')\ndf2 = df1.where(element = hero_attribute.attribute_value, filter = '< 50')\nres = df2.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Durability')\ndf2 = df1.where(element = [MASK], filter = '< 50')\nres = df2.select([MASK])\n```"}
{"idx": 739, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Death Touch')\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Death Touch')\nres = df1.select([MASK])\n```"}
{"idx": 740, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = attribute.attribute_name, filter = 'Strength')\ndf2 = df1.where(element = hero_attribute.attribute_value, filter = 100)\ndf3 = df2.where(element = gender.gender, filter = 'Female')\nres = df3.select(superhero.id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Strength')\ndf2 = df1.where(element = [MASK], filter = 100)\ndf3 = df2.where(element = [MASK], filter = 'Female')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 741, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(superhero.id).orderby(by = count(hero_power.power_id), desc).limit(1)\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).orderby(by = count([MASK]), desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 742, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = race.race, filter = 'Vampire')\nres = df.where(element = superhero.race_id, filter = df1.select(race.id)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vampire')\nres = df.where(element = [MASK], filter = df1.select([MASK])).count()\n```"}
{"idx": 743, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.select(superhero.alignment_id).distinct()\ndf2 = df.where(element = alignment.alignment, filter = 'Bad')\ndf3 = df.where(element = superhero.publisher_id, filter = 'Marvel Comics').where(element = alignment.alignment, filter = 'Bad')\ntotal_count = df1.count()\nbad_count = df2.count()\nmarvel_bad_count = df3.count()\nres = df.select((bad_count * 100.0 / total_count), marvel_bad_count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.select([MASK]).distinct()\ndf2 = df.where(element = [MASK], filter = 'Bad')\ndf3 = df.where(element = [MASK], filter = 'Marvel Comics').where(element = [MASK], filter = 'Bad')\ntotal_count = df1.count()\nbad_count = df2.count()\nmarvel_bad_count = df3.count()\nres = df.select((bad_count * 100.0 / total_count), marvel_bad_count)\n```"}
{"idx": 744, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\nmarvel_count = df1.count()\n\ndf2 = df.where(element = publisher.publisher_name, filter = 'DC Comics')\ndc_count = df2.count()\n\nres = df.select(marvel_count - dc_count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [publisher.publisher_name], filter = 'Marvel Comics')\nmarvel_count = df1.count()\n\ndf2 = df.where(element = [publisher.publisher_name], filter = 'DC Comics')\ndc_count = df2.count()\n\nres = df.select([marvel_count - dc_count])\n```"}
{"idx": 745, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Star Trek')\nres = df1.select(publisher.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Star Trek')\nres = df1.select([MASK])\n```"}
{"idx": 746, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\nres = df.select(avg(hero_attribute.attribute_value))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\nres = df.select(avg([MASK]))\n```"}
{"idx": 747, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'is NULL')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is NULL')\nres = df1.count()\n```"}
{"idx": 748, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(superhero.id, filter = 75)\nres = df1.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(superhero.id, filter = 75)\nres = df1.select(colour.colour)\n```"}
{"idx": 749, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Deathlok')\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Deathlok')\nres = df1.select([MASK])\n```"}
{"idx": 750, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gender.gender, filter = 'Female')\nres = df1.select(avg(superhero.weight_kg))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Female')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 751, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gender.gender, filter = 'Male')\ndf2 = df1.select(superpower.power_name).distinct().limit(5)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Male')\ndf2 = df1.select([MASK]).distinct().limit(5)\n```"}
{"idx": 752, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = race.race, filter = 'Alien')\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alien')\nres = df1.select([MASK])\n```"}
{"idx": 753, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.height_cm, filter = 'BETWEEN 170 AND 190')\ndf2 = df1.where(element = colour.colour, filter = 'No Colour')\nres = df2.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'BETWEEN 170 AND 190')\ndf2 = df1.where(element = [MASK], filter = 'No Colour')\nres = df2.select([MASK])\n```"}
{"idx": 754, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(hero_power.hero_id, filter = 56)\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(hero_power.hero_id, filter = [MASK])\nres = df1.select(superpower.power_name)\n```"}
{"idx": 755, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = race.race, filter = 'Demi-God')\nres = df1.select(superhero.full_name).limit(5)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Demi-God')\nres = df1.select([MASK]).limit(5)\n```"}
{"idx": 756, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = alignment.alignment, filter = 'Bad')\ntmp_res1 = df1.select(alignment.id)\ndf2 = df.where(element = superhero.alignment_id, filter = 'in', value = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Bad')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df2.count()\n```"}
{"idx": 757, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.weight_kg, filter = 169)\nres = df1.select(race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 169)\nres = df1.select([MASK])\n```"}
{"idx": 758, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.height_cm, filter = 185)\ndf2 = df1.where(element = race.race, filter = 'human')\nres = df2.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 185)\ndf2 = df1.where(element = [MASK], filter = 'human')\nres = df2.select([MASK])\n```"}
{"idx": 759, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.weight_kg, filter = max(superhero.weight_kg))\nres = df1.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 760, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.height_cm, filter = 'BETWEEN 150 AND 180')\ndf2 = df1.where(element = publisher.publisher_name, filter = 'Marvel Comics')\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'BETWEEN 150 AND 180')\ndf2 = df1.where(element = [MASK], filter = 'Marvel Comics')\nres = df2.select([MASK])\n```"}
{"idx": 761, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gender.gender, filter = 'Male')\navg_weight = df.select(superhero.weight_kg).avg()\ndf2 = df1.where(element = superhero.weight_kg, filter = '> multiply(avg_weight, 0.79)')\nres = df2.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Male')\navg_weight = df.select([MASK]).avg()\ndf2 = df1.where(element = [MASK], filter = '> multiply([avg_weight], 0.79)')\nres = df2.select([MASK])\n```"}
{"idx": 762, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(superpower.power_name).agg(count(hero_power.power_id))\ndf2 = df1.orderby(by = count(hero_power.power_id), desc).limit(1)\nres = df2.select(superpower.power_name, count(hero_power.power_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(count([MASK]))\ndf2 = df1.orderby(by = count([MASK]), desc).limit(1)\nres = df2.select([MASK], count([MASK]))\n```"}
{"idx": 763, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Abomination')\nres = df1.select(attribute.attribute_name, hero_attribute.attribute_value)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Abomination')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 764, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(hero_power.hero_id, filter = 1)\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(hero_power.hero_id, filter = 1)\nres = df1.select(superpower.power_name)\n```"}
{"idx": 765, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'stealth')\nres = df1.select(hero_power.hero_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'stealth')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 766, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = hero_attribute.attribute_id, filter = 'attribute.attribute_name', filter_value = 'strength')\ndf2 = df1.orderby(by = hero_attribute.attribute_value, desc).limit(1)\nres = df2.select(superhero.full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = [MASK], filter_value = 'strength')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 767, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.skin_colour_id, filter = 'is NULL')\nres = df.select(cast(df1.count(), float) / df.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is NULL')\nres = df.select(cast(df1.count(), float) / [MASK])\n```"}
{"idx": 768, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Dark Horse Comics')\nres = df.where(element = superhero.publisher_id, filter = df1.publisher.id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Dark Horse Comics')\nres = df.where(element = [MASK], filter = df1.[MASK]).count()\n```"}
{"idx": 769, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Dark Horse Comics')\ndf2 = df1.where(element = attribute.attribute_name, filter = 'durability')\ndf3 = df2.orderby(by = hero_attribute.attribute_value, desc).limit(1)\nres = df3.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Dark Horse Comics')\ndf2 = df1.where(element = [MASK], filter = 'durability')\ndf3 = df2.orderby(by = [MASK], desc).limit(1)\nres = df3.select([MASK])\n```"}
{"idx": 770, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'Abraham Sapien')\nres = df1.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Abraham Sapien')\nres = df1.select([MASK])\n```"}
{"idx": 771, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Flight')\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Flight')\nres = df1.select([MASK])\n```"}
{"idx": 772, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gender.gender, filter = 'Female')\ndf2 = df1.where(element = publisher.publisher_name, filter = 'Dark Horse Comics')\nres = df2.select(colour.colour as eye_colour, colour.colour as hair_colour, colour.colour as skin_colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Female')\ndf2 = df1.where(element = [MASK], filter = 'Dark Horse Comics')\nres = df2.select([MASK] as eye_colour, [MASK] as hair_colour, [MASK] as skin_colour)\n```"}
{"idx": 773, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.eye_colour_id, filter = 'equals', element2 = superhero.hair_colour_id)\ndf2 = df1.where(element = superhero.hair_colour_id, filter = 'equals', element2 = superhero.skin_colour_id)\nres = df2.select(superhero.superhero_name, publisher.publisher_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'equals', element2 = [MASK])\ndf2 = df1.where(element = [MASK], filter = 'equals', element2 = [MASK])\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 774, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'A-Bomb')\nres = df1.select(race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'A-Bomb')\nres = df1.select([MASK])\n```"}
{"idx": 775, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gender.gender, filter = 'Female')\ndf2 = df1.where(element = colour.colour, filter = 'Blue')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Female')\ndf2 = df1.where(element = [MASK], filter = 'Blue')\nres = df2.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 776, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(superhero.full_name, filter = 'Charles Chandler')\nres = df1.select(superhero.superhero_name, race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(superhero.full_name, filter = 'Charles Chandler')\nres = df1.select(superhero.superhero_name, race.race)\n```"}
{"idx": 777, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Agent 13')\nres = df1.select(gender.gender)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Agent 13')\nres = df1.select([MASK])\n```"}
{"idx": 778, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Adaptation')\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Adaptation')\nres = df1.select([MASK])\n```"}
{"idx": 779, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Amazo')\ntmp_res1 = df1.select(superhero.id)\nres = df.where(element = hero_power.hero_id, filter = 'in', value = tmp_res1).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Amazo')\ntmp_res1 = df1.select([MASK])\nres = df.where(element = [MASK], filter = 'in', value = tmp_res1).count()\n```"}
{"idx": 780, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'Hunter Zolomon')\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hunter Zolomon')\nres = df1.select([MASK])\n```"}
{"idx": 781, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Amber')\nres = df1.select(superhero.height_cm)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Amber')\nres = df1.select([MASK])\n```"}
{"idx": 782, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Black')\ndf2 = df.where(element = superhero.hair_colour, filter = 'Black')\nres = df1.intersect(df2).select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Black')\ndf2 = df.where(element = [MASK], filter = 'Black')\nres = df1.intersect(df2).select([MASK])\n```"}
{"idx": 783, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Gold')\ntmp_res1 = df1.select(colour.id)\n\ndf2 = df.where(element = superhero.eye_colour_id, filter = 'in', value = tmp_res1)\nres = df2.select(distinct = colour.colour as eye_colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [colour.colour], filter = 'Gold')\ntmp_res1 = df1.select([colour.id])\n\ndf2 = df.where(element = [superhero.eye_colour_id], filter = 'in', value = tmp_res1)\nres = df2.select(distinct = [colour.colour] as eye_colour)\n```"}
{"idx": 784, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = race.race, filter = 'Vampire')\nres = df1.select(superhero.full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vampire')\nres = df1.select([MASK])\n```"}
{"idx": 785, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = alignment.alignment, filter = 'Neutral')\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Neutral')\nres = df1.select([MASK])\n```"}
{"idx": 786, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = attribute.attribute_name, filter = 'Strength')\ndf2 = df.where(element = hero_attribute.attribute_id, filter = df1.select(attribute.id))\ndf3 = df2.where(element = hero_attribute.attribute_value, filter = max(df2.select(hero_attribute.attribute_value)))\nres = df3.select(hero_attribute.hero_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Strength')\ndf2 = df.where(element = [MASK], filter = df1.select([MASK]))\ndf3 = df2.where(element = [MASK], filter = max(df2.select([MASK])))\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 787, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Cameron Hicks')\nres = df1.select(race.race, alignment.alignment)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Cameron Hicks')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 788, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\ndf2 = df1.where(element = gender.gender, filter = 'Female')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marvel Comics')\ndf2 = df1.where(element = [MASK], filter = 'Female')\nres = df2.select(cast(df2.count(), float) / df1.count() * 100)\n```"}
{"idx": 789, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = race.race, filter = 'Alien')\nres = df.where(element = superhero.race_id, filter = df1.select(race.id)).select(superhero.weight_kg).avg()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alien')\nres = df.where(element = [MASK], filter = df1.select([MASK])).select([MASK]).avg()\n```"}
{"idx": 790, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'Emil Blonsky')\ntmp_res1 = df1.select(superhero.weight_kg)\n\ndf2 = df.where(element = superhero.full_name, filter = 'Charles Chandler')\ntmp_res2 = df2.select(superhero.weight_kg)\n\nres = df.select(tmp_res1 - tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [superhero.full_name], filter = 'Emil Blonsky')\ntmp_res1 = df1.select([superhero.weight_kg])\n\ndf2 = df.where(element = [superhero.full_name], filter = 'Charles Chandler')\ntmp_res2 = df2.select([superhero.weight_kg])\n\nres = df.select(tmp_res1 - tmp_res2)\n```"}
{"idx": 791, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\nres = df.select(avg(superhero.height_cm))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\nres = df.select(avg([MASK]))\n```"}
{"idx": 792, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Abomination')\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Abomination')\nres = df1.select([MASK])\n```"}
{"idx": 793, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.race_id, filter = 21)\ndf2 = df1.where(element = superhero.gender_id, filter = 1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 21)\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.count()\n```"}
{"idx": 794, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = attribute.attribute_name, filter = 'Speed')\ndf2 = df1.orderby(by = hero_attribute.attribute_value, desc).limit(1)\nres = df2.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Speed')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 795, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.alignment_id, filter = 3)\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 3)\nres = df1.count()\n```"}
{"idx": 796, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = '3-D Man')\nres = df1.select(attribute.attribute_name, hero_attribute.attribute_value)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '3-D Man')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 797, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Blue')\ndf2 = df.where(element = colour.colour, filter = 'Brown')\nres = df1.intersect(df2).select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [colour.colour], filter = 'Blue')\ndf2 = df.where(element = [colour.colour], filter = 'Brown')\nres = df1.intersect(df2).select([superhero.superhero_name])\n```"}
{"idx": 798, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Hawkman')\ndf2 = df.where(element = superhero.superhero_name, filter = 'Karate Kid')\ndf3 = df.where(element = superhero.superhero_name, filter = 'Speedy')\nres = df1.union(df2).union(df3).select(superhero.superhero_name, publisher.publisher_name)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Hawkman')\ndf2 = df.where(element = [MASK], filter = 'Karate Kid')\ndf3 = df.where(element = [MASK], filter = 'Speedy')\nres = df1.union(df2).union(df3).select([MASK], [MASK])\n```"}
{"idx": 799, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.publisher_id, filter = 'is NULL')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is NULL')\nres = df1.count()\n```"}
{"idx": 800, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Blue')\ntmp_res1 = df1.count()\ntmp_res2 = df.count()\nres = df.select(cast(tmp_res1, float) / tmp_res2 * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [colour.colour], filter = 'Blue')\ntmp_res1 = df1.count()\ntmp_res2 = df.count()\nres = df.select(cast(tmp_res1, float) / tmp_res2 * 100)\n```"}
{"idx": 801, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gender.gender, filter = 'Male')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = gender.gender, filter = 'Female')\ntmp_res2 = df2.count()\n\nres = df.select(tmp_res1 * 1.0 / tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [gender.gender], filter = 'Male')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = [gender.gender], filter = 'Female')\ntmp_res2 = df2.count()\n\nres = df.select((tmp_res1 * 1.0) / tmp_res2)\n```"}
{"idx": 802, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = superhero.height_cm, desc).limit(1)\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 803, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'cryokinesis')\nres = df1.select(superpower.id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'cryokinesis')\nres = df1.select([MASK])\n```"}
{"idx": 804, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.id, filter = 294)\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 294)\nres = df1.select([MASK])\n```"}
{"idx": 805, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.weight_kg, filter = 'IS NULL')\ndf2 = df.where(element = superhero.weight_kg, filter = '= 0')\nres = df1.union(df2).select(superhero.full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'IS NULL')\ndf2 = df.where(element = [MASK], filter = '= 0')\nres = df1.union(df2).select([MASK])\n```"}
{"idx": 806, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'Karen Beecher-Duncan')\nres = df1.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Karen Beecher-Duncan')\nres = df1.select([MASK])\n```"}
{"idx": 807, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'Helen Parr')\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Helen Parr')\nres = df1.select([MASK])\n```"}
{"idx": 808, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.weight_kg, filter = 108)\ndf2 = df1.where(element = superhero.height_cm, filter = 188)\nres = df2.select(race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 108)\ndf2 = df1.where(element = [MASK], filter = 188)\nres = df2.select([MASK])\n```"}
{"idx": 809, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.id, filter = 38)\nres = df1.select(publisher.publisher_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 38)\nres = df1.select([MASK])\n```"}
{"idx": 810, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = hero_attribute.attribute_value, filter = max(hero_attribute.attribute_value))\nres = df1.select(race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 811, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Atom IV')\nres = df1.select(alignment.alignment, superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Atom IV')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 812, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Blue')\nres = df1.select(superhero.full_name).limit(5)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Blue')\nres = df1.select([MASK]).limit(5)\n```"}
{"idx": 813, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.alignment_id, filter = 3)\nres = df1.select(avg(hero_attribute.attribute_value))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 3)\nres = df1.select(avg([MASK]))\n```"}
{"idx": 814, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(hero_attribute.attribute_value, filter = 100)\nres = df1.select(distinct = colour.colour, as = 'skin_colour')\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(hero_attribute.attribute_value, filter = 100)\nres = df1.select(distinct = [MASK], as = 'skin_colour')\n```"}
{"idx": 815, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.alignment_id, filter = 1)\ndf2 = df1.where(element = superhero.gender_id, filter = 2)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = 2)\nres = df2.count()\n```"}
{"idx": 816, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(hero_attribute.attribute_value, filter = 'BETWEEN 75 AND 80')\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(hero_attribute.attribute_value, filter = 'BETWEEN 75 AND 80')\nres = df1.select(superhero.superhero_name)\n```"}
{"idx": 817, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'blue')\ndf2 = df1.where(element = gender.gender, filter = 'male')\nres = df2.select(race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'blue')\ndf2 = df1.where(element = [MASK], filter = 'male')\nres = df2.select([MASK])\n```"}
{"idx": 818, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.alignment_id, filter = 2)\ndf2 = df1.where(element = superhero.gender_id, filter = 2)\nres = df.select(cast(df2.count(), float) / df1.count() * 100.0)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2)\ndf2 = df1.where(element = [MASK], filter = 2)\nres = df2.select(cast(df2.count(), float) / df1.count() * 100.0)\n```"}
{"idx": 819, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.weight_kg, filter = 'IS NULL OR = 0')\ndf2 = df1.where(element = superhero.eye_colour_id, filter = 7)\ndf3 = df1.where(element = superhero.eye_colour_id, filter = 1)\nres = df.select(df2.count() - df3.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [superhero.weight_kg], filter = 'IS NULL OR = 0')\ndf2 = df1.where(element = [superhero.eye_colour_id], filter = 7)\ndf3 = df1.where(element = [superhero.eye_colour_id], filter = 1)\nres = df.select(df2.count() - df3.count())\n```"}
{"idx": 820, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Hulk')\ndf2 = df1.where(element = attribute.attribute_name, filter = 'Strength')\nres = df2.select(hero_attribute.attribute_value)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hulk')\ndf2 = df1.where(element = [MASK], filter = 'Strength')\nres = df2.select([MASK])\n```"}
{"idx": 821, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Ajax')\nres = df1.select(superpower.power_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ajax')\nres = df1.select([MASK])\n```"}
{"idx": 822, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = colour.colour, filter = 'Green')\ndf2 = df.where(element = alignment.alignment, filter = 'Bad')\nres = df1.intersect(df2).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Green')\ndf2 = df.where(element = [MASK], filter = 'Bad')\nres = df1.intersect(df2).count()\n```"}
{"idx": 823, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gender.gender, filter = 'Female')\ndf2 = df1.where(element = publisher.publisher_name, filter = 'Marvel Comics')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Female')\ndf2 = df1.where(element = [MASK], filter = 'Marvel Comics')\nres = df2.count()\n```"}
{"idx": 824, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Wind Control')\nres = df1.orderby(by = superhero.superhero_name, asc).select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Wind Control')\nres = df1.orderby(by = [MASK], asc).select([MASK])\n```"}
{"idx": 825, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Phoenix Force')\nres = df1.select(gender.gender)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Phoenix Force')\nres = df1.select([MASK])\n```"}
{"idx": 826, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'DC Comics')\ndf2 = df1.orderby(by = superhero.weight_kg, desc).limit(1)\nres = df2.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'DC Comics')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 827, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Dark Horse Comics')\ndf2 = df1.where(element = race.race, filter = '<> Human')\nres = df2.select(avg(superhero.height_cm))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Dark Horse Comics')\ndf2 = df1.where(element = [MASK], filter = '<> Human')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 828, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = attribute.attribute_name, filter = 'Speed')\ndf2 = df1.where(element = hero_attribute.attribute_value, filter = 100)\nres = df2.select(hero_attribute.hero_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Speed')\ndf2 = df1.where(element = [MASK], filter = 100)\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 829, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'DC Comics')\ndc_count = df1.count()\n\ndf2 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\nmarvel_count = df2.count()\n\nres = df.select(dc_count - marvel_count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [publisher.publisher_name], filter = 'DC Comics')\ndc_count = df1.count()\n\ndf2 = df.where(element = [publisher.publisher_name], filter = 'Marvel Comics')\nmarvel_count = df2.count()\n\nres = df.select([dc_count - marvel_count])\n```"}
{"idx": 830, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Black Panther')\ntmp_res1 = df1.select(superhero.id)\n\ndf2 = df.where(element = hero_attribute.hero_id, filter = tmp_res1).orderby(by = hero_attribute.attribute_value, asc).limit(1)\nres = df2.select(attribute.attribute_name)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [superhero.superhero_name], filter = 'Black Panther')\ntmp_res1 = df1.select([superhero.id])\n\ndf2 = df.where(element = [hero_attribute.hero_id], filter = tmp_res1).orderby(by = [hero_attribute.attribute_value], asc).limit(1)\nres = df2.select([attribute.attribute_name])\n```"}
{"idx": 831, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Abomination')\nres = df1.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Abomination')\nres = df1.select([MASK])\n```"}
{"idx": 832, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = superhero.height_cm, desc).limit(1)\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 833, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'Charles Chandler')\nres = df1.select(superhero.superhero_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Charles Chandler')\nres = df1.select([MASK])\n```"}
{"idx": 834, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'George Lucas')\ndf2 = df.where(element = superhero.publisher_id, filter = df1.select(publisher.id))\ndf3 = df.where(element = superhero.gender_id, filter = df1.select(gender.id), filter2 = superhero.publisher_id, filter2 = df2.select(superhero.publisher_id))\ntotal_count = df2.count()\nfemale_count = df3.count()\nres = df.select(cast(female_count, float) / total_count * 100.0)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'George Lucas')\ndf2 = df.where(element = [MASK], filter = [MASK].select([MASK]))\ndf3 = df.where(element = [MASK], filter = [MASK].select([MASK]), filter2 = [MASK], filter2 = [MASK].select([MASK]))\ntotal_count = [MASK].count()\nfemale_count = [MASK].count()\nres = df.select(cast(female_count, float) / total_count * 100.0)\n```"}
{"idx": 835, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = publisher.publisher_name, filter = 'Marvel Comics')\ndf2 = df.where(element = superhero.publisher_id, filter = df1.select(superhero.publisher_id))\ndf3 = df2.where(element = superhero.alignment_id, filter = df.where(element = alignment.alignment, filter = 'Good').select(alignment.id))\nres = df.select(cast(df3.count(), float) / df2.count() * 100.0)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [publisher.publisher_name], filter = 'Marvel Comics')\ndf2 = df.where(element = [superhero.publisher_id], filter = df1.select([superhero.publisher_id]))\ndf3 = df.where(element = [superhero.alignment_id], filter = df.where(element = [alignment.alignment], filter = 'Good').select([alignment.id]))\nres = df.select(cast(df3.count(), float) / df2.count() * 100.0)\n```"}
{"idx": 836, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.full_name, filter = 'LIKE John%')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'LIKE John%')\nres = df1.count()\n```"}
{"idx": 837, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = hero_attribute.attribute_value, filter = min(hero_attribute.attribute_value))\nres = df1.select(hero_attribute.hero_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 838, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Alien')\nres = df1.select(superhero.full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alien')\nres = df1.select([MASK])\n```"}
{"idx": 839, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.weight_kg, filter = '< 100')\ndf2 = df1.where(element = colour.colour, filter = 'Brown')\nres = df2.select(superhero.full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 100')\ndf2 = df1.where(element = [MASK], filter = 'Brown')\nres = df2.select([MASK])\n```"}
{"idx": 840, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Aquababy')\nres = df1.select(hero_attribute.attribute_value)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aquababy')\nres = df1.select([MASK])\n```"}
{"idx": 841, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.id, filter = 40)\nres = df1.select(superhero.weight_kg, race.race)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 40)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 842, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = alignment.alignment, filter = 'neutral')\ntmp_res1 = df1.select(alignment.id)\n\ndf2 = df.where(element = superhero.alignment_id, filter = in(tmp_res1))\nres = df2.select(avg(superhero.height_cm))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'neutral')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = in(tmp_res1))\nres = df2.select(avg([MASK]))\n```"}
{"idx": 843, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superpower.power_name, filter = 'Intelligence')\nres = df1.select(hero_power.hero_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Intelligence')\nres = df1.select([MASK])\n```"}
{"idx": 844, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.superhero_name, filter = 'Blackwulf')\nres = df1.select(colour.colour)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Blackwulf')\nres = df1.select([MASK])\n```"}
{"idx": 845, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = superhero.height_cm, filter = '> multiply(element = avg(superhero.height_cm), factor = 0.8)')\nres = df1.select(distinct(superpower.power_name))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '> multiply(element = [MASK], factor = 0.8)')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 846, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = qualifying.raceId, filter = 20)\ndf2 = df1.orderby(by = qualifying.q1, desc).limit(5)\nres = df2.select(drivers.driverRef)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 20)\ndf2 = df1.orderby(by = [MASK], desc).limit(5)\nres = df2.select([MASK])\n```"}
{"idx": 847, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = qualifying.raceId, filter = 19)\ndf2 = df1.where(element = qualifying.q2, filter = min(qualifying.q2), is_not_null = True)\nres = df2.select(drivers.surname).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 19)\ndf2 = df1.where(element = [MASK], filter = min([MASK]), is_not_null = True)\nres = df2.select([MASK]).limit(1)\n```"}
{"idx": 848, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.location, filter = 'Shanghai')\nres = df1.select(races.year).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Shanghai')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 849, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Circuit de Barcelona-Catalunya')\nres = df1.select(races.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Circuit de Barcelona-Catalunya')\nres = df1.select([MASK])\n```"}
{"idx": 850, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'Germany')\nres = df1.select(races.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Germany')\nres = df1.select([MASK])\n```"}
{"idx": 851, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(constructors.name, filter = 'Renault')\nres = df1.select(circuits.name as circuitName, results.position as position)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(constructors.name, filter = 'Renault')\nres = df1.select(circuits.name as circuitName, results.position as position)\n```"}
{"idx": 852, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'NOT IN', values = ['Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Cambodia', 'China', 'Cyprus', 'Georgia', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Lebanon', 'Malaysia', 'Maldives', 'Mongolia', 'Myanmar', 'Nepal', 'North Korea', 'Oman', 'Pakistan', 'Palestine', 'Philippines', 'Qatar', 'Saudi Arabia', 'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Taiwan', 'Tajikistan', 'Thailand', 'Timor-Leste', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'Yemen', 'Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malta', 'Moldova', 'Monaco', 'Montenegro', 'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia', 'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine', 'United Kingdom'])\ndf2 = df1.where(element = races.year, filter = 2010)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [circuits.country], filter = 'NOT IN', values = ['Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Cambodia', 'China', 'Cyprus', 'Georgia', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Lebanon', 'Malaysia', 'Maldives', 'Mongolia', 'Myanmar', 'Nepal', 'North Korea', 'Oman', 'Pakistan', 'Palestine', 'Philippines', 'Qatar', 'Saudi Arabia', 'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Taiwan', 'Tajikistan', 'Thailand', 'Timor-Leste', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'Yemen', 'Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malta', 'Moldova', 'Monaco', 'Montenegro', 'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia', 'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine', 'United Kingdom'])\ndf2 = df1.where(element = [races.year], filter = 2010)\nres = df2.count()\n```"}
{"idx": 853, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'Spain')\nres = df1.select(races.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Spain')\nres = df1.select([MASK])\n```"}
{"idx": 854, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'Australian Grand Prix')\nres = df1.select(circuits.lat, circuits.lng)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Australian Grand Prix')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 855, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Sepang International Circuit')\nres = df1.select(races.*)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sepang International Circuit')\nres = df1.select([MASK])\n```"}
{"idx": 856, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Sepang International Circuit')\nres = df1.select(races.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sepang International Circuit')\nres = df1.select([MASK])\n```"}
{"idx": 857, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'Abu Dhabi Grand Prix')\nres = df1.select(circuits.lat, circuits.lng)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Abu Dhabi Grand Prix')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 858, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructorResults.raceId, filter = 24)\ndf2 = df1.where(element = constructorResults.points, filter = 1)\nres = df2.select(constructors.country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 24)\ndf2 = df1.where(element = [MASK], filter = 1)\nres = df2.select([MASK])\n```"}
{"idx": 859, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Bruno')\ndf2 = df1.where(element = drivers.surname, filter = 'Senna')\ndf3 = df2.where(element = qualifying.raceId, filter = 354)\nres = df3.select(qualifying.q1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Bruno')\ndf2 = df1.where(element = [drivers.surname], filter = 'Senna')\ndf3 = df2.where(element = [qualifying.raceId], filter = 354)\nres = df3.select([qualifying.q1])\n```"}
{"idx": 860, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = qualifying.raceId, filter = 355)\ndf2 = df1.where(element = qualifying.q2, filter = '0:01:40')\nres = df2.select(drivers.nationality)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 355)\ndf2 = df1.where(element = [MASK], filter = '0:01:40')\nres = df2.select([MASK])\n```"}
{"idx": 861, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = qualifying.raceId, filter = 903)\ndf2 = df1.where(element = qualifying.q3, filter = '0:01:54')\nres = df2.select(qualifying.number)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 903)\ndf2 = df1.where(element = [MASK], filter = '0:01:54')\nres = df2.select([MASK])\n```"}
{"idx": 862, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2007).where(element = races.name, filter = 'Bahrain Grand Prix')\ntmp_res1 = df1.select(races.raceId)\ndf2 = df.where(element = results.raceId, filter = tmp_res1).where(element = results.time, filter = 'is null')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2007).where(element = [races.name], filter = 'Bahrain Grand Prix')\ntmp_res1 = df1.select([races.raceId])\ndf2 = df.where(element = [results.raceId], filter = tmp_res1).where(element = [results.time], filter = 'is null')\nres = df2.count()\n```"}
{"idx": 863, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.raceId, filter = 901)\nres = df1.select(seasons.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 901)\nres = df1.select([MASK])\n```"}
{"idx": 864, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.date, filter = '2015-11-29')\ntmp_res1 = df1.select(races.raceId)\n\ndf2 = df.where(element = status.status, filter = 'Finished')\ntmp_res2 = df2.select(status.statusId)\n\ndf3 = df.where(element = results.raceId, filter = tmp_res1).where(element = results.statusId, filter = tmp_res2)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.date], filter = '2015-11-29')\ntmp_res1 = df1.select([races.raceId])\n\ndf2 = df.where(element = [status.status], filter = 'Finished')\ntmp_res2 = df2.select([status.statusId])\n\ndf3 = df.where(element = [results.raceId], filter = tmp_res1).where(element = [results.statusId], filter = tmp_res2)\nres = df3.count()\n```"}
{"idx": 865, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.raceId, filter = 592)\ndf2 = df1.where(element = results.time, filter = 'is not null')\ndf3 = df2.orderby(by = drivers.dob, asc).limit(1)\nres = df3.select(drivers.driverId, drivers.forename, drivers.surname, drivers.dob)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [results.raceId], filter = 592)\ndf2 = df1.where(element = [results.time], filter = 'is not null')\ndf3 = df2.orderby(by = [drivers.dob], asc).limit(1)\nres = df3.select([drivers.driverId, drivers.forename, drivers.surname, drivers.dob])\n```"}
{"idx": 866, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = lapTimes.raceId, filter = 161)\ndf2 = df1.where(element = lapTimes.time, filter = '0:01:27')\nres = df2.select(drivers.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 161)\ndf2 = df1.where(element = [MASK], filter = '0:01:27')\nres = df2.select([MASK])\n```"}
{"idx": 867, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.raceId, filter = 933)\ndf2 = df1.orderby(by = cast(results.fastestLapSpeed, real), desc).limit(1)\nres = df2.select(drivers.nationality)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 933)\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 868, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'Malaysian Grand Prix')\nres = df1.select(circuits.lat, circuits.lng)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Malaysian Grand Prix')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 869, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructorResults.raceId, filter = 9)\ndf2 = df1.orderby(by = constructorResults.points, desc).limit(1)\nres = df2.select(constructors.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 9)\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 870, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lucas')\ndf2 = df1.where(element = drivers.surname, filter = 'di Grassi')\ndf3 = df2.where(element = qualifying.raceId, filter = 345)\nres = df3.select(qualifying.q1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Lucas')\ndf2 = df1.where(element = [drivers.surname], filter = 'di Grassi')\ndf3 = df2.where(element = [qualifying.raceId], filter = 345)\nres = df3.select([qualifying.q1])\n```"}
{"idx": 871, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = qualifying.raceId, filter = 347)\ndf2 = df1.where(element = qualifying.q2, filter = '0:01:15')\nres = df2.select(drivers.nationality)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 347)\ndf2 = df1.where(element = [MASK], filter = '0:01:15')\nres = df2.select([MASK])\n```"}
{"idx": 872, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = qualifying.raceId, filter = 45)\ndf2 = df1.where(element = qualifying.q3, filter = '0:01:33')\nres = df2.select(drivers.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 45)\ndf2 = df1.where(element = [MASK], filter = '0:01:33')\nres = df2.select([MASK])\n```"}
{"idx": 873, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Bruce')\ndf2 = df1.where(element = drivers.surname, filter = 'McLaren')\ndf3 = df2.where(element = results.raceId, filter = 743)\nres = df3.select(results.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Bruce')\ndf2 = df1.where(element = [MASK], filter = 'McLaren')\ndf3 = df2.where(element = [MASK], filter = 743)\nres = df3.select([MASK])\n```"}
{"idx": 874, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2006)\ndf2 = df1.where(element = races.name, filter = 'San Marino Grand Prix')\ndf3 = df2.where(element = results.position, filter = 2)\nres = df3.select(drivers.forename, drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2006)\ndf2 = df1.where(element = [races.name], filter = 'San Marino Grand Prix')\ndf3 = df2.where(element = [results.position], filter = 2)\nres = df3.select([drivers.[forename], drivers.[surname])\n```"}
{"idx": 875, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.raceId, filter = 901)\nres = df1.select(seasons.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 901)\nres = df1.select([MASK])\n```"}
{"idx": 876, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.date, filter = '2015-11-29')\ndf2 = df1.where(element = status.status, filter = '!= Finished')\nres = df2.select(results.driverId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.date], filter = '2015-11-29')\ndf2 = df1.where(element = [status.status], filter = '!= [status.status]')\nres = df2.select([results.driverId]).distinct().count()\n```"}
{"idx": 877, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.raceId, filter = 872)\ndf2 = df1.where(element = results.time, filter = 'is not null')\ndf3 = df2.orderby(by = drivers.dob, desc).limit(1)\nres = df3.select(drivers.driverId, drivers.forename, drivers.surname, drivers.dob)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [results.raceId], filter = 872)\ndf2 = df1.where(element = [results.time], filter = 'is not null')\ndf3 = df2.orderby(by = [drivers.dob], desc).limit(1)\nres = df3.select([drivers.driverId, drivers.forename, drivers.surname, drivers.dob])\n```"}
{"idx": 878, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = lapTimes.raceId, filter = 348)\ndf2 = df1.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df2.select(drivers.forename || ' ' || drivers.surname as full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 348)\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 879, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = results.fastestLapSpeed, desc).limit(1)\nres = df1.select(drivers.nationality)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 880, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Paul').where(element = drivers.surname, filter = 'di Resta')\ndf2 = df.where(element = results.driverId, filter = df1.driverId).where(element = results.raceId, filter = '853, 854')\ndf3 = df2.where(element = results.raceId, filter = 853)\ndf4 = df2.where(element = results.raceId, filter = 854)\nres = df.select((df3.results.fastestLapSpeed - df4.results.fastestLapSpeed) * 100.0 / df3.results.fastestLapSpeed)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Paul').where(element = [drivers.surname], filter = 'di Resta')\ndf2 = df.where(element = [results.driverId], filter = df1.[drivers.driverId]).where(element = [results.raceId], filter = '853, 854')\ndf3 = df.where(element = [results.raceId], filter = 853)\ndf4 = df.where(element = [results.raceId], filter = 854)\nres = df.select((df3.[results.fastestLapSpeed] - df4.[results.fastestLapSpeed]) * 100.0 / df3.[results.fastestLapSpeed])\n```"}
{"idx": 881, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.date, filter = '1983-07-16')\ndf2 = df1.where(element = results.time, filter = 'is not null')\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.date], filter = '1983-07-16')\ndf2 = df1.where(element = [results.time], filter = 'is not null')\nres = df2.select([count() * 100.0 / [df1.count()]])\n```"}
{"idx": 882, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'Singapore Grand Prix')\nres = df1.select(min(races.year))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Singapore Grand Prix')\nres = df1.select([MASK])\n```"}
{"idx": 883, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2005)\nres = df1.orderby(by = races.name, desc).select(races.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2005)\nres = df1.orderby(by = [MASK], desc).select([MASK])\n```"}
{"idx": 884, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.date, filter = 'min(races.date)')\nres = df1.select(races.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'min([MASK])')\nres = df1.select([MASK])\n```"}
{"idx": 885, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 1999)\ndf2 = df1.orderby(by = races.round, desc).limit(1)\nres = df2.select(races.name, races.date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1999)\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 886, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(races.year).agg(count = count())\ndf2 = df1.orderby(by = count, desc).limit(1)\nres = df2.select(races.year, count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(count = count())\ndf2 = df1.orderby(by = count, desc).limit(1)\nres = df2.select([MASK], count)\n```"}
{"idx": 887, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2017)\ntmp_res1 = df1.select(races.name)\n\ndf2 = df.where(element = races.year, filter = 2000)\ntmp_res2 = df2.select(races.name)\n\nres = tmp_res1.except(tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2017)\ntmp_res1 = df1.select([races.name])\n\ndf2 = df.where(element = [races.year], filter = 2000)\ntmp_res2 = df2.select([races.name])\n\nres = tmp_res1.except(tmp_res2)\n```"}
{"idx": 888, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'European Grand Prix')\ndf2 = df1.where(element = races.year, filter = min(races.year))\nres = df2.select(circuits.country, circuits.name as circuit_name, circuits.location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'European Grand Prix')\ndf2 = df1.where(element = [MASK], filter = min([MASK]))\nres = df2.select([MASK], [MASK] as [MASK], [MASK])\n```"}
{"idx": 889, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Brands Hatch')\ndf2 = df1.where(element = races.name, filter = 'British Grand Prix')\nres = df2.select(max(races.year))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Brands Hatch')\ndf2 = df1.where(element = [MASK], filter = 'British Grand Prix')\nres = df2.select([MASK])\n```"}
{"idx": 890, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Silverstone Circuit')\ndf2 = df1.where(element = races.name, filter = 'British Grand Prix')\nres = df2.select(races.year).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Silverstone Circuit')\ndf2 = df1.where(element = [MASK], filter = 'British Grand Prix')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 891, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2010).where(element = races.name, filter = 'Singapore Grand Prix')\ndf2 = df1.orderby(by = results.position, asc)\nres = df2.select(drivers.forename, drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2010).where(element = [races.name], filter = 'Singapore Grand Prix')\ndf2 = df1.orderby(by = [results.position], asc)\nres = df2.select([drivers.forename, drivers.surname])\n```"}
{"idx": 892, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(drivers.driverId).agg(total_points = sum(results.points))\ndf2 = df1.orderby(by = total_points, desc).limit(1)\nres = df2.select(drivers.forename || ' ' || drivers.surname as full_name, total_points)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(total_points = sum([MASK]))\ndf2 = df1.orderby(by = total_points, desc).limit(1)\nres = df2.select([MASK], total_points)\n```"}
{"idx": 893, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2017).where(element = races.name, filter = 'Chinese Grand Prix')\ndf2 = df1.orderby(by = results.points, desc).limit(3)\nres = df2.select(drivers.forename || ' ' || drivers.surname, results.points)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2017).where(element = [races.name], filter = 'Chinese Grand Prix')\ndf2 = df1.orderby(by = [results.points], desc).limit(3)\nres = df2.select([drivers.forename || ' ' || drivers.surname, [results.points]])\n```"}
{"idx": 894, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df1.select(drivers.forename || ' ' || drivers.surname as driver_name, races.name as race_name, lapTimes.time as best_lap_time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], asc).limit(1)\nres = df1.select([MASK].as(driver_name), [MASK].as(race_name), [MASK].as(best_lap_time))\n```"}
{"idx": 895, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\ndf3 = df2.where(element = races.year, filter = 2009)\ndf4 = df3.where(element = races.name, filter = 'Malaysian Grand Prix')\nres = df4.select(avg(lapTimes.milliseconds))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis')\ndf2 = df1.where(element = [drivers.surname], filter = 'Hamilton')\ndf3 = df2.where(element = [races.year], filter = 2009)\ndf4 = df3.where(element = [races.name], filter = 'Malaysian Grand Prix')\nres = df4.select(avg([lapTimes.milliseconds]))\n```"}
{"idx": 896, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.surname, filter = 'Hamilton')\ndf2 = df.where(element = races.year, filter = '>= 2010').where(element = races.raceId, filter = in(df.select(races.raceId).where(element = results.driverId, filter = df1.select(drivers.driverId))))\ndf3 = df.where(element = results.driverId, filter = df1.select(drivers.driverId)).where(element = results.raceId, filter = in(df2.select(races.raceId))).where(element = results.position, filter = '!= 1').count()\ndf4 = df2.count()\nres = df.select((df3 * 100.0 / df4))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.surname], filter = 'Hamilton')\ndf2 = df.where(element = [races.year], filter = '>= 2010').where(element = [races.raceId], filter = in([races.raceId]).where(element = [results.driverId], filter = df1.select([drivers.driverId])))\ndf3 = df.where(element = [results.driverId], filter = df1.select([drivers.driverId])).where(element = [results.raceId], filter = in([races.raceId])).where(element = [results.position], filter = '!= 1').count()\ndf4 = df2.count()\nres = df.select((df3 * 100.0 / df4))\n```"}
{"idx": 897, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(driverStandings.driverId).orderby(by = sum(driverStandings.wins), desc).limit(1)\ndf2 = df1.select(drivers.forename, drivers.surname, drivers.nationality, max(driverStandings.points))\nres = df2.orderby(by = sum(driverStandings.wins), desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).orderby(by = sum([MASK]), desc).limit(1)\ndf2 = df1.select([MASK], [MASK], [MASK], max([MASK]))\nres = df2.orderby(by = sum([MASK]), desc).limit(1)\n```"}
{"idx": 898, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'Japanese')\ndf2 = df1.orderby(by = subtract(strftime('%Y', now()) - strftime('%Y', drivers.dob), subtract(strftime('%m-%d', now()) < strftime('%m-%d', drivers.dob))), asc).limit(1)\nres = df2.select((drivers.forename || ' ' || drivers.surname) as name, subtract(strftime('%Y', now()) - strftime('%Y', drivers.dob), subtract(strftime('%m-%d', now()) < strftime('%m-%d', drivers.dob)) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.nationality], filter = 'Japanese')\ndf2 = df1.orderby(by = subtract(strftime('%Y', now()) - strftime('%Y', [drivers.dob]), subtract(strftime('%m-%d', now()) < strftime('%m-%d', [drivers.dob])), asc).limit(1)\nres = df2.select((drivers.forename || ' ' || drivers.surname) as [name], subtract(strftime('%Y', now()) - strftime('%Y', [drivers.dob]), subtract(strftime('%m-%d', now()) < strftime('%m-%d', [drivers.dob])) as [age])\n```"}
{"idx": 899, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 'BETWEEN 1990 AND 2000')\ndf2 = df1.groupby(circuits.circuitId).having(element = count(races.raceId), filter = '= 4')\nres = df2.select(circuits.circuitId, circuits.circuitRef, circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 'BETWEEN 1990 AND 2000')\ndf2 = df1.groupby([circuits.circuitId]).having(element = count([races.raceId]), filter = '= 4')\nres = df2.select([circuits.circuitId, circuits.circuitRef, circuits.name, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url])\n```"}
{"idx": 900, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'USA')\ndf2 = df1.where(element = races.year, filter = 2006)\nres = df2.select(circuits.name, circuits.location, races.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'USA')\ndf2 = df1.where(element = [MASK], filter = 2006)\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 901, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.date, filter = \"year = 2005 and month = 9\")\nres = df1.select(races.name as race_name, circuits.name as circuit_name, circuits.location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.date], filter = \"year = 2005 and month = 9\")\nres = df1.select([races.name as race_name, circuits.name as circuit_name, circuits.location])\n```"}
{"idx": 902, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Alex')\ndf2 = df1.where(element = drivers.surname, filter = 'Yoong')\ndf3 = df2.where(element = results.position, filter = '< 20')\nres = df3.select(races.*)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Alex')\ndf2 = df1.where(element = [drivers.surname], filter = 'Yoong')\ndf3 = df2.where(element = [results.position], filter = '< 20')\nres = df3.select([races.*])\n```"}
{"idx": 903, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Sepang International Circuit')\ndf2 = df1.where(element = drivers.forename, filter = 'Michael').where(element = drivers.surname, filter = 'Schumacher')\ndf3 = df2.where(element = results.position, filter = 1)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [circuits.name], filter = 'Sepang International Circuit')\ndf2 = df1.where(element = [drivers.forename], filter = 'Michael').where(element = [drivers.surname], filter = 'Schumacher')\ndf3 = df2.where(element = [results.position], filter = 1)\nres = df3.count()\n```"}
{"idx": 904, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Michael').where(element = drivers.surname, filter = 'Schumacher')\ndf2 = df1.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df2.select(races.name, races.year)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Michael').where(element = [drivers.surname], filter = 'Schumacher')\ndf2 = df1.orderby(by = [lapTimes.milliseconds], asc).limit(1)\nres = df2.select([races.name, races.year])\n```"}
{"idx": 905, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Eddie')\ndf2 = df1.where(element = drivers.surname, filter = 'Irvine')\ndf3 = df2.where(element = races.year, filter = 2000)\nres = df3.select(avg(results.points))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Eddie')\ndf2 = df1.where(element = [drivers.surname], filter = 'Irvine')\ndf3 = df2.where(element = [races.year], filter = 2000)\nres = df3.select(avg([results.points]))\n```"}
{"idx": 906, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton')\ndf2 = df1.orderby(by = [races.year, races.round]).limit(1)\nres = df2.select(races.year, races.name as race_name, results.points)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis').where(element = [drivers.surname], filter = 'Hamilton')\ndf2 = df1.orderby(by = [races.year, races.round]).limit(1)\nres = df2.select([races.year, races.name as race_name, results.points])\n```"}
{"idx": 907, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2017)\ndf2 = df1.orderby(by = races.date)\nres = df2.select(races.name, circuits.country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2017)\ndf2 = df1.orderby(by = [MASK])\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 908, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(races.raceId).agg(sum(results.laps))\ndf2 = df1.orderby(by = sum(results.laps), desc).limit(1)\nres = df2.select(races.name, races.year, circuits.location, sum(results.laps))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum([MASK]))\ndf2 = df1.orderby(by = sum([MASK]), desc).limit(1)\nres = df2.select([MASK], [MASK], [MASK], sum([MASK]))\n```"}
{"idx": 909, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'European Grand Prix')\ndf2 = df1.where(element = circuits.country, filter = 'Germany')\nres = df.select((df2.count() / df1.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.name], filter = 'European Grand Prix')\ndf2 = df1.where(element = [circuits.country], filter = 'Germany')\nres = df2.select((df2.count() / df1.count()) * 100)\n```"}
{"idx": 910, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Silverstone Circuit')\nres = df1.select(circuits.lat, circuits.lng)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Silverstone Circuit')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 911, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.circuitRef, filter = 'IN', values = ['silverstone', 'hockenheimring', 'hungaroring'])\ndf2 = df1.orderby(by = circuits.lat, desc).limit(1)\nres = df2.select(circuits.circuitRef, circuits.lat)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = circuits.circuitRef, filter = 'IN', values = ['silverstone', 'hockenheimring', 'hungaroring'])\ndf2 = df1.orderby(by = circuits.[MASK], desc).limit(1)\nres = df2.select(circuits.circuitRef, circuits.[MASK])\n```"}
{"idx": 912, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Marina Bay Street Circuit')\nres = df1.select(circuits.circuitRef)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marina Bay Street Circuit')\nres = df1.select([MASK])\n```"}
{"idx": 913, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = circuits.alt, desc).limit(1)\nres = df1.select(circuits.country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 914, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(drivers.code, filter = 'is NULL')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(drivers.[MASK], filter = 'is NULL')\nres = df1.count()\n```"}
{"idx": 915, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.dob, filter = min(drivers.dob))\nres = df1.select(drivers.country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 916, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'Italian')\nres = df1.select(drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italian')\nres = df1.select([MASK])\n```"}
{"idx": 917, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Anthony')\ndf2 = df1.where(element = drivers.surname, filter = 'Davidson')\nres = df2.select(drivers.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Anthony')\ndf2 = df1.where(element = [MASK], filter = 'Davidson')\nres = df2.select([MASK])\n```"}
{"idx": 918, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\nres = df2.select(drivers.driverRef)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lewis')\ndf2 = df1.where(element = [MASK], filter = 'Hamilton')\nres = df2.select([MASK])\n```"}
{"idx": 919, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2009)\ndf2 = df1.where(element = races.name, filter = 'Spanish Grand Prix')\nres = df2.select(circuits.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2009)\ndf2 = df1.where(element = [races.name], filter = 'Spanish Grand Prix')\nres = df2.select([circuits.name])\n```"}
{"idx": 920, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Silverstone Circuit')\nres = df1.select(races.year).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Silverstone Circuit')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 921, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Silverstone')\nres = df1.select(races.raceId, races.year, races.round, races.name as raceName, races.date, races.time, races.url as raceUrl, circuits.circuitId, circuits.circuitRef, circuits.name as circuitName, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url as circuitUrl)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [circuits.name], filter = 'Silverstone')\nres = df1.select([races.raceId, races.year, races.round, races.name as raceName, races.date, races.time, races.url as raceUrl, circuits.circuitId, circuits.circuitRef, circuits.name as circuitName, circuits.location, circuits.country, circuits.lat, circuits.lng, circuits.alt, circuits.url as circuitUrl])\n```"}
{"idx": 922, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2010)\ndf2 = df1.where(element = circuits.name, filter = 'Abu Dhabi Circuit')\nres = df2.select(races.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2010)\ndf2 = df1.where(element = [MASK], filter = 'Abu Dhabi Circuit')\nres = df2.select([MASK])\n```"}
{"idx": 923, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'Italy')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italy')\nres = df1.count()\n```"}
{"idx": 924, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Barcelona-Catalunya')\nres = df1.select(races.date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Barcelona-Catalunya')\nres = df1.select([MASK])\n```"}
{"idx": 925, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2009)\ndf2 = df1.where(element = races.name, filter = 'Spanish Grand Prix')\nres = df2.select(circuits.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2009)\ndf2 = df1.where(element = [races.name], filter = 'Spanish Grand Prix')\nres = df2.select([circuits.url])\n```"}
{"idx": 926, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\nres = df2.select(min(results.fastestLapTime)).as('fastest_lap_time')\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lewis')\ndf2 = df1.where(element = [MASK], filter = 'Hamilton')\nres = df2.select(min([MASK])).as('fastest_lap_time')\n```"}
{"idx": 927, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.fastestLapSpeed, filter = max(results.fastestLapSpeed))\nres = df1.select(drivers.forename, drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [results.fastestLapSpeed], filter = max([results.fastestLapSpeed]))\nres = df1.select([drivers.forename, drivers.surname])\n```"}
{"idx": 928, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2007)\ndf2 = df1.where(element = races.name, filter = 'Canadian Grand Prix')\ndf3 = df2.where(element = results.positionOrder, filter = 1)\nres = df3.select(drivers.driverRef)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2007)\ndf2 = df1.where(element = [races.name], filter = 'Canadian Grand Prix')\ndf3 = df2.where(element = [results.positionOrder], filter = 1)\nres = df3.select([drivers.driverRef])\n```"}
{"idx": 929, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\nres = df2.select(races.name, races.year, races.round, races.date, races.time, races.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lewis')\ndf2 = df1.where(element = [MASK], filter = 'Hamilton')\nres = df2.select([MASK], [MASK], [MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 930, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton')\ndf2 = df1.orderby(by = results.rank, asc).limit(1)\nres = df2.select(races.name, races.year, races.round, races.date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis').where(element = [drivers.surname], filter = 'Hamilton')\ndf2 = df1.orderby(by = [results.rank], asc).limit(1)\nres = df2.select([races.name], [races.year], [races.round], [races.date])\n```"}
{"idx": 931, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2009).where(element = races.name, filter = 'Spanish Grand Prix')\ntmp_res1 = df1.select(races.raceId)\ndf2 = df.where(element = results.raceId, filter = tmp_res1)\nres = df2.select(max(results.fastestLapSpeed))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2009).where(element = [races.name], filter = 'Spanish Grand Prix')\ntmp_res1 = df1.select([races.raceId])\ndf2 = df.where(element = [results.raceId], filter = tmp_res1)\nres = df2.select(max([results.fastestLapSpeed]))\n```"}
{"idx": 932, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\nres = df2.select(races.year).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lewis')\ndf2 = df1.where(element = [MASK], filter = 'Hamilton')\nres = df2.select([MASK]).distinct()\n```"}
{"idx": 933, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\ndf3 = df2.where(element = races.year, filter = 2008)\ndf4 = df3.where(element = races.name, filter = 'Chinese Grand Prix')\nres = df4.select(results.positionOrder)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lewis')\ndf2 = df1.where(element = [MASK], filter = 'Hamilton')\ndf3 = df2.where(element = [MASK], filter = 2008)\ndf4 = df3.where(element = [MASK], filter = 'Chinese Grand Prix')\nres = df4.select([MASK])\n```"}
{"idx": 934, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 1989)\ndf2 = df1.where(element = races.name, filter = 'Australian Grand Prix')\ndf3 = df2.where(element = results.grid, filter = 4)\nres = df3.select(drivers.forename, drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 1989)\ndf2 = df1.where(element = [races.name], filter = 'Australian Grand Prix')\ndf3 = df2.where(element = [results.grid], filter = 4)\nres = df3.select([drivers.[forename], drivers.[surname])\n```"}
{"idx": 935, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008).where(element = races.name, filter = 'Australian Grand Prix')\ntmp_res1 = df1.select(races.raceId)\n\ndf2 = df.where(element = results.raceId, filter = tmp_res1).where(element = results.time, filter = 'is not null')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2008).where(element = [races.name], filter = 'Australian Grand Prix')\ntmp_res1 = df1.select([races.raceId])\n\ndf2 = df.where(element = [results.raceId], filter = tmp_res1).where(element = [results.time], filter = 'is not null')\nres = df2.count()\n```"}
{"idx": 936, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008)\ndf2 = df1.where(element = races.name, filter = 'Australian Grand Prix')\ndf3 = df2.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton')\ndf4 = df3.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df4.select(lapTimes.lap, lapTimes.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2008)\ndf2 = df1.where(element = [MASK], filter = 'Australian Grand Prix')\ndf3 = df2.where(element = [MASK], filter = 'Lewis').where(element = [MASK], filter = 'Hamilton')\ndf4 = df3.orderby(by = [MASK], asc).limit(1)\nres = df4.select([MASK], [MASK])\n```"}
{"idx": 937, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008)\ndf2 = df1.where(element = races.name, filter = 'Chinese Grand Prix')\ndf3 = df2.where(element = results.rank, filter = 2)\nres = df3.select(results.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2008)\ndf2 = df1.where(element = [MASK], filter = 'Chinese Grand Prix')\ndf3 = df2.where(element = [MASK], filter = 2)\nres = df3.select([MASK])\n```"}
{"idx": 938, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008)\ndf2 = df1.where(element = races.name, filter = 'Australian Grand Prix')\ndf3 = df2.where(element = results.positionOrder, filter = 1)\nres = df3.select(drivers.forename, drivers.surname, drivers.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2008)\ndf2 = df1.where(element = [MASK], filter = 'Australian Grand Prix')\ndf3 = df2.where(element = [MASK], filter = 1)\nres = df3.select([MASK], [MASK], [MASK])\n```"}
{"idx": 939, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008)\ndf2 = df1.where(element = races.name, filter = 'Australian Grand Prix')\ndf3 = df2.where(element = drivers.nationality, filter = 'British')\nres = df3.select(distinct(drivers.driverId)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2008)\ndf2 = df1.where(element = [races.name], filter = 'Australian Grand Prix')\ndf3 = df2.where(element = [drivers.nationality], filter = 'British')\nres = df3.select(distinct([drivers.driverId])).count()\n```"}
{"idx": 940, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008)\ndf2 = df1.where(element = races.name, filter = 'Chinese Grand Prix')\ndf3 = df2.where(element = results.time, filter = 'is not null')\ndf4 = df3.groupby(results.driverId).having(element = count(results.raceId), filter = '> 0')\nres = df4.select(count(distinct(results.driverId)))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2008)\ndf2 = df1.where(element = [races.name], filter = 'Chinese Grand Prix')\ndf3 = df2.where(element = [results.time], filter = 'is not null')\ndf4 = df3.groupby([results.driverId]).having(element = [count(results.raceId)], filter = '> 0')\nres = df4.select([count(distinct(results.driverId))])\n```"}
{"idx": 941, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton')\ntmp_res1 = df1.select(drivers.driverId)\ndf2 = df.where(element = results.driverId, filter = 'in', value = tmp_res1)\nres = df2.select(sum(results.points))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis').where(element = [drivers.surname], filter = 'Hamilton')\ntmp_res1 = df1.select([drivers.driverId])\ndf2 = df.where(element = [results.driverId], filter = 'in', value = tmp_res1)\nres = df2.select(sum([results.points]))\n```"}
{"idx": 942, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton').where(element = results.fastestLapTime, filter = 'is not null')\ndf2 = df1.select(convert(results.fastestLapTime, format = 'mm:ss', to = 'seconds'))\nres = df2.avg(df2.fastestLapInSeconds)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis').where(element = [drivers.surname], filter = 'Hamilton').where(element = [results.fastestLapTime], filter = 'is not null')\ndf2 = df1.select(convert([results.fastestLapTime], format = 'mm:ss', to = 'seconds'))\nres = df2.avg([df2.fastestLapInSeconds])\n```"}
{"idx": 943, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008).where(element = races.name, filter = 'Australian Grand Prix')\ntmp_res1 = df.where(element = results.raceId, filter = df1.select(races.raceId)).where(element = results.time, filter = 'is not null')\ntmp_res2 = df.where(element = results.raceId, filter = df1.select(races.raceId))\nres = df.select(cast(tmp_res1.count(), real) / tmp_res2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2008).where(element = [races.name], filter = 'Australian Grand Prix')\ntmp_res1 = df.where(element = [results.raceId], filter = df1.select([races.raceId])).where(element = [results.time], filter = 'is not null')\ntmp_res2 = df.where(element = [results.raceId], filter = df1.select([races.raceId]))\nres = df.select(cast(tmp_res1.count(), real) / tmp_res2.count())\n```"}
{"idx": 944, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008).where(element = races.name, filter = 'Australian Grand Prix')\ntmp_res1 = df.where(element = results.raceId, filter = df1.select(races.raceId)).where(element = results.positionOrder, filter = 1).select(results.milliseconds).as('champion_time')\n\ntmp_res2 = df.where(element = results.raceId, filter = df1.select(races.raceId)).where(element = results.milliseconds, filter = 'is not null').orderby(by = results.positionOrder, desc).limit(1).select(results.milliseconds).as('last_driver_time')\n\nres = df.select((tmp_res2 - tmp_res1) * 100.0 / tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2008).where(element = [races.name], filter = 'Australian Grand Prix')\ntmp_res1 = df.where(element = [results.raceId], filter = df1.select([races.raceId])).where(element = [results.positionOrder], filter = 1).select([results.milliseconds]).as('champion_time')\n\ntmp_res2 = df.where(element = [results.raceId], filter = df1.select([races.raceId])).where(element = [results.milliseconds], filter = 'is not null').orderby(by = [results.positionOrder], desc).limit(1).select([results.milliseconds]).as('last_driver_time')\n\nres = df.select((tmp_res2 - tmp_res1) * 100.0 / tmp_res2)\n```"}
{"idx": 945, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.location, filter = 'Adelaide')\ndf2 = df1.where(element = circuits.country, filter = 'Australia')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Adelaide')\ndf2 = df1.where(element = [MASK], filter = 'Australia')\nres = df2.count()\n```"}
{"idx": 946, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'USA')\nres = df1.select(circuits.lat, circuits.lng)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'USA')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 947, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'British')\ndf2 = df1.where(element = drivers.dob, filter = '> 1980-12-31')\nres = df2.count(drivers.driverId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'British')\ndf2 = df1.where(element = [MASK], filter = '> 1980-12-31')\nres = df2.count([MASK])\n```"}
{"idx": 948, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructors.nationality, filter = 'British')\nres = df1.select(max(constructorResults.points))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'British')\nres = df1.select(max([MASK]))\n```"}
{"idx": 949, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(constructors.constructorId).agg(sum(constructorResults.points))\ndf2 = df1.orderby(by = sum(constructorResults.points), desc).limit(1)\nres = df2.select(constructors.name, sum(constructorResults.points) as total_points)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum([MASK]))\ndf2 = df1.orderby(by = sum([MASK]), desc).limit(1)\nres = df2.select([MASK], sum([MASK]) as [MASK])\n```"}
{"idx": 950, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructorResults.raceId, filter = 291)\ndf2 = df1.where(element = constructorResults.points, filter = 0)\nres = df2.select(constructors.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 291)\ndf2 = df1.where(element = [MASK], filter = 0)\nres = df2.select([MASK])\n```"}
{"idx": 951, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructors.nationality, filter = 'Japanese')\ndf2 = df1.where(element = constructorResults.points, filter = '0')\ndf3 = df2.groupby(constructorResults.constructorId).having(element = count(constructorResults.raceId), filter = '= 2')\nres = df3.count(distinct = constructors.constructorId)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Japanese')\ndf2 = df1.where(element = [MASK], filter = '0')\ndf3 = df2.groupby([MASK]).having(element = count([MASK]), filter = '= 2')\nres = df3.count(distinct = [MASK])\n```"}
{"idx": 952, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructorStandings.position, filter = 1)\nres = df1.select(constructors.name).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 953, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructors.nationality, filter = 'French')\ndf2 = df1.where(element = lapTimes.lap, filter = '> 50')\nres = df2.select(constructors.constructorId).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'French')\ndf2 = df1.where(element = [MASK], filter = '> 50')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 954, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'Japanese')\ndf2 = df1.where(element = races.year, filter = 'BETWEEN 2007 AND 2009')\ndf3 = df2.where(element = results.time, filter = 'is not null')\ndf4 = df3.groupby(results.driverId).count()\ndf5 = df3.groupby(results.driverId).count(results.resultId)\nres = df.select((df5 / df4) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Japanese')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN 2007 AND 2009')\ndf3 = df2.where(element = [MASK], filter = 'is not null')\ndf4 = df3.groupby([MASK]).count()\ndf5 = df3.groupby([MASK]).count([MASK])\nres = df.select((df5 / df4) * 100)\n```"}
{"idx": 955, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = '< 1975')\ndf2 = df1.where(element = results.position, filter = 1).where(element = results.time, filter = 'is not null')\nres = df2.select(races.year, avg(cast(substr(results.time, 1, 2) as int) * 3600 + cast(substr(results.time, 4, 2) as int) * 60 + cast(substr(results.time, 7) as int) + cast(substr(results.time, 10) as real) / 1000.0).groupby(races.year)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 1975')\ndf2 = df1.where(element = [MASK], filter = 1).where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK], avg(cast(substr([MASK], 1, 2) as int) * 3600 + cast(substr([MASK], 4, 2) as int) * 60 + cast(substr([MASK], 7) as int) + cast(substr([MASK], 10) as real) / 1000.0).groupby([MASK])\n```"}
{"idx": 956, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.dob, filter = '> 1975-12-31')\ndf2 = df1.where(element = results.rank, filter = 2)\nres = df2.select(drivers.forename, drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.dob], filter = '> 1975-12-31')\ndf2 = df1.where(element = [results.rank], filter = 2)\nres = df2.select([drivers.forename, drivers.surname])\n```"}
{"idx": 957, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'Italian')\ndf2 = df1.where(element = results.time, filter = 'is NULL')\nres = df2.count(distinct = drivers.driverId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italian')\ndf2 = df1.where(element = [MASK], filter = 'is NULL')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 958, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.fastestLapTime, filter = 'is not null')\nmin_time = df1.aggregate(function = 'min', element = results.fastestLapTime)\ndf2 = df1.where(element = results.fastestLapTime, filter = min_time)\nres = df2.select(drivers.forename, drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\nmin_time = df1.aggregate(function = 'min', element = [MASK])\ndf2 = df1.where(element = [MASK], filter = [MASK])\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 959, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2009)\ndf2 = df1.orderby(by = driverStandings.points, desc).orderby(by = driverStandings.wins, desc).limit(1)\nchampion_driver_id = df2.select(driverStandings.driverId)\ndf3 = df.where(element = lapTimes.driverId, filter = champion_driver_id).where(element = races.year, filter = 2009)\ndf4 = df3.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df4.select(lapTimes.lap)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2009)\ndf2 = df1.orderby(by = [MASK], desc).orderby(by = [MASK], desc).limit(1)\nchampion_driver_id = df2.select([MASK])\ndf3 = df.where(element = [MASK], filter = champion_driver_id).where(element = [MASK], filter = 2009)\ndf4 = df3.orderby(by = [MASK], asc).limit(1)\nres = df4.select([MASK])\n```"}
{"idx": 960, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2009).where(element = races.name, filter = 'Spanish Grand Prix')\ntmp_res1 = df1.select(races.raceId)\ndf2 = df.where(element = results.raceId, filter = tmp_res1)\nres = df2.select(avg(cast(results.fastestLapSpeed, real)))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2009).where(element = [races.name], filter = 'Spanish Grand Prix')\ntmp_res1 = df1.select([races.raceId])\ndf2 = df.where(element = [results.raceId], filter = tmp_res1)\nres = df2.select(avg(cast([results.fastestLapSpeed], real)))\n```"}
{"idx": 961, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.milliseconds, filter = 'is not null')\ndf2 = df1.aggregate(function = 'min', element = results.milliseconds)\ndf3 = df.where(element = results.milliseconds, filter = df2)\nres = df3.select(races.name, races.year).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.aggregate(function = 'min', element = [MASK])\ndf3 = df.where(element = [MASK], filter = df2)\nres = df3.select([MASK], [MASK]).limit(1)\n```"}
{"idx": 962, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.dob, filter = '< 1985').where(element = races.year, filter = 'BETWEEN 2000 AND 2005').where(element = results.laps, filter = '> 50')\ndf2 = df.where(element = races.year, filter = 'BETWEEN 2000 AND 2005')\nres = df.select((df1.count() * 1.0 / df2.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.dob], filter = '< 1985').where(element = [races.year], filter = 'BETWEEN 2000 AND 2005').where(element = [results.laps], filter = '> 50')\ndf2 = df.where(element = [races.year], filter = 'BETWEEN 2000 AND 2005')\nres = df.select((df1.count() * 1.0 / df2.count()) * 100)\n```"}
{"idx": 963, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'French')\ndf2 = df1.where(element = lapTimes.milliseconds, filter = '< 120000')\nres = df2.select(distinct(lapTimes.driverId)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'French')\ndf2 = df1.where(element = [MASK], filter = '< 120000')\nres = df2.select(distinct([MASK])).count()\n```"}
{"idx": 964, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'America')\nres = df1.select(drivers.code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'America')\nres = df1.select([MASK])\n```"}
{"idx": 965, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(races.year, filter = 2009)\nres = df1.select(races.raceId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(races.[MASK], filter = 2009)\nres = df1.select(races.[MASK])\n```"}
{"idx": 966, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.raceId, filter = 18)\nres = df1.select_distinct(results.driverId).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 18)\nres = df1.select_distinct([MASK]).count()\n```"}
{"idx": 967, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = drivers.dob, desc).limit(3)\nres = df1.select(drivers.driverId, drivers.nationality)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(3)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 968, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Robert')\ndf2 = df1.where(element = drivers.surname, filter = 'Kubica')\nres = df2.select(drivers.driverRef)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Robert')\ndf2 = df1.where(element = [MASK], filter = 'Kubica')\nres = df2.select([MASK])\n```"}
{"idx": 969, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'British')\ndf2 = df1.where(element = drivers.dob, filter = \"like '1980%'\")\nres = df2.count(drivers.driverId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'British')\ndf2 = df1.where(element = [MASK], filter = \"like '1980%'\")\nres = df2.count([MASK])\n```"}
{"idx": 970, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'German')\ndf2 = df1.where(element = drivers.dob, filter = 'between 1980-01-01 and 1990-12-31')\ndf3 = df2.groupby(drivers.driverId).agg(min(lapTimes.time))\nres = df3.orderby(by = min(lapTimes.time)).limit(3).select(drivers.driverId, drivers.forename, drivers.surname, min(lapTimes.time))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'German')\ndf2 = df1.where(element = [MASK], filter = 'between 1980-01-01 and 1990-12-31')\ndf3 = df2.groupby([MASK]).agg(min([MASK]))\nres = df3.orderby(by = min([MASK])).limit(3).select([MASK], [MASK], [MASK], min([MASK]))\n```"}
{"idx": 971, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'German')\ndf2 = df1.orderby(by = drivers.dob, asc).limit(1)\nres = df2.select(drivers.driverRef)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'German')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 972, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.dob, filter = \"like '1971%'\")\ndf2 = df1.where(element = results.fastestLapTime, filter = 'is not null')\nres = df2.select(drivers.driverId, drivers.code)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [drivers.dob], filter = \"like '1971%'\")\ndf2 = df1.where(element = [results.fastestLapTime], filter = 'is not null')\nres = df2.select([drivers.driverId, drivers.code])\n```"}
{"idx": 973, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'Spanish')\ndf2 = df1.where(element = drivers.dob, filter = '< 1982-01-01')\ndf3 = df2.orderby(by = lapTimes.time, desc).limit(10)\nres = df3.select(drivers.driverId, drivers.forename, drivers.surname, lapTimes.time)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Spanish')\ndf2 = df1.where(element = [MASK], filter = '< 1982-01-01')\ndf3 = df2.orderby(by = [MASK], desc).limit(10)\nres = df3.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 974, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.fastestLapTime, filter = 'is not null')\nmin_time = df1.aggregate(function = 'min', element = results.fastestLapTime)\ndf2 = df1.where(element = results.fastestLapTime, filter = min_time)\nres = df2.select(races.year)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'is not null')\nmin_time = df1.aggregate(function = 'min', element = [MASK])\ndf2 = df1.where(element = [MASK], filter = [MASK])\nres = df2.select([MASK])\n```"}
{"idx": 975, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = lapTimes.milliseconds, filter = max(lapTimes.milliseconds))\nres = df1.select(races.year).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK]).limit(1)\n```"}
{"idx": 976, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = lapTimes.lap, filter = 1)\ndf2 = df1.orderby(by = lapTimes.milliseconds, asc).limit(5)\nres = df2.select(lapTimes.driverId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.orderby(by = [MASK], asc).limit(5)\nres = df2.select([MASK])\n```"}
{"idx": 977, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.raceId, filter = '> 50')\ndf2 = df1.where(element = results.raceId, filter = '< 100')\ndf3 = df2.where(element = results.time, filter = 'is not null')\ndf4 = df3.where(element = results.statusId, filter = 2)\nres = df4.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 50')\ndf2 = df1.where(element = [MASK], filter = '< 100')\ndf3 = df2.where(element = [MASK], filter = 'is not null')\ndf4 = df3.where(element = [MASK], filter = 2)\nres = df4.count()\n```"}
{"idx": 978, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'Austria')\nres = df1.groupby(circuits.location, circuits.lat, circuits.lng).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Austria')\nres = df1.groupby([MASK], [MASK], [MASK]).count()\n```"}
{"idx": 979, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.time, filter = 'is not null')\ndf2 = df1.groupby(results.raceId).orderby(by = count(), desc).limit(1)\nres = df2.select(results.raceId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'is not null')\ndf2 = df1.groupby([MASK]).orderby(by = count(), desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 980, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = qualifying.raceId, filter = 23)\ndf2 = df1.where(element = qualifying.q2, filter = 'is not null')\nres = df2.select(drivers.driverRef, drivers.nationality, drivers.dob)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 23)\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 981, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.dob, filter = max(drivers.dob))\ndf2 = df.where(element = races.raceId, filter = qualifying.raceId, where_element = df1.select(qualifying.raceId))\nres = df2.orderby(by = races.date, asc).limit(1).select(races.year, races.name, races.date, races.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\ndf2 = df.where(element = [MASK], filter = [MASK], where_element = df1.select([MASK]))\nres = df2.orderby(by = [MASK], asc).limit(1).select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 982, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'American')\ndf2 = df1.where(element = status.status, filter = 'Puncture')\nres = df2.select(distinct(drivers.driverId)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'American')\ndf2 = df1.where(element = [MASK], filter = 'Puncture')\nres = df2.select(distinct([MASK])).count()\n```"}
{"idx": 983, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = constructors.nationality, filter = 'Italian')\ndf2 = df1.groupby(constructors.constructorId).agg(sum(constructorResults.points))\ndf3 = df2.orderby(by = sum(constructorResults.points), desc).limit(1)\nres = df3.select(constructors.name, constructors.url, sum(constructorResults.points) as total_points)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [constructors.nationality], filter = 'Italian')\ndf2 = df1.groupby([constructors.constructorId]).agg(sum([constructorResults.points]))\ndf3 = df2.orderby(by = sum([constructorResults.points]), desc).limit(1)\nres = df3.select([constructors.name], [constructors.url], sum([constructorResults.points]) as total_points)\n```"}
{"idx": 984, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(constructorStandings.constructorId).agg(sum(constructorStandings.wins) as total_wins)\ndf2 = df1.orderby(by = total_wins, desc).limit(1)\nres = df2.select(constructors.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum([MASK]) as [MASK])\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 985, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'French Grand Prix')\ndf2 = df1.where(element = lapTimes.lap, filter = 3)\ndf3 = df2.orderby(by = lapTimes.milliseconds, desc).limit(1)\nres = df3.select(drivers.forename, drivers.surname, lapTimes.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'French Grand Prix')\ndf2 = df1.where(element = [MASK], filter = 3)\ndf3 = df2.orderby(by = [MASK], desc).limit(1)\nres = df3.select([MASK], [MASK], [MASK])\n```"}
{"idx": 986, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = lapTimes.lap, filter = 1)\ndf2 = df1.groupby(lapTimes.raceId).agg(min(lapTimes.milliseconds))\nres = df2.orderby(by = min(lapTimes.milliseconds)).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.groupby([MASK]).agg(min([MASK]))\nres = df2.orderby(by = min([MASK])).limit(1)\n```"}
{"idx": 987, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2006).where(element = races.name, filter = 'United States Grand Prix')\ndf2 = df.where(element = results.raceId, filter = df1.select(races.raceId)).where(element = results.positionOrder, filter = '<= 10').where(element = results.fastestLapTime, filter = 'is not null')\nres = df2.select(avg(cast(results.fastestLapTime, real)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2006).where(element = [races.name], filter = 'United States Grand Prix')\ndf2 = df.where(element = [results.raceId], filter = df1.select([races.raceId])).where(element = [results.positionOrder], filter = '<= 10').where(element = [results.fastestLapTime], filter = 'is not null')\nres = df2.select(avg(cast([results.fastestLapTime], real)))\n```"}
{"idx": 988, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'German')\ndf2 = df1.where(element = drivers.dob, filter = 'between 1980-01-01 and 1985-12-31')\ndf3 = df2.groupby(drivers.driverId).agg(avg(pitStops.duration))\ndf4 = df3.orderby(by = avg(pitStops.duration), asc).limit(3)\nres = df4.select(drivers.forename, drivers.surname, avg(pitStops.duration))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'German')\ndf2 = df1.where(element = [MASK], filter = 'between 1980-01-01 and 1985-12-31')\ndf3 = df2.groupby([MASK]).agg(avg([MASK]))\ndf4 = df3.orderby(by = avg([MASK]), asc).limit(3)\nres = df4.select([MASK], [MASK], avg([MASK]))\n```"}
{"idx": 989, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2008)\ndf2 = df1.where(element = races.name, filter = 'Canadian Grand Prix')\ndf3 = df2.where(element = results.position, filter = 1)\nres = df3.select(drivers.forename || ' ' || drivers.surname as champion, results.time as finish_time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2008)\ndf2 = df1.where(element = [races.name], filter = 'Canadian Grand Prix')\ndf3 = df2.where(element = [results.position], filter = 1)\nres = df3.select([drivers.forename || ' ' || drivers.surname as [champion], results.time as [finish_time]])\n```"}
{"idx": 990, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2009)\ndf2 = df1.where(element = races.name, filter = 'Singapore Grand Prix')\ndf3 = df2.where(element = results.position, filter = 1)\nres = df3.select(constructors.constructorRef, constructors.url)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2009)\ndf2 = df1.where(element = [races.name], filter = 'Singapore Grand Prix')\ndf3 = df2.where(element = [results.position], filter = 1)\nres = df3.select([constructors.constructorRef, constructors.url])\n```"}
{"idx": 991, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'Austrian')\ndf2 = df1.where(element = drivers.dob, filter = \"between '1981' and '1991'\")\nres = df2.select((drivers.forename || ' ' || drivers.surname) as full_name, drivers.dob)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [drivers.nationality], filter = 'Austrian')\ndf2 = df1.where(element = [drivers.dob], filter = \"between '1981' and '1991'\")\nres = df2.select((drivers.forename || ' ' || drivers.surname) as [full_name], [drivers.dob])\n```"}
{"idx": 992, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.nationality, filter = 'German')\ndf2 = df1.where(element = drivers.dob, filter = \"between '1971' and '1985'\")\ndf3 = df2.orderby(by = drivers.dob, desc)\nres = df3.select((drivers.forename || ' ' || drivers.surname).as('full_name'), drivers.url, drivers.dob)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'German')\ndf2 = df1.where(element = [MASK], filter = \"between '1971' and '1985'\")\ndf3 = df2.orderby(by = [MASK], desc)\nres = df3.select((drivers.forename || ' ' || drivers.surname).as('full_name'), drivers.url, drivers.dob)\n```"}
{"idx": 993, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Hungaroring')\nres = df1.select(circuits.location, circuits.country, circuits.lat, circuits.lng)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hungaroring')\nres = df1.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 994, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'Monaco Grand Prix')\ndf2 = df1.where(element = races.year, filter = 'between 1980 and 2010')\ndf3 = df2.groupby(constructorResults.constructorId).agg(sum(constructorResults.points) as total_points)\ndf4 = df3.orderby(by = total_points, desc).limit(1)\nres = df4.select(constructors.name, constructors.nationality, total_points)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.name], filter = 'Monaco Grand Prix')\ndf2 = df1.where(element = [races.year], filter = 'between 1980 and 2010')\ndf3 = df2.groupby([constructorResults.constructorId]).agg(sum([constructorResults.points]) as [total_points])\ndf4 = df3.orderby(by = [total_points], desc).limit(1)\nres = df4.select([constructors.name, constructors.nationality, total_points])\n```"}
{"idx": 995, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\ndf3 = df2.where(element = circuits.name, filter = 'Turkish Grand Prix')\nres = df3.select(avg(results.points))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lewis')\ndf2 = df1.where(element = [MASK], filter = 'Hamilton')\ndf3 = df2.where(element = [MASK], filter = 'Turkish Grand Prix')\nres = df3.select(avg([MASK]))\n```"}
{"idx": 996, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 'BETWEEN 2000 AND 2009')\nres = df1.groupby(races.year).agg(avg(races.race_count))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'BETWEEN 2000 AND 2009')\nres = df1.groupby([MASK]).agg(avg([MASK]))\n```"}
{"idx": 997, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(drivers.nationality).orderby(by = count(*), desc).limit(1)\nres = df1.select(drivers.nationality)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).orderby(by = count(*), desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 998, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = driverStandings.points, desc).limit(91)\ntmp_res1 = df1.select(driverStandings.driverId)\ndf2 = df.where(element = driverStandings.driverId, filter = tmp_res1)\nres = df2.select(driverStandings.wins)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(91)\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = tmp_res1)\nres = df2.select([MASK])\n```"}
{"idx": 999, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = results.fastestLapTime, filter = 'is not null')\nmin_time = df1.aggregate(function = 'min', element = results.fastestLapTime)\ndf2 = df1.where(element = results.fastestLapTime, filter = min_time)\nres = df2.select(races.name)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'is not null')\nmin_time = df1.aggregate(function = 'min', element = [MASK])\ndf2 = df1.where(element = [MASK], filter = [MASK])\nres = df2.select([MASK])\n```"}
{"idx": 1000, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.date, filter = max(races.date))\nres = df1.select(circuits.location || ', ' || circuits.country as full_location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK] || ', ' || [MASK] as [MASK])\n```"}
{"idx": 1001, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Marina Bay Street Circuit')\ndf2 = df1.where(element = races.year, filter = 2008)\ndf3 = df2.where(element = races.round, filter = 3)\ndf4 = df3.where(element = qualifying.position, filter = 1)\nres = df4.select(drivers.forename || ' ' || drivers.surname)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marina Bay Street Circuit')\ndf2 = df1.where(element = [MASK], filter = 2008)\ndf3 = df2.where(element = [MASK], filter = 3)\ndf4 = df3.where(element = [MASK], filter = 1)\nres = df4.select([MASK])\n```"}
{"idx": 1002, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.dob, filter = max(drivers.dob))\ndf2 = df.where(element = results.driverId, filter = df1.driverId).orderby(by = results.raceId, asc).limit(1)\nres = df2.select(drivers.forename, drivers.surname, drivers.nationality, races.name)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [drivers.dob], filter = max([drivers.dob]))\ndf2 = df.where(element = [results.driverId], filter = df1.[drivers.driverId]).orderby(by = [results.raceId], asc).limit(1)\nres = df2.select([drivers.forename, drivers.surname, drivers.nationality, races.name])\n```"}
{"idx": 1003, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.name, filter = 'Canadian Grand Prix')\ntmp_res1 = df1.select(races.raceId)\ndf2 = df.where(element = results.raceId, filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = results.statusId, filter = 3)\ndf4 = df3.groupby(results.driverId).agg(count())\nres = df4.orderby(by = count(), desc).limit(1).select(results.driverId, count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Canadian Grand Prix')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = [MASK], filter = 3)\ndf4 = df3.groupby([MASK]).agg(count())\nres = df4.orderby(by = count(), desc).limit(1).select([MASK], count())\n```"}
{"idx": 1004, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.dob, filter = min(drivers.dob))\nres = df1.select(drivers.forename, drivers.surname, sum(driverStandings.wins))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK], [MASK], sum([MASK]))\n```"}
{"idx": 1005, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\nres = df.select(max(pitStops.duration) as longest_pit_stop)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\nres = df.select(max([MASK]) as longest_pit_stop)\n```"}
{"idx": 1006, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\nres = df.select(min(lapTimes.milliseconds))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\nres = df.select(min([MASK]))\n```"}
{"idx": 1007, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis')\ndf2 = df1.where(element = drivers.surname, filter = 'Hamilton')\nres = df2.select(max(pitStops.duration))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lewis')\ndf2 = df1.where(element = [MASK], filter = 'Hamilton')\nres = df2.select(max([MASK]))\n```"}
{"idx": 1008, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2011)\ndf2 = df1.where(element = races.name, filter = 'Australian Grand Prix')\ndf3 = df2.where(element = drivers.forename, filter = 'Lewis')\ndf4 = df3.where(element = drivers.surname, filter = 'Hamilton')\nres = df4.select(pitStops.lap)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [races.year], filter = 2011)\ndf2 = df1.where(element = [races.name], filter = 'Australian Grand Prix')\ndf3 = df2.where(element = [drivers.forename], filter = 'Lewis')\ndf4 = df3.where(element = [drivers.surname], filter = 'Hamilton')\nres = df4.select([pitStops.lap])\n```"}
{"idx": 1009, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = races.year, filter = 2011).where(element = races.name, filter = 'Australian Grand Prix')\ndf2 = df1.orderby(by = drivers.surname).orderby(by = pitStops.stop)\nres = df2.select(drivers.forename || ' ' || drivers.surname as driverName, pitStops.stop, pitStops.time as pitStopTime, pitStops.duration)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [races.year], filter = 2011).where(element = [races.name], filter = 'Australian Grand Prix')\ndf2 = df1.orderby(by = [drivers.surname]).orderby(by = [pitStops.stop])\nres = df2.select([drivers.forename || ' ' || drivers.surname as driverName, pitStops.stop, pitStops.time as pitStopTime, pitStops.duration])\n```"}
{"idx": 1010, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton')\ndf2 = df1.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df2.select(lapTimes.raceId, lapTimes.lap, lapTimes.time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis').where(element = [drivers.surname], filter = 'Hamilton')\ndf2 = df1.orderby(by = [lapTimes.milliseconds], asc).limit(1)\nres = df2.select([lapTimes.raceId, lapTimes.lap, lapTimes.time])\n```"}
{"idx": 1011, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = lapTimes.milliseconds, asc).limit(20)\nres = df1.select(drivers.forename || ' ' || drivers.surname as full_name, lapTimes.time as lap_time)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], asc).limit(20)\nres = df1.select([MASK] as full_name, [MASK] as lap_time)\n```"}
{"idx": 1012, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton')\ndf2 = df1.orderby(by = results.fastestLap).limit(1)\nres = df2.select(circuits.name, races.name, results.fastestLap, results.position)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis').where(element = [drivers.surname], filter = 'Hamilton')\ndf2 = df1.orderby(by = [results.fastestLap]).limit(1)\nres = df2.select([circuits.name, races.name, results.fastestLap, results.position])\n```"}
{"idx": 1013, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Austrian Grand Prix')\ndf2 = df1.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df2.select(lapTimes.time).as('lap_record')\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Austrian Grand Prix')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK]).as('lap_record')\n```"}
{"idx": 1014, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'Italy')\nres = df1.select(circuits.name as circuitName, min(lapTimes.time) as lapRecord).groupby(circuits.circuitId)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italy')\nres = df1.select([MASK] as circuitName, min([MASK]) as lapRecord).groupby([MASK])\n```"}
{"idx": 1015, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Austrian Grand Prix Circuit')\ndf2 = df1.orderby(by = lapTimes.milliseconds, asc).limit(1)\nres = df2.select(races.name, races.year, races.date, lapTimes.time as lap_record)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [circuits.name], filter = 'Austrian Grand Prix Circuit')\ndf2 = df1.orderby(by = [lapTimes.milliseconds], asc).limit(1)\nres = df2.select([races.name, races.year, races.date, lapTimes.time as lap_record])\n```"}
{"idx": 1016, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.name, filter = 'Austrian Grand Prix Circuit')\ndf2 = df1.groupby(lapTimes.driverId).agg(min(lapTimes.milliseconds).as('lapRecord'))\nres = df2.select(pitStops.duration).orderby(by = lapRecord.lapRecord).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [circuits.name], filter = 'Austrian Grand Prix Circuit')\ndf2 = df1.groupby([lapTimes.driverId]).agg(min([lapTimes.milliseconds]).as('lapRecord'))\nres = df2.select([pitStops.duration]).orderby(by = lapRecord.lapRecord).limit(1)\n```"}
{"idx": 1017, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = lapTimes.time, filter = '1:29.488')\nres = df1.select(circuits.lat, circuits.lng).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '1:29.488')\nres = df1.select([MASK], [MASK]).distinct()\n```"}
{"idx": 1018, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = drivers.forename, filter = 'Lewis').where(element = drivers.surname, filter = 'Hamilton')\nres = df1.select(avg(pitStops.milliseconds))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [drivers.forename], filter = 'Lewis').where(element = [drivers.surname], filter = 'Hamilton')\nres = df1.select(avg([pitStops.milliseconds]))\n```"}
{"idx": 1019, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = circuits.country, filter = 'Italy')\nres = df1.select(avg(lapTimes.milliseconds))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italy')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 1020, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.overall_rating, filter = max(Player_Attributes.overall_rating))\nres = df1.select(Player_Attributes.player_api_id).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK]).limit(1)\n```"}
{"idx": 1021, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Player.height, desc).limit(1)\nres = df1.select(Player.player_name, Player.height)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1022, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.potential, filter = min(Player_Attributes.potential))\nres = df1.select(Player_Attributes.preferred_foot)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1023, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.overall_rating, filter = '>= 60')\ndf2 = df1.where(element = Player_Attributes.overall_rating, filter = '<= 65')\ndf3 = df2.where(element = Player_Attributes.defensive_work_rate, filter = 'low')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '>= 60')\ndf2 = df1.where(element = [MASK], filter = '<= 65')\ndf3 = df2.where(element = [MASK], filter = 'low')\nres = df3.count()\n```"}
{"idx": 1024, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Player_Attributes.crossing, desc).limit(5)\nres = df1.select(Player_Attributes.player_api_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(5)\nres = df1.select([MASK])\n```"}
{"idx": 1025, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.season, filter = '2015/2016')\ndf2 = df1.groupby(Match.league_id).orderby(by = sum(Match.home_team_goal + Match.away_team_goal), desc).limit(1)\nres = df2.select(League.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2015/2016')\ndf2 = df1.groupby([MASK]).orderby(by = sum([MASK] + [MASK]), desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1026, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.season, filter = '2015/2016')\ndf2 = df1.where(element = Match.home_team_goal, filter = '< Match.away_team_goal')\ndf3 = df2.groupby(Match.home_team_api_id).count(Match.id)\nres = df3.orderby(by = losses, asc).limit(1).select(Team.team_long_name, losses)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2015/2016')\ndf2 = df1.where(element = [MASK], filter = '< [MASK]')\ndf3 = df2.groupby([MASK]).count([MASK])\nres = df3.orderby(by = [MASK], asc).limit(1).select([MASK], [MASK])\n```"}
{"idx": 1027, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Player_Attributes.penalties, desc).limit(10)\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(10)\nres = df1.select([MASK])\n```"}
{"idx": 1028, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Scotland Premier League')\ndf2 = df1.where(element = Match.season, filter = '2009/2010')\ndf3 = df2.where(element = Match.away_team_goal, filter = '> Match.home_team_goal')\ndf4 = df3.groupby(Match.away_team_api_id).orderby(by = count(), desc).limit(1)\nres = df4.select(Team.team_long_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Scotland Premier League')\ndf2 = df1.where(element = [MASK], filter = '2009/2010')\ndf3 = df2.where(element = [MASK], filter = '> [MASK].home_team_goal')\ndf4 = df3.groupby([MASK]).orderby(by = count(), desc).limit(1)\nres = df4.select([MASK])\n```"}
{"idx": 1029, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Team_Attributes.buildUpPlaySpeed, desc).limit(4)\nres = df1.select(Team_Attributes.team_api_id, Team_Attributes.buildUpPlaySpeed)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(4)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1030, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.season, filter = '2015/2016')\ndf2 = df1.where(element = Match.home_team_goal, filter = '=', other_element = Match.away_team_goal)\ndf3 = df2.groupby(Match.league_id).count()\ndf4 = df3.orderby(by = count, desc).limit(1)\nres = df4.select(League.name, count)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2015/2016')\ndf2 = df1.where(element = [MASK], filter = '=', other_element = [MASK])\ndf3 = df2.groupby([MASK]).count()\ndf4 = df3.orderby(by = count, desc).limit(1)\nres = df4.select([MASK], count)\n```"}
{"idx": 1031, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.sprint_speed, filter = '>= 97')\ndf2 = df1.where(element = Player_Attributes.date, filter = \"BETWEEN '2013-01-01' AND '2015-12-31'\")\nres = df2.select(Player.player_name, (strftime('%Y', 'now') - strftime('%Y', Player.birthday)) - (strftime('%m-%d', 'now') < strftime('%m-%d', Player.birthday)) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 97')\ndf2 = df1.where(element = [MASK], filter = \"BETWEEN '2013-01-01' AND '2015-12-31'\")\nres = df2.select([MASK], (strftime('%Y', [MASK]) - strftime('%m-%d', [MASK]) as [MASK]))\n```"}
{"idx": 1032, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(League.id).agg(count(Match.id))\ndf2 = df1.orderby(by = count(Match.id), desc).limit(1)\nres = df2.select(League.name, count(Match.id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(count([MASK]))\ndf2 = df1.orderby(by = count([MASK]), desc).limit(1)\nres = df2.select([MASK], count([MASK]))\n```"}
{"idx": 1033, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = '>= 1990-01-01 00:00:00')\ndf2 = df1.where(element = Player.birthday, filter = '< 1996-01-01 00:00:00')\nres = df2.select(avg(Player.height))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 1990-01-01 00:00:00')\ndf2 = df1.where(element = [MASK], filter = '< 1996-01-01 00:00:00')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 1034, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.date, filter = 'LIKE 2010%')\ndf2 = df1.where(element = Player_Attributes.overall_rating, filter = '> avg(Player_Attributes.overall_rating)')\ndf3 = df2.max(Player_Attributes.overall_rating)\nres = df2.where(element = Player_Attributes.overall_rating, filter = '= df3').select(Player_Attributes.player_api_id)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'LIKE 2010%')\ndf2 = df1.where(element = [MASK], filter = '> avg([MASK])')\nres = df2.where(element = [MASK], filter = '= max([MASK])).select([MASK])\n```"}
{"idx": 1035, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.buildUpPlaySpeed, filter = '> 50')\ndf2 = df1.where(element = Team_Attributes.buildUpPlaySpeed, filter = '< 60')\nres = df2.select(Team_Attributes.team_fifa_api_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 50')\ndf2 = df1.where(element = [MASK], filter = '< 60')\nres = df2.select([MASK])\n```"}
{"idx": 1036, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.date, filter = \"like '2012%'\")\ndf2 = df1.where(element = Team_Attributes.buildUpPlayPassing, filter = '> (SELECT AVG(Team_Attributes.buildUpPlayPassing) FROM Team_Attributes WHERE Team_Attributes.date LIKE ''2012%'' AND Team_Attributes.buildUpPlayPassing IS NOT NULL)')\nres = df2.select(distinct(Team.team_long_name))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"like '2012%'\")\ndf2 = df1.where(element = [MASK], filter = '> (SELECT AVG([MASK]) FROM [MASK] WHERE [MASK] LIKE ''2012%'' AND [MASK] IS NOT NULL)')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1037, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = 'between 1987 and 1992')\ndf2 = df1.where(element = Player_Attributes.preferred_foot, filter = 'left')\nres = df.select((df2.count() * 100.0) / df1.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [Player.birthday], filter = 'between 1987 and 1992')\ndf2 = df1.where(element = [Player_Attributes.preferred_foot], filter = 'left')\nres = df2.select((df2.count() * 100.0) / df1.count())\n```"}
{"idx": 1038, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(League.id).agg(total_goals = sum(Match.home_team_goal + Match.away_team_goal))\ndf2 = df1.orderby(by = total_goals, asc).limit(5)\nres = df2.select(League.name, total_goals)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(total_goals = sum([MASK] + [MASK]))\ndf2 = df1.orderby(by = total_goals, asc).limit(5)\nres = df2.select([MASK], total_goals)\n```"}
{"idx": 1039, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Ahmed Samir Farag')\nres = df.where(element = Player_Attributes.player_api_id, filter = df1.select(Player.player_api_id)).select(Player_Attributes.long_shots).avg()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ahmed Samir Farag')\nres = df.where(element = [MASK], filter = df1.select([MASK])).select([MASK]).avg()\n```"}
{"idx": 1040, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.height, filter = '> 180')\ndf2 = df1.groupby(Player.player_api_id).agg(avg_heading_accuracy = avg(Player_Attributes.heading_accuracy))\ndf3 = df2.orderby(by = avg_heading_accuracy, desc).limit(10)\nres = df3.select(Player.player_name, avg_heading_accuracy)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Player.height], filter = '> 180')\ndf2 = df1.groupby([Player.player_api_id]).agg(avg_heading_accuracy = avg([Player_Attributes.heading_accuracy]))\ndf3 = df2.orderby(by = avg_heading_accuracy, desc).limit(10)\nres = df3.select([Player.player_name, avg_heading_accuracy])\n```"}
{"idx": 1041, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.buildUpPlayDribblingClass, filter = 'Normal')\ndf2 = df1.where(element = Team_Attributes.date, filter = '>= 2014-01-01 00:00:00').where(element = Team_Attributes.date, filter = '<= 2014-01-31 00:00:00')\ndf3 = df2.groupby(Team_Attributes.team_api_id).having(element = avg(Team_Attributes.chanceCreationPassing), filter = '> Team_Attributes.chanceCreationPassing')\nres = df3.orderby(by = Team_Attributes.chanceCreationPassing, desc).select(Team.team_long_name, Team_Attributes.chanceCreationPassing)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Normal')\ndf2 = df1.where(element = [MASK], filter = '>= 2014-01-01 00:00:00').where(element = [MASK], filter = '<= 2014-01-31 00:00:00')\ndf3 = df2.groupby([MASK]).having(element = avg([MASK]), filter = '> [MASK]')\nres = df3.orderby(by = [MASK], desc).select([MASK], [MASK])\n```"}
{"idx": 1042, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.season, filter = '2009/2010')\ndf2 = df1.groupby(League.name).having(element = avg(Match.home_team_goal), filter = '> avg(Match.away_team_goal)')\nres = df2.select(League.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2009/2010')\ndf2 = df1.groupby([MASK]).having(element = avg([MASK]), filter = '> avg([MASK])')\nres = df2.select([MASK])\n```"}
{"idx": 1043, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'Queens Park Rangers')\nres = df1.select(Team.team_short_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Queens Park Rangers')\nres = df1.select([MASK])\n```"}
{"idx": 1044, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = 'substr = 1970-10')\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'substr = 1970-10')\nres = df1.select([MASK])\n```"}
{"idx": 1045, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Franco Zennaro')\nres = df1.select(Player_Attributes.attacking_work_rate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Franco Zennaro')\nres = df1.select([MASK])\n```"}
{"idx": 1046, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'ADO Den Haag')\nres = df1.select(Team_Attributes.buildUpPlayPositioningClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'ADO Den Haag')\nres = df1.select([MASK])\n```"}
{"idx": 1047, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Francois Affolter')\ndf2 = df1.where(element = Player_Attributes.date, filter = '2014-09-18 00:00:00')\nres = df2.select(Player_Attributes.heading_accuracy)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Francois Affolter')\ndf2 = df1.where(element = [MASK], filter = '2014-09-18 00:00:00')\nres = df2.select([MASK])\n```"}
{"idx": 1048, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Gabriel Tamas')\ndf2 = df1.where(element = Player_Attributes.date, filter = \"strftime('%Y') = '2011'\")\nres = df2.select(Player_Attributes.overall_rating)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Gabriel Tamas')\ndf2 = df1.where(element = [MASK], filter = \"strftime('%Y') = '2011'\")\nres = df2.select([MASK])\n```"}
{"idx": 1049, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Scotland Premier League')\ntmp_res1 = df1.select(League.id)\n\ndf2 = df.where(element = Match.season, filter = '2015/2016')\ndf3 = df2.where(element = Match.league_id, filter = 'in', value = tmp_res1)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Scotland Premier League')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = '2015/2016')\ndf3 = df2.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df3.count()\n```"}
{"idx": 1050, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = max(Player.birthday))\nres = df1.select(Player_Attributes.preferred_foot)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1051, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.potential, filter = max(Player_Attributes.potential))\nres = df1.select(Player.player_name, Player_Attributes.potential)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1052, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.weight, filter = '< 130')\ndf2 = df1.where(element = Player_Attributes.preferred_foot, filter = 'left')\nres = df2.select_distinct(Player.player_api_id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 130')\ndf2 = df1.where(element = [MASK], filter = 'left')\nres = df2.select_distinct([MASK]).count()\n```"}
{"idx": 1053, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.chanceCreationPassingClass, filter = 'Risky')\nres = df1.select(Team.team_short_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Risky')\nres = df1.select([MASK])\n```"}
{"idx": 1054, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'David Wilson')\nres = df1.select(Player_Attributes.defensive_work_rate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'David Wilson')\nres = df1.select([MASK])\n```"}
{"idx": 1055, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.overall_rating, filter = max(Player_Attributes.overall_rating))\nres = df1.select(Player.birthday).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK]).limit(1)\n```"}
{"idx": 1056, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Country.name, filter = 'Netherlands')\nres = df1.select(League.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Netherlands')\nres = df1.select([MASK])\n```"}
{"idx": 1057, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Country.name, filter = 'Poland')\ndf2 = df.where(element = Match.season, filter = '2010/2011')\ndf3 = df2.where(element = Match.country_id, filter = df1.select(Country.id))\nres = df3.select(avg(Match.home_team_goal))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Poland')\ndf2 = df.where(element = [MASK], filter = '2010/2011')\ndf3 = df2.where(element = [MASK], filter = df1.select([MASK]))\nres = df3.select(avg([MASK]))\n```"}
{"idx": 1058, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Player.height, desc).limit(1)\ntmp_res1 = df1.select(Player.player_api_id)\n\ndf2 = df.orderby(by = Player.height).limit(1)\ntmp_res2 = df2.select(Player.player_api_id)\n\ndf3 = df.where(element = Player_Attributes.player_api_id, filter = 'in', value = [tmp_res1])\nres1 = df3.select(avg(Player_Attributes.finishing)).as('avg_finishing').label('Highest Player Finishing')\n\ndf4 = df.where(element = Player_Attributes.player_api_id, filter = 'in', value = [tmp_res2])\nres2 = df4.select(avg(Player_Attributes.finishing)).as('avg_finishing').label('Shortest Player Finishing')\n\nres = df.select(if(res1.avg_finishing > res2.avg_finishing, 'Highest Player', 'Shortest Player'))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.orderby(by = [MASK], desc).limit(1)\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.orderby(by = [MASK]).limit(1)\ntmp_res2 = df2.select([MASK])\n\ndf3 = df.where(element = [MASK], filter = 'in', value = [tmp_res1])\nres1 = df3.select(avg([MASK])).as('avg_[MASK]').label('Highest [MASK]')\n\ndf4 = df.where(element = [MASK], filter = 'in', value = [tmp_res2])\nres2 = df4.select(avg([MASK])).as('avg_[MASK]').label('Shortest [MASK]')\n\nres = df.select(if(res1.avg_[MASK] > res2.avg_[MASK], 'Highest Player', 'Shortest Player'))\n```"}
{"idx": 1059, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.height, filter = '> 180')\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 180')\nres = df1.select([MASK])\n```"}
{"idx": 1060, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = \"year > 1990\")\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"year > 1990\")\nres = df1.count()\n```"}
{"idx": 1061, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'starts with Adam')\ndf2 = df1.where(element = Player.weight, filter = '> 170')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'starts with Adam')\ndf2 = df1.where(element = [MASK], filter = '> 170')\nres = df2.count()\n```"}
{"idx": 1062, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.date, filter = 'between 2008 and 2010')\ndf2 = df1.where(element = Player_Attributes.overall_rating, filter = '> 80')\nres = df2.select(distinct = Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 2008 and 2010')\ndf2 = df1.where(element = [MASK], filter = '> 80')\nres = df2.select(distinct = [MASK])\n```"}
{"idx": 1063, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Aaron Doran')\nres = df1.select(Player_Attributes.potential)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aaron Doran')\nres = df1.select([MASK])\n```"}
{"idx": 1064, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.preferred_foot, filter = 'left')\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'left')\nres = df1.select([MASK])\n```"}
{"idx": 1065, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.buildUpPlaySpeedClass, filter = 'Fast')\nres = df1.select(Team.team_long_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fast')\nres = df1.select([MASK])\n```"}
{"idx": 1066, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_short_name, filter = 'CLB')\nres = df1.select(Team_Attributes.buildUpPlayPassingClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CLB')\nres = df1.select([MASK])\n```"}
{"idx": 1067, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.buildUpPlayPassing, filter = '> 70')\nres = df1.select(Team.team_short_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 70')\nres = df1.select([MASK])\n```"}
{"idx": 1068, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.height, filter = '> 170')\ndf2 = df1.where(element = Player_Attributes.date, filter = \"between '2010' and '2015'\")\nres = df2.select(avg(Player_Attributes.overall_rating))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 170')\ndf2 = df1.where(element = [MASK], filter = \"between '2010' and '2015'\")\nres = df2.select(avg([MASK]))\n```"}
{"idx": 1069, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.height, filter = min(Player.height))\nres = df1.select(Player.player_name, Player.height)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1070, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Italy Serie A')\nres = df1.select(Country.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italy Serie A')\nres = df1.select([MASK])\n```"}
{"idx": 1071, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.buildUpPlaySpeed, filter = 31)\ndf2 = df1.where(element = Team_Attributes.buildUpPlayDribbling, filter = 53)\ndf3 = df2.where(element = Team_Attributes.buildUpPlayPassing, filter = 32)\nres = df3.select(Team.team_short_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 31)\ndf2 = df1.where(element = [MASK], filter = 53)\ndf3 = df2.where(element = [MASK], filter = 32)\nres = df3.select([MASK])\n```"}
{"idx": 1072, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Aaron Doran')\ntmp_res1 = df1.select(Player_Attributes.player_api_id)\ndf2 = df.where(element = Player_Attributes.player_api_id, filter = 'in', value = tmp_res1)\nres = df2.select(avg(Player_Attributes.overall_rating))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Aaron Doran')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df2.select(avg([MASK]))\n```"}
{"idx": 1073, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Germany 1. Bundesliga')\ndf2 = df.where(element = Match.date, filter = \"between '2008-08' and '2008-10'\")\nres = df2.where(element = Match.league_id, filter = df1.select(League.id)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Germany 1. Bundesliga')\ndf2 = df.where(element = [MASK], filter = \"between '2008-08' and '2008-10'\")\nres = df2.where(element = [MASK], filter = df1.select([MASK])).count()\n```"}
{"idx": 1074, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.home_team_goal, filter = 10)\nres = df1.select(Team.team_short_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 10)\nres = df1.select([MASK])\n```"}
{"idx": 1075, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.potential, filter = 61)\ndf2 = df1.orderby(by = Player_Attributes.balance, desc).limit(1)\nres = df2.select(Player.player_name, Player_Attributes.balance, Player_Attributes.potential)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 61)\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1076, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Abdou Diallo')\ndf2 = df.where(element = Player.player_name, filter = 'Aaron Appindangoye')\nres = df.select((df1.select(Player_Attributes.ball_control).avg() - df2.select(Player_Attributes.ball_control).avg()) as ball_control_difference)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Player.player_name], filter = 'Abdou Diallo')\ndf2 = df.where(element = [Player.player_name], filter = 'Aaron Appindangoye')\nres = df.select((df1.select([Player_Attributes.ball_control]).avg() - df2.select([Player_Attributes.ball_control]).avg()) as [ball_control_difference])\n```"}
{"idx": 1077, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_short_name, filter = 'GEN')\nres = df1.select(Team.team_long_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'GEN')\nres = df1.select([MASK])\n```"}
{"idx": 1078, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'IN', values = ['Aaron Lennon', 'Abdelaziz Barrada'])\ndf2 = df1.orderby(by = Player.birthday, asc).limit(1)\nres = df2.select(Player.player_name, Player.birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [Player.player_name], filter = 'IN', values = ['[MASK]', '[MASK]'])\ndf2 = df1.orderby(by = [Player.birthday], asc).limit(1)\nres = df2.select([Player.player_name, Player.birthday])\n```"}
{"idx": 1079, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Player.height, desc).limit(1)\nres = df1.select(Player.player_name, Player.height)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1080, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.preferred_foot, filter = 'left')\ndf2 = df1.where(element = Player_Attributes.attacking_work_rate, filter = 'low')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'left')\ndf2 = df1.where(element = [MASK], filter = 'low')\nres = df2.count()\n```"}
{"idx": 1081, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Belgium Jupiler League')\nres = df1.select(Country.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Belgium Jupiler League')\nres = df1.select([MASK])\n```"}
{"idx": 1082, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Country.name, filter = 'Germany')\nres = df1.select(League.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Germany')\nres = df1.select([MASK])\n```"}
{"idx": 1083, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.overall_rating, filter = max(Player_Attributes.overall_rating))\nres = df1.select(Player.player_name, Player_Attributes.overall_rating)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1084, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = '< 1986')\ndf2 = df1.where(element = Player_Attributes.defensive_work_rate, filter = 'high')\nres = df2.select(Player.player_api_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 1986')\ndf2 = df1.where(element = [MASK], filter = 'high')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1085, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'IN', values = ['Alexis', 'Ariel Borysiuk', 'Arouna Kone'])\ndf2 = df1.orderby(by = Player_Attributes.crossing, desc).limit(1)\nres = df2.select(Player.player_name, Player_Attributes.crossing)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'IN', values = ['[MASK]', '[MASK]', '[MASK]'])\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1086, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Ariel Borysiuk')\nres = df1.select(Player_Attributes.heading_accuracy)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ariel Borysiuk')\nres = df1.select([MASK])\n```"}
{"idx": 1087, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.height, filter = '> 180')\ndf2 = df1.where(element = Player_Attributes.volleys, filter = '> 70')\nres = df2.select_distinct(Player_Attributes.player_api_id).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 180')\ndf2 = df1.where(element = [MASK], filter = '> 70')\nres = df2.select_distinct([MASK]).count()\n```"}
{"idx": 1088, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.volleys, filter = '> 70')\ndf2 = df1.where(element = Player_Attributes.dribbling, filter = '> 70')\nres = df2.select(distinct = Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 70')\ndf2 = df1.where(element = [MASK], filter = '> 70')\nres = df2.select(distinct = [MASK])\n```"}
{"idx": 1089, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Country.name, filter = 'Belgium')\ntmp_res1 = df1.select(Country.id)\n\ndf2 = df.where(element = Match.season, filter = '2008/2009')\ndf3 = df2.where(element = Match.country_id, filter = 'in', value = tmp_res1)\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Belgium')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = '2008/2009')\ndf3 = df2.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df3.count()\n```"}
{"idx": 1090, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = min(Player.birthday))\nres = df1.select(Player_Attributes.long_passing)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1091, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Belgium Jupiler League')\ndf2 = df.where(element = Match.date, filter = \"SUBSTR(_, 1, 7) = '2009-04'\")\nres = df2.where(element = Match.league_id, filter = df1.select(League.id)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [TABLE1].name, filter = 'Belgium Jupiler League')\ndf2 = df.where(element = [TABLE2].date, filter = \"SUBSTR(_, 1, 7) = '2009-04'\")\nres = df2.where(element = [TABLE2].league_id, filter = df1.select([TABLE1].id)).count()\n```"}
{"idx": 1092, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.season, filter = '2008/2009')\ndf2 = df1.groupby(League.name).orderby(by = count(Match.id), desc).limit(1)\nres = df2.select(League.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2008/2009')\ndf2 = df1.groupby([MASK]).orderby(by = count([MASK]), desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1093, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = '< 1986')\nres = df1.select(avg(Player_Attributes.overall_rating))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 1986')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 1094, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Ariel Borysiuk')\ndf2 = df.where(element = Player.player_name, filter = 'Paulin Puel')\ndf3 = df.orderby(by = [Player_Attributes.date, desc, Player_Attributes.date, desc]).limit(1)\nres = df3.select((df1.overall_rating - df2.overall_rating) * 100.0 / df2.overall_rating)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [Player.player_name], filter = 'Ariel Borysiuk')\ndf2 = df.where(element = [Player.player_name], filter = 'Paulin Puel')\ndf3 = df.orderby(by = [Player_Attributes.date, desc, Player_Attributes.date, desc]).limit(1)\nres = df3.select((df1.overall_rating - df2.overall_rating) * 100.0 / df2.overall_rating)\n```"}
{"idx": 1095, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'Heart of Midlothian')\nres = df1.select(avg(Team_Attributes.buildUpPlaySpeed))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Heart of Midlothian')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 1096, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Pietro Marino')\nres = df1.select(avg(Player_Attributes.overall_rating))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Pietro Marino')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 1097, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Aaron Lennox')\nres = df1.select(Player_Attributes.crossing).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aaron Lennox')\nres = df1.select([MASK])\n```"}
{"idx": 1098, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'Ajax')\ndf2 = df1.groupby(Team_Attributes.chanceCreationPassingClass).orderby(by = max(Team_Attributes.chanceCreationPassing), desc).limit(1)\nres = df2.select(max(Team_Attributes.chanceCreationPassing) as highest_chance_creation_passing_score, Team_Attributes.chanceCreationPassingClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Ajax')\ndf2 = df1.groupby([MASK]).orderby(by = max([MASK]), desc).limit(1)\nres = df2.select(max([MASK]) as highest_[MASK], [MASK])\n```"}
{"idx": 1099, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Abdou Diallo')\nres = df1.select(Player_Attributes.preferred_foot)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Abdou Diallo')\nres = df1.select([MASK])\n```"}
{"idx": 1100, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Dorlan Pabon')\nres = df1.select(max(Player_Attributes.overall_rating))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Dorlan Pabon')\nres = df1.select(max([MASK]))\n```"}
{"idx": 1101, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'Parma')\ndf2 = df1.where(element = Country.name, filter = 'Italy')\nres = df2.select(avg(Match.away_team_goal))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Parma')\ndf2 = df1.where(element = [MASK], filter = 'Italy')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 1102, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.overall_rating, filter = 77)\ndf2 = df1.where(element = Player_Attributes.date, filter = 'like 2016-06-23%')\ndf3 = df2.orderby(by = Player.birthday, asc).limit(1)\nres = df3.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 77)\ndf2 = df1.where(element = [MASK], filter = 'like 2016-06-23%')\ndf3 = df2.orderby(by = [MASK], asc).limit(1)\nres = df3.select([MASK])\n```"}
{"idx": 1103, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Aaron Mooy')\ndf2 = df1.where(element = Player_Attributes.date, filter = \"like '2016-02-04%'\")\nres = df2.select(Player_Attributes.overall_rating)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aaron Mooy')\ndf2 = df1.where(element = [MASK], filter = \"like '2016-02-04%'\")\nres = df2.select([MASK])\n```"}
{"idx": 1104, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Francesco Parravicini')\ndf2 = df1.where(element = Player_Attributes.date, filter = '2010-08-30 00:00:00')\nres = df2.select(Player_Attributes.potential)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Francesco Parravicini')\ndf2 = df1.where(element = [MASK], filter = '2010-08-30 00:00:00')\nres = df2.select([MASK])\n```"}
{"idx": 1105, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Francesco Migliore')\ndf2 = df1.where(element = Player_Attributes.date, filter = \"like '2015-05-01%'\")\nres = df2.select(Player_Attributes.attacking_work_rate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Francesco Migliore')\ndf2 = df1.where(element = [MASK], filter = \"like '2015-05-01%'\")\nres = df2.select([MASK])\n```"}
{"idx": 1106, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Kevin Berigaud')\ndf2 = df1.where(element = Player_Attributes.date, filter = '2013-02-22 00:00:00')\nres = df2.select(Player_Attributes.defensive_work_rate)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Kevin Berigaud')\ndf2 = df1.where(element = [MASK], filter = '2013-02-22 00:00:00')\nres = df2.select([MASK])\n```"}
{"idx": 1107, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Kevin Constant')\ndf2 = df1.orderby(by = Player_Attributes.crossing, desc).limit(1)\nres = df2.select(Player_Attributes.date).orderby(by = Player_Attributes.date, asc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Kevin Constant')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.orderby(by = [MASK], asc).limit(1).select([MASK])\n```"}
{"idx": 1108, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'Willem II')\ndf2 = df1.where(element = Team_Attributes.date, filter = '2012-02-22')\nres = df2.select(Team_Attributes.buildUpPlaySpeedClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Willem II')\ndf2 = df1.where(element = [MASK], filter = '2012-02-22')\nres = df2.select([MASK])\n```"}
{"idx": 1109, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_short_name, filter = 'LEI')\ndf2 = df1.where(element = Team_Attributes.date, filter = '2015-09-10 00:00:00')\nres = df2.select(Team_Attributes.buildUpPlayDribblingClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'LEI')\ndf2 = df1.where(element = [MASK], filter = '2015-09-10 00:00:00')\nres = df2.select([MASK])\n```"}
{"idx": 1110, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'FC Lorient')\ndf2 = df1.where(element = Team_Attributes.date, filter = 'like 2010-02-22%')\nres = df2.select(Team_Attributes.buildUpPlayPassingClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'FC Lorient')\ndf2 = df1.where(element = [MASK], filter = 'like 2010-02-22%')\nres = df2.select([MASK])\n```"}
{"idx": 1111, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'PEC Zwolle')\ndf2 = df1.where(element = Team_Attributes.date, filter = '2013-09-20 00:00:00')\nres = df2.select(Team_Attributes.chanceCreationPassingClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'PEC Zwolle')\ndf2 = df1.where(element = [MASK], filter = '2013-09-20 00:00:00')\nres = df2.select([MASK])\n```"}
{"idx": 1112, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'Hull City')\ndf2 = df1.where(element = Team_Attributes.date, filter = '2010-02-22 00:00:00')\nres = df2.select(Team_Attributes.chanceCreationCrossingClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hull City')\ndf2 = df1.where(element = [MASK], filter = '2010-02-22 00:00:00')\nres = df2.select([MASK])\n```"}
{"idx": 1113, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'Hannover 96')\ndf2 = df1.where(element = Team_Attributes.date, filter = \"like '2015-09-10%'\")\nres = df2.select(Team_Attributes.defenceAggressionClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Hannover 96')\ndf2 = df1.where(element = [MASK], filter = \"like '2015-09-10%'\")\nres = df2.select([MASK])\n```"}
{"idx": 1114, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Marko Arnautovic')\ndf2 = df.where(element = Player_Attributes.player_api_id, filter = df1.select(Player.player_api_id))\ndf3 = df2.where(element = Player_Attributes.date, filter = 'between 2007-02-22 and 2016-04-21')\nres = df3.select(avg(Player_Attributes.overall_rating))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Marko Arnautovic')\ndf2 = df.where(element = [MASK], filter = df1.select([MASK]))\ndf3 = df2.where(element = [MASK], filter = 'between 2007-02-22 and 2016-04-21')\nres = df3.select(avg([MASK]))\n```"}
{"idx": 1115, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Landon Donovan')\ndf2 = df.where(element = Player.player_name, filter = 'Jordan Bowery')\ndf3 = df.where(element = Player_Attributes.date, filter = '2013-07-12').where(element = Player_Attributes.player_api_id, filter = 'in', values = df1.select(Player.player_api_id), df2.select(Player.player_api_id))\nres = df.select((df3.where(element = Player_Attributes.player_api_id, filter = df1.select(Player.player_api_id)).select(Player_Attributes.overall_rating).mean() - df3.where(element = Player_Attributes.player_api_id, filter = df2.select(Player.player_api_id)).select(Player_Attributes.overall_rating).mean()) * 100.0 / df3.where(element = Player_Attributes.player_api_id, filter = df1.select(Player.player_api_id)).select(Player_Attributes.overall_rating).mean())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Player.player_name], filter = 'Landon Donovan')\ndf2 = df.where(element = [Player.player_name], filter = 'Jordan Bowery')\ndf3 = df.where(element = [Player_Attributes.date], filter = '2013-07-12').where(element = [Player_Attributes.player_api_id], filter = 'in', values = df1.select([Player.player_api_id]), df2.select([Player.player_api_id]))\nres = df.select((df3.where(element = [Player_Attributes.player_api_id], filter = df1.select([Player.player_api_id])).select([Player_Attributes.overall_rating]).mean() - df3.where(element = [Player_Attributes.player_api_id], filter = df2.select([Player.player_api_id])).select([Player_Attributes.overall_rating]).mean()) * 100.0 / df3.where(element = [Player_Attributes.player_api_id], filter = df1.select([Player.player_api_id])).select([Player_Attributes.overall_rating]).mean())\n```"}
{"idx": 1116, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Player.height, desc).limit(1)\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 1117, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = Player.weight, desc).limit(10)\nres = df1.select(Player.player_api_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], desc).limit(10)\nres = df1.select([MASK])\n```"}
{"idx": 1118, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = subtract(julianday('now'), julianday(Player.birthday)), filter = '>= 35 * 365.25')\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = subtract(julianday('now'), julianday([MASK])), filter = '>= 35 * 365.25')\nres = df1.select([MASK])\n```"}
{"idx": 1119, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Aaron Lennon')\ntmp_res1 = df1.select(Player.player_api_id)\n\ndf2 = df.where(element = Match.home_player_1, filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = Match.home_player_2, filter = 'in', value = tmp_res1)\ndf4 = df3.where(element = Match.home_player_3, filter = 'in', value = tmp_res1)\ndf5 = df4.where(element = Match.home_player_4, filter = 'in', value = tmp_res1)\ndf6 = df5.where(element = Match.home_player_5, filter = 'in', value = tmp_res1)\ndf7 = df6.where(element = Match.home_player_6, filter = 'in', value = tmp_res1)\ndf8 = df7.where(element = Match.home_player_7, filter = 'in', value = tmp_res1)\ndf9 = df8.where(element = Match.home_player_8, filter = 'in', value = tmp_res1)\ndf10 = df9.where(element = Match.home_player_9, filter = 'in', value = tmp_res1)\ndf11 = df10.where(element = Match.home_player_10, filter = 'in', value = tmp_res1)\ndf12 = df11.where(element = Match.home_player_11, filter = 'in', value = tmp_res1)\n\nres = df12.select(Match.home_team_goal).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Aaron Lennon')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf3 = df2.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf4 = df3.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf5 = df4.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf6 = df5.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf7 = df6.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf8 = df7.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf9 = df8.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf10 = df9.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf11 = df10.where(element = [MASK], filter = 'in', value = tmp_res1)\ndf12 = df11.where(element = [MASK], filter = 'in', value = tmp_res1)\n\nres = df12.select([MASK]).sum()\n```"}
{"idx": 1120, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Daan Smith')\ndf2 = df.where(element = Player.player_name, filter = 'Filipe Ferreira')\nres = df.select(Match.away_team_goal).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Daan Smith')\ndf2 = df.where(element = [MASK], filter = 'Filipe Ferreira')\nres = df.select([MASK]).sum()\n```"}
{"idx": 1121, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.birthday, filter = '< 30 years')\nres = df1.select(Match.home_team_goal).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 30 years')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 1122, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.overall_rating, filter = max(Player_Attributes.overall_rating))\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1123, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.potential, filter = max(Player_Attributes.potential))\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1124, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.attacking_work_rate, filter = 'high')\nres = df1.select(distinct(Player.player_name))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'high')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1125, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.finishing, filter = 1)\ndf2 = df1.orderby(by = subtract(julianday('now'), Player.birthday), desc).limit(1)\nres = df2.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.orderby(by = subtract(julianday('now'), [MASK]), desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1126, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Country.name, filter = 'Belgium')\ntmp_res1 = df1.select(Match.home_player_1, Match.home_player_2, Match.home_player_3, Match.home_player_4, Match.home_player_5, Match.home_player_6, Match.home_player_7, Match.home_player_8, Match.home_player_9, Match.home_player_10, Match.home_player_11, Match.away_player_1, Match.away_player_2, Match.away_player_3, Match.away_player_4, Match.away_player_5, Match.away_player_6, Match.away_player_7, Match.away_player_8, Match.away_player_9, Match.away_player_10, Match.away_player_11)\ntmp_res2 = tmp_res1.select()\nres = tmp_res2.select(Player.player_name).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Belgium')\ntmp_res1 = df1.select([MASK])\nres = tmp_res1.select([MASK]).distinct()\n```"}
{"idx": 1127, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.vision, filter = '>= 90')\ndf2 = df1.select(Player.player_api_id)\ndf3 = df.where(element = Match.home_player_1, filter = df2).or_where(element = Match.home_player_2, filter = df2).or_where(element = Match.home_player_3, filter = df2).or_where(element = Match.home_player_4, filter = df2).or_where(element = Match.home_player_5, filter = df2).or_where(element = Match.home_player_6, filter = df2).or_where(element = Match.home_player_7, filter = df2).or_where(element = Match.home_player_8, filter = df2).or_where(element = Match.home_player_9, filter = df2).or_where(element = Match.home_player_10, filter = df2).or_where(element = Match.home_player_11, filter = df2).or_where(element = Match.away_player_1, filter = df2).or_where(element = Match.away_player_2, filter = df2).or_where(element = Match.away_player_3, filter = df2).or_where(element = Match.away_player_4, filter = df2).or_where(element = Match.away_player_5, filter = df2).or_where(element = Match.away_player_6, filter = df2).or_where(element = Match.away_player_7, filter = df2).or_where(element = Match.away_player_8, filter = df2).or_where(element = Match.away_player_9, filter = df2).or_where(element = Match.away_player_10, filter = df2)\ndf4 = df3.select(Match.home_team, Match.away_team)\ndf5 = df4.select(distinct(Country.name))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 90')\ndf2 = df1.select([MASK])\ndf3 = df.where(element = [MASK1], filter = df2).or_where(element = [MASK2], filter = df2).or_where(element = [MASK3], filter = df2).or_where(element = [MASK4], filter = df2).or_where(element = [MASK5], filter = df2).or_where(element = [MASK6], filter = df2).or_where(element = [MASK7], filter = df2).or_where(element = [MASK8], filter = df2).or_where(element = [MASK9], filter = df2).or_where(element = [MASK10], filter = df2).or_where(element = [MASK11], filter = df2).or_where(element = [MASK12], filter = df2).or_where(element = [MASK13], filter = df2).or_where(element = [MASK14], filter = df2).or_where(element = [MASK15], filter = df2).or_where(element = [MASK16], filter = df2).or_where(element = [MASK17], filter = df2).or_where(element = [MASK18], filter = df2).or_where(element = [MASK19], filter = df2).or_where(element = [MASK20], filter = df2)\ndf4 = df3.select([MASK21], [MASK22])\ndf5 = df4.select(distinct([MASK23].name))\n```"}
{"idx": 1128, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(Country.name).agg(avg_weight = avg(Player.weight))\ndf2 = df1.orderby(by = avg_weight, desc).limit(1)\nres = df2.select(Country.name, avg_weight)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(avg_weight = avg([MASK]))\ndf2 = df1.orderby(by = avg_weight, desc).limit(1)\nres = df2.select([MASK], avg_weight)\n```"}
{"idx": 1129, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.buildUpPlaySpeedClass, filter = 'Slow')\nres = df1.select(Team.team_long_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Slow')\nres = df1.select([MASK])\n```"}
{"idx": 1130, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team_Attributes.chanceCreationPassingClass, filter = 'Safe')\nres = df1.select(Team.team_short_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Safe')\nres = df1.select([MASK])\n```"}
{"idx": 1131, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Country.name, filter = 'Italy')\ndf2 = df1.select(Match.home_player_1, Match.home_player_2, Match.home_player_3, Match.home_player_4, Match.home_player_5, Match.home_player_6, Match.home_player_7, Match.home_player_8, Match.home_player_9, Match.home_player_10, Match.home_player_11, Match.away_player_1, Match.away_player_2, Match.away_player_3, Match.away_player_4, Match.away_player_5, Match.away_player_6, Match.away_player_7, Match.away_player_8, Match.away_player_9, Match.away_player_10, Match.away_player_11)\ndf3 = df2.select(Player.player_api_id)\nres = df3.select(avg(Player.height))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Italy')\ndf2 = df1.select([MASK])\nres = df2.select(avg([MASK]))\n```"}
{"idx": 1132, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.height, filter = '> 180')\nres = df1.orderby(by = Player.player_name, asc).limit(3).select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 180')\nres = df1.orderby(by = [MASK], asc).limit(3).select([MASK])\n```"}
{"idx": 1133, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'starts with Aaron')\ndf2 = df1.where(element = Player.birthday, filter = '> 1990')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'starts with Aaron')\ndf2 = df1.where(element = [MASK], filter = '> 1990')\nres = df2.count()\n```"}
{"idx": 1134, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.player_api_id, filter = 6)\ntmp_res1 = df1.select(Player_Attributes.jumping)\n\ndf2 = df.where(element = Player_Attributes.player_api_id, filter = 23)\ntmp_res2 = df2.select(Player_Attributes.jumping)\n\nres = df.select(tmp_res1 - tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Player_Attributes.player_api_id], filter = 6)\ntmp_res1 = df1.select([Player_Attributes.jumping])\n\ndf2 = df.where(element = [Player_Attributes.player_api_id], filter = 23)\ntmp_res2 = df2.select([Player_Attributes.jumping])\n\nres = df.select(tmp_res1 - tmp_res2)\n```"}
{"idx": 1135, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.preferred_foot, filter = 'right')\ndf2 = df1.orderby(by = Player_Attributes.potential, asc).limit(1)\nres = df2.where(element = Player_Attributes.preferred_foot, filter = 'right').orderby(by = Player_Attributes.player_api_id).limit(5).select(Player_Attributes.player_api_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'right')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.where(element = [MASK], filter = 'right').orderby(by = [MASK]).limit(5).select([MASK])\n```"}
{"idx": 1136, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.preferred_foot, filter = 'left')\ndf2 = df1.where(element = Player_Attributes.crossing, filter = max(Player_Attributes.crossing))\nres = df2.count(distinct = Player.player_api_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'left')\ndf2 = df1.where(element = [MASK], filter = max([MASK]))\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 1137, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.strength, filter = '> 80').where(element = Player_Attributes.stamina, filter = '> 80')\nres = df.select(cast(df1.count(), float) / df.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK1], filter = '> 80').where(element = [MASK2], filter = '> 80')\nres = df.select(cast(df1.count(), float) / df.count() * 100)\n```"}
{"idx": 1138, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Poland Ekstraklasa')\nres = df1.select(Country.name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Poland Ekstraklasa')\nres = df1.select([MASK])\n```"}
{"idx": 1139, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Belgium Jupiler League')\ndf2 = df1.where(element = Match.date, filter = 'like 2008-09-24%')\nres = df2.select(Match.home_team_goal, Match.away_team_goal)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [TABLE1].name, filter = 'Belgium Jupiler League')\ndf2 = df1.where(element = [TABLE2].date, filter = 'like 2008-09-24%')\nres = df2.select([TABLE2].home_team_goal, [TABLE2].away_team_goal)\n```"}
{"idx": 1140, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.player_name, filter = 'Alexis Blin')\nres = df1.select(Player_Attributes.sprint_speed, Player_Attributes.agility, Player_Attributes.acceleration)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Alexis Blin')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1141, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Team.team_long_name, filter = 'KSV Cercle Brugge')\nres = df1.select(Team_Attributes.buildUpPlaySpeedClass)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'KSV Cercle Brugge')\nres = df1.select([MASK])\n```"}
{"idx": 1142, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Serie A')\ndf2 = df.where(element = Match.season, filter = '2015/2016')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Serie A')\ndf2 = df.where(element = [MASK], filter = '2015/2016')\nres = df2.count()\n```"}
{"idx": 1143, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = League.name, filter = 'Netherlands Eredivisie')\ntmp_res1 = df1.select(League.id)\ndf2 = df.where(element = Match.league_id, filter = tmp_res1)\nres = df2.select(max(Match.home_team_goal))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Netherlands Eredivisie')\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = tmp_res1)\nres = df2.select(max([MASK])\n```"}
{"idx": 1144, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.weight, filter = max(Player.weight))\nres = df1.select(Player_Attributes.finishing, Player_Attributes.curve)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1145, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.season, filter = '2015/2016')\ndf2 = df1.groupby(Match.league_id).agg(count(Match.id))\ndf3 = df2.orderby(by = count(Match.id), desc).limit(4)\nres = df3.select(League.name, count(Match.id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2015/2016')\ndf2 = df1.groupby([MASK]).agg(count([MASK]))\ndf3 = df2.orderby(by = count([MASK]), desc).limit(4)\nres = df3.select([MASK], count([MASK]))\n```"}
{"idx": 1146, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Match.away_team_goal, filter = max(Match.away_team_goal))\nres = df1.select(Team.team_long_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1147, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player_Attributes.overall_rating, filter = max(Player_Attributes.overall_rating))\nres = df1.select(Player.player_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1148, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Player.height, filter = '< 180').where(element = Player_Attributes.overall_rating, filter = '> 70')\nres = df.select(cast(df1.count(), float) / df.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 180').where(element = [MASK], filter = '> 70')\nres = df.select(cast(df1.count(), float) / df.count() * 100)\n```"}
{"idx": 1149, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\nin_patient_count = df1.where(element = Patient.Admission, filter = '+').count()\nout_patient_count = df1.where(element = Patient.Admission, filter = '-').count()\npercentage_deviation = df.select((in_patient_count - out_patient_count) * 100.0 / out_patient_count)\nres = df.select(in_patient_count, out_patient_count, percentage_deviation)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\nin_patient_count = df1.where(element = [MASK], filter = '+').count()\nout_patient_count = df1.where(element = [MASK], filter = '-').count()\npercentage_deviation = df.select((in_patient_count - out_patient_count) * 100.0 / out_patient_count)\nres = df.select(in_patient_count, out_patient_count, percentage_deviation)\n```"}
{"idx": 1150, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Patient.Birthday, filter = '> 1930')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '> 1930')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```"}
{"idx": 1151, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = 'between 1930 and 1940')\ndf2 = df1.where(element = Patient.Admission, filter = '+')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [Patient.Birthday], filter = 'between 1930 and 1940')\ndf2 = df1.where(element = [Patient.Admission], filter = '+')\nres = df.select(cast(df2.count(), real) / [df1.count()] * 100)\n```"}
{"idx": 1152, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'SLE').where(element = Patient.Admission, filter = '-')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = Patient.Diagnosis, filter = 'SLE').where(element = Patient.Admission, filter = '+')\ntmp_res2 = df2.count()\n\nres = df.select(tmp_res1, tmp_res2, cast(tmp_res1, real) / tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.Diagnosis], filter = 'SLE').where(element = [Patient.Admission], filter = '-')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = [Patient.Diagnosis], filter = 'SLE').where(element = [Patient.Admission], filter = '+')\ntmp_res2 = df2.count()\n\nres = df.select(tmp_res1, tmp_res2, cast(tmp_res1, real) / tmp_res2)\n```"}
{"idx": 1153, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.ID, filter = 30609)\ntmp_res1 = df1.select(Patient.Diagnosis).limit(1)\n\ndf2 = df.where(element = Laboratory.ID, filter = 30609)\ntmp_res2 = df2.select(Laboratory.Date).limit(1)\n\nres = df1.select('Diagnosis AS Type', tmp_res1).union(df2.select('Lab Test Date AS Type', tmp_res2))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.ID], filter = 30609)\ntmp_res1 = df1.select([Patient.Diagnosis]).limit(1)\n\ndf2 = df.where(element = [Laboratory.ID], filter = 30609)\ntmp_res2 = df2.select([Laboratory.Date]).limit(1)\n\nres = df1.select([Patient.Diagnosis AS Type, tmp_res1]).union(df2.select([Laboratory.Date AS Type, tmp_res2]))\n```"}
{"idx": 1154, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.ID, filter = 163109)\nres = df1.select(Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 163109)\nres = df1.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 1155, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.LDH, filter = '> 500')\nres = df1.select(Patient.ID, Patient.SEX, Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 500')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1156, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.RVVT, filter = '+')\nres = df1.select(Patient.ID, subtract(strftime('%Y', 'now'), strftime('%Y', Patient.Birthday)) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\nres = df1.select([Patient.ID], subtract(strftime('%Y', 'now'), strftime('%Y', Patient.Birthday)) as [MASK])\n```"}
{"idx": 1157, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Thrombosis, filter = 2)\nres = df1.select(Patient.ID, Patient.SEX, Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = Examination.Thrombosis, filter = 2)\nres = df1.select(Patient.ID, Patient.SEX, Patient.Diagnosis)\n```"}
{"idx": 1158, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = 'year = 1937')\ndf2 = df1.where(element = Laboratory.`T-CHO`, filter = '>= 250')\nres = df2.select(distinct(Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'year = 1937')\ndf2 = df1.where(element = [MASK], filter = '>= 250')\nres = df2.select(distinct([MASK], [MASK], [MASK], [MASK], [MASK], [MASK], [MASK]))\n```"}
{"idx": 1159, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.ALB, filter = '< 3.5')\nres = df1.select(Patient.ID, Patient.SEX, Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 3.5')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1160, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Laboratory.TP, filter = 'BETWEEN 6.0 AND 8.5')\nres = df.select(cast(df2.count(distinct = Patient.ID), real) / df1.count(distinct = Patient.ID) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN 6.0 AND 8.5')\nres = df.select(cast(df2.count(distinct = [MASK]), real) / df1.count(distinct = [MASK]) * 100)\n```"}
{"idx": 1161, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Admission, filter = '+')\ndf2 = df1.where(element = subtract(strftime('%Y', 'now'), Patient.Birthday), filter = '>= 50')\nres = df2.select(avg(Examination.aCL IgG))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = '>= 50')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 1162, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = strftime(Patient.Description, '%Y'), filter = '1997')\ndf3 = df2.where(element = Patient.Admission, filter = '-')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '1997')\ndf3 = df2.where(element = [MASK], filter = '-')\nres = df3.count()\n```"}
{"idx": 1163, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.select(subtract(year(`Patient.First Date`), year(`Patient.Birthday`)))\nres = df1.min()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.select(subtract([MASK], [MASK]))\nres = df1.min()\n```"}
{"idx": 1164, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Thrombosis, filter = 1)\ndf2 = df1.where(element = Examination.`Examination Date`, filter = \"like '1997%'\")\ndf3 = df2.where(element = Patient.SEX, filter = 'F')\nres = df3.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = \"like '1997%'\")\ndf3 = df2.where(element = [MASK], filter = 'F')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 1165, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.TG, filter = '>= 200')\nmax_age = df1.select(max(strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)))\nmin_age = df1.select(min(strftime('%Y', 'now') - strftime('%Y', Patient.Birthday')))\nres = df.select(max_age - min_age)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Laboratory.TG], filter = '>= 200')\nmax_age = df1.select(max(subtract(current_year, Patient.Birthday)))\nmin_age = df1.select(min(subtract(current_year, Patient.Birthday)))\nres = df.select(subtract(max_age, min_age))\n```"}
{"idx": 1166, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = max(Patient.Birthday))\ndf2 = df1.where(element = Examination.Symptoms, filter = 'is not null')\nres = df2.select(Examination.Symptoms, Examination.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1167, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.Date, filter = 'between 1998-01-01 and 1998-12-31')\ndf2 = df1.where(element = Patient.SEX, filter = 'M')\nres = df2.select(count(distinct(Laboratory.ID)) / 12.0)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'between 1998-01-01 and 1998-12-31')\ndf2 = df1.where(element = [MASK], filter = 'M')\nres = df2.select(count(distinct([MASK])) / 12.0)\n```"}
{"idx": 1168, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'SJS')\ndf2 = df1.orderby(by = Patient.Birthday, asc).limit(1)\nres = df2.select(Laboratory.Date as LabDate, subtract(year(Patient.First Date), year(Patient.Birthday)) as AgeAtFirstVisit)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SJS')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK] as LabDate, subtract(year([MASK]), year([MASK])) as AgeAtFirstVisit)\n```"}
{"idx": 1169, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M').where(element = Laboratory.UA, filter = '> 8.0')\ndf2 = df.where(element = Patient.SEX, filter = 'F').where(element = Laboratory.UA, filter = '> 6.5')\ntmp_res1 = df1.count(distinct = Patient.ID)\ntmp_res2 = df2.count(distinct = Patient.ID)\nres = df.select((tmp_res1 || ':' || tmp_res2))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.SEX], filter = 'M').where(element = [Laboratory.UA], filter = '> 8.0')\ndf2 = df.where(element = [Patient.SEX], filter = 'F').where(element = [Laboratory.UA], filter = '> 6.5')\ntmp_res1 = df1.count(distinct = [Patient.ID])\ntmp_res2 = df2.count(distinct = [Patient.ID])\nres = df.select((tmp_res1 || ':' || tmp_res2))\n```"}
{"idx": 1170, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = subtract(extract(year, Examination.`Examination Date`), extract(year, Patient.`First Date`)), filter = '>= 1')\nres = df1.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = subtract(extract(year, [MASK1].[MASK2]), extract(year, [MASK3].[MASK4])), filter = '>= 1')\nres = df1.select([MASK3].[MASK5]).distinct().count()\n```"}
{"idx": 1171, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.`Examination Date`, filter = \"between '1990' and '1993'\")\ndf2 = df1.where(element = subtract(Examination.`Examination Date`, Patient.Birthday), filter = '< 18')\nres = df2.count(distinct = Examination.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"between '1990' and '1993'\")\ndf2 = df1.where(element = [MASK], filter = '< 18')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 1172, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.`T-BIL`, filter = '>= 2.0')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '>= 2.0')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1173, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.`Examination Date`, filter = 'between 1985-01-01 and 1995-12-31')\ndf2 = df1.groupby(Examination.Diagnosis).count()\nres = df2.orderby(by = count(Examination.Diagnosis), desc).limit(1).select(Examination.Diagnosis, count(Examination.Diagnosis) as DiagnosisCount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 1985-01-01 and 1995-12-31')\ndf2 = df1.groupby([MASK]).count()\nres = df2.orderby(by = count([MASK]), desc).limit(1).select([MASK], count([MASK]) as [MASK])\n```"}
{"idx": 1174, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.Date, filter = 'between 1991-10-01 and 1991-10-31')\ndf2 = df1.where(element = Patient.Birthday, filter = 'between 1990 and 1999')\nres = df2.select(avg(subtract(1999, cast(strftime('%Y', Patient.Birthday), integer)))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'between 1991-10-01 and 1991-10-31')\ndf2 = df1.where(element = [MASK], filter = 'between 1990 and 1999')\nres = df2.select(avg(subtract(1999, cast(strftime('%Y', [MASK]), integer)))\n```"}
{"idx": 1175, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.HGB, filter = max(Laboratory.HGB))\ndf2 = df1.select(Laboratory.ID, Patient.Diagnosis, (strftime('%Y', Laboratory.Date) - strftime('%Y', Patient.Birthday)) - (strftime('%m-%d', Laboratory.Date) < strftime('%m-%d', Patient.Birthday)) as Age_At_Examination)\nres = df2.groupby(Laboratory.ID).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\ndf2 = df1.select([MASK.ID], [MASK.Diagnosis], (strftime('%Y', [MASK.Date]) - strftime('%m-%d', [MASK.Date]) < strftime('%m-%d', [MASK.Birthday])) as [MASK])\nres = df2.groupby([MASK.ID]).limit(1)\n```"}
{"idx": 1176, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.ID, filter = 3605340)\ndf2 = df1.where(element = Examination.`Examination Date`, filter = '1996-12-02')\nres = df2.select(Examination.ANA)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 3605340)\ndf2 = df1.where(element = [MASK], filter = '1996-12-02')\nres = df2.select([MASK])\n```"}
{"idx": 1177, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.ID, filter = 2927464)\ndf2 = df1.where(element = Laboratory.Date, filter = '1995-09-04')\nres = df2.select(case(element = Laboratory.`T-CHO`, when = '< 250', then = 'Normal', else = 'High'))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 2927464)\ndf2 = df1.where(element = [MASK], filter = '1995-09-04')\nres = df2.select(case(element = [MASK], when = '< 250', then = 'Normal', else = 'High'))\n```"}
{"idx": 1178, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'AORTITIS')\ndf2 = df1.orderby(by = Patient.`First Date`, asc).limit(1)\nres = df2.select(Patient.SEX)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'AORTITIS')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1179, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'SLE')\ndf2 = df1.where(element = Patient.Description, filter = '1994-02-19')\ndf3 = df2.where(element = Examination.`Examination Date`, filter = '1993-11-12')\nres = df3.select(Examination.`aCL IgM`)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SLE')\ndf2 = df1.where(element = [MASK], filter = '1994-02-19')\ndf3 = df2.where(element = [MASK], filter = '1993-11-12')\nres = df3.select([MASK])\n```"}
{"idx": 1180, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.Date, filter = '1992-06-12')\ndf2 = df1.where(element = Laboratory.GPT, filter = 9)\nres = df2.select(Patient.SEX)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1992-06-12')\ndf2 = df1.where(element = [MASK], filter = 9)\nres = df2.select([MASK])\n```"}
{"idx": 1181, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.UA, filter = 8.4)\ndf2 = df1.where(element = Laboratory.Date, filter = '1991-10-21')\nres = df2.select(subtract(year('1991-10-21'), subtract(month('1991-10-21'), month(p.Birthday))))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 8.4)\ndf2 = df1.where(element = [MASK], filter = '1991-10-21')\nres = df2.select(subtract(year([MASK]), subtract(month([MASK]), month([MASK].p.Birthday)))\n```"}
{"idx": 1182, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.`First Date`, filter = '1991-06-13').where(element = Patient.Diagnosis, filter = 'SJS')\ndf2 = df.where(element = Laboratory.Date, filter = \"strftime('%Y', value = '1995')\")\nres = df2.where(element = Laboratory.ID, filter = 'in', value = df1.select(Laboratory.ID)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '1991-06-13').where(element = [MASK], filter = 'SJS')\ndf2 = df.where(element = [MASK], filter = \"strftime('%Y', value = '1995')\")\nres = df2.where(element = [MASK], filter = 'in', value = df1.select([MASK])).count()\n```"}
{"idx": 1183, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Diagnosis, filter = 'SLE')\ndf2 = df1.where(element = Examination.`Examination Date`, filter = '1997-01-27')\nres = df2.select(Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SLE')\ndf2 = df1.where(element = [MASK], filter = '1997-01-27')\nres = df2.select([MASK])\n```"}
{"idx": 1184, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = '1959-03-01')\ndf2 = df1.where(element = Examination.`Examination Date`, filter = '1993-09-27')\nres = df2.select(Examination.Symptoms)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1959-03-01')\ndf2 = df1.where(element = [MASK], filter = '1993-09-27')\nres = df2.select([MASK])\n```"}
{"idx": 1185, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = '1959-02-18')\ndf2 = df.where(element = Laboratory.Date, filter = 'like 1981-11-%').where(element = Laboratory.ID, filter = 'in', value = df1.select(Patient.ID)).sum(Laboratory.`T-CHO`)\ndf3 = df.where(element = Laboratory.Date, filter = 'like 1981-12-%').where(element = Laboratory.ID, filter = 'in', value = df1.select(Patient.ID)).sum(Laboratory.`T-CHO`)\nres = df.select((df2 - df3) / df2 * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [Patient.Birthday], filter = '1959-02-18')\ndf2 = df.where(element = [Laboratory.Date], filter = 'like 1981-11-%').where(element = [Laboratory.ID], filter = 'in', value = df1.select([Patient.ID])).sum([Laboratory.`T-CHO`])\ndf3 = df.where(element = [Laboratory.Date], filter = 'like 1981-12-%').where(element = [Laboratory.ID], filter = 'in', value = df1.select([Patient.ID])).sum([Laboratory.`T-CHO`])\nres = df.select((df2 - df3) / df2 * 100)\n```"}
{"idx": 1186, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'Behcet')\ndf2 = df1.where(element = Examination.`Examination Date`, filter = 'between 1997-01-01 and 1997-12-31')\nres = df2.select(distinct(Patient.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Behcet')\ndf2 = df1.where(element = [MASK], filter = 'between 1997-01-01 and 1997-12-31')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1187, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.Date, filter = 'between 1987-07-06 and 1996-01-31')\ndf2 = df1.where(element = Laboratory.GPT, filter = '> 30')\ndf3 = df2.where(element = Laboratory.ALB, filter = '< 4')\nres = df3.select(distinct(Laboratory.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'between 1987-07-06 and 1996-01-31')\ndf2 = df1.where(element = [MASK], filter = '> 30')\ndf3 = df2.where(element = [MASK], filter = '< 4')\nres = df3.select(distinct([MASK]))\n```"}
{"idx": 1188, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Patient.Birthday, filter = \"like '1964%'\")\ndf3 = df2.where(element = Patient.Admission, filter = '+')\nres = df3.select(Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = \"like '1964%'\")\ndf3 = df2.where(element = [MASK], filter = '+')\nres = df3.select([MASK])\n```"}
{"idx": 1189, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\navg_igM = df.select(Examination.`aCL IgM`).avg()\nthreshold = df.select(multiply(avg_igM, 1.2))\ndf1 = df.where(element = Examination.Thrombosis, filter = 2).where(element = Examination.ANA, filter = 'S').where(element = Examination.`aCL IgM`, filter = '> threshold')\nres = df1.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\navg_igM = df.select([MASK]).avg()\nthreshold = df.select(multiply(avg_igM, 1.2))\ndf1 = df.where(element = [MASK], filter = 2).where(element = [MASK], filter = 'S').where(element = [MASK], filter = '> threshold')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 1190, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`U-PRO`, filter = '> 0').where(element = Laboratory.`U-PRO`, filter = '< 30')\ndf2 = df1.where(element = Laboratory.UA, filter = '<= 6.5')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '> 0').where(element = [MASK], filter = '< 30')\ndf2 = df1.where(element = [MASK], filter = '<= 6.5')\nres = df2.select(cast(df2.count(), float) / df1.count() * 100)\n```"}
{"idx": 1191, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M').where(element = strftime(Patient.`First Date`, '%Y'), filter = '1981')\ndf2 = df1.where(element = Patient.Diagnosis, filter = 'BEHCET')\nres = df.select((df2.count() * 100.0) / df1.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M').where(element = [MASK], filter = '1981')\ndf2 = df1.where(element = [MASK], filter = 'BEHCET')\nres = df.select((df2.count() * 100.0) / df1.count())\n```"}
{"idx": 1192, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Admission, filter = '-')\ndf2 = df1.where(element = Laboratory.Date, filter = 'like 1991-10%')\ndf3 = df2.where(element = Laboratory.`T-BIL`, filter = '< 2.0')\nres = df3.select(distinct(Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Diagnosis))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = 'like 1991-10%')\ndf3 = df2.where(element = [MASK], filter = '< 2.0')\nres = df3.select(distinct([MASK], [MASK], [MASK], [MASK], [MASK], [MASK]))\n```"}
{"idx": 1193, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.ANA Pattern, filter = \"!= 'P'\")\ndf2 = df1.where(element = Patient.SEX, filter = 'F')\ndf3 = df2.where(element = Patient.Birthday, filter = \"BETWEEN '1980-01-01' AND '1989-12-31'\")\nres = df3.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = \"!= 'P'\")\ndf2 = df1.where(element = [MASK], filter = 'F')\ndf3 = df2.where(element = [MASK], filter = \"BETWEEN '1980-01-01' AND '1989-12-31'\")\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 1194, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Diagnosis, filter = 'PSS')\ndf2 = df1.where(element = Laboratory.CRP, filter = '> 2')\ndf3 = df2.where(element = Laboratory.CRE, filter = 1)\ndf4 = df3.where(element = Laboratory.LDH, filter = 123)\nres = df4.select(Patient.SEX)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'PSS')\ndf2 = df1.where(element = [MASK], filter = '> 2')\ndf3 = df2.where(element = [MASK], filter = 1)\ndf4 = df3.where(element = [MASK], filter = 123)\nres = df4.select([MASK])\n```"}
{"idx": 1195, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Patient.Diagnosis, filter = 'SLE')\ndf3 = df2.where(element = Laboratory.PLT, filter = '> 400')\nres = df3.select(avg(Laboratory.ALB))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = 'SLE')\ndf3 = df2.where(element = [MASK], filter = '> 400')\nres = df3.select(avg([MASK]))\n```"}
{"idx": 1196, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Diagnosis, filter = 'SLE')\ndf2 = df1.groupby(Examination.Symptoms).count()\nres = df2.orderby(by = count(Examination.Symptoms), desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SLE')\ndf2 = df1.groupby([MASK]).count()\nres = df2.orderby(by = count([MASK]), desc).limit(1)\n```"}
{"idx": 1197, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.ID, filter = 48473)\nres = df1.select(Patient.Description, Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 48473)\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1198, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Patient.Diagnosis, filter = 'APS')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = 'APS')\nres = df2.count()\n```"}
{"idx": 1199, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.Date, filter = \"like '1997%'\")\ndf2 = df1.where(element = Laboratory.TP, filter = 'between 6 and 8.5')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"like '1997%'\")\ndf2 = df1.where(element = [MASK], filter = 'between 6 and 8.5')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1200, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Symptoms, filter = 'thrombocytopenia')\ndf2 = df1.where(element = Patient.Diagnosis, filter = 'like', value = '%SLE%')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'thrombocytopenia')\ndf2 = df1.where(element = [MASK], filter = 'like', value = '%SLE%')\nres = df2.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 1201, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'RA')\ndf2 = df1.where(element = Patient.SEX, filter = 'F').where(element = Patient.Birthday, filter = \"like '1980%'\")\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.Diagnosis], filter = 'RA')\ndf2 = df1.where(element = [Patient.SEX], filter = 'F').where(element = [Patient.Birthday], filter = \"like '1980%'\")\nres = df.select((df2.count() * 100.0 / df1.count()))\n```"}
{"idx": 1202, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Examination.`Examination Date`, filter = 'between 1995-01-01 and 1997-12-31')\ndf3 = df2.where(element = Examination.Diagnosis, filter = 'Behcet')\ndf4 = df3.where(element = Patient.Admission, filter = '-')\nres = df4.count(distinct = Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = 'between 1995-01-01 and 1997-12-31')\ndf3 = df2.where(element = [MASK], filter = 'Behcet')\ndf4 = df3.where(element = [MASK], filter = '-')\nres = df4.count(distinct = [MASK])\n```"}
{"idx": 1203, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Laboratory.WBC, filter = '< 3.5')\nres = df2.count(distinct = Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '< 3.5')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 1204, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.ID, filter = 821298)\nres = df1.select(Examination.ID, Examination.`Examination Date`, Patient.`First Date`, julianday(Examination.`Examination Date`) - julianday(Patient.`First Date`) as Days_Between)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 821298)\nres = df1.select([MASK], [MASK], [MASK], julianday([MASK]) - julianday([MASK]) as [MASK])\n```"}
{"idx": 1205, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.ID, filter = 57266)\ndf2 = df1.where(element = Patient.SEX, filter = 'M').where(element = Laboratory.UA, filter = '<= 8.0')\ndf3 = df1.where(element = Patient.SEX, filter = 'F').where(element = Laboratory.UA, filter = '<= 6.5')\ndf4 = df2.union(df3)\nres = df4.select(Patient.ID, Patient.SEX, Laboratory.UA, case(when = 'Within Normal Range', when = 'Outside Normal Range'))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.ID], filter = 57266)\ndf2 = df1.where(element = [Patient.SEX], filter = 'M').where(element = [Laboratory.UA], filter = '<= 8.0')\ndf3 = df1.where(element = [Patient.SEX], filter = 'F').where(element = [Laboratory.UA], filter = '<= 6.5')\ndf4 = df2.union(df3)\nres = df4.select([Patient.ID], [Patient.SEX], [Laboratory.UA], case(when = 'Within Normal Range', when = 'Outside Normal Range'))\n```"}
{"idx": 1206, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.ID, filter = 48473)\ndf2 = df1.where(element = Laboratory.GOT, filter = '>= 60')\nres = df2.select(Laboratory.Date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 48473)\ndf2 = df1.where(element = [MASK], filter = '>= 60')\nres = df2.select([MASK])\n```"}
{"idx": 1207, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GOT, filter = '< 60')\ndf2 = df1.where(element = Laboratory.Date, filter = \"like '1994%'\")\nres = df2.select(Patient.ID, Patient.SEX, Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 60')\ndf2 = df1.where(element = [MASK], filter = \"like '1994%'\")\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1208, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.GPT, filter = '>= 60')\nres = df2.select(distinct(Patient.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '>= 60')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1209, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GPT, filter = '> 60')\ndf2 = df1.orderby(by = Patient.Birthday, asc)\nres = df2.select(Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 60')\ndf2 = df1.orderby(by = [MASK], asc)\nres = df2.select([MASK])\n```"}
{"idx": 1210, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.LDH, filter = '< 500')\nres = df1.avg(Laboratory.LDH)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 500')\nres = df1.avg([MASK])\n```"}
{"idx": 1211, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.LDH, filter = 'BETWEEN 600 AND 800')\nres = df1.select(Patient.ID, subtract(strftime('%Y', 'now'), Patient.Birthday) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = Laboratory.LDH, filter = 'BETWEEN 600 AND 800')\nres = df1.select(Patient.ID, subtract(strftime('%Y', 'now'), Patient.Birthday) as age)\n```"}
{"idx": 1212, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.ALP, filter = '< 300')\nres = df1.select(distinct(Patient.Admission))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 300')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1213, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = '1982-04-01')\nres = df1.select(Patient.ID, case(element = Laboratory.ALP, when = '< 300', then = 'Within Normal Range', else = 'Above Normal Range'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1982-04-01')\nres = df1.select([MASK], case(element = [MASK], when = '< 300', then = 'Within Normal Range', else = 'Above Normal Range'))\n```"}
{"idx": 1214, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.TP, filter = '< 6.0')\nres = df1.select(Patient.ID, Patient.SEX, Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 6.0')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1215, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Laboratory.TP, filter = '> 8.5')\nres = df2.select(Patient.ID, Laboratory.Date, Laboratory.TP, subtract(Laboratory.TP, 8.5) as TP_Deviation)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '> 8.5')\nres = df2.select([MASK], [MASK], [MASK], subtract([MASK], 8.5) as [MASK])\n```"}
{"idx": 1216, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.ALB, filter = '<= 3.5')\ndf3 = df1.where(element = Laboratory.ALB, filter = '>= 5.5')\ndf4 = df2.union(df3)\nres = df4.orderby(by = Patient.Birthday, desc).select(Patient.ID, Patient.Birthday).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.SEX], filter = 'M')\ndf2 = df1.where(element = [Laboratory.ALB], filter = '<= 3.5')\ndf3 = df1.where(element = [Laboratory.ALB], filter = '>= 5.5')\ndf4 = df2.union(df3)\nres = df4.orderby(by = [Patient.Birthday], desc).select([Patient.ID, Patient.Birthday]).distinct()\n```"}
{"idx": 1217, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = 'year = 1982')\ndf2 = df1.where(element = Laboratory.ALB, filter = 'BETWEEN 3.5 AND 5.5')\nres = df2.select(Patient.ID, Patient.Birthday, Laboratory.Date, Laboratory.ALB, if(Laboratory.ALB, 'Within Normal Range', 'Outside Normal Range'))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.Birthday], filter = 'year = 1982')\ndf2 = df1.where(element = [Laboratory.ALB], filter = 'BETWEEN 3.5 AND 5.5')\nres = df2.select([Patient.ID, Patient.Birthday, Laboratory.Date, Laboratory.ALB, if(Laboratory.ALB, 'Within Normal Range', 'Outside Normal Range')])\n```"}
{"idx": 1218, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df.where(element = Laboratory.UA, filter = '> 6.5').where(element = Patient.SEX, filter = 'F')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df.where(element = [MASK], filter = '> 6.5').where(element = [MASK], filter = 'F')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```"}
{"idx": 1219, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(Laboratory.ID).select(Laboratory.ID, max(Laboratory.Date) as LatestDate)\ndf2 = df.where(element = Laboratory.Date, filter = 'equals', df1.LatestDate)\ndf3 = df2.where(element = Patient.SEX, filter = 'M', operation = 'and', element2 = Laboratory.UA, filter2 = '< 8.0').or(df2.where(element = Patient.SEX, filter = 'F', operation = 'and', element2 = Laboratory.UA, filter2 = '< 6.5'))\nres = df3.select(avg(Laboratory.UA))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).select([MASK], max([MASK]) as LatestDate)\ndf2 = df.where(element = [MASK], filter = 'equals', df1.LatestDate)\ndf3 = df2.where(element = [MASK], filter = 'M', operation = 'and', element2 = [MASK], filter2 = '< 8.0').or(df2.where(element = [MASK], filter = 'F', operation = 'and', element2 = [MASK], filter2 = '< 6.5'))\nres = df3.select(avg([MASK]))\n```"}
{"idx": 1220, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.UN, filter = 29)\nres = df1.select(Patient.ID, Patient.SEX, Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 29)\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1221, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'RA')\ndf2 = df1.where(element = Laboratory.UN, filter = '< 30')\nres = df2.select(Patient.ID, Patient.SEX, Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'RA')\ndf2 = df1.where(element = [MASK], filter = '< 30')\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1222, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.CRE, filter = '>= 1.5')\nres = df2.count(distinct = Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '>= 1.5')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 1223, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.CRE, filter = '>= 1.5')\ndf2 = df1.groupby(Patient.SEX).count()\nres = df.select(if(df2.where(Patient.SEX, filter = 'M').count() > df2.where(Patient.SEX, filter = 'F').count(), 'True', 'False'))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [LABORATORY.CRE], filter = '>= 1.5')\ndf2 = df1.groupby([PATIENT.SEX]).count()\nres = df.select(if(df2.where([PATIENT.SEX], filter = 'M').count() > df2.where([PATIENT.SEX], filter = 'F').count(), 'True', 'False'))\n```"}
{"idx": 1224, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`T-BIL`, filter = max(Laboratory.`T-BIL`))\nres = df1.select(Patient.ID, Patient.SEX, Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1225, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`T-BIL`, filter = '>= 2.0')\ndf2 = df1.groupby(Patient.SEX).agg(group_concat(distinct(Laboratory.ID)))\nres = df2.select(Patient.SEX, df2.group_concat(distinct(Laboratory.ID)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 2.0')\ndf2 = df1.groupby([MASK]).agg(group_concat(distinct([MASK])))\nres = df2.select([MASK], df2.group_concat(distinct([MASK])))\n```"}
{"idx": 1226, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = min(Patient.Birthday))\ndf2 = df1.orderby(by = Laboratory.T-CHO, desc).limit(1)\nres = df2.select(Patient.ID, Laboratory.T-CHO)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1227, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.`T-CHO`, filter = '>= 250')\nres = df2.select(avg(subtract(year(now()), year(Patient.Birthday)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '>= 250')\nres = df2.select([MASK])\n```"}
{"idx": 1228, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.TG, filter = '> 300')\nres = df1.select(Patient.ID, Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 300')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1229, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.TG, filter = '>= 200')\ndf2 = df.where(element = subtract(strftime('%Y', 'now'), strftime('%Y', Patient.Birthday)), filter = '> 50')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 200')\ndf2 = df.where(element = [MASK], filter = '> 50')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1230, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Admission, filter = '-')\ndf2 = df1.where(element = Laboratory.CPK, filter = '< 250')\nres = df2.select(distinct(Patient.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = '< 250')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1231, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Patient.Birthday, filter = \"between '1936' and '1956'\")\ndf3 = df2.where(element = Laboratory.CPK, filter = '>= 250')\nres = df3.count(distinct = Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = \"between '1936' and '1956'\")\ndf3 = df2.where(element = [MASK], filter = '>= 250')\nres = df3.count(distinct = [MASK])\n```"}
{"idx": 1232, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GLU, filter = '>= 180')\ndf2 = df1.where(element = Laboratory.`T-CHO`, filter = '< 250')\nres = df2.select(Patient.ID, Patient.SEX, subtract(strftime('%Y', 'now'), strftime('%Y', Patient.Birthday)) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [LABORATORY.GLU], filter = '>= 180')\ndf2 = df1.where(element = [LABORATORY.`T-CHO`], filter = '< 250')\nres = df2.select([PATIENT.ID, PATIENT.SEX, subtract(strftime('%Y', 'now'), strftime('%Y', PATIENT.Birthday)) as age])\n```"}
{"idx": 1233, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Description, filter = 'year = 1991')\ndf2 = df1.where(element = Laboratory.GLU, filter = '< 180')\nres = df2.select(Patient.ID, Laboratory.GLU)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'year = 1991')\ndf2 = df1.where(element = [MASK], filter = '< 180')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1234, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.WBC, filter = '<= 3.5').orwhere(element = Laboratory.WBC, filter = '>= 9.0')\ndf2 = df1.groupby(Patient.SEX, Patient.ID).orderby(by = Patient.SEX, desc, by = Patient.Birthday)\nres = df2.select(Patient.ID, Patient.SEX, Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '<= 3.5').orwhere(element = [MASK], filter = '>= 9.0')\ndf2 = df1.groupby([MASK], [MASK]).orderby(by = [MASK], desc, by = [MASK])\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1235, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.RBC, filter = '< 3.5')\nres = df1.select(Patient.ID, Patient.Diagnosis, subtract(year(now()), year(Patient.Birthday)) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = Laboratory.RBC, filter = '< 3.5')\nres = df1.select(Patient.ID, Patient.Diagnosis, subtract(now(), Patient.Birthday) as age)\n```"}
{"idx": 1236, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = subtract(current_year, Patient.Birthday), filter = '>= 50')\ndf3 = df2.where(element = Laboratory.RBC, filter = '<= 3.5 OR >= 6.0')\ndf4 = df3.where(element = Patient.Admission, filter = '+')\nres = df4.select(Patient.ID, Patient.SEX, Patient.Birthday, Patient.Admission)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'F')\ndf2 = df1.where(element = [MASK], filter = '>= 50')\ndf3 = df2.where(element = [MASK], filter = '<= 3.5 OR >= 6.0')\ndf4 = df3.where(element = [MASK], filter = '+')\nres = df4.select([MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 1237, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Admission, filter = '-')\ndf2 = df1.where(element = Laboratory.HGB, filter = '< 10')\nres = df2.select(Patient.ID, Patient.SEX).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = '< 10')\nres = df2.select([MASK], [MASK]).distinct()\n```"}
{"idx": 1238, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'SLE')\ndf2 = df1.where(element = Laboratory.HGB, filter = '> 10').where(element = Laboratory.HGB, filter = '< 17')\ndf3 = df2.orderby(by = Patient.Birthday, asc).limit(1)\nres = df3.select(Patient.ID, Patient.SEX)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'SLE')\ndf2 = df1.where(element = [MASK], filter = '> 10').where(element = [MASK], filter = '< 17')\ndf3 = df2.orderby(by = [MASK], asc).limit(1)\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 1239, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.HCT, filter = '>= 52')\ndf2 = df1.groupby(Patient.ID).having(element = count(Laboratory.ID), filter = '>= 2')\nres = df2.select(Patient.ID, subtract(strftime('%Y', 'now'), strftime('%Y', Patient.Birthday)) as age)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '>= 52')\ndf2 = df1.groupby([MASK]).having(element = count([MASK]), filter = '>= 2')\nres = df2.select([MASK], subtract(strftime('%Y', 'now'), strftime('%Y', [MASK])) as [MASK])\n```"}
{"idx": 1240, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.Date, filter = 'like 1991%')\ndf2 = df1.where(element = Laboratory.HCT, filter = '< 29')\nres = df2.avg(Laboratory.HCT)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like 1991%')\ndf2 = df1.where(element = [MASK], filter = '< 29')\nres = df2.avg([MASK])\n```"}
{"idx": 1241, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.PLT, filter = '< 100')\ndf2 = df.where(element = Laboratory.PLT, filter = '> 400')\nres = df.select(df1.count(), df2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 100')\ndf2 = df.where(element = [MASK], filter = '> 400')\nres = df.select(df1.count(), df2.count())\n```"}
{"idx": 1242, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.Date, filter = \"year = 1984\")\ndf2 = df.where(element = Patient.Birthday, filter = \"age < 50\")\ndf3 = df2.where(element = Laboratory.PLT, filter = \"between 100 and 400\")\nres = df3.select(distinct(Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.Date, Laboratory.PLT))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = \"year = 1984\")\ndf2 = df.where(element = [MASK], filter = \"< 50\")\ndf3 = df2.where(element = [MASK], filter = \"between 100 and 400\")\nres = df3.select(distinct([MASK], [MASK], [MASK], [MASK], [MASK]))\n```"}
{"idx": 1243, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.PT, filter = '>= 14')\ndf2 = df1.where(element = subtract(strftime('%Y', 'now'), strftime('%Y', Patient.Birthday)), filter = '> 55')\ndf3 = df2.where(element = Patient.SEX, filter = 'F')\nres = df.select((df3.count() * 100.0 / df2.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '>= 14')\ndf2 = df1.where(element = [MASK], filter = '> 55')\ndf3 = df2.where(element = [MASK], filter = 'F')\nres = df3.count() * 100.0 / df2.count()\n```"}
{"idx": 1244, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.PT, filter = '< 14')\ndf2 = df.where(element = Patient.`First Date`, filter = \"year > '1992'\")\nres = df2.select(Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 14')\ndf2 = df.where(element = [MASK], filter = \"year > '1992'\")\nres = df2.select([MASK], [MASK], [MASK], [MASK], [MASK], [MASK], [MASK]).distinct()\n```"}
{"idx": 1245, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.`Examination Date`, filter = '> 1997-01-01')\ndf2 = df1.where(element = Laboratory.APTT, filter = '>= 45')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 1997-01-01')\ndf2 = df1.where(element = [MASK], filter = '>= 45')\nres = df2.count()\n```"}
{"idx": 1246, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.APTT, filter = '> 45')\ndf2 = df1.where(element = Examination.Thrombosis, filter = '0')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 45')\ndf2 = df1.where(element = [MASK], filter = '0')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1247, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.WBC, filter = '> 3.5').where(element = Laboratory.WBC, filter = '< 9.0')\ndf3 = df2.where(element = Laboratory.FG, filter = '<= 150').or_where(element = Laboratory.FG, filter = '>= 450')\nres = df3.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '> 3.5').where(element = [MASK], filter = '< 9.0')\ndf3 = df2.where(element = [MASK], filter = '<= 150').or_where(element = [MASK], filter = '>= 450')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 1248, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = \"> '1980-01-01'\")\ndf2 = df1.where(element = Laboratory.FG, filter = '< 150 OR > 450')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.Birthday], filter = '> '1980-01-01')\ndf2 = df1.where(element = [Laboratory.FG], filter = '< 150 OR > 450')\nres = df2.select([Patient.ID]).distinct().count()\n```"}
{"idx": 1249, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`U-PRO`, filter = '>= 30')\nres = df1.select(distinct = Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 30')\nres = df1.select(distinct = [MASK])\n```"}
{"idx": 1250, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'SLE')\ndf2 = df1.where(element = Laboratory.`U-PRO`, filter = '> 0')\ndf3 = df2.where(element = Laboratory.`U-PRO`, filter = '< 30')\nres = df3.select(distinct(Patient.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'SLE')\ndf2 = df1.where(element = [MASK], filter = '> 0')\ndf3 = df2.where(element = [MASK], filter = '< 30')\nres = df3.select(distinct([MASK]))\n```"}
{"idx": 1251, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.IGG, filter = '>= 2000')\nres = df1.select_distinct(Laboratory.ID).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 2000')\nres = df1.select_distinct([MASK]).count()\n```"}
{"idx": 1252, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.IGG, filter = '> 900').where(element = Laboratory.IGG, filter = '< 2000')\ndf2 = df1.where(element = Examination.Symptoms, filter = 'is not null')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '> 900').where(element = [MASK], filter = '< 2000')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1253, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.IGA, filter = 'BETWEEN 80 AND 500')\ndf2 = df1.max(Laboratory.IGA)\ndf3 = df.where(element = Laboratory.IGA, filter = df2)\nres = df3.select(Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'BETWEEN 80 AND 500')\ndf2 = df1.max([MASK])\ndf3 = df.where(element = [MASK], filter = df2)\nres = df3.select([MASK])\n```"}
{"idx": 1254, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.IGA, filter = '> 80')\ndf2 = df1.where(element = Laboratory.IGA, filter = '< 500')\ndf3 = df2.where(element = Patient.`First Date`, filter = 'year >= 1990')\nres = df3.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '> 80')\ndf2 = df1.where(element = [MASK], filter = '< 500')\ndf3 = df2.where(element = [MASK], filter = 'year >= 1990')\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 1255, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.IGM, filter = '<= 40 OR >= 400')\ndf2 = df1.groupby(Laboratory.Diagnosis).count()\ndf3 = df2.orderby(by = count(Laboratory.Diagnosis), desc).limit(1)\nres = df3.select(Laboratory.Diagnosis, count(Laboratory.Diagnosis) as DiagnosisCount)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '<= 40 OR >= 400')\ndf2 = df1.groupby([MASK]).count()\ndf3 = df2.orderby(by = count([MASK]), desc).limit(1)\nres = df3.select([MASK], count([MASK]) as [MASK])\n```"}
{"idx": 1256, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.CRP, filter = '+')\ndf2 = df1.where(element = Patient.Description, filter = 'is NULL')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = 'is NULL')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1257, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.CRE, filter = '>= 1.5')\ndf2 = df1.where(element = subtract(strftime('%Y', 'now'), Patient.Birthday), filter = '< 70')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 1.5')\ndf2 = df1.where(element = [MASK], filter = '< 70')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1258, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.RA, filter = 'IN')\ndf2 = df.where(element = Examination.KCT, filter = '+')\ndf3 = df1.intersect(df2)\nres = df3.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'IN')\ndf2 = df.where(element = [MASK], filter = '+')\ndf3 = df1.intersect(df2)\nres = df3.select([MASK]).distinct().count()\n```"}
{"idx": 1259, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Birthday, filter = 'year >= 1985')\ndf2 = df1.where(element = Laboratory.RA, filter = \"in ('-', '+-')\")\nres = df2.select(distinct(Patient.Diagnosis))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.Birthday], filter = 'year >= 1985')\ndf2 = df1.where(element = [Laboratory.RA], filter = \"in ('-', '+-')\")\nres = df2.select(distinct([Patient.Diagnosis]))\n```"}
{"idx": 1260, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = subtract(subtract(strftime('%Y', 'now'), strftime('%Y', Patient.Birthday)), subtract(strftime('%m-%d', 'now'), strftime('%m-%d', Patient.Birthday))), filter = '> 60')\ndf2 = df1.where(element = Laboratory.RF, filter = '< 20')\nres = df2.select(distinct(Patient.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = subtract(subtract(strftime('%Y', 'now'), strftime('%Y', [MASK])), subtract(strftime('%m-%d', 'now'), strftime('%m-%d', [MASK]))), filter = '> 60')\ndf2 = df1.where(element = [MASK], filter = '< 20')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1261, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.RF, filter = '< 20')\ndf2 = df1.where(element = Examination.Thrombosis, filter = '= 0')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 20')\ndf2 = df1.where(element = [MASK], filter = '= 0')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1262, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.C3, filter = '> 35')\ndf2 = df1.where(element = Examination.ANA Pattern, filter = 'P')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 35')\ndf2 = df1.where(element = [MASK], filter = 'P')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1263, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.HCT, filter = '<= 29 OR >= 52')\ndf2 = df1.orderby(by = Examination.aCL IgA, desc).limit(1)\nres = df2.select(Examination.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '<= 29 OR >= 52')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1264, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Thrombosis, filter = 1)\ndf2 = df1.where(element = Laboratory.C4, filter = '> 10')\nres = df2.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 1)\ndf2 = df1.where(element = [MASK], filter = '> 10')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1265, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.RNP, filter = '-')\ndf2 = df.where(element = Patient.Admission, filter = '+')\nres = df1.intersect(df2).select(distinct(Patient.ID)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df.where(element = [MASK], filter = '+')\nres = df1.intersect(df2).select(distinct([MASK])).count()\n```"}
{"idx": 1266, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.RNP, filter = \"NOT IN ('-', '+-')\")\ndf2 = df1.orderby(by = Patient.Birthday, desc).limit(1)\nres = df2.select(Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"NOT IN ('-', '+-')\")\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1267, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Thrombosis, filter = 0)\ndf2 = df1.where(element = Laboratory.SM, filter = \"IN ('-', '+-')\")\nres = df2.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 0)\ndf2 = df1.where(element = [MASK], filter = \"IN ('-', '+-')\")\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1268, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.SM, filter = \"NOT IN\", values = ['negative', '0'])\ndf2 = df1.groupby(Patient.ID, Patient.Birthday).orderby(by = Patient.Birthday, desc).limit(3)\nres = df2.select(Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"NOT IN\", values = ['negative', '0'])\ndf2 = df1.groupby([MASK], [MASK]).orderby(by = [MASK], desc).limit(3)\nres = df2.select([MASK])\n```"}
{"idx": 1269, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.`Examination Date`, filter = \"> '1997-01-01'\")\ndf2 = df1.where(element = Laboratory.SC170, filter = \"IN ('negative', '0')\")\nres = df2.select(distinct(Examination.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> ''1997-01-01'')\ndf2 = df1.where(element = [MASK], filter = \"IN ('negative', '0')\")\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1270, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.SC170, filter = 'negative', '0')\ndf2 = df1.where(element = Patient.SEX, filter = 'F')\ndf3 = df2.where(element = Examination.Symptoms, filter = 'is NULL')\nres = df3.count(distinct = Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'negative', '0')\ndf2 = df1.where(element = [MASK], filter = 'F')\ndf3 = df2.where(element = [MASK], filter = 'is NULL')\nres = df3.count(distinct = [MASK])\n```"}
{"idx": 1271, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.SSA, filter = 'IN', values = [\"-\", \"+-\"])\ndf2 = df.where(element = Patient.First Date, filter = '< 2000', mode = 'year')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'IN', values = [\"-\", \"+-\"])\ndf2 = df.where(element = [MASK], filter = '< 2000', mode = 'year')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1272, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.SSA, filter = \"NOT IN\", values = ['negative', '0'])\ndf2 = df1.orderby(by = Patient.First Date, asc).limit(1)\nres = df2.select(Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"NOT IN\", values = ['negative', '0'])\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1273, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.SSB, filter = 'IN (-, +-)')\ndf2 = df1.where(element = Examination.Diagnosis, filter = 'SLE')\nres = df2.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'IN (-, +)')\ndf2 = df1.where(element = [MASK], filter = 'SLE')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1274, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.SSB, filter = 'negative', '0')\ndf2 = df1.where(element = Examination.Symptoms, filter = 'is not null')\nres = df2.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'negative', '0')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1275, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.CENTROMEA, filter = 'IN', values = ['-', '+-'])\ndf3 = df2.where(element = Laboratory.SSB, filter = 'IN', values = ['-', '+-'])\nres = df3.count(distinct = Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = 'IN', values = ['-', '+-'])\ndf3 = df2.where(element = [MASK], filter = 'IN', values = ['-', '+-'])\nres = df3.count(distinct = [MASK])\n```"}
{"idx": 1276, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.DNA, filter = '>= 8')\nres = df1.select(distinct(Patient.Diagnosis))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 8')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1277, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.DNA, filter = '< 8')\ndf2 = df1.where(element = Patient.Description, filter = 'is null')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 8')\ndf2 = df1.where(element = [MASK], filter = 'is null')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1278, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.IGG, filter = '> 900').where(element = Laboratory.IGG, filter = '< 2000')\ndf2 = df1.where(element = Patient.Admission, filter = '+')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 900').where(element = [MASK], filter = '< 2000')\ndf2 = df1.where(element = [MASK], filter = '+')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1279, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GOT, filter = '>= 60')\ndf2 = df1.where(element = Patient.Diagnosis, filter = 'SLE')\nres = df.select(cast(df2.count(), real) * 100 / df1.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '>= 60')\ndf2 = df1.where(element = [MASK], filter = 'SLE')\nres = df2.select(cast(df2.count(), real) * 100 / df1.count())\n```"}
{"idx": 1280, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.GOT, filter = '< 60')\nres = df2.count(distinct = Patient.ID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '< 60')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 1281, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GOT, filter = '>= 60')\nres = df1.select(max(Patient.Birthday))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 60')\nres = df1.select([MASK])\n```"}
{"idx": 1282, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GPT, filter = '< 60')\ndf2 = df1.groupby(Laboratory.ID).orderby(by = max(Laboratory.GPT), desc).limit(3)\nres = df.where(element = Patient.ID, filter = 'in', value = df2.select(Laboratory.ID)).orderby(by = Patient.Birthday, asc).select(Patient.Birthday)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 60')\ndf2 = df1.groupby([MASK]).orderby(by = max([MASK]), desc).limit(3)\nres = df.where(element = [MASK], filter = 'in', value = df2.select([MASK])).orderby(by = [MASK], asc).select([MASK])\n```"}
{"idx": 1283, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GOT, filter = '< 60')\ndf2 = df1.where(element = Patient.SEX, filter = 'M')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 60')\ndf2 = df1.where(element = [MASK], filter = 'M')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1284, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.LDH, filter = '< 500')\ndf2 = df1.orderby(by = [Laboratory.LDH desc, Patient.First Date asc]).limit(1)\nres = df2.select(Patient.ID, Patient.First Date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [Laboratory.LDH], filter = '< 500')\ndf2 = df1.orderby(by = [Laboratory.LDH desc, Patient.First Date asc]).limit(1)\nres = df2.select([Patient.ID, Patient.First Date])\n```"}
{"idx": 1285, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.First Date, filter = max(Patient.First Date))\ndf2 = df.where(element = Laboratory.LDH, filter = '>= 500')\nres = df2.orderby(by = Laboratory.Date, desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\ndf2 = df.where(element = [MASK], filter = '>= 500')\nres = df2.orderby(by = [MASK], desc).limit(1)\n```"}
{"idx": 1286, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.ALP, filter = '>= 300')\ndf2 = df1.where(element = Patient.Admission, filter = '+')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 300')\ndf2 = df1.where(element = [MASK], filter = '+')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1287, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Admission, filter = '-')\ndf2 = df1.where(element = Laboratory.ALP, filter = '< 300')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '-')\ndf2 = df1.where(element = [MASK], filter = '< 300')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1288, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.TP, filter = '< 6.0')\nres = df1.select(distinct(Patient.Diagnosis))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 6.0')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1289, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'SJS')\ndf2 = df1.where(element = Laboratory.TP, filter = '> 6.0').where(element = Laboratory.TP, filter = '< 8.5')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SJS')\ndf2 = df1.where(element = [MASK], filter = '> 6.0').where(element = [MASK], filter = '< 8.5')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1290, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.ALB, filter = '> 3.5').where(element = Laboratory.ALB, filter = '< 5.5')\ndf2 = df1.orderby(by = Laboratory.ALB, desc).limit(1)\nres = df2.select(Laboratory.Date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 3.5').where(element = [MASK], filter = '< 5.5')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1291, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.ALB, filter = '> 3.5').where(element = Laboratory.ALB, filter = '< 5.5')\ndf3 = df2.where(element = Laboratory.TP, filter = 'BETWEEN 6.0 AND 8.5')\nres = df3.select(distinct(Patient.ID)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '> 3.5').where(element = [MASK], filter = '< 5.5')\ndf3 = df2.where(element = [MASK], filter = 'BETWEEN 6.0 AND 8.5')\nres = df3.select(distinct([MASK])).count()\n```"}
{"idx": 1292, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'F')\ndf2 = df1.where(element = Laboratory.UA, filter = '<= 6.50')\ndf3 = df2.orderby(by = Laboratory.UA, desc).limit(1)\nres = df3.select(Examination.aCL IgG, Examination.aCL IgM, Examination.aCL IgA)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Patient.SEX], filter = 'F')\ndf2 = df1.where(element = [Laboratory.UA], filter = '<= 6.50')\ndf3 = df2.orderby(by = [Laboratory.UA], desc).limit(1)\nres = df3.select([Examination.aCL IgG, Examination.aCL IgM, Examination.aCL IgA])\n```"}
{"idx": 1293, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.CRE, filter = '< 1.5')\nres = df1.select(max(Examination.ANA))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 1.5')\nres = df1.select([MASK])\n```"}
{"idx": 1294, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.CRE, filter = '< 1.5')\ndf2 = df.where(element = Examination.aCL IgA, filter = max(Examination.aCL IgA))\nres = df1.select(distinct(Examination.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '< 1.5')\ndf2 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1295, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`T-BIL`, filter = '>= 2.0')\ndf2 = df1.where(element = Examination.`ANA Pattern`, filter = 'LIKE %P%')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 2.0')\ndf2 = df1.where(element = [MASK], filter = 'LIKE %P%')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1296, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`T-BIL`, filter = '< 2.0')\ndf2 = df1.groupby(Laboratory.ID).agg(max(Laboratory.`T-BIL`))\nres = df.where(element = Examination.ID, filter = 'in', value = df2.select(Laboratory.ID)).select(Examination.ANA)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Laboratory.`T-BIL`], filter = '< 2.0')\ndf2 = df1.groupby([Laboratory.ID]).agg(max([Laboratory.`T-BIL`]))\nres = df.where(element = [Examination.ID], filter = 'in', value = df2.select([Laboratory.ID])).select([Examination.ANA])\n```"}
{"idx": 1297, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`T-CHO`, filter = '>= 250')\ndf2 = df1.where(element = Examination.KCT, filter = '-')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 250')\ndf2 = df1.where(element = [MASK], filter = '-')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1298, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.`T-CHO`, filter = '< 250')\ndf2 = df1.where(element = Examination.`ANA Pattern`, filter = 'P')\nres = df2.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 250')\ndf2 = df1.where(element = [MASK], filter = 'P')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1299, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.TG, filter = '< 200')\ndf2 = df1.where(element = Examination.Symptoms, filter = 'is not null')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 200')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1300, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.TG, filter = '< 200')\ndf2 = df1.orderby(by = Laboratory.TG, desc).limit(1)\nres = df2.select(Patient.Diagnosis)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 200')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1301, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Thrombosis, filter = 0)\ndf2 = df1.where(element = Laboratory.CPK, filter = '< 250')\nres = df2.select(distinct(Examination.ID))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 0)\ndf2 = df1.where(element = [MASK], filter = '< 250')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1302, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.CPK, filter = '< 250')\ndf2 = df1.where(element = Examination.KCT, filter = '+').orwhere(element = Examination.RVVT, filter = '+').orwhere(element = Examination.LAC, filter = '+')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '< 250')\ndf2 = df1.where(element = [MASK1], filter = '+').orwhere(element = [MASK2], filter = '+').orwhere(element = [MASK3], filter = '+')\nres = df2.select([MASK4]).distinct().count()\n```"}
{"idx": 1303, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GLU, filter = '> 180')\nres = df1.select(min(Patient.Birthday))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 180')\nres = df1.select([MASK])\n```"}
{"idx": 1304, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.GLU, filter = '< 180')\ndf2 = df1.where(element = Examination.Thrombosis, filter = '0')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 180')\ndf2 = df1.where(element = [MASK], filter = '0')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1305, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Admission, filter = '+')\ndf2 = df1.where(element = Laboratory.WBC, filter = 'BETWEEN 3.5 AND 9.0')\nres = df2.select(distinct(Patient.ID)).count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '+')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN 3.5 AND 9.0')\nres = df2.select(distinct([MASK])).count()\n```"}
{"idx": 1306, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'SLE')\ndf2 = df1.where(element = Laboratory.WBC, filter = 'BETWEEN 3.5 AND 9.0')\nres = df2.select(Patient.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SLE')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN 3.5 AND 9.0')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1307, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.RBC, filter = '<= 3.5')\ndf2 = df.where(element = Laboratory.RBC, filter = '>= 6.0')\ntmp_res1 = df1.union(df2)\ndf3 = df.where(element = Patient.Admission, filter = '-')\nres = tmp_res1.select(Patient.ID).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [Laboratory.RBC], filter = '<= 3.5')\ndf2 = df.where(element = [Laboratory.RBC], filter = '>= 6.0')\ntmp_res1 = df1.union(df2)\ndf3 = df.where(element = [Patient.Admission], filter = '-')\nres = tmp_res1.select([Patient.ID]).distinct()\n```"}
{"idx": 1308, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Laboratory.PLT, filter = '> 100').where(element = Laboratory.PLT, filter = '< 400')\ndf2 = df1.where(element = Examination.Diagnosis, filter = 'is not null')\nres = df2.select(Laboratory.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 100').where(element = [MASK], filter = '< 400')\ndf2 = df1.where(element = [MASK], filter = 'is not null')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1309, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.Diagnosis, filter = 'MCTD')\ndf2 = df1.where(element = Laboratory.PLT, filter = '> 100')\ndf3 = df2.where(element = Laboratory.PLT, filter = '< 400')\nres = df3.select(Laboratory.ID, Laboratory.PLT)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'MCTD')\ndf2 = df1.where(element = [MASK], filter = '> 100')\ndf3 = df2.where(element = [MASK], filter = '< 400')\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 1310, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Patient.SEX, filter = 'M')\ndf2 = df1.where(element = Laboratory.PT, filter = '< 14')\nres = df2.avg(Laboratory.PT)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'M')\ndf2 = df1.where(element = [MASK], filter = '< 14')\nres = df2.avg([MASK])\n```"}
{"idx": 1311, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = Examination.Thrombosis, filter = '1').orwhere(element = Examination.Thrombosis, filter = '2')\ndf2 = df1.where(element = Laboratory.PT, filter = '< 14')\nres = df2.select(Examination.ID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '1').orwhere(element = [MASK], filter = '2')\ndf2 = df1.where(element = [MASK], filter = '< 14')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1312, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Angela')\ndf2 = df1.where(element = member.last_name, filter = 'Sanders')\nres = df2.select(major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Angela')\ndf2 = df1.where(element = [MASK], filter = 'Sanders')\nres = df2.select([MASK])\n```"}
{"idx": 1313, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.college, filter = 'College of Engineering')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'College of Engineering')\nres = df1.count()\n```"}
{"idx": 1314, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.department, filter = 'Art and Design')\nres = df1.select(member.first_name, member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Art and Design')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1315, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = \"Women's Soccer\")\ntmp_res1 = df1.select(event.event_id)\ndf2 = df.where(element = attendance.link_to_event, filter = 'in', value = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Women's Soccer\")\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df2.count()\n```"}
{"idx": 1316, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = \"Women's Soccer\")\nres = df1.select(member.phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Women's Soccer\")\nres = df1.select([MASK])\n```"}
{"idx": 1317, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = \"Women's Soccer\")\ndf2 = df1.where(element = member.t_shirt_size, filter = 'Medium')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Women's Soccer\")\ndf2 = df1.where(element = [MASK], filter = 'Medium')\nres = df2.count()\n```"}
{"idx": 1318, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(attendance.link_to_event).orderby(by = count(attendance.link_to_member), desc).limit(1)\nres = df1.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).orderby(by = count([MASK]), desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 1319, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Vice President')\nres = df1.select(major.college)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vice President')\nres = df1.select([MASK])\n```"}
{"idx": 1320, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Maya')\ndf2 = df1.where(element = member.last_name, filter = 'Mclean')\nres = df2.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Maya')\ndf2 = df1.where(element = [MASK], filter = 'Mclean')\nres = df2.select([MASK])\n```"}
{"idx": 1321, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Sacha')\ndf2 = df1.where(element = member.last_name, filter = 'Harrison')\ndf3 = df2.where(element = event.event_date, filter = \"like '2019%'\")\nres = df3.count(attendance.link_to_event)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sacha')\ndf2 = df1.where(element = [MASK], filter = 'Harrison')\ndf3 = df2.where(element = [MASK], filter = \"like '2019%'\")\nres = df3.count([MASK])\n```"}
{"idx": 1322, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.type, filter = 'Meeting')\ndf2 = df1.groupby(event.event_id).having(element = count(attendance.link_to_member), filter = '> 10')\nres = df2.count(distinct = event.event_id)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Meeting')\ndf2 = df1.groupby([MASK]).having(element = count([MASK]), filter = '> 10')\nres = df2.count(distinct = [MASK])\n```"}
{"idx": 1323, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(event.event_id).having(element = count(attendance.link_to_member), filter = '> 20')\ndf2 = df1.where(element = event.type, filter = '!= fundraiser')\nres = df2.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).having(element = count([MASK]), filter = '> 20')\ndf2 = df1.where(element = [MASK], filter = '!= fundraiser')\nres = df2.select([MASK])\n```"}
{"idx": 1324, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.type, filter = 'Meeting').where(element = event.event_date, filter = \"like '2020%'\")\ndf2 = df.where(element = attendance.link_to_event, filter = 'in', value = df1.select(event.event_id)).groupby(attendance.link_to_event).select(attendance.link_to_member).distinct().count()\nres = df2.select(avg())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [event.type], filter = 'Meeting').where(element = [event.event_date], filter = \"like '2020%'\")\ndf2 = df.where(element = [attendance.link_to_event], filter = 'in', value = df1.select([event.event_id])).groupby([attendance.link_to_event]).select([attendance.link_to_member]).distinct().count()\nres = df2.select(avg())\n```"}
{"idx": 1325, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.cost, filter = max(expense.cost))\nres = df1.select(expense.expense_description)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1326, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Environmental Engineering')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Environmental Engineering')\nres = df1.count()\n```"}
{"idx": 1327, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'Laugh Out Loud')\nres = df1.select(member.first_name || ' ' || member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Laugh Out Loud')\nres = df1.select([MASK])\n```"}
{"idx": 1328, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Law and Constitutional Studies')\nres = df1.select(member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Law and Constitutional Studies')\nres = df1.select([MASK])\n```"}
{"idx": 1329, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Sherri')\ndf2 = df1.where(element = member.last_name, filter = 'Ramsey')\nres = df2.select(zip_code.county)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sherri')\ndf2 = df1.where(element = [MASK], filter = 'Ramsey')\nres = df2.select([MASK])\n```"}
{"idx": 1330, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Tyler')\ndf2 = df1.where(element = member.last_name, filter = 'Hewitt')\nres = df2.select(major.college)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Tyler')\ndf2 = df1.where(element = [MASK], filter = 'Hewitt')\nres = df2.select([MASK])\n```"}
{"idx": 1331, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Vice President')\nres = df1.select(income.amount).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vice President')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 1332, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'September Meeting')\ndf2 = df1.where(element = budget.category, filter = 'Food')\nres = df2.select(budget.spent)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'September Meeting')\ndf2 = df1.where(element = [MASK], filter = 'Food')\nres = df2.select([MASK])\n```"}
{"idx": 1333, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'President')\nres = df1.select(zip_code.city, zip_code.state)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'President')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1334, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.state, filter = 'Illinois')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [STATE], filter = 'Illinois')\nres = df1.select([FIRST_NAME || ' ' || LAST_NAME as full_name])\n```"}
{"idx": 1335, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'September Meeting')\ntmp_res1 = df1.select(event.event_id)\n\ndf2 = df.where(element = budget.link_to_event, filter = tmp_res1)\ndf3 = df2.where(element = budget.category, filter = 'Advertisement')\nres = df3.select(budget.spent)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'September Meeting')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = tmp_res1)\ndf3 = df2.where(element = [MASK], filter = 'Advertisement')\nres = df3.select([MASK])\n```"}
{"idx": 1336, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Pierce').where(element = member.last_name, filter = 'Guidi')\ndf2 = df.where(element = member.first_name, filter = 'Guidi').where(element = member.last_name, filter = 'Pierce')\nres = df1.union(df2).select(member.first_name, member.last_name, major.department)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Pierce').where(element = [MASK], filter = 'Guidi')\ndf2 = df.where(element = [MASK], filter = 'Guidi').where(element = [MASK], filter = 'Pierce')\nres = df1.union(df2).select([MASK], [MASK], [MASK])\n```"}
{"idx": 1337, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'October Speaker')\nres = df1.select(budget.amount).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'October Speaker')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 1338, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'October Meeting')\ndf2 = df1.where(element = event.event_date, filter = '2019-10-08')\nres = df2.select(expense.expense_id, expense.expense_description, expense.approved)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'October Meeting')\ndf2 = df1.where(element = [MASK], filter = '2019-10-08')\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1339, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Elijah')\ndf2 = df1.where(element = member.last_name, filter = 'Allen')\ndf3 = df2.where(element = expense.expense_date, filter = \"like '%09%' or like '%10%'\")\nres = df3.select(avg(expense.cost))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Elijah')\ndf2 = df1.where(element = [MASK], filter = 'Allen')\ndf3 = df2.where(element = [MASK], filter = \"like '%09%' or like '%10%'\")\nres = df3.select(avg([MASK]))\n```"}
{"idx": 1340, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_date, filter = 'between 2019 and 2020')\ndf2 = df1.groupby(event.event_date).agg(sum(budget.spent))\nres = df.select(df2.where(element = event.event_date, filter = '2019').sum() - df2.where(element = event.event_date, filter = '2020').sum())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [event.event_date], filter = 'between 2019 and 2020')\ndf2 = df1.groupby([event.event_date]).agg(sum([budget.spent]))\nres = df.select(df2.where(element = [event.event_date], filter = '2019').sum() - df2.where(element = [event.event_date], filter = '2020').sum())\n```"}
{"idx": 1341, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'Spring Budget Review')\nres = df1.select(event.location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Spring Budget Review')\nres = df1.select([MASK])\n```"}
{"idx": 1342, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'Posters')\ndf2 = df1.where(element = event.event_date, filter = '2019-09-04')\ndf3 = df2.where(element = expense.expense_description, filter = 'Posters')\ndf4 = df3.where(element = expense.expense_date, filter = '2019-09-04')\nres = df4.select(expense.cost)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Posters')\ndf2 = df1.where(element = [MASK], filter = '2019-09-04')\ndf3 = df2.where(element = [MASK], filter = 'Posters')\ndf4 = df3.where(element = [MASK], filter = '2019-09-04')\nres = df4.select([MASK])\n```"}
{"idx": 1343, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Food')\ndf2 = df1.orderby(by = budget.amount, desc).limit(1)\nres = df2.select(budget.remaining)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Food')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1344, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = income.source, filter = 'Fundraising')\ndf2 = df1.where(element = income.date_received, filter = '2019-09-14')\nres = df2.select(income.notes)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Fundraising')\ndf2 = df1.where(element = [MASK], filter = '2019-09-14')\nres = df2.select([MASK])\n```"}
{"idx": 1345, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.college, filter = 'College of Humanities and Social Sciences')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'College of Humanities and Social Sciences')\nres = df1.count()\n```"}
{"idx": 1346, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Carlo')\ndf2 = df1.where(element = member.last_name, filter = 'Jacobs')\nres = df2.select(member.phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Carlo')\ndf2 = df1.where(element = [MASK], filter = 'Jacobs')\nres = df2.select([MASK])\n```"}
{"idx": 1347, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Adela')\ndf2 = df1.where(element = member.last_name, filter = \"O'Gallagher\")\nres = df2.select(zip_code.county)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Adela')\ndf2 = df1.where(element = [MASK], filter = \"O'Gallagher\")\nres = df2.select([MASK])\n```"}
{"idx": 1348, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'November Meeting')\ntmp_res1 = df1.select(event.event_id)\ndf2 = df.where(element = budget.link_to_event, filter = tmp_res1)\ndf3 = df2.where(element = budget.remaining, filter = '< 0')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [event.event_name], filter = 'November Meeting')\ntmp_res1 = df1.select([event.event_id])\ndf2 = df.where(element = [budget.link_to_event], filter = tmp_res1)\ndf3 = df2.where(element = [budget.remaining], filter = '< 0')\nres = df3.count()\n```"}
{"idx": 1349, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'September Speaker')\nres = df1.select(budget.amount).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'September Speaker')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 1350, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Post Cards, Posters')\ndf2 = df1.where(element = expense.expense_date, filter = '2019-8-20')\nres = df2.select(event.status)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Post Cards, Posters')\ndf2 = df1.where(element = [MASK], filter = '2019-8-20')\nres = df2.select([MASK])\n```"}
{"idx": 1351, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Brent')\ndf2 = df1.where(element = member.last_name, filter = 'Thomason')\nres = df2.select(major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Brent')\ndf2 = df1.where(element = [MASK], filter = 'Thomason')\nres = df2.select([MASK])\n```"}
{"idx": 1352, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Business')\ndf2 = df1.where(element = member.t_shirt_size, filter = 'Medium')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Business')\ndf2 = df1.where(element = [MASK], filter = 'Medium')\nres = df2.count()\n```"}
{"idx": 1353, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Christof')\ndf2 = df1.where(element = member.last_name, filter = 'Nielson')\nres = df2.select(zip_code.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Christof')\ndf2 = df1.where(element = [MASK], filter = 'Nielson')\nres = df2.select([MASK])\n```"}
{"idx": 1354, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Vice President')\nres = df1.select(major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vice President')\nres = df1.select([MASK])\n```"}
{"idx": 1355, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Sacha')\ndf2 = df1.where(element = member.last_name, filter = 'Harrison')\nres = df2.select(zip_code.state)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sacha')\ndf2 = df1.where(element = [MASK], filter = 'Harrison')\nres = df2.select([MASK])\n```"}
{"idx": 1356, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'President')\nres = df1.select(major.department)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'President')\nres = df1.select([MASK])\n```"}
{"idx": 1357, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Connor')\ndf2 = df1.where(element = member.last_name, filter = 'Hilton')\ndf3 = df2.where(element = income.source, filter = 'Dues')\nres = df3.select(income.date_received)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Connor')\ndf2 = df1.where(element = [MASK], filter = 'Hilton')\ndf3 = df2.where(element = [MASK], filter = 'Dues')\nres = df3.select([MASK])\n```"}
{"idx": 1358, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = income.source, filter = 'Dues')\ndf2 = df1.orderby(by = income.date_received, asc).limit(1)\nres = df2.select(member.first_name, member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [income.source], filter = 'Dues')\ndf2 = df1.orderby(by = [income.date_received], asc).limit(1)\nres = df2.select([member.first_name, member.last_name])\n```"}
{"idx": 1359, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'October Meeting').where(element = budget.category, filter = 'Advertisement')\ntmp_res1 = df1.select(budget.amount).sum()\n\ndf2 = df.where(element = event.event_name, filter = 'Yearly Kickoff').where(element = budget.category, filter = 'Advertisement')\ntmp_res2 = df2.select(budget.amount).sum()\n\nres = df.select(case(when = tmp_res1, is = 0, then = null, else = tmp_res2 / tmp_res1))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [event.event_name], filter = 'October Meeting').where(element = [budget.category], filter = 'Advertisement')\ntmp_res1 = df1.select([budget.amount]).sum()\n\ndf2 = df.where(element = [event.event_name], filter = 'Yearly Kickoff').where(element = [budget.category], filter = 'Advertisement')\ntmp_res2 = df2.select([budget.amount]).sum()\n\nres = df.select(case(when = tmp_res1, is = 0, then = null, else = tmp_res2 / tmp_res1))\n```"}
{"idx": 1360, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'November Speaker')\ntmp_res1 = df1.select(event.event_id)\n\ndf2 = df.where(element = budget.link_to_event, filter = tmp_res1).select(budget.amount).sum()\ntmp_res2 = df2\n\ndf3 = df.where(element = budget.link_to_event, filter = tmp_res1).where(element = budget.category, filter = 'Parking').select(budget.amount).sum()\ntmp_res3 = df3\n\nres = df.select((tmp_res3 * 100.0 / tmp_res2))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [EVENT_TABLE].[EVENT_COLUMN], filter = 'November Speaker')\ntmp_res1 = df1.select([EVENT_TABLE].[EVENT_ID])\n\ndf2 = df.where(element = [BUDGET_TABLE].[LINK_TO_EVENT], filter = tmp_res1).select([BUDGET_TABLE].[AMOUNT]).sum()\ntmp_res2 = df2\n\ndf3 = df.where(element = [BUDGET_TABLE].[LINK_TO_EVENT], filter = tmp_res1).where(element = [BUDGET_TABLE].[CATEGORY], filter = 'Parking').select([BUDGET_TABLE].[AMOUNT]).sum()\ntmp_res3 = df3\n\nres = df.select((tmp_res3 * 100.0 / tmp_res2))\n```"}
{"idx": 1361, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Pizza')\nres = df1.select(sum(expense.cost))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Pizza')\nres = df1.select(sum([MASK]))\n```"}
{"idx": 1362, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.county, filter = 'Orange County')\ndf2 = df1.where(element = zip_code.state, filter = 'Virginia')\nres = df2.select(zip_code.city).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Orange County')\ndf2 = df1.where(element = [MASK], filter = 'Virginia')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1363, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.college, filter = 'College of Humanities and Social Sciences')\nres = df1.select_distinct(major.department)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'College of Humanities and Social Sciences')\nres = df1.select_distinct([MASK])\n```"}
{"idx": 1364, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Amy')\ndf2 = df1.where(element = member.last_name, filter = 'Firth')\nres = df2.select(zip_code.city, zip_code.county, zip_code.state)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Amy')\ndf2 = df1.where(element = [MASK], filter = 'Firth')\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1365, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.remaining, filter = min(budget.remaining))\nres = df1.select(expense.expense_id, expense.expense_description, expense.expense_date, expense.cost, expense.approved)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [budget.remaining], filter = min([budget.remaining]))\nres = df1.select([expense.expense_id, expense.expense_description, expense.expense_date, expense.cost, expense.approved])\n```"}
{"idx": 1366, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'October Meeting')\nres = df1.select(member.member_id, member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, member.zip, member.link_to_major)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'October Meeting')\nres = df1.select([MASK], [MASK], [MASK], [MASK], [MASK], [MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 1367, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(major.college).agg(count(member.member_id))\ndf2 = df1.orderby(by = count(member.member_id), desc).limit(1)\nres = df2.select(major.college, count(member.member_id))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(count([MASK]))\ndf2 = df1.orderby(by = count([MASK]), desc).limit(1)\nres = df2.select([MASK], count([MASK]))\n```"}
{"idx": 1368, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.phone, filter = '809-555-3360')\nres = df1.select(major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '809-555-3360')\nres = df1.select([MASK])\n```"}
{"idx": 1369, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.amount, filter = max(budget.amount))\nres = df1.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = max([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1370, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Vice President')\nres = df1.select(expense.expense_id, expense.expense_description, expense.expense_date, expense.cost, expense.approved)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vice President')\nres = df1.select([MASK], [MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 1371, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = \"Women's Soccer\")\ntmp_res1 = df1.select(event.event_id)\ndf2 = df.where(element = attendance.link_to_event, filter = 'in', value = tmp_res1)\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Women's Soccer\")\ntmp_res1 = df1.select([MASK])\ndf2 = df.where(element = [MASK], filter = 'in', value = tmp_res1)\nres = df2.count()\n```"}
{"idx": 1372, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Casey')\ndf2 = df1.where(element = member.last_name, filter = 'Mason')\nres = df2.select(income.date_received)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Casey')\ndf2 = df1.where(element = [MASK], filter = 'Mason')\nres = df2.select([MASK])\n```"}
{"idx": 1373, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.state, filter = 'Maryland')\nres = df1.select(member.member_id).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Maryland')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 1374, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.phone, filter = '954-555-6240')\nres = df1.select(attendance.link_to_event).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '954-555-6240')\nres = df1.select([MASK]).distinct().count()\n```"}
{"idx": 1375, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.department, filter = 'School of Applied Sciences, Technology and Education')\nres = df1.select(member.first_name, member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'School of Applied Sciences, Technology and Education')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1376, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.status, filter = 'Closed')\ndf2 = df1.select(event.event_id, event.event_name, budget.spent / budget.amount).orderby(by = budget.spent / budget.amount, desc).limit(1)\nres = df2\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [event.status], filter = 'Closed')\ndf2 = df1.select([event.event_id, event.event_name, budget.spent / budget.amount]).orderby(by = [budget.spent / budget.amount], desc).limit(1)\nres = df2\n```"}
{"idx": 1377, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'President')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'President')\nres = df1.count()\n```"}
{"idx": 1378, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\nres = df.select(max(budget.spent))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\nres = df.select(max([MASK]))\n```"}
{"idx": 1379, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.type, filter = 'Meeting')\ndf2 = df1.where(element = event.event_date, filter = \"like '2020%'\")\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Meeting')\ndf2 = df1.where(element = [MASK], filter = \"like '2020%'\")\nres = df2.count()\n```"}
{"idx": 1380, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Food')\nres = df1.select(budget.spent).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Food')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 1381, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(member.member_id).having(element = count(attendance.link_to_event), filter = '> 7')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).having(element = count([MASK]), filter = '> 7')\nres = df1.select([MASK])\n```"}
{"idx": 1382, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Interior Design')\ndf2 = df.where(element = event.event_name, filter = 'Community Theater')\nres = df1.intersect(df2).select(member.first_name, member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Interior Design')\ndf2 = df.where(element = [MASK], filter = 'Community Theater')\nres = df1.intersect(df2).select([MASK], [MASK])\n```"}
{"idx": 1383, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.city, filter = 'Georgetown')\ndf2 = df1.where(element = zip_code.state, filter = 'South Carolina')\nres = df2.select(member.first_name + ' ' + member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Georgetown')\ndf2 = df1.where(element = [MASK], filter = 'South Carolina')\nres = df2.select([MASK])\n```"}
{"idx": 1384, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Grant')\ndf2 = df1.where(element = member.last_name, filter = 'Gilmour')\nres = df2.select(income.amount).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Grant')\ndf2 = df1.where(element = [MASK], filter = 'Gilmour')\nres = df2.select([MASK]).sum()\n```"}
{"idx": 1385, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = income.amount, filter = '> 40')\nres = df1.select(member.first_name || ' ' || member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [income.amount], filter = '> 40')\nres = df1.select([member.first_name || ' ' || member.last_name])\n```"}
{"idx": 1386, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'Yearly Kickoff')\nres = df1.select(expense.cost).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Yearly Kickoff')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 1387, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'Yearly Kickoff')\nres = df1.select(member.first_name || ' ' || member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Yearly Kickoff')\nres = df1.select([MASK])\n```"}
{"idx": 1388, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = income.amount, filter = max(income.amount))\nres = df1.select(member.first_name || ' ' || member.last_name, income.source, income.amount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [income.amount], filter = max([income.amount]))\nres = df1.select([member.first_name || ' ' || member.last_name, [income.source], [income.amount]])\n```"}
{"idx": 1389, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.cost, filter = min(expense.cost))\nres = df1.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = min([MASK]))\nres = df1.select([MASK])\n```"}
{"idx": 1390, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'Yearly Kickoff')\ntmp_res1 = df1.select(expense.cost).sum()\n\ndf2 = df.select(expense.cost).sum()\nres = df.select((tmp_res1 / df2) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Yearly Kickoff')\ntmp_res1 = df1.select([MASK]).sum()\n\ntmp_res2 = df.select([MASK]).sum()\nres = df.select((tmp_res1 / tmp_res2) * 100)\n```"}
{"idx": 1391, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Finance')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = major.major_name, filter = 'Physics')\ntmp_res2 = df2.count()\n\nres = df.select((tmp_res1 * 1.0 / tmp_res2))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Finance')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = [MASK], filter = 'Physics')\ntmp_res2 = df2.count()\n\nres = df.select((tmp_res1 * 1.0 / tmp_res2))\n```"}
{"idx": 1392, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = income.date_received, filter = 'between 2019-09-01 and 2019-09-30')\ndf2 = df1.groupby(income.source).agg(sum(income.amount))\ndf3 = df2.orderby(by = sum(income.amount), desc).limit(1)\nres = df3.select(income.source, sum(income.amount) as total_amount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 2019-09-01 and 2019-09-30')\ndf2 = df1.groupby([MASK]).agg(sum([MASK]))\ndf3 = df2.orderby(by = sum([MASK]), desc).limit(1)\nres = df3.select([MASK], sum([MASK]) as total_amount)\n```"}
{"idx": 1393, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Secretary')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name, member.email)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Secretary')\nres = df1.select([MASK].first_name || ' ' || [MASK].last_name as [MASK], [MASK].email)\n```"}
{"idx": 1394, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Physics Teaching')\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Physics Teaching')\nres = df1.count()\n```"}
{"idx": 1395, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'Community Theater')\ndf2 = df1.where(element = event.event_date, filter = \"like '2019%'\")\nres = df2.select(attendance.link_to_member).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Community Theater')\ndf2 = df1.where(element = [MASK], filter = \"like '2019%'\")\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1396, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Luisa').where(element = member.last_name, filter = 'Guidi')\ndf2 = df1.groupby(major.major_name).agg(count(attendance.link_to_event))\nres = df2.select(count(attendance.link_to_event), major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Luisa').where(element = [MASK], filter = 'Guidi')\ndf2 = df1.groupby([MASK]).agg(count([MASK]))\nres = df2.select(count([MASK]), [MASK])\n```"}
{"idx": 1397, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Food')\ndf2 = df1.where(element = budget.event_status, filter = 'Closed')\nres = df2.select(avg(budget.spent))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Food')\ndf2 = df1.where(element = [MASK], filter = 'Closed')\nres = df2.select(avg([MASK]))\n```"}
{"idx": 1398, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Advertisement')\ndf2 = df1.orderby(by = budget.spent, desc).limit(1)\nres = df2.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Advertisement')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1399, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Maya')\ndf2 = df1.where(element = member.last_name, filter = 'Mclean')\ndf3 = df2.where(element = event.event_name, filter = \"Women's Soccer\")\nres = df3.select(attendance.link_to_member, attendance.link_to_event)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Maya')\ndf2 = df1.where(element = [MASK], filter = 'Mclean')\ndf3 = df2.where(element = [MASK], filter = \"Women's Soccer\")\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 1400, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_date, filter = '>= 2019-01-01').where(element = event.event_date, filter = '<= 2019-12-31')\ndf2 = df1.where(element = event.type, filter = 'Community Service')\nres = df.select((df2.count() * 100.0 / df1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [event.event_date], filter = '>= 2019-01-01').where(element = [event.event_date], filter = '<= 2019-12-31')\ndf2 = df1.where(element = [event.type], filter = 'Community Service')\nres = df2.select((df2.count() * 100.0 / df1.count()))\n```"}
{"idx": 1401, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'September Speaker')\ndf2 = df1.where(element = expense.expense_description, filter = 'Posters')\nres = df2.select(expense.cost)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'September Speaker')\ndf2 = df1.where(element = [MASK], filter = 'Posters')\nres = df2.select([MASK])\n```"}
{"idx": 1402, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(member.t_shirt_size).orderby(by = count(member.t_shirt_size), desc).limit(1)\nres = df1.select(member.t_shirt_size)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).orderby(by = count([MASK]), desc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 1403, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.status, filter = 'Closed')\ndf2 = df1.where(element = budget.remaining, filter = '< 0')\ndf3 = df2.orderby(by = budget.remaining, asc).limit(1)\nres = df3.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Closed')\ndf2 = df1.where(element = [MASK], filter = '< 0')\ndf3 = df2.orderby(by = [MASK], asc).limit(1)\nres = df3.select([MASK])\n```"}
{"idx": 1404, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'October Meeting')\ndf2 = df1.where(element = expense.approved, filter = 'Yes')\nres = df2.groupby(expense.expense_description).agg(sum(expense.cost))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'October Meeting')\ndf2 = df1.where(element = [MASK], filter = 'Yes')\nres = df2.groupby([MASK]).agg(sum([MASK]))\n```"}
{"idx": 1405, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'April Speaker')\ndf2 = df.where(element = budget.link_to_event, filter = df1.select(event.event_id))\nres = df2.groupby(budget.category).agg(sum(budget.amount)).orderby(by = sum(budget.amount), asc)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'April Speaker')\ndf2 = df.where(element = [MASK], filter = df1.select([MASK]))\nres = df2.groupby([MASK]).agg(sum([MASK])).orderby(by = sum([MASK]), asc)\n```"}
{"idx": 1406, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Food')\ndf2 = df1.orderby(by = budget.amount, desc).limit(1)\nres = df2.select(budget.budget_id, budget.amount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Food')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1407, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Advertisement')\ndf2 = df1.orderby(by = budget.amount, desc).limit(3)\nres = df2.select(budget.budget_id, budget.category, budget.amount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Advertisement')\ndf2 = df1.orderby(by = [MASK], desc).limit(3)\nres = df2.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1408, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Parking')\nres = df1.select(sum(expense.cost))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Parking')\nres = df1.select(sum([MASK]))\n```"}
{"idx": 1409, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_date, filter = '2019-08-20')\nres = df1.select(expense.cost).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2019-08-20')\nres = df1.select([MASK]).sum()\n```"}
{"idx": 1410, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.member_id, filter = 'rec4BLdZHS2Blfp4v')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name, sum(expense.cost) as total_cost).groupby(member.first_name, member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'rec4BLdZHS2Blfp4v')\nres = df1.select([MASK].first_name || ' ' || [MASK].last_name as full_name, sum([MASK].cost) as total_cost).groupby([MASK].first_name, [MASK].last_name)\n```"}
{"idx": 1411, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Sacha')\ndf2 = df1.where(element = member.last_name, filter = 'Harrison')\nres = df2.select(expense.expense_description)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Sacha')\ndf2 = df1.where(element = [MASK], filter = 'Harrison')\nres = df2.select([MASK])\n```"}
{"idx": 1412, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.t_shirt_size, filter = 'X-Large')\nres = df1.select(expense.expense_description)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'X-Large')\nres = df1.select([MASK])\n```"}
{"idx": 1413, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.cost, filter = '< 50')\nres = df1.select(distinct(zip_code.zip_code))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '< 50')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1414, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Phillip')\ndf2 = df1.where(element = member.last_name, filter = 'Cullen')\nres = df2.select(major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Phillip')\ndf2 = df1.where(element = [MASK], filter = 'Cullen')\nres = df2.select([MASK])\n```"}
{"idx": 1415, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Business')\nres = df1.select_distinct(member.position)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Business')\nres = df1.select_distinct([MASK])\n```"}
{"idx": 1416, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Business')\ndf2 = df1.where(element = member.t_shirt_size, filter = 'Medium')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Business')\ndf2 = df1.where(element = [MASK], filter = 'Medium')\nres = df2.count()\n```"}
{"idx": 1417, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.remaining, filter = '> 30')\nres = df1.select(event.type).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 30')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 1418, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.location, filter = 'MU 215')\nres = df1.select(event.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'MU 215')\nres = df1.select([MASK])\n```"}
{"idx": 1419, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_date, filter = '2020-03-24T12:00:00')\nres = df1.select(budget.category)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2020-03-24T12:00:00')\nres = df1.select([MASK])\n```"}
{"idx": 1420, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Vice President')\nres = df1.select(major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Vice President')\nres = df1.select([MASK])\n```"}
{"idx": 1421, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Business')\nres = df.select(cast(df1.count(), real) * 100.0 / df.count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Business')\nres = df.select(cast(df1.count(), real) * 100.0 / [MASK])\n```"}
{"idx": 1422, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.location, filter = 'MU 215')\nres = df1.select_distinct(event.type)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'MU 215')\nres = df1.select_distinct([MASK])\n```"}
{"idx": 1423, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(income.amount, filter = 50)\nres = df1.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(income.[MASK], filter = 50)\nres = df1.count()\n```"}
{"idx": 1424, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Member')\ndf2 = df1.where(element = member.t_shirt_size, filter = 'X-Large')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Member')\ndf2 = df1.where(element = [MASK], filter = 'X-Large')\nres = df2.count()\n```"}
{"idx": 1425, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.department, filter = 'School of Applied Sciences, Technology and Education')\ndf2 = df1.where(element = major.college, filter = 'College of Agriculture and Applied Sciences')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'School of Applied Sciences, Technology and Education')\ndf2 = df1.where(element = [MASK], filter = 'College of Agriculture and Applied Sciences')\nres = df2.count()\n```"}
{"idx": 1426, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Environmental Engineering')\nres = df1.select(member.last_name, major.department, major.college)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Environmental Engineering')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1427, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.location, filter = 'MU 215')\ndf2 = df1.where(element = event.type, filter = 'Guest Speaker')\ndf3 = df2.where(element = budget.spent, filter = '= 0')\nres = df3.select(budget.category)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'MU 215')\ndf2 = df1.where(element = [MASK], filter = 'Guest Speaker')\ndf3 = df2.where(element = [MASK], filter = '= 0')\nres = df3.select([MASK])\n```"}
{"idx": 1428, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Member')\ndf2 = df1.where(element = major.department, filter = 'Electrical and Computer Engineering Department')\nres = df2.select(zip_code.city, zip_code.state)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Member')\ndf2 = df1.where(element = [MASK], filter = 'Electrical and Computer Engineering Department')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1429, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.type, filter = 'Social')\ndf2 = df1.where(element = event.location, filter = '900 E. Washington St.')\ndf3 = df2.where(element = member.position, filter = 'Vice President')\nres = df3.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Social')\ndf2 = df1.where(element = [MASK], filter = '900 E. Washington St.')\ndf3 = df2.where(element = [MASK], filter = 'Vice President')\nres = df3.select([MASK])\n```"}
{"idx": 1430, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Pizza')\ndf2 = df1.where(element = expense.expense_date, filter = '2019-09-10')\nres = df2.select(member.last_name, member.position)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Pizza')\ndf2 = df1.where(element = [MASK], filter = '2019-09-10')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1431, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = \"Women's Soccer\")\ndf2 = df1.where(element = member.position, filter = 'Member')\nres = df2.select(member.last_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"Women's Soccer\")\ndf2 = df1.where(element = [MASK], filter = 'Member')\nres = df2.select([MASK])\n```"}
{"idx": 1432, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.t_shirt_size, filter = 'Medium')\ndf2 = df.where(element = income.amount, filter = 50)\nres = df.select((df2.count(distinct(income.link_to_member)) * 100.0 / df1.count(distinct(member.member_id))))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Medium')\ndf2 = df.where(element = [MASK], filter = 50)\nres = df.select((df2.count(distinct([MASK])) * 100.0 / df1.count(distinct([MASK])))\n```"}
{"idx": 1433, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.type, filter = 'PO Box')\nres = df1.select(distinct(zip_code.county))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'PO Box')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1434, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.type, filter = 'PO Box')\ndf2 = df1.where(element = zip_code.county, filter = 'San Juan Municipio')\ndf3 = df2.where(element = zip_code.state, filter = 'Puerto Rico')\nres = df3.select(zip_code.zip_code)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'PO Box')\ndf2 = df1.where(element = [MASK], filter = 'San Juan Municipio')\ndf3 = df2.where(element = [MASK], filter = 'Puerto Rico')\nres = df3.select([MASK])\n```"}
{"idx": 1435, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.type, filter = 'Game')\ndf2 = df1.where(element = event.status, filter = 'Closed')\ndf3 = df2.where(element = event.event_date, filter = 'between 2019-03-15 and 2020-03-20')\nres = df3.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'Game')\ndf2 = df1.where(element = [MASK], filter = 'Closed')\ndf3 = df2.where(element = [MASK], filter = 'between 2019-03-15 and 2020-03-20')\nres = df3.select([MASK])\n```"}
{"idx": 1436, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.cost, filter = '> 50')\nres = df1.select(attendance.link_to_event).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 50')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 1437, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.approved, filter = 'true')\ndf2 = df1.where(element = expense.expense_date, filter = 'between 2019-01-10 and 2019-11-19')\nres = df2.select(member.member_id, member.first_name, member.last_name, attendance.link_to_event, event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'true')\ndf2 = df1.where(element = [MASK], filter = 'between 2019-01-10 and 2019-11-19')\nres = df2.select([MASK], [MASK], [MASK], [MASK], [MASK])\n```"}
{"idx": 1438, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Katy')\ndf2 = df1.where(element = member.link_to_major, filter = 'rec1N0upiVLy5esTO')\nres = df2.select(major.college)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Katy')\ndf2 = df1.where(element = [MASK], filter = 'rec1N0upiVLy5esTO')\nres = df2.select([MASK])\n```"}
{"idx": 1439, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'Business')\ndf2 = df1.where(element = major.college, filter = 'College of Agriculture and Applied Sciences')\nres = df2.select(member.phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Business')\ndf2 = df1.where(element = [MASK], filter = 'College of Agriculture and Applied Sciences')\nres = df2.select([MASK])\n```"}
{"idx": 1440, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_date, filter = '>= 2019-09-10')\ndf2 = df1.where(element = expense.expense_date, filter = '<= 2019-11-19')\ndf3 = df2.where(element = expense.cost, filter = '> 20')\nres = df3.select(member.email)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '>= 2019-09-10')\ndf2 = df1.where(element = [MASK], filter = '<= 2019-11-19')\ndf3 = df2.where(element = [MASK], filter = '> 20')\nres = df3.select([MASK])\n```"}
{"idx": 1441, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = major.major_name, filter = 'education')\ndf2 = df1.where(element = major.college, filter = 'Education & Human Services')\nres = df2.count(element = member.link_to_major)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'education')\ndf2 = df1.where(element = [MASK], filter = 'Education & Human Services')\nres = df2.count([MASK])\n```"}
{"idx": 1442, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.remaining, filter = '< 0')\nres = df.select(cast(df1.count(), float) / df.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [budget.remaining], filter = '< 0')\nres = df.select(cast(df1.count(), float) / [df.count()] * 100)\n```"}
{"idx": 1443, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_date, filter = 'between 2019-11-01 and 2020-03-31')\nres = df1.select(event.event_id, event.location, event.status)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'between 2019-11-01 and 2020-03-31')\nres = df1.select([MASK], [MASK], [MASK])\n```"}
{"idx": 1444, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(expense.expense_description).having(element = avg(expense.cost), filter = '> 50')\nres = df1.select(expense.expense_description)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).having(element = avg([MASK]), filter = '> 50')\nres = df1.select([MASK])\n```"}
{"idx": 1445, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.t_shirt_size, filter = 'X-Large')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'X-Large')\nres = df1.select([MASK])\n```"}
{"idx": 1446, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.type, filter = 'PO Box')\nres = df.select((df1.count() * 100.0 / df.count(zip_code)).as('po_box_percentage'))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'PO Box')\nres = df.select((df1.count() * 100.0 / df.count([MASK])).as('po_box_percentage'))\n```"}
{"idx": 1447, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.remaining, filter = '> 0')\nres = df1.select(event.event_name, event.location)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '> 0')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1448, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Pizza')\ndf2 = df1.where(element = expense.cost, filter = '> 50')\ndf3 = df2.where(element = expense.cost, filter = '< 100')\nres = df3.select(event.event_name, event.event_date)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Pizza')\ndf2 = df1.where(element = [MASK], filter = '> 50')\ndf3 = df2.where(element = [MASK], filter = '< 100')\nres = df3.select([MASK], [MASK])\n```"}
{"idx": 1449, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.cost, filter = '> 100')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name, major.major_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [expense.cost], filter = '> 100')\nres = df1.select([member.first_name || ' ' || member.last_name as full_name], [major.major_name])\n```"}
{"idx": 1450, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(event.event_id, zip_code.city, zip_code.county).having(element = count(income.income_id), filter = '> 40')\nres = df1.select(zip_code.city, zip_code.county)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK], [MASK], [MASK]).having(element = count([MASK]), filter = '> 40')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1451, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(expense.link_to_member, expense.link_to_event).having(element = count(distinct(expense.link_to_event)), filter = '> 1')\ndf2 = df.where(element = expense.link_to_member, filter = 'in', value = df1.select(expense.link_to_member))\ndf3 = df2.groupby(expense.link_to_member).agg(sum(expense.cost) as total_expense)\ndf4 = df3.orderby(by = total_expense, desc).limit(1)\nres = df4.select(member.first_name, member.last_name, member.member_id, total_expense)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.groupby([MASK], [MASK]).having(element = count(distinct([MASK])), filter = '> 1')\ndf2 = df.where(element = [MASK], filter = 'in', value = df1.select([MASK]))\ndf3 = df2.groupby([MASK]).agg(sum([MASK]) as total_expense)\ndf4 = df3.orderby(by = total_expense, desc).limit(1)\nres = df4.select([MASK], [MASK], [MASK], total_expense)\n```"}
{"idx": 1452, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = \"!= 'Member'\")\nres = df1.select(avg(expense.cost))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"!= 'Member'\")\nres = df1.select(avg([MASK]))\n```"}
{"idx": 1453, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Parking')\navg_cost = df1.select(avg(expense.cost))\ndf2 = df1.where(element = expense.cost, filter = '<', reference = avg_cost)\nres = df2.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Parking')\navg_cost = df1.select(avg([MASK]))\ndf2 = df1.where(element = [MASK], filter = '<', reference = avg_cost)\nres = df2.select([MASK])\n```"}
{"idx": 1454, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.type, filter = 'Meeting')\ntmp_res1 = df1.select(budget.spent).sum()\n\ndf2 = df.select(budget.spent)\ntmp_res2 = df2.sum()\n\nres = df.select((tmp_res1 * 100.0 / tmp_res2))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [event.type], filter = 'Meeting')\ntmp_res1 = df1.select([budget.spent]).sum()\n\ntmp_res2 = df.select([budget.spent]).sum()\n\nres = df.select((tmp_res1 * 100.0 / tmp_res2))\n```"}
{"idx": 1455, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Water, chips, cookies')\ndf2 = df1.orderby(by = expense.cost, desc).limit(1)\nres = df2.select(expense.link_to_budget)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Water, chips, cookies')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1456, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(member.member_id).agg(sum(expense.cost) as total_spent)\ndf2 = df1.orderby(by = total_spent, desc).limit(5)\nres = df2.select(member.first_name || ' ' || member.last_name as full_name, total_spent)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum([MASK]) as [MASK])\ndf2 = df1.orderby(by = [MASK], desc).limit(5)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1457, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.cost, filter = '> (SELECT AVG(cost) FROM expense)')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name, member.phone as contact_number)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [expense.cost], filter = '> (SELECT AVG([expense.cost]))')\nres = df1.select([member.first_name || ' ' || member.last_name as full_name, member.phone as contact_number])\n```"}
{"idx": 1458, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.select(member.zip)\ndf2 = df1.where(element = zip_code.state, filter = 'New Jersey')\nnj_count = df2.count()\n\ndf3 = df1.where(element = zip_code.state, filter = 'Vermont')\nvt_count = df3.count()\n\ntotal = df1.count()\n\nres = df.select((cast(nj_count, real) / total * 100) - (cast(vt_count, real) / total * 100))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.select([MASK])\ndf2 = df1.where(element = [MASK], filter = 'New Jersey')\nnj_count = df2.count()\n\ndf3 = df1.where(element = [MASK], filter = 'Vermont')\nvt_count = df3.count()\n\ntotal = df1.count()\n\nres = df.select(cast(nj_count, real) / total * 100 - cast(vt_count, real) / total * 100)\n```"}
{"idx": 1459, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Garrett')\ndf2 = df1.where(element = member.last_name, filter = 'Gerke')\nres = df2.select(major.major_name, major.department)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Garrett')\ndf2 = df1.where(element = [MASK], filter = 'Gerke')\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1460, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Water, Veggie tray, supplies')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name, expense.cost)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [expense.expense_description], filter = 'Water, Veggie tray, supplies')\nres = df1.select([member.first_name || ' ' || member.last_name as full_name, expense.cost])\n```"}
{"idx": 1461, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(elementary_education.major_name, filter = 'Elementary Education')\nres = df1.select(member.last_name, member.phone)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Elementary Education')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1462, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = event.event_name, filter = 'January Speaker')\nres = df1.select(budget.category, budget.amount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'January Speaker')\nres = df1.select([MASK], [MASK])\n```"}
{"idx": 1463, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Food')\nres = df1.select(event.event_name)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Food')\nres = df1.select([MASK])\n```"}
{"idx": 1464, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(income.date_received, filter = '9/9/2019')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name, income.amount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(income.date_received, filter = '9/9/2019')\nres = df1.select(member.[MASK], income.[MASK])\n```"}
{"idx": 1465, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = expense.expense_description, filter = 'Posters')\nres = df1.select(budget.category)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Posters')\nres = df1.select([MASK])\n```"}
{"idx": 1466, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.position, filter = 'Secretary')\nres = df1.select(member.first_name || ' ' || member.last_name as full_name, major.college)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Secretary')\nres = df1.select([MASK].first_name || ' ' || [MASK].last_name as full_name, [MASK].college)\n```"}
{"idx": 1467, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = budget.category, filter = 'Speaker Gifts')\nres = df1.groupby(event.event_name).select(event.event_name, sum(budget.spent) as total_spent)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Speaker Gifts')\nres = df1.groupby([MASK]).select([MASK], sum([MASK]) as total_spent)\n```"}
{"idx": 1468, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = member.first_name, filter = 'Garrett')\ndf2 = df1.where(element = member.last_name, filter = 'Gerke')\nres = df2.select(zip_code.city)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Garrett')\ndf2 = df1.where(element = [MASK], filter = 'Gerke')\nres = df2.select([MASK])\n```"}
{"idx": 1469, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = zip_code.city, filter = 'Lincolnton')\ndf2 = df1.where(element = zip_code.state, filter = 'North Carolina')\ndf3 = df2.where(element = zip_code.zip_code, filter = 28092)\nres = df3.select(member.first_name || ' ' || member.last_name as full_name, member.position)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Lincolnton')\ndf2 = df1.where(element = [MASK], filter = 'North Carolina')\ndf3 = df2.where(element = [MASK], filter = 28092)\nres = df3.select([MASK] || ' ' || [MASK] as [MASK])\n```"}
{"idx": 1470, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'CZE')\ndf2 = df1.where(element = products.Description, filter = 'Premium')\nres = df2.select(gasstations.GasStationID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CZE')\ndf2 = df1.where(element = [MASK], filter = 'Premium')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1471, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'EUR')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = customers.Currency, filter = 'CZK')\ntmp_res2 = df2.count()\n\nres = df.select(cast(tmp_res1, real) / nullif(tmp_res2, 0))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [customers.Currency], filter = 'EUR')\ntmp_res1 = df1.count()\n\ndf2 = df.where(element = [customers.Currency], filter = 'CZK')\ntmp_res2 = df2.count()\n\nres = df.select(cast(tmp_res1, real) / nullif(tmp_res2, 0))\n```"}
{"idx": 1472, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = 'SUBSTR(_, 1, 4) = 2012')\ndf2 = df1.where(element = customers.Segment, filter = 'LAM')\ndf3 = df2.groupby(customers.CustomerID).agg(sum(yearmonth.Consumption))\nres = df3.orderby(by = sum(yearmonth.Consumption), asc).limit(1).select(customers.CustomerID, sum(yearmonth.Consumption) as TotalConsumption)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SUBSTR(_, 1, 4) = 2012')\ndf2 = df1.where(element = [MASK], filter = 'LAM')\ndf3 = df2.groupby([MASK]).agg(sum([MASK]))\nres = df3.orderby(by = sum([MASK]), asc).limit(1).select([MASK], sum([MASK]) as TotalConsumption)\n```"}
{"idx": 1473, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'SME')\ndf2 = df1.where(element = yearmonth.Date, filter = \"between '201301' and '201312'\")\nres = df2.select(avg(yearmonth.Consumption) / 12)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'SME')\ndf2 = df1.where(element = [MASK], filter = \"between '201301' and '201312'\")\nres = df2.select(avg([MASK]) / 12)\n```"}
{"idx": 1474, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'CZK')\ndf2 = df1.where(element = yearmonth.Date, filter = 'between 201101 and 201112')\ndf3 = df2.groupby(customers.CustomerID).agg(sum(yearmonth.Consumption))\nres = df3.orderby(by = sum(yearmonth.Consumption), desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [customers.Currency], filter = 'CZK')\ndf2 = df1.where(element = [yearmonth.Date], filter = 'between 201101 and 201112')\ndf3 = df2.groupby([customers.CustomerID]).agg(sum([yearmonth.Consumption]))\nres = df3.orderby(by = sum([yearmonth.Consumption]), desc).limit(1)\n```"}
{"idx": 1475, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'KAM')\ndf2 = df1.where(element = yearmonth.Date, filter = 'between 201201 and 201212')\ndf3 = df2.groupby(yearmonth.CustomerID).having(element = sum(yearmonth.Consumption), filter = '< 30000')\nres = df3.count(distinct = customers.CustomerID)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'KAM')\ndf2 = df1.where(element = [MASK], filter = 'between 201201 and 201212')\ndf3 = df2.groupby([MASK]).having(element = sum([MASK]), filter = '< 30000')\nres = df3.count(distinct = [MASK])\n```"}
{"idx": 1476, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = \"between '201201' and '201212'\")\ndf2 = df1.where(element = customers.Currency, filter = 'CZK')\ndf3 = df1.where(element = customers.Currency, filter = 'EUR')\nres = df.select(df2.sum(yearmonth.Consumption) - df3.sum(yearmonth.Consumption))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = \"between '201201' and '201212'\")\ndf2 = df1.where(element = [MASK], filter = 'CZK')\ndf3 = df1.where(element = [MASK], filter = 'EUR')\nres = df.select(df2.sum([MASK]) - df3.sum([MASK]))\n```"}
{"idx": 1477, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'EUR')\ndf2 = df1.groupby(transactions_1k.Date, year = strftime('%Y')).agg(sum(transactions_1k.Amount))\ndf3 = df2.orderby(by = sum(transactions_1k.Amount), desc).limit(1)\nres = df3.select(transactions_1k.Date, sum(transactions_1k.Amount))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'EUR')\ndf2 = df1.groupby([MASK], year = strftime('%Y')).agg(sum([MASK]))\ndf3 = df2.orderby(by = sum([MASK]), desc).limit(1)\nres = df3.select([MASK], sum([MASK]))\n```"}
{"idx": 1478, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(customers.Segment).agg(sum(yearmonth.Consumption))\ndf2 = df1.orderby(by = sum(yearmonth.Consumption), asc).limit(1)\nres = df2.select(customers.Segment, sum(yearmonth.Consumption) as TotalConsumption)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum([MASK]))\ndf2 = df1.orderby(by = sum([MASK]), asc).limit(1)\nres = df2.select([MASK], sum([MASK]) as [MASK])\n```"}
{"idx": 1479, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'CZK')\ndf2 = df1.groupby(yearmonth.Date).agg(sum(yearmonth.Consumption))\ndf3 = df2.orderby(by = sum(yearmonth.Consumption), desc).limit(1)\nres = df3.select(yearmonth.Date.substr(1, 4) as Year, sum(yearmonth.Consumption) as TotalConsumption)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [customers.Currency], filter = 'CZK')\ndf2 = df1.groupby([yearmonth.Date]).agg(sum([yearmonth.Consumption]))\ndf3 = df2.orderby(by = sum([yearmonth.Consumption]), desc).limit(1)\nres = df3.select([yearmonth.Date.substr(1, 4) as Year, sum([yearmonth.Consumption]) as TotalConsumption])\n```"}
{"idx": 1480, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'SME')\ndf2 = df1.where(element = yearmonth.Date, filter = 'like 2013%')\ndf3 = df2.groupby(yearmonth.Date).agg(sum(yearmonth.Consumption))\ndf4 = df3.orderby(by = sum(yearmonth.Consumption), desc).limit(1)\nres = df4.select(yearmonth.Date, sum(yearmonth.Consumption))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [customers.Segment], filter = 'SME')\ndf2 = df1.where(element = [yearmonth.Date], filter = 'like 2013%')\ndf3 = df2.groupby([yearmonth.Date]).agg(sum([yearmonth.Consumption]))\ndf4 = df3.orderby(by = sum([yearmonth.Consumption]), desc).limit(1)\nres = df4.select([yearmonth.Date], sum([yearmonth.Consumption]))\n```"}
{"idx": 1481, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = 'between 201301 and 201312').where(element = customers.Currency, filter = 'CZK')\ndf2 = df1.groupby(customers.Segment).agg(sum(yearmonth.Consumption) / 12.0)\ndf3 = df2.orderby(by = sum(yearmonth.Consumption) / 12.0).limit(1)\ndf4 = df3.select(customers.Segment, sum(yearmonth.Consumption) / 12.0)\n\ndf5 = df.where(element = yearmonth.Date, filter = 'between 201301 and 201312').where(element = customers.Currency, filter = 'CZK')\ndf6 = df5.groupby(customers.Segment).agg(sum(yearmonth.Consumption) / 12.0)\ndf7 = df6.orderby(by = sum(yearmonth.Consumption) / 12.0).limit(1)\ndf8 = df7.select(customers.Segment, sum(yearmonth.Consumption) / 12.0)\n\ndf9 = df.where(element = yearmonth.Date, filter = 'between 201301 and 201312').where(element = customers.Currency, filter = 'CZK')\ndf10 = df9.groupby(customers.Segment).agg(sum(yearmonth.Consumption) / 12.0)\ndf11 = df10.orderby(by = sum(yearmonth.Consumption) / 12.0).limit(1)\ndf12 = df11.select(customers.Segment, sum(yearmonth.Consumption) / 12.0)\n\nres = df.select((df4.select(customers.Segment = 'SME') - df8.select(customers.Segment = 'LAM')), (df8.select(customers.Segment = 'LAM') - df12.select(customers.Segment = 'KAM')), (df12.select(customers.Segment = 'KAM') - df4.select(customers.Segment = 'SME')))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [yearmonth.Date], filter = 'between 201301 and 201312').where(element = [customers.Currency], filter = 'CZK')\ndf2 = df1.groupby([customers.Segment]).agg(sum([yearmonth.Consumption]) / 12.0)\ndf3 = df2.orderby(by = sum([yearmonth.Consumption]) / 12.0).limit(1)\ndf4 = df3.select([customers.Segment], sum([yearmonth.Consumption]) / 12.0)\n\ndf5 = df.where(element = [yearmonth.Date], filter = 'between 201301 and 201312').where(element = [customers.Currency], filter = 'CZK')\ndf6 = df5.groupby([customers.Segment]).agg(sum([yearmonth.Consumption]) / 12.0)\ndf7 = df6.orderby(by = sum([yearmonth.Consumption]) / 12.0).limit(1)\ndf8 = df7.select([customers.Segment], sum([yearmonth.Consumption]) / 12.0)\n\ndf9 = df.where(element = [yearmonth.Date], filter = 'between 201301 and 201312').where(element = [customers.Currency], filter = 'CZK')\ndf10 = df9.groupby([customers.Segment]).agg(sum([yearmonth.Consumption]) / 12.0)\ndf11 = df10.orderby(by = sum([yearmonth.Consumption]) / 12.0).limit(1)\ndf12 = df11.select([customers.Segment], sum([yearmonth.Consumption]) / 12.0)\n\nres = df.select((df4.select([customers.Segment] = 'SME') - df8.select([customers.Segment] = 'LAM')), (df8.select([customers.Segment] = 'LAM') - df12.select([customers.Segment] = 'KAM')), (df12.select([customers.Segment] = 'KAM') - df4.select([customers.Segment] = 'SME')))\n```"}
{"idx": 1482, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'EUR')\ndf2 = df1.groupby(yearmonth.CustomerID, customers.Segment, yearmonth.Year).agg(sum(yearmonth.Consumption) as TotalConsumption)\ndf3 = df2.where(element = yearmonth.Year, filter = '2013')\ndf4 = df2.where(element = yearmonth.Year, filter = '2012')\ndf5 = df3.join(df4, on = yearmonth.CustomerID).select(subtract(df3.TotalConsumption, df4.TotalConsumption) as Increase, df3.TotalConsumption as Consumption2013)\ndf6 = df5.where(element = df3.Year, filter = '2013').where(element = df3.Consumption2013, filter = '> 0')\ndf7 = df6.select((df5.Increase / df3.Consumption2013) * 100 as PercentageIncrease)\ndf8 = df7.groupby(customers.Segment).agg(avg(PercentageIncrease) as AvgPercentageIncrease)\nres = df8.orderby(by = AvgPercentageIncrease, desc)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'EUR')\ndf2 = df.groupby([MASK], [MASK], [MASK]).agg(sum([MASK]) as TotalConsumption)\ndf3 = df2.where(element = [MASK], filter = '2013')\ndf4 = df2.where(element = [MASK], filter = '2012')\ndf5 = df3.join(df4, on = [MASK]).select(subtract(df3.TotalConsumption, df4.TotalConsumption) as Increase, df3.TotalConsumption as Consumption2013)\ndf6 = df5.where(element = df3.[MASK], filter = '2013').where(element = df3.Consumption2013, filter = '> 0')\ndf7 = df6.select((df5.Increase / df3.Consumption2013) * 100 as PercentageIncrease)\ndf8 = df7.groupby([MASK]).agg(avg(PercentageIncrease) as AvgPercentageIncrease)\nres = df8.orderby(by = AvgPercentageIncrease, desc)\n```"}
{"idx": 1483, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.CustomerID, filter = 6)\ndf2 = df1.where(element = yearmonth.Date, filter = 'between 201308 and 201311')\nres = df2.select(yearmonth.Consumption).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 6)\ndf2 = df1.where(element = [MASK], filter = 'between 201308 and 201311')\nres = df2.select([MASK]).sum()\n```"}
{"idx": 1484, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'CZE').where(element = gasstations.Segment, filter = 'is not null')\ndf2 = df.where(element = gasstations.Country, filter = 'SVK').where(element = gasstations.Segment, filter = 'is not null')\nres = df.select(df1.count() - df2.count())\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CZE').where(element = [MASK], filter = 'is not null')\ndf2 = df.where(element = [MASK], filter = 'SVK').where(element = [MASK], filter = 'is not null')\nres = df.select(df1.count() - df2.count())\n```"}
{"idx": 1485, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.CustomerID, filter = 7).where(element = yearmonth.Date, filter = '201304')\ntmp_res1 = df1.select(yearmonth.Consumption).sum()\n\ndf2 = df.where(element = yearmonth.CustomerID, filter = 5).where(element = yearmonth.Date, filter = '201304')\ntmp_res2 = df2.select(yearmonth.Consumption).sum()\n\nres = df.select(tmp_res1 - tmp_res2)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [yearmonth.CustomerID], filter = 7).where(element = [yearmonth.Date], filter = '201304')\ntmp_res1 = df1.select([yearmonth.Consumption]).sum()\n\ndf2 = df.where(element = [yearmonth.CustomerID], filter = 5).where(element = [yearmonth.Date], filter = '201304')\ntmp_res2 = df2.select([yearmonth.Consumption]).sum()\n\nres = df.select(tmp_res1 - tmp_res2)\n```"}
{"idx": 1486, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'SME')\ndf2 = df1.groupby(customers.Currency).count(distinct(customers.CustomerID))\nres = df.select(df2.where(customers.Currency, filter = 'CZK').count() - df2.where(customers.Currency, filter = 'EUR').count())\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'SME')\ndf2 = df1.groupby([MASK]).count(distinct([MASK]))\nres = df.select(df2.where([MASK], filter = 'CZK').count() - df2.where([MASK], filter = 'EUR').count())\n```"}
{"idx": 1487, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'LAM')\ndf2 = df1.where(element = customers.Currency, filter = 'Euro')\ndf3 = df2.where(element = yearmonth.Date, filter = '201310')\ndf4 = df3.groupby(yearmonth.CustomerID).agg(max(yearmonth.Consumption))\nres = df4.orderby(by = max(yearmonth.Consumption), desc).limit(1)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'LAM')\ndf2 = df1.where(element = [MASK], filter = 'Euro')\ndf3 = df2.where(element = [MASK], filter = '201310')\ndf4 = df3.groupby([MASK]).agg(max([MASK]))\nres = df4.orderby(by = max([MASK]), desc).limit(1)\n```"}
{"idx": 1488, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'KAM')\ndf2 = df1.groupby(yearmonth.CustomerID).agg(sum(yearmonth.Consumption))\ndf3 = df2.orderby(by = sum(yearmonth.Consumption), desc).limit(1)\nres = df3.select(yearmonth.CustomerID, sum(yearmonth.Consumption) as TotalConsumption)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [customers.Segment], filter = 'KAM')\ndf2 = df1.groupby([yearmonth.CustomerID]).agg(sum([yearmonth.Consumption]))\ndf3 = df2.orderby(by = sum([yearmonth.Consumption]), desc).limit(1)\nres = df3.select([yearmonth.CustomerID, sum([yearmonth.Consumption]) as TotalConsumption])\n```"}
{"idx": 1489, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'KAM')\ndf2 = df1.where(element = yearmonth.Date, filter = '201305')\nres = df2.select(yearmonth.Consumption).sum()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'KAM')\ndf2 = df1.where(element = [MASK], filter = '201305')\nres = df2.select([MASK]).sum()\n```"}
{"idx": 1490, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'LAM')\ndf2 = df.where(element = yearmonth.Consumption, filter = '> 46.73').where(element = yearmonth.CustomerID, filter = 'in', df1.CustomerID)\ntmp_res1 = df2.count()\ntmp_res2 = df1.count()\nres = df.select(cast(tmp_res1, real) / tmp_res2 * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'LAM')\ndf2 = df.where(element = [MASK], filter = '> 46.73').where(element = [MASK], filter = 'in', df1.[MASK])\ntmp_res1 = df2.count()\ntmp_res2 = df1.count()\nres = df.select(cast(tmp_res1, real) / tmp_res2 * 100)\n```"}
{"idx": 1491, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(transactions_1k.ProductID).agg(avg_price = avg(transactions_1k.Price))\ndf2 = df.where(element = transactions_1k.Price, filter = '< avg_price')\ndf3 = df2.select(distinct(transactions_1k.GasStationID))\nres = df3.groupby(gasstations.Country).count().orderby(by = count, desc)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.groupby([MASK]).agg(avg_price = avg([MASK]))\ndf2 = df.where(element = [MASK], filter = '< avg_price')\ndf3 = df2.select(distinct([MASK]))\nres = df3.groupby([MASK]).count().orderby(by = count, desc)\n```"}
{"idx": 1492, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'KAM')\ndf2 = df1.where(element = customers.Currency, filter = 'Euro')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'KAM')\ndf2 = df1.where(element = [MASK], filter = 'Euro')\nres = df.select(cast(df2.count(), float) / df1.count() * 100)\n```"}
{"idx": 1493, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = '201202')\ndf2 = df1.where(element = yearmonth.Consumption, filter = '> 528.3')\nres = df.select(cast(df2.count(distinct = yearmonth.CustomerID), real) / df1.count(distinct = yearmonth.CustomerID) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '201202')\ndf2 = df1.where(element = [MASK], filter = '> 528.3')\nres = df.select(cast(df2.count(distinct = [MASK]), real) / df1.count(distinct = [MASK]) * 100)\n```"}
{"idx": 1494, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'Slovakia')\ndf2 = df1.where(element = gasstations.Segment, filter = 'Premium')\nres = df.select(cast(df2.count(), real) / df1.count() * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'Slovakia')\ndf2 = df1.where(element = [MASK], filter = 'Premium')\nres = df2.select(cast(df2.count(), real) / df1.count() * 100)\n```"}
{"idx": 1495, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = '201309')\ndf2 = df1.orderby(by = yearmonth.Consumption, desc).limit(1)\nres = df2.select(yearmonth.CustomerID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '201309')\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1496, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = '201309')\ndf2 = df1.groupby(customers.Segment).agg(sum(yearmonth.Consumption))\ndf3 = df2.orderby(by = sum(yearmonth.Consumption), asc).limit(1)\nres = df3.select(customers.Segment, sum(yearmonth.Consumption) as TotalConsumption)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '201309')\ndf2 = df1.groupby([MASK]).agg(sum([MASK]))\ndf3 = df2.orderby(by = sum([MASK]), asc).limit(1)\nres = df3.select([MASK], sum([MASK]) as TotalConsumption)\n```"}
{"idx": 1497, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Segment, filter = 'SME').where(element = yearmonth.Date, filter = '201206')\ndf2 = df1.groupby(customers.CustomerID).agg(min(yearmonth.Consumption))\nres = df2.orderby(by = min(yearmonth.Consumption), asc).limit(1).select(customers.CustomerID, min(yearmonth.Consumption))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'SME').where(element = [MASK], filter = '201206')\ndf2 = df1.groupby([MASK]).agg(min([MASK]))\nres = df2.orderby(by = min([MASK]), asc).limit(1).select([MASK], min([MASK]))\n```"}
{"idx": 1498, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = 'like 2012%')\ndf2 = df1.groupby(yearmonth.Date).agg(sum(yearmonth.Consumption))\ndf3 = df2.select(max(yearmonth.Consumption))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'like 2012%')\ndf2 = df1.groupby([MASK]).agg(sum([MASK]))\nres = df2.select(max([MASK]))\n```"}
{"idx": 1499, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'euro')\ndf2 = df1.groupby(yearmonth.CustomerID, yearmonth.Date).agg(sum(yearmonth.Consumption) / 12)\nres = df2.max()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'euro')\ndf2 = df1.groupby([MASK], [MASK]).agg(sum([MASK]) / 12)\nres = df2.max()\n```"}
{"idx": 1500, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(yearmonth.Date, filter = 'like 201309%')\ntmp_res1 = df1.select(transactions_1k.ProductID)\n\ndf2 = df.where(products.ProductID, filter = 'in tmp_res1')\nres = df2.select(distinct(products.Description))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(yearmonth.Date, filter = 'like 201309%')\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where([MASK], filter = 'in tmp_res1')\nres = df2.select(distinct([MASK]))\n```"}
{"idx": 1501, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = \"like '201306%'\")\nres = df1.select(gasstations.Country).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = \"like '201306%'\")\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 1502, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'euro')\nres = df1.select(gasstations.ChainID).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'euro')\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 1503, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'euro')\nres = df1.select(distinct(products.Description))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'euro')\nres = df1.select(distinct([MASK]))\n```"}
{"idx": 1504, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = \"like '2012-01%'\")\nres = df1.select(avg(multiply(transactions_1k.Amount, transactions_1k.Price)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK].Date, filter = \"like '2012-01%'\")\nres = df1.select(avg(multiply([MASK].Amount, [MASK].Price)))\n```"}
{"idx": 1505, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'EUR')\ndf2 = df1.where(element = yearmonth.Consumption, filter = '> 1000')\nres = df2.select(yearmonth.CustomerID).distinct().count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'EUR')\ndf2 = df1.where(element = [MASK], filter = '> 1000')\nres = df2.select([MASK]).distinct().count()\n```"}
{"idx": 1506, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'CZE')\nres = df1.select(distinct = products.Description)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CZE')\nres = df1.select(distinct = [MASK])\n```"}
{"idx": 1507, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.ChainID, filter = 11)\nres = df1.select(transactions_1k.Time).distinct()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 11)\nres = df1.select([MASK]).distinct()\n```"}
{"idx": 1508, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'CZE')\ndf2 = df1.where(element = transactions_1k.Price, filter = '> 1000')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CZE')\ndf2 = df1.where(element = [MASK], filter = '> 1000')\nres = df2.count()\n```"}
{"idx": 1509, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'CZE')\ndf2 = df1.where(element = transactions_1k.Date, filter = '> 2012-01-01')\nres = df2.count()\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CZE')\ndf2 = df1.where(element = [MASK], filter = '> 2012-01-01')\nres = df2.count()\n```"}
{"idx": 1510, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'CZE')\nres = df1.select(avg(multiply(transactions_1k.Amount, transactions_1k.Price)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'CZE')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 1511, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = customers.Currency, filter = 'euro')\nres = df1.select(avg(multiply(transactions_1k.Amount, transactions_1k.Price)))\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 'euro')\nres = df1.select(avg([MASK]))\n```"}
{"idx": 1512, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-25')\ndf2 = df1.groupby(transactions_1k.CustomerID).agg(sum(multiply(transactions_1k.Amount, transactions_1k.Price)))\ndf3 = df2.orderby(by = sum(multiply(transactions_1k.Amount, transactions_1k.Price)), desc).limit(1)\nres = df3.select(transactions_1k.CustomerID, sum(multiply(transactions_1k.Amount, transactions_1k.Price)) as TotalPaid)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-25')\ndf2 = df1.groupby([MASK]).agg(sum(multiply([MASK], [MASK])))\ndf3 = df2.orderby(by = sum(multiply([MASK], [MASK])), desc).limit(1)\nres = df3.select([MASK], sum(multiply([MASK], [MASK])) as [MASK])\n```"}
{"idx": 1513, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-25')\ndf2 = df1.orderby(by = transactions_1k.Time, asc).limit(1)\nres = df2.select(gasstations.Country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-25')\ndf2 = df1.orderby(by = [MASK], asc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1514, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-24')\ndf2 = df1.where(element = transactions_1k.Time, filter = '16:25:00')\nres = df2.select(customers.Currency)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-24')\ndf2 = df1.where(element = [MASK], filter = '16:25:00')\nres = df2.select([MASK])\n```"}
{"idx": 1515, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-23')\ndf2 = df1.where(element = transactions_1k.Time, filter = '21:20:00')\nres = df2.select(customers.Segment)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-23')\ndf2 = df1.where(element = [MASK], filter = '21:20:00')\nres = df2.select([MASK])\n```"}
{"idx": 1516, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-26')\ndf2 = df1.where(element = transactions_1k.Time, filter = '< 13:00:00')\ndf3 = df2.where(element = customers.Currency, filter = 'CZK')\nres = df3.count(transactions_1k.TransactionID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-26')\ndf2 = df1.where(element = [MASK], filter = '< 13:00:00')\ndf3 = df2.where(element = [MASK], filter = 'CZK')\nres = df3.count([MASK])\n```"}
{"idx": 1517, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.orderby(by = customers.CustomerID, asc).limit(1)\nres = df1.select(customers.Segment)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.orderby(by = [MASK], asc).limit(1)\nres = df1.select([MASK])\n```"}
{"idx": 1518, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-24')\ndf2 = df1.where(element = transactions_1k.Time, filter = '12:42:00')\nres = df2.select(gasstations.Country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-24')\ndf2 = df1.where(element = [MASK], filter = '12:42:00')\nres = df2.select([MASK])\n```"}
{"idx": 1519, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-23')\ndf2 = df1.where(element = transactions_1k.Time, filter = '21:20:00')\nres = df2.select(transactions_1k.ProductID)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-23')\ndf2 = df1.where(element = [MASK], filter = '21:20:00')\nres = df2.select([MASK])\n```"}
{"idx": 1520, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-24').where(element = transactions_1k.Price * transactions_1k.Amount, filter = 124.05)\ntmp_res1 = df1.select(transactions_1k.CustomerID)\n\ndf2 = df.where(element = transactions_1k.CustomerID, filter = tmp_res1).where(element = transactions_1k.Date, filter = 'BETWEEN 2012-01-01 AND 2012-01-31')\nres = df2.groupby(transactions_1k.Date).select(transactions_1k.Date, sum(multiply(transactions_1k.Price, transactions_1k.Amount)) as TotalExpense)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-24').where(element = [MASK], filter = 124.05)\ntmp_res1 = df1.select([MASK])\n\ndf2 = df.where(element = [MASK], filter = tmp_res1).where(element = [MASK], filter = 'BETWEEN 2012-01-01 AND 2012-01-31')\nres = df2.groupby([MASK]).select([MASK], sum(multiply([MASK], [MASK])) as TotalExpense)\n```"}
{"idx": 1521, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-26')\ndf2 = df1.where(element = transactions_1k.Time, filter = 'BETWEEN 08:00:00 AND 09:00:00')\ndf3 = df2.where(element = gasstations.Country, filter = 'CZE')\nres = df3.count()\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '2012-08-26')\ndf2 = df1.where(element = [MASK], filter = 'BETWEEN 08:00:00 AND 09:00:00')\ndf3 = df2.where(element = [MASK], filter = 'CZE')\nres = df3.count()\n```"}
{"idx": 1522, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = yearmonth.Date, filter = '201306')\ndf2 = df1.where(element = yearmonth.Consumption, filter = 214582.17)\nres = df2.select(customers.Currency)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '201306')\ndf2 = df1.where(element = [MASK], filter = 214582.17)\nres = df2.select([MASK])\n```"}
{"idx": 1523, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.CardID, filter = 667467)\nres = df1.select(gasstations.Country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 667467)\nres = df1.select([MASK])\n```"}
{"idx": 1524, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-24')\ndf2 = df1.where(element = transactions_1k.Amount * transactions_1k.Price, filter = 548.4)\nres = df2.select(gasstations.Country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = '2012-08-24')\ndf2 = df1.where(element = [MASK], filter = 548.4)\nres = df2.select([MASK])\n```"}
{"idx": 1525, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-25')\ndf2 = df1.where(element = customers.Currency, filter = 'EUR')\ndf3 = df1.select(customers.CustomerID).distinct()\ndf4 = df2.select(customers.CustomerID).distinct()\nres = df.select((cast(df4.count(), real) / df3.count()) * 100)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '2012-08-25')\ndf2 = df1.where(element = [MASK], filter = 'EUR')\ndf3 = df1.select([MASK]).distinct()\ndf4 = df2.select([MASK]).distinct()\nres = df.select(cast(df4.count(), real) / df3.count() * 100)\n```"}
{"idx": 1526, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.Date, filter = '2012-08-25').select(transactions_1k.CustomerID)\ndf2 = df.where(element = yearmonth.CustomerID, filter = 'in', value = df1).where(element = yearmonth.Date, filter = 'like', value = '2012-%').groupby(yearmonth.CustomerID).agg(sum(yearmonth.Consumption))\ndf3 = df.where(element = yearmonth.CustomerID, filter = 'in', value = df1).where(element = yearmonth.Date, filter = 'like', value = '2013-%').groupby(yearmonth.CustomerID).agg(sum(yearmonth.Consumption))\nres = df.select(df2.CustomerID, df2.TotalConsumption2012 - df3.TotalConsumption2013, df2.TotalConsumption2012).calculate(element = df2.TotalConsumption2012, operation = 'divide', value = df2.TotalConsumption2012 - df3.TotalConsumption2013)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = '2012-08-25').select([MASK])\ndf2 = df.where(element = [MASK], filter = 'in', value = df1).where(element = [MASK], filter = 'like', value = '2012-%').groupby([MASK]).agg(sum([MASK]))\ndf3 = df.where(element = [MASK], filter = 'in', value = df1).where(element = [MASK], filter = 'like', value = '2013-%').groupby([MASK]).agg(sum([MASK]))\nres = df.select([MASK], df2.[MASK] - df3.[MASK], df2.[MASK]).calculate(element = df2.[MASK], operation = 'divide', value = df2.[MASK] - df3.[MASK])\n```"}
{"idx": 1527, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(transactions_1k.GasStationID).agg(sum(multiply(transactions_1k.Amount, transactions_1k.Price)) as TotalRevenue)\ndf2 = df1.orderby(by = TotalRevenue, desc).limit(1)\nres = df2.select(transactions_1k.GasStationID, TotalRevenue)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum(multiply([MASK], [MASK])) as [MASK])\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK], [MASK])\n```"}
{"idx": 1528, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = gasstations.Country, filter = 'SVK')\ndf2 = df1.where(element = customers.Segment, filter = 'premium')\ntmp_res1 = df1.select(customers.CustomerID).distinct()\ntmp_res2 = df2.select(customers.CustomerID).distinct()\nres = df.select((tmp_res2.count() * 100.0 / tmp_res1.count()))\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 'SVK')\ndf2 = df1.where(element = [MASK], filter = 'premium')\ntmp_res1 = df1.select([MASK]).distinct()\ntmp_res2 = df2.select([MASK]).distinct()\nres = df.select((tmp_res2.count() * 100.0 / tmp_res1.count()))\n```"}
{"idx": 1529, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.CustomerID, filter = 38508)\ndf2 = df1.where(element = transactions_1k.Date, filter = 'like 201201%')\nres = df.select(\n    sum(df2.select(transactions_1k.Price)), \n    sum(transactions_1k.Price)\n)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 38508)\ndf2 = df1.where(element = [MASK], filter = 'like 201201%')\nres = df2.select(\n    sum([MASK]), \n    sum([MASK])\n)\n```"}
{"idx": 1530, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(products.ProductID).agg(sum(transactions_1k.Amount))\ndf2 = df1.orderby(by = sum(transactions_1k.Amount), desc).limit(5)\nres = df2.select(products.Description, sum(transactions_1k.Amount) as TotalAmount)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum([MASK]))\ndf2 = df1.orderby(by = sum([MASK]), desc).limit(5)\nres = df2.select([MASK], sum([MASK]) as [MASK])\n```"}
{"idx": 1531, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.groupby(customers.CustomerID).agg(sum(transactions_1k.Price) as TotalSpending)\ndf2 = df1.orderby(by = TotalSpending, desc).limit(1)\ndf3 = df.select(df2.CustomerID, df2.TotalSpending, sum(transactions_1k.Price) / sum(transactions_1k.Amount) as AvgPricePerItem, customers.Currency)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.groupby([MASK]).agg(sum([MASK]) as [MASK])\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\ndf3 = df.select(df2.[MASK], df2.[MASK], sum([MASK]) / sum([MASK]) as [MASK], [MASK])\n```"}
{"idx": 1532, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.ProductID, filter = 2)\ndf2 = df1.orderby(by = transactions_1k.Price, desc).limit(1)\nres = df2.select(gasstations.Country)\n```\n```SR\n[Your Answer]\n```", "response": "```SR\ndf1 = df.where(element = [MASK], filter = 2)\ndf2 = df1.orderby(by = [MASK], desc).limit(1)\nres = df2.select([MASK])\n```"}
{"idx": 1533, "prompt": "SR is a piece of pandas-like code, which is a intermediate representation between the natural language and SQL. I will provide you a piece of SR that show the logic of the text-to-SQL process in the context of the schema, question and evidence.\nYour task is to mask the schema (related tables and columns) in the SR and only keep the logic template. DO NOT modify the logic in the original SR, just do the mask.\nHere are some examples to help you better understand the task:\n\nHere is an example for you to understand the task\n======================= Example ===========================================\n```Input SR\ndf1 = df.where(element = Business_Hours.business_id, filter = 12)\ndf2 = df1.where(element = Days.day_of_week, filter = 'Monday')\nres = df2.select(Business_Hours.opening_time)\n```\n``` SR\ndf1 = df.where(element = [MASK], filter = 12)\ndf2 = df1.where(element = [MASK], filter = 'Monday')\nres = df2.select([MASK])\n```\n============================================================================\n\nNow mask the schema in the following SR and fill your answer in the template,\n```Input SR\ndf1 = df.where(element = transactions_1k.ProductID, filter = 5)\ndf2 = df1.where(element = transactions_1k.Price / transactions_1k.Amount, filter = '> 29.00')\ndf3 = df2.where(element = yearmonth.Date, filter = '201208')\nres = df3.select(yearmonth.CustomerID, yearmonth.Consumption)\n```\n```SR\n[Your Answer]\n```", "response": "```sql\ndf1 = df.where(element = [MASK], filter = 5)\ndf2 = df1.where(element = [MASK], filter = '> 29.00')\ndf3 = df2.where(element = [MASK], filter = '201208')\nres = df3.select([MASK], [MASK])\n```"}
