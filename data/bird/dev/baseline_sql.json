{
    "0": "SELECT MAX(\"Free Meal Count (K-12)\" / \"Enrollment (K-12)\") AS MaxEligibleFreeRate\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.County = 'Alameda'\nAND \"Enrollment (K-12)\" > 0;",
    "1": "SELECT \n    f.CDSCode,\n    f.`School Name`,\n    (f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) AS EligibleFreeRate\nFROM \n    frpm f\nWHERE \n    f.`School Type` = 'Continuation'\n    AND f.`Enrollment (Ages 5-17)` > 0\nORDER BY \n    EligibleFreeRate ASC\nLIMIT 3;",
    "2": "SELECT s.Zip\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Charter School (Y/N)` = 1\n  AND s.County = 'Fresno'",
    "3": "SELECT s.MailStreet\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nORDER BY f.`FRPM Count (K-12)` DESC\nLIMIT 1;",
    "4": "SELECT s.Phone\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Charter School (Y/N)` = 1\n  AND f.`Charter Funding Type` = 'Direct'\n  AND s.OpenDate > '2000-01-01';",
    "5": "SELECT COUNT(*)\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE satscores.AvgScrMath > 400\n  AND schools.Virtual = 'F';",
    "6": "SELECT \n    schools.School, \n    schools.District, \n    schools.County, \n    satscores.NumTstTakr\nFROM \n    satscores\nJOIN \n    schools ON satscores.cds = schools.CDSCode\nWHERE \n    satscores.NumTstTakr > 500\n    AND schools.Magnet = 1;",
    "7": "SELECT s.Phone\nFROM schools s\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.NumGE1500 = (\n    SELECT MAX(NumGE1500)\n    FROM satscores\n)\nLIMIT 1;",
    "8": "SELECT satscores.NumTstTakr\nFROM frpm\nJOIN satscores ON frpm.CDSCode = satscores.cds\nWHERE frpm.`FRPM Count (K-12)` = (\n    SELECT MAX(`FRPM Count (K-12)`)\n    FROM frpm\n);",
    "9": "SELECT COUNT(*)\nFROM satscores AS s\nJOIN schools AS sc ON s.cds = sc.CDSCode\nWHERE s.AvgScrMath > 560\nAND sc.FundingType = 'Directly Charter-Funded';",
    "10": "SELECT f.`FRPM Count (Ages 5-17)`\nFROM satscores s\nJOIN frpm f ON s.cds = f.CDSCode\nWHERE s.AvgScrRead = (\n    SELECT MAX(AvgScrRead)\n    FROM satscores\n)",
    "11": "SELECT CDSCode\nFROM frpm\nWHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;",
    "12": "SELECT MAX(f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) AS MaxEligibleFreeRate\nFROM satscores s\nJOIN frpm f ON s.cds = f.CDSCode\nWHERE (s.NumGE1500 * 1.0 / s.NumTstTakr) > 0.3\nAND f.`Enrollment (Ages 5-17)` > 0;",
    "13": "SELECT s.Phone\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nORDER BY (CAST(ss.NumGE1500 AS REAL) / ss.NumTstTakr) DESC\nLIMIT 3;",
    "14": "SELECT s.NCESSchool\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nORDER BY f.`Enrollment (Ages 5-17)` DESC\nLIMIT 5;",
    "15": "SELECT \n    s.District, \n    AVG(ss.AvgScrRead) AS AvgReadingScore\nFROM \n    satscores ss\nJOIN \n    schools s ON ss.cds = s.CDSCode\nWHERE \n    s.StatusType = 'Active'\nGROUP BY \n    s.District\nORDER BY \n    AvgReadingScore DESC\nLIMIT 1;",
    "16": "SELECT COUNT(*)\nFROM satscores AS s\nJOIN schools AS sc ON s.cds = sc.CDSCode\nWHERE sc.County = 'Alameda' AND s.NumTstTakr < 100;",
    "17": "SELECT \n    s.School, \n    s.CharterNum, \n    ss.AvgScrWrite\nFROM \n    satscores ss\nJOIN \n    schools s ON ss.cds = s.CDSCode\nWHERE \n    ss.AvgScrWrite > 499\n    AND s.CharterNum IS NOT NULL\nORDER BY \n    ss.AvgScrWrite DESC;",
    "18": "SELECT COUNT(*)\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.County = 'Fresno'\n  AND schools.FundingType = 'Directly Funded'\n  AND satscores.NumTstTakr <= 250;",
    "19": "SELECT s.Phone\nFROM schools s\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.AvgScrMath = (\n    SELECT MAX(AvgScrMath)\n    FROM satscores\n);",
    "20": "SELECT COUNT(*)\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE frpm.`County Name` = 'Amador'\n  AND frpm.`Low Grade` = '9'\n  AND frpm.`High Grade` = '12';",
    "21": "SELECT COUNT(*)\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.County = 'Los Angeles'\n  AND frpm.`Free Meal Count (K-12)` > 500\n  AND frpm.`FRPM Count (K-12)` < 700;",
    "22": "SELECT s.School, ss.NumTstTakr\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nWHERE s.County = 'Contra Costa'\nORDER BY ss.NumTstTakr DESC\nLIMIT 1;",
    "23": "SELECT \n    s.School AS SchoolName,\n    s.Street || ', ' || s.City || ', ' || s.State || ' ' || s.Zip AS FullAddress\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;",
    "24": "SELECT frpm.`School Name`\nFROM frpm\nJOIN satscores ON frpm.CDSCode = satscores.cds\nWHERE frpm.`Percent (%) Eligible Free (K-12)` > 0.1\n  AND satscores.NumGE1500 > 0;",
    "25": "SELECT s.School, s.FundingType\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nWHERE s.County = 'Riverside'\nGROUP BY s.School, s.FundingType\nHAVING AVG(ss.AvgScrMath) > 400;",
    "26": "SELECT \n    s.School AS SchoolName,\n    s.Street || ', ' || s.City || ', ' || s.State || ' ' || s.Zip AS FullAddress\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.County = 'Monterey'\n    AND f.`High Grade` = '12'\n    AND f.`FRPM Count (Ages 5-17)` > 800;",
    "27": "SELECT \n    sch.School AS SchoolName,\n    sat.AvgScrWrite AS AverageWritingScore,\n    sch.Phone AS CommunicationNumber\nFROM \n    satscores sat\nJOIN \n    schools sch ON sat.cds = sch.CDSCode\nWHERE \n    (sch.OpenDate > '1991-12-31' OR sch.ClosedDate < '2000-01-01')\n    AND sat.AvgScrWrite IS NOT NULL;",
    "28": "WITH EnrollmentDifference AS (\n    SELECT \n        s.School AS SchoolName,\n        s.DOCType,\n        f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)` AS EnrollmentDiff\n    FROM \n        frpm f\n    JOIN \n        schools s ON f.CDSCode = s.CDSCode\n    WHERE \n        s.FundingType = 'Locally Funded'\n),\nAverageDifference AS (\n    SELECT \n        AVG(EnrollmentDiff) AS AvgDiff\n    FROM \n        EnrollmentDifference\n)\nSELECT \n    SchoolName,\n    DOCType\nFROM \n    EnrollmentDifference\nWHERE \n    EnrollmentDiff > (SELECT AvgDiff FROM AverageDifference);",
    "29": "SELECT s.School, s.OpenDate\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Low Grade` = '1' AND f.`High Grade` = '12'\nORDER BY f.`Enrollment (K-12)` DESC\nLIMIT 1;",
    "30": "SELECT s.City, f.`Enrollment (K-12)`\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Enrollment (K-12)` IS NOT NULL\nORDER BY f.`Enrollment (K-12)` ASC\nLIMIT 5;",
    "31": "WITH RankedSchools AS (\n    SELECT \n        CDSCode,\n        `Enrollment (K-12)`,\n        `Free Meal Count (K-12)`,\n        (`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS EligibleFreeRate\n    FROM \n        frpm\n    WHERE \n        `Enrollment (K-12)` IS NOT NULL\n    ORDER BY \n        `Enrollment (K-12)` DESC\n)\nSELECT \n    CDSCode,\n    `Enrollment (K-12)`,\n    `Free Meal Count (K-12)`,\n    EligibleFreeRate\nFROM \n    RankedSchools\nLIMIT 2 OFFSET 9;",
    "32": "SELECT \n    s.School AS SchoolName,\n    f.`FRPM Count (K-12)`,\n    f.`Enrollment (K-12)`,\n    (f.`FRPM Count (K-12)` / f.`Enrollment (K-12)`) * 100 AS EligibleFRPMRate\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.DOC = '66'\nORDER BY \n    f.`FRPM Count (K-12)` DESC\nLIMIT 5;",
    "33": "SELECT s.School, s.Website\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;",
    "34": "SELECT \n    f.CDSCode,\n    f.`School Name`,\n    f.`Free Meal Count (Ages 5-17)`,\n    f.`Enrollment (Ages 5-17)`,\n    (f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) AS FreeRate\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    (s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson') OR\n    (s.AdmFName2 = 'Kacey' AND s.AdmLName2 = 'Gibson') OR\n    (s.AdmFName3 = 'Kacey' AND s.AdmLName3 = 'Gibson');",
    "35": "SELECT s.AdmEmail1\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Charter School (Y/N)` = 1\nORDER BY f.`Enrollment (K-12)` ASC\nLIMIT 1;",
    "36": "SELECT \n    s.AdmFName1 || ' ' || s.AdmLName1 AS Admin1_FullName,\n    s.AdmFName2 || ' ' || s.AdmLName2 AS Admin2_FullName,\n    s.AdmFName3 || ' ' || s.AdmLName3 AS Admin3_FullName\nFROM \n    satscores ss\nJOIN \n    schools s ON ss.cds = s.CDSCode\nWHERE \n    ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores);",
    "37": "SELECT \n    s.Street, \n    s.City, \n    s.Zip, \n    s.State\nFROM \n    satscores ss\nJOIN \n    schools s ON ss.cds = s.CDSCode\nWHERE \n    (ss.NumGE1500 * 1.0 / ss.NumTstTakr) = (\n        SELECT \n            MIN(ss2.NumGE1500 * 1.0 / ss2.NumTstTakr)\n        FROM \n            satscores ss2\n        WHERE \n            ss2.NumTstTakr > 0\n    )\nLIMIT 1;",
    "38": "SELECT s.Website\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nWHERE s.County = 'Los Angeles'\n  AND ss.NumTstTakr BETWEEN 2000 AND 3000;",
    "39": "SELECT AVG(satscores.NumTstTakr) AS AvgNumTestTakers\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.County = 'Fresno'\n  AND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
    "40": "SELECT s.Phone\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nWHERE s.District = 'Fresno Unified'\nORDER BY ss.AvgScrRead ASC\nLIMIT 1;",
    "41": "WITH RankedSchools AS (\n    SELECT \n        s.School AS SchoolName,\n        sc.County,\n        ss.AvgScrRead,\n        RANK() OVER (PARTITION BY sc.County ORDER BY ss.AvgScrRead DESC) AS rank\n    FROM \n        schools sc\n    JOIN \n        satscores ss ON sc.CDSCode = ss.cds\n    WHERE \n        sc.Virtual = 'F'\n)\nSELECT \n    SchoolName\nFROM \n    RankedSchools\nWHERE \n    rank <= 5;",
    "42": "SELECT s.EdOpsName\nFROM schools s\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.AvgScrMath = (\n    SELECT MAX(AvgScrMath)\n    FROM satscores\n)",
    "43": "SELECT satscores.AvgScrMath, schools.County\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE (satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite) = (\n    SELECT MIN(satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite)\n    FROM satscores\n);",
    "44": "SELECT s.AvgScrWrite, sc.City\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE s.NumGE1500 = (\n    SELECT MAX(NumGE1500)\n    FROM satscores\n)\nLIMIT 1;",
    "45": "SELECT \n    s.School AS SchoolName,\n    ss.AvgScrWrite AS AverageWritingScore\nFROM \n    schools s\nJOIN \n    satscores ss ON s.CDSCode = ss.cds\nWHERE \n    s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich';",
    "46": "SELECT \n    s.School, \n    f.`Enrollment (K-12)`\nFROM \n    schools s\nJOIN \n    frpm f ON s.CDSCode = f.CDSCode\nWHERE \n    s.DOC = '31'\nORDER BY \n    f.`Enrollment (K-12)` DESC;",
    "47": "SELECT COUNT(*) / 12.0 AS MonthlyAverage\nFROM schools\nWHERE County = 'Alameda'\n  AND DOC = '52'\n  AND strftime('%Y', OpenDate) = '1980';",
    "48": "WITH SchoolCounts AS (\n    SELECT \n        SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) AS UnifiedCount,\n        SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) AS ElementaryCount\n    FROM \n        schools\n    WHERE \n        County = 'Orange'\n)\nSELECT \n    UnifiedCount * 1.0 / ElementaryCount AS Ratio\nFROM \n    SchoolCounts;",
    "49": "WITH ClosedSchools AS (\n    SELECT County, School, ClosedDate\n    FROM schools\n    WHERE StatusType = 'Closed' OR ClosedDate IS NOT NULL\n),\nCountyClosedCounts AS (\n    SELECT County, COUNT(*) AS ClosedCount\n    FROM ClosedSchools\n    GROUP BY County\n)\nSELECT cs.School, cs.ClosedDate\nFROM ClosedSchools cs\nJOIN CountyClosedCounts ccc ON cs.County = ccc.County\nWHERE ccc.ClosedCount = (\n    SELECT MAX(ClosedCount)\n    FROM CountyClosedCounts\n)\nORDER BY cs.County, cs.ClosedDate;",
    "50": "SELECT \n    schools.School, \n    schools.Street \nFROM \n    satscores \nJOIN \n    schools ON satscores.cds = schools.CDSCode \nORDER BY \n    satscores.AvgScrMath DESC \nLIMIT 1 OFFSET 6;",
    "51": "SELECT \n    schools.MailStreet, \n    schools.School\nFROM \n    satscores\nJOIN \n    schools ON satscores.cds = schools.CDSCode\nORDER BY \n    satscores.AvgScrRead ASC\nLIMIT 1;",
    "52": "SELECT COUNT(DISTINCT s.CDSCode) AS TotalSchools\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nWHERE (ss.AvgScrRead + ss.AvgScrMath + ss.AvgScrWrite) >= 1500\nAND s.MailCity = 'Lakeport';",
    "53": "SELECT SUM(satscores.NumTstTakr) AS TotalTestTakers\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.MailCity = 'Fresno';",
    "54": "SELECT School, MailZip\nFROM schools\nWHERE (AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian')\n   OR (AdmFName2 = 'Avetik' AND AdmLName2 = 'Atoian')\n   OR (AdmFName3 = 'Avetik' AND AdmLName3 = 'Atoian');",
    "55": "WITH SchoolCounts AS (\n    SELECT \n        County,\n        COUNT(*) AS SchoolCount\n    FROM \n        schools\n    WHERE \n        MailState = 'CA'\n    GROUP BY \n        County\n)\nSELECT \n    (SELECT SchoolCount FROM SchoolCounts WHERE County = 'Colusa') * 1.0 /\n    (SELECT SchoolCount FROM SchoolCounts WHERE County = 'Humboldt') AS Ratio\n;",
    "56": "SELECT COUNT(*) \nFROM schools \nWHERE MailState = 'CA' \n  AND MailCity = 'San Joaquin' \n  AND StatusType = 'Active';",
    "57": "SELECT s.Phone, s.Ext\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nWHERE ss.AvgScrWrite IS NOT NULL\nORDER BY ss.AvgScrWrite DESC\nLIMIT 1 OFFSET 332;",
    "58": "SELECT School, Phone, Ext\nFROM schools\nWHERE Zip = '95203-3704';",
    "59": "SELECT Website\nFROM schools\nWHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson')\n   OR (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez');",
    "60": "SELECT Website\nFROM schools\nWHERE Virtual = 'P'\n  AND Charter = 1\n  AND County = 'San Joaquin';",
    "61": "SELECT COUNT(*)\nFROM schools\nWHERE Charter = 1\n  AND City = 'Hickman'\n  AND DOC = 52;",
    "62": "SELECT COUNT(*)\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.Charter = 0\n  AND s.County = 'Los Angeles'\n  AND (f.`Free Meal Count (K-12)` * 100.0 / f.`Enrollment (K-12)`) < 0.18;",
    "63": "SELECT \n    School AS SchoolName,\n    City,\n    AdmFName1 || ' ' || AdmLName1 AS Admin1,\n    AdmFName2 || ' ' || AdmLName2 AS Admin2,\n    AdmFName3 || ' ' || AdmLName3 AS Admin3\nFROM \n    schools\nWHERE \n    Charter = 1\n    AND CharterNum = '00D2';",
    "64": "SELECT COUNT(*)\nFROM schools\nWHERE MailCity = 'Hickman' AND CharterNum = '00D4';",
    "65": "SELECT \n    (COUNT(CASE WHEN FundingType = 'Locally Funded' THEN 1 END) * 100.0 / COUNT(*)) AS LocallyFundedPercentage\nFROM \n    schools\nWHERE \n    County = 'Santa Clara' \n    AND Charter IS NOT NULL;",
    "66": "SELECT COUNT(*)\nFROM schools\nWHERE County = 'Stanislaus'\n  AND FundingType = 'Directly Funded'\n  AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';",
    "67": "SELECT COUNT(*) AS TotalClosures\nFROM schools\nWHERE City = 'San Francisco'\n  AND strftime('%Y', ClosedDate) = '1989'\n  AND DOCType = 'Community College District';",
    "68": "SELECT County, COUNT(*) AS ClosureCount\nFROM schools\nWHERE ClosedDate BETWEEN '1980-01-01' AND '1989-12-31'\n  AND SOC = '11'\nGROUP BY County\nORDER BY ClosureCount DESC\nLIMIT 1;",
    "69": "SELECT NCESDist\nFROM schools\nWHERE SOC = '31';",
    "70": "SELECT \n    StatusType, \n    COUNT(*) AS SchoolCount\nFROM \n    schools\nWHERE \n    County = 'Alpine' \n    AND DOCType = 'District Community Day School'\nGROUP BY \n    StatusType;",
    "71": "SELECT District\nFROM schools\nWHERE Magnet = 0\n  AND City = 'Fresno';",
    "72": "SELECT SUM(f.Enrollment) AS TotalEnrollment\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.City = 'Fremont'\n  AND s.EdOpsCode = 'SSS'\n  AND f.`Academic Year` = '2014-2015'",
    "73": "SELECT f.`FRPM Count (Ages 5-17)`\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.MailStreet = 'PO Box 1040'\nAND s.EdOpsName = 'Youth Authority School';",
    "74": "SELECT f.`Low Grade`\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.EdOpsCode = 'SPECON'\n  AND s.NCESDist = '0613360';",
    "75": "SELECT \n    frpm.`School Name`, \n    frpm.`Educational Option Type`\nFROM \n    frpm\nJOIN \n    schools ON frpm.CDSCode = schools.CDSCode\nWHERE \n    frpm.`County Code` = '37' \n    AND frpm.`NSLP Provision Status` = 'Breakfast Provision 2';",
    "76": "SELECT s.City\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`NSLP Provision Status` = '2'\n  AND f.`Low Grade` = '9'\n  AND f.`High Grade` = '12'\n  AND f.`County Name` = 'Merced'\n  AND s.EILCode = 'HS';",
    "77": "SELECT \n    s.School AS SchoolName,\n    (f.`FRPM Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) * 100 AS PercentEligibleFRPM\nFROM \n    frpm f\nJOIN \n    schools s ON f.CDSCode = s.CDSCode\nWHERE \n    s.County = 'Los Angeles'\n    AND f.`Low Grade` = 'K'\n    AND f.`High Grade` = '9'\n    AND f.`Enrollment (Ages 5-17)` IS NOT NULL\n    AND f.`FRPM Count (Ages 5-17)` IS NOT NULL;",
    "78": "SELECT GSserved, COUNT(*) AS count\nFROM schools\nWHERE City = 'Adelanto'\nGROUP BY GSserved\nORDER BY count DESC\nLIMIT 1;",
    "79": "SELECT County, COUNT(*) AS NumberOfSchools\nFROM schools\nWHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F'\nGROUP BY County\nORDER BY NumberOfSchools DESC;",
    "80": "SELECT School, StatusType, Latitude\nFROM schools\nWHERE Latitude = (SELECT MAX(Latitude) FROM schools);",
    "81": "SELECT School, City, GSoffered AS \"Lowest Grade\"\nFROM schools\nWHERE State = 'CA'\nORDER BY Latitude ASC\nLIMIT 1;",
    "82": "SELECT GSoffered\nFROM schools\nORDER BY ABS(Longitude) DESC\nLIMIT 1;",
    "83": "WITH K8_Magnet_Schools AS (\n    SELECT s.CDSCode, s.City\n    FROM schools s\n    JOIN frpm f ON s.CDSCode = f.CDSCode\n    WHERE s.Magnet = 1 AND s.GSserved = 'K-8'\n),\nMultiple_Provision_Schools AS (\n    SELECT k8.CDSCode\n    FROM K8_Magnet_Schools k8\n    JOIN frpm f ON k8.CDSCode = f.CDSCode\n    WHERE f.`NSLP Provision Status` = 'Multiple Provision Types'\n),\nCity_School_Count AS (\n    SELECT City, COUNT(*) AS SchoolCount\n    FROM K8_Magnet_Schools\n    GROUP BY City\n)\n\nSELECT \n    (SELECT COUNT(*) FROM Multiple_Provision_Schools) AS Multiple_Provision_School_Count,\n    City_School_Count.City,\n    City_School_Count.SchoolCount\nFROM City_School_Count;",
    "84": "WITH AdminNames AS (\n    SELECT AdmFName1 AS FirstName, District FROM schools\n    UNION ALL\n    SELECT AdmFName2 AS FirstName, District FROM schools\n    UNION ALL\n    SELECT AdmFName3 AS FirstName, District FROM schools\n),\nNameCounts AS (\n    SELECT FirstName, District, COUNT(*) AS NameCount\n    FROM AdminNames\n    WHERE FirstName IS NOT NULL\n    GROUP BY FirstName, District\n)\nSELECT FirstName, District, SUM(NameCount) AS TotalCount\nFROM NameCounts\nGROUP BY FirstName, District\nORDER BY TotalCount DESC\nLIMIT 2;",
    "85": "SELECT f.`District Code`\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.AdmFName1 = 'Alusine'\nAND f.`Enrollment (K-12)` > 0\nAND f.`Free Meal Count (K-12)` / f.`Enrollment (K-12)` * 100 = f.`Percent (%) Eligible Free (K-12)`;",
    "86": "SELECT \n    AdmLName1 AS AdministratorLastName,\n    District,\n    County,\n    School\nFROM \n    schools\nWHERE \n    CharterNum = '40';",
    "87": "SELECT AdmEmail1, AdmEmail2, AdmEmail3\nFROM schools\nWHERE County = 'San Bernardino'\n  AND District = 'San Bernardino City Unified'\n  AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'\n  AND (SOC = '62' OR DOC = '54')\n  AND (AdmEmail1 IS NOT NULL OR AdmEmail2 IS NOT NULL OR AdmEmail3 IS NOT NULL);",
    "88": "SELECT \n    s.School AS SchoolName,\n    s.AdmEmail1 AS AdminEmail\nFROM \n    satscores ss\nJOIN \n    schools s ON ss.cds = s.CDSCode\nWHERE \n    ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores);",
    "89": "SELECT COUNT(DISTINCT a.account_id) AS account_count\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN card c ON d.disp_id = c.disp_id\nJOIN district dis ON a.district_id = dis.district_id\nWHERE c.type = 'POPLATEK PO OBRATU'\nAND dis.A3 = 'East Bohemia';",
    "90": "SELECT COUNT(DISTINCT a.account_id) AS eligible_accounts\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE d.A3 = 'Prague';",
    "91": "SELECT \n    AVG(A12) AS avg_unemployment_1995,\n    AVG(A13) AS avg_unemployment_1996\nFROM \n    district;",
    "92": "SELECT COUNT(*) AS number_of_districts\nFROM district\nWHERE A11 > 6000 AND A11 < 10000;",
    "93": "SELECT COUNT(*)\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE client.gender = 'M'\n  AND district.A3 = 'North Bohemia'\n  AND district.A11 > 8000;",
    "94": "WITH OldestFemale AS (\n    SELECT c.client_id, c.district_id, MIN(c.birth_date) AS oldest_birth_date\n    FROM client c\n    WHERE c.gender = 'F'\n    GROUP BY c.district_id\n),\nLowestAvgSalaryDistrict AS (\n    SELECT district_id, MIN(A11) AS lowest_avg_salary\n    FROM district\n    GROUP BY district_id\n    ORDER BY lowest_avg_salary ASC\n    LIMIT 1\n),\nHighestAvgSalary AS (\n    SELECT MAX(A11) AS highest_avg_salary\n    FROM district\n),\nAccountNumbers AS (\n    SELECT d.account_id\n    FROM disp d\n    JOIN OldestFemale of ON d.client_id = of.client_id\n    JOIN LowestAvgSalaryDistrict lasd ON of.district_id = lasd.district_id\n)\nSELECT an.account_id, \n       (has.highest_avg_salary - lasd.lowest_avg_salary) AS salary_gap\nFROM AccountNumbers an\nCROSS JOIN HighestAvgSalary has\nJOIN LowestAvgSalaryDistrict lasd;",
    "95": "SELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district dist ON c.district_id = dist.district_id\nWHERE c.birth_date = (SELECT MAX(birth_date) FROM client)\nAND dist.A11 = (SELECT MAX(A11) FROM district);",
    "96": "SELECT COUNT(DISTINCT d.client_id) AS number_of_owners\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nWHERE a.frequency = 'POPLATEK TYDNE'\nAND d.type = 'Owner';",
    "97": "SELECT DISTINCT d.client_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nWHERE a.frequency = 'POPLATEK PO OBRATU'\n  AND d.type = 'DISPONENT';",
    "98": "SELECT a.account_id\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.status = 'approved'\n  AND strftime('%Y', l.date) = '1997'\n  AND a.frequency = 'POPLATEK TYDNE'\n  AND l.amount = (\n    SELECT MIN(amount)\n    FROM loan\n    WHERE status = 'approved'\n      AND strftime('%Y', date) = '1997'\n  );",
    "99": "SELECT l.account_id\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.duration > 12\n  AND strftime('%Y', a.date) = '1993'\n  AND l.amount = (\n    SELECT MAX(l2.amount)\n    FROM loan l2\n    JOIN account a2 ON l2.account_id = a2.account_id\n    WHERE l2.duration > 12\n      AND strftime('%Y', a2.date) = '1993'\n  );",
    "100": "SELECT COUNT(DISTINCT a.account_id) AS female_customers_count\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN disp dp ON c.client_id = dp.client_id\nJOIN account a ON dp.account_id = a.account_id\nWHERE c.gender = 'F'\n  AND c.birth_date < '1950-01-01'\n  AND d.A2 = 'Sokolov';",
    "101": "SELECT DISTINCT t.account_id\nFROM trans t\nWHERE t.date = (\n    SELECT MIN(t2.date)\n    FROM trans t2\n    WHERE strftime('%Y', t2.date) = '1995'\n);",
    "102": "SELECT DISTINCT a.account_id\nFROM account a\nJOIN trans t ON a.account_id = t.account_id\nWHERE a.date < '1997-01-01'\nAND t.balance > 3000;",
    "103": "SELECT client.client_id\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nJOIN client ON disp.client_id = client.client_id\nWHERE card.issued = '1994-03-03';",
    "104": "SELECT a.date AS account_opened_date\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nWHERE t.amount = 840\n  AND t.date = '1998-10-14';",
    "105": "SELECT a.district_id\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE l.date = '1994-08-25';",
    "106": "SELECT MAX(t.amount) AS max_transaction_amount\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nJOIN card c ON d.disp_id = c.disp_id\nWHERE c.issued = '1996-10-21';",
    "107": "SELECT c.gender\nFROM client c\nJOIN account a ON c.district_id = a.district_id\nWHERE c.district_id = (\n    SELECT district_id\n    FROM district\n    ORDER BY A11 DESC\n    LIMIT 1\n)\nORDER BY c.birth_date\nLIMIT 1;",
    "108": "WITH BiggestLoanAccount AS (\n    SELECT account_id\n    FROM loan\n    ORDER BY amount DESC\n    LIMIT 1\n),\nClientAccount AS (\n    SELECT client_id, account_id\n    FROM disp\n    WHERE account_id IN (SELECT account_id FROM BiggestLoanAccount)\n),\nFirstTransaction AS (\n    SELECT account_id, MIN(date) AS first_trans_date\n    FROM trans\n    WHERE account_id IN (SELECT account_id FROM ClientAccount)\n    GROUP BY account_id\n)\nSELECT t.amount\nFROM trans t\nJOIN FirstTransaction ft ON t.account_id = ft.account_id AND t.date = ft.first_trans_date;",
    "109": "SELECT COUNT(DISTINCT client.client_id) AS number_of_women_clients\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN account ON disp.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE district.A2 = 'Jesenik' AND client.gender = 'F';",
    "110": "SELECT disp.disp_id\nFROM trans\nJOIN disp ON trans.account_id = disp.account_id\nWHERE trans.amount = 5100\n  AND trans.date = '1998-09-02';",
    "111": "SELECT COUNT(*)\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    WHERE A2 = 'Litomerice'\n)\nAND strftime('%Y', date) = '1996';",
    "112": "SELECT d.A2 AS district_name\nFROM client c\nJOIN disp dp ON c.client_id = dp.client_id\nJOIN account a ON dp.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE c.gender = 'F'\n  AND c.birth_date = '1976-01-29';",
    "113": "SELECT c.birth_date\nFROM loan l\nJOIN disp d ON l.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE l.amount = 98832\n  AND l.date = '1996-01-03';",
    "114": "SELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district dist ON c.district_id = dist.district_id\nWHERE dist.A3 = 'Prague'\nORDER BY a.date ASC\nLIMIT 1;",
    "115": "WITH SouthBohemiaDistrict AS (\n    SELECT district_id\n    FROM district\n    WHERE A3 = 'south Bohemia'\n    ORDER BY CAST(A4 AS INTEGER) DESC\n    LIMIT 1\n),\nClientCounts AS (\n    SELECT \n        COUNT(*) AS total_clients,\n        SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS male_clients\n    FROM client\n    WHERE district_id = (SELECT district_id FROM SouthBohemiaDistrict)\n)\nSELECT \n    (male_clients * 100.0 / total_clients) AS male_percentage\nFROM ClientCounts;",
    "116": "WITH FirstApprovedLoan AS (\n    SELECT loan_id, account_id\n    FROM loan\n    WHERE date = '1993-07-05'\n    ORDER BY loan_id\n    LIMIT 1\n),\nClientAccount AS (\n    SELECT disp.client_id, disp.account_id\n    FROM disp\n    JOIN FirstApprovedLoan ON disp.account_id = FirstApprovedLoan.account_id\n),\nBalances AS (\n    SELECT account_id,\n           MAX(CASE WHEN date = '1993-03-22' THEN balance END) AS balance_1993_03_22,\n           MAX(CASE WHEN date = '1998-12-27' THEN balance END) AS balance_1998_12_27\n    FROM trans\n    WHERE account_id IN (SELECT account_id FROM ClientAccount)\n    GROUP BY account_id\n)\nSELECT account_id,\n       ((balance_1998_12_27 - balance_1993_03_22) / balance_1993_03_22) * 100 AS increase_rate\nFROM Balances;",
    "117": "SELECT \n    (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0) / SUM(amount) AS percentage_fully_paid\nFROM \n    loan;",
    "118": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN l.status = 'C' THEN l.account_id END) AS FLOAT) / \n     COUNT(DISTINCT l.account_id)) * 100 AS percentage_running_no_issue\nFROM \n    loan l\nWHERE \n    l.amount < 100000;",
    "119": "SELECT DISTINCT a.account_id, d.A2 AS district_name, d.A3 AS district_region\nFROM account a\nJOIN trans t ON a.account_id = t.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE strftime('%Y', a.date) = '1993'\n  AND t.k_symbol = 'POPLATEK PO OBRATU';",
    "120": "SELECT \n    a.account_id, \n    a.frequency\nFROM \n    account a\nJOIN \n    disp d ON a.account_id = d.account_id\nJOIN \n    client c ON d.client_id = c.client_id\nJOIN \n    district dis ON a.district_id = dis.district_id\nWHERE \n    dis.A3 = 'east Bohemia'\n    AND a.date BETWEEN '1995-01-01' AND '2000-12-31'\n    AND d.type = 'OWNER';",
    "121": "SELECT account_id, date\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    WHERE A2 = 'Prachatice'\n);",
    "122": "SELECT d.A2 AS district, d.A3 AS region\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.loan_id = 4990;",
    "123": "SELECT \n    loan.account_id, \n    district.A2 AS district, \n    district.A3 AS region\nFROM \n    loan\nJOIN \n    account ON loan.account_id = account.account_id\nJOIN \n    district ON account.district_id = district.district_id\nWHERE \n    loan.amount > 300000;",
    "124": "SELECT \n    loan.loan_id, \n    district.A3 AS district, \n    district.A11 AS average_salary\nFROM \n    loan\nJOIN \n    account ON loan.account_id = account.account_id\nJOIN \n    district ON account.district_id = district.district_id\nWHERE \n    loan.duration = 60;",
    "125": "SELECT \n    d.district_id,\n    ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    disp dp ON a.account_id = dp.account_id\nJOIN \n    client c ON dp.client_id = c.client_id\nJOIN \n    district d ON c.district_id = d.district_id\nWHERE \n    l.status = 'D'\nGROUP BY \n    d.district_id;",
    "126": "SELECT \n    (CAST(COUNT(CASE WHEN d.A2 = 'Decin' THEN 1 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_decin_accounts_1993\nFROM \n    account a\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    strftime('%Y', a.date) = '1993';",
    "127": "SELECT account_id\nFROM account\nWHERE frequency = 'POPLATEK MESICNE';",
    "128": "SELECT \n    d.district_id, \n    COUNT(DISTINCT c.client_id) AS female_account_holders\nFROM \n    client c\nJOIN \n    disp dp ON c.client_id = dp.client_id\nJOIN \n    account a ON dp.account_id = a.account_id\nJOIN \n    district d ON c.district_id = d.district_id\nWHERE \n    c.gender = 'F'\nGROUP BY \n    d.district_id\nORDER BY \n    female_account_holders DESC\nLIMIT 9;",
    "129": "SELECT \n    d.A2 AS district_name,\n    SUM(t.amount) AS total_withdrawal\nFROM \n    trans t\nJOIN \n    account a ON t.account_id = a.account_id\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    t.type = 'VYDAJ' \n    AND t.date LIKE '1996-01%'\nGROUP BY \n    d.A2\nORDER BY \n    total_withdrawal DESC\nLIMIT 10;",
    "130": "SELECT COUNT(DISTINCT a.account_id) AS account_holders_without_cards\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nLEFT JOIN disp dp ON a.account_id = dp.account_id\nLEFT JOIN card c ON dp.disp_id = c.disp_id\nWHERE d.A3 = 'South Bohemia' AND c.card_id IS NULL;",
    "131": "SELECT d.A3 AS district_name, SUM(l.amount) AS total_active_loan\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.status IN ('C', 'D')\nGROUP BY d.district_id\nORDER BY total_active_loan DESC\nLIMIT 1;",
    "132": "SELECT AVG(loan.amount) AS average_loan_amount\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN loan ON disp.account_id = loan.account_id\nWHERE client.gender = 'M';",
    "133": "SELECT A2 AS district_name, A4 AS branch_location, A13 AS unemployment_rate_1996\nFROM district\nORDER BY A13 DESC;",
    "134": "SELECT COUNT(a.account_id) AS number_of_accounts\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A16 = (\n    SELECT MAX(A16) FROM district\n);",
    "135": "SELECT DISTINCT a.account_id\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nWHERE t.operation = 'VYBER KARTOU'\n  AND t.balance < 0\n  AND a.frequency = 'POPLATEK MESICNE';",
    "136": "SELECT COUNT(DISTINCT loan.loan_id) AS approved_loans_count\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE loan.amount >= 250000\n  AND loan.status = 'A'  -- Assuming 'A' stands for approved\n  AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'\n  AND account.frequency = 'POPLATEK MESICNE';",
    "137": "SELECT COUNT(DISTINCT a.account_id) AS running_contracts_count\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = 'Branch location 1'\nAND l.status IN ('C', 'D');",
    "138": "WITH RankedDistricts AS (\n    SELECT district_id, A15,\n           RANK() OVER (ORDER BY A15 DESC) as rank\n    FROM district\n)\nSELECT COUNT(*) as male_clients_count\nFROM client\nWHERE gender = 'M'\nAND district_id = (\n    SELECT district_id\n    FROM RankedDistricts\n    WHERE rank = 2\n);",
    "139": "SELECT COUNT(*)\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE card.type = 'gold' AND disp.type = 'OWNER';",
    "140": "SELECT COUNT(*) AS number_of_accounts\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    WHERE A2 = 'Pisek'\n);",
    "141": "SELECT DISTINCT d.district_id, d.A2, d.A3, d.A4, d.A5, d.A6, d.A7\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.amount > 10000\nAND strftime('%Y', t.date) = '1997';",
    "142": "SELECT DISTINCT o.account_id\nFROM `order` o\nJOIN account a ON o.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A3 = 'Pisek' AND o.k_symbol = 'SIPO';",
    "143": "SELECT DISTINCT account.account_id\nFROM account\nJOIN disp ON account.account_id = disp.account_id\nJOIN card ON disp.disp_id = card.disp_id\nWHERE card.type = 'gold';",
    "144": "WITH MonthlyAverages AS (\n    SELECT \n        strftime('%Y-%m', date) AS month,\n        AVG(amount) AS avg_monthly_amount\n    FROM \n        trans\n    WHERE \n        operation = 'VYBER KARTOU' AND\n        strftime('%Y', date) = '2021'\n    GROUP BY \n        strftime('%Y-%m', date)\n)\nSELECT \n    AVG(avg_monthly_amount) AS avg_amount_per_month\nFROM \n    MonthlyAverages;",
    "145": "WITH CreditCardTransactions AS (\n    SELECT t.account_id, t.amount\n    FROM trans t\n    WHERE t.operation = 'VYBER KARTOU'\n    AND strftime('%Y', t.date) = '1998'\n),\nAverageAmount AS (\n    SELECT AVG(amount) AS avg_amount\n    FROM CreditCardTransactions\n),\nBelowAverageTransactions AS (\n    SELECT cct.account_id\n    FROM CreditCardTransactions cct, AverageAmount aa\n    WHERE cct.amount < aa.avg_amount\n)\nSELECT DISTINCT d.client_id\nFROM BelowAverageTransactions bat\nJOIN disp d ON bat.account_id = d.account_id\nWHERE d.type = 'OWNER';",
    "146": "SELECT DISTINCT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN card cr ON d.disp_id = cr.disp_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE c.gender = 'F';",
    "147": "SELECT COUNT(DISTINCT account.account_id) AS female_accounts_in_south_bohemia\nFROM client\nJOIN district ON client.district_id = district.district_id\nJOIN disp ON client.client_id = disp.client_id\nJOIN account ON disp.account_id = account.account_id\nWHERE client.gender = 'F' AND district.A3 = 'south Bohemia';",
    "148": "SELECT a.account_id\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nJOIN disp dp ON a.account_id = dp.account_id\nWHERE d.A2 = 'Tabor' AND dp.type = 'OWNER';",
    "149": "SELECT DISTINCT d.type\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN district dist ON a.district_id = dist.district_id\nWHERE d.type != 'OWNER'\nAND dist.A11 > 8000\nAND dist.A11 <= 9000;",
    "150": "SELECT COUNT(DISTINCT t.account_id) AS num_accounts\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';",
    "151": "SELECT DISTINCT d.A2 AS district_name\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.type = 'VYDAJ';",
    "152": "SELECT AVG(d.A15) AS average_crimes_1995\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE d.A15 > 4000\n  AND strftime('%Y', a.date) >= '1997';",
    "153": "SELECT COUNT(DISTINCT card.card_id) AS classic_cards_eligible_for_loan\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nJOIN account ON disp.account_id = account.account_id\nWHERE disp.type = 'OWNER' AND card.type = 'classic';",
    "154": "SELECT COUNT(*) AS male_clients_count\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE client.gender = 'M' AND district.A2 = 'Hl.m. Praha';",
    "155": "SELECT \n    (CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percent_gold_before_1998\nFROM \n    card;",
    "156": "SELECT c.client_id, c.gender, c.birth_date, c.district_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN loan l ON d.account_id = l.account_id\nWHERE l.amount = (\n    SELECT MAX(amount) FROM loan\n);",
    "157": "SELECT d.A15 AS crimes_1995\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.account_id = 532;",
    "158": "SELECT district.district_id\nFROM `order`\nJOIN account ON `order`.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE `order`.order_id = 33333;",
    "159": "SELECT t.*\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE c.client_id = 3356\n  AND t.operation = 'VYBER';",
    "160": "SELECT COUNT(DISTINCT a.account_id) AS weekly_accounts_with_loan_under_200000\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE a.frequency = 'POPLATEK TYDNE'\n  AND l.amount < 200000;",
    "161": "SELECT card.type\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE disp.client_id = 13539;",
    "162": "SELECT d.A3 AS region\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE c.client_id = 3541;",
    "163": "SELECT \n    d.district_id, \n    COUNT(a.account_id) AS num_accounts\nFROM \n    loan l\nJOIN \n    account a ON l.account_id = a.account_id\nJOIN \n    district d ON a.district_id = d.district_id\nWHERE \n    l.status = 'A'\nGROUP BY \n    d.district_id\nORDER BY \n    num_accounts DESC\nLIMIT 1;",
    "164": "SELECT c.client_id, c.gender, c.birth_date, c.district_id\nFROM `order` o\nJOIN disp d ON o.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nWHERE o.order_id = 32423;",
    "165": "SELECT trans.*\nFROM trans\nJOIN account ON trans.account_id = account.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE district.district_id = 5;",
    "166": "SELECT COUNT(*)\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    WHERE A2 = 'Jesenik'\n);",
    "167": "SELECT DISTINCT d.client_id\nFROM card c\nJOIN disp d ON c.disp_id = d.disp_id\nWHERE c.type = 'junior' AND c.issued >= '1997-01-01';",
    "168": "SELECT \n    (COUNT(DISTINCT c.client_id) * 100.0 / COUNT(DISTINCT d.client_id)) AS percentage_of_women\nFROM \n    client c\nJOIN \n    disp d ON c.client_id = d.client_id\nJOIN \n    account a ON d.account_id = a.account_id\nJOIN \n    district dist ON a.district_id = dist.district_id\nWHERE \n    dist.A11 > 10000\n    AND c.gender = 'F';",
    "169": "WITH LoanAmounts AS (\n    SELECT \n        strftime('%Y', l.date) AS loan_year,\n        SUM(l.amount) AS total_amount\n    FROM \n        loan l\n    JOIN \n        account a ON l.account_id = a.account_id\n    JOIN \n        disp d ON a.account_id = d.account_id\n    JOIN \n        client c ON d.client_id = c.client_id\n    WHERE \n        c.gender = 'M'\n    GROUP BY \n        loan_year\n    HAVING \n        loan_year IN ('1996', '1997')\n),\nAmounts AS (\n    SELECT \n        (SELECT total_amount FROM LoanAmounts WHERE loan_year = '1997') AS amount_1997,\n        (SELECT total_amount FROM LoanAmounts WHERE loan_year = '1996') AS amount_1996\n)\nSELECT \n    ((amount_1997 - amount_1996) / amount_1996) * 100 AS growth_rate\nFROM \n    Amounts;",
    "170": "SELECT COUNT(*) AS credit_card_withdrawals\nFROM trans\nWHERE operation = 'VYBER KARTOU'\n  AND date > '1995-12-31';",
    "171": "SELECT \n    (SELECT A16 FROM district WHERE A3 = 'North Bohemia') -\n    (SELECT A16 FROM district WHERE A3 = 'East Bohemia') AS crime_difference;",
    "172": "SELECT type, COUNT(*) AS count\nFROM disp\nWHERE account_id BETWEEN 1 AND 10\nGROUP BY type;",
    "173": "SELECT \n    a.frequency AS account_statement_frequency,\n    t.k_symbol AS debit_aim\nFROM \n    account a\nJOIN \n    trans t ON a.account_id = t.account_id\nWHERE \n    a.account_id = 3\n    AND t.amount = 3539\n    AND t.type = 'debit';",
    "174": "SELECT strftime('%Y', c.birth_date) AS birth_year\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nWHERE d.account_id = 130;",
    "175": "SELECT COUNT(DISTINCT a.account_id) AS num_accounts\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nWHERE d.type = 'OWNER' AND a.frequency = 'POPLATEK PO OBRATU';",
    "176": "SELECT \n    SUM(l.amount) AS total_debt,\n    GROUP_CONCAT(DISTINCT l.status) AS payment_status\nFROM \n    client c\nJOIN \n    disp d ON c.client_id = d.client_id\nJOIN \n    loan l ON d.account_id = l.account_id\nWHERE \n    c.client_id = 992;",
    "177": "SELECT \n    t.balance, \n    c.gender\nFROM \n    trans t\nJOIN \n    disp d ON t.account_id = d.account_id\nJOIN \n    client c ON d.client_id = c.client_id\nWHERE \n    c.client_id = 4\n    AND t.trans_id = 851;",
    "178": "SELECT card.type\nFROM card\nJOIN disp ON card.disp_id = disp.disp_id\nWHERE disp.client_id = 9;",
    "179": "SELECT SUM(t.amount) AS total_paid\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nWHERE d.client_id = 617\n  AND t.type = 'debit'\n  AND strftime('%Y', t.date) = '1998';",
    "180": "SELECT c.client_id, c.birth_date\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN district dis ON a.district_id = dis.district_id\nWHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31'\nAND dis.A2 = 'East Bohemia';",
    "181": "SELECT c.client_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN loan l ON d.account_id = l.account_id\nWHERE c.gender = 'F'\nORDER BY l.amount DESC\nLIMIT 3;",
    "182": "SELECT COUNT(DISTINCT c.client_id) AS male_customers_count\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN trans t ON d.account_id = t.account_id\nWHERE c.gender = 'M'\n  AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31'\n  AND t.type = 'debit'\n  AND t.k_symbol = 'SIPO'\n  AND t.amount > 4000;",
    "183": "SELECT COUNT(*)\nFROM account\nWHERE district_id = (\n    SELECT district_id\n    FROM district\n    WHERE A3 = 'Beroun'\n)\nAND date > '1996-12-31';",
    "184": "SELECT COUNT(DISTINCT client.client_id) AS female_junior_cardholders\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN card ON disp.disp_id = card.disp_id\nWHERE client.gender = 'F' AND card.type = 'junior';",
    "185": "WITH prague_districts AS (\n    SELECT district_id\n    FROM district\n    WHERE A3 LIKE '%Prague%'\n),\nprague_accounts AS (\n    SELECT account_id\n    FROM account\n    WHERE district_id IN (SELECT district_id FROM prague_districts)\n),\nprague_clients AS (\n    SELECT DISTINCT client_id\n    FROM disp\n    WHERE account_id IN (SELECT account_id FROM prague_accounts)\n),\nfemale_clients AS (\n    SELECT COUNT(*) AS female_count\n    FROM client\n    WHERE client_id IN (SELECT client_id FROM prague_clients) AND gender = 'F'\n),\ntotal_clients AS (\n    SELECT COUNT(*) AS total_count\n    FROM client\n    WHERE client_id IN (SELECT client_id FROM prague_clients)\n)\nSELECT (female_count * 100.0 / total_count) AS female_percentage\nFROM female_clients, total_clients;",
    "186": "SELECT \n    (CAST(COUNT(CASE WHEN c.gender = 'M' THEN 1 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_male_weekly\nFROM \n    account a\nJOIN \n    disp d ON a.account_id = d.account_id\nJOIN \n    client c ON d.client_id = c.client_id\nWHERE \n    a.frequency = 'POPLATEK TYDNE';",
    "187": "SELECT COUNT(DISTINCT d.client_id) AS number_of_owners\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER';",
    "188": "SELECT a.account_id\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.duration > 24\n  AND l.amount = (\n      SELECT MIN(amount)\n      FROM loan\n      WHERE duration > 24\n  )\n  AND a.date < '1997-01-01';",
    "189": "WITH FemaleClients AS (\n    SELECT client_id, birth_date, district_id\n    FROM client\n    WHERE gender = 'F'\n),\nOldestFemaleClient AS (\n    SELECT client_id, district_id\n    FROM FemaleClients\n    WHERE birth_date = (SELECT MIN(birth_date) FROM FemaleClients)\n),\nLowestSalaryDistrict AS (\n    SELECT district_id\n    FROM district\n    WHERE A11 = (SELECT MIN(A11) FROM district)\n)\nSELECT a.account_id\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN OldestFemaleClient ofc ON d.client_id = ofc.client_id\nJOIN LowestSalaryDistrict lsd ON ofc.district_id = lsd.district_id;",
    "190": "SELECT COUNT(*) AS num_clients\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE strftime('%Y', client.birth_date) = '1920'\n  AND district.A3 = 'East Bohemia';",
    "191": "SELECT COUNT(*)\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE loan.duration = 24\n  AND account.frequency = 'POPLATEK TYDNE';",
    "192": "SELECT AVG(l.amount) AS average_loan_amount\nFROM loan l\nJOIN `order` o ON l.account_id = o.account_id\nWHERE l.status = 'C'\nAND o.k_symbol = 'POPLATEK PO OBRATU';",
    "193": "SELECT c.client_id, c.district_id\nFROM disp d\nJOIN client c ON d.client_id = c.client_id\nWHERE d.type = 'OWNER';",
    "194": "SELECT \n    c.client_id, \n    (strftime('%Y', 'now') - strftime('%Y', c.birth_date)) - \n    (strftime('%m-%d', 'now') < strftime('%m-%d', c.birth_date)) AS age\nFROM \n    client c\nJOIN \n    disp d ON c.client_id = d.client_id\nJOIN \n    card ca ON d.disp_id = ca.disp_id\nWHERE \n    ca.type = 'gold' \n    AND d.type = 'OWNER';",
    "195": "SELECT bond_type\nFROM bond\nGROUP BY bond_type\nORDER BY COUNT(bond_type) DESC\nLIMIT 1;",
    "196": "SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules_with_chlorine\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '-' AND a.element = 'cl';",
    "197": "WITH SingleBondedMolecules AS (\n    SELECT DISTINCT b.molecule_id\n    FROM bond b\n    WHERE b.bond_type = '-'\n)\nSELECT AVG(oxygen_count) AS avg_oxygen_atoms\nFROM (\n    SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count\n    FROM molecule m\n    JOIN atom a ON m.molecule_id = a.molecule_id\n    WHERE a.element = 'o' AND m.molecule_id IN (SELECT molecule_id FROM SingleBondedMolecules)\n    GROUP BY m.molecule_id\n);",
    "198": "SELECT AVG(single_bond_count) AS average_single_bonds\nFROM (\n    SELECT m.molecule_id, COUNT(b.bond_id) AS single_bond_count\n    FROM molecule m\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    WHERE m.label = '+' AND b.bond_type = '-'\n    GROUP BY m.molecule_id\n) AS single_bond_counts;",
    "199": "SELECT COUNT(DISTINCT m.molecule_id) AS non_carcinogenic_sodium_molecules\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'na' AND m.label = '-';",
    "200": "SELECT DISTINCT m.molecule_id, m.label\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '#' AND m.label = '+';",
    "201": "SELECT \n    (SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS carbon_percentage\nFROM \n    molecule m\nJOIN \n    bond b ON m.molecule_id = b.molecule_id\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a ON c.atom_id = a.atom_id\nWHERE \n    b.bond_type = '='",
    "202": "SELECT COUNT(*) AS triple_bond_count\nFROM bond\nWHERE bond_type = '#';",
    "203": "SELECT COUNT(*) AS no_bromine_atoms\nFROM atom\nWHERE element != 'br';",
    "204": "SELECT COUNT(*) \nFROM molecule \nWHERE molecule_id BETWEEN 'TR000' AND 'TR099' \nAND label = '+';",
    "205": "SELECT DISTINCT molecule_id\nFROM atom\nWHERE element = 'c';",
    "206": "SELECT a.element\nFROM connected c\nJOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id\nWHERE c.bond_id = 'TR004_8_9';",
    "207": "SELECT DISTINCT a.element\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id\nWHERE b.bond_type = '='",
    "208": "SELECT m.label, COUNT(*) AS count\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'h'\nGROUP BY m.label\nORDER BY count DESC\nLIMIT 1;",
    "209": "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'cl';",
    "210": "SELECT c.atom_id, c.atom_id2\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '-';",
    "211": "SELECT c.atom_id, c.atom_id2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN molecule m ON a1.molecule_id = m.molecule_id\nWHERE m.label = '-';",
    "212": "SELECT element\nFROM atom\nWHERE molecule_id IN (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = '-'\n)\nGROUP BY element\nORDER BY COUNT(element) ASC\nLIMIT 1;",
    "213": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20')\n   OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');",
    "214": "SELECT DISTINCT m.label\nFROM molecule m\nWHERE m.molecule_id NOT IN (\n    SELECT DISTINCT a.molecule_id\n    FROM atom a\n    WHERE a.element = 'sn'\n);",
    "215": "WITH SingleBondMolecules AS (\n  SELECT molecule_id\n  FROM bond\n  GROUP BY molecule_id\n  HAVING COUNT(DISTINCT bond_type) = 1 AND MIN(bond_type) = '-'\n)\nSELECT COUNT(DISTINCT atom_id) AS atom_count\nFROM atom\nWHERE element IN ('i', 's')\nAND molecule_id IN (SELECT molecule_id FROM SingleBondMolecules);",
    "216": "SELECT c.atom_id, c.atom_id2\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '#';",
    "217": "SELECT DISTINCT c.atom_id2 AS connected_atom\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE a.molecule_id = 'TR181'\n\nUNION\n\nSELECT DISTINCT c.atom_id AS connected_atom\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id2\nWHERE a.molecule_id = 'TR181';",
    "218": "WITH CarcinogenicMolecules AS (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = '+'\n),\nFluorineMolecules AS (\n    SELECT DISTINCT a.molecule_id\n    FROM atom a\n    WHERE a.element = 'f'\n),\nCarcinogenicWithoutFluorine AS (\n    SELECT cm.molecule_id\n    FROM CarcinogenicMolecules cm\n    LEFT JOIN FluorineMolecules fm ON cm.molecule_id = fm.molecule_id\n    WHERE fm.molecule_id IS NULL\n)\nSELECT \n    (COUNT(cwf.molecule_id) * 100.0 / COUNT(cm.molecule_id)) AS percentage_without_fluorine\nFROM \n    CarcinogenicMolecules cm\nLEFT JOIN \n    CarcinogenicWithoutFluorine cwf ON cm.molecule_id = cwf.molecule_id;",
    "219": "SELECT \n    (SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(b.bond_id)) AS percent\nFROM \n    molecule m\nJOIN \n    bond b ON m.molecule_id = b.molecule_id\nWHERE \n    m.label = '+';",
    "220": "SELECT element\nFROM atom\nWHERE molecule_id = 'TR000'\nGROUP BY element\nORDER BY element\nLIMIT 3;",
    "221": "SELECT c.atom_id, c.atom_id2\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';",
    "222": "SELECT \n    (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - \n     SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference\nFROM \n    molecule;",
    "223": "SELECT atom_id, atom_id2\nFROM connected\nWHERE bond_id = 'TR000_2_5';",
    "224": "SELECT bond_id\nFROM connected\nWHERE atom_id2 = 'TR000_2';",
    "225": "SELECT DISTINCT m.label\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = ' = '\nORDER BY m.label\nLIMIT 5;",
    "226": "SELECT \n    (CAST(SUM(bond_type = '=') AS FLOAT) / COUNT(bond_id)) * 100.0 AS percent\nFROM \n    bond\nWHERE \n    molecule_id = 'TR008';",
    "227": "SELECT \n    ROUND((SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(molecule_id), 3) AS percent\nFROM \n    molecule;",
    "228": "SELECT \n    (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id)) AS percent\nFROM \n    atom\nWHERE \n    molecule_id = 'TR206';",
    "229": "SELECT DISTINCT bond.bond_type\nFROM bond\nWHERE bond.molecule_id = 'TR000';",
    "230": "SELECT a.element, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.molecule_id = 'TR060';",
    "231": "SELECT bond_type, COUNT(bond_type) AS bond_count\nFROM bond\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;",
    "232": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE m.label = '-' AND b.bond_type = '-'\nORDER BY m.molecule_id\nLIMIT 3;",
    "233": "SELECT bond_id\nFROM bond\nWHERE molecule_id = 'TR006'\nORDER BY bond_id\nLIMIT 2;",
    "234": "SELECT COUNT(DISTINCT c.bond_id) AS bond_count\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12')\nAND b.molecule_id = 'TR009';",
    "235": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_bromine_molecules\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+'\nAND a.element = 'br';",
    "236": "SELECT \n    b.bond_type,\n    a1.atom_id AS atom1_id,\n    a1.element AS atom1_element,\n    a2.atom_id AS atom2_id,\n    a2.element AS atom2_element\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    b.bond_id = 'TR001_6_9';",
    "237": "SELECT m.molecule_id, \n       CASE \n           WHEN m.label = '+' THEN 'Carcinogenic' \n           ELSE 'Not Carcinogenic' \n       END AS carcinogenic_status\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_10';",
    "238": "SELECT COUNT(DISTINCT b.molecule_id) AS triple_bond_molecule_count\nFROM bond b\nWHERE b.bond_type = '#';",
    "239": "SELECT COUNT(*) AS connection_count\nFROM connected\nWHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';",
    "240": "SELECT DISTINCT a.element\nFROM atom a\nWHERE a.molecule_id = 'TR004';",
    "241": "SELECT COUNT(*) AS non_carcinogenic_molecules\nFROM molecule\nWHERE label = '-';",
    "242": "SELECT DISTINCT m.molecule_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25'\nAND m.label = '+';",
    "243": "SELECT DISTINCT c.bond_id\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');",
    "244": "WITH DoubleBondCount AS (\n    SELECT \n        b.molecule_id,\n        COUNT(*) AS double_bond_count\n    FROM \n        bond b\n    WHERE \n        b.bond_type = ' = '\n    GROUP BY \n        b.molecule_id\n),\nMaxDoubleBondMolecule AS (\n    SELECT \n        molecule_id\n    FROM \n        DoubleBondCount\n    WHERE \n        double_bond_count = (SELECT MAX(double_bond_count) FROM DoubleBondCount)\n)\nSELECT \n    m.molecule_id,\n    m.label\nFROM \n    molecule m\nJOIN \n    MaxDoubleBondMolecule md ON m.molecule_id = md.molecule_id;",
    "245": "SELECT AVG(bond_count) AS average_bonds_per_iodine\nFROM (\n    SELECT a.atom_id, COUNT(c.bond_id) AS bond_count\n    FROM atom a\n    LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\n    WHERE a.element = 'i'\n    GROUP BY a.atom_id\n);",
    "246": "SELECT b.bond_type, c.bond_id\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE SUBSTR(c.atom_id, 7, 2) + 0 = 45",
    "247": "SELECT element\nFROM atom\nWHERE atom_id NOT IN (\n    SELECT atom_id FROM connected\n    UNION\n    SELECT atom_id2 FROM connected\n);",
    "248": "SELECT c.atom_id, c.atom_id2\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.molecule_id = 'TR041' AND b.bond_type = '#';",
    "249": "SELECT a.element\nFROM connected c\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE c.bond_id = 'TR144_8_19';",
    "250": "SELECT m.molecule_id, COUNT(b.bond_id) AS double_bond_count\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '+' AND b.bond_type = ' = '\nGROUP BY m.molecule_id\nORDER BY double_bond_count DESC\nLIMIT 1;",
    "251": "SELECT element\nFROM atom\nWHERE molecule_id IN (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = '+'\n)\nGROUP BY element\nORDER BY COUNT(element) ASC\nLIMIT 1;",
    "252": "SELECT DISTINCT \n    CASE \n        WHEN c.atom_id = a_lead.atom_id THEN c.atom_id2\n        ELSE c.atom_id\n    END AS bonded_atom_id\nFROM \n    connected c\nJOIN \n    atom a_lead ON (c.atom_id = a_lead.atom_id OR c.atom_id2 = a_lead.atom_id)\nWHERE \n    a_lead.element = 'pb';",
    "253": "SELECT DISTINCT a.element\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id\nWHERE b.bond_type = '#';",
    "254": "WITH ElementCombinations AS (\n    SELECT \n        c.bond_id,\n        a1.element AS element1,\n        a2.element AS element2\n    FROM \n        connected c\n    JOIN \n        atom a1 ON c.atom_id = a1.atom_id\n    JOIN \n        atom a2 ON c.atom_id2 = a2.atom_id\n),\nCombinationCounts AS (\n    SELECT \n        element1, \n        element2, \n        COUNT(*) AS combination_count\n    FROM \n        ElementCombinations\n    GROUP BY \n        element1, element2\n),\nMostCommonCombination AS (\n    SELECT \n        element1, \n        element2, \n        MAX(combination_count) AS max_count\n    FROM \n        CombinationCounts\n)\nSELECT \n    (SELECT max_count FROM MostCommonCombination) * 100.0 / COUNT(*) AS percentage\nFROM \n    bond;",
    "255": "SELECT \n    (CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(b.bond_id)) * 100.0 AS proportion\nFROM \n    bond b\nJOIN \n    molecule m ON b.molecule_id = m.molecule_id\nWHERE \n    b.bond_type = '-';",
    "256": "SELECT COUNT(*) AS total_atoms\nFROM atom\nWHERE element IN ('c', 'h');",
    "257": "SELECT c.atom_id2\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE a.element = 's';",
    "258": "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'sn';",
    "259": "SELECT COUNT(DISTINCT a.element) AS element_count\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.molecule_id IN (\n    SELECT b.molecule_id\n    FROM bond b\n    GROUP BY b.molecule_id\n    HAVING COUNT(DISTINCT b.bond_type) = 1 AND MIN(b.bond_type) = '-'\n);",
    "260": "SELECT COUNT(DISTINCT a.atom_id) AS total_atoms\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = '#'\nAND (a.element = 'p' OR a.element = 'br');",
    "261": "SELECT bond.bond_id\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+';",
    "262": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = '-' AND m.label = '-';",
    "263": "SELECT \n    (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS percent_chlorine\nFROM \n    molecule m\nJOIN \n    bond b ON m.molecule_id = b.molecule_id\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    b.bond_type = '-';",
    "264": "SELECT molecule_id, label\nFROM molecule\nWHERE molecule_id IN ('TR000', 'TR001', 'TR002');",
    "265": "SELECT molecule_id\nFROM molecule\nWHERE label = '-';",
    "266": "SELECT COUNT(*) AS total_carcinogenic_molecules\nFROM molecule\nWHERE label = '+'\nAND molecule_id BETWEEN 'TR000' AND 'TR030';",
    "267": "SELECT b.molecule_id, b.bond_type\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.molecule_id BETWEEN 'TR000' AND 'TR050';",
    "268": "SELECT a.element\nFROM connected c\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE c.bond_id = 'TR001_10_11';",
    "269": "SELECT COUNT(DISTINCT c.bond_id) AS iodine_bond_count\nFROM connected c\nJOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id\nWHERE a.element = 'i';",
    "270": "SELECT \n    m.label, \n    COUNT(*) AS count\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    a.element = 'ca'\nGROUP BY \n    m.label\nORDER BY \n    count DESC\nLIMIT 1;",
    "271": "SELECT \n    a1.element AS element1, \n    a2.element AS element2\nFROM \n    connected c\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    c.bond_id = 'TR001_1_8'\n    AND ((a1.element = 'cl' AND a2.element = 'c') OR (a1.element = 'c' AND a2.element = 'cl'));",
    "272": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE b.bond_type = '#'\nAND m.label = '-'\nAND a.element = 'c'\nLIMIT 2;",
    "273": "SELECT \n    (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 1.0 / COUNT(a.atom_id)) * 100 AS percentage\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.label = '+';",
    "274": "SELECT element\nFROM atom\nWHERE molecule_id = 'TR001';",
    "275": "SELECT DISTINCT b.molecule_id\nFROM bond b\nWHERE b.bond_type = ' = ';",
    "276": "SELECT c.atom_id, c.atom_id2\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '#';",
    "277": "SELECT DISTINCT a.element\nFROM connected c\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE c.bond_id = 'TR000_1_2';",
    "278": "SELECT COUNT(DISTINCT m.molecule_id) AS non_carcinogenic_single_bond_molecules\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '-' AND b.bond_type = '-';",
    "279": "SELECT m.label\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_id = 'TR001_10_11';",
    "280": "SELECT \n    b.bond_id,\n    CASE \n        WHEN m.label = '+' THEN 'Carcinogenic'\n        WHEN m.label = '-' THEN 'Non-carcinogenic'\n        ELSE 'Unknown'\n    END AS carcinogenic_status\nFROM \n    bond b\nJOIN \n    molecule m ON b.molecule_id = m.molecule_id\nWHERE \n    b.bond_type = '#';",
    "281": "SELECT \n    a.element, \n    COUNT(*) AS count\nFROM \n    atom a\nJOIN \n    molecule m ON a.molecule_id = m.molecule_id\nWHERE \n    m.label = '+'\n    AND substr(a.atom_id, 7, 1) = '4'\nGROUP BY \n    a.element;",
    "282": "SELECT \n    (SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(a.atom_id)) AS hydrogen_ratio,\n    m.label\nFROM \n    atom a\nJOIN \n    molecule m ON a.molecule_id = m.molecule_id\nWHERE \n    a.molecule_id = 'TR006'\nGROUP BY \n    m.molecule_id;",
    "283": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'ca' AND m.label = '+';",
    "284": "SELECT DISTINCT b.bond_type\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'c';",
    "285": "SELECT a1.element AS element1, a2.element AS element2\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR001_10_11';",
    "286": "WITH TripleBondMolecules AS (\n    SELECT DISTINCT molecule_id\n    FROM bond\n    WHERE bond_type = '#'\n),\nTotalMolecules AS (\n    SELECT COUNT(DISTINCT molecule_id) AS total_count\n    FROM molecule\n)\nSELECT \n    (COUNT(DISTINCT tb.molecule_id) * 100.0 / tm.total_count) AS triple_bond_percentage\nFROM \n    TripleBondMolecules tb, TotalMolecules tm;",
    "287": "SELECT \n    (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percent_double_bonds\nFROM \n    bond\nWHERE \n    molecule_id = 'TR047';",
    "288": "SELECT m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_1';",
    "289": "SELECT \n    CASE \n        WHEN label = '+' THEN 'Carcinogenic' \n        ELSE 'Not Carcinogenic' \n    END AS status\nFROM \n    molecule\nWHERE \n    molecule_id = 'TR151';",
    "290": "SELECT DISTINCT a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR151' AND a.element IN ('pb', 'sn');",
    "291": "SELECT COUNT(*) AS carcinogenic_count\nFROM molecule\nWHERE label = '+';",
    "292": "SELECT a.atom_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'c'\nAND CAST(SUBSTR(m.molecule_id, 3, 3) AS INTEGER) BETWEEN 10 AND 50;",
    "293": "SELECT COUNT(a.atom_id) AS atom_count\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+';",
    "294": "SELECT b.bond_id\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '=' AND m.label = '+';",
    "295": "SELECT COUNT(*)\nFROM atom\nWHERE molecule_id = (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = '+'\n)\nAND element = 'h';",
    "296": "SELECT b.molecule_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE c.atom_id = 'TR000_1' AND c.bond_id = 'TR000_1_2';",
    "297": "SELECT a.atom_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'c' AND m.label = '-';",
    "298": "SELECT \n    (CAST(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(DISTINCT m.molecule_id)) * 100.0 AS percentage\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.label = '+'",
    "299": "SELECT \n    CASE \n        WHEN label = '+' THEN 'Carcinogenic' \n        ELSE 'Not Carcinogenic' \n    END AS status\nFROM \n    molecule\nWHERE \n    molecule_id = 'TR124';",
    "300": "SELECT atom.atom_id, atom.element\nFROM atom\nWHERE atom.molecule_id = 'TR186';",
    "301": "SELECT bond_type\nFROM bond\nWHERE bond_id = 'TR007_4_19';",
    "302": "SELECT DISTINCT a.element\nFROM connected c\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE c.bond_id = 'TR001_2_4';",
    "303": "SELECT \n    COUNT(b.bond_id) AS double_bond_count,\n    m.label AS carcinogenic_status\nFROM \n    bond b\nJOIN \n    molecule m ON b.molecule_id = m.molecule_id\nWHERE \n    b.molecule_id = 'TR006' AND b.bond_type = ' = '\nGROUP BY \n    m.molecule_id;",
    "304": "SELECT m.molecule_id, a.element\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+';",
    "305": "SELECT \n    b.bond_id,\n    a1.atom_id AS atom1_id,\n    a1.element AS atom1_element,\n    a2.atom_id AS atom2_id,\n    a2.element AS atom2_element,\n    m.molecule_id,\n    m.label\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nJOIN \n    molecule m ON b.molecule_id = m.molecule_id\nWHERE \n    b.bond_type = '-';",
    "306": "SELECT DISTINCT m.molecule_id, a.element\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE b.bond_type = '#'\nORDER BY m.molecule_id, a.element;",
    "307": "SELECT a1.element AS atom1_element, a2.element AS atom2_element\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE c.bond_id = 'TR000_2_3';",
    "308": "SELECT COUNT(DISTINCT c.bond_id) AS chlorine_bonds_count\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a1.element = 'cl' OR a2.element = 'cl';",
    "309": "SELECT \n    a.atom_id,\n    COUNT(DISTINCT b.bond_type) AS bond_type_count\nFROM \n    atom a\nLEFT JOIN \n    bond b ON a.molecule_id = b.molecule_id\nWHERE \n    a.molecule_id = 'TR346'\nGROUP BY \n    a.atom_id;",
    "310": "SELECT \n    COUNT(DISTINCT m1.molecule_id) AS total_double_bond_molecules,\n    COUNT(DISTINCT m2.molecule_id) AS carcinogenic_molecules\nFROM \n    bond b\nJOIN \n    molecule m1 ON b.molecule_id = m1.molecule_id\nLEFT JOIN \n    molecule m2 ON b.molecule_id = m2.molecule_id AND m2.label = '+'\nWHERE \n    b.bond_type = ' = ';",
    "311": "SELECT COUNT(DISTINCT m.molecule_id) AS molecule_count\nFROM molecule m\nLEFT JOIN atom a ON m.molecule_id = a.molecule_id AND a.element = 's'\nLEFT JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = ' = '\nWHERE a.atom_id IS NULL AND b.bond_id IS NULL;",
    "312": "SELECT m.label\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_id = 'TR001_2_4';",
    "313": "SELECT COUNT(*) \nFROM atom \nWHERE molecule_id = 'TR001';",
    "314": "SELECT COUNT(*) AS single_bond_count\nFROM bond\nWHERE bond_type = '-';",
    "315": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'cl' AND m.label = '+';",
    "316": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'c' AND m.label = '-';",
    "317": "WITH CarcinogenicMolecules AS (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = '+'\n),\nChlorineMolecules AS (\n    SELECT DISTINCT molecule_id\n    FROM atom\n    WHERE element = 'cl'\n)\nSELECT \n    (CAST(COUNT(DISTINCT cm.molecule_id) AS FLOAT) / \n     (SELECT COUNT(DISTINCT molecule_id) FROM CarcinogenicMolecules)) * 100 AS percentage\nFROM CarcinogenicMolecules cm\nJOIN ChlorineMolecules chm ON cm.molecule_id = chm.molecule_id;",
    "318": "SELECT molecule_id\nFROM bond\nWHERE bond_id = 'TR001_1_7';",
    "319": "SELECT COUNT(DISTINCT a.element) AS element_count\nFROM connected c\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE c.bond_id = 'TR001_3_4';",
    "320": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';",
    "321": "SELECT m.molecule_id, m.label\nFROM connected c\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN molecule m ON a1.molecule_id = m.molecule_id AND a2.molecule_id = m.molecule_id\nWHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';",
    "322": "SELECT element\nFROM atom\nWHERE atom_id = 'TR000_1';",
    "323": "SELECT label\nFROM molecule\nWHERE molecule_id = 'TR000';",
    "324": "WITH SingleBondAtoms AS (\n    SELECT DISTINCT c.atom_id\n    FROM connected c\n    JOIN bond b ON c.bond_id = b.bond_id\n    WHERE b.bond_type = '-'\n),\nTotalBondedAtoms AS (\n    SELECT DISTINCT atom_id\n    FROM connected\n)\n\nSELECT \n    (CAST(COUNT(DISTINCT s.atom_id) AS FLOAT) / COUNT(DISTINCT t.atom_id)) * 100 AS percentage\nFROM \n    SingleBondAtoms s, TotalBondedAtoms t;",
    "325": "SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_nitrogen_molecules\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+'\nAND a.element = 'n';",
    "326": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 's' AND b.bond_type = ' = ';",
    "327": "SELECT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '-'\nGROUP BY m.molecule_id\nHAVING COUNT(a.atom_id) > 5;",
    "328": "SELECT DISTINCT a.element\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON a.atom_id = c.atom_id\nWHERE b.molecule_id = 'TR024' AND b.bond_type = '='",
    "329": "SELECT m.molecule_id, COUNT(a.atom_id) AS atom_count\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+'\nGROUP BY m.molecule_id\nORDER BY atom_count DESC\nLIMIT 1;",
    "330": "WITH HydrogenTripleBonds AS (\n    SELECT DISTINCT c.atom_id\n    FROM connected c\n    JOIN atom a ON c.atom_id = a.atom_id\n    JOIN bond b ON c.bond_id = b.bond_id\n    WHERE a.element = 'h' AND b.bond_type = '#'\n),\nCarcinogenicMolecules AS (\n    SELECT m.molecule_id\n    FROM molecule m\n    WHERE m.label = '+'\n)\nSELECT \n    (COUNT(DISTINCT m.molecule_id) * 100.0) / (SELECT COUNT(*) FROM CarcinogenicMolecules) AS percentage\nFROM CarcinogenicMolecules m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.atom_id IN (SELECT atom_id FROM HydrogenTripleBonds);",
    "331": "SELECT COUNT(*) AS carcinogenic_molecules\nFROM molecule\nWHERE label = '+';",
    "332": "SELECT COUNT(DISTINCT b.molecule_id) AS single_bond_molecule_count\nFROM bond b\nWHERE b.bond_type = '-'\nAND b.molecule_id BETWEEN 'TR004' AND 'TR010';",
    "333": "SELECT COUNT(*) \nFROM atom \nWHERE molecule_id = 'TR008' AND element = 'c';",
    "334": "SELECT a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR004_7' AND m.label = '-';",
    "335": "SELECT COUNT(DISTINCT a.molecule_id) AS total_molecules\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'o' AND b.bond_type = ' = ';",
    "336": "SELECT COUNT(DISTINCT m.molecule_id) AS non_carcinogenic_triple_bond_molecules\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = '#' AND m.label = '-';",
    "337": "SELECT DISTINCT a.element, b.bond_type\nFROM molecule m\nLEFT JOIN atom a ON m.molecule_id = a.molecule_id\nLEFT JOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.molecule_id = 'TR002';",
    "338": "SELECT a.atom_id\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'c'\nAND b.bond_type = ' = '\nAND a.molecule_id = 'TR012';",
    "339": "SELECT a.atom_id\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+' AND a.element = 'o';",
    "340": "SELECT id, name, cardKingdomFoilId, cardKingdomId\nFROM cards\nWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
    "341": "SELECT *\nFROM cards\nWHERE borderColor = 'borderless'\n  AND (cardKingdomFoilId IS NULL OR cardKingdomFoilId = '')\n  AND (cardKingdomId IS NULL OR cardKingdomId = '');",
    "342": "SELECT name\nFROM cards\nWHERE faceConvertedManaCost = (\n    SELECT MAX(faceConvertedManaCost)\n    FROM cards\n);",
    "343": "SELECT name\nFROM cards\nWHERE frameVersion = '2015' AND edhrecRank < 100;",
    "344": "SELECT c.name\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic'\n  AND l.format = 'gladiator'\n  AND l.status = 'Banned';",
    "345": "SELECT c.name, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.types = 'Artifact'\n  AND c.side IS NULL\n  AND l.format = 'vintage';",
    "346": "SELECT c.id, c.artist\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE (c.power = '*' OR c.power IS NULL)\n  AND l.format = 'commander'\n  AND l.status = 'Legal';",
    "347": "SELECT \n    c.id AS card_id,\n    r.text AS ruling_text\nFROM \n    cards c\nJOIN \n    rulings r ON c.uuid = r.uuid\nWHERE \n    c.artist = 'Stephen Daniele'\n    AND c.hasContentWarning = 1;",
    "348": "SELECT r.date, r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.name = 'Sublime Epiphany' AND c.number = '74s';",
    "349": "SELECT \n    c.name, \n    c.artist, \n    c.isPromo\nFROM \n    cards c\nJOIN \n    rulings r ON c.uuid = r.uuid\nGROUP BY \n    c.uuid\nORDER BY \n    COUNT(r.uuid) DESC\nLIMIT 1;",
    "350": "SELECT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Annul' AND c.number = '29';",
    "351": "SELECT DISTINCT c.name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Japanese';",
    "352": "SELECT \n    (CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    foreign_data;",
    "353": "SELECT s.name, s.totalSetSize\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Italian';",
    "354": "SELECT COUNT(DISTINCT type) AS number_of_types\nFROM cards\nWHERE artist = 'Aaron Boyd';",
    "355": "SELECT keywords\nFROM cards\nWHERE name = 'Angel of Mercy';",
    "356": "SELECT COUNT(*) \nFROM cards \nWHERE power = '*';",
    "357": "SELECT promoTypes\nFROM cards\nWHERE name = 'Duress';",
    "358": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';",
    "359": "SELECT originalType\nFROM cards\nWHERE name = \"Ancestor's Chosen\";",
    "360": "SELECT DISTINCT st.language\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Angel of Mercy';",
    "361": "SELECT COUNT(*)\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.status = 'restricted' AND cards.isTextless = 0;",
    "362": "SELECT r.text\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.name = 'Condemn';",
    "363": "SELECT COUNT(*)\nFROM legalities\nJOIN cards ON legalities.uuid = cards.uuid\nWHERE legalities.status = 'restricted'\n  AND cards.isStarter = 1;",
    "364": "SELECT l.format, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.name = 'Cloudchaser Eagle';",
    "365": "SELECT type FROM cards WHERE name = 'Benalish Knight';",
    "366": "SELECT l.format, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.name = 'Benalish Knight';",
    "367": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Phyrexian';",
    "368": "SELECT \n    (CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) / COUNT(id)) * 100 AS borderless_percentage\nFROM \n    cards;",
    "369": "SELECT COUNT(DISTINCT c.uuid) AS reprinted_german_cards\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'German' AND c.isReprint = 1;",
    "370": "SELECT COUNT(*)\nFROM cards\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE cards.borderColor = 'borderless'\n  AND foreign_data.language = 'Russian';",
    "371": "SELECT \n    (CAST(COUNT(fd.id) AS FLOAT) / total_story_spotlight) * 100 AS french_story_spotlight_percentage\nFROM \n    foreign_data fd\nJOIN \n    cards c ON fd.uuid = c.uuid\nWHERE \n    fd.language = 'French' AND c.isStorySpotlight = 1,\n    (SELECT COUNT(id) FROM cards WHERE isStorySpotlight = 1) AS total_story_spotlight",
    "372": "SELECT COUNT(*) \nFROM cards \nWHERE toughness = '99';",
    "373": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';",
    "374": "SELECT COUNT(*)\nFROM cards\nWHERE borderColor = 'black'\n  AND availability = 'mtgo';",
    "375": "SELECT id FROM cards WHERE convertedManaCost = 0;",
    "376": "SELECT layout\nFROM cards\nWHERE keywords LIKE '%flying%';",
    "377": "SELECT COUNT(*)\nFROM cards\nWHERE originalType = 'Summon - Angel'\n  AND (subtypes NOT LIKE '%Angel%' OR subtypes IS NULL);",
    "378": "SELECT id\nFROM cards\nWHERE cardKingdomFoilId IS NOT NULL\n  AND cardKingdomId IS NOT NULL\n  AND hasFoil = 1\n  AND hasNonFoil = 1;",
    "379": "SELECT id FROM cards WHERE duelDeck = 'a';",
    "380": "SELECT edhrecRank\nFROM cards\nWHERE frameVersion = '2015';",
    "381": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Chinese Simplified';",
    "382": "SELECT c.id, c.name, c.availability, f.language\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.availability = 'paper'\n  AND f.language = 'Japanese';",
    "383": "SELECT COUNT(DISTINCT cards.uuid) AS white_border_banned_count\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.status = 'Banned' AND cards.borderColor = 'white';",
    "384": "SELECT DISTINCT fd.uuid, fd.language\nFROM legalities l\nJOIN foreign_data fd ON l.uuid = fd.uuid\nWHERE l.format = 'legacy';",
    "385": "SELECT r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.name = 'Beacon of Immortality';",
    "386": "SELECT COUNT(DISTINCT c.uuid) AS future_frame_card_count, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.frameVersion = 'future'\nGROUP BY l.status;",
    "387": "SELECT cards.name, cards.colors\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.code = 'OGW';",
    "388": "SELECT c.name, st.language\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN set_translations st ON s.code = st.setCode\nWHERE c.setCode = '10E' AND c.convertedManaCost = 5;",
    "389": "SELECT c.name, r.date\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.originalType = 'Creature - Elf';",
    "390": "SELECT c.colors, l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.id BETWEEN 1 AND 20;",
    "391": "SELECT c.name, c.uuid, fd.language, fd.flavorText\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.originalType = 'Artifact'\n  AND c.colors = 'B';",
    "392": "SELECT c.name\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.rarity = 'uncommon'\nORDER BY r.date ASC\nLIMIT 3;",
    "393": "SELECT COUNT(*)\nFROM cards\nWHERE artist = 'John Avon'\n  AND cardKingdomFoilId IS NOT NULL\n  AND cardKingdomId IS NULL;",
    "394": "SELECT COUNT(*) \nFROM cards \nWHERE borderColor = 'white' \n  AND cardKingdomFoilId IS NOT NULL \n  AND cardKingdomId IS NOT NULL;",
    "395": "SELECT COUNT(*)\nFROM cards\nWHERE artist = 'UDON'\n  AND availability LIKE '%mtgo%'\n  AND hand = '-1';",
    "396": "SELECT COUNT(*)\nFROM cards\nWHERE frameVersion = '1993'\n  AND availability LIKE '%paper%'\n  AND hasContentWarning = 1;",
    "397": "SELECT manaCost\nFROM cards\nWHERE layout = 'normal'\n  AND frameVersion = '2003'\n  AND borderColor = 'black'\n  AND availability = 'mtgo,paper';",
    "398": "SELECT SUM(convertedManaCost) AS total_unconverted_mana_cost\nFROM cards\nWHERE artist = 'Rob Alexander';",
    "399": "SELECT DISTINCT types\nFROM cards\nWHERE availability LIKE '%arena%';",
    "400": "SELECT DISTINCT c.setCode\nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE fd.language = 'Spanish';",
    "401": "SELECT \n    (CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    cards\nWHERE \n    frameEffects = 'legendary';",
    "402": "WITH StorySpotlightTextless AS (\n    SELECT id\n    FROM cards\n    WHERE isStorySpotlight = 1 AND isTextless = 0\n),\nTotalCards AS (\n    SELECT COUNT(id) AS total_count\n    FROM cards\n),\nStorySpotlightCount AS (\n    SELECT COUNT(id) AS spotlight_count\n    FROM StorySpotlightTextless\n)\nSELECT \n    (SELECT spotlight_count FROM StorySpotlightCount) * 100.0 / (SELECT total_count FROM TotalCards) AS percentage,\n    id\nFROM StorySpotlightTextless;",
    "403": "WITH SpanishCards AS (\n    SELECT name\n    FROM foreign_data\n    WHERE language = 'Spanish'\n),\nTotalCards AS (\n    SELECT COUNT(*) AS total_count\n    FROM foreign_data\n),\nSpanishCount AS (\n    SELECT COUNT(*) AS spanish_count\n    FROM SpanishCards\n)\nSELECT \n    SpanishCards.name,\n    (SpanishCount.spanish_count * 100.0 / TotalCards.total_count) AS percentage\nFROM SpanishCards, SpanishCount, TotalCards;",
    "404": "SELECT DISTINCT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.baseSetSize = 309;",
    "405": "SELECT COUNT(DISTINCT st.setCode) AS translated_sets_count\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';",
    "406": "SELECT cards.id\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE cards.types LIKE '%Creature%'\n  AND legalities.status = 'legal';",
    "407": "SELECT DISTINCT fd.type\nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE fd.language = 'German'\n  AND fd.type IS NOT NULL;",
    "408": "SELECT COUNT(*)\nFROM cards\nWHERE (power IS NULL OR power = '*')\n  AND text LIKE '%triggered ability%';",
    "409": "SELECT COUNT(DISTINCT c.uuid) AS card_count\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN rulings r ON c.uuid = r.uuid\nWHERE l.format = 'premodern'\n  AND r.text = 'This is a triggered mana ability.'\n  AND c.side IS NULL;",
    "410": "SELECT c.id\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.artist = 'Erica Yang'\n  AND c.availability LIKE '%paper%'\n  AND l.format = 'pauper'\n  AND l.status = 'legal';",
    "411": "SELECT c.artist\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.text = \"Das perfekte Gegenmittel zu einer dichten Formation\";",
    "412": "SELECT fd.name AS foreign_name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.type LIKE '%Creature%'\n  AND c.layout = 'normal'\n  AND c.borderColor = 'black'\n  AND c.artist = 'Matthew D. Wilson'\n  AND fd.language = 'French';",
    "413": "SELECT COUNT(DISTINCT c.id) AS rare_cards_with_rulings\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.rarity = 'rare'\n  AND r.date = '2007-02-01';",
    "414": "SELECT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.baseSetSize = 180 AND s.block = 'Ravnica';",
    "415": "SELECT \n    (CAST(SUM(CASE WHEN c.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_without_content_warning\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    l.format = 'commander' AND l.status = 'legal';",
    "416": "WITH CardsWithoutPower AS (\n    SELECT uuid\n    FROM cards\n    WHERE power IS NULL OR power = '*'\n),\nFrenchCardsWithoutPower AS (\n    SELECT fd.uuid\n    FROM foreign_data fd\n    JOIN CardsWithoutPower cwp ON fd.uuid = cwp.uuid\n    WHERE fd.language = 'French'\n)\nSELECT \n    (COUNT(DISTINCT FrenchCardsWithoutPower.uuid) * 100.0 / COUNT(DISTINCT CardsWithoutPower.uuid)) AS percentage\nFROM \n    CardsWithoutPower\nLEFT JOIN \n    FrenchCardsWithoutPower ON CardsWithoutPower.uuid = FrenchCardsWithoutPower.uuid;",
    "417": "WITH JapaneseSets AS (\n    SELECT DISTINCT setCode\n    FROM set_translations\n    WHERE language = 'Japanese'\n),\nJapaneseExpansionSets AS (\n    SELECT js.setCode\n    FROM JapaneseSets js\n    JOIN sets s ON js.setCode = s.code\n    WHERE s.type = 'expansion'\n)\nSELECT \n    (COUNT(DISTINCT jes.setCode) * 100.0) / COUNT(DISTINCT js.setCode) AS percentage\nFROM \n    JapaneseSets js\nLEFT JOIN \n    JapaneseExpansionSets jes ON js.setCode = jes.setCode;",
    "418": "SELECT availability\nFROM cards\nWHERE artist = 'Daren Bader';",
    "419": "SELECT COUNT(*)\nFROM cards\nWHERE colors IS NOT NULL\n  AND colors != ''\n  AND borderColor = 'borderless'\n  AND edhrecRank > 12000;",
    "420": "SELECT COUNT(*) \nFROM cards \nWHERE isOversized = 1 \n  AND isReprint = 1 \n  AND isPromo = 1;",
    "421": "SELECT name\nFROM cards\nWHERE (power IS NULL OR power = '*')\n  AND promoTypes = 'arenaleague'\nORDER BY name\nLIMIT 3;",
    "422": "SELECT language\nFROM foreign_data\nWHERE multiverseid = 149934;",
    "423": "SELECT id\nFROM cards\nWHERE cardKingdomFoilId IS NOT NULL\n  AND cardKingdomId IS NOT NULL\nORDER BY cardKingdomFoilId ASC\nLIMIT 3;",
    "424": "SELECT \n    (CAST(COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) AS REAL) / \n     COUNT(CASE WHEN isTextless = 1 THEN 1 END)) * 100 AS proportion\nFROM \n    cards;",
    "425": "SELECT number\nFROM cards\nWHERE side IS NULL\n  AND subtypes LIKE '%Angel%'\n  AND subtypes LIKE '%Wizard%'",
    "426": "SELECT name\nFROM sets\nWHERE mtgoCode IS NULL OR mtgoCode = ''\nORDER BY name\nLIMIT 3;",
    "427": "SELECT DISTINCT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.mcmName = 'Archenemy' AND s.code = 'ARC';",
    "428": "SELECT s.name, st.translation\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.id = 5;",
    "429": "SELECT \n    st.language, \n    s.type \nFROM \n    sets s\nJOIN \n    set_translations st ON s.code = st.setCode\nWHERE \n    s.id = 206;",
    "430": "SELECT DISTINCT s.id, s.name\nFROM sets s\nJOIN cards c ON s.code = c.setCode\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE s.block = 'Shadowmoor'\n  AND fd.language = 'Italian'\nORDER BY s.name\nLIMIT 2;",
    "431": "SELECT s.id, s.name\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.isForeignOnly = 0\n  AND s.isFoilOnly = 1\n  AND st.language = 'Japanese';",
    "432": "SELECT s.name, s.baseSetSize\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Russian'\nORDER BY s.baseSetSize DESC\nLIMIT 1;",
    "433": "SELECT \n    (CAST(COUNT(DISTINCT fd.uuid) AS REAL) / (SELECT COUNT(*) FROM cards WHERE isOnlineOnly = 1)) * 100 AS percentage\nFROM \n    foreign_data fd\nJOIN \n    cards c ON fd.uuid = c.uuid\nWHERE \n    fd.language = 'Chinese Simplified' \n    AND c.isOnlineOnly = 1;",
    "434": "SELECT COUNT(DISTINCT s.code) AS japanese_only_sets\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Japanese'\n  AND (s.mtgoCode IS NULL OR s.mtgoCode = '')\n  AND NOT EXISTS (\n    SELECT 1\n    FROM set_translations st2\n    WHERE st2.setCode = s.code\n      AND st2.language != 'Japanese'\n  );",
    "435": "SELECT id\nFROM cards\nWHERE borderColor = 'black';",
    "436": "SELECT id\nFROM cards\nWHERE frameEffects = 'extendedart';",
    "437": "SELECT * FROM cards\nWHERE borderColor = 'black' AND isFullArt = 1;",
    "438": "SELECT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.id = 174;",
    "439": "SELECT name FROM sets WHERE code = 'ALL';",
    "440": "SELECT language\nFROM foreign_data\nWHERE name = 'A Pedra Fellwar';",
    "441": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';",
    "442": "SELECT baseSetSize, code\nFROM sets\nWHERE block IN ('Masques', 'Mirage');",
    "443": "SELECT code FROM sets WHERE type = 'expansion';",
    "444": "SELECT foreign_data.name, foreign_data.type\nFROM cards\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE cards.watermark = 'boros';",
    "445": "SELECT \n    fd.language, \n    fd.flavorText, \n    c.type\nFROM \n    cards c\nJOIN \n    foreign_data fd ON c.uuid = fd.uuid\nWHERE \n    c.watermark = 'colorpie';",
    "446": "SELECT \n    (CAST(SUM(CASE WHEN c.convertedManaCost = 10 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(c.id)) * 100 AS percentage\nFROM \n    cards c\nJOIN \n    sets s ON c.setCode = s.code\nWHERE \n    c.name = 'Abyssal Horror';",
    "447": "SELECT code\nFROM sets\nWHERE type = 'expansion' OR type = 'commander';",
    "448": "SELECT foreign_data.name, foreign_data.type\nFROM cards\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE cards.watermark = 'abzan';",
    "449": "SELECT fd.language, c.type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.watermark = 'Azorius';",
    "450": "SELECT COUNT(*)\nFROM cards\nWHERE artist = 'Aaron Miller'\n  AND cardKingdomFoilId IS NOT NULL\n  AND cardKingdomId IS NOT NULL;",
    "451": "SELECT COUNT(*) \nFROM cards \nWHERE availability LIKE '%paper%' \nAND hand = '3';",
    "452": "SELECT name\nFROM cards\nWHERE isTextless = 0;",
    "453": "SELECT convertedManaCost\nFROM cards\nWHERE name = 'Ancestor''s Chosen';",
    "454": "SELECT COUNT(*)\nFROM cards\nWHERE borderColor = 'white'\n  AND (power IS NULL OR power = '*');",
    "455": "SELECT name\nFROM cards\nWHERE isPromo = 1 AND side IS NOT NULL;",
    "456": "SELECT subtypes, supertypes\nFROM cards\nWHERE name = 'Molimo, Maro-Sorcerer';",
    "457": "SELECT purchaseUrls\nFROM cards\nWHERE promoTypes = 'bundle';",
    "458": "SELECT COUNT(DISTINCT artist) AS artist_count\nFROM cards\nWHERE borderColor = 'black'\n  AND availability LIKE '%arena%'\n  AND availability LIKE '%mtgo%';",
    "459": "SELECT name, convertedManaCost\nFROM cards\nWHERE name IN ('Serra Angel', 'Shrine Keeper')\nORDER BY convertedManaCost DESC\nLIMIT 1;",
    "460": "SELECT artist\nFROM cards\nWHERE flavorName = 'Battra, Dark Destroyer';",
    "461": "SELECT name\nFROM cards\nWHERE frameVersion = '2003'\nORDER BY convertedManaCost DESC\nLIMIT 3;",
    "462": "SELECT st.translation\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';",
    "463": "SELECT COUNT(*) AS translation_count\nFROM set_translations\nWHERE setCode IN (\n    SELECT setCode\n    FROM cards\n    WHERE name = 'Angel of Mercy'\n);",
    "464": "SELECT c.name\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE st.translation = 'Hauptset Zehnte Edition';",
    "465": "SELECT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean';",
    "466": "SELECT COUNT(*)\nFROM cards\nWHERE setCode = (\n    SELECT setCode\n    FROM set_translations\n    WHERE translation = 'Hauptset Zehnte Edition'\n)\nAND artist = 'Adam Rex';",
    "467": "SELECT s.baseSetSize\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.translation = 'Hauptset Zehnte Edition';",
    "468": "SELECT st.translation\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.name = 'Eighth Edition' AND st.language = 'Chinese Simplified';",
    "469": "SELECT DISTINCT s.name\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;",
    "470": "SELECT s.releaseDate\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Ancestor''s Chosen';",
    "471": "SELECT s.type\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.translation = 'Hauptset Zehnte Edition';",
    "472": "SELECT COUNT(DISTINCT st.setCode) AS ItalianTranslatedSets\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Ice Age' AND st.language = 'Italian' AND st.translation IS NOT NULL;",
    "473": "SELECT s.isForeignOnly\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Adarkar Valkyrie';",
    "474": "SELECT COUNT(DISTINCT sets.code) AS number_of_sets\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE set_translations.language = 'Italian'\n  AND set_translations.translation IS NOT NULL\n  AND sets.baseSetSize < 100;",
    "475": "SELECT COUNT(*)\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';",
    "476": "SELECT c.name\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Coldsnap'\n  AND c.convertedManaCost = (\n    SELECT MAX(convertedManaCost)\n    FROM cards\n    WHERE setCode = s.code\n  );",
    "477": "SELECT DISTINCT artist\nFROM cards\nWHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')\n  AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');",
    "478": "SELECT c.*\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Coldsnap' AND c.number = '4';",
    "479": "SELECT COUNT(*)\nFROM cards\nWHERE setCode = 'CSP' -- Assuming 'CSP' is the code for Coldsnap\n  AND convertedManaCost > 5\n  AND (power = '*' OR power IS NULL);",
    "480": "SELECT fd.flavorText\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian';",
    "481": "SELECT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.flavorText IS NOT NULL;",
    "482": "SELECT fd.type\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';",
    "483": "SELECT fd.text\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN rulings r ON c.uuid = r.uuid\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE s.name = 'Coldsnap'\n  AND fd.language = 'Italian';",
    "484": "SELECT fd.name\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE s.name = 'Coldsnap'\n  AND fd.language = 'Italian'\n  AND c.convertedManaCost = (\n    SELECT MAX(convertedManaCost)\n    FROM cards c2\n    JOIN sets s2 ON c2.setCode = s2.code\n    WHERE s2.name = 'Coldsnap'\n  );",
    "485": "SELECT r.date\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nWHERE c.name = 'Reminisce';",
    "486": "SELECT \n    (SUM(CASE WHEN c.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_of_cmc_7\nFROM \n    cards c\nJOIN \n    sets s ON c.setCode = s.code\nWHERE \n    s.name = 'Coldsnap';",
    "487": "SELECT \n    (CAST(SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / \n    COUNT(*)) * 100 AS percentage_incredibly_powerful\nFROM \n    cards\nWHERE \n    setCode = (SELECT code FROM sets WHERE name = 'Coldsnap');",
    "488": "SELECT code FROM sets WHERE releaseDate = '2017-07-14';",
    "489": "SELECT keyruneCode\nFROM sets\nWHERE code = 'PKHC';",
    "490": "SELECT mcmId\nFROM sets\nWHERE code = 'SS2';",
    "491": "SELECT mcmName\nFROM sets\nWHERE releaseDate = '2017-06-09';",
    "492": "SELECT type\nFROM sets\nWHERE name = 'From the Vault: Lore';",
    "493": "SELECT parentCode\nFROM sets\nWHERE name = 'Commander 2014 Oversized';",
    "494": "SELECT \n    c.name AS card_name,\n    r.text AS ruling_text,\n    c.hasContentWarning AS has_missing_or_degraded_properties\nFROM \n    cards c\nJOIN \n    rulings r ON c.uuid = r.uuid\nWHERE \n    c.artist = 'Jim Pavelec';",
    "495": "SELECT sets.releaseDate\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE cards.name = 'Evacuation';",
    "496": "SELECT s.baseSetSize\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.translation = 'Rinascita di Alara';",
    "497": "SELECT s.type\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.translation = 'Huiti\u00e8me \u00e9dition';",
    "498": "SELECT st.translation\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French';",
    "499": "SELECT COUNT(*) \nFROM set_translations \nWHERE setCode = (SELECT code FROM sets WHERE name = 'Tenth Edition');",
    "500": "SELECT st.translation AS japanese_set_name\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';",
    "501": "SELECT c.name, c.convertedManaCost\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Journey into Nyx Hero''s Path'\nORDER BY c.convertedManaCost DESC\nLIMIT 1;",
    "502": "SELECT s.releaseDate\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.translation = 'Ola de fr\u00edo';",
    "503": "SELECT s.type\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Samite Pilgrim';",
    "504": "SELECT COUNT(*)\nFROM cards\nWHERE setCode = (\n    SELECT code\n    FROM sets\n    WHERE name = 'World Championship Decks 2004'\n)\nAND convertedManaCost = 3;",
    "505": "SELECT st.translation\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.name = 'Mirrodin' AND st.language = 'Chinese Simplified';",
    "506": "WITH JapaneseCards AS (\n    SELECT DISTINCT uuid\n    FROM foreign_data\n    WHERE language = 'Japanese'\n),\nNonFoilJapaneseCards AS (\n    SELECT DISTINCT fd.uuid\n    FROM JapaneseCards jc\n    JOIN cards c ON jc.uuid = c.uuid\n    JOIN sets s ON c.setCode = s.code\n    WHERE s.isNonFoilOnly = 1\n)\nSELECT \n    (COUNT(DISTINCT nfjc.uuid) * 100.0 / COUNT(DISTINCT jc.uuid)) AS percentage_non_foil\nFROM \n    JapaneseCards jc\nLEFT JOIN \n    NonFoilJapaneseCards nfjc ON jc.uuid = nfjc.uuid;",
    "507": "SELECT \n    (CAST(SUM(c.isOnlineOnly = 1) AS FLOAT) / COUNT(*)) * 100 AS online_only_percentage\nFROM \n    foreign_data fd\nJOIN \n    cards c ON fd.uuid = c.uuid\nWHERE \n    fd.language = 'Portuguese (Brazil)';",
    "508": "SELECT availability\nFROM cards\nWHERE artist = 'Aleksi Briclot'\n  AND isTextless = 1;",
    "509": "SELECT id\nFROM sets\nWHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);",
    "510": "SELECT artist\nFROM cards\nWHERE side IS NULL\nORDER BY convertedManaCost DESC\nLIMIT 1;",
    "511": "SELECT frameEffects, COUNT(*) as effect_count\nFROM cards\nWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL\nGROUP BY frameEffects\nORDER BY effect_count DESC\nLIMIT 1;",
    "512": "SELECT COUNT(*)\nFROM cards\nWHERE (power IS NULL OR power = '*')\n  AND hasFoil = 0\n  AND duelDeck = 'a';",
    "513": "SELECT id\nFROM sets\nWHERE type = 'commander'\nORDER BY totalSetSize DESC\nLIMIT 1;",
    "514": "SELECT c.name, c.manaCost\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'duel'\nORDER BY c.convertedManaCost DESC\nLIMIT 10;",
    "515": "WITH oldest_mythic AS (\n    SELECT uuid, MIN(originalReleaseDate) AS oldest_date\n    FROM cards\n    WHERE rarity = 'mythic'\n    GROUP BY uuid\n    ORDER BY oldest_date\n    LIMIT 1\n)\nSELECT l.format\nFROM legalities l\nJOIN oldest_mythic om ON l.uuid = om.uuid\nWHERE l.status = 'legal';",
    "516": "SELECT COUNT(DISTINCT c.uuid) AS number_of_cards\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.artist = 'Volkan Ba\u01f5a' AND fd.language = 'French';",
    "517": "SELECT COUNT(DISTINCT c.uuid) \nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.name = 'Abundance'\n  AND c.rarity = 'rare'\n  AND c.types LIKE '%Enchantment%'\nGROUP BY c.uuid\nHAVING COUNT(DISTINCT l.format) = (SELECT COUNT(DISTINCT format) FROM legalities WHERE status = 'Legal')",
    "518": "WITH BannedCounts AS (\n    SELECT format, COUNT(*) AS banned_count\n    FROM legalities\n    WHERE status = 'Banned'\n    GROUP BY format\n    ORDER BY banned_count DESC\n    LIMIT 1\n),\nBannedCards AS (\n    SELECT c.name, l.format\n    FROM legalities l\n    JOIN cards c ON l.uuid = c.uuid\n    WHERE l.status = 'Banned'\n)\nSELECT bc.name, bc.format\nFROM BannedCards bc\nJOIN BannedCounts bc2 ON bc.format = bc2.format;",
    "519": "SELECT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.name = 'Battlebond';",
    "520": "WITH ArtistCardCount AS (\n    SELECT artist, COUNT(*) AS card_count\n    FROM cards\n    WHERE artist IS NOT NULL\n    GROUP BY artist\n),\nLeastIllustratedArtist AS (\n    SELECT artist\n    FROM ArtistCardCount\n    WHERE card_count = (SELECT MIN(card_count) FROM ArtistCardCount)\n)\nSELECT DISTINCT l.format\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nWHERE c.artist IN (SELECT artist FROM LeastIllustratedArtist);",
    "521": "SELECT l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.frameVersion = '1997'\n  AND c.artist = 'D. Alexander Gregory'\n  AND (c.hasContentWarning = 1 OR c.artist = 'Wizards of the Coast')\n  AND l.format = 'legacy';",
    "522": "SELECT c.name, l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.edhrecRank = 1 AND l.status = 'Banned';",
    "523": "WITH yearly_set_count AS (\n    SELECT strftime('%Y', releaseDate) AS year, COUNT(*) AS set_count\n    FROM sets\n    WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'\n    GROUP BY year\n),\naverage_sets AS (\n    SELECT AVG(set_count) AS annual_average_sets\n    FROM yearly_set_count\n),\ncommon_language AS (\n    SELECT language\n    FROM foreign_data\n    GROUP BY language\n    ORDER BY COUNT(language) DESC\n    LIMIT 1\n)\nSELECT \n    (SELECT annual_average_sets FROM average_sets) AS annual_average_sets,\n    (SELECT language FROM common_language) AS common_language;",
    "524": "SELECT DISTINCT artist\nFROM cards\nWHERE borderColor = 'black' AND availability = 'arena';",
    "525": "SELECT uuid\nFROM legalities\nWHERE format = 'oldschool'\n  AND status IN ('banned', 'restricted');",
    "526": "SELECT COUNT(*) \nFROM cards \nWHERE artist = 'Matthew D. Wilson' \nAND availability = 'paper';",
    "527": "SELECT rulings.date, rulings.text\nFROM rulings\nJOIN cards ON rulings.uuid = cards.uuid\nWHERE cards.artist = 'Kev Walker'\nORDER BY rulings.date DESC;",
    "528": "SELECT DISTINCT c.name, l.format\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN legalities l ON c.uuid = l.uuid\nWHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';",
    "529": "SELECT s.name\nFROM sets s\nWHERE s.code IN (\n    SELECT st.setCode\n    FROM set_translations st\n    WHERE st.language = 'Korean'\n)\nAND s.code NOT IN (\n    SELECT st.setCode\n    FROM set_translations st\n    WHERE st.language LIKE '%Japanese%'\n);",
    "530": "SELECT DISTINCT frameVersion AS result\nFROM cards\nWHERE frameVersion IS NOT NULL\n\nUNION\n\nSELECT name AS result\nFROM cards\nWHERE artist = 'Allen Williams'\n\nUNION\n\nSELECT c.name AS result\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nWHERE l.status = 'Banned';",
    "531": "SELECT Id, DisplayName, Reputation\nFROM users\nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon')\nORDER BY Reputation DESC;",
    "532": "SELECT DisplayName\nFROM users\nWHERE strftime('%Y', CreationDate) = '2011';",
    "533": "SELECT COUNT(*) \nFROM users \nWHERE LastAccessDate > '2014-09-01';",
    "534": "SELECT DisplayName\nFROM users\nORDER BY Views DESC\nLIMIT 1;",
    "535": "SELECT COUNT(*) \nFROM users \nWHERE UpVotes > 100 AND DownVotes > 1;",
    "536": "SELECT COUNT(*) \nFROM users \nWHERE Views > 10 \nAND strftime('%Y', CreationDate) > '2013';",
    "537": "SELECT COUNT(*) AS PostCount\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n);",
    "538": "SELECT p.Title\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
    "539": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Eliciting priors from experts';",
    "540": "SELECT p.Title\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie'\nORDER BY p.ViewCount DESC\nLIMIT 1;",
    "541": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.FavoriteCount = (\n    SELECT MAX(FavoriteCount) FROM posts\n);",
    "542": "SELECT SUM(CommentCount) AS TotalComments\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n);",
    "543": "SELECT p.AnswerCount\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie'\nORDER BY p.AnswerCount DESC\nLIMIT 1;",
    "544": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Title = \"Examples for teaching: Correlation does not mean causation\";",
    "545": "SELECT COUNT(*)\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n)\nAND ParentId IS NULL;",
    "546": "SELECT DISTINCT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.ClosedDate IS NOT NULL;",
    "547": "SELECT COUNT(*)\nFROM posts\nWHERE OwnerUserId IN (\n    SELECT Id\n    FROM users\n    WHERE Age > 65\n)\nAND Score >= 20;",
    "548": "SELECT u.Location\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Eliciting priors from experts';",
    "549": "SELECT posts.Body\nFROM tags\nJOIN posts ON tags.ExcerptPostId = posts.Id\nWHERE tags.TagName = 'bayesian';",
    "550": "SELECT p.Body\nFROM posts p\nJOIN tags t ON p.Id = t.ExcerptPostId\nWHERE t.Count = (SELECT MAX(Count) FROM tags);",
    "551": "SELECT COUNT(*) AS BadgeCount\nFROM badges\nWHERE UserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n);",
    "552": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
    "553": "SELECT COUNT(*) AS BadgeCount\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.DisplayName = 'csgillespie'\n  AND strftime('%Y', badges.Date) = '2011';",
    "554": "SELECT u.DisplayName\nFROM users u\nJOIN (\n    SELECT UserId, COUNT(Id) AS BadgeCount\n    FROM badges\n    GROUP BY UserId\n    ORDER BY BadgeCount DESC\n    LIMIT 1\n) AS b ON u.Id = b.UserId;",
    "555": "SELECT AVG(Score) AS AverageScore\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'csgillespie'\n);",
    "556": "SELECT AVG(badge_count) AS average_badges\nFROM (\n    SELECT u.Id, COUNT(b.Id) AS badge_count\n    FROM users u\n    LEFT JOIN badges b ON u.Id = b.UserId\n    WHERE u.Views > 200\n    GROUP BY u.Id\n);",
    "557": "SELECT \n    (CAST(COUNT(CASE WHEN u.Age > 65 THEN 1 END) AS FLOAT) / COUNT(p.Id)) * 100 AS ElderUserPostPercentage\nFROM \n    posts p\nJOIN \n    users u ON p.OwnerUserId = u.Id\nWHERE \n    p.Score > 5;",
    "558": "SELECT COUNT(*) AS VoteCount\nFROM votes\nWHERE UserId = 58\nAND CreationDate = '2010-07-19';",
    "559": "SELECT CreationDate\nFROM votes\nGROUP BY CreationDate\nORDER BY COUNT(Id) DESC\nLIMIT 1;",
    "560": "SELECT COUNT(*) FROM badges WHERE Name = 'Revival';",
    "561": "SELECT p.Title\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.Score = (SELECT MAX(Score) FROM comments);",
    "562": "SELECT COUNT(*) AS CommentCount\nFROM comments\nWHERE PostId = (\n    SELECT Id\n    FROM posts\n    WHERE ViewCount = 1910\n);",
    "563": "SELECT p.FavoriteCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE c.UserId = 3025\n  AND c.CreationDate = '2014-04-23 20:29:39.0';",
    "564": "SELECT c.Text\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.ParentId = 107829;",
    "565": "SELECT \n    p.Id AS PostId,\n    CASE \n        WHEN p.ClosedDate IS NULL THEN 'Not Well-Finished'\n        ELSE 'Well-Finished'\n    END AS PostStatus\nFROM \n    comments c\nJOIN \n    posts p ON c.PostId = p.Id\nWHERE \n    c.UserId = 23853\n    AND c.CreationDate = '2013-07-12 09:08:18.0';",
    "566": "SELECT u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Id = 65041;",
    "567": "SELECT COUNT(*) AS PostCount\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Tiago Pasqualini'\n);",
    "568": "SELECT u.DisplayName\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.Id = 6347;",
    "569": "SELECT COUNT(v.Id) AS NumberOfVotes\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE p.Title LIKE '%data visualization%';",
    "570": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
    "571": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) * 1.0 /\n    (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS PostToVoteRatio;",
    "572": "SELECT ViewCount\nFROM posts\nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
    "573": "SELECT Text\nFROM comments\nWHERE Score = 17;",
    "574": "SELECT DisplayName\nFROM users\nWHERE WebsiteUrl = 'http://stackoverflow.com';",
    "575": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'SilentGhost';",
    "576": "SELECT u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Text = 'thank you user93!';",
    "577": "SELECT c.Text\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE u.DisplayName = 'A Lion';",
    "578": "SELECT u.DisplayName, u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';",
    "579": "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.Title = 'How does gentle boosting differ from AdaBoost?'",
    "580": "SELECT u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Necromancer'\nLIMIT 10;",
    "581": "SELECT u.DisplayName AS Editor\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Title = 'Open source tools for visualizing multi-dimensional data';",
    "582": "SELECT p.Title\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE u.DisplayName = 'Vebjorn Ljosa';",
    "583": "SELECT \n    SUM(p.Score) AS TotalScore,\n    u.WebsiteUrl\nFROM \n    posts p\nJOIN \n    users u ON p.LastEditorUserId = u.Id\nWHERE \n    u.DisplayName = 'Yevgeny';",
    "584": "SELECT c.Text\nFROM comments c\nJOIN postHistory ph ON c.UserId = ph.UserId\nJOIN posts p ON ph.PostId = p.Id\nWHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\n  AND c.PostId = p.Id;",
    "585": "SELECT SUM(v.BountyAmount) AS TotalBountyAmount\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE p.Title LIKE '%data%'\n  AND v.BountyAmount IS NOT NULL;",
    "586": "SELECT u.DisplayName\nFROM votes v\nJOIN posts p ON v.PostId = p.Id\nJOIN users u ON v.UserId = u.Id\nWHERE v.BountyAmount = 50\n  AND p.Title LIKE '%variance%'",
    "587": "SELECT \n    p.Title,\n    c.Text AS Comment,\n    AVG(p.ViewCount) OVER () AS AverageViewCount\nFROM \n    posts p\nLEFT JOIN \n    comments c ON p.Id = c.PostId\nWHERE \n    p.Tags LIKE '%<humor>%';",
    "588": "SELECT COUNT(*) AS TotalComments\nFROM comments\nWHERE UserId = 13;",
    "589": "SELECT Id\nFROM users\nWHERE Reputation = (SELECT MAX(Reputation) FROM users);",
    "590": "SELECT Id\nFROM users\nWHERE Views = (SELECT MIN(Views) FROM users);",
    "591": "SELECT COUNT(DISTINCT UserId) AS SupporterBadgeCount\nFROM badges\nWHERE Name = 'Supporter'\n  AND strftime('%Y', Date) = '2011';",
    "592": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers\nFROM badges\nGROUP BY UserId\nHAVING COUNT(Name) > 5;",
    "593": "SELECT COUNT(DISTINCT u.Id) AS UserCount\nFROM users u\nJOIN badges b1 ON u.Id = b1.UserId\nJOIN badges b2 ON u.Id = b2.UserId\nWHERE u.Location = 'New York'\n  AND b1.Name = 'Teacher'\n  AND b2.Name = 'Supporter';",
    "594": "SELECT u.Id AS UserId, u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Id = 1;",
    "595": "SELECT DISTINCT u.Id, u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN (\n    SELECT ph.PostId, ph.UserId\n    FROM postHistory ph\n    GROUP BY ph.PostId, ph.UserId\n    HAVING COUNT(ph.Id) = 1\n) AS single_history ON p.Id = single_history.PostId AND u.Id = single_history.UserId\nWHERE p.ViewCount >= 1000;",
    "596": "WITH CommentCounts AS (\n    SELECT UserId, COUNT(Id) AS CommentCount\n    FROM comments\n    WHERE UserId IS NOT NULL\n    GROUP BY UserId\n),\nMaxComments AS (\n    SELECT MAX(CommentCount) AS MaxCommentCount\n    FROM CommentCounts\n),\nTopCommenters AS (\n    SELECT UserId\n    FROM CommentCounts\n    WHERE CommentCount = (SELECT MaxCommentCount FROM MaxComments)\n)\nSELECT b.UserId, b.Name AS BadgeName\nFROM badges b\nJOIN TopCommenters tc ON b.UserId = tc.UserId;",
    "597": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Location = 'India' AND b.Name = 'Teacher';",
    "598": "WITH BadgeCounts AS (\n    SELECT \n        COUNT(*) AS TotalCount,\n        SUM(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 ELSE 0 END) AS Count2010,\n        SUM(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 ELSE 0 END) AS Count2011\n    FROM badges\n    WHERE Name = 'Student'\n)\nSELECT \n    (CAST(Count2010 AS FLOAT) / TotalCount * 100) - (CAST(Count2011 AS FLOAT) / TotalCount * 100) AS PercentageDifference\nFROM BadgeCounts;",
    "599": "SELECT 'PostHistoryTypeIds' AS ResultType, PostHistoryTypeId\nFROM postHistory\nWHERE PostId = 3720\n\nUNION ALL\n\nSELECT 'UniqueCommentersCount' AS ResultType, COUNT(DISTINCT UserId)\nFROM comments\nWHERE PostId = 3720;",
    "600": "SELECT \n    pl.PostId AS RelatedPostId,\n    p.ViewCount AS Popularity\nFROM \n    postLinks pl\nJOIN \n    posts p ON p.Id = 61217\nWHERE \n    pl.RelatedPostId = 61217;",
    "601": "SELECT \n    p.Score, \n    pl.LinkTypeId\nFROM \n    posts p\nJOIN \n    postLinks pl ON p.Id = pl.PostId\nWHERE \n    p.Id = 395;",
    "602": "SELECT Id, OwnerUserId\nFROM posts\nWHERE Score > 60;",
    "603": "SELECT SUM(FavoriteCount) AS TotalFavoriteCount\nFROM posts\nWHERE OwnerUserId = 686\n  AND strftime('%Y', CreaionDate) = '2011';",
    "604": "WITH UserPostCounts AS (\n    SELECT OwnerUserId, COUNT(*) AS PostCount\n    FROM posts\n    WHERE OwnerUserId IS NOT NULL\n    GROUP BY OwnerUserId\n),\nEligibleUsers AS (\n    SELECT u.Id, u.UpVotes, u.Age\n    FROM users u\n    JOIN UserPostCounts upc ON u.Id = upc.OwnerUserId\n    WHERE upc.PostCount > 10\n)\nSELECT \n    AVG(UpVotes) AS AverageUpVotes,\n    AVG(Age) AS AverageAge\nFROM EligibleUsers;",
    "605": "SELECT COUNT(DISTINCT UserId) AS AnnouncerBadgeCount\nFROM badges\nWHERE Name = 'Announcer';",
    "606": "SELECT Name\nFROM badges\nWHERE Date = '2010-07-19 19:39:08.0';",
    "607": "SELECT COUNT(*) AS PositiveCommentCount\nFROM comments\nWHERE Score > 60;",
    "608": "SELECT Text\nFROM comments\nWHERE CreationDate = '2010-07-19 19:25:47.0';",
    "609": "SELECT COUNT(*) AS NumberOfPostsWithScore10\nFROM posts\nWHERE Score = 10;",
    "610": "SELECT DISTINCT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Reputation = (SELECT MAX(Reputation) FROM users);",
    "611": "SELECT u.Reputation\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Date = '2010-07-19 19:39:08.0';",
    "612": "SELECT badges.Name\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE users.DisplayName = 'Pierre';",
    "613": "SELECT b.Date\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Location = 'Rochester, NY';",
    "614": "SELECT \n    (CAST(COUNT(DISTINCT b.UserId) AS FLOAT) / COUNT(DISTINCT u.Id)) * 100 AS TeacherBadgePercentage\nFROM \n    users u\nLEFT JOIN \n    badges b ON u.Id = b.UserId AND b.Name = 'Teacher';",
    "615": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id END) AS FLOAT) / COUNT(DISTINCT u.Id)) * 100 AS TeenagerPercentage\nFROM \n    badges b\nJOIN \n    users u ON b.UserId = u.Id\nWHERE \n    b.Name = 'Organizer';",
    "616": "SELECT c.Score\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.CreaionDate = '2010-07-19 19:19:56.0';",
    "617": "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.CreaionDate = '2010-07-19 19:37:33.0';",
    "618": "SELECT DISTINCT u.Age\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Location = 'Vienna, Austria';",
    "619": "SELECT COUNT(DISTINCT u.Id) AS AdultSupportersCount\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Age BETWEEN 19 AND 65\n  AND b.Name = 'Supporter';",
    "620": "SELECT u.Views\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Date = '2010-07-19 19:39:08.0';",
    "621": "SELECT DISTINCT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Reputation = (SELECT MIN(Reputation) FROM users);",
    "622": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'Sharpie';",
    "623": "SELECT COUNT(DISTINCT b.UserId) AS ElderSupporterCount\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE u.Age > 65 AND b.Name = 'Supporter';",
    "624": "SELECT DisplayName FROM users WHERE Id = 30;",
    "625": "SELECT COUNT(*) AS NumberOfUsersFromNewYork\nFROM users\nWHERE Location = 'New York';",
    "626": "SELECT COUNT(*) AS VoteCount\nFROM votes\nWHERE strftime('%Y', CreationDate) = '2010';",
    "627": "SELECT COUNT(*) AS AdultUserCount\nFROM users\nWHERE Age BETWEEN 19 AND 65;",
    "628": "SELECT DisplayName\nFROM users\nWHERE Views = (SELECT MAX(Views) FROM users);",
    "629": "SELECT \n    (CAST(SUM(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS FLOAT) /\n     NULLIF(SUM(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END), 0)) AS VoteRatio\nFROM \n    votes;",
    "630": "SELECT DISTINCT t.TagName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nJOIN tags t ON ',' || p.Tags || ',' LIKE '%,' || t.TagName || ',%'\nWHERE u.DisplayName = 'John Salvatier';",
    "631": "SELECT COUNT(*) AS PostCount\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Daniel Vassallo'\n);",
    "632": "SELECT COUNT(*) AS VoteCount\nFROM votes\nWHERE UserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Harlan'\n);",
    "633": "SELECT p.Id\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'slashnick'\nORDER BY p.AnswerCount DESC\nLIMIT 1;",
    "634": "SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViews\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')\nGROUP BY u.DisplayName\nORDER BY TotalViews DESC\nLIMIT 1;",
    "635": "SELECT COUNT(DISTINCT p.Id) AS PostCount\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nJOIN votes v ON p.Id = v.PostId\nWHERE u.DisplayName = 'Matt Parker'\nGROUP BY p.Id\nHAVING COUNT(v.Id) > 4;",
    "636": "SELECT COUNT(c.Id) AS NegativeCommentsCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Neil McGuigan' AND c.Score < 60;",
    "637": "SELECT DISTINCT p.Tags\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Mark Meckes'\n  AND p.CommentCount = 0\n  AND p.Tags IS NOT NULL;",
    "638": "SELECT users.DisplayName\nFROM badges\nJOIN users ON badges.UserId = users.Id\nWHERE badges.Name = 'Organizer';",
    "639": "WITH CommunityUser AS (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Community'\n),\nCommunityPosts AS (\n    SELECT Id\n    FROM posts\n    WHERE OwnerUserId = (SELECT Id FROM CommunityUser)\n),\nRTaggedPosts AS (\n    SELECT p.Id\n    FROM posts p\n    JOIN tags t ON ',' || p.Tags || ',' LIKE '%<r>%'\n    WHERE p.OwnerUserId = (SELECT Id FROM CommunityUser)\n)\nSELECT \n    (COUNT(RTaggedPosts.Id) * 100.0 / COUNT(CommunityPosts.Id)) AS Percentage\nFROM \n    CommunityPosts\nLEFT JOIN \n    RTaggedPosts ON CommunityPosts.Id = RTaggedPosts.Id;",
    "640": "SELECT \n    (SELECT COALESCE(SUM(p.ViewCount), 0) \n     FROM posts p\n     JOIN users u ON p.OwnerUserId = u.Id\n     WHERE u.DisplayName = 'Mornington') -\n    (SELECT COALESCE(SUM(p.ViewCount), 0) \n     FROM posts p\n     JOIN users u ON p.OwnerUserId = u.Id\n     WHERE u.DisplayName = 'Amos') AS ViewCountDifference;",
    "641": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers\nFROM badges\nWHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014';",
    "642": "SELECT COUNT(Id) AS PostCount\nFROM posts\nWHERE DATE(CreaionDate) = '2010-07-21';",
    "643": "SELECT DisplayName, Age\nFROM users\nWHERE Views = (SELECT MAX(Views) FROM users);",
    "644": "SELECT LastEditDate, LastEditorUserId\nFROM posts\nWHERE Title = 'Detecting a given face in a database of facial images';",
    "645": "SELECT COUNT(*) \nFROM comments \nWHERE UserId = 13 AND Score < 60;",
    "646": "SELECT \n    posts.Title, \n    users.DisplayName\nFROM \n    comments\nJOIN \n    posts ON comments.PostId = posts.Id\nJOIN \n    users ON comments.UserId = users.Id\nWHERE \n    comments.Score > 60;",
    "647": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.Location = 'North Pole'\n  AND strftime('%Y', b.Date) = '2011';",
    "648": "SELECT u.DisplayName, u.WebsiteUrl\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.FavoriteCount > 150;",
    "649": "SELECT \n    p.Id AS PostId,\n    COUNT(ph.Id) AS PostHistoryCount,\n    p.LastEditDate\nFROM \n    posts p\nLEFT JOIN \n    postHistory ph ON p.Id = ph.PostId\nWHERE \n    p.Title = 'What is the best introductory Bayesian statistics textbook?'\nGROUP BY \n    p.Id;",
    "650": "SELECT \n    users.LastAccessDate, \n    users.Location\nFROM \n    badges\nJOIN \n    users ON badges.UserId = users.Id\nWHERE \n    badges.Name = 'Outliers';",
    "651": "SELECT p2.Title\nFROM posts p1\nJOIN postLinks pl ON p1.Id = pl.PostId\nJOIN posts p2 ON pl.RelatedPostId = p2.Id\nWHERE p1.Title = 'How to tell if something happened in a data set which monitors a value over time';",
    "652": "SELECT \n    p.Id AS PostId,\n    b.Name AS BadgeName\nFROM \n    users u\nJOIN \n    posts p ON u.Id = p.OwnerUserId\nLEFT JOIN \n    badges b ON u.Id = b.UserId\nWHERE \n    u.DisplayName = 'Samuel'\n    AND (strftime('%Y', p.CreaionDate) = '2013' OR strftime('%Y', b.Date) = '2013');",
    "653": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts);",
    "654": "SELECT u.DisplayName, u.Location\nFROM tags t\nJOIN posts p ON t.ExcerptPostId = p.Id\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE t.TagName = 'hypothesis-testing';",
    "655": "SELECT \n    p2.Title AS RelatedPostTitle,\n    pl.LinkTypeId\nFROM \n    posts p1\nJOIN \n    postLinks pl ON p1.Id = pl.PostId\nJOIN \n    posts p2 ON pl.RelatedPostId = p2.Id\nWHERE \n    p1.Title = 'What are principal component scores?';",
    "656": "SELECT u.DisplayName\nFROM posts AS child\nJOIN posts AS parent ON child.ParentId = parent.Id\nJOIN users AS u ON parent.OwnerUserId = u.Id\nWHERE child.Score = (\n    SELECT MAX(Score)\n    FROM posts\n    WHERE ParentId IS NOT NULL\n)\nLIMIT 1;",
    "657": "SELECT u.DisplayName, u.WebsiteUrl\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.VoteTypeId = 8\nAND v.BountyAmount = (\n    SELECT MAX(BountyAmount)\n    FROM votes\n    WHERE VoteTypeId = 8\n)",
    "658": "SELECT Title\nFROM posts\nORDER BY ViewCount DESC\nLIMIT 5;",
    "659": "SELECT COUNT(*) \nFROM tags \nWHERE Count BETWEEN 5000 AND 7000;",
    "660": "SELECT OwnerUserId\nFROM posts\nWHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);",
    "661": "SELECT Age\nFROM users\nWHERE Reputation = (SELECT MAX(Reputation) FROM users);",
    "662": "SELECT COUNT(DISTINCT v.PostId) AS PostCount\nFROM votes v\nJOIN posts p ON v.PostId = p.Id\nWHERE strftime('%Y', v.CreationDate) = '2011'\n  AND v.BountyAmount = 50;",
    "663": "SELECT Id\nFROM users\nWHERE Age = (SELECT MIN(Age) FROM users);",
    "664": "SELECT SUM(Score) AS TotalScore\nFROM posts\nWHERE LasActivityDate LIKE '2010-07-19%';",
    "665": "SELECT COUNT(pl.Id) / 12.0 AS AverageMonthlyLinks\nFROM posts p\nJOIN postLinks pl ON p.Id = pl.PostId\nWHERE p.AnswerCount <= 2\n  AND strftime('%Y', pl.CreationDate) = '2010';",
    "666": "SELECT p.Id\nFROM posts p\nJOIN votes v ON p.Id = v.PostId\nWHERE v.UserId = 1465\nORDER BY p.FavoriteCount DESC\nLIMIT 1;",
    "667": "SELECT p.Title\nFROM posts p\nJOIN postLinks pl ON p.Id = pl.PostId\nWHERE pl.CreationDate = (\n    SELECT MIN(CreationDate)\n    FROM postLinks\n);",
    "668": "SELECT u.DisplayName\nFROM users u\nJOIN (\n    SELECT UserId, COUNT(*) AS BadgeCount\n    FROM badges\n    GROUP BY UserId\n) b ON u.Id = b.UserId\nWHERE b.BadgeCount = (\n    SELECT MAX(BadgeCount)\n    FROM (\n        SELECT UserId, COUNT(*) AS BadgeCount\n        FROM badges\n        GROUP BY UserId\n    )\n);",
    "669": "SELECT MIN(v.CreationDate) AS FirstVoteDate\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nWHERE u.DisplayName = 'chl';",
    "670": "SELECT MIN(p.CreaionDate) AS FirstPostDate\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Age = (SELECT MIN(Age) FROM users);",
    "671": "SELECT u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Autobiographer'\nORDER BY b.Date ASC\nLIMIT 1;",
    "672": "SELECT COUNT(DISTINCT u.Id) AS UserCount\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Location = 'United Kingdom'\n  AND p.FavoriteCount >= 4;",
    "673": "WITH OldestUsers AS (\n    SELECT Id\n    FROM users\n    WHERE Age = (SELECT MAX(Age) FROM users)\n),\nVotesByOldestUsers AS (\n    SELECT UserId, COUNT(PostId) AS VoteCount\n    FROM votes\n    WHERE UserId IN (SELECT Id FROM OldestUsers)\n    GROUP BY UserId\n)\nSELECT AVG(VoteCount) AS AverageVotes\nFROM VotesByOldestUsers;",
    "674": "SELECT DisplayName\nFROM users\nWHERE Reputation = (SELECT MAX(Reputation) FROM users);",
    "675": "SELECT COUNT(*) \nFROM users \nWHERE Reputation > 2000 \nAND Views > 1000;",
    "676": "SELECT DisplayName\nFROM users\nWHERE Age BETWEEN 19 AND 65;",
    "677": "SELECT COUNT(*) AS PostCount\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Jay Stevens'\n  AND strftime('%Y', posts.CreaionDate) = '2010';",
    "678": "SELECT p.Id, p.Title\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky'\nORDER BY p.ViewCount DESC\nLIMIT 1;",
    "679": "SELECT Id, Title\nFROM posts\nWHERE Score = (SELECT MAX(Score) FROM posts);",
    "680": "SELECT AVG(Score) AS AverageScore\nFROM posts\nWHERE OwnerUserId = (\n    SELECT Id\n    FROM users\n    WHERE DisplayName = 'Stephen Turner'\n);",
    "681": "SELECT DISTINCT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.ViewCount > 20000\n  AND strftime('%Y', p.CreaionDate) = '2011';",
    "682": "SELECT p.Id, u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE strftime('%Y', p.CreaionDate) = '2010'\nORDER BY p.FavoriteCount DESC\nLIMIT 1;",
    "683": "WITH Users2011 AS (\n    SELECT Id\n    FROM users\n    WHERE Reputation > 1000\n    AND strftime('%Y', CreationDate) = '2011'\n),\nPostsByUsers2011 AS (\n    SELECT COUNT(*) AS CountPostsByUsers2011\n    FROM posts\n    WHERE OwnerUserId IN (SELECT Id FROM Users2011)\n),\nTotalPosts AS (\n    SELECT COUNT(*) AS TotalCountPosts\n    FROM posts\n)\nSELECT \n    (CAST(CountPostsByUsers2011 AS FLOAT) / TotalCountPosts) * 100 AS Percentage\nFROM PostsByUsers2011, TotalPosts;",
    "684": "SELECT \n    (CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) AS FLOAT) / COUNT(Id)) * 100 AS TeenageUserPercentage\nFROM \n    users;",
    "685": "SELECT \n    posts.ViewCount AS TotalViews,\n    users.DisplayName AS LastEditorName\nFROM \n    posts\nJOIN \n    users ON posts.LastEditorUserId = users.Id\nWHERE \n    posts.Body = 'Computer Game Datasets';",
    "686": "SELECT COUNT(*) AS TotalPostsAboveAverageViews\nFROM posts\nWHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);",
    "687": "SELECT COUNT(*) AS CommentCount\nFROM comments\nWHERE PostId = (\n    SELECT Id\n    FROM posts\n    ORDER BY Score DESC\n    LIMIT 1\n);",
    "688": "SELECT COUNT(*)\nFROM posts\nWHERE ViewCount > 35000\n  AND CommentCount = 0;",
    "689": "SELECT \n    u.DisplayName, \n    u.Location\nFROM \n    posts p\nJOIN \n    users u ON p.LastEditorUserId = u.Id\nWHERE \n    p.Id = 183;",
    "690": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'Emmett'\nORDER BY b.Date DESC\nLIMIT 1;",
    "691": "SELECT COUNT(*) AS NumberOfAdultUsers\nFROM users\nWHERE Age BETWEEN 19 AND 65\n  AND UpVotes > 5000;",
    "692": "SELECT \n    julianday(b.Date) - julianday(u.CreationDate) AS DaysToBadge\nFROM \n    users u\nJOIN \n    badges b ON u.Id = b.UserId\nWHERE \n    u.DisplayName = 'Zolomon';",
    "693": "WITH LatestUser AS (\n    SELECT Id\n    FROM users\n    ORDER BY CreationDate DESC\n    LIMIT 1\n)\n\nSELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = LatestUser.Id) AS PostCount,\n    (SELECT COUNT(*) FROM comments WHERE UserId = LatestUser.Id) AS CommentCount\nFROM LatestUser;",
    "694": "SELECT \n    c.Text, \n    COALESCE(u.DisplayName, c.UserDisplayName) AS DisplayName\nFROM \n    comments c\nJOIN \n    posts p ON c.PostId = p.Id\nLEFT JOIN \n    users u ON c.UserId = u.Id\nWHERE \n    p.Title = 'Analysing wind data with R'\nORDER BY \n    c.CreationDate DESC\nLIMIT 10;",
    "695": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers\nFROM badges\nWHERE Name = 'Citizen Patrol';",
    "696": "SELECT COUNT(*)\nFROM posts\nWHERE Tags LIKE '%<careers>%';",
    "697": "SELECT Reputation, Views\nFROM users\nWHERE DisplayName = 'Jarrod Dixon';",
    "698": "SELECT \n    (SELECT COUNT(*) \n     FROM comments \n     WHERE PostId = p.Id) AS CommentCount,\n    (SELECT COUNT(*) \n     FROM posts \n     WHERE ParentId = p.Id) AS AnswerCount\nFROM \n    posts p\nWHERE \n    p.Title = 'Clustering 1D data';",
    "699": "SELECT CreationDate\nFROM users\nWHERE DisplayName = 'IrishStat';",
    "700": "SELECT COUNT(DISTINCT PostId) AS NumberOfPostsWithBountyOver30\nFROM votes\nWHERE BountyAmount > 30;",
    "701": "WITH MostInfluentialUser AS (\n    SELECT Id\n    FROM users\n    ORDER BY Reputation DESC\n    LIMIT 1\n),\nUserPosts AS (\n    SELECT *\n    FROM posts\n    WHERE OwnerUserId = (SELECT Id FROM MostInfluentialUser)\n),\nHighScorePosts AS (\n    SELECT *\n    FROM UserPosts\n    WHERE Score > 50\n)\nSELECT \n    (CAST((SELECT COUNT(*) FROM HighScorePosts) AS FLOAT) / \n     (SELECT COUNT(*) FROM UserPosts)) * 100 AS PercentageHighScorePosts",
    "702": "SELECT COUNT(*) FROM posts WHERE Score < 20;",
    "703": "SELECT COUNT(*) \nFROM tags \nWHERE Id < 15 \nAND Count <= 20;",
    "704": "SELECT ExcerptPostId, WikiPostId\nFROM tags\nWHERE TagName = 'sample';",
    "705": "SELECT u.Reputation, u.UpVotes\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nWHERE c.Text = 'fine, you win :)';",
    "706": "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.Title LIKE '%linear regression%'",
    "707": "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.ViewCount BETWEEN 100 AND 150\nORDER BY c.Score DESC\nLIMIT 1;",
    "708": "SELECT u.CreationDate, u.Age\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE u.WebsiteUrl LIKE '%http://%'",
    "709": "SELECT COUNT(DISTINCT c.PostId) AS PostCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE c.Score = 0 AND p.ViewCount < 5;",
    "710": "SELECT COUNT(c.Id) AS ZeroScoreComments\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.CommentCount = 1 AND c.Score = 0;",
    "711": "SELECT COUNT(DISTINCT u.Id) AS TotalUsers\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score = 0\n  AND u.Age = 40;",
    "712": "SELECT \n    p.Id AS PostId,\n    c.Id AS CommentId,\n    c.Text AS CommentText\nFROM \n    posts p\nJOIN \n    comments c ON p.Id = c.PostId\nWHERE \n    p.Title = 'Group differences on a five point Likert item';",
    "713": "SELECT u.UpVotes\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Text = \"R is also lazy evaluated.\";",
    "714": "SELECT c.Text\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky';",
    "715": "SELECT DISTINCT u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Score BETWEEN 1 AND 5\nAND u.DownVotes = 0;",
    "716": "WITH UsersWithComments AS (\n    SELECT DISTINCT c.UserId\n    FROM comments c\n    WHERE c.Score BETWEEN 5 AND 10\n),\nUsersWithZeroUpVotes AS (\n    SELECT u.Id\n    FROM users u\n    WHERE u.UpVotes = 0\n)\nSELECT \n    (COUNT(DISTINCT uwzuv.Id) * 100.0) / COUNT(DISTINCT uwc.UserId) AS Percentage\nFROM \n    UsersWithComments uwc\nLEFT JOIN \n    UsersWithZeroUpVotes uwzuv ON uwc.UserId = uwzuv.Id;",
    "717": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = '3-D Man';",
    "718": "SELECT COUNT(DISTINCT hero_id) AS num_superheroes\nFROM hero_power\nWHERE power_id = (\n    SELECT id\n    FROM superpower\n    WHERE power_name = 'Super Strength'\n);",
    "719": "SELECT COUNT(DISTINCT s.id) AS num_superheroes\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;",
    "720": "SELECT s.full_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nGROUP BY s.id\nHAVING COUNT(hp.power_id) > 15;",
    "721": "SELECT COUNT(*) \nFROM superhero \nWHERE eye_colour_id = (\n    SELECT id \n    FROM colour \n    WHERE colour = 'Blue'\n);",
    "722": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE s.superhero_name = 'Apocalypse';",
    "723": "SELECT COUNT(DISTINCT s.id) AS num_superheroes_with_agility\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE c.colour = 'Blue' AND sp.power_name = 'Agility';",
    "724": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour e ON s.eye_colour_id = e.id\nJOIN colour h ON s.hair_colour_id = h.id\nWHERE e.colour = 'Blue' AND h.colour = 'Blond';",
    "725": "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = (\n    SELECT id \n    FROM publisher \n    WHERE publisher_name = 'Marvel Comics'\n);",
    "726": "SELECT s.superhero_name, s.height_cm\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'Marvel Comics'\nORDER BY s.height_cm DESC;",
    "727": "SELECT publisher.publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero.superhero_name = 'Sauron';",
    "728": "SELECT \n    colour.colour AS eye_color, \n    COUNT(superhero.id) AS num_superheroes\nFROM \n    superhero\nJOIN \n    publisher ON superhero.publisher_id = publisher.id\nJOIN \n    colour ON superhero.eye_colour_id = colour.id\nWHERE \n    publisher.publisher_name = 'Marvel Comics'\nGROUP BY \n    colour.colour\nORDER BY \n    num_superheroes DESC;",
    "729": "SELECT AVG(height_cm) AS average_height\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Marvel Comics';",
    "730": "SELECT s.superhero_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE p.publisher_name = 'Marvel Comics'\nAND sp.power_name = 'Super Strength';",
    "731": "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = (\n    SELECT id \n    FROM publisher \n    WHERE publisher_name = 'DC Comics'\n);",
    "732": "SELECT p.publisher_name\nFROM publisher p\nJOIN superhero s ON p.id = s.publisher_id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed'\nORDER BY ha.attribute_value ASC\nLIMIT 1;",
    "733": "SELECT COUNT(*)\nFROM superhero\nWHERE eye_colour_id = (\n    SELECT id FROM colour WHERE colour = 'Gold'\n)\nAND publisher_id = (\n    SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'\n);",
    "734": "SELECT publisher.publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero.superhero_name = 'Blue Beetle II';",
    "735": "SELECT COUNT(*) \nFROM superhero \nWHERE hair_colour_id = (\n    SELECT id \n    FROM colour \n    WHERE colour = 'Blond'\n);",
    "736": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_id = (\n    SELECT id FROM attribute WHERE attribute_name = 'Intelligence'\n)\nAND ha.attribute_value = (\n    SELECT MIN(attribute_value)\n    FROM hero_attribute\n    WHERE attribute_id = (\n        SELECT id FROM attribute WHERE attribute_name = 'Intelligence'\n    )\n);",
    "737": "SELECT race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.superhero_name = 'Copycat';",
    "738": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;",
    "739": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Death Touch';",
    "740": "SELECT COUNT(DISTINCT s.id) AS female_superheroes_with_strength_100\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE g.gender = 'Female'\n  AND a.attribute_name = 'Strength'\n  AND ha.attribute_value = 100;",
    "741": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nGROUP BY s.id\nORDER BY COUNT(hp.power_id) DESC\nLIMIT 1;",
    "742": "SELECT COUNT(*) \nFROM superhero \nWHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');",
    "743": "WITH TotalSuperheroes AS (\n    SELECT COUNT(*) AS total_count\n    FROM superhero\n),\nBadSuperheroes AS (\n    SELECT COUNT(*) AS bad_count\n    FROM superhero\n    JOIN alignment ON superhero.alignment_id = alignment.id\n    WHERE alignment.alignment = 'Bad'\n),\nMarvelBadSuperheroes AS (\n    SELECT COUNT(*) AS marvel_bad_count\n    FROM superhero\n    JOIN alignment ON superhero.alignment_id = alignment.id\n    JOIN publisher ON superhero.publisher_id = publisher.id\n    WHERE alignment.alignment = 'Bad' AND publisher.publisher_name = 'Marvel Comics'\n)\nSELECT \n    (SELECT bad_count FROM BadSuperheroes) * 100.0 / (SELECT total_count FROM TotalSuperheroes) AS bad_percentage,\n    (SELECT marvel_bad_count FROM MarvelBadSuperheroes) AS marvel_bad_count;",
    "744": "SELECT \n    (marvel_count - dc_count) AS difference\nFROM \n    (SELECT \n        (SELECT COUNT(*) \n         FROM superhero \n         JOIN publisher ON superhero.publisher_id = publisher.id \n         WHERE publisher.publisher_name = 'Marvel Comics') AS marvel_count,\n        (SELECT COUNT(*) \n         FROM superhero \n         JOIN publisher ON superhero.publisher_id = publisher.id \n         WHERE publisher.publisher_name = 'DC Comics') AS dc_count\n    );",
    "745": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
    "746": "SELECT AVG(attribute_value) AS average_attribute_value\nFROM hero_attribute;",
    "747": "SELECT COUNT(*) AS total_superheroes_without_full_name\nFROM superhero\nWHERE full_name IS NULL;",
    "748": "SELECT colour.colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.id = 75;",
    "749": "SELECT sp.power_name\nFROM superhero AS sh\nJOIN hero_power AS hp ON sh.id = hp.hero_id\nJOIN superpower AS sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Deathlok';",
    "750": "SELECT AVG(weight_kg) AS average_weight\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nWHERE gender.gender = 'Female';",
    "751": "SELECT DISTINCT sp.power_name\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE g.gender = 'Male'\nLIMIT 5;",
    "752": "SELECT superhero.superhero_name\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE race.race = 'Alien';",
    "753": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.height_cm BETWEEN 170 AND 190\n  AND c.colour = 'No Colour';",
    "754": "SELECT sp.power_name\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 56;",
    "755": "SELECT s.full_name\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'Demi-God'\nLIMIT 5;",
    "756": "SELECT COUNT(*) \nFROM superhero \nWHERE alignment_id = (\n    SELECT id \n    FROM alignment \n    WHERE alignment = 'Bad'\n);",
    "757": "SELECT race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.weight_kg = 169;",
    "758": "SELECT c.colour\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nJOIN colour c ON s.hair_colour_id = c.id\nWHERE s.height_cm = 185\nAND r.race = 'human';",
    "759": "SELECT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);",
    "760": "SELECT \n    (COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*)) AS marvel_percentage\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nWHERE \n    s.height_cm BETWEEN 150 AND 180;",
    "761": "SELECT s.superhero_name\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE g.gender = 'Male'\nAND s.weight_kg > (\n    SELECT AVG(weight_kg) * 0.79\n    FROM superhero\n);",
    "762": "SELECT sp.power_name, COUNT(hp.power_id) AS power_count\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nGROUP BY sp.power_name\nORDER BY power_count DESC\nLIMIT 1;",
    "763": "SELECT \n    a.attribute_name, \n    ha.attribute_value\nFROM \n    superhero s\nJOIN \n    hero_attribute ha ON s.id = ha.hero_id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nWHERE \n    s.superhero_name = 'Abomination';",
    "764": "SELECT sp.power_name\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 1;",
    "765": "SELECT COUNT(DISTINCT hp.hero_id) AS num_heroes_with_stealth\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'stealth';",
    "766": "SELECT s.full_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_id = (\n    SELECT id FROM attribute WHERE attribute_name = 'strength'\n)\nAND ha.attribute_value = (\n    SELECT MAX(attribute_value)\n    FROM hero_attribute\n    WHERE attribute_id = (\n        SELECT id FROM attribute WHERE attribute_name = 'strength'\n    )\n);",
    "767": "SELECT \n    CAST(COUNT(CASE WHEN skin_colour_id IS NULL THEN 1 END) AS FLOAT) / COUNT(*) AS average_no_skin_colour\nFROM \n    superhero;",
    "768": "SELECT COUNT(*) \nFROM superhero \nWHERE publisher_id = (\n    SELECT id \n    FROM publisher \n    WHERE publisher_name = 'Dark Horse Comics'\n);",
    "769": "SELECT s.superhero_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE p.publisher_name = 'Dark Horse Comics'\n  AND a.attribute_name = 'durability'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
    "770": "SELECT colour.colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.full_name = 'Abraham Sapien';",
    "771": "SELECT superhero.superhero_name\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Flight';",
    "772": "SELECT \n    eye_colour.colour AS eye_colour,\n    hair_colour.colour AS hair_colour,\n    skin_colour.colour AS skin_colour\nFROM \n    superhero\nJOIN \n    gender ON superhero.gender_id = gender.id\nJOIN \n    publisher ON superhero.publisher_id = publisher.id\nLEFT JOIN \n    colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id\nLEFT JOIN \n    colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id\nLEFT JOIN \n    colour AS skin_colour ON superhero.skin_colour_id = skin_colour.id\nWHERE \n    gender.gender = 'Female' \n    AND publisher.publisher_name = 'Dark Horse Comics';",
    "773": "SELECT \n    s.superhero_name, \n    p.publisher_name\nFROM \n    superhero s\nJOIN \n    publisher p ON s.publisher_id = p.id\nWHERE \n    s.eye_colour_id = s.hair_colour_id \n    AND s.hair_colour_id = s.skin_colour_id;",
    "774": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.superhero_name = 'A-Bomb';",
    "775": "SELECT \n    (CAST(COUNT(CASE WHEN c.colour = 'Blue' THEN 1 END) AS FLOAT) / COUNT(*) * 100) AS blue_female_percentage\nFROM \n    superhero s\nJOIN \n    gender g ON s.gender_id = g.id\nJOIN \n    colour c ON s.skin_colour_id = c.id\nWHERE \n    g.gender = 'Female';",
    "776": "SELECT \n    s.superhero_name, \n    r.race \nFROM \n    superhero s\nJOIN \n    race r ON s.race_id = r.id\nWHERE \n    s.full_name = 'Charles Chandler';",
    "777": "SELECT g.gender\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE s.superhero_name = 'Agent 13';",
    "778": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Adaptation';",
    "779": "SELECT COUNT(*) AS power_count\nFROM hero_power\nWHERE hero_id = (\n    SELECT id\n    FROM superhero\n    WHERE superhero_name = 'Amazo'\n);",
    "780": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.full_name = 'Hunter Zolomon';",
    "781": "SELECT s.height_cm\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE c.colour = 'Amber';",
    "782": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour c1 ON s.eye_colour_id = c1.id\nJOIN colour c2 ON s.hair_colour_id = c2.id\nWHERE c1.colour = 'Black' AND c2.colour = 'Black';",
    "783": "SELECT DISTINCT c.colour AS eye_colour\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold');",
    "784": "SELECT s.full_name\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE r.race = 'Vampire';",
    "785": "SELECT s.superhero_name\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nWHERE a.alignment = 'Neutral';",
    "786": "SELECT COUNT(DISTINCT hero_id) AS num_heroes_with_max_strength\nFROM hero_attribute\nWHERE attribute_id = (\n    SELECT id FROM attribute WHERE attribute_name = 'Strength'\n)\nAND attribute_value = (\n    SELECT MAX(attribute_value) \n    FROM hero_attribute \n    WHERE attribute_id = (\n        SELECT id FROM attribute WHERE attribute_name = 'Strength'\n    )\n);",
    "787": "SELECT \n    r.race AS race,\n    a.alignment AS alignment\nFROM \n    superhero s\nJOIN \n    race r ON s.race_id = r.id\nJOIN \n    alignment a ON s.alignment_id = a.id\nWHERE \n    s.superhero_name = 'Cameron Hicks';",
    "788": "SELECT \n    (CAST(COUNT(female_heroes.id) AS FLOAT) / total_heroes.count) * 100 AS female_percentage\nFROM \n    superhero AS female_heroes\nJOIN \n    gender ON female_heroes.gender_id = gender.id\nJOIN \n    publisher ON female_heroes.publisher_id = publisher.id\nJOIN \n    (SELECT COUNT(id) AS count \n     FROM superhero \n     WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS total_heroes\nWHERE \n    gender.gender = 'Female' \n    AND publisher.publisher_name = 'Marvel Comics';",
    "789": "SELECT AVG(weight_kg) AS average_weight\nFROM superhero\nWHERE race_id = (\n    SELECT id\n    FROM race\n    WHERE race = 'Alien'\n);",
    "790": "SELECT \n    (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') -\n    (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;",
    "791": "SELECT AVG(height_cm) AS average_height\nFROM superhero;",
    "792": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Abomination';",
    "793": "SELECT COUNT(*) AS male_god_eternal_superheroes\nFROM superhero\nWHERE race_id = 21 AND gender_id = 1;",
    "794": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
    "795": "SELECT COUNT(*) AS neutral_superheroes_count\nFROM superhero\nWHERE alignment_id = 3;",
    "796": "SELECT \n    a.attribute_name, \n    ha.attribute_value\nFROM \n    superhero s\nJOIN \n    hero_attribute ha ON s.id = ha.hero_id\nJOIN \n    attribute a ON ha.attribute_id = a.id\nWHERE \n    s.superhero_name = '3-D Man';",
    "797": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour e ON s.eye_colour_id = e.id\nJOIN colour h ON s.hair_colour_id = h.id\nWHERE e.colour = 'Blue' AND h.colour = 'Brown';",
    "798": "SELECT s.superhero_name, p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
    "799": "SELECT COUNT(*) AS superheroes_without_publisher\nFROM superhero\nWHERE publisher_id IS NULL;",
    "800": "SELECT \n    (CAST(COUNT(s.id) AS FLOAT) / (SELECT COUNT(*) FROM superhero) * 100) AS blue_eyes_percentage\nFROM \n    superhero s\nJOIN \n    colour c ON s.eye_colour_id = c.id\nWHERE \n    c.colour = 'Blue';",
    "801": "WITH gender_counts AS (\n    SELECT \n        g.gender,\n        COUNT(s.id) AS count\n    FROM \n        superhero s\n    JOIN \n        gender g ON s.gender_id = g.id\n    WHERE \n        g.gender IN ('Male', 'Female')\n    GROUP BY \n        g.gender\n)\nSELECT \n    (SELECT count FROM gender_counts WHERE gender = 'Male') * 1.0 /\n    (SELECT count FROM gender_counts WHERE gender = 'Female') AS male_to_female_ratio;",
    "802": "SELECT superhero_name\nFROM superhero\nWHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
    "803": "SELECT id FROM superpower WHERE power_name = 'cryokinesis';",
    "804": "SELECT superhero_name FROM superhero WHERE id = 294;",
    "805": "SELECT full_name\nFROM superhero\nWHERE weight_kg IS NULL OR weight_kg = 0;",
    "806": "SELECT colour.colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.full_name = 'Karen Beecher-Duncan';",
    "807": "SELECT sp.power_name\nFROM superhero AS sh\nJOIN hero_power AS hp ON sh.id = hp.hero_id\nJOIN superpower AS sp ON hp.power_id = sp.id\nWHERE sh.full_name = 'Helen Parr';",
    "808": "SELECT race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",
    "809": "SELECT publisher.publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero.id = 38;",
    "810": "SELECT r.race\nFROM hero_attribute ha\nJOIN superhero s ON ha.hero_id = s.id\nJOIN race r ON s.race_id = r.id\nWHERE ha.attribute_value = (\n    SELECT MAX(attribute_value)\n    FROM hero_attribute\n);",
    "811": "SELECT \n    a.alignment AS alignment,\n    sp.power_name AS superpower\nFROM \n    superhero s\nJOIN \n    alignment a ON s.alignment_id = a.id\nJOIN \n    hero_power hp ON s.id = hp.hero_id\nJOIN \n    superpower sp ON hp.power_id = sp.id\nWHERE \n    s.superhero_name = 'Atom IV';",
    "812": "SELECT s.full_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE c.colour = 'Blue'\nLIMIT 5;",
    "813": "SELECT AVG(ha.attribute_value) AS average_attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE s.alignment_id = 3;",
    "814": "SELECT DISTINCT c.colour AS skin_colour\nFROM hero_attribute ha\nJOIN superhero s ON ha.hero_id = s.id\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE ha.attribute_value = 100;",
    "815": "SELECT COUNT(*)\nFROM superhero\nWHERE alignment_id = 1\n  AND gender_id = 2;",
    "816": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_value BETWEEN 75 AND 80;",
    "817": "SELECT race.race\nFROM superhero\nJOIN colour ON superhero.hair_colour_id = colour.id\nJOIN gender ON superhero.gender_id = gender.id\nJOIN race ON superhero.race_id = race.id\nWHERE colour.colour = 'blue' AND gender.gender = 'male';",
    "818": "SELECT \n    (CAST(SUM(CASE WHEN s.gender_id = 2 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(s.id)) * 100.0 AS female_percentage\nFROM \n    superhero s\nWHERE \n    s.alignment_id = 2;",
    "819": "SELECT \n    (SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) - \n     SUM(CASE WHEN s.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference\nFROM \n    superhero s\nWHERE \n    (s.weight_kg = 0 OR s.weight_kg IS NULL);",
    "820": "SELECT ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';",
    "821": "SELECT sp.power_name\nFROM superhero AS sh\nJOIN hero_power AS hp ON sh.id = hp.hero_id\nJOIN superpower AS sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Ajax';",
    "822": "SELECT COUNT(*) AS green_skinned_villains\nFROM superhero\nWHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green')\n  AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');",
    "823": "SELECT COUNT(*)\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE gender.gender = 'Female'\n  AND publisher.publisher_name = 'Marvel Comics';",
    "824": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Wind Control'\nORDER BY s.superhero_name ASC;",
    "825": "SELECT g.gender\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN gender g ON s.gender_id = g.id\nWHERE sp.power_name = 'Phoenix Force';",
    "826": "SELECT s.superhero_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'DC Comics'\nORDER BY s.weight_kg DESC\nLIMIT 1;",
    "827": "SELECT AVG(s.height_cm) AS average_height\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE r.race <> 'Human'\n  AND p.publisher_name = 'Dark Horse Comics';",
    "828": "SELECT COUNT(DISTINCT ha.hero_id) AS fastest_superheroes_count\nFROM hero_attribute ha\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100;",
    "829": "SELECT \n    (dc_count - marvel_count) AS difference\nFROM \n    (SELECT \n        (SELECT COUNT(*) FROM superhero s\n         JOIN publisher p ON s.publisher_id = p.id\n         WHERE p.publisher_name = 'DC Comics') AS dc_count,\n        (SELECT COUNT(*) FROM superhero s\n         JOIN publisher p ON s.publisher_id = p.id\n         WHERE p.publisher_name = 'Marvel Comics') AS marvel_count\n    );",
    "830": "SELECT a.attribute_name\nFROM hero_attribute ha\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE ha.hero_id = (\n    SELECT id FROM superhero WHERE superhero_name = 'Black Panther'\n)\nORDER BY ha.attribute_value ASC\nLIMIT 1;",
    "831": "SELECT colour.colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.superhero_name = 'Abomination';",
    "832": "SELECT superhero_name\nFROM superhero\nWHERE height_cm = (SELECT MAX(height_cm) FROM superhero);",
    "833": "SELECT superhero_name\nFROM superhero\nWHERE full_name = 'Charles Chandler';",
    "834": "WITH george_lucas_publisher AS (\n    SELECT id FROM publisher WHERE publisher_name = 'George Lucas'\n),\ntotal_superheroes AS (\n    SELECT COUNT(*) AS total_count\n    FROM superhero\n    WHERE publisher_id = (SELECT id FROM george_lucas_publisher)\n),\nfemale_superheroes AS (\n    SELECT COUNT(*) AS female_count\n    FROM superhero\n    WHERE publisher_id = (SELECT id FROM george_lucas_publisher)\n    AND gender_id = (SELECT id FROM gender WHERE gender = 'Female')\n)\nSELECT \n    (CAST(female_count AS FLOAT) / total_count) * 100.0 AS female_percentage\nFROM \n    total_superheroes, female_superheroes;",
    "835": "WITH marvel_publisher AS (\n    SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'\n),\ntotal_marvel_superheroes AS (\n    SELECT COUNT(*) AS total_count\n    FROM superhero\n    WHERE publisher_id = (SELECT id FROM marvel_publisher)\n),\ngood_marvel_superheroes AS (\n    SELECT COUNT(*) AS good_count\n    FROM superhero\n    WHERE publisher_id = (SELECT id FROM marvel_publisher)\n    AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Good')\n)\nSELECT \n    (CAST(good_count AS FLOAT) / total_count) * 100.0 AS good_percentage\nFROM \n    total_marvel_superheroes, good_marvel_superheroes;",
    "836": "SELECT COUNT(*) \nFROM superhero \nWHERE full_name LIKE 'John%';",
    "837": "SELECT hero_id\nFROM hero_attribute\nWHERE attribute_value = (\n    SELECT MIN(attribute_value)\n    FROM hero_attribute\n);",
    "838": "SELECT full_name\nFROM superhero\nWHERE superhero_name = 'Alien';",
    "839": "SELECT s.full_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.weight_kg < 100\nAND c.colour = 'Brown';",
    "840": "SELECT ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE s.superhero_name = 'Aquababy';",
    "841": "SELECT s.weight_kg, r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.id = 40;",
    "842": "SELECT AVG(height_cm) AS average_height\nFROM superhero\nWHERE alignment_id = (\n    SELECT id FROM alignment WHERE alignment = 'neutral'\n);",
    "843": "SELECT hero_power.hero_id\nFROM hero_power\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Intelligence';",
    "844": "SELECT colour.colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.superhero_name = 'Blackwulf';",
    "845": "SELECT DISTINCT sp.power_name\nFROM superhero AS sh\nJOIN hero_power AS hp ON sh.id = hp.hero_id\nJOIN superpower AS sp ON hp.power_id = sp.id\nWHERE sh.height_cm > (\n    SELECT AVG(height_cm) * 0.8\n    FROM superhero\n);",
    "846": "SELECT d.driverRef\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 20\nORDER BY q.q1 DESC\nLIMIT 5;",
    "847": "SELECT d.surname\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 19\nAND q.q2 = (\n    SELECT MIN(q2)\n    FROM qualifying\n    WHERE raceId = 19\n    AND q2 IS NOT NULL\n)\nLIMIT 1;",
    "848": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.location = 'Shanghai';",
    "849": "SELECT races.url\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.name = 'Circuit de Barcelona-Catalunya';",
    "850": "SELECT races.name\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Germany';",
    "851": "SELECT \n    circuits.name AS circuitName,\n    results.position AS position\nFROM \n    results\nJOIN \n    constructors ON results.constructorId = constructors.constructorId\nJOIN \n    races ON results.raceId = races.raceId\nJOIN \n    circuits ON races.circuitId = circuits.circuitId\nWHERE \n    constructors.name = 'Renault';",
    "852": "To determine how many races in the year 2010 were held on Grand Prix circuits outside Asia and Europe, we need to follow these steps:\n\n1. Identify the countries that are in Asia and Europe.\n2. Select races from the year 2010.\n3. Exclude races held in countries located in Asia and Europe.\n\nHere's the SQL query to achieve this:\n\n```sqlite\nSELECT COUNT(*) AS race_count\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2010\nAND c.country NOT IN (\n    'Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Cambodia', 'China', 'Cyprus', \n    'Georgia', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', \n    'Laos', 'Lebanon', 'Malaysia', 'Maldives', 'Mongolia', 'Myanmar', 'Nepal', 'North Korea', 'Oman', 'Pakistan', \n    'Palestine', 'Philippines', 'Qatar', 'Saudi Arabia', 'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Taiwan', \n    'Tajikistan', 'Thailand', 'Timor-Leste', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', \n    'Yemen', 'Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', \n    'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', \n    'Italy', 'Kosovo', 'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malta', 'Moldova', 'Monaco', 'Montenegro', \n    'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia', 'San Marino', 'Serbia', \n    'Slovakia', 'Slovenia', 'Spain', 'Sw",
    "853": "SELECT races.name\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Spain';",
    "854": "SELECT circuits.lat, circuits.lng\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.name = 'Australian Grand Prix';",
    "855": "SELECT races.*\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.name = 'Sepang International Circuit';",
    "856": "SELECT r.time\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Sepang International Circuit';",
    "857": "SELECT circuits.lat, circuits.lng\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.name = 'Abu Dhabi Grand Prix';",
    "858": "SELECT constructors.country\nFROM constructorResults\nJOIN constructors ON constructorResults.constructorId = constructors.constructorId\nWHERE constructorResults.raceId = 24 AND constructorResults.points = 1;",
    "859": "SELECT q1\nFROM qualifying\nJOIN drivers ON qualifying.driverId = drivers.driverId\nWHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354;",
    "860": "SELECT d.nationality\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 355 AND q.q2 = '0:01:40';",
    "861": "SELECT number\nFROM qualifying\nWHERE raceId = 903 AND q3 = '0:01:54';",
    "862": "SELECT COUNT(*)\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2007 AND name = 'Bahrain Grand Prix'\n) AND time IS NULL;",
    "863": "SELECT s.url\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;",
    "864": "SELECT COUNT(*) AS finished_drivers\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE date = '2015-11-29'\n)\nAND statusId = (\n    SELECT statusId\n    FROM status\n    WHERE status = 'Finished'\n);",
    "865": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 592 AND r.time IS NOT NULL\nORDER BY d.dob ASC\nLIMIT 1;",
    "866": "SELECT d.url\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE lt.raceId = 161\n  AND lt.time = '0:01:27';",
    "867": "SELECT d.nationality\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 933\nORDER BY CAST(r.fastestLapSpeed AS REAL) DESC\nLIMIT 1;",
    "868": "SELECT circuits.lat, circuits.lng\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.name = 'Malaysian Grand Prix';",
    "869": "SELECT c.url\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 9\nORDER BY cr.points DESC\nLIMIT 1;",
    "870": "SELECT q.q1\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE d.forename = 'Lucas' AND d.surname = 'di Grassi' AND q.raceId = 345;",
    "871": "SELECT d.nationality\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 347 AND q.q2 = '0:01:15';",
    "872": "SELECT d.code\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 45\nAND q.q3 = '0:01:33';",
    "873": "SELECT r.time\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE d.forename = 'Bruce' AND d.surname = 'McLaren' AND r.raceId = 743;",
    "874": "SELECT d.forename, d.surname\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2006\n  AND ra.name = 'San Marino Grand Prix'\n  AND r.position = 2;",
    "875": "SELECT seasons.url\nFROM races\nJOIN seasons ON races.year = seasons.year\nWHERE races.raceId = 901;",
    "876": "SELECT COUNT(DISTINCT results.driverId) AS non_finishers\nFROM results\nJOIN races ON results.raceId = races.raceId\nJOIN status ON results.statusId = status.statusId\nWHERE races.date = '2015-11-29'\nAND status.status != 'Finished';",
    "877": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 872 AND r.time IS NOT NULL\nORDER BY d.dob DESC\nLIMIT 1;",
    "878": "SELECT d.forename || ' ' || d.surname AS full_name\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE lt.raceId = 348\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "879": "SELECT d.nationality\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.fastestLapSpeed = (\n    SELECT MAX(CAST(fastestLapSpeed AS REAL))\n    FROM results\n);",
    "880": "WITH di_resta_id AS (\n    SELECT driverId\n    FROM drivers\n    WHERE forename = 'Paul' AND surname = 'di Resta'\n),\nfastest_speeds AS (\n    SELECT raceId, fastestLapSpeed\n    FROM results\n    WHERE driverId = (SELECT driverId FROM di_resta_id) AND raceId IN (853, 854)\n)\nSELECT \n    ((\n        (SELECT fastestLapSpeed FROM fastest_speeds WHERE raceId = 853) - \n        (SELECT fastestLapSpeed FROM fastest_speeds WHERE raceId = 854)\n    ) * 100.0 / \n    (SELECT fastestLapSpeed FROM fastest_speeds WHERE raceId = 853)\n    ) AS percentage_faster\n;",
    "881": "SELECT \n    (COUNT(CASE WHEN r.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS completion_rate\nFROM \n    results r\nJOIN \n    races ra ON r.raceId = ra.raceId\nWHERE \n    ra.date = '1983-07-16';",
    "882": "SELECT MIN(year) AS first_singapore_gp_year\nFROM races\nWHERE name = 'Singapore Grand Prix';",
    "883": "SELECT name\nFROM races\nWHERE year = 2005\nORDER BY name DESC;",
    "884": "SELECT name\nFROM races\nWHERE strftime('%Y-%m', date) = (\n    SELECT strftime('%Y-%m', MIN(date))\n    FROM races\n);",
    "885": "SELECT name, date\nFROM races\nWHERE year = 1999\n  AND round = (SELECT MAX(round) FROM races WHERE year = 1999);",
    "886": "SELECT year, COUNT(*) AS race_count\nFROM races\nGROUP BY year\nORDER BY race_count DESC\nLIMIT 1;",
    "887": "SELECT r2017.name\nFROM races r2017\nWHERE r2017.year = 2017\nAND r2017.name NOT IN (\n    SELECT r2000.name\n    FROM races r2000\n    WHERE r2000.year = 2000\n);",
    "888": "SELECT \n    c.country, \n    c.name AS circuit_name, \n    c.location\nFROM \n    races r\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    r.year = (SELECT MIN(year) FROM races WHERE name = 'European Grand Prix')\n    AND r.name = 'European Grand Prix';",
    "889": "SELECT MAX(r.year) AS last_season\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Brands Hatch' AND r.name = 'British Grand Prix';",
    "890": "SELECT COUNT(DISTINCT r.year) AS seasons_hosted\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Silverstone Circuit' AND r.name = 'British Grand Prix';",
    "891": "SELECT d.forename, d.surname\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2010 AND ra.name = 'Singapore Grand Prix'\nORDER BY r.position;",
    "892": "SELECT \n    drivers.forename || ' ' || drivers.surname AS full_name,\n    SUM(results.points) AS total_points\nFROM \n    results\nJOIN \n    drivers ON results.driverId = drivers.driverId\nGROUP BY \n    results.driverId\nORDER BY \n    total_points DESC\nLIMIT 1;",
    "893": "SELECT d.forename || ' ' || d.surname AS driverName, r.points\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2017 AND ra.name = 'Chinese Grand Prix'\nORDER BY r.points DESC\nLIMIT 3;",
    "894": "SELECT \n    drivers.forename || ' ' || drivers.surname AS driver_name,\n    races.name AS race_name,\n    lapTimes.time AS best_lap_time\nFROM \n    lapTimes\nJOIN \n    drivers ON lapTimes.driverId = drivers.driverId\nJOIN \n    races ON lapTimes.raceId = races.raceId\nWHERE \n    lapTimes.milliseconds = (\n        SELECT MIN(milliseconds) FROM lapTimes\n    );",
    "895": "SELECT AVG(lt.milliseconds) AS average_lap_time\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nJOIN races r ON lt.raceId = r.raceId\nWHERE d.forename = 'Lewis' \n  AND d.surname = 'Hamilton'\n  AND r.year = 2009\n  AND r.name = 'Malaysian Grand Prix';",
    "896": "WITH HamiltonDriverId AS (\n    SELECT driverId\n    FROM drivers\n    WHERE surname = 'Hamilton'\n),\nHamiltonRaces AS (\n    SELECT r.raceId\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE r.driverId = (SELECT driverId FROM HamiltonDriverId)\n    AND ra.year >= 2010\n),\nNonFirstPlaceRaces AS (\n    SELECT COUNT(*) AS nonFirstCount\n    FROM results\n    WHERE driverId = (SELECT driverId FROM HamiltonDriverId)\n    AND raceId IN (SELECT raceId FROM HamiltonRaces)\n    AND position != 1\n),\nTotalRaces AS (\n    SELECT COUNT(*) AS totalCount\n    FROM HamiltonRaces\n)\nSELECT \n    (SELECT nonFirstCount FROM NonFirstPlaceRaces) * 100.0 / (SELECT totalCount FROM TotalRaces) AS percentage\n;",
    "897": "SELECT \n    d.forename || ' ' || d.surname AS fullName,\n    d.nationality,\n    MAX(ds.points) AS maxPoints\nFROM \n    driverStandings ds\nJOIN \n    drivers d ON ds.driverId = d.driverId\nGROUP BY \n    ds.driverId\nORDER BY \n    SUM(ds.wins) DESC\nLIMIT 1;",
    "898": "SELECT forename || ' ' || surname AS name, \n       (strftime('%Y', 'now') - strftime('%Y', dob)) - \n       (strftime('%m-%d', 'now') < strftime('%m-%d', dob)) AS age\nFROM drivers\nWHERE nationality = 'Japanese'\nORDER BY age ASC\nLIMIT 1;",
    "899": "SELECT c.circuitId, c.circuitRef, c.name, c.location, c.country, c.lat, c.lng, c.alt, c.url\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nWHERE r.year BETWEEN 1990 AND 2000\nGROUP BY c.circuitId\nHAVING COUNT(r.raceId) = 4;",
    "900": "SELECT \n    circuits.name AS circuit_name,\n    circuits.location,\n    races.name AS race_name\nFROM \n    circuits\nJOIN \n    races ON circuits.circuitId = races.circuitId\nWHERE \n    circuits.country = 'USA' AND\n    races.year = 2006;",
    "901": "SELECT r.name AS race_name, c.name AS circuit_name, c.location\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE strftime('%Y', r.date) = '2005' AND strftime('%m', r.date) = '09';",
    "902": "SELECT r.*\nFROM results res\nJOIN drivers d ON res.driverId = d.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 20;",
    "903": "SELECT COUNT(*) AS wins\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN circuits c ON ra.circuitId = c.circuitId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE c.name = 'Sepang International Circuit'\n  AND d.forename = 'Michael'\n  AND d.surname = 'Schumacher'\n  AND r.position = 1;",
    "904": "SELECT r.name AS race, r.year\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nJOIN races r ON lt.raceId = r.raceId\nWHERE d.forename = 'Michael' AND d.surname = 'Schumacher'\nAND lt.milliseconds = (\n    SELECT MIN(milliseconds)\n    FROM lapTimes\n    WHERE driverId = d.driverId\n);",
    "905": "SELECT AVG(r.points) AS average_points\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.forename = 'Eddie' AND d.surname = 'Irvine' AND ra.year = 2000;",
    "906": "SELECT r.year, r.name AS race_name, res.points\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY r.year, r.round\nLIMIT 1;",
    "907": "SELECT races.name, circuits.country\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.year = 2017\nORDER BY races.date;",
    "908": "SELECT r.name AS race_name, r.year, c.location, SUM(res.laps) AS total_laps\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nGROUP BY r.raceId\nORDER BY total_laps DESC\nLIMIT 1;",
    "909": "SELECT \n    (CAST(SUM(CASE WHEN country = 'Germany' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_in_germany\nFROM \n    races\nJOIN \n    circuits ON races.circuitId = circuits.circuitId\nWHERE \n    races.name = 'European Grand Prix';",
    "910": "SELECT lat, lng\nFROM circuits\nWHERE name = 'Silverstone Circuit';",
    "911": "SELECT circuitRef, lat\nFROM circuits\nWHERE circuitRef IN ('silverstone', 'hockenheimring', 'hungaroring')\nORDER BY lat DESC\nLIMIT 1;",
    "912": "SELECT circuitRef \nFROM circuits \nWHERE name = 'Marina Bay Street Circuit';",
    "913": "SELECT country\nFROM circuits\nWHERE alt = (SELECT MAX(alt) FROM circuits);",
    "914": "SELECT COUNT(*) \nFROM drivers \nWHERE code IS NULL;",
    "915": "SELECT country\nFROM drivers\nWHERE dob = (SELECT MIN(dob) FROM drivers);",
    "916": "SELECT surname\nFROM drivers\nWHERE nationality = 'Italian';",
    "917": "SELECT url \nFROM drivers \nWHERE forename = 'Anthony' AND surname = 'Davidson';",
    "918": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';",
    "919": "SELECT circuits.name\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",
    "920": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Silverstone Circuit';",
    "921": "SELECT \n    races.raceId,\n    races.year,\n    races.round,\n    races.name AS raceName,\n    races.date,\n    races.time,\n    races.url AS raceUrl,\n    circuits.circuitId,\n    circuits.circuitRef,\n    circuits.name AS circuitName,\n    circuits.location,\n    circuits.country,\n    circuits.lat,\n    circuits.lng,\n    circuits.alt,\n    circuits.url AS circuitUrl\nFROM \n    races\nJOIN \n    circuits ON races.circuitId = circuits.circuitId\nWHERE \n    circuits.name = 'Silverstone';",
    "922": "SELECT r.time\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2010\nAND c.name = 'Abu Dhabi Circuit';",
    "923": "SELECT COUNT(*) AS number_of_races_in_italy\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Italy';",
    "924": "SELECT r.date\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Barcelona-Catalunya';",
    "925": "SELECT c.url\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';",
    "926": "SELECT MIN(fastestLapTime) AS fastest_lap_time\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';",
    "927": "SELECT d.forename, d.surname\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.fastestLapSpeed = (\n    SELECT MAX(fastestLapSpeed)\n    FROM results\n    WHERE fastestLapSpeed IS NOT NULL\n);",
    "928": "SELECT d.driverRef\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2007\n  AND ra.name = 'Canadian Grand Prix'\n  AND r.positionOrder = 1;",
    "929": "SELECT r.name, r.year, r.round, r.date, r.time, r.url\nFROM results res\nJOIN drivers d ON res.driverId = d.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "930": "SELECT r.name, r.year, r.round, r.date\nFROM results res\nJOIN drivers d ON res.driverId = d.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY res.rank ASC\nLIMIT 1;",
    "931": "SELECT MAX(CAST(fastestLapSpeed AS REAL)) AS max_fastestLapSpeed\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2009 AND name = 'Spanish Grand Prix'\n);",
    "932": "SELECT DISTINCT r.year\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "933": "SELECT r.positionOrder\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND ra.year = 2008 AND ra.name = 'Chinese Grand Prix';",
    "934": "SELECT d.forename, d.surname\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 1989\n  AND ra.name = 'Australian Grand Prix'\n  AND r.grid = 4;",
    "935": "SELECT COUNT(*) AS finished_drivers\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2008 AND name = 'Australian Grand Prix'\n) AND time IS NOT NULL;",
    "936": "SELECT lt.lap, lt.time\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE r.year = 2008\n  AND r.name = 'Australian Grand Prix'\n  AND d.forename = 'Lewis'\n  AND d.surname = 'Hamilton'\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "937": "SELECT r.time\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2008\n  AND ra.name = 'Chinese Grand Prix'\n  AND r.rank = 2;",
    "938": "SELECT d.forename, d.surname, d.url\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2008\n  AND ra.name = 'Australian Grand Prix'\n  AND r.positionOrder = 1;",
    "939": "SELECT COUNT(DISTINCT d.driverId) AS BritishDriversCount\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE r.year = 2008\n  AND r.name = 'Australian Grand Prix'\n  AND d.nationality = 'British';",
    "940": "SELECT COUNT(DISTINCT r.driverId) AS drivers_participated\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2008\n  AND ra.name = 'Chinese Grand Prix'\n  AND r.time IS NOT NULL\n  AND r.driverId IN (\n    SELECT driverId\n    FROM results\n    GROUP BY driverId\n    HAVING COUNT(raceId) > 0\n  );",
    "941": "SELECT SUM(points) AS total_points\nFROM results\nWHERE driverId = (\n    SELECT driverId\n    FROM drivers\n    WHERE forename = 'Lewis' AND surname = 'Hamilton'\n);",
    "942": "WITH HamiltonFastestLaps AS (\n    SELECT \n        fastestLapTime\n    FROM \n        results\n    JOIN \n        drivers ON results.driverId = drivers.driverId\n    WHERE \n        drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'\n        AND fastestLapTime IS NOT NULL\n),\nConvertedTimes AS (\n    SELECT \n        (CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS INTEGER) * 60) +\n        CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL) AS fastestLapInSeconds\n    FROM \n        HamiltonFastestLaps\n)\nSELECT \n    AVG(fastestLapInSeconds) AS averageFastestLapTimeInSeconds\nFROM \n    ConvertedTimes;",
    "943": "WITH race_info AS (\n    SELECT raceId\n    FROM races\n    WHERE year = 2008 AND name = 'Australian Grand Prix'\n),\ncompletion_stats AS (\n    SELECT \n        COUNT(*) AS total_drivers,\n        COUNT(CASE WHEN time IS NOT NULL THEN 1 END) AS completed_drivers\n    FROM results\n    WHERE raceId = (SELECT raceId FROM race_info)\n)\nSELECT \n    (CAST(completed_drivers AS REAL) / total_drivers) AS completion_rate\nFROM completion_stats;",
    "944": "WITH race_info AS (\n    SELECT raceId\n    FROM races\n    WHERE year = 2008 AND name = 'Australian Grand Prix'\n),\nchampion_time AS (\n    SELECT r.milliseconds AS champion_milliseconds\n    FROM results r\n    JOIN race_info ri ON r.raceId = ri.raceId\n    WHERE r.positionOrder = 1\n),\nlast_driver_time AS (\n    SELECT r.milliseconds AS last_driver_milliseconds\n    FROM results r\n    JOIN race_info ri ON r.raceId = ri.raceId\n    WHERE r.milliseconds IS NOT NULL\n    ORDER BY r.positionOrder DESC\n    LIMIT 1\n)\nSELECT \n    ((last_driver_milliseconds - champion_milliseconds) * 100.0 / last_driver_milliseconds) AS percentage_faster\nFROM champion_time, last_driver_time;",
    "945": "SELECT COUNT(*) \nFROM circuits \nWHERE location = 'Adelaide' AND country = 'Australia';",
    "946": "SELECT lat, lng\nFROM circuits\nWHERE country = 'USA';",
    "947": "SELECT COUNT(driverId) \nFROM drivers \nWHERE nationality = 'British' \nAND dob > '1980-12-31';",
    "948": "SELECT MAX(cr.points) AS max_points\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE c.nationality = 'British';",
    "949": "SELECT c.name, SUM(cr.points) AS total_points\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nGROUP BY c.constructorId\nORDER BY total_points DESC\nLIMIT 1;",
    "950": "SELECT c.name\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 291 AND cr.points = 0;",
    "951": "SELECT COUNT(DISTINCT cr.constructorId) AS num_japanese_constructors\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nWHERE c.nationality = 'Japanese'\n  AND cr.points = 0\nGROUP BY cr.constructorId\nHAVING COUNT(cr.raceId) = 2;",
    "952": "SELECT DISTINCT c.name\nFROM constructorStandings cs\nJOIN constructors c ON cs.constructorId = c.constructorId\nWHERE cs.position = 1;",
    "953": "SELECT COUNT(DISTINCT constructors.constructorId) AS FrenchConstructorsWithLapsOver50\nFROM constructors\nJOIN results ON constructors.constructorId = results.constructorId\nJOIN lapTimes ON results.raceId = lapTimes.raceId AND results.driverId = lapTimes.driverId\nWHERE constructors.nationality = 'French' AND lapTimes.lap > 50;",
    "954": "SELECT \n    (CAST(COUNT(r1.resultId) AS FLOAT) / COUNT(r2.resultId)) * 100 AS completion_percentage\nFROM \n    results r1\nJOIN \n    drivers d ON r1.driverId = d.driverId\nJOIN \n    races ra ON r1.raceId = ra.raceId\nLEFT JOIN \n    results r2 ON r1.driverId = r2.driverId AND r1.raceId = r2.raceId\nWHERE \n    d.nationality = 'Japanese' \n    AND ra.year BETWEEN 2007 AND 2009\n    AND r1.time IS NOT NULL\nGROUP BY \n    d.driverId;",
    "955": "WITH champion_times AS (\n    SELECT \n        r.year,\n        CAST(SUBSTR(res.time, 1, 2) AS INTEGER) * 3600 + \n        CAST(SUBSTR(res.time, 4, 2) AS INTEGER) * 60 + \n        CAST(SUBSTR(res.time, 7) AS INTEGER) + \n        CAST(SUBSTR(res.time, 10) AS REAL) / 1000.0 AS time_in_seconds\n    FROM \n        results res\n    JOIN \n        races r ON res.raceId = r.raceId\n    WHERE \n        res.position = 1\n        AND r.year < 1975\n        AND res.time IS NOT NULL\n)\nSELECT \n    year,\n    AVG(time_in_seconds) AS average_champion_time_seconds\nFROM \n    champion_times\nGROUP BY \n    year;",
    "956": "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE d.dob > '1975-12-31' AND r.rank = 2;",
    "957": "SELECT COUNT(DISTINCT d.driverId) AS ItalianDriversNotFinished\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE d.nationality = 'Italian' AND r.time IS NULL;",
    "958": "SELECT d.forename, d.surname\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.fastestLapTime = (\n    SELECT MIN(fastestLapTime)\n    FROM results\n    WHERE fastestLapTime IS NOT NULL\n);",
    "959": "WITH Champion AS (\n    SELECT ds.driverId\n    FROM driverStandings ds\n    JOIN races r ON ds.raceId = r.raceId\n    WHERE r.year = 2009\n    ORDER BY ds.points DESC, ds.wins DESC\n    LIMIT 1\n)\nSELECT lt.lap\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nWHERE r.year = 2009\nAND lt.driverId = (SELECT driverId FROM Champion)\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "960": "SELECT AVG(CAST(fastestLapSpeed AS REAL)) AS average_fastest_lap_speed\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2009 AND name = 'Spanish Grand Prix'\n);",
    "961": "SELECT r.name, r.year\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nWHERE res.milliseconds = (\n    SELECT MIN(milliseconds)\n    FROM results\n    WHERE milliseconds IS NOT NULL\n)\nLIMIT 1;",
    "962": "WITH eligible_drivers AS (\n    SELECT DISTINCT r.driverId\n    FROM results r\n    JOIN drivers d ON r.driverId = d.driverId\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE strftime('%Y', d.dob) < '1985'\n      AND ra.year BETWEEN 2000 AND 2005\n      AND r.laps > 50\n),\ntotal_drivers AS (\n    SELECT DISTINCT r.driverId\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE ra.year BETWEEN 2000 AND 2005\n)\nSELECT \n    (COUNT(ed.driverId) * 1.0 / COUNT(td.driverId)) * 100 AS percentage\nFROM eligible_drivers ed\nJOIN total_drivers td ON ed.driverId = td.driverId;",
    "963": "SELECT COUNT(DISTINCT lt.driverId) AS FrenchDriversUnderTwoMinutes\nFROM drivers d\nJOIN lapTimes lt ON d.driverId = lt.driverId\nWHERE d.nationality = 'French'\nAND lt.milliseconds < 120000;",
    "964": "SELECT code\nFROM drivers\nWHERE nationality = 'America';",
    "965": "SELECT raceId FROM races WHERE year = 2009;",
    "966": "SELECT COUNT(DISTINCT driverId) AS numberOfDrivers\nFROM results\nWHERE raceId = 18;",
    "967": "SELECT driverId, nationality\nFROM drivers\nORDER BY dob DESC\nLIMIT 3;",
    "968": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';",
    "969": "SELECT COUNT(driverId) \nFROM drivers \nWHERE nationality = 'British' \nAND strftime('%Y', dob) = '1980';",
    "970": "SELECT d.driverId, d.forename, d.surname, MIN(lt.time) AS earliest_lap_time\nFROM drivers d\nJOIN lapTimes lt ON d.driverId = lt.driverId\nWHERE d.nationality = 'German'\n  AND d.dob BETWEEN '1980-01-01' AND '1990-12-31'\nGROUP BY d.driverId\nORDER BY earliest_lap_time\nLIMIT 3;",
    "971": "SELECT driverRef\nFROM drivers\nWHERE nationality = 'German'\nORDER BY dob ASC\nLIMIT 1;",
    "972": "SELECT d.driverId, d.code\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE strftime('%Y', d.dob) = '1971'\n  AND r.fastestLapTime IS NOT NULL;",
    "973": "SELECT d.driverId, d.forename, d.surname, MAX(lt.time) AS latestLapTime\nFROM drivers d\nJOIN lapTimes lt ON d.driverId = lt.driverId\nWHERE d.nationality = 'Spanish' AND d.dob < '1982-01-01'\nGROUP BY d.driverId\nORDER BY latestLapTime DESC\nLIMIT 10;",
    "974": "SELECT r.year\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nWHERE res.fastestLapTime = (\n    SELECT MIN(fastestLapTime)\n    FROM results\n    WHERE fastestLapTime IS NOT NULL\n);",
    "975": "SELECT r.year\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nWHERE lt.milliseconds = (\n    SELECT MAX(milliseconds)\n    FROM lapTimes\n)\nLIMIT 1;",
    "976": "SELECT driverId\nFROM lapTimes\nWHERE lap = 1\nORDER BY milliseconds ASC\nLIMIT 5;",
    "977": "SELECT COUNT(*) AS disqualified_finishers\nFROM results\nWHERE raceId > 50 AND raceId < 100\nAND time IS NOT NULL\nAND statusId = 2;",
    "978": "SELECT location, lat, lng, COUNT(*) as count\nFROM circuits\nWHERE country = 'Austria'\nGROUP BY location, lat, lng;",
    "979": "SELECT raceId\nFROM results\nWHERE time IS NOT NULL\nGROUP BY raceId\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "980": "SELECT d.driverRef, d.nationality, d.dob\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 23 AND q.q2 IS NOT NULL;",
    "981": "SELECT \n    r.year,\n    r.name,\n    r.date,\n    r.time\nFROM \n    drivers d\nJOIN \n    qualifying q ON d.driverId = q.driverId\nJOIN \n    races r ON q.raceId = r.raceId\nWHERE \n    d.dob = (SELECT MAX(dob) FROM drivers)\nORDER BY \n    r.date ASC\nLIMIT 1;",
    "982": "SELECT COUNT(DISTINCT d.driverId) AS AmericanDriversWithPuncture\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN status s ON r.statusId = s.statusId\nWHERE d.nationality = 'American' AND s.status = 'Puncture';",
    "983": "SELECT c.name, c.url, SUM(cr.points) AS total_points\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nWHERE c.nationality = 'Italian'\nGROUP BY c.constructorId\nORDER BY total_points DESC\nLIMIT 1;",
    "984": "SELECT c.url\nFROM constructors c\nJOIN (\n    SELECT constructorId, SUM(wins) AS total_wins\n    FROM constructorStandings\n    GROUP BY constructorId\n    ORDER BY total_wins DESC\n    LIMIT 1\n) AS max_wins ON c.constructorId = max_wins.constructorId;",
    "985": "SELECT d.forename, d.surname, lt.time\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE r.name = 'French Grand Prix' AND lt.lap = 3\nORDER BY lt.milliseconds DESC\nLIMIT 1;",
    "986": "SELECT raceId, MIN(milliseconds) AS fastest_first_lap_time\nFROM lapTimes\nWHERE lap = 1\nGROUP BY raceId\nORDER BY fastest_first_lap_time\nLIMIT 1;",
    "987": "SELECT AVG(CAST(fastestLapTime AS REAL)) AS average_fastest_lap_time\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2006 AND name = 'United States Grand Prix'\n)\nAND positionOrder <= 10\nAND fastestLapTime IS NOT NULL;",
    "988": "SELECT d.forename || ' ' || d.surname AS full_name, \n       AVG(CAST(ps.duration AS REAL)) AS avg_duration\nFROM drivers d\nJOIN pitStops ps ON d.driverId = ps.driverId\nWHERE d.nationality = 'German'\n  AND d.dob BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY d.driverId\nORDER BY avg_duration ASC\nLIMIT 3;",
    "989": "SELECT d.forename || ' ' || d.surname AS champion, r.time AS finish_time\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2008\n  AND ra.name = 'Canadian Grand Prix'\n  AND r.position = 1;",
    "990": "SELECT constructors.constructorRef, constructors.url\nFROM results\nJOIN races ON results.raceId = races.raceId\nJOIN constructors ON results.constructorId = constructors.constructorId\nWHERE races.year = 2009 AND races.name = 'Singapore Grand Prix' AND results.position = 1;",
    "991": "SELECT forename || ' ' || surname AS full_name, dob\nFROM drivers\nWHERE nationality = 'Austrian'\n  AND strftime('%Y', dob) BETWEEN '1981' AND '1991';",
    "992": "SELECT \n    forename || ' ' || surname AS full_name,\n    url,\n    dob\nFROM \n    drivers\nWHERE \n    nationality = 'German'\n    AND strftime('%Y', dob) BETWEEN '1971' AND '1985'\nORDER BY \n    dob DESC;",
    "993": "SELECT location, country, lat, lng\nFROM circuits\nWHERE name = 'Hungaroring';",
    "994": "SELECT \n    constructors.name, \n    constructors.nationality, \n    SUM(constructorResults.points) AS total_points\nFROM \n    races\nJOIN \n    constructorResults ON races.raceId = constructorResults.raceId\nJOIN \n    constructors ON constructorResults.constructorId = constructors.constructorId\nWHERE \n    races.name = 'Monaco Grand Prix' \n    AND races.year BETWEEN 1980 AND 2010\nGROUP BY \n    constructorResults.constructorId\nORDER BY \n    total_points DESC\nLIMIT 1;",
    "995": "SELECT AVG(r.points) AS average_score\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nJOIN circuits c ON ra.circuitId = c.circuitId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND c.name = 'Turkish Grand Prix';",
    "996": "SELECT AVG(race_count) AS average_races_per_year\nFROM (\n    SELECT year, COUNT(*) AS race_count\n    FROM races\n    WHERE year BETWEEN 2000 AND 2009\n    GROUP BY year\n);",
    "997": "SELECT nationality\nFROM drivers\nGROUP BY nationality\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "998": "SELECT ds.wins\nFROM driverStandings ds\nWHERE ds.driverId = (\n    SELECT driverId\n    FROM driverStandings\n    ORDER BY points DESC\n    LIMIT 1 OFFSET 90\n);",
    "999": "SELECT r.name\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nWHERE res.fastestLapTime = (\n    SELECT MIN(fastestLapTime)\n    FROM results\n    WHERE fastestLapTime IS NOT NULL\n);",
    "1000": "SELECT circuits.location || ', ' || circuits.country AS full_location\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.date = (SELECT MAX(date) FROM races);",
    "1001": "SELECT d.forename || ' ' || d.surname AS full_name\nFROM qualifying q\nJOIN races r ON q.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nJOIN drivers d ON q.driverId = d.driverId\nWHERE c.name = 'Marina Bay Street Circuit'\n  AND r.year = 2008\n  AND q.position = 1\n  AND r.round = 3;",
    "1002": "WITH YoungestDriver AS (\n    SELECT driverId, forename || ' ' || surname AS fullName, nationality\n    FROM drivers\n    WHERE dob = (SELECT MAX(dob) FROM drivers)\n),\nFirstRace AS (\n    SELECT raceId, driverId\n    FROM results\n    WHERE driverId = (SELECT driverId FROM YoungestDriver)\n    ORDER BY raceId ASC\n    LIMIT 1\n)\nSELECT yd.fullName, yd.nationality, r.name AS raceName\nFROM YoungestDriver yd\nJOIN FirstRace fr ON yd.driverId = fr.driverId\nJOIN races r ON fr.raceId = r.raceId;",
    "1003": "SELECT driverId, COUNT(*) AS accident_count\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE name = 'Canadian Grand Prix'\n)\nAND statusId = 3\nGROUP BY driverId\nORDER BY accident_count DESC\nLIMIT 1;",
    "1004": "SELECT d.forename || ' ' || d.surname AS full_name, \n       SUM(ds.wins) AS total_wins\nFROM drivers d\nJOIN driverStandings ds ON d.driverId = ds.driverId\nWHERE d.dob = (SELECT MIN(dob) FROM drivers)\nGROUP BY d.driverId;",
    "1005": "SELECT MAX(duration) AS longest_pit_stop\nFROM pitStops;",
    "1006": "SELECT MIN(milliseconds) AS fastest_lap_time\nFROM lapTimes;",
    "1007": "SELECT MAX(p.duration) AS longest_pit_stop\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "1008": "SELECT ps.lap\nFROM pitStops ps\nJOIN races r ON ps.raceId = r.raceId\nJOIN drivers d ON ps.driverId = d.driverId\nWHERE r.year = 2011\n  AND r.name = 'Australian Grand Prix'\n  AND d.forename = 'Lewis'\n  AND d.surname = 'Hamilton';",
    "1009": "SELECT \n    d.forename || ' ' || d.surname AS driverName,\n    ps.stop,\n    ps.time AS pitStopTime,\n    ps.duration\nFROM \n    pitStops ps\nJOIN \n    races r ON ps.raceId = r.raceId\nJOIN \n    drivers d ON ps.driverId = d.driverId\nWHERE \n    r.year = 2011 AND r.name = 'Australian Grand Prix'\nORDER BY \n    d.surname, ps.stop;",
    "1010": "SELECT lt.raceId, lt.lap, lt.time\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "1011": "SELECT \n    d.forename || ' ' || d.surname AS full_name,\n    lt.time AS lap_time\nFROM \n    lapTimes lt\nJOIN \n    drivers d ON lt.driverId = d.driverId\nORDER BY \n    lt.milliseconds ASC\nLIMIT 20;",
    "1012": "SELECT \n    c.name AS circuitName,\n    r.name AS raceName,\n    res.fastestLap,\n    res.position\nFROM \n    drivers d\nJOIN \n    results res ON d.driverId = res.driverId\nJOIN \n    races r ON res.raceId = r.raceId\nJOIN \n    circuits c ON r.circuitId = c.circuitId\nWHERE \n    d.forename = 'Lewis' AND d.surname = 'Hamilton' AND\n    res.fastestLap = (\n        SELECT \n            MIN(res2.fastestLap)\n        FROM \n            results res2\n        WHERE \n            res2.raceId = res.raceId\n    );",
    "1013": "SELECT lt.time AS lap_record\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Austrian Grand Prix'\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "1014": "SELECT \n    c.name AS circuitName,\n    MIN(lt.time) AS lapRecord\nFROM \n    circuits c\nJOIN \n    races r ON c.circuitId = r.circuitId\nJOIN \n    lapTimes lt ON r.raceId = lt.raceId\nWHERE \n    c.country = 'Italy'\nGROUP BY \n    c.circuitId;",
    "1015": "SELECT r.name, r.year, r.date, lt.time AS lap_record\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.name = 'Austrian Grand Prix Circuit'\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "1016": "SELECT ps.duration\nFROM pitStops ps\nJOIN (\n    SELECT lt.raceId, lt.driverId, MIN(lt.milliseconds) AS lapRecord\n    FROM lapTimes lt\n    JOIN races r ON lt.raceId = r.raceId\n    JOIN circuits c ON r.circuitId = c.circuitId\n    WHERE c.name = 'Austrian Grand Prix Circuit'\n    GROUP BY lt.raceId, lt.driverId\n) AS lapRecordDriver\nON ps.raceId = lapRecordDriver.raceId AND ps.driverId = lapRecordDriver.driverId\nWHERE ps.raceId = lapRecordDriver.raceId\nORDER BY lapRecordDriver.lapRecord\nLIMIT 1;",
    "1017": "SELECT DISTINCT c.lat, c.lng\nFROM lapTimes lt\nJOIN races r ON lt.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE lt.time = '1:29.488';",
    "1018": "SELECT AVG(p.milliseconds) AS average_pit_stop_time\nFROM pitStops p\nJOIN drivers d ON p.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
    "1019": "SELECT AVG(lapTimes.milliseconds) AS average_lap_time\nFROM lapTimes\nJOIN races ON lapTimes.raceId = races.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Italy';",
    "1020": "SELECT pa.player_api_id\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating = (\n    SELECT MAX(overall_rating)\n    FROM Player_Attributes\n)\nLIMIT 1;",
    "1021": "SELECT player_name, height\nFROM Player\nWHERE height = (SELECT MAX(height) FROM Player);",
    "1022": "SELECT preferred_foot\nFROM Player_Attributes\nWHERE potential = (SELECT MIN(potential) FROM Player_Attributes);",
    "1023": "SELECT COUNT(*) \nFROM Player_Attributes \nWHERE overall_rating >= 60 \n  AND overall_rating <= 65 \n  AND defensive_work_rate = 'low';",
    "1024": "SELECT player_api_id\nFROM Player_Attributes\nORDER BY crossing DESC\nLIMIT 5;",
    "1025": "SELECT L.name\nFROM Match M\nJOIN League L ON M.league_id = L.id\nWHERE M.season = '2015/2016'\nGROUP BY M.league_id\nORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC\nLIMIT 1;",
    "1026": "SELECT \n    T.team_long_name AS home_team,\n    COUNT(M.id) AS losses\nFROM \n    Match M\nJOIN \n    Team T ON M.home_team_api_id = T.team_api_id\nWHERE \n    M.season = '2015/2016' AND \n    M.home_team_goal < M.away_team_goal\nGROUP BY \n    M.home_team_api_id\nORDER BY \n    losses ASC\nLIMIT 1;",
    "1027": "SELECT \n    Player.player_name\nFROM \n    Player_Attributes\nJOIN \n    Player ON Player_Attributes.player_api_id = Player.player_api_id\nORDER BY \n    Player_Attributes.penalties DESC\nLIMIT 10;",
    "1028": "SELECT \n    T.team_long_name\nFROM \n    Match M\nJOIN \n    League L ON M.league_id = L.id\nJOIN \n    Team T ON M.away_team_api_id = T.team_api_id\nWHERE \n    L.name = 'Scotland Premier League' \n    AND M.season = '2009/2010'\n    AND M.away_team_goal > M.home_team_goal\nGROUP BY \n    M.away_team_api_id\nORDER BY \n    COUNT(*) DESC\nLIMIT 1;",
    "1029": "SELECT team_api_id, buildUpPlaySpeed\nFROM Team_Attributes\nORDER BY buildUpPlaySpeed DESC\nLIMIT 4;",
    "1030": "SELECT L.name, COUNT(*) AS draw_count\nFROM Match M\nJOIN League L ON M.league_id = L.id\nWHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal\nGROUP BY L.name\nORDER BY draw_count DESC\nLIMIT 1;",
    "1031": "SELECT \n    p.player_name,\n    (strftime('%Y', 'now') - strftime('%Y', p.birthday)) - \n    (strftime('%m-%d', 'now') < strftime('%m-%d', p.birthday)) AS age\nFROM \n    Player_Attributes pa\nJOIN \n    Player p ON pa.player_api_id = p.player_api_id\nWHERE \n    pa.sprint_speed >= 97\n    AND pa.date BETWEEN '2013-01-01' AND '2015-12-31';",
    "1032": "SELECT \n    League.name AS league_name, \n    COUNT(Match.id) AS match_count\nFROM \n    Match\nJOIN \n    League ON Match.league_id = League.id\nGROUP BY \n    Match.league_id\nORDER BY \n    match_count DESC\nLIMIT 1;",
    "1033": "SELECT AVG(height) AS average_height\nFROM Player\nWHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';",
    "1034": "WITH AverageRating2010 AS (\n    SELECT AVG(overall_rating) AS avg_rating\n    FROM Player_Attributes\n    WHERE substr(date, 1, 4) = '2010'\n),\nAboveAverage2010 AS (\n    SELECT player_api_id, overall_rating\n    FROM Player_Attributes\n    WHERE substr(date, 1, 4) = '2010'\n    AND overall_rating > (SELECT avg_rating FROM AverageRating2010)\n),\nMaxAboveAverage2010 AS (\n    SELECT MAX(overall_rating) AS max_rating\n    FROM AboveAverage2010\n)\nSELECT player_api_id\nFROM AboveAverage2010\nWHERE overall_rating = (SELECT max_rating FROM MaxAboveAverage2010);",
    "1035": "SELECT team_fifa_api_id\nFROM Team_Attributes\nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;",
    "1036": "SELECT DISTINCT T.team_long_name\nFROM Team_Attributes TA\nJOIN Team T ON TA.team_api_id = T.team_api_id\nWHERE strftime('%Y', TA.date) = '2012'\nAND TA.buildUpPlayPassing > (\n    SELECT AVG(buildUpPlayPassing)\n    FROM Team_Attributes\n    WHERE strftime('%Y', date) = '2012'\n    AND buildUpPlayPassing IS NOT NULL\n);",
    "1037": "SELECT \n    (COUNT(CASE WHEN pa.preferred_foot = 'left' THEN 1 END) * 100.0) / COUNT(*) AS percentage_left_foot\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    strftime('%Y', p.birthday) BETWEEN '1987' AND '1992';",
    "1038": "SELECT \n    l.name AS league_name,\n    SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM \n    Match m\nJOIN \n    League l ON m.league_id = l.id\nGROUP BY \n    l.id\nORDER BY \n    total_goals ASC\nLIMIT 5;",
    "1039": "SELECT AVG(long_shots) AS average_long_shots\nFROM Player_Attributes\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Ahmed Samir Farag'\n);",
    "1040": "SELECT \n    p.player_name,\n    AVG(pa.heading_accuracy) AS avg_heading_accuracy\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    p.height > 180\nGROUP BY \n    p.player_api_id\nORDER BY \n    avg_heading_accuracy DESC\nLIMIT 10;",
    "1041": "SELECT \n    T.team_long_name, \n    TA.chanceCreationPassing\nFROM \n    Team_Attributes TA\nJOIN \n    Team T ON TA.team_api_id = T.team_api_id\nWHERE \n    TA.buildUpPlayDribblingClass = 'Normal'\n    AND TA.date >= '2014-01-01 00:00:00'\n    AND TA.date <= '2014-01-31 00:00:00'\nGROUP BY \n    TA.team_api_id\nHAVING \n    AVG(TA.chanceCreationPassing) > TA.chanceCreationPassing\nORDER BY \n    TA.chanceCreationPassing DESC;",
    "1042": "SELECT L.name\nFROM Match M\nJOIN League L ON M.league_id = L.id\nWHERE M.season = '2009/2010'\nGROUP BY L.name\nHAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);",
    "1043": "SELECT team_short_name\nFROM Team\nWHERE team_long_name = 'Queens Park Rangers';",
    "1044": "SELECT player_name\nFROM Player\nWHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10';",
    "1045": "SELECT pa.attacking_work_rate\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Franco Zennaro';",
    "1046": "SELECT ta.buildUpPlayPositioningClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'ADO Den Haag';",
    "1047": "SELECT pa.heading_accuracy\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francois Affolter'\nAND pa.date = '2014-09-18 00:00:00';",
    "1048": "SELECT pa.overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Gabriel Tamas'\n  AND strftime('%Y', pa.date) = '2011';",
    "1049": "SELECT COUNT(*) \nFROM Match \nWHERE season = '2015/2016' \nAND league_id = (\n    SELECT id \n    FROM League \n    WHERE name = 'Scotland Premier League'\n);",
    "1050": "SELECT p.preferred_foot\nFROM Player_Attributes p\nJOIN Player pl ON p.player_api_id = pl.player_api_id\nWHERE pl.birthday = (SELECT MAX(birthday) FROM Player);",
    "1051": "SELECT p.player_name, pa.potential\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);",
    "1052": "SELECT COUNT(DISTINCT p.player_api_id) AS left_footed_players_under_130\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.weight < 130 AND pa.preferred_foot = 'left';",
    "1053": "SELECT T.team_short_name\nFROM Team T\nJOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id\nWHERE TA.chanceCreationPassingClass = 'Risky';",
    "1054": "SELECT pa.defensive_work_rate\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'David Wilson';",
    "1055": "SELECT Player.birthday\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player_Attributes.overall_rating = (\n    SELECT MAX(overall_rating) FROM Player_Attributes\n)\nLIMIT 1;",
    "1056": "SELECT League.name\nFROM League\nJOIN Country ON League.country_id = Country.id\nWHERE Country.name = 'Netherlands';",
    "1057": "SELECT AVG(home_team_goal) AS average_home_team_goal\nFROM Match\nWHERE country_id = (\n    SELECT id FROM Country WHERE name = 'Poland'\n)\nAND season = '2010/2011';",
    "1058": "WITH PlayerHeights AS (\n    SELECT player_api_id, height\n    FROM Player\n),\nHighestPlayer AS (\n    SELECT player_api_id\n    FROM PlayerHeights\n    WHERE height = (SELECT MAX(height) FROM PlayerHeights)\n),\nShortestPlayer AS (\n    SELECT player_api_id\n    FROM PlayerHeights\n    WHERE height = (SELECT MIN(height) FROM PlayerHeights)\n),\nHighestPlayerFinishing AS (\n    SELECT AVG(finishing) AS avg_finishing\n    FROM Player_Attributes\n    WHERE player_api_id IN (SELECT player_api_id FROM HighestPlayer)\n),\nShortestPlayerFinishing AS (\n    SELECT AVG(finishing) AS avg_finishing\n    FROM Player_Attributes\n    WHERE player_api_id IN (SELECT player_api_id FROM ShortestPlayer)\n)\nSELECT \n    CASE \n        WHEN HighestPlayerFinishing.avg_finishing > ShortestPlayerFinishing.avg_finishing THEN 'Highest Player'\n        ELSE 'Shortest Player'\n    END AS player_with_highest_avg_finishing\nFROM HighestPlayerFinishing, ShortestPlayerFinishing;",
    "1059": "SELECT player_name\nFROM Player\nWHERE height > 180;",
    "1060": "SELECT COUNT(*) \nFROM Player \nWHERE strftime('%Y', birthday) > '1990';",
    "1061": "SELECT COUNT(*) \nFROM Player \nWHERE player_name LIKE 'Adam%' \nAND weight > 170;",
    "1062": "SELECT DISTINCT p.player_name\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating > 80\nAND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';",
    "1063": "SELECT pa.potential\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Aaron Doran';",
    "1064": "SELECT Player.player_name\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player_Attributes.preferred_foot = 'left';",
    "1065": "SELECT Team.team_long_name\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';",
    "1066": "SELECT ta.buildUpPlayPassingClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_short_name = 'CLB';",
    "1067": "SELECT T.team_short_name\nFROM Team T\nJOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id\nWHERE TA.buildUpPlayPassing > 70;",
    "1068": "SELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 170\nAND strftime('%Y', pa.date) BETWEEN '2010' AND '2015';",
    "1069": "SELECT player_name, height\nFROM Player\nWHERE height = (SELECT MIN(height) FROM Player);",
    "1070": "SELECT Country.name\nFROM League\nJOIN Country ON League.country_id = Country.id\nWHERE League.name = 'Italy Serie A';",
    "1071": "SELECT T.team_short_name\nFROM Team T\nJOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id\nWHERE TA.buildUpPlaySpeed = 31\n  AND TA.buildUpPlayDribbling = 53\n  AND TA.buildUpPlayPassing = 32;",
    "1072": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Aaron Doran'\n);",
    "1073": "SELECT COUNT(*) AS match_count\nFROM Match\nWHERE league_id = (\n    SELECT id\n    FROM League\n    WHERE name = 'Germany 1. Bundesliga'\n)\nAND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';",
    "1074": "SELECT Team.team_short_name\nFROM Match\nJOIN Team ON Match.home_team_api_id = Team.team_api_id\nWHERE Match.home_team_goal = 10;",
    "1075": "SELECT p.player_name, pa.balance, pa.potential\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.potential = 61\nAND pa.balance = (\n    SELECT MAX(balance)\n    FROM Player_Attributes\n    WHERE potential = 61\n);",
    "1076": "SELECT \n    (AVG(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.ball_control ELSE NULL END) -\n     AVG(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.ball_control ELSE NULL END)) AS ball_control_difference\nFROM \n    Player_Attributes pa\nJOIN \n    Player p ON pa.player_api_id = p.player_api_id\nWHERE \n    p.player_name IN ('Abdou Diallo', 'Aaron Appindangoye');",
    "1077": "SELECT team_long_name\nFROM Team\nWHERE team_short_name = 'GEN';",
    "1078": "SELECT player_name, birthday\nFROM Player\nWHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')\nORDER BY birthday ASC\nLIMIT 1;",
    "1079": "SELECT player_name, height\nFROM Player\nWHERE height = (SELECT MAX(height) FROM Player);",
    "1080": "SELECT COUNT(*) \nFROM Player_Attributes \nWHERE preferred_foot = 'left' \nAND attacking_work_rate = 'low';",
    "1081": "SELECT Country.name\nFROM League\nJOIN Country ON League.country_id = Country.id\nWHERE League.name = 'Belgium Jupiler League';",
    "1082": "SELECT League.name\nFROM League\nJOIN Country ON League.country_id = Country.id\nWHERE Country.name = 'Germany';",
    "1083": "SELECT p.player_name, pa.overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
    "1084": "SELECT COUNT(DISTINCT p.player_api_id) \nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE strftime('%Y', p.birthday) < '1986'\nAND pa.defensive_work_rate = 'high';",
    "1085": "SELECT p.player_name, pa.crossing\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')\nORDER BY pa.crossing DESC\nLIMIT 1;",
    "1086": "SELECT pa.heading_accuracy\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Ariel Borysiuk';",
    "1087": "SELECT COUNT(DISTINCT pa.player_api_id) AS num_players\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 180 AND pa.volleys > 70;",
    "1088": "SELECT DISTINCT Player.player_name\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player_Attributes.volleys > 70\nAND Player_Attributes.dribbling > 70;",
    "1089": "SELECT COUNT(*) \nFROM Match \nWHERE season = '2008/2009' \nAND country_id = (\n    SELECT id \n    FROM Country \n    WHERE name = 'Belgium'\n);",
    "1090": "SELECT pa.long_passing\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.birthday = (SELECT MIN(birthday) FROM Player);",
    "1091": "SELECT COUNT(*) \nFROM Match \nWHERE league_id = (\n    SELECT id \n    FROM League \n    WHERE name = 'Belgium Jupiler League'\n) \nAND SUBSTR(date, 1, 7) = '2009-04';",
    "1092": "SELECT l.name AS league_name\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE m.season = '2008/2009'\nGROUP BY l.name\nORDER BY COUNT(m.id) DESC\nLIMIT 1;",
    "1093": "SELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE strftime('%Y', p.birthday) < '1986';",
    "1094": "SELECT \n    ((ab.overall_rating - pp.overall_rating) * 100.0 / pp.overall_rating) AS percentage_increase\nFROM \n    Player_Attributes ab\nJOIN \n    Player p1 ON ab.player_api_id = p1.player_api_id\nJOIN \n    Player_Attributes pp ON pp.player_api_id = p2.player_api_id\nJOIN \n    Player p2 ON pp.player_api_id = p2.player_api_id\nWHERE \n    p1.player_name = 'Ariel Borysiuk' AND \n    p2.player_name = 'Paulin Puel'\nORDER BY \n    ab.date DESC, pp.date DESC\nLIMIT 1;",
    "1095": "SELECT AVG(buildUpPlaySpeed) AS average_build_up_play_speed\nFROM Team_Attributes\nWHERE team_api_id = (\n    SELECT team_api_id\n    FROM Team\n    WHERE team_long_name = 'Heart of Midlothian'\n);",
    "1096": "SELECT AVG(PA.overall_rating) AS average_overall_rating\nFROM Player_Attributes PA\nJOIN Player P ON PA.player_api_id = P.player_api_id\nWHERE P.player_name = 'Pietro Marino';",
    "1097": "SELECT SUM(PA.crossing) AS total_crossing_score\nFROM Player P\nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id\nWHERE P.player_name = 'Aaron Lennox';",
    "1098": "SELECT \n    MAX(ta.chanceCreationPassing) AS highest_chance_creation_passing_score,\n    ta.chanceCreationPassingClass\nFROM \n    Team t\nJOIN \n    Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE \n    t.team_long_name = 'Ajax'\nGROUP BY \n    ta.chanceCreationPassingClass\nORDER BY \n    highest_chance_creation_passing_score DESC\nLIMIT 1;",
    "1099": "SELECT pa.preferred_foot\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Abdou Diallo';",
    "1100": "SELECT MAX(PA.overall_rating) AS highest_overall_rating\nFROM Player P\nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id\nWHERE P.player_name = 'Dorlan Pabon';",
    "1101": "SELECT AVG(m.away_team_goal) AS average_away_goals\nFROM Match m\nJOIN Team t ON m.away_team_api_id = t.team_api_id\nJOIN Country c ON m.country_id = c.id\nWHERE t.team_long_name = 'Parma'\nAND c.name = 'Italy';",
    "1102": "SELECT p.player_name\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating = 77\n  AND pa.date LIKE '2016-06-23%'\nORDER BY p.birthday ASC\nLIMIT 1;",
    "1103": "SELECT pa.overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Aaron Mooy'\nAND pa.date LIKE '2016-02-04%';",
    "1104": "SELECT pa.potential\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francesco Parravicini'\nAND pa.date = '2010-08-30 00:00:00';",
    "1105": "SELECT pa.attacking_work_rate\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Francesco Migliore'\nAND pa.date LIKE '2015-05-01%';",
    "1106": "SELECT pa.defensive_work_rate\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Kevin Berigaud'\nAND pa.date = '2013-02-22 00:00:00';",
    "1107": "SELECT pa.date\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Kevin Constant'\nAND pa.crossing = (\n    SELECT MAX(pa2.crossing)\n    FROM Player_Attributes pa2\n    JOIN Player p2 ON pa2.player_api_id = p2.player_api_id\n    WHERE p2.player_name = 'Kevin Constant'\n)\nORDER BY pa.date ASC\nLIMIT 1;",
    "1108": "SELECT ta.buildUpPlaySpeedClass\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE t.team_long_name = 'Willem II'\nAND ta.date = '2012-02-22';",
    "1109": "SELECT ta.buildUpPlayDribblingClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_short_name = 'LEI'\n  AND ta.date = '2015-09-10 00:00:00';",
    "1110": "SELECT ta.buildUpPlayPassingClass\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE t.team_long_name = 'FC Lorient'\nAND ta.date LIKE '2010-02-22%';",
    "1111": "SELECT ta.chanceCreationPassingClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'PEC Zwolle'\n  AND ta.date = '2013-09-20 00:00:00';",
    "1112": "SELECT ta.chanceCreationCrossingClass\nFROM Team_Attributes ta\nJOIN Team t ON ta.team_api_id = t.team_api_id\nWHERE t.team_long_name = 'Hull City'\nAND ta.date = '2010-02-22 00:00:00';",
    "1113": "SELECT ta.defenceAggressionClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'Hannover 96'\nAND ta.date LIKE '2015-09-10%';",
    "1114": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Marko Arnautovic'\n)\nAND substr(date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';",
    "1115": "WITH PlayerIDs AS (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name IN ('Landon Donovan', 'Jordan Bowery')\n),\nRatings AS (\n    SELECT pa.player_api_id, pa.overall_rating\n    FROM Player_Attributes pa\n    JOIN PlayerIDs pids ON pa.player_api_id = pids.player_api_id\n    WHERE pa.date = '2013-07-12'\n)\nSELECT \n    (ld.overall_rating - jb.overall_rating) * 100.0 / ld.overall_rating AS percentage_difference\nFROM \n    (SELECT overall_rating FROM Ratings WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan')) ld,\n    (SELECT overall_rating FROM Ratings WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery')) jb;",
    "1116": "SELECT player_name\nFROM Player\nWHERE height = (SELECT MAX(height) FROM Player);",
    "1117": "SELECT player_api_id\nFROM Player\nORDER BY weight DESC\nLIMIT 10;",
    "1118": "SELECT player_name\nFROM Player\nWHERE (julianday('now') - julianday(birthday)) / 365.25 >= 35;",
    "1119": "SELECT SUM(home_team_goal) AS total_home_goals\nFROM Match\nWHERE home_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_2 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_3 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_4 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_5 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_6 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_7 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_8 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_9 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_10 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')\n   OR home_player_11 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon');",
    "1120": "SELECT SUM(m.away_team_goal) AS total_away_goals\nFROM Match m\nJOIN Player p1 ON (\n    m.away_player_1 = p1.player_api_id OR\n    m.away_player_2 = p1.player_api_id OR\n    m.away_player_3 = p1.player_api_id OR\n    m.away_player_4 = p1.player_api_id OR\n    m.away_player_5 = p1.player_api_id OR\n    m.away_player_6 = p1.player_api_id OR\n    m.away_player_7 = p1.player_api_id OR\n    m.away_player_8 = p1.player_api_id OR\n    m.away_player_9 = p1.player_api_id OR\n    m.away_player_10 = p1.player_api_id OR\n    m.away_player_11 = p1.player_api_id\n)\nJOIN Player p2 ON (\n    m.away_player_1 = p2.player_api_id OR\n    m.away_player_2 = p2.player_api_id OR\n    m.away_player_3 = p2.player_api_id OR\n    m.away_player_4 = p2.player_api_id OR\n    m.away_player_5 = p2.player_api_id OR\n    m.away_player_6 = p2.player_api_id OR\n    m.away_player_7 = p2.player_api_id OR\n    m.away_player_8 = p2.player_api_id OR\n    m.away_player_9 = p2.player_api_id OR\n    m.away_player_10 = p2.player_api_id OR\n    m.away_player_11 = p2.player_api_id\n)\nWHERE p1.player_name = 'Daan Smith' OR p2.player_name = 'Filipe Ferreira';",
    "1121": "SELECT SUM(home_team_goal) AS total_goals\nFROM \"Match\" AS m\nJOIN Player AS p ON (\n    m.home_player_1 = p.player_api_id OR\n    m.home_player_2 = p.player_api_id OR\n    m.home_player_3 = p.player_api_id OR\n    m.home_player_4 = p.player_api_id OR\n    m.home_player_5 = p.player_api_id OR\n    m.home_player_6 = p.player_api_id OR\n    m.home_player_7 = p.player_api_id OR\n    m.home_player_8 = p.player_api_id OR\n    m.home_player_9 = p.player_api_id OR\n    m.home_player_10 = p.player_api_id OR\n    m.home_player_11 = p.player_api_id\n)\nWHERE (julianday('now') - julianday(p.birthday)) / 365.25 <= 30;",
    "1122": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);",
    "1123": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.potential = (\n    SELECT MAX(potential) FROM Player_Attributes\n);",
    "1124": "SELECT DISTINCT Player.player_name\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player_Attributes.attacking_work_rate = 'high';",
    "1125": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.finishing = 1\nORDER BY (julianday('now') - julianday(p.birthday)) DESC\nLIMIT 1;",
    "1126": "SELECT DISTINCT p.player_name\nFROM Player p\nJOIN Match m ON p.player_api_id IN (\n    m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5,\n    m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11,\n    m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5,\n    m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11\n)\nJOIN Country c ON m.country_id = c.id\nWHERE c.name = 'Belgium';",
    "1127": "To locate players with vision scores of 90 and above and state their country, we need to join the `Player_Attributes`, `Player`, and `Country` tables. Here's a step-by-step breakdown:\n\n1. **Identify Players with High Vision Scores**: We need to filter the `Player_Attributes` table for players with a `vision` score greater than 89.\n\n2. **Get Player Details**: Join the `Player_Attributes` table with the `Player` table using `player_api_id` to get player details.\n\n3. **Find Matches and Countries**: Join the `Match` table to find matches involving these players and then join with the `Country` table to get the country names.\n\n4. **Select Distinct Countries**: Since a player can be involved in multiple matches, we need to select distinct country names.\n\nHere's the SQL query to achieve this:\n\n```sqlite\nSELECT DISTINCT Country.name\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nJOIN Match ON (Match.home_player_1 = Player.player_api_id OR\n               Match.home_player_2 = Player.player_api_id OR\n               Match.home_player_3 = Player.player_api_id OR\n               Match.home_player_4 = Player.player_api_id OR\n               Match.home_player_5 = Player.player_api_id OR\n               Match.home_player_6 = Player.player_api_id OR\n               Match.home_player_7 = Player.player_api_id OR\n               Match.home_player_8 = Player.player_api_id OR\n               Match.home_player_9 = Player.player_api_id OR\n               Match.home_player_10 = Player.player_api_id OR\n               Match.home_player_11 = Player.player_api_id OR\n               Match.away_player_1 = Player.player_api_id OR\n               Match.away_player_2 = Player.player_api_id OR\n               Match.away_player_3 = Player.player_api_id OR\n               Match.away_player_4 = Player.player_api_id OR\n               Match.away_player_5 = Player.player_api_id OR\n               Match.away_player_6 = Player.player_api_id OR\n               Match.away_player_7 = Player.player_api_id OR\n               Match.away_player_8 = Player.player_api_id OR\n               Match.away_player_9 = Player.player_api_id OR\n               Match.away_player_10 = Player.player_api_id OR\n               Match.away_player",
    "1128": "SELECT c.name AS country_name, AVG(p.weight) AS average_weight\nFROM Player p\nJOIN Match m ON p.player_api_id IN (\n    m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5,\n    m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11,\n    m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5,\n    m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11\n)\nJOIN Country c ON m.country_id = c.id\nGROUP BY c.name\nORDER BY average_weight DESC\nLIMIT 1;",
    "1129": "SELECT Team.team_long_name\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team_Attributes.buildUpPlaySpeedClass = 'Slow';",
    "1130": "SELECT T.team_short_name\nFROM Team T\nJOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id\nWHERE TA.chanceCreationPassingClass = 'Safe';",
    "1131": "SELECT AVG(p.height) AS average_height\nFROM Player p\nJOIN Match m ON p.player_api_id IN (\n    m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5,\n    m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11,\n    m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5,\n    m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11\n)\nJOIN Country c ON m.country_id = c.id\nWHERE c.name = 'Italy';",
    "1132": "SELECT player_name\nFROM Player\nWHERE height > 180\nORDER BY player_name ASC\nLIMIT 3;",
    "1133": "SELECT COUNT(*) \nFROM Player \nWHERE player_name LIKE 'Aaron%' \nAND birthday > '1990';",
    "1134": "SELECT \n    (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) -\n    (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS jumping_difference;",
    "1135": "SELECT player_api_id\nFROM Player_Attributes\nWHERE potential = (\n    SELECT MIN(potential)\n    FROM Player_Attributes\n    WHERE preferred_foot = 'right'\n)\nAND preferred_foot = 'right'\nORDER BY player_api_id\nLIMIT 5;",
    "1136": "SELECT COUNT(DISTINCT player_api_id) AS left_footed_max_crossing_players\nFROM Player_Attributes\nWHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes)\nAND preferred_foot = 'left';",
    "1137": "SELECT \n    (CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM \n    Player_Attributes;",
    "1138": "SELECT Country.name\nFROM League\nJOIN Country ON League.country_id = Country.id\nWHERE League.name = 'Poland Ekstraklasa';",
    "1139": "SELECT \n    Match.home_team_goal, \n    Match.away_team_goal\nFROM \n    Match\nJOIN \n    League ON Match.league_id = League.id\nWHERE \n    League.name = 'Belgium Jupiler League' \n    AND Match.date LIKE '2008-09-24%';",
    "1140": "SELECT \n    pa.sprint_speed, \n    pa.agility, \n    pa.acceleration\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE \n    p.player_name = 'Alexis Blin';",
    "1141": "SELECT ta.buildUpPlaySpeedClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'KSV Cercle Brugge';",
    "1142": "SELECT COUNT(*) \nFROM Match \nWHERE league_id = (\n    SELECT id \n    FROM League \n    WHERE name = 'Serie A'\n) \nAND season = '2015/2016';",
    "1143": "SELECT MAX(home_team_goal) AS highest_home_score\nFROM Match\nWHERE league_id = (\n    SELECT id\n    FROM League\n    WHERE name = 'Netherlands Eredivisie'\n);",
    "1144": "SELECT pa.finishing, pa.curve\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.weight = (SELECT MAX(weight) FROM Player);",
    "1145": "SELECT \n    l.name AS league_name, \n    COUNT(m.id) AS game_count\nFROM \n    Match m\nJOIN \n    League l ON m.league_id = l.id\nWHERE \n    m.season = '2015/2016'\nGROUP BY \n    m.league_id\nORDER BY \n    game_count DESC\nLIMIT 4;",
    "1146": "SELECT Team.team_long_name\nFROM Match\nJOIN Team ON Match.away_team_api_id = Team.team_api_id\nWHERE Match.away_team_goal = (\n    SELECT MAX(away_team_goal) FROM Match\n)",
    "1147": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.overall_rating = (\n    SELECT MAX(overall_rating)\n    FROM Player_Attributes\n);",
    "1148": "SELECT \n    (CAST(COUNT(CASE WHEN p.height < 180 AND pa.overall_rating > 70 THEN 1 END) AS FLOAT) / COUNT(p.id)) * 100 AS percentage\nFROM \n    Player p\nJOIN \n    Player_Attributes pa ON p.player_api_id = pa.player_api_id;",
    "1149": "WITH MaleCounts AS (\n    SELECT \n        SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS InPatientCount,\n        SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS OutPatientCount\n    FROM \n        Patient\n    WHERE \n        SEX = 'M'\n)\nSELECT \n    InPatientCount,\n    OutPatientCount,\n    (InPatientCount - OutPatientCount) * 100.0 / OutPatientCount AS PercentageDeviation\nFROM \n    MaleCounts;",
    "1150": "SELECT \n    (CAST(COUNT(CASE WHEN strftime('%Y', Birthday) > '1930' THEN 1 END) AS FLOAT) / \n    COUNT(*)) * 100 AS percentage_females_born_after_1930\nFROM \n    Patient\nWHERE \n    SEX = 'F';",
    "1151": "SELECT \n    (CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS Inpatient_Percentage\nFROM \n    Patient\nWHERE \n    strftime('%Y', Birthday) BETWEEN '1930' AND '1940';",
    "1152": "SELECT \n    (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') AS OutpatientCount,\n    (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS InpatientCount,\n    CAST((SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') AS REAL) /\n    (SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS OutpatientToInpatientRatio\nFROM \n    Patient\nLIMIT 1;",
    "1153": "SELECT 'Diagnosis' AS Type, Diagnosis AS Result\nFROM Patient\nWHERE ID = 30609\n\nUNION ALL\n\nSELECT 'Lab Test Date' AS Type, Date AS Result\nFROM Laboratory\nWHERE ID = 30609;",
    "1154": "SELECT \n    Patient.SEX, \n    Patient.Birthday, \n    Examination.`Examination Date`, \n    Examination.Symptoms\nFROM \n    Patient\nJOIN \n    Examination ON Patient.ID = Examination.ID\nWHERE \n    Patient.ID = 163109;",
    "1155": "SELECT \n    Patient.ID, \n    Patient.SEX, \n    Patient.Birthday\nFROM \n    Patient\nJOIN \n    Laboratory ON Patient.ID = Laboratory.ID\nWHERE \n    Laboratory.LDH > 500;",
    "1156": "SELECT \n    Patient.ID, \n    (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age\nFROM \n    Examination\nJOIN \n    Patient ON Examination.ID = Patient.ID\nWHERE \n    Examination.RVVT = '+';",
    "1157": "SELECT \n    Patient.ID, \n    Patient.SEX, \n    Patient.Diagnosis \nFROM \n    Examination \nJOIN \n    Patient \nON \n    Examination.ID = Patient.ID \nWHERE \n    Examination.Thrombosis = 2;",
    "1158": "SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE strftime('%Y', p.Birthday) = '1937'\n  AND l.`T-CHO` >= 250;",
    "1159": "SELECT \n    p.ID, \n    p.SEX, \n    p.Diagnosis\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.ALB < 3.5;",
    "1160": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN (L.TP < 6.0 OR L.TP > 8.5) THEN P.ID END) AS FLOAT) / \n    COUNT(DISTINCT P.ID)) * 100 AS Percentage\nFROM \n    Patient P\nJOIN \n    Laboratory L ON P.ID = L.ID\nWHERE \n    P.SEX = 'F';",
    "1161": "SELECT AVG(E.`aCL IgG`) AS Average_aCL_IgG\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE P.Admission = '+'\nAND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50;",
    "1162": "SELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'F'\n  AND strftime('%Y', Description) = '1997'\n  AND Admission = '-';",
    "1163": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) AS Youngest_Age\nFROM Patient;",
    "1164": "SELECT COUNT(DISTINCT e.ID) AS NumberOfWomen\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE e.Thrombosis = 1\n  AND strftime('%Y', e.`Examination Date`) = '1997'\n  AND p.SEX = 'F';",
    "1165": "SELECT \n    MAX(strftime('%Y', 'now') - strftime('%Y', p.Birthday)) - \n    MIN(strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS AgeGap\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.TG >= 200;",
    "1166": "SELECT Examination.Symptoms, Examination.Diagnosis\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.Birthday = (SELECT MAX(Birthday) FROM Patient)\n  AND Examination.Symptoms IS NOT NULL;",
    "1167": "SELECT COUNT(DISTINCT l.ID) / 12.0 AS average_male_patients_per_month\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.Date BETWEEN '1998-01-01' AND '1998-12-31'\nAND p.SEX = 'M';",
    "1168": "SELECT \n    Laboratory.Date AS LabDate,\n    (strftime('%Y', Patient.`First Date`) - strftime('%Y', Patient.Birthday)) AS AgeAtFirstVisit\nFROM \n    Patient\nJOIN \n    Laboratory ON Patient.ID = Laboratory.ID\nWHERE \n    Patient.Diagnosis = 'SJS'\nORDER BY \n    Patient.Birthday ASC\nLIMIT 1;",
    "1169": "WITH AbnormalUA AS (\n    SELECT \n        P.ID,\n        P.SEX,\n        L.UA\n    FROM \n        Patient P\n    JOIN \n        Laboratory L ON P.ID = L.ID\n    WHERE \n        (P.SEX = 'M' AND L.UA > 8.0) OR\n        (P.SEX = 'F' AND L.UA > 6.5)\n),\nCountBySex AS (\n    SELECT \n        SEX,\n        COUNT(DISTINCT ID) AS Count\n    FROM \n        AbnormalUA\n    GROUP BY \n        SEX\n)\nSELECT \n    (SELECT Count FROM CountBySex WHERE SEX = 'M') || ':' || \n    (SELECT Count FROM CountBySex WHERE SEX = 'F') AS MaleToFemaleRatio",
    "1170": "SELECT COUNT(DISTINCT p.ID) AS PatientCount\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE (strftime('%Y', e.`Examination Date`) - strftime('%Y', p.`First Date`)) >= 1;",
    "1171": "SELECT COUNT(DISTINCT e.ID) AS UnderagePatientCount\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE strftime('%Y', e.`Examination Date`) BETWEEN '1990' AND '1993'\nAND (CAST(strftime('%Y', e.`Examination Date`) AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER)) < 18;",
    "1172": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithElevatedBilirubin\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.`T-BIL` >= 2.0;",
    "1173": "SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount\nFROM Examination\nWHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY Diagnosis\nORDER BY DiagnosisCount DESC\nLIMIT 1;",
    "1174": "SELECT AVG(1999 - CAST(strftime('%Y', Birthday) AS INTEGER)) AS Average_Age_1999\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.Date BETWEEN '1991-10-01' AND '1991-10-31';",
    "1175": "SELECT \n    MAX(L.HGB) AS Max_Hemoglobin,\n    (strftime('%Y', L.Date) - strftime('%Y', P.Birthday)) - \n    (strftime('%m-%d', L.Date) < strftime('%m-%d', P.Birthday)) AS Age_At_Examination,\n    P.Diagnosis\nFROM \n    Laboratory L\nJOIN \n    Patient P ON L.ID = P.ID\nWHERE \n    L.HGB = (SELECT MAX(HGB) FROM Laboratory)\nGROUP BY \n    L.ID\nLIMIT 1;",
    "1176": "SELECT ANA\nFROM Examination\nWHERE ID = 3605340\nAND `Examination Date` = '1996-12-02';",
    "1177": "SELECT \n    CASE \n        WHEN `T-CHO` < 250 THEN 'Normal'\n        ELSE 'High'\n    END AS Cholesterol_Status\nFROM \n    Laboratory\nWHERE \n    ID = 2927464 \n    AND Date = '1995-09-04';",
    "1178": "SELECT SEX\nFROM Patient\nWHERE Diagnosis = 'AORTITIS'\nORDER BY `First Date` ASC\nLIMIT 1;",
    "1179": "SELECT e.`aCL IgM`\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Diagnosis = 'SLE'\n  AND p.Description = '1994-02-19'\n  AND e.`Examination Date` = '1993-11-12';",
    "1180": "SELECT p.SEX\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.Date = '1992-06-12' AND l.GPT = 9;",
    "1181": "SELECT \n    (strftime('%Y', '1991-10-21') - strftime('%Y', p.Birthday)) - \n    (strftime('%m-%d', '1991-10-21') < strftime('%m-%d', p.Birthday)) AS Age\nFROM \n    Laboratory l\nJOIN \n    Patient p ON l.ID = p.ID\nWHERE \n    l.UA = 8.4 AND l.Date = '1991-10-21';",
    "1182": "SELECT COUNT(*) AS Total_Laboratory_Tests_1995\nFROM Laboratory\nWHERE ID = (\n    SELECT ID\n    FROM Patient\n    WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS'\n)\nAND strftime('%Y', Date) = '1995';",
    "1183": "SELECT p.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.Diagnosis = 'SLE'\n  AND e.`Examination Date` = '1997-01-27';",
    "1184": "SELECT Examination.Symptoms\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.Birthday = '1959-03-01'\n  AND Examination.`Examination Date` = '1993-09-27';",
    "1185": "WITH PatientID AS (\n    SELECT ID\n    FROM Patient\n    WHERE Birthday = '1959-02-18'\n),\nNovemberTCHO AS (\n    SELECT SUM(`T-CHO`) AS TotalNovemberTCHO\n    FROM Laboratory\n    WHERE ID IN (SELECT ID FROM PatientID) AND Date LIKE '1981-11-%'\n),\nDecemberTCHO AS (\n    SELECT SUM(`T-CHO`) AS TotalDecemberTCHO\n    FROM Laboratory\n    WHERE ID IN (SELECT ID FROM PatientID) AND Date LIKE '1981-12-%'\n)\nSELECT \n    ((TotalNovemberTCHO - TotalDecemberTCHO) / TotalNovemberTCHO) * 100 AS DecreaseRate\nFROM \n    NovemberTCHO, DecemberTCHO;",
    "1186": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Diagnosis = 'Behcet'\n  AND e.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';",
    "1187": "SELECT DISTINCT ID\nFROM Laboratory\nWHERE Date BETWEEN '1987-07-06' AND '1996-01-31'\n  AND GPT > 30\n  AND ALB < 4;",
    "1188": "SELECT ID\nFROM Patient\nWHERE SEX = 'F'\n  AND strftime('%Y', Birthday) = '1964'\n  AND Admission = '+';",
    "1189": "WITH AvgIgM AS (\n    SELECT AVG(`aCL IgM`) AS AvgIgMValue\n    FROM Examination\n),\nThreshold AS (\n    SELECT (AvgIgMValue * 1.2) AS IgMThreshold\n    FROM AvgIgM\n)\nSELECT COUNT(DISTINCT e.ID) AS NumberOfPatients\nFROM Examination e\nJOIN Threshold t ON e.`aCL IgM` > t.IgMThreshold\nWHERE e.Thrombosis = 2\n  AND e.ANA = 'S';",
    "1190": "SELECT \n    (CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS Percentage\nFROM \n    Laboratory\nWHERE \n    `U-PRO` > 0 AND `U-PRO` < 30;",
    "1191": "SELECT \n    (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS Percentage_BEHCET\nFROM \n    Patient\nWHERE \n    SEX = 'M' \n    AND strftime('%Y', `First Date`) = '1981';",
    "1192": "SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-'\n  AND l.Date LIKE '1991-10%'\n  AND l.`T-BIL` < 2.0;",
    "1193": "SELECT COUNT(DISTINCT p.ID) AS NumberOfWomen\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.`ANA Pattern` != 'P'\n  AND p.SEX = 'F'\n  AND p.Birthday BETWEEN '1980-01-01' AND '1989-12-31';",
    "1194": "SELECT p.SEX\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE e.Diagnosis = 'PSS'\n  AND l.CRP > 2\n  AND l.CRE = 1\n  AND l.LDH = 123;",
    "1195": "SELECT AVG(Laboratory.ALB) AS Average_ALB\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'F'\n  AND Laboratory.PLT > 400\n  AND Patient.Diagnosis = 'SLE';",
    "1196": "SELECT Symptoms, COUNT(Symptoms) AS SymptomCount\nFROM Examination\nWHERE Diagnosis = 'SLE'\nGROUP BY Symptoms\nORDER BY SymptomCount DESC\nLIMIT 1;",
    "1197": "SELECT Description, Diagnosis\nFROM Patient\nWHERE ID = 48473;",
    "1198": "SELECT COUNT(*) \nFROM Patient \nWHERE SEX = 'F' AND Diagnosis = 'APS';",
    "1199": "SELECT COUNT(DISTINCT L.ID) AS PatientCount\nFROM Laboratory L\nWHERE strftime('%Y', L.Date) = '1997'\n  AND (L.TP <= 6 OR L.TP >= 8.5);",
    "1200": "SELECT \n    (CAST(SUM(CASE WHEN p.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS FLOAT) / \n    SUM(CASE WHEN e.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END)) * 100 AS Proportion\nFROM \n    Patient p\nJOIN \n    Examination e ON p.ID = e.ID\nWHERE \n    e.Symptoms LIKE '%thrombocytopenia%'",
    "1201": "SELECT \n    (SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_women\nFROM \n    Patient\nWHERE \n    strftime('%Y', Birthday) = '1980' \n    AND Diagnosis = 'RA';",
    "1202": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsCount\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.SEX = 'M'\n  AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'\n  AND e.Diagnosis = 'Behcet'\n  AND p.Admission = '-';",
    "1203": "SELECT COUNT(DISTINCT p.ID) AS FemalePatientsWithLowWBC\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'F' AND l.WBC < 3.5;",
    "1204": "SELECT \n    ID,\n    `Examination Date`,\n    `First Date`,\n    julianday(`Examination Date`) - julianday(`First Date`) AS Days_Between\nFROM \n    Examination\nJOIN \n    Patient ON Examination.ID = Patient.ID\nWHERE \n    Examination.ID = 821298;",
    "1205": "SELECT \n    p.ID,\n    p.SEX,\n    l.UA,\n    CASE \n        WHEN (p.SEX = 'M' AND l.UA <= 8.0) OR (p.SEX = 'F' AND l.UA <= 6.5) THEN 'Within Normal Range'\n        ELSE 'Outside Normal Range'\n    END AS UA_Status\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.ID = 57266;",
    "1206": "SELECT Date\nFROM Laboratory\nWHERE ID = 48473 AND GOT >= 60;",
    "1207": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.GOT < 60\n    AND strftime('%Y', l.Date) = '1994';",
    "1208": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.GPT >= 60;",
    "1209": "SELECT p.Diagnosis\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.GPT > 60\nORDER BY p.Birthday ASC;",
    "1210": "SELECT AVG(LDH) AS Average_LDH\nFROM Laboratory\nWHERE LDH < 500;",
    "1211": "SELECT \n    p.ID, \n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age\nFROM \n    Laboratory l\nJOIN \n    Patient p ON l.ID = p.ID\nWHERE \n    l.LDH BETWEEN 600 AND 800;",
    "1212": "SELECT DISTINCT p.Admission\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.ALP < 300;",
    "1213": "SELECT p.ID, \n       CASE \n           WHEN l.ALP < 300 THEN 'Within Normal Range' \n           ELSE 'Above Normal Range' \n       END AS ALP_Status\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday = '1982-04-01';",
    "1214": "SELECT \n    Patient.ID, \n    Patient.SEX, \n    Patient.Birthday\nFROM \n    Patient\nJOIN \n    Laboratory ON Patient.ID = Laboratory.ID\nWHERE \n    Laboratory.TP < 6.0;",
    "1215": "SELECT \n    p.ID,\n    l.Date,\n    l.TP,\n    (l.TP - 8.5) AS TP_Deviation\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.SEX = 'F' AND l.TP > 8.5;",
    "1216": "SELECT DISTINCT p.ID, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M'\n  AND (l.ALB <= 3.5 OR l.ALB >= 5.5)\nORDER BY p.Birthday DESC;",
    "1217": "SELECT \n    p.ID, \n    p.Birthday, \n    l.Date, \n    l.ALB, \n    CASE \n        WHEN l.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'\n        ELSE 'Outside Normal Range'\n    END AS Albumin_Status\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    strftime('%Y', p.Birthday) = '1982';",
    "1218": "WITH FemalePatients AS (\n    SELECT DISTINCT ID\n    FROM Patient\n    WHERE SEX = 'F'\n),\nHighUAFemalePatients AS (\n    SELECT DISTINCT L.ID\n    FROM Laboratory L\n    JOIN Patient P ON L.ID = P.ID\n    WHERE P.SEX = 'F' AND L.UA > 6.5\n)\nSELECT \n    (CAST((SELECT COUNT(*) FROM HighUAFemalePatients) AS FLOAT) / \n     (SELECT COUNT(*) FROM FemalePatients)) * 100 AS Percentage",
    "1219": "WITH LatestLab AS (\n    SELECT l.ID, l.UA, l.Date\n    FROM Laboratory l\n    JOIN (\n        SELECT ID, MAX(Date) AS LatestDate\n        FROM Laboratory\n        GROUP BY ID\n    ) latest ON l.ID = latest.ID AND l.Date = latest.LatestDate\n),\nNormalUA AS (\n    SELECT ll.ID, ll.UA\n    FROM LatestLab ll\n    JOIN Patient p ON ll.ID = p.ID\n    WHERE (p.SEX = 'M' AND ll.UA < 8.0) OR (p.SEX = 'F' AND ll.UA < 6.5)\n)\nSELECT AVG(UA) AS AverageUAIndex\nFROM NormalUA;",
    "1220": "SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.UN = 29;",
    "1221": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.Diagnosis = 'RA' \n    AND l.UN < 30;",
    "1222": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithHighCRE\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.CRE >= 1.5;",
    "1223": "SELECT \n    CASE \n        WHEN SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) \n        THEN 'True' \n        ELSE 'False' \n    END AS More_Males_Than_Females\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.CRE >= 1.5;",
    "1224": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory);",
    "1225": "SELECT \n    p.SEX, \n    GROUP_CONCAT(DISTINCT l.ID) AS Patient_IDs\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.`T-BIL` >= 2.0\nGROUP BY \n    p.SEX;",
    "1226": "SELECT p.ID, l.`T-CHO`\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient)\nORDER BY l.`T-CHO` DESC\nLIMIT 1;",
    "1227": "SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', p.Birthday)) AS Average_Age\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.`T-CHO` >= 250;",
    "1228": "SELECT \n    Patient.ID, \n    Patient.Diagnosis\nFROM \n    Laboratory\nJOIN \n    Patient ON Laboratory.ID = Patient.ID\nWHERE \n    Laboratory.TG > 300;",
    "1229": "SELECT COUNT(DISTINCT L.ID) AS PatientCount\nFROM Laboratory L\nJOIN Patient P ON L.ID = P.ID\nWHERE L.TG >= 200\nAND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 50;",
    "1230": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-'\n  AND l.CPK < 250;",
    "1231": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithHighCPK\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M'\n  AND strftime('%Y', p.Birthday) BETWEEN '1936' AND '1956'\n  AND l.CPK >= 250;",
    "1232": "SELECT \n    p.ID, \n    p.SEX, \n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.GLU >= 180 \n    AND l.`T-CHO` < 250;",
    "1233": "SELECT \n    p.ID, \n    l.GLU\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    strftime('%Y', p.Description) = '1991'\n    AND l.GLU < 180;",
    "1234": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.WBC <= 3.5 OR l.WBC >= 9.0\nGROUP BY \n    p.SEX, p.ID\nORDER BY \n    p.SEX, p.Birthday DESC;",
    "1235": "SELECT \n    p.ID, \n    p.Diagnosis, \n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.RBC < 3.5;",
    "1236": "SELECT \n    p.ID, \n    p.SEX, \n    p.Birthday, \n    p.Admission\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    p.SEX = 'F'\n    AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) >= 50\n    AND (l.RBC <= 3.5 OR l.RBC >= 6.0)\n    AND p.Admission = '+';",
    "1237": "SELECT DISTINCT p.ID, p.SEX\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-' AND l.HGB < 10;",
    "1238": "SELECT p.ID, p.SEX\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SLE'\n  AND l.HGB > 10 AND l.HGB < 17\nORDER BY p.Birthday ASC\nLIMIT 1;",
    "1239": "SELECT \n    p.ID, \n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    l.HCT >= 52\nGROUP BY \n    p.ID\nHAVING \n    COUNT(l.ID) >= 2;",
    "1240": "SELECT AVG(HCT) AS Average_HCT_Below_Normal\nFROM Laboratory\nWHERE Date LIKE '1991%'\n  AND HCT < 29;",
    "1241": "WITH AbnormalPLT AS (\n    SELECT DISTINCT ID\n    FROM Laboratory\n    WHERE PLT <= 100 OR PLT >= 400\n),\nLowerThanNormal AS (\n    SELECT DISTINCT ID\n    FROM Laboratory\n    WHERE PLT < 100\n),\nHigherThanNormal AS (\n    SELECT DISTINCT ID\n    FROM Laboratory\n    WHERE PLT > 400\n)\nSELECT \n    (SELECT COUNT(*) FROM LowerThanNormal) AS LowerThanNormalCount,\n    (SELECT COUNT(*) FROM HigherThanNormal) AS HigherThanNormalCount\nFROM AbnormalPLT;",
    "1242": "SELECT DISTINCT p.ID, p.SEX, p.Birthday, l.Date, l.PLT\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE strftime('%Y', l.Date) = '1984'\n  AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) < 50\n  AND l.PLT BETWEEN 100 AND 400;",
    "1243": "SELECT \n    (SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Female_Percentage\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nWHERE \n    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 55\n    AND l.PT >= 14;",
    "1244": "SELECT DISTINCT p.ID, p.SEX, p.Birthday, p.Description, p.`First Date`, p.Admission, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE strftime('%Y', p.`First Date`) > '1992'\n  AND l.PT < 14;",
    "1245": "SELECT COUNT(*)\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID AND e.`Examination Date` = l.Date\nWHERE e.`Examination Date` > '1997-01-01'\n  AND l.APTT >= 45;",
    "1246": "SELECT COUNT(DISTINCT l.ID) AS PatientCount\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.APTT > 45 AND e.Thrombosis = 0;",
    "1247": "SELECT COUNT(DISTINCT L.ID) AS MalePatientsWithAbnormalFG\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M'\n  AND L.WBC > 3.5\n  AND L.WBC < 9.0\n  AND (L.FG <= 150 OR L.FG >= 450);",
    "1248": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday > '1980-01-01'\nAND (l.FG < 150 OR l.FG > 450);",
    "1249": "SELECT DISTINCT p.Diagnosis\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE CAST(l.`U-PRO` AS INTEGER) >= 30;",
    "1250": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SLE'\n  AND CAST(l.`U-PRO` AS REAL) > 0\n  AND CAST(l.`U-PRO` AS REAL) < 30;",
    "1251": "SELECT COUNT(DISTINCT ID) AS NumberOfPatients\nFROM Laboratory\nWHERE IGG >= 2000;",
    "1252": "SELECT COUNT(DISTINCT l.ID) AS Patients_With_Symptoms\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.IGG > 900 AND l.IGG < 2000\nAND e.Symptoms IS NOT NULL;",
    "1253": "SELECT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.IGA = (\n    SELECT MAX(IGA)\n    FROM Laboratory\n    WHERE IGA BETWEEN 80 AND 500\n)",
    "1254": "SELECT COUNT(DISTINCT p.ID) AS PatientCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE YEAR(p.`First Date`) >= 1990\n  AND l.IGA > 80\n  AND l.IGA < 500;",
    "1255": "SELECT p.Diagnosis, COUNT(*) as DiagnosisCount\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.IGM <= 40 OR l.IGM >= 400\nGROUP BY p.Diagnosis\nORDER BY DiagnosisCount DESC\nLIMIT 1;",
    "1256": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.CRP = '+'\nAND p.Description IS NULL;",
    "1257": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.CRE >= 1.5\nAND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) < 70;",
    "1258": "SELECT COUNT(DISTINCT L.ID) AS PatientCount\nFROM Laboratory L\nJOIN Examination E ON L.ID = E.ID\nWHERE L.RA IN ('-', '+-') AND E.KCT = '+';",
    "1259": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE YEAR(p.Birthday) >= 1985\n  AND l.RA IN ('-', '+-');",
    "1260": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) - \n      (strftime('%m-%d', 'now') < strftime('%m-%d', p.Birthday)) > 60\n  AND CAST(l.RF AS REAL) < 20;",
    "1261": "SELECT COUNT(DISTINCT p.ID) AS PatientCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nJOIN Examination e ON p.ID = e.ID\nWHERE CAST(l.RF AS REAL) < 20\nAND e.Thrombosis = 0;",
    "1262": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.C3 > 35\n  AND e.`ANA Pattern` = 'P';",
    "1263": "SELECT e.ID\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.HCT <= 29 OR l.HCT >= 52\nORDER BY e.`aCL IgA` DESC\nLIMIT 1;",
    "1264": "SELECT COUNT(DISTINCT e.ID) AS NumberOfPatients\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.Thrombosis = 1\nAND l.C4 > 10;",
    "1265": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE (l.RNP = '-' OR l.RNP = '+-')\n  AND p.Admission = '+';",
    "1266": "SELECT p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RNP NOT IN ('-', '+-')\nORDER BY p.Birthday DESC\nLIMIT 1;",
    "1267": "SELECT COUNT(DISTINCT e.ID) AS PatientsWithoutThrombosis\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.SM IN ('-', '+-')\n  AND e.Thrombosis = 0;",
    "1268": "SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.SM NOT IN ('negative', '0')\nGROUP BY p.ID, p.Birthday\nORDER BY p.Birthday DESC\nLIMIT 3;",
    "1269": "SELECT DISTINCT e.ID\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.`Examination Date` > '1997-01-01'\n  AND l.SC170 IN ('negative', '0');",
    "1270": "SELECT COUNT(DISTINCT p.ID) AS FemalePatientsWithoutSymptoms\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.SC170 IN ('negative', '0')\n  AND p.SEX = 'F'\n  AND e.Symptoms IS NULL;",
    "1271": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.SSA IN ('-', '+-')\n  AND strftime('%Y', p.`First Date`) < '2000';",
    "1272": "SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.SSA NOT IN ('negative', '0')\nORDER BY p.`First Date` ASC\nLIMIT 1;",
    "1273": "SELECT COUNT(DISTINCT e.ID) AS NumberOfPatients\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.SSB IN ('-', '+-')\n  AND e.Diagnosis = 'SLE';",
    "1274": "SELECT COUNT(DISTINCT e.ID) AS NumberOfPatients\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.SSB IN ('negative', '0') AND e.Symptoms IS NOT NULL;",
    "1275": "SELECT COUNT(DISTINCT p.ID) AS MalePatientCount\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M'\n  AND l.CENTROMEA IN ('-', '+-')\n  AND l.SSB IN ('-', '+-');",
    "1276": "SELECT DISTINCT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.DNA >= 8;",
    "1277": "SELECT COUNT(DISTINCT Patient.ID) AS NumberOfPatients\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.DNA < 8\nAND Patient.Description IS NULL;",
    "1278": "SELECT COUNT(DISTINCT p.ID) AS NumberOfAdmittedPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.IGG > 900 AND l.IGG < 2000\nAND p.Admission = '+';",
    "1279": "SELECT \n    100.0 * COUNT(CASE WHEN p.Diagnosis = 'SLE' THEN 1 END) / COUNT(*) AS percentage\nFROM \n    Laboratory l\nJOIN \n    Patient p ON l.ID = p.ID\nWHERE \n    l.GOT >= 60;",
    "1280": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithNormalGOT\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.GOT < 60;",
    "1281": "SELECT MAX(Birthday) AS Youngest_Birthday\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Laboratory\n    WHERE GOT >= 60\n);",
    "1282": "SELECT p.Birthday\nFROM Patient p\nJOIN (\n    SELECT ID, MAX(GPT) AS MaxGPT\n    FROM Laboratory\n    WHERE GPT < 60\n    GROUP BY ID\n) AS lab ON p.ID = lab.ID\nORDER BY lab.MaxGPT DESC\nLIMIT 3;",
    "1283": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithNormalGOT\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GOT < 60 AND p.SEX = 'M';",
    "1284": "SELECT p.ID, p.`First Date`\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.LDH < 500\nORDER BY l.LDH DESC, p.`First Date` ASC\nLIMIT 1;",
    "1285": "SELECT MAX(L.Date) AS LatestMedicalDataDate\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.`First Date` = (SELECT MAX(`First Date`) FROM Patient)\nAND L.LDH >= 500;",
    "1286": "SELECT COUNT(DISTINCT l.ID) AS AdmittedPatientsWithAbnormalALP\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.ALP >= 300 AND p.Admission = '+';",
    "1287": "SELECT COUNT(DISTINCT p.ID) AS Normal_ALP_Patients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-'\nAND l.ALP < 300;",
    "1288": "SELECT DISTINCT Patient.Diagnosis\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID\nWHERE Laboratory.TP < 6.0;",
    "1289": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SJS'\n  AND l.TP > 6.0\n  AND l.TP < 8.5;",
    "1290": "SELECT Date\nFROM Laboratory\nWHERE ALB > 3.5 AND ALB < 5.5\nORDER BY ALB DESC\nLIMIT 1;",
    "1291": "SELECT COUNT(DISTINCT p.ID) AS MalePatientsWithNormalLevels\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M'\n  AND l.ALB > 3.5 AND l.ALB < 5.5\n  AND l.TP BETWEEN 6.0 AND 8.5;",
    "1292": "SELECT \n    e.`aCL IgG`, \n    e.`aCL IgM`, \n    e.`aCL IgA`\nFROM \n    Patient p\nJOIN \n    Laboratory l ON p.ID = l.ID\nJOIN \n    Examination e ON p.ID = e.ID\nWHERE \n    p.SEX = 'F' \n    AND l.UA <= 6.50\n    AND l.UA = (\n        SELECT MAX(l2.UA)\n        FROM Laboratory l2\n        JOIN Patient p2 ON l2.ID = p2.ID\n        WHERE p2.SEX = 'F' AND l2.UA <= 6.50\n    );",
    "1293": "SELECT MAX(e.ANA) AS Max_ANA\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.CRE < 1.5;",
    "1294": "SELECT DISTINCT e.ID\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.CRE < 1.5\nAND e.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination);",
    "1295": "SELECT COUNT(DISTINCT l.ID) AS PatientCount\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.`T-BIL` >= 2.0\nAND e.`ANA Pattern` LIKE '%P%'",
    "1296": "SELECT e.ANA\nFROM Examination e\nJOIN (\n    SELECT l.ID, MAX(l.`T-BIL`) AS max_tbil\n    FROM Laboratory l\n    WHERE l.`T-BIL` < 2.0\n    GROUP BY l.ID\n) AS max_tbil_table\nON e.ID = max_tbil_table.ID\nJOIN Laboratory l2\nON max_tbil_table.ID = l2.ID AND max_tbil_table.max_tbil = l2.`T-BIL`",
    "1297": "SELECT COUNT(DISTINCT l.ID) AS PatientCount\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.`T-CHO` >= 250\nAND e.KCT = '-';",
    "1298": "SELECT COUNT(DISTINCT e.ID) AS PatientCount\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.`T-CHO` < 250\nAND e.`ANA Pattern` = 'P';",
    "1299": "SELECT COUNT(DISTINCT l.ID) AS PatientCount\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.TG < 200 AND e.Symptoms IS NOT NULL;",
    "1300": "SELECT p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG < 200\nAND l.TG = (\n    SELECT MAX(TG)\n    FROM Laboratory\n    WHERE TG < 200\n)",
    "1301": "SELECT DISTINCT e.ID\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.Thrombosis = 0\nAND l.CPK < 250;",
    "1302": "SELECT COUNT(DISTINCT l.ID) AS PatientCount\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.CPK < 250\n  AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');",
    "1303": "SELECT MIN(P.Birthday) AS OldestPatientBirthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.GLU > 180;",
    "1304": "SELECT COUNT(DISTINCT l.ID) AS NumberOfPatients\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.GLU < 180 AND e.Thrombosis = 0;",
    "1305": "SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '+'\n  AND l.WBC BETWEEN 3.5 AND 9.0;",
    "1306": "SELECT COUNT(DISTINCT p.ID) AS SLE_Patients_With_Normal_WBC\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SLE'\n  AND l.WBC BETWEEN 3.5 AND 9.0;",
    "1307": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE (l.RBC <= 3.5 OR l.RBC >= 6.0)\n  AND p.Admission = '-';",
    "1308": "SELECT COUNT(DISTINCT l.ID) AS NumberOfPatients\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nWHERE l.PLT > 100 AND l.PLT < 400\nAND e.Diagnosis IS NOT NULL;",
    "1309": "SELECT \n    Laboratory.ID, \n    Laboratory.PLT\nFROM \n    Patient\nJOIN \n    Laboratory ON Patient.ID = Laboratory.ID\nWHERE \n    Patient.Diagnosis = 'MCTD'\n    AND Laboratory.PLT > 100 \n    AND Laboratory.PLT < 400;",
    "1310": "SELECT AVG(L.PT) AS Average_PT\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.SEX = 'M' AND L.PT < 14;",
    "1311": "SELECT COUNT(DISTINCT e.ID) AS SevereThrombosisWithNormalPT\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE (e.Thrombosis = 1 OR e.Thrombosis = 2)\n  AND l.PT < 14;",
    "1312": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
    "1313": "SELECT COUNT(*) AS number_of_students\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.college = 'College of Engineering';",
    "1314": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.department = 'Art and Design';",
    "1315": "SELECT COUNT(*) AS number_of_attendees\nFROM attendance\nWHERE link_to_event = (\n    SELECT event_id\n    FROM event\n    WHERE event_name = 'Women''s Soccer'\n);",
    "1316": "SELECT m.phone\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer';",
    "1317": "SELECT COUNT(*)\nFROM attendance\nJOIN event ON attendance.link_to_event = event.event_id\nJOIN member ON attendance.link_to_member = member.member_id\nWHERE event.event_name = 'Women''s Soccer'\nAND member.t_shirt_size = 'Medium';",
    "1318": "SELECT e.event_name\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nGROUP BY a.link_to_event\nORDER BY COUNT(a.link_to_member) DESC\nLIMIT 1;",
    "1319": "SELECT major.college\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.position = 'Vice President';",
    "1320": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';",
    "1321": "SELECT COUNT(*) AS events_attended\nFROM attendance\nJOIN member ON attendance.link_to_member = member.member_id\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE member.first_name = 'Sacha'\n  AND member.last_name = 'Harrison'\n  AND strftime('%Y', event.event_date) = '2019';",
    "1322": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.type = 'Meeting'\nGROUP BY e.event_id\nHAVING COUNT(a.link_to_member) > 10;",
    "1323": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_id\nHAVING COUNT(a.link_to_member) > 20\nAND e.type != 'fundraiser';",
    "1324": "WITH MeetingEvents AS (\n    SELECT event_id\n    FROM event\n    WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020'\n),\nAttendanceCounts AS (\n    SELECT link_to_event, COUNT(DISTINCT link_to_member) AS attendance_count\n    FROM attendance\n    WHERE link_to_event IN (SELECT event_id FROM MeetingEvents)\n    GROUP BY link_to_event\n)\nSELECT AVG(attendance_count) AS average_attendance\nFROM AttendanceCounts;",
    "1325": "SELECT expense_description\nFROM expense\nWHERE cost = (SELECT MAX(cost) FROM expense);",
    "1326": "SELECT COUNT(*)\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Environmental Engineering';",
    "1327": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Laugh Out Loud';",
    "1328": "SELECT m.last_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Law and Constitutional Studies';",
    "1329": "SELECT z.county\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';",
    "1330": "SELECT m.college\nFROM member mem\nJOIN major m ON mem.link_to_major = m.major_id\nWHERE mem.first_name = 'Tyler' AND mem.last_name = 'Hewitt';",
    "1331": "SELECT SUM(i.amount) AS total_funds_received\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE m.position = 'Vice President';",
    "1332": "SELECT b.spent\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.event_name = 'September Meeting' AND b.category = 'Food';",
    "1333": "SELECT z.city, z.state\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.position = 'President';",
    "1334": "SELECT first_name || ' ' || last_name AS full_name\nFROM member\nJOIN zip_code ON member.zip = zip_code.zip_code\nWHERE zip_code.state = 'Illinois';",
    "1335": "SELECT spent\nFROM budget\nWHERE category = 'Advertisement'\nAND link_to_event = (\n    SELECT event_id\n    FROM event\n    WHERE event_name = 'September Meeting'\n);",
    "1336": "SELECT DISTINCT m.first_name, m.last_name, j.department\nFROM member m\nJOIN major j ON m.link_to_major = j.major_id\nWHERE (m.first_name = 'Pierce' AND m.last_name = 'Guidi')\n   OR (m.first_name = 'Guidi' AND m.last_name = 'Pierce');",
    "1337": "SELECT SUM(b.amount) AS total_budgeted_amount\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'October Speaker';",
    "1338": "SELECT e.expense_id, e.expense_description, e.approved\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'October Meeting'\n  AND ev.event_date = '2019-10-08';",
    "1339": "SELECT AVG(e.cost) AS average_cost\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE m.first_name = 'Elijah' AND m.last_name = 'Allen'\n  AND (SUBSTR(e.expense_date, 6, 2) = '09' OR SUBSTR(e.expense_date, 6, 2) = '10');",
    "1340": "WITH yearly_spent AS (\n    SELECT \n        SUBSTR(e.event_date, 1, 4) AS year,\n        SUM(b.spent) AS total_spent\n    FROM \n        event e\n    JOIN \n        budget b ON e.event_id = b.link_to_event\n    WHERE \n        SUBSTR(e.event_date, 1, 4) IN ('2019', '2020')\n    GROUP BY \n        year\n)\nSELECT \n    (SELECT total_spent FROM yearly_spent WHERE year = '2019') -\n    (SELECT total_spent FROM yearly_spent WHERE year = '2020') AS difference\n;",
    "1341": "SELECT location\nFROM event\nWHERE event_name = 'Spring Budget Review';",
    "1342": "SELECT e.cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'Posters'\n  AND ev.event_date = '2019-09-04'\n  AND e.expense_description = 'Posters'\n  AND e.expense_date = '2019-09-04';",
    "1343": "SELECT remaining\nFROM budget\nWHERE category = 'Food'\nORDER BY amount DESC\nLIMIT 1;",
    "1344": "SELECT notes\nFROM income\nWHERE source = 'Fundraising' AND date_received = '2019-09-14';",
    "1345": "SELECT COUNT(*) AS number_of_majors\nFROM major\nWHERE college = 'College of Humanities and Social Sciences';",
    "1346": "SELECT phone\nFROM member\nWHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
    "1347": "SELECT z.county\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Adela' AND m.last_name = \"O'Gallagher\";",
    "1348": "SELECT COUNT(*)\nFROM budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM event\n    WHERE event_name = 'November Meeting'\n)\nAND remaining < 0;",
    "1349": "SELECT SUM(b.amount) AS total_budget_amount\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.event_name = 'September Speaker';",
    "1350": "SELECT e.status\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.expense_description = 'Post Cards, Posters'\n  AND ex.expense_date = '2019-8-20';",
    "1351": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';",
    "1352": "SELECT COUNT(*) AS medium_tshirt_business_members\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Business'\n  AND member.t_shirt_size = 'Medium';",
    "1353": "SELECT z.type\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';",
    "1354": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.position = 'Vice President';",
    "1355": "SELECT z.state\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';",
    "1356": "SELECT major.department\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.position = 'President';",
    "1357": "SELECT i.date_received\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues';",
    "1358": "SELECT m.first_name, m.last_name\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE i.source = 'Dues'\nORDER BY i.date_received ASC\nLIMIT 1;",
    "1359": "SELECT \n    CASE \n        WHEN SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) = 0 \n        THEN NULL \n        ELSE SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) / \n             SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) \n    END AS ratio\nFROM \n    budget b\nJOIN \n    event e ON b.link_to_event = e.event_id\nWHERE \n    b.category = 'Advertisement'\n    AND e.event_name IN ('Yearly Kickoff', 'October Meeting');",
    "1360": "WITH event_id_cte AS (\n    SELECT event_id\n    FROM event\n    WHERE event_name = 'November Speaker'\n),\ntotal_budget_cte AS (\n    SELECT SUM(amount) AS total_budget\n    FROM budget\n    WHERE link_to_event = (SELECT event_id FROM event_id_cte)\n),\nparking_budget_cte AS (\n    SELECT SUM(amount) AS parking_budget\n    FROM budget\n    WHERE link_to_event = (SELECT event_id FROM event_id_cte) AND category = 'Parking'\n)\nSELECT \n    (parking_budget_cte.parking_budget * 100.0 / total_budget_cte.total_budget) AS parking_percentage\nFROM \n    parking_budget_cte, total_budget_cte;",
    "1361": "SELECT SUM(cost) AS total_pizza_cost\nFROM expense\nWHERE expense_description = 'Pizza';",
    "1362": "SELECT COUNT(DISTINCT city) \nFROM zip_code \nWHERE county = 'Orange County' \nAND state = 'Virginia';",
    "1363": "SELECT DISTINCT department\nFROM major\nWHERE college = 'College of Humanities and Social Sciences';",
    "1364": "SELECT z.city, z.county, z.state\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Amy' AND m.last_name = 'Firth';",
    "1365": "SELECT e.expense_id, e.expense_description, e.expense_date, e.cost, e.approved\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nWHERE b.remaining = (\n    SELECT MIN(remaining)\n    FROM budget\n);",
    "1366": "SELECT m.member_id, m.first_name, m.last_name, m.email, m.position, m.t_shirt_size, m.phone, m.zip, m.link_to_major\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'October Meeting';",
    "1367": "SELECT \n    major.college, \n    COUNT(member.member_id) AS member_count\nFROM \n    member\nJOIN \n    major ON member.link_to_major = major.major_id\nGROUP BY \n    major.college\nORDER BY \n    member_count DESC\nLIMIT 1;",
    "1368": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.phone = '809-555-3360';",
    "1369": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.amount = (\n    SELECT MAX(amount)\n    FROM budget\n);",
    "1370": "SELECT e.expense_id, e.expense_description, e.expense_date, e.cost, e.approved\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE m.position = 'Vice President';",
    "1371": "SELECT COUNT(*) AS number_of_attendees\nFROM attendance\nWHERE link_to_event = (\n    SELECT event_id\n    FROM event\n    WHERE event_name = 'Women''s Soccer'\n);",
    "1372": "SELECT i.date_received\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE m.first_name = 'Casey' AND m.last_name = 'Mason';",
    "1373": "SELECT COUNT(DISTINCT member.member_id) AS member_count\nFROM member\nJOIN zip_code ON member.zip = zip_code.zip_code\nWHERE zip_code.state = 'Maryland';",
    "1374": "SELECT COUNT(DISTINCT a.link_to_event) AS event_count\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nWHERE m.phone = '954-555-6240';",
    "1375": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.department = 'School of Applied Sciences, Technology and Education';",
    "1376": "SELECT e.event_id, e.event_name, MAX(b.spent / b.amount) AS max_spend_to_budget_ratio\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed'\nGROUP BY e.event_id, e.event_name\nORDER BY max_spend_to_budget_ratio DESC\nLIMIT 1;",
    "1377": "SELECT COUNT(*) AS number_of_presidents\nFROM member\nWHERE position = 'President';",
    "1378": "SELECT MAX(spent) AS highest_spent\nFROM budget;",
    "1379": "SELECT COUNT(*) \nFROM event \nWHERE type = 'Meeting' \nAND strftime('%Y', event_date) = '2020';",
    "1380": "SELECT SUM(spent) AS total_spent_for_food\nFROM budget\nWHERE category = 'Food';",
    "1381": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name\nFROM \n    attendance a\nJOIN \n    member m ON a.link_to_member = m.member_id\nGROUP BY \n    m.member_id\nHAVING \n    COUNT(a.link_to_event) > 7;",
    "1382": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE ma.major_name = 'Interior Design'\n  AND e.event_name = 'Community Theater';",
    "1383": "SELECT first_name || ' ' || last_name AS full_name\nFROM member\nJOIN zip_code ON member.zip = zip_code.zip_code\nWHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';",
    "1384": "SELECT SUM(i.amount) AS total_income\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour';",
    "1385": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE i.amount > 40;",
    "1386": "SELECT SUM(e.cost) AS total_expense\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'Yearly Kickoff';",
    "1387": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nJOIN member m ON ex.link_to_member = m.member_id\nWHERE e.event_name = 'Yearly Kickoff';",
    "1388": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    i.source,\n    i.amount\nFROM \n    income i\nJOIN \n    member m ON i.link_to_member = m.member_id\nWHERE \n    i.amount = (SELECT MAX(amount) FROM income);",
    "1389": "SELECT e.event_name\nFROM event e\nJOIN expense ex ON e.event_id = ex.link_to_budget\nWHERE ex.cost = (\n    SELECT MIN(cost)\n    FROM expense\n);",
    "1390": "SELECT \n    (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100 AS percentage_of_yearly_kickoff\nFROM \n    expense ex\nJOIN \n    budget b ON ex.link_to_budget = b.budget_id\nJOIN \n    event e ON b.link_to_event = e.event_id;",
    "1391": "SELECT \n    (SELECT COUNT(*) FROM member \n     JOIN major ON member.link_to_major = major.major_id \n     WHERE major.major_name = 'Finance') * 1.0 /\n    (SELECT COUNT(*) FROM member \n     JOIN major ON member.link_to_major = major.major_id \n     WHERE major.major_name = 'Physics') AS finance_to_physics_ratio;",
    "1392": "SELECT source, SUM(amount) AS total_amount\nFROM income\nWHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY source\nORDER BY total_amount DESC\nLIMIT 1;",
    "1393": "SELECT first_name || ' ' || last_name AS full_name, email\nFROM member\nWHERE position = 'Secretary';",
    "1394": "SELECT COUNT(*) AS number_of_members\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Physics Teaching';",
    "1395": "SELECT COUNT(DISTINCT a.link_to_member) AS member_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nWHERE e.event_name = 'Community Theater'\n  AND strftime('%Y', e.event_date) = '2019';",
    "1396": "SELECT \n    COUNT(a.link_to_event) AS events_attended,\n    m.major_name\nFROM \n    member AS mem\nJOIN \n    attendance AS a ON mem.member_id = a.link_to_member\nJOIN \n    major AS m ON mem.link_to_major = m.major_id\nWHERE \n    mem.first_name = 'Luisa' AND mem.last_name = 'Guidi'\nGROUP BY \n    m.major_name;",
    "1397": "SELECT AVG(spent) AS average_spent_on_food\nFROM budget\nWHERE category = 'Food' AND event_status = 'Closed';",
    "1398": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'Advertisement'\nORDER BY b.spent DESC\nLIMIT 1;",
    "1399": "SELECT \n    a.link_to_member, \n    a.link_to_event\nFROM \n    attendance a\nJOIN \n    member m ON a.link_to_member = m.member_id\nJOIN \n    event e ON a.link_to_event = e.event_id\nWHERE \n    m.first_name = 'Maya' \n    AND m.last_name = 'Mclean'\n    AND e.event_name = 'Women''s Soccer';",
    "1400": "SELECT \n    (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id)) AS community_service_percentage\nFROM \n    event\nWHERE \n    event_date BETWEEN '2019-01-01' AND '2019-12-31';",
    "1401": "SELECT e.cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters';",
    "1402": "SELECT t_shirt_size\nFROM member\nGROUP BY t_shirt_size\nORDER BY COUNT(t_shirt_size) DESC\nLIMIT 1;",
    "1403": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed' AND b.remaining < 0\nORDER BY b.remaining ASC\nLIMIT 1;",
    "1404": "SELECT \n    e.expense_description AS expense_type,\n    SUM(e.cost) AS total_value\nFROM \n    event ev\nJOIN \n    budget b ON ev.event_id = b.link_to_event\nJOIN \n    expense e ON b.budget_id = e.link_to_budget\nWHERE \n    ev.event_name = 'October Meeting'\n    AND e.approved = 'Yes'\nGROUP BY \n    e.expense_description;",
    "1405": "SELECT \n    category, \n    SUM(amount) AS total_amount\nFROM \n    budget\nWHERE \n    link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker')\nGROUP BY \n    category\nORDER BY \n    total_amount ASC;",
    "1406": "SELECT budget_id, amount\nFROM budget\nWHERE category = 'Food'\nORDER BY amount DESC\nLIMIT 1;",
    "1407": "SELECT budget_id, category, amount\nFROM budget\nWHERE category = 'Advertisement'\nORDER BY amount DESC\nLIMIT 3;",
    "1408": "SELECT SUM(cost) AS total_parking_cost\nFROM expense\nWHERE expense_description = 'Parking';",
    "1409": "SELECT SUM(cost) AS total_expense\nFROM expense\nWHERE expense_date = '2019-08-20';",
    "1410": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    SUM(e.cost) AS total_cost\nFROM \n    member m\nJOIN \n    expense e ON m.member_id = e.link_to_member\nWHERE \n    m.member_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY \n    m.first_name, m.last_name;",
    "1411": "SELECT e.expense_description\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';",
    "1412": "SELECT e.expense_description\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE m.t_shirt_size = 'X-Large';",
    "1413": "SELECT DISTINCT z.zip_code\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE e.cost < 50;",
    "1414": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';",
    "1415": "SELECT DISTINCT m.position\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Business';",
    "1416": "SELECT COUNT(*) AS number_of_members\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
    "1417": "SELECT DISTINCT e.type\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.remaining > 30;",
    "1418": "SELECT type\nFROM event\nWHERE location = 'MU 215';",
    "1419": "SELECT b.category\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.event_date = '2020-03-24T12:00:00';",
    "1420": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.position = 'Vice President';",
    "1421": "SELECT \n    (COUNT(CASE WHEN major.major_name = 'Business' THEN 1 END) * 100.0 / COUNT(member.member_id)) AS business_major_percentage\nFROM \n    member\nJOIN \n    major ON member.link_to_major = major.major_id;",
    "1422": "SELECT DISTINCT type\nFROM event\nWHERE location = 'MU 215';",
    "1423": "SELECT COUNT(*) \nFROM income \nWHERE amount = 50;",
    "1424": "SELECT COUNT(*) \nFROM member \nWHERE position = 'Member' \nAND t_shirt_size = 'X-Large';",
    "1425": "SELECT COUNT(*) AS number_of_majors\nFROM major\nWHERE department = 'School of Applied Sciences, Technology and Education'\n  AND college = 'College of Agriculture and Applied Sciences';",
    "1426": "SELECT \n    member.last_name, \n    major.department, \n    major.college\nFROM \n    member\nINNER JOIN \n    major ON member.link_to_major = major.major_id\nWHERE \n    major.major_name = 'Environmental Engineering';",
    "1427": "SELECT b.category\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.location = 'MU 215'\n  AND e.type = 'Guest Speaker'\n  AND b.spent = 0;",
    "1428": "SELECT z.city, z.state\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.position = 'Member'\n  AND ma.department = 'Electrical and Computer Engineering Department';",
    "1429": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nJOIN member m ON a.link_to_member = m.member_id\nWHERE e.type = 'Social'\n  AND e.location = '900 E. Washington St.'\n  AND m.position = 'Vice President';",
    "1430": "SELECT m.last_name, m.position\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE e.expense_description = 'Pizza'\n  AND e.expense_date = '2019-09-10';",
    "1431": "SELECT m.last_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer'\n  AND m.position = 'Member';",
    "1432": "WITH MediumMembers AS (\n    SELECT member_id\n    FROM member\n    WHERE t_shirt_size = 'Medium'\n),\nIncomeAmount50 AS (\n    SELECT link_to_member\n    FROM income\n    WHERE amount = 50\n)\nSELECT \n    (COUNT(DISTINCT im.link_to_member) * 100.0 / COUNT(DISTINCT mm.member_id)) AS percentage\nFROM \n    MediumMembers mm\nLEFT JOIN \n    IncomeAmount50 im ON mm.member_id = im.link_to_member;",
    "1433": "SELECT DISTINCT county\nFROM zip_code\nWHERE type = 'PO Box';",
    "1434": "SELECT zip_code\nFROM zip_code\nWHERE type = 'PO Box'\n  AND county = 'San Juan Municipio'\n  AND state = 'Puerto Rico';",
    "1435": "SELECT event_name\nFROM event\nWHERE type = 'Game'\n  AND status = 'Closed'\n  AND event_date BETWEEN '2019-03-15' AND '2020-03-20';",
    "1436": "SELECT DISTINCT a.link_to_event\nFROM expense e\nJOIN attendance a ON e.link_to_member = a.link_to_member\nWHERE e.cost > 50;",
    "1437": "SELECT \n    m.member_id,\n    m.first_name,\n    m.last_name,\n    a.link_to_event,\n    e.event_name\nFROM \n    expense ex\nJOIN \n    attendance a ON ex.link_to_member = a.link_to_member\nJOIN \n    member m ON ex.link_to_member = m.member_id\nJOIN \n    event e ON a.link_to_event = e.event_id\nWHERE \n    ex.approved = 'true'\n    AND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19';",
    "1438": "SELECT major.college\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.first_name = 'Katy'\n  AND member.link_to_major = 'rec1N0upiVLy5esTO';",
    "1439": "SELECT m.phone\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Business'\n  AND ma.college = 'College of Agriculture and Applied Sciences';",
    "1440": "SELECT m.email\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE e.cost > 20\n  AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19';",
    "1441": "SELECT COUNT(*) AS number_of_members\nFROM member\nWHERE link_to_major = (\n    SELECT major_id\n    FROM major\n    WHERE major_name = 'education'\n    AND college = 'Education & Human Services'\n);",
    "1442": "SELECT \n    (CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(event_id)) * 100 AS over_budget_percentage\nFROM \n    budget;",
    "1443": "SELECT event_id, location, status\nFROM event\nWHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';",
    "1444": "SELECT expense_description\nFROM expense\nGROUP BY expense_description\nHAVING AVG(cost) > 50;",
    "1445": "SELECT first_name || ' ' || last_name AS full_name\nFROM member\nWHERE t_shirt_size = 'X-Large';",
    "1446": "SELECT \n    (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS po_box_percentage\nFROM \n    zip_code;",
    "1447": "SELECT e.event_name, e.location\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.remaining > 0;",
    "1448": "SELECT e.event_name, e.event_date\nFROM event e\nJOIN expense ex ON e.event_id = ex.link_to_event\nWHERE ex.expense_description = 'Pizza'\n  AND ex.cost > 50\n  AND ex.cost < 100;",
    "1449": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    maj.major_name\nFROM \n    member m\nJOIN \n    expense e ON m.member_id = e.link_to_member\nJOIN \n    major maj ON m.link_to_major = maj.major_id\nWHERE \n    e.cost > 100;",
    "1450": "SELECT \n    z.city, \n    z.county\nFROM \n    event e\nJOIN \n    zip_code z ON e.location = z.zip_code\nJOIN \n    budget b ON e.event_id = b.link_to_event\nJOIN \n    income i ON b.budget_id = i.link_to_member\nGROUP BY \n    e.event_id, z.city, z.county\nHAVING \n    COUNT(i.income_id) > 40;",
    "1451": "WITH MemberExpense AS (\n    SELECT \n        e.link_to_member,\n        SUM(e.cost) AS total_expense\n    FROM \n        expense e\n    JOIN \n        (SELECT \n            link_to_member\n         FROM \n            expense\n         GROUP BY \n            link_to_member, link_to_event\n         HAVING \n            COUNT(DISTINCT link_to_event) > 1\n        ) AS multi_event_members\n    ON \n        e.link_to_member = multi_event_members.link_to_member\n    GROUP BY \n        e.link_to_member\n)\nSELECT \n    m.first_name,\n    m.last_name,\n    m.member_id,\n    me.total_expense\nFROM \n    MemberExpense me\nJOIN \n    member m ON me.link_to_member = m.member_id\nORDER BY \n    me.total_expense DESC\nLIMIT 1;",
    "1452": "SELECT AVG(e.cost) AS average_amount_paid\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE m.position != 'Member';",
    "1453": "WITH AverageParkingCost AS (\n    SELECT AVG(cost) AS avg_cost\n    FROM expense\n    WHERE expense_description = 'Parking'\n)\nSELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE ex.expense_description = 'Parking'\nAND ex.cost < (SELECT avg_cost FROM AverageParkingCost);",
    "1454": "SELECT \n    (SUM(b.spent) FILTER (WHERE e.type = 'Meeting') * 100.0 / SUM(b.spent)) AS meeting_cost_percentage\nFROM \n    event e\nJOIN \n    budget b ON e.event_id = b.link_to_event;",
    "1455": "SELECT e.link_to_budget\nFROM expense e\nWHERE e.expense_description = 'Water, chips, cookies'\nORDER BY e.cost DESC\nLIMIT 1;",
    "1456": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    SUM(e.cost) AS total_spent\nFROM \n    member m\nJOIN \n    expense e ON m.member_id = e.link_to_member\nGROUP BY \n    m.member_id\nORDER BY \n    total_spent DESC\nLIMIT 5;",
    "1457": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    m.phone AS contact_number\nFROM \n    member m\nJOIN \n    expense e ON m.member_id = e.link_to_member\nWHERE \n    e.cost > (SELECT AVG(cost) FROM expense);",
    "1458": "WITH total_members AS (\n    SELECT COUNT(*) AS total\n    FROM member\n),\nnj_members AS (\n    SELECT COUNT(*) AS nj_count\n    FROM member\n    JOIN zip_code ON member.zip = zip_code.zip_code\n    WHERE zip_code.state = 'New Jersey'\n),\nvt_members AS (\n    SELECT COUNT(*) AS vt_count\n    FROM member\n    JOIN zip_code ON member.zip = zip_code.zip_code\n    WHERE zip_code.state = 'Vermont'\n)\nSELECT \n    (CAST(nj_count AS REAL) / total * 100) - (CAST(vt_count AS REAL) / total * 100) AS percentage_difference\nFROM total_members, nj_members, vt_members;",
    "1459": "SELECT \n    major.major_name, \n    major.department\nFROM \n    member\nJOIN \n    major ON member.link_to_major = major.major_id\nWHERE \n    member.first_name = 'Garrett' \n    AND member.last_name = 'Gerke';",
    "1460": "SELECT \n    member.first_name || ' ' || member.last_name AS full_name,\n    expense.cost\nFROM \n    expense\nJOIN \n    member ON expense.link_to_member = member.member_id\nWHERE \n    expense.expense_description = 'Water, Veggie tray, supplies';",
    "1461": "SELECT m.last_name, m.phone\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Elementary Education';",
    "1462": "SELECT b.category, b.amount\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.event_name = 'January Speaker';",
    "1463": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'Food';",
    "1464": "SELECT \n    member.first_name || ' ' || member.last_name AS full_name,\n    income.amount\nFROM \n    income\nJOIN \n    member ON income.link_to_member = member.member_id\nWHERE \n    income.date_received = '9/9/2019';",
    "1465": "SELECT b.category\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nWHERE e.expense_description = 'Posters';",
    "1466": "SELECT \n    m.first_name || ' ' || m.last_name AS full_name,\n    maj.college\nFROM \n    member m\nJOIN \n    major maj ON m.link_to_major = maj.major_id\nWHERE \n    m.position = 'Secretary';",
    "1467": "SELECT \n    e.event_name,\n    SUM(b.spent) AS total_spent\nFROM \n    budget b\nJOIN \n    event e ON b.link_to_event = e.event_id\nWHERE \n    b.category = 'Speaker Gifts'\nGROUP BY \n    e.event_name;",
    "1468": "SELECT z.city\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';",
    "1469": "SELECT \n    member.first_name || ' ' || member.last_name AS full_name,\n    member.position\nFROM \n    member\nJOIN \n    zip_code ON member.zip = zip_code.zip_code\nWHERE \n    zip_code.city = 'Lincolnton' \n    AND zip_code.state = 'North Carolina' \n    AND zip_code.zip_code = 28092;",
    "1470": "SELECT COUNT(DISTINCT g.GasStationID) AS PremiumGasStationsInCZE\nFROM gasstations g\nJOIN transactions_1k t ON g.GasStationID = t.GasStationID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'CZE' AND p.Description = 'Premium';",
    "1471": "SELECT \n    (CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / \n     NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0)) AS EUR_to_CZK_Ratio\nFROM \n    customers;",
    "1472": "SELECT y.CustomerID, SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE SUBSTR(y.Date, 1, 4) = '2012' AND c.Segment = 'LAM'\nGROUP BY y.CustomerID\nORDER BY TotalConsumption ASC\nLIMIT 1;",
    "1473": "SELECT AVG(Consumption) / 12 AS Average_Monthly_Consumption\nFROM yearmonth\nJOIN customers ON yearmonth.CustomerID = customers.CustomerID\nWHERE customers.Segment = 'SME'\n  AND substr(yearmonth.Date, 1, 6) BETWEEN '201301' AND '201312';",
    "1474": "SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption\nFROM customers c\nJOIN yearmonth y ON c.CustomerID = y.CustomerID\nWHERE c.Currency = 'CZK'\n  AND y.Date BETWEEN '201101' AND '201112'\nGROUP BY c.CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;",
    "1475": "SELECT COUNT(DISTINCT y.CustomerID) AS NumberOfCustomers\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'KAM'\n  AND y.Date BETWEEN '201201' AND '201212'\nGROUP BY y.CustomerID\nHAVING SUM(y.Consumption) < 30000;",
    "1476": "SELECT \n    SUM(CASE WHEN c.Currency = 'CZK' THEN ym.Consumption ELSE 0 END) -\n    SUM(CASE WHEN c.Currency = 'EUR' THEN ym.Consumption ELSE 0 END) AS ConsumptionDifference\nFROM \n    yearmonth ym\nJOIN \n    customers c ON ym.CustomerID = c.CustomerID\nWHERE \n    SUBSTR(ym.Date, 1, 6) BETWEEN '201201' AND '201212';",
    "1477": "SELECT strftime('%Y', t.Date) AS Year, SUM(t.Amount) AS TotalGasUse\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR'\nGROUP BY Year\nORDER BY TotalGasUse DESC\nLIMIT 1;",
    "1478": "SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;",
    "1479": "SELECT \n    substr(y.Date, 1, 4) AS Year, \n    SUM(y.Consumption) AS TotalConsumption\nFROM \n    yearmonth y\nJOIN \n    customers c ON y.CustomerID = c.CustomerID\nWHERE \n    c.Currency = 'CZK'\nGROUP BY \n    Year\nORDER BY \n    TotalConsumption DESC\nLIMIT 1;",
    "1480": "SELECT \n    SUBSTR(y.Date, 5, 2) AS Month, \n    SUM(y.Consumption) AS TotalConsumption\nFROM \n    yearmonth y\nJOIN \n    customers c ON y.CustomerID = c.CustomerID\nWHERE \n    c.Segment = 'SME' \n    AND SUBSTR(y.Date, 1, 4) = '2013'\nGROUP BY \n    Month\nORDER BY \n    TotalConsumption DESC\nLIMIT 1;",
    "1481": "To solve this problem, we need to calculate the annual average consumption for customers with the least amount of consumption in each segment (SME, LAM, KAM) for the year 2013, specifically for transactions paid in CZK. Then, we will find the differences between these averages.\n\nHere's a step-by-step breakdown:\n\n1. **Filter Transactions for 2013 and CZK:**\n   - Join the `yearmonth` table with the `customers` table to get the segment information.\n   - Filter the `yearmonth` records for the year 2013.\n   - Join with the `transactions_1k` table to filter transactions paid in CZK.\n\n2. **Calculate Total Consumption for Each Customer:**\n   - Sum the `Consumption` for each `CustomerID` in each segment.\n\n3. **Identify the Customer with the Least Consumption in Each Segment:**\n   - Use the `MIN` function to find the customer with the least total consumption in each segment.\n\n4. **Calculate Annual Average Consumption for These Customers:**\n   - Divide the total consumption by 12 (months) for each of these customers.\n\n5. **Calculate Differences Between Segments:**\n   - Compute the differences between the annual averages of SME and LAM, LAM and KAM, and KAM and SME.\n\nHere's the SQL query to achieve this:\n\n```sqlite\nWITH Year2013_CZK AS (\n    SELECT ym.CustomerID, c.Segment, SUM(ym.Consumption) AS TotalConsumption\n    FROM yearmonth ym\n    JOIN customers c ON ym.CustomerID = c.CustomerID\n    JOIN transactions_1k t ON ym.CustomerID = t.CustomerID\n    WHERE ym.Date BETWEEN '201301' AND '201312'\n      AND c.Currency = 'CZK'\n    GROUP BY ym.CustomerID, c.Segment\n),\nLeastConsumption AS (\n    SELECT Segment, MIN(TotalConsumption) AS MinConsumption\n    FROM Year2013_CZK\n    GROUP BY Segment\n),\nAnnualAverage AS (\n    SELECT lc.Segment, lc.MinConsumption / 12.0 AS AnnualAverage\n    FROM LeastConsumption lc\n)\nSELECT \n    (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'SME') -\n    (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'LAM') AS SME_LAM_Difference,\n    (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'LAM') -\n    (SELECT AnnualAverage FROM",
    "1482": "WITH YearlyConsumption AS (\n    SELECT \n        y.CustomerID,\n        c.Segment,\n        SUBSTR(y.Date, 1, 4) AS Year,\n        SUM(y.Consumption) AS TotalConsumption\n    FROM \n        yearmonth y\n    JOIN \n        customers c ON y.CustomerID = c.CustomerID\n    WHERE \n        c.Currency = 'EUR'\n    GROUP BY \n        y.CustomerID, c.Segment, Year\n),\nConsumptionChange AS (\n    SELECT \n        yc2013.CustomerID,\n        yc2013.Segment,\n        (yc2013.TotalConsumption - IFNULL(yc2012.TotalConsumption, 0)) AS Increase,\n        yc2013.TotalConsumption AS Consumption2013\n    FROM \n        YearlyConsumption yc2013\n    LEFT JOIN \n        YearlyConsumption yc2012 ON yc2013.CustomerID = yc2012.CustomerID AND yc2012.Year = '2012'\n    WHERE \n        yc2013.Year = '2013'\n),\nPercentageIncrease AS (\n    SELECT \n        Segment,\n        (Increase / Consumption2013) * 100 AS PercentageIncrease\n    FROM \n        ConsumptionChange\n    WHERE \n        Consumption2013 > 0\n)\nSELECT \n    Segment,\n    AVG(PercentageIncrease) AS AvgPercentageIncrease\nFROM \n    PercentageIncrease\nGROUP BY \n    Segment\nORDER BY \n    AvgPercentageIncrease DESC;",
    "1483": "SELECT SUM(Consumption) AS TotalConsumption\nFROM yearmonth\nWHERE CustomerID = 6\n  AND Date BETWEEN '201308' AND '201311';",
    "1484": "SELECT \n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment IS NOT NULL) -\n    (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment IS NOT NULL) \n    AS Difference;",
    "1485": "SELECT \n    (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') -\n    (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference;",
    "1486": "WITH SME_Currency_Count AS (\n    SELECT \n        Currency,\n        COUNT(DISTINCT CustomerID) AS SME_Count\n    FROM \n        customers\n    WHERE \n        Segment = 'SME'\n    GROUP BY \n        Currency\n)\nSELECT \n    (SELECT SME_Count FROM SME_Currency_Count WHERE Currency = 'CZK') -\n    (SELECT SME_Count FROM SME_Currency_Count WHERE Currency = 'EUR') AS Difference\nFROM \n    SME_Currency_Count\nLIMIT 1;",
    "1487": "SELECT y.CustomerID, MAX(y.Consumption) AS MaxConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'LAM' \n  AND c.Currency = 'Euro' \n  AND y.Date = '201310'\nGROUP BY y.CustomerID\nORDER BY MaxConsumption DESC\nLIMIT 1;",
    "1488": "SELECT \n    y.CustomerID, \n    SUM(y.Consumption) AS TotalConsumption\nFROM \n    yearmonth y\nJOIN \n    customers c ON y.CustomerID = c.CustomerID\nWHERE \n    c.Segment = 'KAM'\nGROUP BY \n    y.CustomerID\nORDER BY \n    TotalConsumption DESC\nLIMIT 1;",
    "1489": "SELECT SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'KAM' AND y.Date = '201305';",
    "1490": "WITH LAM_Customers AS (\n    SELECT CustomerID\n    FROM customers\n    WHERE Segment = 'LAM'\n),\nLAM_Consumption_Above_46_73 AS (\n    SELECT DISTINCT CustomerID\n    FROM yearmonth\n    WHERE CustomerID IN (SELECT CustomerID FROM LAM_Customers)\n    AND Consumption > 46.73\n),\nTotal_LAM_Customers AS (\n    SELECT COUNT(*) AS Total\n    FROM LAM_Customers\n),\nLAM_Customers_Above_46_73 AS (\n    SELECT COUNT(*) AS CountAbove\n    FROM LAM_Consumption_Above_46_73\n)\nSELECT \n    (CAST(LAM_Customers_Above_46_73.CountAbove AS REAL) / Total_LAM_Customers.Total) * 100 AS Percentage\nFROM \n    LAM_Customers_Above_46_73, Total_LAM_Customers;",
    "1491": "WITH AvgPricePerProduct AS (\n    SELECT \n        ProductID,\n        AVG(Price) AS AvgPrice\n    FROM \n        transactions_1k\n    GROUP BY \n        ProductID\n),\nValueForMoneyStations AS (\n    SELECT DISTINCT \n        t.GasStationID\n    FROM \n        transactions_1k t\n    JOIN \n        AvgPricePerProduct a ON t.ProductID = a.ProductID\n    WHERE \n        t.Price < a.AvgPrice\n)\nSELECT \n    g.Country,\n    COUNT(DISTINCT v.GasStationID) AS ValueForMoneyStationsCount\nFROM \n    ValueForMoneyStations v\nJOIN \n    gasstations g ON v.GasStationID = g.GasStationID\nGROUP BY \n    g.Country\nORDER BY \n    ValueForMoneyStationsCount DESC;",
    "1492": "SELECT \n    (CAST(SUM(CASE WHEN Currency = 'Euro' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS Percentage_KAM_Uses_Euro\nFROM \n    customers\nWHERE \n    Segment = 'KAM';",
    "1493": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN Consumption > 528.3 THEN CustomerID END) AS REAL) / \n     COUNT(DISTINCT CustomerID)) * 100 AS Percentage\nFROM \n    yearmonth\nWHERE \n    Date = '201202';",
    "1494": "SELECT \n    (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS PremiumPercentage\nFROM \n    gasstations\nWHERE \n    Country = 'Slovakia';",
    "1495": "SELECT CustomerID\nFROM yearmonth\nWHERE Date = '201309'\nORDER BY Consumption DESC\nLIMIT 1;",
    "1496": "SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE y.Date = '201309'\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;",
    "1497": "SELECT c.CustomerID, MIN(y.Consumption) AS MinConsumption\nFROM customers c\nJOIN yearmonth y ON c.CustomerID = y.CustomerID\nWHERE c.Segment = 'SME' AND y.Date = '201206'\nGROUP BY c.CustomerID\nORDER BY MinConsumption ASC\nLIMIT 1;",
    "1498": "SELECT \n    MAX(monthly_consumption) AS highest_monthly_consumption\nFROM (\n    SELECT \n        SUBSTR(Date, 5, 2) AS month,\n        SUM(Consumption) AS monthly_consumption\n    FROM \n        yearmonth\n    WHERE \n        SUBSTR(Date, 1, 4) = '2012'\n    GROUP BY \n        month\n);",
    "1499": "SELECT MAX(SUM(ym.Consumption) / 12) AS MaxMonthlyConsumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro'\nGROUP BY ym.CustomerID, strftime('%Y-%m', ym.Date);",
    "1500": "SELECT DISTINCT p.Description\nFROM transactions_1k t\nJOIN yearmonth y ON t.CustomerID = y.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE y.Date LIKE '201309%';",
    "1501": "SELECT DISTINCT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date LIKE '201306%'",
    "1502": "SELECT DISTINCT g.ChainID\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE c.Currency = 'euro';",
    "1503": "SELECT DISTINCT p.Description\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE c.Currency = 'euro';",
    "1504": "SELECT AVG(Amount * Price) AS AverageTotalPrice\nFROM transactions_1k\nWHERE Date LIKE '2012-01%';",
    "1505": "SELECT COUNT(DISTINCT ym.CustomerID) AS EuroCustomersOver1000\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR' AND ym.Consumption > 1000;",
    "1506": "SELECT DISTINCT p.Description\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'CZE';",
    "1507": "SELECT DISTINCT t.Time\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.ChainID = 11;",
    "1508": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'CZE' AND t.Price > 1000;",
    "1509": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'CZE' AND t.Date > '2012-01-01';",
    "1510": "SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'CZE';",
    "1511": "SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro';",
    "1512": "SELECT \n    t.CustomerID, \n    SUM(t.Amount * t.Price) AS TotalPaid\nFROM \n    transactions_1k t\nJOIN \n    customers c ON t.CustomerID = c.CustomerID\nWHERE \n    t.Date = '2012-08-25'\nGROUP BY \n    t.CustomerID\nORDER BY \n    TotalPaid DESC\nLIMIT 1;",
    "1513": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-25'\nORDER BY t.Time ASC\nLIMIT 1;",
    "1514": "SELECT c.Currency\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';",
    "1515": "SELECT c.Segment\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';",
    "1516": "SELECT COUNT(t.TransactionID) AS TransactionCount\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-26'\n  AND t.Time < '13:00:00'\n  AND c.Currency = 'CZK';",
    "1517": "SELECT Segment\nFROM customers\nWHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);",
    "1518": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';",
    "1519": "SELECT ProductID\nFROM transactions_1k\nWHERE Date = '2012-08-23' AND Time = '21:20:00';",
    "1520": "SELECT \n    Date,\n    SUM(Price * Amount) AS TotalExpense\nFROM \n    transactions_1k\nWHERE \n    CustomerID = (\n        SELECT \n            CustomerID\n        FROM \n            transactions_1k\n        WHERE \n            Date = '2012-08-24' AND \n            Price * Amount = 124.05\n    )\n    AND Date BETWEEN '2012-01-01' AND '2012-01-31'\nGROUP BY \n    Date;",
    "1521": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-26'\n  AND t.Time BETWEEN '08:00:00' AND '09:00:00'\n  AND g.Country = 'CZE';",
    "1522": "SELECT c.Currency\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE ym.Date = '201306' AND ym.Consumption = 214582.17;",
    "1523": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.CardID = 667467;",
    "1524": "SELECT g.Country\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24'\nAND t.Amount * t.Price = 548.4;",
    "1525": "SELECT \n    (CAST(COUNT(DISTINCT c_eur.CustomerID) AS REAL) / COUNT(DISTINCT c_all.CustomerID)) * 100 AS Percentage_EUR_Customers\nFROM \n    transactions_1k t\nJOIN \n    customers c_all ON t.CustomerID = c_all.CustomerID\nLEFT JOIN \n    customers c_eur ON t.CustomerID = c_eur.CustomerID AND c_eur.Currency = 'EUR'\nWHERE \n    t.Date = '2012-08-25';",
    "1526": "WITH CustomerIDOnDate AS (\n    SELECT CustomerID\n    FROM transactions_1k\n    WHERE Date = '2012-08-25'\n    GROUP BY CustomerID\n    HAVING SUM(Price) = 634.8\n),\nConsumption2012 AS (\n    SELECT CustomerID, SUM(Consumption) AS TotalConsumption2012\n    FROM yearmonth\n    WHERE Date LIKE '2012-%'\n    AND CustomerID IN (SELECT CustomerID FROM CustomerIDOnDate)\n    GROUP BY CustomerID\n),\nConsumption2013 AS (\n    SELECT CustomerID, SUM(Consumption) AS TotalConsumption2013\n    FROM yearmonth\n    WHERE Date LIKE '2013-%'\n    AND CustomerID IN (SELECT CustomerID FROM CustomerIDOnDate)\n    GROUP BY CustomerID\n)\nSELECT c2012.CustomerID,\n       (c2012.TotalConsumption2012 - c2013.TotalConsumption2013) / c2012.TotalConsumption2012 AS ConsumptionDecreaseRate\nFROM Consumption2012 c2012\nJOIN Consumption2013 c2013 ON c2012.CustomerID = c2013.CustomerID;",
    "1527": "SELECT GasStationID, SUM(Amount * Price) AS TotalRevenue\nFROM transactions_1k\nGROUP BY GasStationID\nORDER BY TotalRevenue DESC\nLIMIT 1;",
    "1528": "WITH TotalCustomers AS (\n    SELECT DISTINCT c.CustomerID\n    FROM customers c\n    JOIN gasstations g ON c.Segment = g.Segment\n    WHERE g.Country = 'SVK'\n),\nPremiumCustomers AS (\n    SELECT DISTINCT c.CustomerID\n    FROM customers c\n    JOIN gasstations g ON c.Segment = g.Segment\n    WHERE g.Country = 'SVK' AND c.Segment = 'premium'\n)\nSELECT \n    (COUNT(DISTINCT p.CustomerID) * 100.0 / COUNT(DISTINCT t.CustomerID)) AS PremiumPercentage\nFROM \n    TotalCustomers t\nLEFT JOIN \n    PremiumCustomers p ON t.CustomerID = p.CustomerID;",
    "1529": "SELECT \n    SUM(CASE WHEN Date LIKE '201201%' THEN Price ELSE 0 END) AS Amount_Spent_Jan_2012,\n    SUM(Price) AS Total_Amount_Spent\nFROM \n    transactions_1k\nWHERE \n    CustomerID = 38508;",
    "1530": "SELECT p.Description, SUM(t.Amount) AS TotalAmount\nFROM transactions_1k t\nJOIN products p ON t.ProductID = p.ProductID\nGROUP BY t.ProductID\nORDER BY TotalAmount DESC\nLIMIT 5;",
    "1531": "WITH CustomerSpending AS (\n    SELECT \n        t.CustomerID,\n        SUM(t.Price) AS TotalSpending\n    FROM \n        transactions_1k t\n    GROUP BY \n        t.CustomerID\n),\nTopCustomer AS (\n    SELECT \n        cs.CustomerID,\n        cs.TotalSpending\n    FROM \n        CustomerSpending cs\n    ORDER BY \n        cs.TotalSpending DESC\n    LIMIT 1\n)\nSELECT \n    tc.CustomerID,\n    tc.TotalSpending,\n    SUM(t.Price) / SUM(t.Amount) AS AvgPricePerItem,\n    c.Currency\nFROM \n    TopCustomer tc\nJOIN \n    transactions_1k t ON tc.CustomerID = t.CustomerID\nJOIN \n    customers c ON tc.CustomerID = c.CustomerID\nGROUP BY \n    tc.CustomerID, c.Currency;",
    "1532": "SELECT g.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.ProductID = 2\nORDER BY t.Price DESC\nLIMIT 1;",
    "1533": "SELECT y.CustomerID, y.Consumption\nFROM transactions_1k t\nJOIN yearmonth y ON t.CustomerID = y.CustomerID\nWHERE t.ProductID = 5\n  AND (t.Price / t.Amount) > 29.00\n  AND y.Date = '201208';"
}