{
    "0": "SELECT movie_title\nFROM movies\nWHERE movie_release_year = 1945\nORDER BY movie_popularity DESC;",
    "1": "SELECT movie_title, movie_release_year, director_name\nFROM movies\nWHERE movie_popularity = (SELECT MAX(movie_popularity) FROM movies)",
    "2": "SELECT movie_title, movie_release_year\nFROM movies\nORDER BY LENGTH(movie_title) DESC\nLIMIT 1;",
    "3": "SELECT \n    movies.movie_id, \n    movies.movie_title, \n    SUM(ratings.rating_score) AS total_rating_score\nFROM \n    movies\nJOIN \n    ratings ON movies.movie_id = ratings.movie_id\nGROUP BY \n    movies.movie_id\nORDER BY \n    total_rating_score DESC\nLIMIT 1;",
    "4": "SELECT AVG(movie_popularity) AS average_lovers\nFROM movies\nWHERE director_name = 'Stanley Kubrick'",
    "5": "SELECT AVG(rating_score) AS average_rating\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = 'When Will I Be Loved';",
    "6": "SELECT \n    ru.user_avatar_image_url,\n    m.movie_title\nFROM \n    ratings_users ru\nJOIN \n    ratings r ON ru.user_id = r.user_id\nJOIN \n    movies m ON r.movie_id = m.movie_id\nWHERE \n    ru.user_id = 41579158\nORDER BY \n    r.rating_timestamp_utc DESC\nLIMIT 1;",
    "7": "SELECT \n    (CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_of_ratings_by_subscribers\nFROM ratings",
    "8": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_timestamp_utc LIKE '%2020-04-%'\nAND r.user_trialist = 1",
    "9": "SELECT ru.user_id\nFROM ratings_users ru\nJOIN ratings r ON ru.user_id = r.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'Love Will Tear Us Apart' AND r.rating_score = 1",
    "10": "SELECT m.movie_title, m.movie_popularity\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_score = 5",
    "11": "SELECT DISTINCT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_timestamp_utc LIKE '%2020%'\nAND r.rating_score >= 4",
    "12": "SELECT m.movie_title, ru.user_id, r.rating_score, r.critic, r.critic_comments\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN ratings_users ru ON r.user_id = ru.user_id\nWHERE r.critic IS NOT NULL",
    "13": "SELECT \n    (CAST(SUM(CASE WHEN rating_score = 5 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(rating_score)) * 100 AS percentage_of_highest_ratings\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'Welcome to the Dollhouse'",
    "14": "SELECT\n    (CAST(SUM(CASE WHEN m.movie_release_year = 2021 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(r.rating_id)) * 100 AS percentage\nFROM\n    ratings r\nJOIN\n    movies m ON r.movie_id = m.movie_id",
    "15": "SELECT director_name\nFROM movies\nWHERE movie_title = 'Sex, Drink and Bloodshed';",
    "16": "SELECT list_title\nFROM lists\nORDER BY list_followers DESC\nLIMIT 1;",
    "17": "SELECT list_url\nFROM lists\nWHERE list_followers BETWEEN 1 AND 2\nAND list_update_timestamp_utc BETWEEN '2012-01-01' AND '2012-12-31';",
    "18": "SELECT list_id\nFROM lists_users\nWHERE user_id = 85981819\nORDER BY list_creation_date_utc\nLIMIT 1;",
    "19": "SELECT COUNT(DISTINCT ratings.user_id) AS low_rating_users\nFROM ratings\nJOIN ratings_users ON ratings.user_id = ratings_users.user_id\nWHERE ratings.movie_id = 1269\nAND ratings.rating_score <= 2\nAND ratings_users.user_has_payment_method = 1\nAND ratings_users.user_eligible_for_trial = 1",
    "20": "SELECT movie_title, movie_popularity\nFROM movies\nWHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'",
    "21": "SELECT movie_release_year, director_name\nFROM movies\nORDER BY movie_release_year ASC\nLIMIT 1;",
    "22": "WITH consecutive_years AS (\n    SELECT\n        user_id,\n        list_creation_date_utc,\n        strftime('%Y', list_creation_date_utc) AS year,\n        LEAD(strftime('%Y', list_creation_date_utc), 1) OVER (PARTITION BY user_id ORDER BY strftime('%Y', list_creation_date_utc)) AS next_year,\n        user_subscriber\n    FROM lists_users\n),\nfiltered_users AS (\n    SELECT\n        user_id,\n        COUNT(*) AS consecutive_count\n    FROM consecutive_years\n    WHERE\n        user_subscriber = 1\n        AND CAST(next_year AS INTEGER) - CAST(year AS INTEGER) = 1\n    GROUP BY user_id\n    HAVING consecutive_count >= 9 -- Since we're counting transitions, 10 years have 9 transitions\n)\nSELECT\n    user_id\nFROM filtered_users",
    "23": "SELECT COUNT(*) AS users_count\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'Pavee Lackeen: The Traveller Girl' AND ratings.rating_score = 4;",
    "24": "SELECT \n    lu.user_eligible_for_trial, \n    l.list_followers\nFROM \n    lists l\nJOIN \n    lists_users lu ON l.user_id = lu.user_id\nWHERE \n    l.list_title = 'World War 2 and Kids'",
    "25": "WITH TarantinoMovies AS (\n    SELECT movie_id, movie_title, movie_release_year\n    FROM movies\n    WHERE director_name = 'Quentin Tarantino'\n    ORDER BY movie_release_year ASC\n    LIMIT 1 OFFSET 2 -- This skips the first two movies and gets the third one\n),\nRatedFour AS (\n    SELECT movie_id\n    FROM ratings\n    WHERE rating_score = 4\n)\nSELECT r.user_id\nFROM RatedFour rf\nJOIN TarantinoMovies tm ON rf.movie_id = tm.movie_id\nJOIN ratings r ON rf.movie_id = r.movie_id",
    "26": "SELECT m.director_url\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = 2452551 AND r.critic_likes = 39",
    "27": "SELECT AVG(r.rating_score) AS average_rating_score, m.director_name\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'When Will I Be Loved'",
    "28": "SELECT \n    l.list_movie_number, \n    lu.user_has_payment_method\nFROM \n    lists l\nJOIN \n    lists_users lu ON l.user_id = lu.user_id\nWHERE \n    l.list_movie_number = (SELECT MAX(list_movie_number) FROM lists)\nLIMIT 1;",
    "29": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nORDER BY r.critic_likes DESC\nLIMIT 1",
    "30": "SELECT \n    m.movie_popularity, \n    MIN(r.rating_timestamp_utc) AS first_rating_timestamp\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nWHERE \n    m.movie_release_year BETWEEN 1920 AND 1929\n    AND r.rating_score = 1\n    AND r.user_has_payment_method = 1\n    AND m.movie_popularity = (\n        SELECT \n            MAX(movie_popularity) \n        FROM \n            movies \n        WHERE \n            movie_release_year BETWEEN 1920 AND 1929\n    )\nGROUP BY \n    m.movie_popularity",
    "31": "SELECT \n    m.movie_id, \n    m.movie_title, \n    MAX(r.critic_likes) AS highest_critic_likes\nFROM \n    movies m\nLEFT JOIN \n    ratings r ON m.movie_id = r.movie_id\nWHERE \n    m.director_name = 'Francis Ford Coppola' \n    AND m.movie_popularity > 1000\nGROUP BY \n    m.movie_id",
    "32": "SELECT ru.user_avatar_image_url\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id\nWHERE r.movie_id = 1103 AND r.rating_score = 5 AND r.rating_timestamp_utc = '4/19/2020'",
    "33": "SELECT \n    l.list_followers, \n    lu.user_subscriber \nFROM \n    lists l\nJOIN \n    lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id\nWHERE \n    l.user_id = 4208563\nORDER BY \n    l.list_followers DESC\nLIMIT 1;",
    "34": "WITH MovieReleaseCounts AS (\n    SELECT\n        movie_release_year,\n        COUNT(movie_id) AS movie_count\n    FROM\n        movies\n    GROUP BY\n        movie_release_year\n),\nYearWithLeastMovies AS (\n    SELECT\n        movie_release_year\n    FROM\n        MovieReleaseCounts\n    ORDER BY\n        movie_count ASC\n    LIMIT 1\n),\nMoviesFromLeastYear AS (\n    SELECT\n        m.movie_id,\n        m.movie_title,\n        m.movie_release_year\n    FROM\n        movies m\n    JOIN\n        YearWithLeastMovies y ON m.movie_release_year = y.movie_release_year\n),\nRatingScores AS (\n    SELECT\n        r.movie_id,\n        COUNT(r.rating_id) AS rating_count\n    FROM\n        ratings r\n    WHERE\n        r.rating_score = 1\n    GROUP BY\n        r.movie_id\n),\nHighestRatedMovie AS (\n    SELECT\n        m.movie_title,\n        m.movie_release_year,\n        rs.rating_count\n    FROM\n        MoviesFromLeastYear m\n    JOIN\n        RatingScores rs ON m.movie_id = rs.movie_id\n    ORDER BY\n        rs.rating_count DESC\n    LIMIT 1\n)\nSELECT\n    movie_title,\n    movie_release_year\nFROM\n    HighestRatedMovie;",
    "35": "SELECT COUNT(DISTINCT ratings.user_id) AS user_count\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nJOIN ratings_users ON ratings.user_id = ratings_users.user_id\nWHERE movies.movie_release_year = 1924\nAND movies.director_name = 'Erich von Stroheim'\nAND ratings.rating_score = 5\nAND ratings_users.user_has_payment_method = 1",
    "36": "SELECT AVG(list_movie_number) AS average_movies, user_avatar_image_url\nFROM lists\nJOIN lists_users ON lists.user_id = lists_users.user_id\nWHERE lists.user_id = 8516503",
    "37": "SELECT COUNT(DISTINCT ratings.user_id) AS user_count, ratings.rating_url\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = \"The Magnificent Ambersons\" AND ratings.rating_score <= 2\nGROUP BY ratings.rating_url",
    "38": "SELECT \n    lu.user_id\nFROM \n    lists_users lu\nJOIN \n    lists l ON lu.user_id = l.user_id AND lu.list_id = l.list_id\nWHERE \n    l.list_creation_timestamp_utc BETWEEN '2016-02-01' AND '2016-02-29'\n    AND lu.user_eligible_for_trial = '1'\nORDER BY \n    l.list_followers DESC\nLIMIT 1;",
    "39": "SELECT rating_url\nFROM ratings\nWHERE user_id = 22030372\nORDER BY rating_score DESC\nLIMIT 1",
    "40": "Given the complexity of the question and the need to accurately address each part, it's important to break down the task into manageable steps. However, it's crucial to note that the provided schema does not directly support tracking which movies received ratings, nor does it include a direct relationship between movies and their ratings. Additionally, the `ratings` table schema seems to have some inconsistencies, such as the foreign key references that might not align with the provided table structures (e.g., referencing `ratings(rating_id)` within the same table). Despite these challenges, I'll provide a conceptual SQL query based on the assumption that there's a way to correlate movies with their ratings and that the schema supports these operations.\n\nThe task requires:\n1. Identifying directors who have directed at least 10 movies between 1960 and 1985.\n2. For each of these directors, find the name of the movie(s) they directed in those years that received the highest number of 5-star ratings.\n\nGiven the schema and task requirements, a direct SQL query to accomplish this in one step as requested isn't feasible without making several assumptions. However, I'll outline a conceptual approach that would work with a more detailed schema that includes direct relationships between movies, directors, and ratings.\n\n```sqlite\nWITH DirectorMovies AS (\n    SELECT\n        director_name,\n        COUNT(movie_id) AS movie_count\n    FROM\n        movies\n    WHERE\n        movie_release_year BETWEEN 1960 AND 1985\n    GROUP BY\n        director_name\n    HAVING\n        movie_count >= 10\n),\nTopRatedMovies AS (\n    SELECT\n        m.director_name,\n        m.movie_id,\n        m.movie_title,\n        COUNT(r.rating_id) AS five_star_ratings\n    FROM\n        movies m\n    JOIN ratings r ON m.movie_id = r.movie_id\n    WHERE\n        r.rating_score = 5\n        AND m.movie_release_year BETWEEN 1960 AND 1985\n        AND m.director_name IN (SELECT director_name FROM DirectorMovies)\n    GROUP BY\n        m.director_name, m.movie_id\n    ORDER BY\n        m.director_name, five_star_ratings DESC\n)\nSELECT\n    DISTINCT dm.director_name,\n    tm.movie_title,\n    MAX(tm.five_star_ratings) AS max_five_star_ratings\nFROM\n    DirectorMovies dm\nJOIN\n    TopRatedMovies tm ON dm.director_name = tm.director_name\nGROUP BY",
    "41": "SELECT COUNT(DISTINCT ratings.user_id) AS non_trialist_users_low_rating\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = \"The South\"\nAND ratings.rating_score <= 2\nAND ratings.user_trialist = 0",
    "42": "SELECT critic_likes\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = 'Apocalypse Now' AND rating_score = 5",
    "43": "SELECT AVG(r.rating_score) AS Average, m.director_name\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = \"The Crowd\"",
    "44": "WITH DirectorMovieCount AS (\n    SELECT director_id, COUNT(movie_id) AS movie_count\n    FROM movies\n    GROUP BY director_id\n    ORDER BY movie_count DESC\n    LIMIT 1\n), FirstMovie AS (\n    SELECT m.movie_release_year\n    FROM movies m\n    JOIN DirectorMovieCount dmc ON m.director_id = dmc.director_id\n    ORDER BY m.movie_release_year ASC\n    LIMIT 1\n), UserCommentsCount AS (\n    SELECT r.user_id, SUM(critic_comments) AS total_comments\n    FROM ratings r\n    GROUP BY r.user_id\n    ORDER BY total_comments DESC\n    LIMIT 1\n)\nSELECT fm.movie_release_year, ucc.user_id\nFROM FirstMovie fm, UserCommentsCount ucc;",
    "45": "SELECT \n    m.movie_title, \n    MAX(r.rating_score) AS highest_rating_score\nFROM \n    movies m\nLEFT JOIN \n    ratings r ON m.movie_id = r.movie_id\nWHERE \n    m.movie_popularity BETWEEN 401 AND 499\nGROUP BY \n    m.movie_title",
    "46": "SELECT rating_url\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE critic_likes = 20\nAND user_id = 45579900\nAND movie_title = \"The Vertical Ray of the Sun\"",
    "47": "SELECT \n    m.movie_title,\n    AVG(m.movie_popularity) AS average_popularity,\n    COUNT(r.rating_score) AS five_star_ratings\nFROM \n    movies m\nLEFT JOIN \n    ratings r ON m.movie_id = r.movie_id AND r.rating_score = 5\nWHERE \n    m.director_name = 'Christopher Nolan'\nGROUP BY \n    m.movie_id\nORDER BY \n    five_star_ratings DESC,\n    average_popularity DESC\nLIMIT 1;",
    "48": "SELECT \n    m.movie_title,\n    AVG(r.rating_score) AS average_rating_score\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nJOIN \n    lists_users lu ON r.user_id = lu.user_id\nJOIN \n    lists l ON lu.list_id = l.list_id\nWHERE \n    l.list_title = '100 Greatest Living American Filmmakers'\n    AND r.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31'\nGROUP BY \n    m.movie_title",
    "49": "SELECT AVG(rating_score) AS average_rating_score, movie_release_year\nFROM movies\nLEFT JOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_title = 'Pavee Lackeen: The Traveller Girl'",
    "50": "SELECT COUNT(*) \nFROM lists \nWHERE strftime('%s', list_update_timestamp_utc) > strftime('%s', list_creation_timestamp_utc) + (10 * 365 * 24 * 60 * 60);",
    "51": "SELECT list_description FROM lists WHERE list_title = \"Short and pretty damn sweet\";",
    "52": "SELECT list_url\nFROM lists\nWHERE list_title = 'Short and pretty damn sweet'",
    "53": "SELECT COUNT(*) \nFROM lists \nWHERE list_update_timestamp_utc > '2010-01-01' \nAND list_followers > 200;",
    "54": "SELECT COUNT(*) AS lists_created_by_subscriber\nFROM lists_users\nWHERE user_id = 83373278 AND user_subscriber = 1;",
    "55": "SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena';",
    "56": "SELECT movie_url FROM movies WHERE movie_title = 'La Antena';",
    "57": "SELECT movie_title, movie_popularity \nFROM movies \nWHERE movie_title IN ('The General', 'Il grido') \nORDER BY movie_popularity DESC \nLIMIT 1;",
    "58": "SELECT COUNT(*) AS Hong_Sang_soo_Movies\nFROM movies\nWHERE director_name = 'Hong Sang-soo';",
    "59": "SELECT user_trialist\nFROM lists\nJOIN lists_users ON lists.user_id = lists_users.user_id\nWHERE list_title = '250 Favourite Films'",
    "60": "SELECT list_title\nFROM lists\nJOIN lists_users ON lists.user_id = lists_users.user_id\nWHERE lists_users.user_id = 32172230\nAND lists_users.user_eligible_for_trial = '1'",
    "61": "SELECT COUNT(*) AS lists_over_100_movies\nFROM lists\nJOIN lists_users ON lists.user_id = lists_users.user_id AND lists.list_id = lists_users.list_id\nWHERE lists.list_movie_number > 100\nAND lists_users.user_id = 85981819\nAND lists_users.user_has_payment_method = '1'",
    "62": "SELECT list_description\nFROM lists\nWHERE user_id = 85981819\nORDER BY list_followers DESC\nLIMIT 1",
    "63": "SELECT list_update_timestamp_utc\nFROM lists\nWHERE list_title = '250 Favourite Films'",
    "64": "SELECT lu.user_avatar_image_url\nFROM lists_users lu\nJOIN lists l ON lu.user_id = l.user_id\nWHERE l.list_title = '250 Favourite Films'",
    "65": "SELECT COUNT(*) - 1 AS additional_movie_lists_created\nFROM lists\nWHERE user_id = (\n    SELECT user_id\n    FROM lists\n    WHERE list_title = '250 Favourite Films'\n)",
    "66": "SELECT COUNT(DISTINCT ratings.user_id) AS users_liked_to_highest_extent\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'A Way of Life' AND ratings.rating_score = 5;",
    "67": "SELECT r.critic\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'A Way of Life'",
    "68": "SELECT COUNT(*) AS critics_with_more_than_one_like\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'Imitation of Life' AND ratings.critic_likes > 1",
    "69": "SELECT r.user_id\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'When Will I Be Loved'\nAND r.critic_comments = 2",
    "70": "SELECT rating_timestamp_utc\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'A Way of Life' AND ratings.user_id = 39115684",
    "71": "SELECT rating_url\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'When Will I Be Loved' AND ratings.user_id = 39115684;",
    "72": "SELECT \n    CASE \n        WHEN user_trialist = 1 THEN 'Yes'\n        ELSE 'No'\n    END AS was_user_a_trialist\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE user_id = 39115684 AND movie_title = 'A Way of Life'",
    "73": "SELECT COUNT(DISTINCT ratings.user_id) AS trialist_users_count\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'A Way of Life' AND ratings.user_trialist = 1;",
    "74": "SELECT rating_url\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = 'A Way of Life' AND critic IS NOT NULL;",
    "75": "SELECT COUNT(DISTINCT r.user_id) AS user_count\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies);",
    "76": "SELECT movies.movie_title\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE ratings.user_id = 58149469\nAND ratings.critic_likes = 1\nAND ratings.critic_comments = 2",
    "77": "SELECT COUNT(*) AS count_of_users_rated_1\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = \"When Will I Be Loved\"\nAND ratings.user_trialist = 1\nAND ratings.rating_score = 1",
    "78": "SELECT COUNT(*) \nFROM ratings \nJOIN movies ON ratings.movie_id = movies.movie_id \nWHERE movies.movie_title = 'A Way of Life' \nAND strftime('%Y', ratings.rating_timestamp_utc) > '2011'",
    "79": "SELECT r.rating_score\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nJOIN lists_users lu ON r.user_id = lu.user_id\nJOIN lists l ON lu.list_id = l.list_id\nWHERE m.movie_title = 'Innocence Unprotected'\nAND l.list_title = '250 Favourite Films';",
    "80": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN lists l ON r.user_id = l.user_id\nWHERE l.list_title = '250 Favourite Films';",
    "81": "SELECT AVG(rating_score) AS average_rating_score\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = 'A Way of Life'",
    "82": "SELECT \n    (CAST(COUNT(rating_id) FILTER (WHERE rating_score = 1) AS FLOAT) / COUNT(rating_id)) * 100 AS percentage\nFROM \n    ratings\nJOIN \n    movies ON ratings.movie_id = movies.movie_id\nWHERE \n    movies.movie_title = 'When Will I Be Loved'",
    "83": "WITH MovieRatings AS (\n    SELECT\n        m.movie_title,\n        AVG(r.rating_score) AS avg_rating_score\n    FROM\n        movies m\n    JOIN ratings r ON m.movie_id = r.movie_id\n    WHERE\n        m.movie_title IN ('Innocence Unprotected', 'When Will I Be Loved')\n    GROUP BY\n        m.movie_title\n)\nSELECT\n    (SELECT avg_rating_score FROM MovieRatings WHERE movie_title = 'Innocence Unprotected') -\n    (SELECT avg_rating_score FROM MovieRatings WHERE movie_title = 'When Will I Be Loved') AS rating_difference",
    "84": "SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes';",
    "85": "SELECT COUNT(*) AS films_released_in_2007\nFROM movies\nWHERE movie_release_year = 2007;",
    "86": "SELECT movie_title, movie_popularity\nFROM movies\nWHERE movie_release_year = 2006\nORDER BY movie_popularity DESC\nLIMIT 1;",
    "87": "SELECT COUNT(*) AS films_directed_by_\u00c5ke_Sandgren\nFROM movies\nWHERE director_name = '\u00c5ke Sandgren';",
    "88": "SELECT movie_title\nFROM movies\nWHERE director_name = '\u00c1lex de la Iclesia'\nORDER BY movie_popularity DESC\nLIMIT 1",
    "89": "SELECT movie_release_year FROM movies WHERE movie_title = 'Cops';",
    "90": "SELECT director_id FROM movies WHERE movie_title = \"It's Winter\";",
    "91": "SELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1",
    "92": "SELECT list_title\nFROM lists\nORDER BY list_comments DESC\nLIMIT 1;",
    "93": "SELECT m.movie_title, MAX(r.rating_score) AS highest_score\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_release_year = 2008\nGROUP BY m.movie_id\nORDER BY highest_score DESC\nLIMIT 1;",
    "94": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id\nORDER BY SUM(r.critic_likes) DESC\nLIMIT 3",
    "95": "SELECT COUNT(DISTINCT l.user_id) \nFROM lists l\nWHERE l.list_followers > 100 \nAND l.list_creation_timestamp_utc LIKE '2009%'",
    "96": "SELECT COUNT(DISTINCT ratings.user_id) AS users_rated_5\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'White Night Wedding' AND ratings.rating_score = 5;",
    "97": "SELECT lu.user_cover_image_url\nFROM lists_users lu\nJOIN lists l ON lu.user_id = l.user_id\nWHERE l.list_title = 'Georgia related films';",
    "98": "SELECT list_followers\nFROM lists\nJOIN lists_users ON lists.user_id = lists_users.user_id\nWHERE lists_users.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214'",
    "99": "SELECT movies.movie_title\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE ratings.user_id = 94978 AND ratings.rating_score = 5",
    "100": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_release_year = 2003 AND r.user_id = 2941",
    "101": "SELECT COUNT(DISTINCT ratings.user_id) AS non_trialist_users\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'Patti Smith: Dream of Life'\nAND ratings.user_trialist = 0;",
    "102": "SELECT \n    m.movie_title, \n    AVG(r.rating_score) AS average_score\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nGROUP BY \n    m.movie_id\nORDER BY \n    average_score DESC\nLIMIT 1;",
    "103": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nORDER BY r.critic_comments DESC\nLIMIT 3",
    "104": "SELECT l.list_title, lu.user_avatar_image_url\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id\nWHERE l.user_id = 85981819\nORDER BY l.list_creation_timestamp_utc ASC\nLIMIT 1",
    "105": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_timestamp_utc LIKE '2020%'\nGROUP BY m.movie_title\nORDER BY COUNT(r.rating_id) DESC\nLIMIT 1;",
    "106": "SELECT AVG(rating_score) AS average_score\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = 'Versailles Rive-Gauche'",
    "107": "SELECT movies.movie_title\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE ratings.user_id = 59988436 AND ratings.critic_comments = 21",
    "108": "SELECT movies.movie_title\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE ratings.critic_likes > 20",
    "109": "SELECT AVG(rating_score) AS average_score\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = 'The Fall of Berlin' AND strftime('%Y', rating_timestamp_utc) = '2019'",
    "110": "SELECT \n    (CAST(SUM(CASE WHEN r.rating_score > 3 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(r.rating_score)) * 100 AS percentage_of_users_rated_above_3\nFROM \n    ratings r\nJOIN \n    movies m ON r.movie_id = m.movie_id\nWHERE \n    m.movie_title = 'Patti Smith: Dream of Life'",
    "111": "SELECT \n    m.movie_title,\n    AVG(r.rating_score) AS avg_score\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nWHERE \n    m.director_name = 'Abbas Kiarostami'\nGROUP BY \n    m.movie_id\nORDER BY \n    avg_score DESC\nLIMIT 1;",
    "112": "SELECT movie_release_year\nFROM movies\nGROUP BY movie_release_year\nORDER BY COUNT(movie_id) DESC\nLIMIT 1",
    "113": "SELECT director_id, COUNT(movie_id) AS movie_count\nFROM movies\nGROUP BY director_id\nORDER BY movie_count DESC\nLIMIT 1;",
    "114": "SELECT COUNT(*) AS movies_made_by_director\nFROM movies\nWHERE director_id = (\n    SELECT director_id\n    FROM movies\n    ORDER BY movie_popularity DESC\n    LIMIT 1\n)",
    "115": "SELECT COUNT(DISTINCT ru.user_id) AS paying_subscribers_count\nFROM ratings_users ru\nJOIN ratings r ON ru.user_id = r.user_id\nWHERE ru.user_has_payment_method = 1\nAND r.rating_timestamp_utc > '2014%'",
    "116": "SELECT user_id\nFROM lists_users\nWHERE list_creation_date_utc = (\n    SELECT MIN(list_creation_date_utc)\n    FROM lists_users\n    JOIN lists ON lists_users.list_id = lists.list_id\n    WHERE lists.list_followers = 0\n)",
    "117": "SELECT lu.user_subscriber AS number_of_followers\nFROM lists_users lu\nINNER JOIN (\n    SELECT user_id, COUNT(list_id) AS total_lists\n    FROM lists_users\n    GROUP BY user_id\n    ORDER BY total_lists DESC\n    LIMIT 1\n) AS most_lists ON lu.user_id = most_lists.user_id\nLIMIT 1;",
    "118": "SELECT list_followers\nFROM lists\nWHERE list_title = 'Non-American Films about World War II'",
    "119": "SELECT COUNT(DISTINCT r.user_id) AS user_count\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'Downfall' AND r.rating_score = 4",
    "120": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_score = 5\nGROUP BY m.movie_id\nORDER BY COUNT(r.rating_id) DESC\nLIMIT 1;",
    "121": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nORDER BY r.critic_comments DESC\nLIMIT 1",
    "122": "SELECT ru.user_avatar_image_url\nFROM ratings_users ru\nINNER JOIN ratings r ON ru.user_id = r.user_id\nWHERE r.rating_timestamp_utc = '2019/10/17 1:36:36';",
    "123": "SELECT lu.user_avatar_image_url\nFROM lists_users lu\nJOIN lists l ON lu.user_id = l.user_id\nWHERE l.list_title = 'Vladimir Vladimirovich Nabokov'",
    "124": "SELECT \n    l.user_id, \n    lu.user_has_payment_method\nFROM \n    lists l\nINNER JOIN \n    lists_users lu ON l.user_id = lu.user_id\nWHERE \n    l.list_movie_number = (SELECT MAX(list_movie_number) FROM lists)\nLIMIT 1",
    "125": "SELECT ru.user_avatar_image_url\nFROM ratings_users ru\nJOIN ratings r ON ru.user_id = r.user_id\nWHERE r.rating_score = 5\nGROUP BY r.user_id\nORDER BY COUNT(r.rating_score) DESC\nLIMIT 1",
    "126": "SELECT SUM(critic_comments) AS total_critic_comments\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_popularity = (SELECT MAX(movie_popularity) FROM movies)",
    "127": "SELECT r.user_id\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = 'Freaks'\nAND r.rating_score = 4\nAND r.rating_timestamp_utc = '2013-05-04 06:33:32'",
    "128": "SELECT m.movie_url\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_score = 5 AND r.rating_timestamp_utc = '2013-05-03 05:11:17'",
    "129": "SELECT COUNT(*) AS four_star_ratings\nFROM ratings\nJOIN (\n    SELECT movie_id\n    FROM movies\n    WHERE movie_release_year = 1998\n    ORDER BY movie_popularity DESC\n    LIMIT 1\n) AS most_popular_1998_movie ON ratings.movie_id = most_popular_1998_movie.movie_id\nWHERE rating_score = 4",
    "130": "SELECT m.movie_id, m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_popularity > 13000\nGROUP BY m.movie_id\nORDER BY MIN(r.rating_score) ASC\nLIMIT 1",
    "131": "SELECT COUNT(DISTINCT ratings.user_id) AS paying_subscribers_count\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nJOIN ratings_users ON ratings.user_id = ratings_users.user_id\nWHERE movies.movie_id = 'One Flew Over the Cuckoo''s Nest'\nAND ratings_users.user_has_payment_method = 1",
    "132": "SELECT COUNT(DISTINCT l.user_id) AS paying_subscribers_count\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id\nWHERE l.list_followers > 3000 AND lu.user_has_payment_method = '1'",
    "133": "SELECT m.movie_id, m.movie_title, COUNT(r.rating_id) AS total_ratings\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_release_year = 1988\nGROUP BY m.movie_id\nORDER BY total_ratings DESC\nLIMIT 1;",
    "134": "SELECT COUNT(r.rating_score) AS low_ratings_count\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_release_year = 1995 AND r.rating_score < 3\nAND m.movie_id = (\n    SELECT movie_id\n    FROM movies\n    WHERE movie_release_year = 1995\n    ORDER BY movie_popularity DESC\n    LIMIT 1\n)",
    "135": "SELECT \n    (CAST(SUM(CASE WHEN r.rating_score = 5 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(r.rating_score)) * 100 AS percentage_of_5_ratings\nFROM \n    ratings r\nJOIN \n    movies m ON r.movie_id = m.movie_id\nWHERE \n    m.movie_title = 'Go Go Tales'",
    "136": "SELECT \n    (CAST(SUM(CASE WHEN ru.user_subscriber = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(ru.user_id)) * 100 AS subscriber_percentage\nFROM \n    ratings r\nINNER JOIN \n    movies m ON r.movie_id = m.movie_id\nINNER JOIN \n    ratings_users ru ON r.user_id = ru.user_id\nWHERE \n    m.movie_title = 'G.I. Jane';",
    "137": "SELECT \n    ROUND(\n        (CAST(SUM(CASE WHEN ru.user_has_payment_method = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(ru.user_id)) * 100, \n        2\n    ) AS percentage_paying_subscribers\nFROM \n    ratings r\nINNER JOIN \n    movies m ON r.movie_id = m.movie_id\nINNER JOIN \n    ratings_users ru ON r.user_id = ru.user_id\nWHERE \n    m.movie_title = 'A Shot in the Dark';",
    "138": "SELECT list_title FROM lists WHERE user_id = 4208563;",
    "139": "SELECT list_id, MAX(list_update_timestamp_utc) AS most_recent_update\nFROM lists\nWHERE list_creation_timestamp_utc LIKE '2016%'",
    "140": "SELECT \n    (CAST(SUM(user_subscriber) AS FLOAT) / COUNT(list_id)) * 100 AS percentage_of_lists_created_by_subscribers\nFROM \n    lists_users",
    "141": "SELECT lists.list_title\nFROM lists\nJOIN lists_users ON lists.user_id = lists_users.user_id\nWHERE lists_users.user_subscriber = 1",
    "142": "SELECT l.list_title\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id\nWHERE lu.user_eligible_for_trial = '1'",
    "143": "SELECT COUNT(DISTINCT l.list_id) AS subscriber_created_lists\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id\nWHERE l.list_followers >= 1 AND lu.user_subscriber = 1",
    "144": "SELECT AVG(list_followers) AS average_followers\nFROM lists\nWHERE list_movie_number > 200",
    "145": "SELECT l.list_title\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id\nWHERE lu.user_subscriber = 1 AND l.list_movie_number < 50",
    "146": "SELECT \n    list_title, \n    (strftime('%s', 'now') - strftime('%s', list_update_timestamp_utc)) AS time_since_last_update_seconds\nFROM \n    lists\nORDER BY \n    list_update_timestamp_utc ASC\nLIMIT 1;",
    "147": "SELECT lu.user_id, lu.user_subscriber\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id\nWHERE l.list_title = 'Sound and Vision'",
    "148": "SELECT \n    list_title, \n    (strftime('%s', 'now') - strftime('%s', list_creation_timestamp_utc)) / (60 * 60 * 24) AS days_created\nFROM \n    lists\nWHERE \n    list_followers > 200;",
    "149": "SELECT \n    (CAST(COUNT(DISTINCT m.movie_id) AS FLOAT) - CAST(COUNT(DISTINCT r.movie_id) AS FLOAT)) / CAST(COUNT(DISTINCT m.movie_id) AS FLOAT) * 100 AS percentage_of_movies_never_rated\nFROM \n    movies m\nLEFT JOIN \n    ratings r ON m.movie_id = r.movie_id",
    "150": "SELECT m.movie_title, r.rating_timestamp_utc AS rating_date, r.rating_score\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = 39115684",
    "151": "SELECT COUNT(*) AS total_movies\nFROM movies\nWHERE movie_release_year BETWEEN 1970 AND 1980\nAND movie_popularity > 11000;",
    "152": "SELECT COUNT(*) AS movies_count\nFROM movies\nWHERE director_name = 'Felipe Cazals' AND movie_release_year = 1976;",
    "153": "SELECT director_url\nFROM movies\nWHERE movie_title = 'Red Blooded American Girl'",
    "154": "SELECT list_title\nFROM lists\nORDER BY list_update_timestamp_utc DESC\nLIMIT 1;",
    "155": "SELECT user_id\nFROM lists\nWHERE list_comments = 142",
    "156": "SELECT \n    m.movie_title, \n    AVG(r.rating_score) AS average_rating_score\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nWHERE \n    m.director_name = 'Jeannot Szwarc'\nGROUP BY \n    m.movie_id\nORDER BY \n    m.movie_popularity DESC, average_rating_score DESC\nLIMIT 1;",
    "157": "SELECT director_name, MAX(rating_score) AS highest_rating_score\nFROM (\n    SELECT m.director_name, r.rating_score\n    FROM movies m\n    LEFT JOIN ratings r ON m.movie_id = r.movie_id\n    WHERE m.movie_release_year BETWEEN 1970 AND 1979\n    GROUP BY m.director_name\n    ORDER BY COUNT(m.movie_id) DESC, r.rating_score DESC\n)\nGROUP BY director_name\nLIMIT 1;",
    "158": "SELECT COUNT(DISTINCT r.user_id)\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nJOIN lists_users lu ON r.user_id = lu.user_id\nWHERE m.movie_title = 'The Secret Life of Words'\nAND r.rating_score = 3\nAND r.rating_timestamp_utc BETWEEN '2010-01-01%' AND '2020-12-31%'\nAND lu.user_trialist = 1",
    "159": "SELECT m.movie_title, r.rating_url\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nORDER BY r.critic_likes DESC\nLIMIT 1",
    "160": "SELECT \n    m.movie_title,\n    COUNT(r.rating_score) AS rating_5_count\nFROM \n    movies m\nLEFT JOIN \n    ratings r ON m.movie_id = r.movie_id AND r.rating_score = 5\nWHERE \n    m.movie_release_year >= 2000\nGROUP BY \n    m.movie_id\nORDER BY \n    m.movie_popularity DESC\nLIMIT 5",
    "161": "SELECT AVG(list_followers) AS average_followers\nFROM lists\nWHERE user_id IN (\n    SELECT r.user_id\n    FROM ratings r\n    JOIN movies m ON r.movie_id = m.movie_id\n    WHERE m.movie_title = 'Pavee Lackeen: The Traveller Girl'\n    AND r.rating_timestamp_utc = '2011-03-27 02:06:34'\n)",
    "162": "SELECT \n    COUNT(DISTINCT r.user_id) AS eligible_trial_users, \n    m.movie_image_url \nFROM \n    ratings r\nJOIN \n    movies m ON r.movie_id = m.movie_id\nWHERE \n    m.movie_title = 'Patti Smith: Dream of Life'\n    AND r.rating_timestamp_utc BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00'\n    AND r.user_eligible_for_trial = 1",
    "163": "SELECT \n    AVG(list_movie_number) AS average_movies_added,\n    (SELECT COUNT(*) \n     FROM ratings \n     JOIN lists_users ON ratings.user_id = lists_users.user_id \n     WHERE ratings.user_id = 8516503 AND rating_score = 5) AS movies_rated_5\nFROM lists\nWHERE user_id = 8516503",
    "164": "SELECT \n    m.director_name, \n    m.movie_release_year, \n    AVG(r.rating_score) AS avg_rating_score\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nWHERE \n    m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies)\n    AND r.user_trialist = 1",
    "165": "SELECT movies.movie_title\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE ratings.user_id = 57756708\nORDER BY datetime(ratings.rating_timestamp_utc) DESC\nLIMIT 1;",
    "166": "SELECT \n    m.movie_title,\n    m.director_name,\n    m.movie_release_year,\n    AVG(r.rating_score) AS average_rating_score\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nGROUP BY \n    m.movie_id\nORDER BY \n    m.movie_release_year ASC,\n    average_rating_score DESC\nLIMIT 10",
    "167": "SELECT ord_date, SUM(qty) AS total_qty\nFROM sales\nGROUP BY ord_date\nORDER BY total_qty DESC\nLIMIT 1;",
    "168": "SELECT t.title\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE strftime('%Y', s.ord_date) = '1992'\nGROUP BY t.title_id\nORDER BY SUM(s.qty) DESC\nLIMIT 1;",
    "169": "SELECT t.title, t.price, t.pubdate\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE s.payterms = 'ON invoice'",
    "170": "SELECT t.title\nFROM titles t\nJOIN roysched r ON t.title_id = r.title_id\nWHERE r.lorange = 0 AND r.royalty >= 10",
    "171": "SELECT t.title, rs.royalty\nFROM titles t\nJOIN roysched rs ON t.title_id = rs.title_id\nWHERE t.title_id = 'BU2075' AND rs.lorange >= 10000 AND rs.hirange <= 50000",
    "172": "SELECT t.title, r.lorange, r.royalty\nFROM titles t\nJOIN roysched r ON t.title_id = r.title_id\nORDER BY r.royalty DESC\nLIMIT 1",
    "173": "SELECT titles.title, publishers.pub_name\nFROM titles\nJOIN publishers ON titles.pub_id = publishers.pub_id\nWHERE publishers.country = 'USA'",
    "174": "SELECT ta.royaltyper\nFROM titles t\nJOIN titleauthor ta ON t.title_id = ta.title_id\nWHERE t.ytd_sales = (\n    SELECT MAX(ytd_sales)\n    FROM titles\n    WHERE ytd_sales < 20000\n)",
    "175": "SELECT titles.title, titles.notes, publishers.pub_name\nFROM titles\nJOIN publishers ON titles.pub_id = publishers.pub_id\nWHERE strftime('%Y', titles.pubdate) = '1991'",
    "176": "SELECT t.title\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nJOIN stores st ON s.stor_id = st.stor_id\nWHERE s.qty > 20 AND st.state = 'CA'",
    "177": "WITH StoreHighestQty AS (\n    SELECT\n        stor_id,\n        SUM(qty) AS total_qty\n    FROM sales\n    GROUP BY stor_id\n    ORDER BY total_qty DESC\n    LIMIT 1\n), LeastQtyTitle AS (\n    SELECT\n        s.stor_id,\n        s.title_id,\n        t.title,\n        s.qty\n    FROM sales s\n    JOIN titles t ON s.title_id = t.title_id\n    WHERE s.stor_id = (SELECT stor_id FROM StoreHighestQty)\n    ORDER BY s.qty ASC\n    LIMIT 1\n)\nSELECT\n    st.stor_name,\n    lqt.title AS least_qty_title,\n    lqt.qty AS least_qty\nFROM LeastQtyTitle lqt\nJOIN stores st ON lqt.stor_id = st.stor_id;",
    "178": "SELECT t.title, p.pub_name, r.lorange, r.hirange, r.royalty\nFROM titles t\nJOIN publishers p ON t.pub_id = p.pub_id\nLEFT JOIN roysched r ON t.title_id = r.title_id\nWHERE t.title_id = 'BU2075'",
    "179": "SELECT \n    s.stor_name,\n    (SELECT IFNULL(SUM(qty), 0) FROM sales WHERE payterms = 'Net 30' AND stor_id = '7066') * 100.0 / \n    (SELECT IFNULL(SUM(qty), 0) FROM sales WHERE stor_id = '7066') AS percentage_net_30\nFROM \n    stores s\nWHERE \n    s.stor_id = '7066';",
    "180": "SELECT p.pub_name, AVG(t.ytd_sales) AS avg_ytd_sales\nFROM publishers p\nLEFT JOIN titles t ON p.pub_id = t.pub_id\nWHERE p.pub_id = '877'\nGROUP BY p.pub_id;",
    "181": "SELECT * FROM employee WHERE strftime('%Y', hire_date) < '1990';",
    "182": "SELECT fname, lname, hire_date\nFROM employee\nWHERE job_lvl = (SELECT MIN(job_lvl) FROM employee)",
    "183": "SELECT strftime('%Y', hire_date) AS year, COUNT(emp_id) AS num_hired\nFROM employee\nGROUP BY year\nORDER BY num_hired DESC\nLIMIT 1;",
    "184": "SELECT e.*\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE e.job_lvl = j.max_lvl",
    "185": "SELECT e.fname, e.lname, e.hire_date\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE j.job_desc = 'Chief Executive Officer'",
    "186": "SELECT e.fname || ' ' || e.lname AS employee_name, p.pub_name AS publisher_name\nFROM employee e\nJOIN publishers p ON e.pub_id = p.pub_id\nWHERE p.country != 'USA'",
    "187": "SELECT e.fname || ' ' || e.lname AS name, j.job_desc\nFROM employee e\nJOIN publishers p ON e.pub_id = p.pub_id\nJOIN jobs j ON e.job_id = j.job_id\nWHERE p.pub_name = 'GGG&G'",
    "188": "SELECT p.pub_name, t.type\nFROM publishers p\nJOIN titles t ON p.pub_id = t.pub_id\nGROUP BY p.pub_name, t.type\nORDER BY p.pub_name, t.type;",
    "189": "SELECT p.pub_name\nFROM publishers p\nJOIN titles t ON p.pub_id = t.pub_id\nWHERE strftime('%Y', t.pubdate) = '1991'\nGROUP BY p.pub_id\nORDER BY COUNT(t.title_id) DESC\nLIMIT 1;",
    "190": "SELECT title\nFROM titles\nJOIN publishers ON titles.pub_id = publishers.pub_id\nWHERE publishers.pub_name = 'Binnet & Hardley'\nORDER BY price DESC\nLIMIT 1",
    "191": "SELECT e.fname || ' ' || e.lname AS employee_name, j.job_desc\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE e.job_lvl > 200",
    "192": "SELECT a.au_id, a.au_fname, a.au_lname\nFROM authors a\nJOIN titleauthor ta ON a.au_id = ta.au_id\nJOIN titles t ON ta.title_id = t.title_id\nWHERE t.type = 'business'",
    "193": "SELECT t.title, t.ytd_sales\nFROM titles t\nJOIN titleauthor ta ON t.title_id = ta.title_id\nJOIN authors a ON ta.au_id = a.au_id\nWHERE a.contract = '0'",
    "194": "SELECT \n    a.au_id, \n    a.au_fname, \n    a.au_lname, \n    t.title, \n    t.ytd_sales\nFROM \n    authors a\nJOIN \n    titleauthor ta ON a.au_id = ta.au_id\nJOIN \n    titles t ON ta.title_id = t.title_id\nWHERE \n    a.state = 'CA' \n    AND a.contract = '0'\nORDER BY \n    t.ytd_sales DESC\nLIMIT 1;",
    "195": "SELECT a.au_fname, a.au_lname\nFROM authors a\nJOIN titleauthor ta ON a.au_id = ta.au_id\nJOIN titles t ON ta.title_id = t.title_id\nWHERE t.title = 'Sushi, Anyone?'",
    "196": "SELECT \n    (CAST(SUM(CASE WHEN j.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) / COUNT(e.emp_id)) * 100 AS percentage\nFROM \n    employee e\nJOIN \n    jobs j ON e.job_id = j.job_id;",
    "197": "SELECT t.title, p.pub_name\nFROM titles t\nJOIN publishers p ON t.pub_id = p.pub_id\nWHERE t.ytd_sales > (\n    SELECT AVG(t2.ytd_sales)\n    FROM titles t2\n)\nORDER BY p.pub_name;",
    "198": "SELECT COUNT(*) FROM publishers WHERE country = 'USA';",
    "199": "SELECT * FROM publishers WHERE pub_name = 'New Moon Books';",
    "200": "SELECT e.fname\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE j.job_desc = 'Managing Editor'",
    "201": "SELECT MAX(job_lvl) AS highest_job_level\nFROM employee\nWHERE hire_date = (SELECT MIN(hire_date) FROM employee)",
    "202": "SELECT s.city\nFROM stores s\nJOIN sales sa ON s.stor_id = sa.stor_id\nGROUP BY s.stor_id\nORDER BY SUM(sa.qty) DESC\nLIMIT 1",
    "203": "SELECT t.price\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nGROUP BY t.title_id\nORDER BY SUM(s.qty) DESC\nLIMIT 1",
    "204": "SELECT s.stor_name\nFROM stores s\nJOIN sales sa ON s.stor_id = sa.stor_id\nJOIN titles t ON sa.title_id = t.title_id\nWHERE t.title = 'Life Without Fear';",
    "205": "SELECT COUNT(DISTINCT s.stor_id) AS stores_in_massachusetts\nFROM stores s\nJOIN sales sa ON s.stor_id = sa.stor_id\nJOIN titles t ON sa.title_id = t.title_id\nWHERE t.title = 'Life Without Fear' AND s.state = 'MA'",
    "206": "SELECT publishers.country\nFROM publishers\nJOIN titles ON publishers.pub_id = titles.pub_id\nWHERE titles.title = 'Life Without Fear'",
    "207": "SELECT p.pub_name\nFROM publishers p\nJOIN titles t ON p.pub_id = t.pub_id\nORDER BY t.price DESC\nLIMIT 1",
    "208": "SELECT COUNT(DISTINCT publishers.pub_id) AS publishers_with_books_over_15\nFROM publishers\nJOIN titles ON publishers.pub_id = titles.pub_id\nWHERE publishers.country = 'USA' AND titles.price > 15;",
    "209": "SELECT \n    titles.title_id,\n    titles.title,\n    titles.type,\n    publishers.pub_name,\n    SUM(sales.qty) AS total_quantity_sold\nFROM \n    sales\nJOIN \n    titles ON sales.title_id = titles.title_id\nJOIN \n    publishers ON titles.pub_id = publishers.pub_id\nGROUP BY \n    titles.title_id\nORDER BY \n    total_quantity_sold DESC\nLIMIT 3",
    "210": "SELECT SUM(sales.qty) AS total_business_books_ordered\nFROM sales\nJOIN titles ON sales.title_id = titles.title_id\nJOIN stores ON sales.stor_id = stores.stor_id\nWHERE titles.type = 'business'\nAND stores.state = 'MA'",
    "211": "SELECT AVG(qty) AS avg_quantity\nFROM sales\nJOIN titles ON sales.title_id = titles.title_id\nWHERE titles.title = 'Life Without Fear'",
    "212": "SELECT \n    AVG(e.job_lvl) AS avg_job_lvl, \n    (SELECT max_lvl FROM jobs WHERE job_desc = 'Managing Editor') - AVG(e.job_lvl) AS levels_between_avg_and_highest\nFROM \n    employee e\nJOIN \n    jobs j ON e.job_id = j.job_id\nWHERE \n    j.job_desc = 'Managing Editor'",
    "213": "SELECT title_id, title, price\nFROM titles\nWHERE type = 'business' AND price = (\n    SELECT MIN(price)\n    FROM titles\n    WHERE type = 'business'\n)",
    "214": "SELECT type, MAX(advance) AS max_pre_paid\nFROM titles\nGROUP BY type\nORDER BY max_pre_paid DESC\nLIMIT 1;",
    "215": "SELECT \n    r.royalty \nFROM \n    roysched r\nJOIN \n    titles t ON r.title_id = t.title_id\nJOIN \n    sales s ON t.title_id = s.title_id\nGROUP BY \n    t.title_id\nORDER BY \n    SUM(s.qty) DESC\nLIMIT 1;",
    "216": "SELECT job_lvl\nFROM employee\nWHERE lname = 'O''Rourke'",
    "217": "SELECT emp_id\nFROM employee\nWHERE minit IS NULL\nORDER BY job_lvl DESC\nLIMIT 1",
    "218": "SELECT a.contract\nFROM authors a\nJOIN titleauthor ta ON a.au_id = ta.au_id\nJOIN titles t ON ta.title_id = t.title_id\nWHERE t.title = 'Sushi, Anyone?'",
    "219": "SELECT p.pub_name\nFROM publishers p\nJOIN employee e ON p.pub_id = e.pub_id\nORDER BY e.job_lvl DESC\nLIMIT 1;",
    "220": "SELECT job_desc \nFROM jobs \nJOIN employee ON jobs.job_id = employee.job_id \nWHERE fname = 'Pedro' AND lname = 'Afonso'",
    "221": "SELECT (j.max_lvl - e.job_lvl) AS levels_left_to_max\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE e.fname = 'Diego' AND e.lname = 'Roel'",
    "222": "SELECT t.notes\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE s.ord_date = '1994-09-14'",
    "223": "SELECT t.type\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE s.ord_date = '1993-05-29'",
    "224": "SELECT * FROM publishers WHERE country = 'France';",
    "225": "SELECT publishers.pub_name\nFROM titles\nJOIN publishers ON titles.pub_id = publishers.pub_id\nWHERE titles.title = 'Silicon Valley Gastronomic Treats'",
    "226": "SELECT city FROM authors WHERE au_fname = 'Victoria' AND au_lname = 'P Ashworth'",
    "227": "SELECT COUNT(ord_num) AS sales_count\nFROM sales\nJOIN stores ON sales.stor_id = stores.stor_id\nWHERE city = 'Remulade';",
    "228": "SELECT \n    ((SUM(CASE WHEN s.city = 'Fremont' THEN sa.qty ELSE 0 END) - SUM(CASE WHEN s.city = 'Portland' THEN sa.qty ELSE 0 END)) * 1.0 / SUM(CASE WHEN s.city = 'Portland' THEN sa.qty ELSE 0 END)) * 100 AS percentage_difference\nFROM \n    sales sa\nJOIN \n    stores s ON sa.stor_id = s.stor_id\nWHERE \n    s.city IN ('Fremont', 'Portland')\n    AND strftime('%Y', sa.ord_date) = '1993';",
    "229": "SELECT \n    100.0 * (SUM(CASE WHEN job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN job_desc = 'designer' THEN 1 ELSE 0 END)) / SUM(CASE WHEN job_desc = 'designer' THEN 1 ELSE 0 END) AS percentage_more\nFROM \n    employee\nJOIN \n    jobs ON employee.job_id = jobs.job_id",
    "230": "SELECT fname || ' ' || lname AS full_name\nFROM employee\nWHERE strftime('%Y', hire_date) BETWEEN '1990' AND '1995'\nORDER BY job_lvl DESC",
    "231": "WITH AverageRoyalty AS (\n    SELECT AVG(royalty) AS avg_royalty\n    FROM titles\n)\nSELECT t.title, t.type, t.price\nFROM titles t, AverageRoyalty ar\nWHERE t.royalty > ar.avg_royalty",
    "232": "WITH OrderQuantities AS (\n    SELECT\n        title_id,\n        SUM(qty) AS total_qty,\n        COUNT(title_id) AS order_count\n    FROM sales\n    WHERE strftime('%Y', ord_date) = '1994'\n    GROUP BY title_id\n),\nAverageOrderQuantity AS (\n    SELECT\n        AVG(total_qty * 1.0 / order_count) AS avg_order_qty\n    FROM OrderQuantities\n)\nSELECT\n    t.title,\n    t.type,\n    t.price\nFROM titles t\nJOIN OrderQuantities oq ON t.title_id = oq.title_id\nCROSS JOIN AverageOrderQuantity\nWHERE (oq.total_qty * 1.0 / oq.order_count) < AverageOrderQuantity.avg_order_qty",
    "233": "SELECT title, type, price\nFROM titles\nJOIN publishers ON titles.pub_id = publishers.pub_id\nWHERE publishers.pub_name = 'New Moon Books'\nORDER BY price ASC",
    "234": "SELECT t.title, t.royalty\nFROM titles t\nJOIN publishers p ON t.pub_id = p.pub_id\nWHERE p.country = 'USA'\nORDER BY t.royalty DESC",
    "235": "SELECT \n    AVG(CASE WHEN p.country = 'USA' THEN t.royalty ELSE NULL END) AS avg_us_royalty,\n    AVG(CASE WHEN p.country != 'USA' THEN t.royalty ELSE NULL END) AS avg_non_us_royalty,\n    (AVG(CASE WHEN p.country = 'USA' THEN t.royalty ELSE NULL END) - AVG(CASE WHEN p.country != 'USA' THEN t.royalty ELSE NULL END)) AS difference\nFROM \n    titles t\nJOIN \n    publishers p ON t.pub_id = p.pub_id",
    "236": "SELECT \n    AVG(CASE WHEN p.country = 'USA' THEN e.job_lvl END) - AVG(CASE WHEN p.country != 'USA' THEN e.job_lvl END) AS avg_level_diff\nFROM \n    employee e\nJOIN \n    jobs j ON e.job_id = j.job_id\nJOIN \n    publishers p ON e.pub_id = p.pub_id\nWHERE \n    j.job_desc = 'Marketing manager'",
    "237": "SELECT \n    t.title, \n    p.pub_name AS publisher, \n    t.price\nFROM \n    titles t\nJOIN \n    publishers p ON t.pub_id = p.pub_id\nWHERE \n    t.notes LIKE '%helpful hints on how to use your electronic resources%'",
    "238": "SELECT t.title, p.state, t.ytd_sales\nFROM titles t\nJOIN publishers p ON t.pub_id = p.pub_id\nWHERE t.notes LIKE '%Carefully researched study of the effects of strong emotions on the body%'",
    "239": "SELECT t.title, SUM(s.qty) AS total_sales\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nJOIN stores st ON s.stor_id = st.stor_id\nWHERE st.state = 'CA'\nGROUP BY t.title\nHAVING SUM(s.qty) > (SELECT AVG(total_qty) FROM (SELECT SUM(qty) AS total_qty FROM sales JOIN stores ON sales.stor_id = stores.stor_id WHERE state = 'CA' GROUP BY title_id))\nORDER BY total_sales DESC\nLIMIT 5",
    "240": "SELECT ser_start AS \"Day received\"\nFROM callcenterlogs\nORDER BY LENGTH(ser_time) DESC\nLIMIT 1",
    "241": "SELECT MIN(ser_start) AS earliest_complaint_start\nFROM callcenterlogs\nWHERE \"Date received\" = '2017-03-22'",
    "242": "SELECT \"Complaint ID\", MAX(priority) AS MostUrgentPriority\nFROM callcenterlogs\nWHERE \"Complaint ID\" IN ('CR2400594', 'CR2405641')",
    "243": "SELECT first || ' ' || middle || ' ' || last AS full_name\nFROM client\nWHERE sex = 'Male' AND year > 1990;",
    "244": "SELECT COUNT(*) AS NumberOfComplaints\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\"\nWHERE first = 'Diesel' AND last = 'Galloway'",
    "245": "SELECT e.\"Sub-product\"\nFROM events e\nJOIN callcenterlogs c ON e.\"Complaint ID\" = c.\"Complaint ID\"\nJOIN client cl ON e.Client_ID = cl.client_id\nWHERE cl.first = 'Diesel' AND cl.last = 'Galloway' AND e.\"Date received\" = '2014-07-03'",
    "246": "SELECT \n    CASE \n        WHEN \"Consumer consent provided?\" IN (null, 'N/A', 'Empty') THEN 'No'\n        ELSE 'Yes'\n    END AS ConsentGiven\nFROM events\nJOIN client ON events.Client_ID = client.client_id\nWHERE client.first = 'Matthew' AND client.last = 'Pierce' AND \"Date received\" = '2016-10-28'",
    "247": "SELECT \n    julianday(\"Date sent to company\") - julianday(\"Date received\") AS DelayedDays\nFROM \n    events\nJOIN \n    client ON events.Client_ID = client.client_id\nWHERE \n    client.first = 'Matthew' AND \n    client.last = 'Pierce' AND \n    \"Date received\" = '2016-10-28';",
    "248": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name\nFROM callcenterlogs cl\nJOIN client c ON cl.\"rand client\" = c.client_id\nWHERE cl.\"Date received\" = '2017-03-27' AND cl.server = 'MICHAL'",
    "249": "SELECT ser_time\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nWHERE \"Date received\" = '2017-03-27' AND first = 'Rachel' AND last = 'Hicks'",
    "250": "SELECT COUNT(DISTINCT c.client_id) AS NumberOfComplaints\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN events e ON c.client_id = e.Client_ID\nWHERE d.city = 'New York'\nAND e.Issue = 'Deposits and withdrawals'",
    "251": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Company response to consumer\" = 'In progress'",
    "252": "SELECT COUNT(DISTINCT client.client_id) AS clients_from_new_york_with_timely_response\nFROM client\nJOIN events ON client.client_id = events.Client_ID\nJOIN district ON client.district_id = district.district_id\nWHERE events.\"Timely response?\" = 'Yes'\nAND district.city = 'New York';",
    "253": "SELECT COUNT(*) AS MaleCreditCardComplaints2016\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nJOIN events ON callcenterlogs.\"Complaint ID\" = events.\"Complaint ID\"\nWHERE client.sex = 'Male'\nAND strftime('%Y', callcenterlogs.\"Date received\") = '2016'\nAND events.Product = 'Credit card'",
    "254": "SELECT d.division\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE c.first = 'Diesel' AND c.last = 'Galloway';",
    "255": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE c.sex = 'Male' AND s.Region = 'Pacific'",
    "256": "SELECT AVG(ComplaintCount) AS AverageComplaints\nFROM (\n    SELECT COUNT(e.\"Complaint ID\") AS ComplaintCount\n    FROM events e\n    JOIN client c ON e.Client_ID = c.client_id\n    JOIN district d ON c.district_id = d.district_id\n    JOIN state s ON d.state_abbrev = s.StateCode\n    WHERE e.Product = 'Credit card'\n    AND d.city = 'New York'\n    AND strftime('%Y', e.\"Date received\") BETWEEN '2015' AND '2017'\n    GROUP BY strftime('%Y', e.\"Date received\")\n)",
    "257": "SELECT \n    ((SUM(CASE WHEN strftime('%Y', \"Date received\") = '2017' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN strftime('%Y', \"Date received\") = '2016' THEN 1 ELSE 0 END)) * 1.0 / \n    SUM(CASE WHEN strftime('%Y', \"Date received\") = '2016' THEN 1 ELSE 0 END)) * 100 AS percentage_increase\nFROM \n    callcenterlogs\nJOIN \n    client ON callcenterlogs.\"rand client\" = client.client_id\nJOIN \n    district ON client.district_id = district.district_id\nWHERE \n    district.city = 'New York'\n    AND strftime('%Y', \"Date received\") IN ('2016', '2017');",
    "258": "SELECT ser_time\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nWHERE client.client_id = 'C00007127' AND \"Date received\" = '2017-02-22'",
    "259": "SELECT s.State\nFROM state s\nJOIN district d ON s.StateCode = d.state_abbrev\nJOIN client c ON d.district_id = c.district_id\nWHERE c.email = 'wyatt.collins@gmail.com'",
    "260": "SELECT e.\"Sub-product\"\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.first = 'Lennox' AND c.middle = 'Oliver' AND c.last = 'Drake' AND c.sex = 'Male'",
    "261": "SELECT e.\"Sub-issue\"\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.first = 'Gunner' AND c.middle = 'Omer' AND c.last = 'Fuller' AND c.sex = 'Male'",
    "262": "SELECT \"Consumer consent provided?\"\nFROM events\nJOIN client ON events.Client_ID = client.client_id\nWHERE client.first = 'Lyric' AND client.middle = 'Emely' AND client.last = 'Taylor'\nAND \"Date received\" = '2016-05-20'",
    "263": "SELECT \n    julianday(e.\"Date sent to company\") - julianday(e.\"Date received\") AS days_delay\nFROM \n    events e\nJOIN \n    client c ON e.Client_ID = c.client_id\nWHERE \n    c.first = 'Brantley' AND \n    c.middle = 'Julian' AND \n    c.last = 'Stanley' AND \n    c.sex = 'Male' AND \n    e.\"Date received\" = '2012-05-18'",
    "264": "SELECT city\nFROM district\nJOIN reviews ON district.district_id = reviews.district_id\nWHERE Date = '2017-07-22';",
    "265": "SELECT Reviews \nFROM reviews \nJOIN district ON reviews.district_id = district.district_id \nWHERE city = 'Jacksonville' AND Date = '2017-07-22'",
    "266": "SELECT r.Product\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE s.State = 'Indianapolis' AND r.Date = '2016-10-07'",
    "267": "SELECT Stars\nFROM reviews\nJOIN district ON reviews.district_id = district.district_id\nWHERE Product = 'Eagle Capital'\nAND city = 'Little Rock'\nAND Date = '2013-04-04'",
    "268": "SELECT year || '-' || month || '-' || day AS birthday\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\"\nWHERE callcenterlogs.\"Complaint ID\" = 'CR0217298'",
    "269": "SELECT client.phone\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\"\nWHERE callcenterlogs.\"Complaint ID\" = 'CR0100432'",
    "270": "SELECT \n    (CAST(SUM(CASE WHEN c.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) / COUNT(c.client_id)) * 100 AS percentage_females\nFROM \n    callcenterlogs cl\nJOIN \n    client c ON cl.\"rand client\" = c.client_id\nWHERE \n    cl.\"Date received\" = '2017-03-27'",
    "271": "SELECT \n    (CAST(SUM(CASE WHEN e.\"Consumer consent provided?\" = 'Consent provided' THEN 1 ELSE 0 END) AS REAL) / COUNT(e.Client_ID)) * 100 AS percentage_consent\nFROM \n    events e\nJOIN \n    client c ON e.Client_ID = c.client_id\nWHERE \n    c.first = 'Mason' AND c.middle = 'Javen' AND c.last = 'Lopez' AND c.sex = 'Male'",
    "272": "SELECT \"Complaint ID\"\nFROM callcenterlogs\nWHERE priority = 2 AND \"Date received\" BETWEEN '2017-03-01' AND '2017-03-31';",
    "273": "SELECT first || ' ' || middle || ' ' || last AS full_name,\n       year || '-' || month || '-' || day AS date_of_birth,\n       email\nFROM client\nWHERE age > 65\nORDER BY age DESC",
    "274": "SELECT Product, COUNT(*) as FiveStarCount\nFROM reviews\nWHERE Stars = 5\nGROUP BY Product\nORDER BY FiveStarCount DESC\nLIMIT 1;",
    "275": "SELECT State \nFROM state \nWHERE Region = 'South';",
    "276": "SELECT c.email\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE cl.outcome = 'Hang'",
    "277": "SELECT AVG(c.age) AS average_age\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE s.Region = 'Midwest'",
    "278": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name, c.phone\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Submitted via\" = 'fax'",
    "279": "SELECT d.district_id, d.city, d.state_abbrev, d.division\nFROM district d\nJOIN reviews r ON d.district_id = r.district_id\nWHERE r.Product = 'Eagle Capital'\nGROUP BY d.district_id, d.city, d.state_abbrev, d.division\nHAVING AVG(r.Stars) < (SELECT AVG(Stars) FROM reviews WHERE Product = 'Eagle Capital')",
    "280": "SELECT COUNT(*) AS TeenageCallsFromMountain\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nJOIN district ON client.district_id = district.district_id\nJOIN state ON district.state_abbrev = state.StateCode\nWHERE state.Region = 'Mountain'\nAND client.age BETWEEN 12 AND 20",
    "281": "SELECT COUNT(*) AS NumberOfComplaints\nFROM events\nJOIN client ON events.Client_ID = client.client_id\nWHERE events.Product = 'Credit card' AND client.sex = 'female'",
    "282": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS name\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE c.year BETWEEN 1980 AND 2000\nAND c.sex = 'Male'\nAND e.\"Submitted via\" = 'Referral'",
    "283": "SELECT \"Submitted via\"\nFROM events\nJOIN callcenterlogs ON events.\"Complaint ID\" = callcenterlogs.\"Complaint ID\"\nJOIN client ON events.Client_ID = client.client_id\nJOIN district ON client.district_id = district.district_id\nJOIN state ON district.state_abbrev = state.StateCode\nWHERE state.State = 'Florida'\nGROUP BY \"Submitted via\"\nORDER BY COUNT(events.\"Complaint ID\") DESC\nLIMIT 1;",
    "284": "SELECT AVG(ComplaintsPerYear) AS AverageComplaintsPerYear\nFROM (\n    SELECT strftime('%Y', e.\"Date received\") AS Year, COUNT(e.\"Complaint ID\") AS ComplaintsPerYear\n    FROM events e\n    JOIN client c ON e.Client_ID = c.client_id\n    JOIN district d ON c.district_id = d.district_id\n    WHERE d.city = 'New Bedford'\n    AND e.\"Company response to consumer\" = 'Closed with explanation'\n    GROUP BY Year\n)",
    "285": "SELECT \n    (CAST(SUM(CASE WHEN e.\"Consumer disputed?\" = 'Yes' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT e.Client_ID)) * 100 AS percentage_disputed\nFROM \n    events e\nJOIN \n    client c ON e.Client_ID = c.client_id\nJOIN \n    district d ON c.district_id = d.district_id\nWHERE \n    d.city = 'Houston';",
    "286": "SELECT COUNT(DISTINCT client.client_id) AS service_members_complained\nFROM client\nJOIN district ON client.district_id = district.district_id\nJOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\"\nWHERE district.city = 'Syracuse';",
    "287": "SELECT \n    (CAST(SUM(CASE WHEN c.priority = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(c.\"Complaint ID\")) * 100 AS percentage_priority_1\nFROM \n    callcenterlogs c\nJOIN \n    client cl ON c.\"rand client\" = cl.client_id\nJOIN \n    district d ON cl.district_id = d.district_id\nJOIN \n    state s ON d.state_abbrev = s.StateCode\nWHERE \n    s.State = 'California'",
    "288": "SELECT \n    AVG(CASE WHEN age > 65 THEN age ELSE NULL END) - AVG(CASE WHEN age BETWEEN 35 AND 55 THEN age ELSE NULL END) AS age_difference\nFROM \n    client\nJOIN \n    district ON client.district_id = district.district_id\nJOIN \n    state ON district.state_abbrev = state.StateCode\nWHERE \n    state.Region = 'Northeast'",
    "289": "SELECT \"Complaint ID\"\nFROM callcenterlogs\nORDER BY ser_time DESC\nLIMIT 3",
    "290": "SELECT COUNT(*) \nFROM client \nWHERE email NOT LIKE '%@gmail.com';",
    "291": "SELECT client_id\nFROM client\nJOIN events ON client.client_id = events.Client_ID\nWHERE \"Consumer consent provided?\" IS NULL OR \"Consumer consent provided?\" = 'N/A' OR \"Consumer consent provided?\" = ''",
    "292": "SELECT \"Complaint ID\"\nFROM callcenterlogs\nWHERE \"Date received\" = '2014-09-25'\nORDER BY julianday(\"Date sent to company\") - julianday(\"Date received\") DESC\nLIMIT 1;",
    "293": "SELECT \"Date received\", \"Complaint ID\", priority\nFROM callcenterlogs\nWHERE priority = 2\nORDER BY \"Date received\" ASC",
    "294": "SELECT COUNT(*) AS complaints_not_with_agent\nFROM callcenterlogs\nWHERE outcome != 'AGENT';",
    "295": "SELECT COUNT(*) AS CreditCardComplaintsHandledBySharon\nFROM callcenterlogs\nJOIN events ON callcenterlogs.\"Complaint ID\" = events.\"Complaint ID\"\nWHERE callcenterlogs.server = 'SHARON' AND events.Product = 'Credit Card'",
    "296": "SELECT s.Region, COUNT(r.Stars) AS OneStarReviews\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE r.Stars = 1\nGROUP BY s.Region\nORDER BY OneStarReviews DESC\nLIMIT 1;",
    "297": "SELECT DISTINCT c.year\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Sub-product\" = '(CD) Certificate of deposit'\nORDER BY c.year;",
    "298": "SELECT COUNT(e.\"Complaint ID\") AS BillingDisputeCases\nFROM events e\nJOIN callcenterlogs c ON e.\"Complaint ID\" = c.\"Complaint ID\"\nJOIN client cl ON e.Client_ID = cl.client_id\nJOIN district d ON cl.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE e.Issue = 'Billing disputes' AND s.Region = 'Mountain'",
    "299": "SELECT COUNT(*)\nFROM client\nJOIN district ON client.district_id = district.district_id\nJOIN state ON district.state_abbrev = state.StateCode\nWHERE client.sex = 'Male' AND state.State = 'Massachusetts';",
    "300": "SELECT c.last\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE cl.type = 'PS' AND cl.server = 'TOVA'",
    "301": "SELECT COUNT(DISTINCT client.client_id) AS young_clients_with_1_star\nFROM client\nJOIN reviews ON client.district_id = reviews.district_id\nWHERE client.age < 35 AND reviews.Stars = 1 AND reviews.Product = 'Eagle National Mortgage'",
    "302": "SELECT COUNT(DISTINCT c.client_id)\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE c.sex = 'Male' AND c.year = 1977 AND cl.priority = 0",
    "303": "SELECT c.first\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Tags LIKE '%Older American%'\nAND e.\"Consumer consent provided?\" NOT IN ('N/A', '', NULL)",
    "304": "SELECT s.State\nFROM state s\nJOIN district d ON s.StateCode = d.state_abbrev\nJOIN client c ON c.state = d.state_abbrev\nJOIN callcenterlogs cl ON cl.\"rand client\" = c.client_id\nWHERE cl.priority = 0\nGROUP BY s.State\nORDER BY COUNT(cl.\"Complaint ID\") DESC\nLIMIT 1;",
    "305": "SELECT COUNT(*) AS complaints_count\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nJOIN events ON callcenterlogs.\"Complaint ID\" = events.\"Complaint ID\"\nWHERE client.sex = 'Female'\nAND callcenterlogs.ser_time BETWEEN '15:00:01' AND '23:59:59'\nAND events.\"Timely response?\" = 'Yes'",
    "306": "SELECT COUNT(*) AS complaints_count\nFROM callcenterlogs cl\nJOIN events e ON cl.\"Complaint ID\" = e.\"Complaint ID\"\nWHERE cl.ser_time < '00:05:00'\nAND cl.server = 'DORIT'\nAND e.\"Company response to consumer\" = 'Closed with explanation'\nAND e.\"Submitted via\" = 'Phone'",
    "307": "SELECT COUNT(*) AS NumberOfClients\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE c.last = 'Alvarado' AND s.StateCode = 'MD'",
    "308": "SELECT COUNT(*) AS ReviewsWithGreat\nFROM reviews\nJOIN client ON reviews.district_id = client.district_id\nWHERE client.age BETWEEN 30 AND 50\nAND reviews.Reviews LIKE '%great%'",
    "309": "SELECT c.address_1 || ', ' || c.address_2 AS full_address\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Timely response?\" = 'Yes'\nAND e.\"Consumer disputed?\" = 'Yes'",
    "310": "SELECT COUNT(*) AS complaints_count\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.sex = 'Female'\nAND c.year = 2000\nAND e.\"Submitted via\" != 'Web';",
    "311": "SELECT e.\"Consumer complaint narrative\"\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.first = 'Brenda' AND c.last = 'Mayer'",
    "312": "SELECT COUNT(*) AS gmail_complaints_in_feb_2017\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nWHERE client.email LIKE '%gmail.com'\nAND callcenterlogs.\"Date received\" BETWEEN '2017-02-01' AND '2017-02-28';",
    "313": "SELECT AVG(Stars) AS average_stars\nFROM reviews\nJOIN district ON reviews.district_id = district.district_id\nJOIN state ON district.state_abbrev = state.StateCode\nWHERE state.State = 'Oregon';",
    "314": "SELECT \n    (CAST(SUM(CASE WHEN e.\"Submitted via\" = 'Postal mail' AND c.age >= 50 THEN 1 ELSE 0 END) AS REAL) / \n    CAST(SUM(CASE WHEN e.\"Submitted via\" = 'Postal mail' THEN 1 ELSE 0 END) AS REAL)) * 100 AS percentage_over_50\nFROM \n    events e\nJOIN \n    client c ON e.Client_ID = c.client_id",
    "315": "SELECT AVG(age) AS average_age\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE district.city = 'Norwalk'",
    "316": "SELECT COUNT(DISTINCT client.client_id) AS one_star_reviews_from_kansas_city\nFROM client\nJOIN district ON client.district_id = district.district_id\nJOIN reviews ON district.district_id = reviews.district_id\nWHERE district.city = 'Kansas City' AND reviews.Stars = 1",
    "317": "SELECT s.State\nFROM state s\nJOIN district d ON s.StateCode = d.state_abbrev\nJOIN client c ON c.district_id = d.district_id\nJOIN reviews r ON r.district_id = d.district_id\nWHERE r.Stars = 5\nGROUP BY s.State\nORDER BY COUNT(c.client_id) DESC\nLIMIT 1;",
    "318": "SELECT s.Region\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE c.first = 'Noah' AND c.last = 'Thompson'",
    "319": "SELECT e.\"Submitted via\"\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.first = 'Kyran' AND c.last = 'Muller'",
    "320": "SELECT DISTINCT e.Product\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.year > 2005;",
    "321": "SELECT ser_time\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nJOIN events ON callcenterlogs.\"Complaint ID\" = events.\"Complaint ID\"\nWHERE client.first = 'Kendall' AND client.last = 'Allen' AND events.Product = 'Credit Card'",
    "322": "SELECT e.Issue\nFROM events e\nJOIN callcenterlogs c ON e.\"Complaint ID\" = c.\"Complaint ID\"\nORDER BY CAST(c.ser_time AS INTEGER) DESC\nLIMIT 1;",
    "323": "SELECT COUNT(DISTINCT e.Client_ID) AS NumberOfClients\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nJOIN district d ON c.district_id = d.district_id\nWHERE d.city = 'New York City' AND e.\"Submitted via\" = 'Fax'",
    "324": "SELECT \n    (CAST(SUM(CASE WHEN c.sex = 'Male' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_male_complaining_about_credit_cards\nFROM \n    client c\nJOIN \n    events e ON c.client_id = e.Client_ID\nWHERE \n    e.Product = 'Credit card';",
    "325": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Tags = 'Older American' AND (e.\"Consumer consent provided?\" IS NULL OR e.\"Consumer consent provided?\" = 'N/A' OR e.\"Consumer consent provided?\" = '')\nLIMIT 2;",
    "326": "SELECT year, month, day FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1",
    "327": "SELECT COUNT(*) AS NoDispute_NonTimelyResponse\nFROM events\nWHERE \"Consumer disputed?\" = 'No'\nAND \"Timely response?\" = 'No'",
    "328": "SELECT COUNT(*) AS complaints_longer_than_15_minutes\nFROM callcenterlogs\nWHERE ser_time > '00:15:00'",
    "329": "SELECT Issue, COUNT(Issue) AS IssueCount\nFROM events\nJOIN callcenterlogs ON events.\"Complaint ID\" = callcenterlogs.\"Complaint ID\"\nWHERE callcenterlogs.priority = 2\nGROUP BY Issue\nORDER BY IssueCount DESC\nLIMIT 1;",
    "330": "SELECT c.first || ' ' || c.last AS full_name\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE d.division = 'Pacific'",
    "331": "SELECT c.social\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nGROUP BY c.client_id\nORDER BY COUNT(e.Client_ID) DESC\nLIMIT 1",
    "332": "SELECT city\nFROM district\nJOIN reviews ON district.district_id = reviews.district_id\nWHERE Stars = 1\nGROUP BY city\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "333": "SELECT c.address_1, c.address_2\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nJOIN events e ON cl.\"Complaint ID\" = e.\"Complaint ID\"\nWHERE e.\"Submitted via\" = 'Postal mail'\nAND e.\"Date received\" = '2012-03-14'",
    "334": "SELECT COUNT(DISTINCT c.client_id) AS female_clients_with_priority_1_complaint\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE c.sex = 'Female' AND cl.priority = 1",
    "335": "SELECT c.server\nFROM callcenterlogs c\nJOIN events e ON c.\"Complaint ID\" = e.\"Complaint ID\"\nWHERE e.\"Submitted via\" = 'Phone' AND e.\"Timely response?\" = 'No'",
    "336": "SELECT e.Issue\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.first = 'Kaitlyn' AND c.middle = 'Eliza' AND c.last = 'Elliott'",
    "337": "SELECT state.State\nFROM client\nJOIN district ON client.district_id = district.district_id\nJOIN state ON district.state_abbrev = state.StateCode\nWHERE client.email = 'skylar.ramirez@gmail.com'",
    "338": "WITH RegionClientCount AS (\n    SELECT d.division, COUNT(c.client_id) AS client_count\n    FROM client c\n    JOIN district d ON c.district_id = d.district_id\n    GROUP BY d.division\n    ORDER BY client_count DESC\n    LIMIT 2\n)\nSELECT division\nFROM RegionClientCount\nORDER BY client_count ASC\nLIMIT 1;",
    "339": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS owner\nFROM callcenterlogs cl\nJOIN client c ON cl.\"rand client\" = c.client_id\nWHERE cl.server = 'MORIAH' AND cl.\"Date received\" = '2013-09-11'",
    "340": "SELECT\n    CASE\n        WHEN age BETWEEN 13 AND 19 THEN 'Teenager'\n        WHEN age BETWEEN 20 AND 65 THEN 'Adult'\n        WHEN age > 65 THEN 'Elder'\n    END AS AgeGroup,\n    AVG(CAST(ser_time AS INTEGER)) AS AvgTimeInMinutes\nFROM\n    client\nJOIN\n    callcenterlogs\nON\n    client.client_id = callcenterlogs.\"rand client\"\nGROUP BY\n    AgeGroup;",
    "341": "SELECT \n    (CAST(SUM(CASE WHEN c.age <= 65 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(c.client_id)) * 100 AS ElderlyComplaintPercentage\nFROM \n    client c\nJOIN \n    callcenterlogs cl ON c.client_id = cl.\"rand client\"",
    "342": "SELECT \n    (CAST(SUM(CASE WHEN c.sex = 'Male' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(c.client_id)) * 100 AS percentage_male_clients\nFROM \n    client c\n    JOIN district d ON c.district_id = d.district_id\nWHERE \n    d.city = 'Indianapolis'",
    "343": "SELECT \n    (SELECT COUNT(*) \n     FROM client \n     WHERE age > 13 AND age <= 19 AND email LIKE '%@gmail.com') AS GoogleAccounts,\n    (SELECT COUNT(*) \n     FROM client \n     WHERE age > 13 AND age <= 19 AND email LIKE '%@outlook.com') AS MicrosoftAccounts",
    "344": "SELECT first || ' ' || middle || ' ' || last AS full_name\nFROM client\nWHERE email = 'emily.garcia43@outlook.com';",
    "345": "SELECT c.first\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE cl.priority = 2",
    "346": "SELECT c.email\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE cl.type = 'PS'",
    "347": "SELECT c.last\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE c.age <= 65 AND cl.server = 'YIFAT'",
    "348": "SELECT COUNT(DISTINCT c.client_id) AS NumberOfClients\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE c.city = 'New York City' AND cl.outcome = 'AGENT'",
    "349": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Consumer disputed?\" = 'Yes'",
    "350": "SELECT c.client_id, cl.\"Complaint ID\"\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE c.year = 1931",
    "351": "SELECT \n    (COUNT(DISTINCT CASE WHEN c.email LIKE '%@gmail.com' THEN cl.\"Complaint ID\" END) * 1.0 / COUNT(DISTINCT cl.\"Complaint ID\")) * 100 AS GoogleAccountComplaintsPercentage\nFROM \n    callcenterlogs cl\nJOIN \n    client c ON cl.\"rand client\" = c.client_id\nWHERE \n    cl.server = 'ZOHARI'",
    "352": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE cl.ser_time > '00:20:00'",
    "353": "SELECT client.last\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\"\nWHERE callcenterlogs.priority = 0\nLIMIT 5",
    "354": "SELECT callcenterlogs.call_id\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nWHERE client.first LIKE 'B%'",
    "355": "SELECT e.Product\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.first = 'Alexander' AND c.last = 'Lewis' AND c.city = 'Bronx'",
    "356": "SELECT DISTINCT c.first\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE c.sex = 'Male' AND e.\"Timely response?\" = 'No'",
    "357": "SELECT e.Product, COUNT(e.\"Complaint ID\") AS ComplaintCount\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.age > 65\nGROUP BY e.Product\nORDER BY ComplaintCount DESC\nLIMIT 1;",
    "358": "SELECT\n    CASE\n        WHEN age <= 19 THEN 'teenager'\n        WHEN age > 19 AND age <= 65 THEN 'adult'\n        ELSE 'elder'\n    END AS age_group,\n    COUNT(*) AS complaints_count\nFROM client\nJOIN events ON client.client_id = events.Client_ID\nWHERE Product = 'Credit Card'\nGROUP BY age_group\nORDER BY complaints_count DESC\nLIMIT 1",
    "359": "SELECT c.\"Complaint ID\", c.outcome, c.ser_time\nFROM callcenterlogs c\nWHERE c.ser_time < '00:10:00'",
    "360": "SELECT \"Date received\"\nFROM events\nWHERE \"Submitted via\" = 'Fax'",
    "361": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nJOIN events e ON cl.\"Complaint ID\" = e.\"Complaint ID\"\nWHERE e.Issue = 'Balance transfer'",
    "362": "SELECT c.email\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Submitted via\" = 'Postal mail'",
    "363": "SELECT AVG(c.age) AS average_age\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Company response to consumer\" = 'Closed with relief'",
    "364": "SELECT AVG(age) AS average_age\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\"\nWHERE callcenterlogs.type = 'TT'",
    "365": "SELECT \"Complaint ID\", call_id, phonefinal\nFROM callcenterlogs\nWHERE server = 'AVIDAN' AND \"Date received\" BETWEEN '2014-01-01' AND '2014-12-30'",
    "366": "SELECT AVG(ser_time) AS average_server_time\nFROM callcenterlogs\nWHERE server = 'DARMON'\nAND \"Date received\" BETWEEN '2017-01-01' AND '2017-04-01'",
    "367": "SELECT \n    strftime('%Y', e.\"Date received\") AS Year,\n    COUNT(*) AS NumberOfComplaints\nFROM \n    events e\nJOIN \n    callcenterlogs c ON e.\"Complaint ID\" = c.\"Complaint ID\"\nWHERE \n    e.Product = 'Credit card' \n    AND e.Issue = 'Overlimit fee'\nGROUP BY \n    Year",
    "368": "SELECT COUNT(*) AS Female_Clients_Under_18\nFROM client\nJOIN district ON client.district_id = district.district_id\nJOIN state ON district.state_abbrev = state.StateCode\nWHERE state.Region = 'Middle Atlantic' AND client.sex = 'Female' AND client.age <= 18",
    "369": "SELECT year || '-' || month || '-' || day AS full_birthdate, email, phone\nFROM client\nWHERE city = 'Indianapolis'\nORDER BY year DESC, month DESC, day DESC\nLIMIT 1;",
    "370": "SELECT d.city, COUNT(*) as num_reviews\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nWHERE r.Stars = 5 AND strftime('%Y', r.Date) = '2016'\nGROUP BY d.city\nORDER BY num_reviews DESC\nLIMIT 5",
    "371": "SELECT MAX(ser_time) AS longest_server_time\nFROM callcenterlogs\nJOIN events ON callcenterlogs.\"Complaint ID\" = events.\"Complaint ID\"\nWHERE Issue = 'arbitration';",
    "372": "SELECT c.social, c.state\nFROM client c\nWHERE c.phone = '100-121-8371'",
    "373": "SELECT c.first || ' ' || c.middle || ' ' || c.last AS full_name, c.phone\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE d.division = 'Pacific'",
    "374": "SELECT c.social, \n       julianday(e.\"Date sent to company\") - julianday(e.\"Date received\") AS days_of_delay, \n       e.\"Company response to consumer\"\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nORDER BY days_of_delay DESC\nLIMIT 1;",
    "375": "SELECT COUNT(*) \nFROM client \nWHERE sex = 'Female' AND age > 30;",
    "376": "SELECT first, last FROM client\nJOIN district ON client.district_id = district.district_id\nWHERE city = 'New York City'",
    "377": "SELECT MAX(age) AS oldest_age\nFROM client\nWHERE sex = 'Male'",
    "378": "SELECT d.division, COUNT(c.client_id) AS number_of_clients\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nGROUP BY d.division",
    "379": "SELECT \n    (CAST(SUM(CASE WHEN c.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) / COUNT(c.client_id)) * 100 AS percentage_female\nFROM \n    client c\nJOIN \n    district d ON c.district_id = d.district_id\nWHERE \n    d.division = 'Middle Atlantic'",
    "380": "SELECT AVG(c.age) AS average_age\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE d.division = 'South Atlantic'",
    "381": "SELECT d.city\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE s.Region = 'Midwest'\nGROUP BY d.city\nORDER BY COUNT(c.client_id) ASC\nLIMIT 1;",
    "382": "SELECT COUNT(DISTINCT c.client_id) AS Northeast_Microsoft_Email_Users\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE s.Region = 'Northeast' AND c.email LIKE '%@outlook.com'",
    "383": "SELECT c.city\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE s.Region = 'West North Central' AND c.age > 60\nGROUP BY c.city\nORDER BY COUNT(c.client_id) DESC\nLIMIT 1;",
    "384": "SELECT \n    (CAST(SUM(CASE WHEN c.priority = 2 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(c.\"Complaint ID\")) * 100 AS percentage_priority_2\nFROM \n    callcenterlogs c\nJOIN \n    events e ON c.\"Complaint ID\" = e.\"Complaint ID\"\nWHERE \n    e.Issue = 'late fee'\n    AND strftime('%Y', c.\"Date received\") = '2017'",
    "385": "SELECT state_abbrev\nFROM district\nGROUP BY state_abbrev\nORDER BY COUNT(city) DESC\nLIMIT 1;",
    "386": "SELECT client.first, client.phone\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\"\nWHERE callcenterlogs.\"Complaint ID\" = 'CR0922485'",
    "387": "SELECT c.email\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nWHERE cl.\"Date received\" = '2014-07-03'",
    "388": "SELECT COUNT(*) AS ComplaintsCount\nFROM events\nJOIN client ON events.Client_ID = client.client_id\nJOIN district ON client.district_id = district.district_id\nWHERE events.\"Date received\" LIKE '2012%'\nAND events.Product = 'Credit card'\nAND district.city = 'Omaha'",
    "389": "SELECT COUNT(*) AS FemaleEmailComplaints\nFROM callcenterlogs\nJOIN client ON callcenterlogs.\"rand client\" = client.client_id\nJOIN events ON callcenterlogs.\"Complaint ID\" = events.\"Complaint ID\"\nWHERE client.sex = 'Female'\nAND events.\"Submitted via\" = 'Email'\nAND strftime('%Y', callcenterlogs.\"Date received\") BETWEEN '2012' AND '2015'",
    "390": "SELECT c.phone, e.\"Complaint ID\"\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.\"Company response to consumer\" = 'In progress'",
    "391": "SELECT COUNT(*) AS NumberOfComplaints\nFROM events\nJOIN client ON events.Client_ID = client.client_id\nJOIN district ON client.district_id = district.district_id\nWHERE events.\"Date received\" LIKE '2015%'\nAND events.Issue = 'Billing disputes'\nAND district.city = 'Portland'",
    "392": "SELECT \n    ROUND(\n        (\n            CAST(\n                COUNT(CASE WHEN julianday(e.\"Date sent to company\") - julianday(e.\"Date received\") > 5 THEN 1 END) \n                AS FLOAT\n            ) \n            / COUNT(e.\"Complaint ID\")\n        ) * 100, \n        2\n    ) AS percentage_delay_over_5_days\nFROM \n    events e\nJOIN \n    client c ON e.Client_ID = c.client_id\nJOIN \n    district d ON c.district_id = d.district_id\nWHERE \n    e.\"Date received\" LIKE '2014%' \n    AND d.city = 'Houston';",
    "393": "SELECT COUNT(*) AS EmailComplaints2012\nFROM events\nWHERE \"Date received\" LIKE '2012%' AND \"Submitted via\" = 'Email';",
    "394": "SELECT Client_ID\nFROM events\nWHERE \"Date received\" = '2014-04-16' AND \"Submitted via\" = 'Fax'",
    "395": "SELECT reviews.\"Date\"\nFROM reviews\nJOIN district ON reviews.district_id = district.district_id\nJOIN state ON district.state_abbrev = state.StateCode\nWHERE reviews.Product = 'Eagle Capital'\nAND district.city = 'Indianapolis'\nAND state.StateCode = 'IN'",
    "396": "SELECT COUNT(*) AS TotalComplaints\nFROM events\nWHERE \"Date received\" LIKE '2015%' \nAND \"Timely response?\" = 'Yes' \nAND \"Company response to consumer\" = 'Closed with explanation'",
    "397": "SELECT DISTINCT ccl.\"Date received\"\nFROM client c\nJOIN callcenterlogs ccl ON c.client_id = ccl.\"rand client\"\nWHERE c.sex = 'Female' AND c.age BETWEEN 20 AND 40",
    "398": "SELECT reviews.Product\nFROM reviews\nJOIN district ON reviews.district_id = district.district_id\nWHERE reviews.Stars = 1\nAND reviews.Date = '2016-03-14'\nAND district.city = 'Newton'\nAND district.state_abbrev = 'MA'",
    "399": "SELECT COUNT(*) AS FiveStarReviews\nFROM reviews\nJOIN district ON reviews.district_id = district.district_id\nWHERE Stars = 5\nAND Product = 'Eagle National Bank'\nAND city = 'Nashville'\nAND state_abbrev = 'TN'",
    "400": "SELECT c.client_id, c.sex, c.age, e.Issue, e.Product\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE c.sex = 'Male' AND c.age <= 25",
    "401": "SELECT DISTINCT r.Product\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE r.Stars = 1 AND s.Region = 'midwest'",
    "402": "SELECT DISTINCT e.Product\nFROM events e\nJOIN callcenterlogs c ON e.\"Complaint ID\" = c.\"Complaint ID\"\nWHERE c.server = 'TOVA'\nAND strftime('%m', e.\"Date received\") = '03'\nAND strftime('%Y', e.\"Date received\") = '2017'",
    "403": "SELECT division\nFROM reviews\nJOIN district ON reviews.district_id = district.district_id\nWHERE Stars = 5 AND Date = '2017-12-17' AND Product = 'Eagle National Mortgage'",
    "404": "SELECT c.phone\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.\"rand client\"\nJOIN events e ON cl.\"Complaint ID\" = e.\"Complaint ID\"\nWHERE e.Product = 'credit card'\nORDER BY c.age DESC\nLIMIT 1",
    "405": "SELECT COUNT(*) AS complaints_submitted_via_call\nFROM events\nWHERE \"Date received\" LIKE '2014%' AND \"Submitted via\" = 'Phone';",
    "406": "SELECT e.Product, e.Issue\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.age > (SELECT AVG(age) * 0.6 FROM client)",
    "407": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE Stars = 5)) * 100 AS percentage\nFROM \n    reviews \nJOIN \n    district ON reviews.district_id = district.district_id\nWHERE \n    Stars = 5 AND division = 'East North Central'",
    "408": "SELECT pc.company_name \nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Four Rooms'",
    "409": "SELECT COUNT(company_id) AS production_companies_count\nFROM movie_company\nJOIN movie ON movie.movie_id = movie_company.movie_id\nWHERE movie.title = 'Four Rooms'",
    "410": "SELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Universal Pictures'",
    "411": "SELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Universal Pictures'\nORDER BY m.release_date DESC\nLIMIT 1",
    "412": "SELECT p.person_name\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Pirates of the Caribbean: At World''s End'\nAND mc.job = 'Director of Photography'",
    "413": "SELECT mc.job\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE p.person_name = 'Dariusz Wolski' AND m.title = 'Pirates of the Caribbean: At World''s End'",
    "414": "SELECT p.person_name\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Pirates of the Caribbean: At World''s End'",
    "415": "SELECT COUNT(*) AS producer_count\nFROM movie_crew\nJOIN movie ON movie.movie_id = movie_crew.movie_id\nWHERE movie.title = 'Pirates of the Caribbean: At World''s End' AND movie_crew.job = 'Producer'",
    "416": "SELECT p.person_name\nFROM person p\nJOIN movie_crew mc ON p.person_id = mc.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE mc.job = 'Producer' AND m.title = 'Pirates of the Caribbean: At World''s End'",
    "417": "SELECT COUNT(DISTINCT mc.movie_id) AS number_of_movies\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Dariusz Wolski' AND mc.job = 'Director of Photography'",
    "418": "SELECT m.title\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE mc.job = 'Director of Photography' AND p.person_name = 'Dariusz Wolski'\nORDER BY m.vote_average DESC\nLIMIT 1",
    "419": "SELECT MAX(m.release_date) AS latest_release_date\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Dariusz Wolski'",
    "420": "SELECT \n    (SELECT CAST(COUNT(DISTINCT m.movie_id) AS FLOAT)\n     FROM movie m\n     JOIN movie_crew mc ON m.movie_id = mc.movie_id\n     JOIN person p ON mc.person_id = p.person_id\n     WHERE mc.job = 'Director of Photography'\n     AND p.person_name = 'Dariusz Wolski'\n     AND m.vote_average > 5) / \n    (SELECT CAST(COUNT(DISTINCT m.movie_id) AS FLOAT)\n     FROM movie m\n     JOIN movie_crew mc ON m.movie_id = mc.movie_id\n     JOIN person p ON mc.person_id = p.person_id\n     WHERE mc.job = 'Director of Photography'\n     AND p.person_name = 'Dariusz Wolski') AS percentage",
    "421": "SELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE mc.job = 'Director of Photography' AND p.person_name = 'Dariusz Wolski'",
    "422": "SELECT title FROM movie WHERE revenue = 559852396;",
    "423": "SELECT mc.job\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE p.person_name = 'David Rubin' AND m.title = 'Days of Thunder'",
    "424": "SELECT COUNT(DISTINCT m.movie_id) AS number_of_movies_directed_by_Michael_Bay\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Michael Bay' AND mc.job = 'Director'",
    "425": "SELECT COUNT(keyword_id) AS total_keywords\nFROM movie_keywords\nJOIN movie ON movie.movie_id = movie_keywords.movie_id\nWHERE movie.title = 'I Hope They Serve Beer in Hell';",
    "426": "SELECT p.person_name AS director\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE m.title = 'Land of the Dead' AND mc.job = 'Director'",
    "427": "SELECT COUNT(movie_id) AS number_of_movies\nFROM movie_company\nJOIN production_company ON movie_company.company_id = production_company.company_id\nWHERE production_company.company_name = 'Paramount Animation'",
    "428": "SELECT COUNT(*) AS female_characters_count\nFROM movie_cast\nJOIN movie ON movie_cast.movie_id = movie.movie_id\nJOIN gender ON movie_cast.gender_id = gender.gender_id\nWHERE movie.title = 'Spider-Man 3' AND gender.gender = 'Female'",
    "429": "SELECT keyword_name \nFROM keyword \nWHERE keyword_id IN (\n    SELECT keyword_id \n    FROM movie_keywords \n    GROUP BY keyword_id \n    ORDER BY COUNT(keyword_id) DESC \n    LIMIT 1\n)",
    "430": "SELECT COUNT(DISTINCT person_id) AS number_of_producers\nFROM movie_crew\nJOIN movie ON movie.movie_id = movie_crew.movie_id\nWHERE movie.title = 'The Amityville Horror' AND movie_crew.job = 'Producer'",
    "431": "SELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Crazy Heart'",
    "432": "SELECT COUNT(DISTINCT movie.movie_id) AS number_of_movies\nFROM movie\nJOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id\nJOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id\nWHERE keyword.keyword_name = 'saving the world'",
    "433": "SELECT m.title, m.popularity\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Cruel and Unusual Films'\nORDER BY m.popularity DESC\nLIMIT 1",
    "434": "SELECT d.department_name\nFROM department d\nJOIN movie_crew mc ON d.department_id = mc.department_id\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Reign of Fire' AND p.person_name = 'Marcia Ross'",
    "435": "SELECT AVG(m.budget) AS average_budget\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jaume Collet-Serra'\nAND mc.job = 'Director'",
    "436": "SELECT \n    (SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS percentage\nFROM \n    movie_cast mc\nJOIN \n    movie m ON mc.movie_id = m.movie_id\nJOIN \n    gender g ON mc.gender_id = g.gender_id\nWHERE \n    m.title = 'Bride Wars';",
    "437": "SELECT title \nFROM movie \nORDER BY budget DESC \nLIMIT 1;",
    "438": "SELECT COUNT(*) AS BillionDollarMovies\nFROM movie\nWHERE revenue > 1000000000;",
    "439": "SELECT MIN(release_date) AS first_movie_release_date FROM movie;",
    "440": "SELECT COUNT(*) AS John_Young_Count\nFROM person\nJOIN movie_crew ON person.person_id = movie_crew.person_id\nWHERE person.person_name = 'John Young'",
    "441": "SELECT title \nFROM movie \nORDER BY popularity DESC \nLIMIT 1;",
    "442": "SELECT person_name FROM person WHERE person_id = 1325273;",
    "443": "SELECT company_name\nFROM production_company\nJOIN movie_company ON production_company.company_id = movie_company.company_id\nGROUP BY production_company.company_name\nORDER BY COUNT(movie_company.movie_id) DESC\nLIMIT 1",
    "444": "SELECT DISTINCT p.person_name\nFROM person p\nJOIN movie_cast mc ON p.person_id = mc.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE mc.character_name = 'Captain Jack Sparrow'\nAND m.title LIKE 'Pirates of the Caribbean%'",
    "445": "SELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Walt Disney Pictures'\nORDER BY m.popularity DESC\nLIMIT 1",
    "446": "SELECT COUNT(movie_id) AS total_movies_released\nFROM movie_company\nJOIN production_company ON movie_company.company_id = production_company.company_id\nWHERE production_company.company_name = 'Universal Studios'",
    "447": "SELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nORDER BY m.revenue DESC\nLIMIT 1",
    "448": "SELECT COUNT(*) AS female_crew_count\nFROM movie_cast mc\nJOIN movie m ON mc.movie_id = m.movie_id\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE m.title = 'Mr. Smith Goes to Washington' AND g.gender = 'Female'",
    "449": "SELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nGROUP BY pc.company_name\nHAVING COUNT(mc.movie_id) >= 200",
    "450": "SELECT COUNT(DISTINCT movie_id) AS total_movies\nFROM movie_cast\nJOIN person ON movie_cast.person_id = person.person_id\nWHERE person_name = 'Harrison Ford';",
    "451": "SELECT m.title\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jamie Foxx'\nORDER BY m.release_date DESC\nLIMIT 1;",
    "452": "SELECT COUNT(DISTINCT movie.movie_id) AS Quentin_Tarantino_Movies_1995\nFROM movie\nJOIN movie_cast ON movie.movie_id = movie_cast.movie_id\nJOIN person ON movie_cast.person_id = person.person_id\nWHERE person.person_name = 'Quentin Tarantino'\nAND movie.release_date LIKE '1995%'",
    "453": "SELECT m.title\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Crime'\nORDER BY m.release_date\nLIMIT 1",
    "454": "SELECT COUNT(DISTINCT m.movie_id) AS horror_movie_count\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Horror'",
    "455": "SELECT person_id\nFROM movie_crew\nWHERE movie_id = 12 AND job = 'Second Film Editor'",
    "456": "SELECT COUNT(*) AS animators_count\nFROM movie_crew\nWHERE movie_id = 129 AND job = 'Animation';",
    "457": "SELECT job, COUNT(*) AS people_count\nFROM movie_crew\nWHERE movie_id = 19 AND department_id = 7\nGROUP BY job",
    "458": "SELECT person_id, character_name \nFROM movie_cast \nWHERE movie_id = 285 AND cast_order BETWEEN 2 AND 9;",
    "459": "SELECT COUNT(*) AS appearances\nFROM (\n    SELECT movie_id\n    FROM movie_cast\n    JOIN person ON movie_cast.person_id = person.person_id\n    WHERE person.person_name = 'Bob Peterson'\n    UNION ALL\n    SELECT movie_id\n    FROM movie_crew\n    JOIN person ON movie_crew.person_id = person.person_id\n    WHERE person.person_name = 'Bob Peterson'\n) AS combined_appearances",
    "460": "SELECT mc.movie_id, mc.character_name\nFROM movie_cast mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jim Carrey'",
    "461": "SELECT p.person_name\nFROM movie_cast mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE mc.movie_id = 1865 AND g.gender = 'Female'",
    "462": "SELECT m.title\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jim Carrey'",
    "463": "SELECT DISTINCT p.person_name AS director_name\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE mc.job = 'Director'\nAND m.release_date BETWEEN '1916-01-01' AND '1925-12-31'",
    "464": "SELECT COUNT(DISTINCT m.movie_id) AS Uma_Thurman_Movies\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE m.release_date BETWEEN '1990-01-02' AND '2000-12-30'\nAND p.person_name = 'Uma Thurman'",
    "465": "SELECT m.title\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Horror' AND m.vote_average > 7",
    "466": "SELECT g.genre_name, m.popularity\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE m.revenue >= 120000000 AND m.release_date BETWEEN '2012-01-01' AND '2015-12-31'",
    "467": "SELECT COUNT(DISTINCT movie.movie_id) AS Indian_Movies_Count\nFROM movie\nJOIN production_country ON movie.movie_id = production_country.movie_id\nJOIN country ON production_country.country_id = country.country_id\nWHERE country.country_name = 'India'\nAND movie.release_date BETWEEN '1990-01-02' AND '2003-12-30'\nAND movie.revenue > 75000000\nAND movie.popularity >= 20",
    "468": "SELECT m.title, m.revenue, c.country_name\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nORDER BY m.budget DESC\nLIMIT 1",
    "469": "SELECT m.title\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE l.language_name = 'Latin'\nAND m.release_date BETWEEN '1990-01-01' AND '1995-12-31'",
    "470": "SELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nWHERE c.country_name = 'United States of America' AND m.release_date LIKE '2006%'",
    "471": "SELECT \n    ABS(\n        (SELECT SUM(m.revenue) / COUNT(m.movie_id) \n         FROM movie m \n         JOIN production_country pc ON m.movie_id = pc.movie_id \n         JOIN country c ON pc.country_id = c.country_id \n         WHERE c.country_name = 'United States of America' AND m.release_date LIKE '2016%') \n        - \n        (SELECT SUM(m.revenue) / COUNT(m.movie_id) \n         FROM movie m \n         JOIN production_country pc ON m.movie_id = pc.movie_id \n         JOIN country c ON pc.country_id = c.country_id \n         WHERE c.country_name = 'India' AND m.release_date LIKE '2016%')\n    ) AS revenue_gap",
    "472": "SELECT\n    (SELECT CAST(COUNT(DISTINCT m.movie_id) AS FLOAT)\n     FROM movie m\n     JOIN production_country pc ON m.movie_id = pc.movie_id\n     JOIN country c ON pc.country_id = c.country_id\n     JOIN movie_genres mg ON m.movie_id = mg.movie_id\n     JOIN genre g ON mg.genre_id = g.genre_id\n     WHERE c.country_name = 'India'\n       AND m.release_date BETWEEN '2015-01-01' AND '2015-12-31'\n       AND g.genre_name = 'Romance') /\n    (SELECT CAST(COUNT(DISTINCT m.movie_id) AS FLOAT)\n     FROM movie m\n     JOIN production_country pc ON m.movie_id = pc.movie_id\n     JOIN country c ON pc.country_id = c.country_id\n     WHERE c.country_name = 'India'\n       AND m.release_date BETWEEN '2015-01-01' AND '2015-12-31') AS percentage;",
    "473": "SELECT person.person_name\nFROM person\nJOIN movie_cast ON person.person_id = movie_cast.person_id\nWHERE movie_cast.character_name = 'Optimus Prime (voice)'",
    "474": "SELECT gender.gender\nFROM gender\nJOIN movie_cast ON gender.gender_id = movie_cast.gender_id\nWHERE movie_cast.character_name = 'USAF Master Sgt. Epps'",
    "475": "SELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Ultramarines: A Warhammer 40,000 Movie'",
    "476": "SELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Radiant Film GmbH'",
    "477": "SELECT g.genre_name\nFROM genre g\nJOIN movie_genres mg ON g.genre_id = mg.genre_id\nJOIN movie m ON mg.movie_id = m.movie_id\nWHERE m.title = 'Sky Captain and the World of Tomorrow'",
    "478": "SELECT k.keyword_name\nFROM keyword k\nJOIN movie_keywords mk ON k.keyword_id = mk.keyword_id\nJOIN movie m ON mk.movie_id = m.movie_id\nWHERE m.title = 'Sky Captain and the World of Tomorrow'",
    "479": "SELECT country.country_name\nFROM country\nJOIN production_country ON country.country_id = production_country.country_id\nJOIN movie ON production_country.movie_id = movie.movie_id\nWHERE movie.title = 'Gojira ni-sen mireniamu'",
    "480": "SELECT m.title\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name = 'extremis'",
    "481": "SELECT m.title\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nWHERE c.country_name = 'France'\nLIMIT 10",
    "482": "SELECT person.person_name AS director\nFROM movie\nJOIN movie_crew ON movie.movie_id = movie_crew.movie_id\nJOIN person ON movie_crew.person_id = person.person_id\nWHERE movie.title = 'Transformers' AND movie_crew.job = 'Director'",
    "483": "SELECT p.person_name, mc.job\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Mad Max: Fury Road'\nLIMIT 10",
    "484": "WITH JapanMovies AS (\n    SELECT m.movie_id\n    FROM movie m\n    JOIN production_country pc ON m.movie_id = pc.movie_id\n    JOIN country c ON pc.country_id = c.country_id\n    WHERE c.country_name = 'Japan'\n),\nAnimationMovies AS (\n    SELECT m.movie_id\n    FROM movie m\n    JOIN movie_genres mg ON m.movie_id = mg.movie_id\n    JOIN genre g ON mg.genre_id = g.genre_id\n    WHERE g.genre_name = 'animation'\n),\nJapanAnimationMovies AS (\n    SELECT jm.movie_id\n    FROM JapanMovies jm\n    JOIN AnimationMovies am ON jm.movie_id = am.movie_id\n)\nSELECT \n    (CAST(COUNT(jam.movie_id) AS REAL) / COUNT(jm.movie_id)) * 100 AS percentage\nFROM JapanMovies jm\nLEFT JOIN JapanAnimationMovies jam ON jm.movie_id = jam.movie_id;",
    "485": "SELECT \n    SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) AS gender_ratio,\n    SUM(CASE WHEN g.gender IS NULL OR g.gender NOT IN ('Male', 'Female') THEN 1 ELSE 0 END) AS unspecified_gender_count\nFROM \n    movie_cast mc\nINNER JOIN \n    movie m ON mc.movie_id = m.movie_id\nINNER JOIN \n    gender g ON mc.gender_id = g.gender_id\nWHERE \n    m.title = 'Iron Man'",
    "486": "SELECT title FROM movie WHERE release_date < '2000-01-01' LIMIT 5;",
    "487": "SELECT keyword_id FROM movie_keywords WHERE movie_id = (SELECT movie_id FROM movie WHERE title = 'Sin City')",
    "488": "SELECT m.title\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name = 'angel'",
    "489": "SELECT k.keyword_name\nFROM keyword k\nJOIN movie_keywords mk ON k.keyword_id = mk.keyword_id\nJOIN movie m ON mk.movie_id = m.movie_id\nWHERE m.popularity = (SELECT MAX(popularity) FROM movie)",
    "490": "SELECT genre_id FROM movie_genres\nJOIN movie ON movie.movie_id = movie_genres.movie_id\nWHERE movie.title = 'The Dark Knight'",
    "491": "SELECT m.title\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Thriller'",
    "492": "SELECT m.title\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE m.movie_status = 'rumoured' AND g.genre_name = 'Drama'\nLIMIT 5;",
    "493": "SELECT g.genre_name\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE m.revenue = (SELECT MIN(revenue) FROM movie WHERE revenue IS NOT NULL)",
    "494": "SELECT genre.genre_name\nFROM movie\nJOIN movie_genres ON movie.movie_id = movie_genres.movie_id\nJOIN genre ON movie_genres.genre_id = genre.genre_id\nWHERE movie.runtime = 14",
    "495": "SELECT g.genre_name\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE m.vote_average = (SELECT MAX(vote_average) FROM movie)\nAND m.revenue = (SELECT MIN(revenue) FROM movie WHERE revenue > 0)",
    "496": "SELECT g.genre_name \nFROM movie m \nJOIN movie_genres mg ON m.movie_id = mg.movie_id \nJOIN genre g ON mg.genre_id = g.genre_id \nWHERE m.tagline = 'A long time ago in a galaxy far, far away\u2026'",
    "497": "SELECT production_country.country_id \nFROM production_country \nJOIN movie ON production_country.movie_id = movie.movie_id \nWHERE movie.title = 'Pirates of the Caribbean: Dead Man''s Chest'",
    "498": "SELECT m.title\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nWHERE c.country_name = 'Canada'",
    "499": "SELECT SUM(m.budget) AS total_budget_for_video_game_movies\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name = 'video game'",
    "500": "SELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name = 'civil war'",
    "501": "SELECT popularity \nFROM movie \nWHERE vote_count = (SELECT MAX(vote_count) FROM movie)",
    "502": "SELECT title \nFROM movie \nWHERE budget = 0 \nORDER BY revenue DESC \nLIMIT 1",
    "503": "SELECT company_id \nFROM movie_company \nJOIN movie ON movie.movie_id = movie_company.movie_id \nWHERE title = 'Gladiator'",
    "504": "SELECT DISTINCT mc.company_id\nFROM movie_company mc\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.release_date LIKE '1916%'",
    "505": "SELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Lucasfilm'",
    "506": "SELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Warner Bros. Pictures'\nORDER BY m.revenue DESC\nLIMIT 1",
    "507": "SELECT m.release_date\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Twentieth Century Fox Film Corporation'",
    "508": "SELECT language_id FROM movie_languages\nJOIN movie ON movie.movie_id = movie_languages.movie_id\nWHERE movie.title = 'Walk the Line'",
    "509": "SELECT ml.language_id\nFROM movie_languages ml\nJOIN movie m ON ml.movie_id = m.movie_id\nORDER BY m.popularity DESC\nLIMIT 1",
    "510": "SELECT l.language_name\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE m.title = 'C''era una volta il West'",
    "511": "SELECT m.movie_id, m.title\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE m.movie_status = 'Post Production' AND l.language_name = 'Nederlands';",
    "512": "SELECT m.tagline \nFROM movie m \nJOIN movie_languages ml ON m.movie_id = ml.movie_id \nJOIN language l ON ml.language_id = l.language_id \nWHERE l.language_name = 'Polski'",
    "513": "SELECT m.homepage\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE l.language_name = 'Bahasa Indonesia'",
    "514": "SELECT\n    SUM(CASE WHEN l.language_name = 'English' THEN m.revenue ELSE 0 END) -\n    SUM(CASE WHEN l.language_name = 'Latin' THEN m.revenue ELSE 0 END) AS revenue_difference\nFROM\n    movie m\nJOIN\n    movie_languages ml ON m.movie_id = ml.movie_id\nJOIN\n    language l ON ml.language_id = l.language_id\nWHERE\n    l.language_name IN ('English', 'Latin')",
    "515": "SELECT \n    pc.company_name,\n    SUM(m.revenue) AS total_revenue\nFROM \n    movie m\nJOIN \n    movie_company mc ON m.movie_id = mc.movie_id\nJOIN \n    production_company pc ON mc.company_id = pc.company_id\nWHERE \n    pc.company_name IN ('Fantasy Films', 'Live Entertainment')\nGROUP BY \n    pc.company_name",
    "516": "SELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE l.language_name = 'Latin'",
    "517": "SELECT SUBSTR(person_name, 1, INSTR(person_name, ' ') - 1) AS first_name, COUNT(*) AS count\nFROM person\nWHERE INSTR(person_name, ' ') > 0 -- Ensures there is at least one space (i.e., there is a first name and a last name)\nGROUP BY first_name\nORDER BY count DESC\nLIMIT 1;",
    "518": "SELECT AVG(crew_count) AS average_crew_per_movie\nFROM (\n    SELECT movie_id, COUNT(person_id) AS crew_count\n    FROM movie_crew\n    GROUP BY movie_id\n)",
    "519": "SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%'",
    "520": "SELECT MAX(runtime) AS longest_runtime FROM movie;",
    "521": "SELECT country_iso_code FROM country WHERE country_name = 'Kyrgyz Republic'",
    "522": "SELECT overview FROM movie WHERE title = 'The Pacifier';",
    "523": "SELECT COUNT(movie_id) AS movies_produced_by_eddie_murphy_productions\nFROM movie_company\nJOIN production_company ON movie_company.company_id = production_company.company_id\nWHERE production_company.company_name = 'Eddie Murphy Productions';",
    "524": "SELECT p.person_name\nFROM person p\nJOIN movie_cast mc ON p.person_id = mc.person_id\nWHERE mc.character_name LIKE '%captain%'",
    "525": "SELECT keyword_name, COUNT(keyword_name) AS keyword_count\nFROM keyword\nJOIN movie_keywords ON keyword.keyword_id = movie_keywords.keyword_id\nJOIN movie ON movie.movie_id = movie_keywords.movie_id\nWHERE release_date LIKE '%2006%'\nGROUP BY keyword_name\nORDER BY keyword_count DESC\nLIMIT 1;",
    "526": "SELECT COUNT(DISTINCT movie.movie_id) AS total_movies_with_vi_language\nFROM movie\nJOIN movie_languages ON movie.movie_id = movie_languages.movie_id\nJOIN language ON movie_languages.language_id = language.language_id\nWHERE language.language_code = 'vi'",
    "527": "SELECT genre_name\nFROM genre\nJOIN movie_genres ON genre.genre_id = movie_genres.genre_id\nGROUP BY genre.genre_id\nORDER BY COUNT(movie_genres.movie_id) ASC\nLIMIT 1 OFFSET 2",
    "528": "SELECT l.language_name\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nJOIN language_role lr ON ml.language_role_id = lr.role_id\nWHERE m.tagline = \"An offer you can't refuse.\" AND lr.language_role = 'Original'",
    "529": "SELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nWHERE c.country_name = 'France'",
    "530": "SELECT mc.character_name\nFROM movie_cast mc\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE g.gender = 'Unspecified'",
    "531": "SELECT p.person_name, MAX(m.popularity) AS popularity\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE mc.job = 'Director'\nGROUP BY p.person_name\nORDER BY popularity DESC\nLIMIT 5",
    "532": "WITH RankedMovies AS (\n    SELECT \n        m.title,\n        g.genre_name,\n        m.budget,\n        RANK() OVER(PARTITION BY g.genre_name ORDER BY m.budget DESC) AS budget_rank\n    FROM movie m\n    JOIN movie_genres mg ON m.movie_id = mg.movie_id\n    JOIN genre g ON mg.genre_id = g.genre_id\n)\nSELECT \n    title,\n    genre_name,\n    budget\nFROM RankedMovies\nWHERE budget_rank = 1",
    "533": "SELECT m.title\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nGROUP BY m.movie_id\nORDER BY COUNT(mk.keyword_id) DESC\nLIMIT 1",
    "534": "SELECT department_name, COUNT(person_id) AS people_count\nFROM department\nJOIN movie_crew ON department.department_id = movie_crew.department_id\nGROUP BY department.department_id\nORDER BY people_count DESC\nLIMIT 1;",
    "535": "SELECT \n    (SELECT COUNT(*) \n     FROM production_country \n     JOIN country ON production_country.country_id = country.country_id \n     WHERE country_iso_code = 'US') * 100.0 / \n    (SELECT COUNT(DISTINCT movie_id) FROM production_country) AS percentage\nFROM production_country\nLIMIT 1;",
    "536": "SELECT AVG(female_count * 1.0 / male_count) AS average_female_to_male_ratio\nFROM (\n    SELECT \n        movie_id,\n        SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS female_count,\n        SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS male_count\n    FROM movie_cast\n    GROUP BY movie_id\n    HAVING male_count > 0 AND female_count > 0\n)",
    "537": "SELECT title \nFROM movie \nWHERE release_date LIKE '1945%'",
    "538": "SELECT country_id, country_iso_code FROM country WHERE country_name = 'Belgium';",
    "539": "SELECT mc.character_name\nFROM movie_cast mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Catherine Deneuve'",
    "540": "SELECT m.title\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE l.language_name = 'Somali'",
    "541": "SELECT m.release_date, l.language_name\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE m.popularity = (SELECT MAX(popularity) FROM movie)",
    "542": "SELECT l.language_name\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nJOIN language_role lr ON ml.language_role_id = lr.role_id\nWHERE m.title = 'Four Rooms' AND lr.language_role = 'Original'",
    "543": "SELECT mc.character_name\nFROM movie_cast mc\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = 'Open Water'",
    "544": "SELECT person_name AS main_actor\nFROM movie_cast\nJOIN person ON movie_cast.person_id = person.person_id\nJOIN movie ON movie_cast.movie_id = movie.movie_id\nWHERE title = 'Pirates of the Caribbean: At World''s End'\nORDER BY cast_order\nLIMIT 1",
    "545": "SELECT person.person_name\nFROM movie_crew\nJOIN person ON movie_crew.person_id = person.person_id\nWHERE movie_crew.job = 'Camera Supervisor'",
    "546": "SELECT mc.job\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Sally Menke'",
    "547": "SELECT p.person_name, d.department_name\nFROM person p\nJOIN movie_crew mc ON p.person_id = mc.person_id\nJOIN department d ON mc.department_id = d.department_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE mc.job = 'Music Editor' AND m.title = 'Pirates of the Caribbean: At World''s End'",
    "548": "SELECT m.title, m.revenue\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'DreamWorks'",
    "549": "SELECT COUNT(DISTINCT movie.movie_id) AS movies_produced_in_canada\nFROM movie\nJOIN production_country ON movie.movie_id = production_country.movie_id\nJOIN country ON production_country.country_id = country.country_id\nWHERE country.country_name = 'Canada'",
    "550": "SELECT g.genre_name\nFROM genre g\nJOIN movie_genres mg ON g.genre_id = mg.genre_id\nJOIN movie m ON mg.movie_id = m.movie_id\nWHERE m.title = 'Forrest Gump'",
    "551": "SELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.release_date LIKE '2016%'\nAND ((m.runtime - (SELECT AVG(runtime) FROM movie WHERE release_date LIKE '2016%')) / (SELECT AVG(runtime) FROM movie WHERE release_date LIKE '2016%')) * 100 > 35",
    "552": "SELECT \n    (COUNT(DISTINCT CASE WHEN k.keyword_name = 'woman director' THEN mk.movie_id END) - \n    COUNT(DISTINCT CASE WHEN k.keyword_name = 'independent film' THEN mk.movie_id END)) * 1.0 / \n    COUNT(DISTINCT mk.movie_id) AS percentage_difference\nFROM \n    movie_keywords mk\nJOIN \n    keyword k ON mk.keyword_id = k.keyword_id\nWHERE \n    k.keyword_name IN ('woman director', 'independent film')",
    "553": "SELECT genre.genre_name\nFROM genre\nJOIN movie_genres ON genre.genre_id = movie_genres.genre_id\nJOIN movie ON movie_genres.movie_id = movie.movie_id\nWHERE movie.title = 'Dancer in the Dark'",
    "554": "SELECT COUNT(*) AS adventure_movies_2000\nFROM movie\nJOIN movie_genres ON movie.movie_id = movie_genres.movie_id\nJOIN genre ON movie_genres.genre_id = genre.genre_id\nWHERE genre.genre_name = 'Adventure' AND movie.release_date LIKE '2000%'",
    "555": "SELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Paramount Pictures' AND m.release_date LIKE '2000%'",
    "556": "SELECT keyword_name \nFROM keyword \nJOIN movie_keywords ON keyword.keyword_id = movie_keywords.keyword_id \nJOIN movie ON movie.movie_id = movie_keywords.movie_id \nWHERE movie.title = 'Finding Nemo'",
    "557": "SELECT m.title\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'horror' AND m.vote_average > 7",
    "558": "SELECT COUNT(company_name) AS number_of_companies\nFROM (\n    SELECT company_name, COUNT(movie_id) AS movie_count\n    FROM production_company\n    JOIN movie_company ON production_company.company_id = movie_company.company_id\n    GROUP BY production_company.company_id\n    HAVING movie_count > 150\n)",
    "559": "SELECT mc.job AS role\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Mark Hammel'",
    "560": "SELECT COUNT(*) AS main_actors_count\nFROM movie_cast mc\nJOIN movie m ON mc.movie_id = m.movie_id\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE m.title = 'Pirates of the Caribbean: At World''s End'\nAND g.gender = 'male'\nAND mc.cast_order = (SELECT MIN(cast_order) FROM movie_cast WHERE movie_id = mc.movie_id AND gender_id = g.gender_id)",
    "561": "SELECT m.title\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Harrison Ford'",
    "562": "SELECT mc.character_name\nFROM movie_cast mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE p.person_name = 'Orlando Bloom' AND m.title = 'Pirates of the Caribbean: The Curse of the Black Pearl'",
    "563": "SELECT\n    (SELECT COUNT(DISTINCT mg.movie_id)\n     FROM movie_genres mg\n     JOIN genre g ON mg.genre_id = g.genre_id\n     WHERE g.genre_name = 'horror') * 1.0 / \n    (SELECT COUNT(DISTINCT movie_id) FROM movie_genres) AS average_horror_movies",
    "564": "SELECT person.person_name\nFROM person\nJOIN movie_crew ON person.person_id = movie_crew.person_id\nJOIN movie ON movie_crew.movie_id = movie.movie_id\nWHERE movie.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND movie_crew.job = 'Producer'",
    "565": "SELECT m.title, AVG(m.revenue) AS average_income\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name = 'paris'\nGROUP BY m.title",
    "566": "SELECT COUNT(*) FROM \"Method\" WHERE Lang = 'en' AND CommentIsXml = 1;",
    "567": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS Task\nFROM Method\nWHERE NameTokenized = \"online median filter test median window filling\"",
    "568": "SELECT SampledAt, SolutionId \nFROM Method \nORDER BY SampledAt DESC \nLIMIT 1;",
    "569": "SELECT Url, Forks AS Followers\nFROM Repo\nORDER BY Forks DESC\nLIMIT 1",
    "570": "SELECT RepoId\nFROM Solution\nGROUP BY RepoId\nORDER BY COUNT(Path) DESC\nLIMIT 1",
    "571": "SELECT Url, MAX(Stars) AS Stars FROM Repo",
    "572": "SELECT Path FROM Solution WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution)",
    "573": "SELECT ProcessedTime\nFROM Repo\nORDER BY Watchers DESC\nLIMIT 1",
    "574": "SELECT Url \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nWHERE Solution.Path = 'nofear_Mara\\Mara.sln'",
    "575": "SELECT \n    Repo.Url, \n    MAX(Solution.ProcessedTime) AS LongestProcessedTime, \n    CASE \n        WHEN MIN(Solution.WasCompiled) = 1 THEN 'Can be implemented without compilation' \n        ELSE 'Requires compilation' \n    END AS CompilationRequirement\nFROM \n    Repo\nJOIN \n    Solution ON Repo.Id = Solution.RepoId\nGROUP BY \n    Repo.Id\nORDER BY \n    LongestProcessedTime DESC\nLIMIT 1;",
    "576": "SELECT NameTokenized\nFROM Method\nWHERE SolutionId IN (\n    SELECT Id\n    FROM Solution\n    WHERE Path = \"maravillas_linq-to-delicious\\tasty.sln\"\n)",
    "577": "SELECT \n    Repo.Id, \n    Repo.Url, \n    COUNT(Solution.Path) AS TotalPaths, \n    SUM(CASE WHEN Solution.WasCompiled = 0 THEN 1 ELSE 0 END) AS NeedsCompilation\nFROM \n    Repo\nJOIN \n    Solution ON Repo.Id = Solution.RepoId\nWHERE \n    Repo.Stars BETWEEN 6000 AND 9000\nGROUP BY \n    Repo.Id\nORDER BY \n    TotalPaths DESC, \n    NeedsCompilation DESC\nLIMIT 1;",
    "578": "SELECT Method.ApiCalls\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = 'https://github.com/wallerdev/htmlsharp.git'",
    "579": "SELECT COUNT(*) AS SolutionPaths\nFROM Solution\nWHERE RepoId = (\n    SELECT Id\n    FROM Repo\n    ORDER BY Watchers DESC\n    LIMIT 1 OFFSET 1\n)",
    "580": "SELECT AVG(Solution.ProcessedTime) AS AverageProcessedTime\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'",
    "581": "SELECT m.FullComment\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nWHERE s.Path = \"bmatzelle_nini\\Source\\Nini.sln\" AND m.NameTokenized = \"alias text add alias\"",
    "582": "SELECT m.ApiCalls\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nWHERE s.Path = \"mauriciodeamorim_tdd.encontro2\\Tdd.Encontro2.sln\"",
    "583": "SELECT COUNT(*) \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE Repo.Url = 'https://github.com/jeffdik/tachy.git' AND Solution.WasCompiled = 0;",
    "584": "SELECT m.SampledAt AS ProcessedTime, m.Lang AS Language\nFROM \"Method\" m\nWHERE m.NameTokenized = \"about box1 dispose\"",
    "585": "SELECT m.SampledAt\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nWHERE s.Path = 'maxild_playground\\Playground.sln'\nAND m.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'",
    "586": "SELECT Lang\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Solution.Path = \"opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln\"",
    "587": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS Task\nFROM Method\nWHERE NameTokenized = 'html parser feed'",
    "588": "SELECT CommentIsXml FROM \"Method\" WHERE Name = 'HtmlSharp.HtmlParser.Feed'",
    "589": "SELECT Id, Name FROM Method WHERE Summary = \"Write a command to the log\";",
    "590": "SELECT COUNT(*) AS NumberOfSolutions\nFROM Solution\nWHERE RepoId = (\n    SELECT Id\n    FROM Repo\n    ORDER BY Stars DESC\n    LIMIT 1\n)",
    "591": "SELECT Solution.Path\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nORDER BY Repo.Stars DESC\nLIMIT 1",
    "592": "SELECT Repo.Url \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE Solution.Id = 12",
    "593": "SELECT COUNT(*) \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE Repo.Forks > 1000 AND Solution.WasCompiled = 1;",
    "594": "SELECT Solution.Id AS SolutionID, Repo.Watchers\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Solution.Id IN (18, 19)\nORDER BY Repo.Watchers DESC\nLIMIT 1;",
    "595": "SELECT COUNT(*) \nFROM Solution \nWHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution) \nAND WasCompiled = 0;",
    "596": "SELECT Repo.ProcessedTime\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Solution.Path = \"jeffdik_tachy\\src\\Tachy.sln\"",
    "597": "SELECT Url \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nWHERE Solution.Id = 9",
    "598": "SELECT Solution.Path\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = \"https://github.com/maxild/playground.git\"",
    "599": "SELECT COUNT(DISTINCT Repo.Id) \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nWHERE Repo.Stars > 200 AND Solution.ProcessedTime < 636439500080712000;",
    "600": "SELECT Solution.Id\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nORDER BY Repo.Forks DESC\nLIMIT 3",
    "601": "SELECT AVG(Solution.ProcessedTime) AS AverageProcessedTime\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = \"https://github.com/jeffdik/tachy.git\"",
    "602": "SELECT \n    ((SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 18)) - \n    (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 19))) * 100.0 / \n    (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 19)) AS PercentageDifference",
    "603": "SELECT Lang \nFROM Method \nWHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'",
    "604": "SELECT FullComment \nFROM Method \nWHERE Name = \"DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows\"",
    "605": "SELECT Summary FROM Method WHERE Name = \"Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection\";",
    "606": "SELECT NameTokenized \nFROM Method \nWHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens'",
    "607": "SELECT Stars \nFROM Repo \nWHERE Id = (SELECT RepoId FROM Solution WHERE Id = 45997)",
    "608": "SELECT COUNT(*) AS SolutionCount\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Stars = 8094",
    "609": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
    "610": "SELECT Solution.ProcessedTime\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.NameTokenized = 'interp parser expr'",
    "611": "SELECT Solution.RepoId\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Name = 'SCore.Poisson.ngtIndex'",
    "612": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Name = 'ExportToRTF.RTFStyleSheet.H6Write'",
    "613": "SELECT COUNT(Solution.Id) AS NumberOfSolutions\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Watchers = 8094",
    "614": "SELECT Repo.Url \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nGROUP BY Repo.Id \nORDER BY COUNT(Solution.Id) DESC \nLIMIT 1",
    "615": "SELECT COUNT(Solution.Id) AS NumberOfSolutions\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Forks = 1445;",
    "616": "SELECT Path\nFROM Solution\nWHERE Id IN (\n    SELECT SolutionId\n    FROM Method\n    WHERE Lang = 'zh-cn'\n)\nGROUP BY Path\nORDER BY COUNT(Path) DESC\nLIMIT 1",
    "617": "SELECT Watchers \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nWHERE Solution.Id = 338082",
    "618": "SELECT COUNT(*) \nFROM Solution \nWHERE RepoId IN (SELECT Id FROM Repo WHERE Stars = 189) \nAND WasCompiled = 0;",
    "619": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'",
    "620": "SELECT Solution.ProcessedTime\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.NameTokenized = 't jadwal entity get single mpic'",
    "621": "SELECT Solution.RepoId\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'",
    "622": "SELECT Solution.Path\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.Summary = \"Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked \\\"Out-of-sync\\\", due to a save action. Refetching an empty Entity has no effect.\"",
    "623": "SELECT COUNT(*) AS NumberOfSolutions\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Stars = 3060",
    "624": "SELECT s.Path\nFROM Solution s\nJOIN Method m ON s.Id = m.SolutionId\nWHERE m.Lang = 'sw'\nGROUP BY s.Id\nORDER BY COUNT(m.Id) DESC\nLIMIT 1",
    "625": "SELECT \n    ((CAST((SELECT Watchers FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 83855)) AS REAL) \n    - CAST((SELECT Watchers FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 1502)) AS REAL)) \n    / CAST((SELECT Watchers FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 1502)) AS REAL)) * 100 AS PercentageDifference",
    "626": "SELECT \n    ((CAST(repo1.Stars AS REAL) - repo2.Stars) / repo2.Stars) * 100 AS PercentageIncrease\nFROM \n    Solution AS sol1\nJOIN \n    Repo AS repo1 ON sol1.RepoId = repo1.Id\nJOIN \n    Solution AS sol2 ON sol1.Id != sol2.Id\nJOIN \n    Repo AS repo2 ON sol2.RepoId = repo2.Id AND sol2.Id = 167053\nWHERE \n    sol1.Id = 51424;",
    "627": "SELECT \n    ((RepoForks53546.Forks - RepoForks1502.Forks) * 100.0 / RepoForks1502.Forks) AS PercentageIncrease\nFROM \n    (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 53546)) AS RepoForks53546,\n    (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 1502)) AS RepoForks1502;",
    "628": "SELECT Method.Name\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Solution.ProcessedTime = 636449700980488000",
    "629": "SELECT COUNT(*) AS NumberOfSolutions\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = 'https://github.com/derickbailey/presentations-and-training.git'",
    "630": "SELECT AVG(ProcessedTime) AS TotalProcessedTime\nFROM Solution\nWHERE RepoId = (\n    SELECT Id\n    FROM Repo\n    ORDER BY Forks DESC\n    LIMIT 1\n)",
    "631": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Lang = 'it'",
    "632": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Name = 'spinachLexer.mT__55'",
    "633": "SELECT Method.Id, Method.Name\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Method.Lang = 'en' AND Repo.Id = 1093",
    "634": "SELECT Solution.Path\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = 'https://github.com/ecoffey/Bebop.git'",
    "635": "SELECT DISTINCT Solution.RepoId\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Lang = 'ro'",
    "636": "SELECT Solution.RepoId\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.NameTokenized = 'crc parameters get hash code'",
    "637": "SELECT COUNT(*) \nFROM \"Method\" \nJOIN Solution ON \"Method\".SolutionId = Solution.Id \nWHERE Solution.Path = 'maravillas_linq-to-delicious\\tasty.sln'",
    "638": "SELECT Solution.Id\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.ProcessedTime = 636430969128176000",
    "639": "SELECT Repo.Url \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nORDER BY Solution.ProcessedTime DESC \nLIMIT 1",
    "640": "SELECT Solution.* \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE Repo.Forks > (Repo.Watchers / 2);",
    "641": "SELECT \n    (CAST(Repo.Forks AS FLOAT) / Repo.Stars) * 100 AS percentage\nFROM \n    Solution\nJOIN \n    Repo ON Solution.RepoId = Repo.Id\nWHERE \n    Solution.Id = 104086;",
    "642": "SELECT Id FROM Repo ORDER BY Stars DESC LIMIT 1;",
    "643": "SELECT Solution.Path\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.Name = 'HtmlSharp.HtmlParser.Feed'",
    "644": "SELECT Forks FROM Repo\nJOIN Solution ON Repo.Id = Solution.RepoId\nWHERE Solution.Id = 35",
    "645": "SELECT Solution.Id \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nORDER BY Repo.Watchers DESC \nLIMIT 1",
    "646": "SELECT Stars \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nWHERE Solution.Id = 20;",
    "647": "SELECT \n    (SELECT COUNT(*) FROM Method WHERE SolutionId = 1) AS NumberOfMethods,\n    (SELECT WasCompiled FROM Solution WHERE Id = 1) AS NeedsToBeCompiled",
    "648": "SELECT \n    (CAST(SUM(CASE WHEN s.WasCompiled = 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(s.Id)) * 100 AS PercentageOfSolutionsNeedingCompilation\nFROM \n    Method m\nJOIN \n    Solution s ON m.SolutionId = s.Id\nWHERE \n    m.CommentIsXml = 1",
    "649": "SELECT Method.Name\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Solution.Path = 'wallerdev_htmlsharp\\HtmlSharp.sln'",
    "650": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM Repo) * 100) AS percentage\nFROM \n    Repo\nWHERE \n    Stars > 2000;",
    "651": "SELECT Url \nFROM Repo \nJOIN Solution ON Repo.Id = Solution.RepoId \nWHERE Solution.Id = 1;",
    "652": "SELECT Id \nFROM Repo \nWHERE Stars = 21 \nORDER BY Forks DESC \nLIMIT 1",
    "653": "SELECT \n    (CAST(SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS PercentageOfEnglishMethods\nFROM \n    Method\nWHERE \n    CommentIsXml = 1;",
    "654": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.NameTokenized = 'html parser feed'",
    "655": "SELECT Solution.Id\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Forks = 238",
    "656": "SELECT Method.NameTokenized\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.Lang = 'en' AND Solution.WasCompiled = 0",
    "657": "SELECT COUNT(*) \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE (Repo.Stars - (Repo.Forks * 4 / 3)) > 0;",
    "658": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.FullComment = 'Feeds data into the parser'",
    "659": "SELECT COUNT(*) FROM Method\nWHERE CommentIsXml = 1 AND SolutionId IN (\n    SELECT Id FROM Solution WHERE RepoId = 3\n)",
    "660": "SELECT \n    (CAST(SUM(CASE WHEN WasCompiled = 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS PercentageOfSolutionsNeedingCompilation\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.Lang = 'en'",
    "661": "SELECT \n    (CAST((SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 1)) AS REAL) - \n    CAST((SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 2)) AS REAL)) /\n    CAST((SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 2)) AS REAL) * 100 AS PercentageDifference",
    "662": "SELECT COUNT(*) \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE Repo.Stars > (Repo.Forks / 3);",
    "663": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS Task\nFROM Method\nWHERE Id = 2",
    "664": "SELECT CommentIsXml FROM Method WHERE Id = 8;",
    "665": "SELECT Url \nFROM Repo \nORDER BY Watchers DESC \nLIMIT 1",
    "666": "SELECT SUBSTR(Method.Name, INSTR(Method.Name, '.') + 1) AS Task\nFROM Method\nWHERE Method.Lang = 'cs'",
    "667": "SELECT Path FROM Solution WHERE Id = (SELECT SolutionId FROM Method WHERE Id = 3)",
    "668": "SELECT Lang \nFROM Method \nWHERE Id = 28 \nAND SolutionId IN (\n    SELECT Id \n    FROM Solution \n    WHERE RepoId = 3\n)",
    "669": "SELECT Solution.ProcessedTime, COUNT(Method.Id) AS NumberOfMethods\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Solution.Id = 1",
    "670": "SELECT COUNT(DISTINCT m.Id) AS MethodCount\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nJOIN Repo r ON s.RepoId = r.Id\nWHERE m.NameTokenized LIKE 'query language%'\nGROUP BY r.Id",
    "671": "SELECT Method.ApiCalls, Solution.Path\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.Id = 10",
    "672": "SELECT COUNT(*) \nFROM Method \nJOIN Solution ON Method.SolutionId = Solution.Id \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE Repo.Id = 150 AND Method.FullComment IS NULL AND Method.Summary IS NULL;",
    "673": "SELECT Method.CommentIsXml\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Method.Id = 50 AND Solution.Path = 'managedfusion_managedfusion\\ManagedFusion.sln'",
    "674": "SELECT SUBSTR(Name, INSTR(Name, '.') + 1) AS TaskMethod\nFROM Method\nWHERE NameTokenized = 'string extensions to pascal case'",
    "675": "SELECT NameTokenized FROM Method WHERE NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';",
    "676": "SELECT COUNT(*) AS PathCount\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = 'https://github.com/jeffdik/tachy.git';",
    "677": "SELECT Repo.Watchers\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Solution.Path = \"maff_se3ue7\\US7.sln\"",
    "678": "SELECT Repo.Url\nFROM Repo\nJOIN Solution ON Repo.Id = Solution.RepoId\nWHERE Solution.WasCompiled = 1\nLIMIT 5",
    "679": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.NameTokenized = 'matrix multiply'",
    "680": "SELECT COUNT(*) AS XmlFormatCount\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Url = 'https://github.com/dogeth/vss2git.git' AND Method.CommentIsXml = 1;",
    "681": "SELECT Solution.Path\nFROM Solution\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Method.SampledAt = '636431758961741000'\nLIMIT 5",
    "682": "SELECT Repo.Url \nFROM Solution \nJOIN Repo ON Solution.RepoId = Repo.Id \nWHERE Solution.Path = 'joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln'",
    "683": "SELECT Method.Name\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Solution.Path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln'",
    "684": "SELECT Method.NameTokenized\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nWHERE Solution.Path = 'jurney_P4Backup\\P4Backup\\P4Backup.sln'",
    "685": "SELECT Repo.Url\nFROM Method\nJOIN Solution ON Method.SolutionId = Solution.Id\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Method.Summary = 'A test for Decompose'",
    "686": "SELECT \n    Stars \nFROM \n    Repo \nJOIN \n    Solution ON Repo.Id = Solution.RepoId \nWHERE \n    Solution.Path = 'ninject_Ninject\\Ninject.sln'",
    "687": "SELECT COUNT(*) AS SolutionPathCount\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Stars = 111 AND Repo.Forks = 58 AND Repo.Watchers = 111",
    "688": "SELECT AVG(Solution.ProcessedTime) AS AverageProcessedTime\nFROM Solution\nJOIN Repo ON Solution.RepoId = Repo.Id\nWHERE Repo.Stars = 254 AND Repo.Forks = 88 AND Repo.Watchers = 254;",
    "689": "SELECT COUNT(DISTINCT m.Lang) \nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nJOIN Repo r ON s.RepoId = r.Id\nWHERE r.Url = 'https://github.com/managedfusion/managedfusion.git';",
    "690": "SELECT COUNT(*) FROM trains WHERE direction = 'east'",
    "691": "SELECT COUNT(*) AS number_of_cars_on_train_1 FROM cars WHERE train_id = 1;",
    "692": "SELECT shape FROM cars WHERE train_id = 1 AND position = 4",
    "693": "SELECT DISTINCT trains.id\nFROM trains\nJOIN cars ON trains.id = cars.train_id\nWHERE cars.shape IN ('elipse', 'bucket')",
    "694": "SELECT COUNT(*) FROM cars WHERE train_id = 1 AND roof = 'none'",
    "695": "SELECT id FROM cars WHERE train_id = 1 AND wheels = 2",
    "696": "SELECT COUNT(DISTINCT t.id) \nFROM trains t \nJOIN cars c ON t.id = c.train_id \nWHERE t.direction = 'east' AND c.shape IN ('elipse', 'bucket');",
    "697": "SELECT t.id \nFROM trains t\nWHERE t.direction = 'east' AND \n      (SELECT COUNT(*) FROM cars c WHERE c.train_id = t.id) < 4",
    "698": "SELECT cars.id\nFROM cars\nJOIN trains ON cars.train_id = trains.id\nWHERE cars.sides = 'double' AND trains.direction = 'west'",
    "699": "SELECT COUNT(DISTINCT c.train_id) \nFROM cars c\nJOIN trains t ON c.train_id = t.id\nWHERE t.direction = 'east' AND c.len = 'long'\nGROUP BY c.train_id\nHAVING COUNT(c.id) > 2",
    "700": "SELECT DISTINCT t.direction\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE c.load_num = 0",
    "701": "SELECT t.direction\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE c.shape = 'ellipse'",
    "702": "SELECT COUNT(*) AS total_short_cars_east\nFROM cars\nJOIN trains ON cars.train_id = trains.id\nWHERE trains.direction = 'east' AND cars.len = 'short'",
    "703": "SELECT c.shape\nFROM cars c\nJOIN trains t ON c.train_id = t.id\nWHERE t.direction = 'east' AND c.position = 1",
    "704": "SELECT COUNT(*) \nFROM cars \nJOIN trains ON cars.train_id = trains.id \nWHERE trains.direction = 'east' AND cars.roof = 'flat';",
    "705": "SELECT COUNT(*) \nFROM cars \nJOIN trains ON cars.train_id = trains.id \nWHERE trains.direction = 'east' \nAND cars.roof = 'flat' \nAND cars.load_shape = 'circle'",
    "706": "SELECT \n    t.direction,\n    COUNT(*) AS rectCarsNum\nFROM \n    cars c\nJOIN \n    trains t ON c.train_id = t.id\nWHERE \n    c.shape = 'rectangle'\nGROUP BY \n    t.direction\nORDER BY \n    rectCarsNum DESC\nLIMIT 1;",
    "707": "SELECT DISTINCT t.direction\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE c.len = 'short'\nGROUP BY t.id\nHAVING COUNT(c.id) = 4 AND MAX(c.position) = 4",
    "708": "SELECT AVG(car_count) AS average_cars_per_east_train\nFROM (\n  SELECT c.train_id, COUNT(c.id) AS car_count\n  FROM cars c\n  JOIN trains t ON c.train_id = t.id\n  WHERE t.direction = 'east'\n  GROUP BY c.train_id\n)",
    "709": "WITH NonRegularShapedCars AS (\n  SELECT DISTINCT train_id\n  FROM cars\n  WHERE shape IN ('bucket', 'ellipse')\n),\nEastDirectionTrains AS (\n  SELECT t.id\n  FROM trains t\n  JOIN NonRegularShapedCars n ON t.id = n.train_id\n  WHERE t.direction = 'east'\n)\nSELECT \n  (CAST(COUNT(DISTINCT edt.id) AS FLOAT) / COUNT(DISTINCT nrc.train_id)) * 100 AS percentage\nFROM NonRegularShapedCars nrc\nLEFT JOIN EastDirectionTrains edt ON nrc.train_id = edt.id",
    "710": "SELECT COUNT(*) FROM cars WHERE len = 'short' AND shape = 'hexagon';",
    "711": "SELECT COUNT(*) FROM trains WHERE direction = 'west';",
    "712": "SELECT load_shape\nFROM cars\nWHERE shape = 'ellipse' AND len = 'short'",
    "713": "SELECT id FROM trains WHERE direction = 'east'",
    "714": "SELECT SUM(wheels) AS total_wheels FROM cars WHERE len = 'long';",
    "715": "SELECT direction\nFROM trains\nGROUP BY direction\nORDER BY COUNT(id) DESC\nLIMIT 1",
    "716": "SELECT COUNT(DISTINCT t.id) AS east_direction_trains_with_at_least_4_cars\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE t.direction = 'east'\nGROUP BY t.id\nHAVING COUNT(c.id) >= 4",
    "717": "SELECT direction, COUNT(*) AS count\nFROM trains\nWHERE id IN (\n    SELECT train_id\n    FROM cars\n    WHERE position = 2 AND shape = 'rectangle'\n)\nGROUP BY direction\nORDER BY count DESC\nLIMIT 1",
    "718": "SELECT COUNT(DISTINCT t.id) \nFROM trains t \nJOIN cars c ON t.id = c.train_id \nWHERE t.direction = 'west' \nAND c.sides = 'double' \nAND c.position = 3",
    "719": "SELECT COUNT(DISTINCT trains.id) AS eastbound_trains_with_rectangular_head_cars\nFROM trains\nJOIN cars ON trains.id = cars.train_id\nWHERE trains.direction = 'east' AND cars.position = 1 AND cars.shape = 'rectangular'",
    "720": "SELECT COUNT(DISTINCT t.id) AS west_trains_with_max_one_open_roof_car\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE t.direction = 'west'\nGROUP BY t.id\nHAVING SUM(CASE WHEN c.roof = 'none' THEN 1 ELSE 0 END) <= 1",
    "721": "SELECT direction, COUNT(*) AS train_count\nFROM trains\nWHERE id IN (\n    SELECT train_id\n    FROM cars\n    GROUP BY train_id\n    HAVING COUNT(*) = 3\n)\nGROUP BY direction\nORDER BY train_count DESC\nLIMIT 1",
    "722": "SELECT COUNT(DISTINCT t.id) AS eastbound_trains_with_fully_loaded_head_cars\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE t.direction = 'east' AND c.position = 1 AND c.load_num = 3",
    "723": "SELECT COUNT(*) \nFROM cars \nJOIN trains ON cars.train_id = trains.id \nWHERE trains.direction = 'east' \nAND cars.sides = 'double' \nAND cars.position = (\n    SELECT MAX(position) \n    FROM cars \n    WHERE train_id = trains.id\n)",
    "724": "SELECT DISTINCT t.direction\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE c.load_num = 0",
    "725": "SELECT t.direction\nFROM trains t\nJOIN cars c ON t.id = c.train_id\nWHERE c.position = 2 AND c.load_shape = 'diamond'",
    "726": "SELECT COUNT(DISTINCT c.train_id) \nFROM cars c \nJOIN trains t ON c.train_id = t.id \nWHERE t.direction = 'west' \nAND c.wheels = 3 \nAND c.roof = 'jagged'",
    "727": "SELECT t.direction\nFROM trains t\nJOIN (\n  SELECT train_id\n  FROM cars\n  GROUP BY train_id\n  HAVING COUNT(id) <= 2\n) AS filtered_trains ON t.id = filtered_trains.train_id",
    "728": "To calculate the percentage of all trains with at least 4 cars and list the directions of those trains, we need to perform a series of steps in our SQL query. We'll first identify the trains that have at least 4 cars, then calculate the percentage of these trains relative to the total number of trains, and finally, list the directions of these trains. However, it's important to note that calculating a percentage directly in a single SQL query that also lists details (like directions) for a subset of rows is complex and typically requires combining results from multiple logical steps. The description seems to suggest a single SQL statement for calculation and listing, which isn't directly feasible in SQL without making assumptions or simplifications.\n\nGiven the constraints and aiming for clarity, I'll provide a solution that focuses on identifying the trains with at least 4 cars and then calculating the percentage of such trains. Listing the directions of these trains in the same query while also calculating the percentage as requested isn't straightforward without using subqueries or temporary tables to store intermediate results. For the sake of directness and simplicity, here's how you can approach it:\n\n1. **Identify Trains with at Least 4 Cars**: This involves grouping by `train_id` in the `cars` table and counting the number of cars per train, then filtering for those with 4 or more cars.\n2. **Calculate the Percentage**: This involves dividing the count of trains with at least 4 cars by the total count of trains and multiplying by 100.\n\nGiven the limitations and for clarity, I'll demonstrate how to identify trains with at least 4 cars and calculate the percentage of such trains. For listing directions, I recommend a separate query due to the complexity of combining these requirements into a single SQL statement without additional context or clarification.\n\n```sqlite\n-- Calculate the percentage of trains with at least 4 cars\nWITH TrainCarCounts AS (\n  SELECT train_id, COUNT(id) AS car_count\n  FROM cars\n  GROUP BY train_id\n  HAVING car_count >= 4\n),\nTotalTrains AS (\n  SELECT COUNT(DISTINCT id) AS total_trains\n  FROM trains\n),\nTrainsWithAtLeast4Cars AS (\n  SELECT COUNT(DISTINCT train_id) AS trains_with_4_cars\n  FROM TrainCarCounts\n)\nSELECT \n  (SELECT trains_with_4_cars FROM TrainsWithAtLeast4Cars) * 100.0 / (SELECT",
    "729": "WITH HeadCars AS (\n  SELECT \n    c.train_id, \n    c.load_shape\n  FROM \n    cars c\n  WHERE \n    c.position = 1\n),\nLoadShapeCounts AS (\n  SELECT \n    load_shape, \n    COUNT(*) AS count\n  FROM \n    HeadCars\n  GROUP BY \n    load_shape\n),\nMaxLoadShape AS (\n  SELECT \n    load_shape\n  FROM \n    LoadShapeCounts\n  ORDER BY \n    count DESC\n  LIMIT 1\n),\nEastTrainsWithMaxLoadShape AS (\n  SELECT \n    t.id\n  FROM \n    trains t\n    JOIN HeadCars hc ON t.id = hc.train_id\n    JOIN MaxLoadShape mls ON hc.load_shape = mls.load_shape\n  WHERE \n    t.direction = 'east'\n),\nTotalTrainsWithMaxLoadShape AS (\n  SELECT \n    COUNT(DISTINCT hc.train_id) AS total\n  FROM \n    HeadCars hc\n    JOIN MaxLoadShape mls ON hc.load_shape = mls.load_shape\n)\nSELECT \n  (COUNT(*) * 100.0) / (SELECT total FROM TotalTrainsWithMaxLoadShape) AS percentage\nFROM \n  EastTrainsWithMaxLoadShape",
    "730": "SELECT \"Character Name\"\nFROM characters\nJOIN movie ON characters.MovieID = movie.MovieID\nWHERE movie.Title = 'Look Who''s Talking'",
    "731": "SELECT \"Character Name\"\nFROM characters\nJOIN movie ON characters.MovieID = movie.MovieID\nWHERE movie.Title = 'Batman'\nORDER BY CAST(screentime AS INTEGER) DESC\nLIMIT 1",
    "732": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE c.\"Character Name\" = 'Joker' AND m.Title = 'Batman'",
    "733": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Title = 'Batman'",
    "734": "SELECT m.Title\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nWHERE c.\"Character Name\" = 'Dr. Archibald ''Moonlight'' Graham'",
    "735": "SELECT m.Title\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE a.Name = 'Tom Cruise'",
    "736": "SELECT COUNT(DISTINCT movie.MovieID) AS NumberOfMovies\nFROM movie\nJOIN characters ON movie.MovieID = characters.MovieID\nJOIN actor ON characters.ActorID = actor.ActorID\nWHERE actor.Name = 'Morgan Freeman' AND movie.\"MPAA Rating\" = 'PG'",
    "737": "SELECT m.Title, m.Rating\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE a.Name = 'Tom Cruise'\nORDER BY m.Rating DESC\nLIMIT 1",
    "738": "SELECT \"Character Name\"\nFROM characters\nJOIN actor ON characters.ActorID = actor.ActorID\nJOIN movie ON characters.MovieID = movie.MovieID\nWHERE actor.Name = 'Tom Cruise' AND movie.Title = 'Born on the Fourth of July'",
    "739": "SELECT \"Character Name\"\nFROM characters\nJOIN actor ON characters.ActorID = actor.ActorID\nWHERE actor.Name = 'Tom Cruise'",
    "740": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Title = 'Batman'\nORDER BY a.\"Height (Inches)\" DESC\nLIMIT 1",
    "741": "SELECT COUNT(DISTINCT movie.MovieID) AS NumberOfMovies\nFROM movie\nJOIN characters ON movie.MovieID = characters.MovieID\nJOIN actor ON characters.ActorID = actor.ActorID\nWHERE actor.Gender = 'Male' AND actor.Ethnicity = 'African American'",
    "742": "SELECT AVG(m.Rating) AS AverageRating\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE a.Name = 'Tom Cruise'",
    "743": "SELECT \n    ((MAX(CAST(screentime AS INTEGER)) - MIN(CAST(screentime AS INTEGER))) * 100.0 / MIN(CAST(screentime AS INTEGER))) AS percentage_difference\nFROM \n    characters\nJOIN \n    movie ON characters.MovieID = movie.MovieID\nWHERE \n    movie.Title = 'Batman'",
    "744": "SELECT Title \nFROM movie \nWHERE Budget = (SELECT MAX(Budget) FROM movie);",
    "745": "SELECT m.\"MPAA Rating\"\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nWHERE c.\"Character Name\" = 'Peter Quill'",
    "746": "SELECT c.\"Character Name\"\nFROM characters c\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Genre = 'Thriller' AND c.creditOrder = 1\nORDER BY m.Rating DESC\nLIMIT 1",
    "747": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Title = 'Batman'\nORDER BY CAST(c.screentime AS INTEGER) DESC\nLIMIT 1",
    "748": "SELECT COUNT(*) AS NumberOfMovies\nFROM characters\nWHERE ActorID = (\n    SELECT ActorID\n    FROM actor\n    ORDER BY CAST(REPLACE(NetWorth, '$', '') AS INTEGER) DESC\n    LIMIT 1\n)",
    "749": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nWHERE c.\"Character Name\" = 'Chanice Kobolowski'",
    "750": "SELECT a.\"Date of Birth\"\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nWHERE c.\"Character Name\" = 'Sully'",
    "751": "SELECT a.\"Birth City\"\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nWHERE c.\"Character Name\" = 'Gabriel Martin'",
    "752": "SELECT a.Biography\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nWHERE c.\"Character Name\" = 'Michael Moscovitz'",
    "753": "SELECT a.\"Height (Inches)\"\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nWHERE c.\"Character Name\" = 'Lurch'",
    "754": "SELECT \"Character Name\"\nFROM characters\nJOIN movie ON characters.MovieID = movie.MovieID\nWHERE movie.Title = 'G.I. Joe: The Rise of Cobra' AND characters.creditOrder = 3",
    "755": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Title = 'American Hustle' AND c.creditOrder = 2",
    "756": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE c.creditOrder = 1 AND m.\"Release Date\" = '2015-10-26'",
    "757": "SELECT \n    (COUNT(DISTINCT a.ActorID) * 1.0 / (SELECT COUNT(DISTINCT ActorID) FROM characters c JOIN actor a ON c.ActorID = a.ActorID WHERE a.\"Birth Country\" = 'USA')) * 100 AS Percentage_USA_Actors_In_Mrs_Doubtfire\nFROM \n    characters c\nJOIN \n    actor a ON c.ActorID = a.ActorID\nJOIN \n    movie m ON c.MovieID = m.MovieID\nWHERE \n    m.Title = 'Mrs. Doubtfire' AND a.\"Birth Country\" = 'USA';",
    "758": "SELECT \n    (COUNT(DISTINCT CASE WHEN a.\"Date of Birth\" > '1970-01-01' THEN c.ActorID END) * 1.0 / COUNT(DISTINCT c.ActorID)) * 100 AS Percentage\nFROM \n    characters c\nJOIN \n    movie m ON c.MovieID = m.MovieID\nJOIN \n    actor a ON c.ActorID = a.ActorID\nWHERE \n    m.Title = 'Dawn of the Planet of the Apes';",
    "759": "SELECT MovieID\nFROM movie\nWHERE Budget = 15000000 AND Rating BETWEEN 7 AND 8;",
    "760": "SELECT COUNT(*) \nFROM movie \nWHERE \"MPAA Rating\" = 'PG' \nAND \"Release Date\" BETWEEN '1990-06-01' AND '1990-06-30';",
    "761": "SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White'",
    "762": "SELECT DISTINCT m.Genre\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE a.\"Birth City\" = 'New York City' AND m.Rating > 5",
    "763": "SELECT COUNT(DISTINCT movie.MovieID) AS NumberOfRomanticMoviesStarringJohnTravolta\nFROM movie\nJOIN characters ON movie.MovieID = characters.MovieID\nJOIN actor ON characters.ActorID = actor.ActorID\nWHERE movie.Genre = 'Romance' AND actor.Name = 'John Travolta'",
    "764": "SELECT a.\"Height (Inches)\", a.NetWorth\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Title = 'Three Men and a Little Lady'",
    "765": "SELECT m.Genre\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE m.\"MPAA Rating\" = 'PG' AND a.NetWorth = (\n    SELECT MAX(NetWorth)\n    FROM actor\n)\nLIMIT 1",
    "766": "SELECT a.NetWorth\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Title = 'Misery' AND a.\"Height (Inches)\" BETWEEN 60 AND 70",
    "767": "SELECT COUNT(DISTINCT actor.ActorID) AS MaleActorsInGhost\nFROM actor\nJOIN characters ON actor.ActorID = characters.ActorID\nJOIN movie ON characters.MovieID = movie.MovieID\nWHERE actor.Gender = 'Male'\nAND actor.\"Birth Country\" = 'USA'\nAND movie.Title = 'Ghost'",
    "768": "SELECT m.\"MPAA Rating\", m.Title\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE a.Name = 'Leonardo DiCaprio'\nORDER BY m.Budget DESC\nLIMIT 1",
    "769": "SELECT a.NetWorth, a.\"Date of Birth\"\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE m.Title = 'Die Hard 2' AND a.\"Height (Inches)\" BETWEEN 60 AND 65",
    "770": "SELECT m.Runtime\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE a.Ethnicity = 'African American' AND a.\"Date of Birth\" = '1954-12-28'",
    "771": "SELECT a.Name\nFROM actor a\nJOIN characters c ON a.ActorID = c.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE c.\"Character Name\" = 'Don Altobello'\nAND m.Genre = 'Drama'\nAND m.Gross = 136766062",
    "772": "SELECT m.Gross\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE m.Genre = 'Comedy' AND m.Rating < 7 AND a.NetWorth > '$375,000,000.00'",
    "773": "SELECT m.Runtime\nFROM movie m\nJOIN characters c ON m.MovieID = c.MovieID\nJOIN actor a ON c.ActorID = a.ActorID\nWHERE a.Name = 'Jackie Chan' AND m.Rating > 7",
    "774": "WITH DramaActors AS (\n    SELECT DISTINCT a.ActorID\n    FROM actor a\n    JOIN characters c ON a.ActorID = c.ActorID\n    JOIN movie m ON c.MovieID = m.MovieID\n    WHERE m.Genre = 'Drama'\n),\nWealthyDramaActors AS (\n    SELECT COUNT(*) AS WealthyCount\n    FROM DramaActors da\n    JOIN actor a ON da.ActorID = a.ActorID\n    WHERE a.NetWorth > '$400,000,000.00'\n),\nTotalDramaActors AS (\n    SELECT COUNT(*) AS TotalCount\n    FROM DramaActors\n)\nSELECT (CAST(WealthyDramaActors.WealthyCount AS REAL) / TotalDramaActors.TotalCount) * 100 AS Percentage\nFROM WealthyDramaActors, TotalDramaActors",
    "775": "SELECT c.\"Character Name\"\nFROM characters c\nJOIN actor a ON c.ActorID = a.ActorID\nJOIN movie m ON c.MovieID = m.MovieID\nWHERE a.Gender = 'Female'\nAND a.\"Birth City\" = 'Sherman Oaks'\nAND m.Title = 'Bruce Almighty'\nAND a.\"Height (Inches)\" > (SELECT AVG(\"Height (Inches)\") * 0.5 FROM actor)",
    "776": "SELECT COUNT(*) AS EnglishTweets\nFROM twitter\nWHERE Lang = 'en'",
    "777": "SELECT \"text\"\nFROM twitter\nWHERE IsReshare = 'TRUE'",
    "778": "SELECT COUNT(*) AS TweetsSeenByMoreThan1000Users\nFROM twitter\nWHERE Reach > 1000",
    "779": "SELECT COUNT(*) AS PositiveThursdayTweets\nFROM twitter\nWHERE Sentiment > 0 AND Weekday = 'Thursday'",
    "780": "SELECT \"text\"\nFROM twitter\nORDER BY Likes DESC\nLIMIT 1",
    "781": "SELECT City FROM location WHERE Country = 'Argentina';",
    "782": "SELECT COUNT(t.TweetID) AS TotalTweets\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.Country = 'Argentina'",
    "783": "SELECT l.City\nFROM twitter t\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.Country = 'Argentina'\nGROUP BY l.City\nORDER BY COUNT(t.TweetID) DESC\nLIMIT 1",
    "784": "SELECT COUNT(*) AS ResharedTweetsInBuenosAires\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE IsReshare = 'TRUE' AND City = 'Buenos Aires'",
    "785": "SELECT twitter.\"text\"\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE location.City = 'Buenos Aires' AND twitter.Sentiment > 0",
    "786": "SELECT Country\nFROM location\nJOIN twitter ON location.LocationID = twitter.LocationID\nORDER BY twitter.Likes DESC\nLIMIT 1",
    "787": "SELECT Country\nFROM (\n    SELECT l.Country, COUNT(t.TweetID) AS PositiveTweetCount\n    FROM twitter t\n    JOIN location l ON t.LocationID = l.LocationID\n    WHERE t.Sentiment > 0 AND l.Country IN ('Argentina', 'Australia')\n    GROUP BY l.Country\n    ORDER BY PositiveTweetCount DESC\n    LIMIT 1\n)",
    "788": "SELECT COUNT(*) AS ThursdayTweetsFromBuenosAires\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE location.City = 'Buenos Aires' AND twitter.Weekday = 'Thursday'",
    "789": "SELECT COUNT(DISTINCT user.UserID) AS MaleUsersWithHighLikes\nFROM user\nJOIN twitter ON user.UserID = twitter.UserID\nWHERE twitter.Likes > 1000 AND user.Gender = 'Male'",
    "790": "SELECT COUNT(t.TweetID) AS total_tweets_by_male_users\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nWHERE u.Gender = 'Male'",
    "791": "SELECT u.Gender\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nORDER BY t.Reach DESC\nLIMIT 1",
    "792": "SELECT COUNT(*) AS MaleUserTweetsInArgentina\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE user.Gender = 'Male' AND location.Country = 'Argentina'",
    "793": "SELECT twitter.\"text\"\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE user.Gender = 'Male' AND location.City = 'Buenos Aires'",
    "794": "SELECT AVG(TweetCount) AS AvgTweetsPerCity\nFROM (\n    SELECT l.City, COUNT(t.TweetID) AS TweetCount\n    FROM twitter t\n    JOIN location l ON t.LocationID = l.LocationID\n    WHERE l.Country = 'Argentina'\n    GROUP BY l.City\n)",
    "795": "SELECT \n    (COUNT(DISTINCT CASE WHEN u.Gender = 'Male' THEN t.TweetID END) * 1.0 / COUNT(t.TweetID)) * 100 AS PercentageOfMaleUserTweets\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nWHERE t.Sentiment > 0",
    "796": "SELECT COUNT(*) AS NumberOfUsersWithUnknownGender\nFROM user\nWHERE Gender = 'Unknown'",
    "797": "SELECT COUNT(DISTINCT State) AS NumberOfStates\nFROM location\nWHERE Country = 'United Kingdom'",
    "798": "SELECT StateCode\nFROM location\nWHERE State = 'Gwynedd'",
    "799": "SELECT LocationID\nFROM location\nWHERE State = 'West Sussex';",
    "800": "SELECT COUNT(*) AS ResharedTweetsInTexas\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE location.State = 'Texas' AND twitter.IsReshare = 'TRUE'",
    "801": "SELECT Country\nFROM location\nJOIN twitter ON location.LocationID = twitter.LocationID\nWHERE Reach = 547851",
    "802": "SELECT COUNT(*) AS PositiveTweetsFromHaNoi\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE Sentiment > 0 AND State = 'Ha Noi'",
    "803": "SELECT t.\"text\"\nFROM twitter t\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.State = 'Connecticut'\nORDER BY t.Klout DESC\nLIMIT 1",
    "804": "SELECT COUNT(DISTINCT twitter.UserID) AS FemaleTwitterUsersFromWisconsin\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE user.Gender = 'Female' AND location.State = 'Wisconsin'",
    "805": "SELECT user.Gender\nFROM user\nJOIN twitter ON user.UserID = twitter.UserID\nWHERE twitter.TweetID = 'tw-715909161071091712'",
    "806": "SELECT City\nFROM location\nJOIN twitter ON location.LocationID = twitter.LocationID\nWHERE \"text\" = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a'",
    "807": "SELECT u.Gender\nFROM user u\nJOIN twitter t ON u.UserID = t.UserID\nWHERE t.RetweetCount = 535",
    "808": "SELECT u.Gender\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nWHERE t.Weekday = 'Wednesday'\nORDER BY t.Klout DESC\nLIMIT 1",
    "809": "SELECT u.Gender\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nORDER BY t.Likes DESC\nLIMIT 1",
    "810": "SELECT COUNT(t.TweetID) AS NumberOfTweets\nFROM twitter t\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.State = 'Michigan' AND t.Weekday = 'Thursday'",
    "811": "SELECT StateCode FROM location\nJOIN twitter ON location.LocationID = twitter.LocationID\nWHERE TweetID = 'tw-685681052912873473'",
    "812": "SELECT \n    (SELECT CAST(COUNT(DISTINCT t.UserID) AS FLOAT)\n     FROM twitter t\n     JOIN user u ON t.UserID = u.UserID\n     JOIN location l ON t.LocationID = l.LocationID\n     WHERE u.Gender = 'Male' AND l.State = 'Florida') /\n    (SELECT CAST(COUNT(DISTINCT t.UserID) AS FLOAT)\n     FROM twitter t\n     JOIN user u ON t.UserID = u.UserID\n     JOIN location l ON t.LocationID = l.LocationID\n     WHERE l.State = 'Florida') * 100 AS MaleUserPercentage\nFROM dual",
    "813": "SELECT \n    (CAST(SUM(CASE WHEN t.Sentiment > 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(t.TweetID)) * 100 AS PositiveTweetPercentage\nFROM \n    twitter t\nJOIN \n    location l ON t.LocationID = l.LocationID\nWHERE \n    l.State = 'California'",
    "814": "SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633'",
    "815": "SELECT Reach\nFROM twitter\nWHERE \"text\" = 'Happy New Year to all those AWS instances of ours!'",
    "816": "SELECT COUNT(TweetID) AS TotalTweetsInEnglish\nFROM twitter\nWHERE Lang = 'en'",
    "817": "SELECT CASE WHEN EXISTS (\n    SELECT 1 \n    FROM twitter \n    WHERE TweetID = 'tw-682714048199311366' AND LocationID = 3751\n)\nTHEN 'Yes' ELSE 'No' END AS IsLocation3751ForTweet;",
    "818": "SELECT COUNT(*) FROM twitter WHERE Weekday = 'Wednesday';",
    "819": "SELECT \"text\"\nFROM twitter\nWHERE Weekday = 'Thursday'",
    "820": "SELECT user.Gender\nFROM user\nJOIN twitter ON user.UserID = twitter.UserID\nWHERE twitter.TweetID = 'tw-682714583044243456'",
    "821": "SELECT twitter.\"text\"\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nWHERE user.Gender = 'Unknown'",
    "822": "SELECT COUNT(t.TweetID) AS TotalMaleTweetIDs\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nWHERE u.Gender = 'Male'",
    "823": "SELECT u.Gender, COUNT(t.TweetID) AS TweetCount\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nWHERE t.Lang = 'en'\nGROUP BY u.Gender\nORDER BY TweetCount DESC\nLIMIT 1",
    "824": "SELECT u.Gender\nFROM user u\nJOIN twitter t ON u.UserID = t.UserID\nWHERE t.RetweetCount > 30",
    "825": "SELECT COUNT(DISTINCT twitter.UserID) AS FemaleUsersWhoReshared\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nWHERE user.Gender = 'Female' AND twitter.IsReshare = 'TRUE'",
    "826": "SELECT Country\nFROM location\nJOIN twitter ON location.LocationID = twitter.LocationID\nGROUP BY Country\nORDER BY SUM(Likes) DESC\nLIMIT 1",
    "827": "SELECT Country\nFROM location\nJOIN twitter ON location.LocationID = twitter.LocationID\nWHERE TweetID = 'tw-682723090279841798'",
    "828": "SELECT twitter.\"text\"\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE location.Country = 'Australia'",
    "829": "SELECT twitter.\"text\"\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE location.City = 'Rawang' AND location.State = 'Selangor' AND location.Country = 'Malaysia'",
    "830": "SELECT DISTINCT Lang\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE Country = 'Brazil'",
    "831": "SELECT Country\nFROM location\nJOIN twitter ON location.LocationID = twitter.LocationID\nWHERE Sentiment > 0\nGROUP BY Country\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "832": "SELECT SUM(t.Likes) AS TotalLikes\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nWHERE t.Lang = 'ru' AND u.Gender = 'Male'",
    "833": "SELECT AVG(CountMaleUsers) AS AvgMaleUsersPerWeek\nFROM (\n    SELECT COUNT(DISTINCT t.UserID) AS CountMaleUsers\n    FROM twitter t\n    JOIN user u ON t.UserID = u.UserID\n    WHERE u.Gender = 'Male'\n    GROUP BY (t.Day - 1) / 7 -- This is a simplification to group days into weeks\n)",
    "834": "SELECT COUNT(*) FROM twitter WHERE Klout > 50",
    "835": "SELECT twitter.\"text\"\nFROM twitter\nWHERE twitter.Lang <> 'en'",
    "836": "SELECT UserID\nFROM twitter\nGROUP BY UserID\nORDER BY COUNT(TweetID) DESC\nLIMIT 1",
    "837": "SELECT COUNT(*) AS ResharedTweetsOnMonday\nFROM twitter\nWHERE Weekday = 'Monday' AND IsReshare = 'TRUE'",
    "838": "SELECT \"text\"\nFROM twitter\nORDER BY Reach DESC\nLIMIT 3",
    "839": "SELECT COUNT(*) AS ResharedTweetsOver100Likes\nFROM twitter\nWHERE IsReshare = 'TRUE' AND Likes > 100",
    "840": "SELECT COUNT(t.TweetID) AS TotalTweets\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nWHERE u.Gender = 'Male' AND t.Weekday = 'Monday'",
    "841": "SELECT u.Gender\nFROM user u\nJOIN twitter t ON u.UserID = t.UserID\nORDER BY t.Likes DESC\nLIMIT 1",
    "842": "SELECT twitter.\"text\"\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nWHERE twitter.Lang = 'fr' AND user.Gender = 'Male'",
    "843": "SELECT COUNT(*) AS FrenchTweetsFromAustralia\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE Lang = 'fr' AND Country = 'Australia'",
    "844": "SELECT COUNT(*) AS PositiveTweetsByMaleInAustralia\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE Sentiment > 0\nAND Gender = 'Male'\nAND Country = 'Australia'",
    "845": "SELECT \n    (SELECT COUNT(*) FROM twitter \n     JOIN user ON twitter.UserID = user.UserID \n     WHERE user.Gender = 'Male' AND twitter.Sentiment > 0)\n    -\n    (SELECT COUNT(*) FROM twitter \n     JOIN user ON twitter.UserID = user.UserID \n     WHERE user.Gender = 'Male' AND twitter.Sentiment = 0) \nAS difference",
    "846": "SELECT l.City\nFROM twitter t\nJOIN location l ON t.LocationID = l.LocationID\nORDER BY t.RetweetCount DESC\nLIMIT 1",
    "847": "SELECT \n    City,\n    COUNT(*) AS TweetCount\nFROM \n    twitter\nJOIN \n    location ON twitter.LocationID = location.LocationID\nWHERE \n    City IN ('Bangkok', 'Chiang Mai')\nGROUP BY \n    City\nORDER BY \n    TweetCount DESC\nLIMIT 1;",
    "848": "SELECT COUNT(*) AS TweetsOn31st\nFROM twitter\nJOIN location ON twitter.LocationID = location.LocationID\nWHERE location.State = 'Santa Fe'\nAND location.Country = 'Argentina'\nAND twitter.Day = 31",
    "849": "SELECT l.City, COUNT(t.TweetID) AS NumberOfTweets\nFROM twitter t\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.Country = 'Canada'\nGROUP BY l.City\nORDER BY NumberOfTweets DESC\nLIMIT 3",
    "850": "SELECT DISTINCT l.City\nFROM twitter AS t\nJOIN location AS l ON t.LocationID = l.LocationID\nWHERE t.Sentiment = 0;",
    "851": "SELECT t.\"text\"\nFROM twitter t\nJOIN user u ON t.UserID = u.UserID\nJOIN location l ON t.LocationID = l.LocationID\nWHERE u.Gender = 'Male' AND l.Country = 'Argentina'\nORDER BY t.Likes DESC\nLIMIT 1",
    "852": "SELECT AVG(Likes) AS AverageLikes\nFROM twitter\nJOIN user ON twitter.UserID = user.UserID\nWHERE user.Gender = 'Male' AND twitter.Weekday = 'Monday'",
    "853": "SELECT \n    l.City,\n    AVG(t.Likes) AS AverageLikes\nFROM \n    twitter AS t\nJOIN \n    location AS l ON t.LocationID = l.LocationID\nWHERE \n    l.City IN ('Bangkok', 'Chiang Mai')\nGROUP BY \n    l.City\nORDER BY \n    AverageLikes DESC\nLIMIT 1;",
    "854": "SELECT name, diff\nFROM course\nWHERE name IN ('Intro to BlockChain', 'Computer Network')\nORDER BY diff DESC\nLIMIT 1;",
    "855": "SELECT name\nFROM course\nWHERE credit < (\n    SELECT credit\n    FROM course\n    WHERE name = 'Machine Learning Theory'\n)",
    "856": "SELECT COUNT(*) \nFROM prof \nWHERE popularity > (\n    SELECT popularity \n    FROM prof \n    WHERE first_name = 'Zhou' AND last_name = 'Zhihua'\n)",
    "857": "SELECT phone_number FROM student WHERE f_name = 'Kerry' AND l_name = 'Pryor';",
    "858": "SELECT p.first_name || ' ' || p.last_name AS full_name\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nJOIN student ON RA.student_id = student.student_id\nWHERE student.f_name = 'Faina' AND student.l_name = 'Mallinar'",
    "859": "SELECT COUNT(*) AS num_research_assistants\nFROM RA\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.first_name = 'Sauveur' AND prof.last_name = 'Skyme';",
    "860": "SELECT s.f_name || ' ' || s.l_name AS full_name\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nWHERE RA.capability = 5",
    "861": "SELECT COUNT(*) AS num_of_RAs_with_avg_salary\nFROM RA\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki' AND RA.salary = 'med'",
    "862": "SELECT s.f_name || ' ' || s.l_name AS full_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Machine Learning Theory'",
    "863": "SELECT COUNT(*) \nFROM registration \nJOIN student ON registration.student_id = student.student_id \nJOIN course ON registration.course_id = course.course_id \nWHERE course.name = 'Machine Learning Theory' \nAND registration.grade = 'B' \nAND student.gpa > 3;",
    "864": "SELECT c.name\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nJOIN student s ON r.student_id = s.student_id\nWHERE s.f_name = 'Laughton' AND s.l_name = 'Antonio';",
    "865": "SELECT s.f_name || ' ' || s.l_name AS full_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Intro to Database 2' AND r.grade IS NULL",
    "866": "SELECT student.f_name, registration.sat\nFROM registration\nJOIN course ON registration.course_id = course.course_id\nJOIN student ON registration.student_id = student.student_id\nWHERE course.name = 'Machine Learning Theory' AND student.f_name IN ('Willie', 'Laughton')\nORDER BY registration.sat DESC\nLIMIT 1;",
    "867": "SELECT COUNT(DISTINCT prof.prof_id) AS male_professors_with_more_than_3_RAs\nFROM prof\nJOIN RA ON prof.prof_id = RA.prof_id\nWHERE prof.gender = 'male'\nGROUP BY prof.prof_id\nHAVING COUNT(RA.student_id) > 3",
    "868": "SELECT COUNT(*) AS undergraduate_students\nFROM registration\nJOIN course ON registration.course_id = course.course_id\nJOIN student ON registration.student_id = student.student_id\nWHERE course.name = 'Machine Learning Theory' AND student.type = 'UG';",
    "869": "SELECT p.first_name || ' ' || p.last_name AS full_name\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nJOIN student ON RA.student_id = student.student_id\nWHERE student.f_name = 'Willie' AND student.l_name = 'Rechert';",
    "870": "SELECT AVG(s.gpa) AS avg_gpa\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki'",
    "871": "SELECT AVG(sat) AS average_satisfaction\nFROM registration\nJOIN course ON registration.course_id = course.course_id\nWHERE course.name = 'Machine Learning Theory'",
    "872": "SELECT COUNT(*) AS number_of_research_postgraduate_students\nFROM student\nWHERE type = 'RPG';",
    "873": "SELECT f_name || ' ' || l_name AS full_name\nFROM student\nORDER BY gpa DESC\nLIMIT 1",
    "874": "SELECT COUNT(*) AS students_with_A\nFROM registration\nJOIN course ON registration.course_id = course.course_id\nWHERE course.credit = 3 AND course.diff = 1 AND registration.grade = 'A'",
    "875": "SELECT COUNT(DISTINCT student_id) AS students_in_hardest_course\nFROM registration\nJOIN course ON registration.course_id = course.course_id\nWHERE course.diff = 5;",
    "876": "SELECT p.first_name || ' ' || p.last_name AS full_name\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nJOIN student ON RA.student_id = student.student_id\nWHERE student.f_name = 'Oliy' AND student.l_name = 'Spratling'",
    "877": "SELECT p.popularity\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nJOIN student ON RA.student_id = student.student_id\nWHERE student.f_name = 'Harrietta' AND student.l_name = 'Lydford'",
    "878": "SELECT COUNT(RA.student_id) AS num_research_assistants\nFROM RA\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.gender = 'female' AND prof.teachingability = (\n    SELECT MIN(teachingability)\n    FROM prof\n    WHERE gender = 'female'\n)",
    "879": "SELECT p.first_name, p.last_name\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nGROUP BY p.prof_id\nHAVING COUNT(RA.student_id) > 2\nORDER BY p.teachingability DESC\nLIMIT 1",
    "880": "SELECT r.grade\nFROM registration r\nJOIN student s ON r.student_id = s.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE s.f_name = 'Rik' AND s.l_name = 'Unsworth' AND c.name = 'Computer Network'",
    "881": "SELECT COUNT(*) AS course_count\nFROM registration\nJOIN student ON registration.student_id = student.student_id\nWHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin';",
    "882": "SELECT s.f_name, s.l_name\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.first_name = 'Zhihua' AND prof.last_name = 'Zhou' AND s.type = 'RPG'",
    "883": "SELECT COUNT(*) AS number_of_students\nFROM registration\nJOIN course ON registration.course_id = course.course_id\nWHERE course.name = 'Statistical Learning';",
    "884": "SELECT s.f_name || ' ' || s.l_name AS full_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Applied Deep Learning' AND (r.grade IS NULL OR r.grade = '')",
    "885": "SELECT s.phone_number\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE r.grade = 'A' AND c.name = 'Intro to BlockChain'",
    "886": "SELECT \n    (SELECT COUNT(*) \n     FROM RA \n     JOIN student ON RA.student_id = student.student_id \n     JOIN prof ON RA.prof_id = prof.prof_id \n     WHERE student.type = 'TPG' \n     AND prof.first_name = 'Ogdon' \n     AND prof.last_name = 'Zywicki') * 1.0 / \n    (SELECT COUNT(*) \n     FROM RA \n     JOIN prof ON RA.prof_id = prof.prof_id \n     WHERE prof.first_name = 'Ogdon' \n     AND prof.last_name = 'Zywicki') AS percentage;",
    "887": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Computer Network')) * 100 AS percentage\nFROM \n    registration\nJOIN \n    course ON registration.course_id = course.course_id\nWHERE \n    course.name = 'Computer Network' AND registration.grade = 'B'",
    "888": "SELECT COUNT(*) FROM course WHERE diff = 5;",
    "889": "SELECT first_name || ' ' || last_name AS full_name\nFROM prof\nWHERE graduate_from IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University')",
    "890": "SELECT name \nFROM course \nWHERE credit = (SELECT MAX(credit) FROM course) \nAND diff = (SELECT MAX(diff) FROM course WHERE credit = (SELECT MAX(credit) FROM course))",
    "891": "SELECT COUNT(*) \nFROM student \nWHERE intelligence = (\n    SELECT MAX(intelligence) \n    FROM student \n    WHERE type = 'UG'\n)",
    "892": "SELECT COUNT(*) AS female_professors_count\nFROM prof\nWHERE gender = 'female' AND popularity = (SELECT MAX(popularity) FROM prof)",
    "893": "SELECT COUNT(*) AS num_research_postgraduate_students\nFROM student\nWHERE type = 'RPG';",
    "894": "SELECT COUNT(*) AS students_with_A\nFROM registration\nJOIN course ON registration.course_id = course.course_id\nWHERE course.name = 'Applied Deep Learning' AND registration.grade = 'A'",
    "895": "SELECT s.gpa\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nWHERE RA.salary = 'free'",
    "896": "SELECT c.name\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nWHERE c.diff = 1 AND r.grade = 'A'\nGROUP BY c.course_id\nORDER BY COUNT(r.student_id) DESC\nLIMIT 1",
    "897": "SELECT COUNT(course_id) AS courses_taken\nFROM registration\nWHERE student_id = (\n    SELECT student_id\n    FROM student\n    ORDER BY gpa DESC\n    LIMIT 1\n)",
    "898": "SELECT COUNT(*) AS num_students_advised\nFROM RA\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki'",
    "899": "SELECT c.name\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nGROUP BY c.course_id\nORDER BY AVG(r.sat) DESC\nLIMIT 1",
    "900": "SELECT c.name\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nJOIN student s ON r.student_id = s.student_id\nWHERE s.intelligence = (SELECT MIN(intelligence) FROM student)\nAND r.sat = (SELECT MIN(sat) FROM registration)",
    "901": "SELECT \n    course.name,\n    COUNT(*) AS students_with_A\nFROM \n    registration\nJOIN \n    course ON registration.course_id = course.course_id\nWHERE \n    registration.grade = 'A'\n    AND course.name IN ('Advanced Operating System', 'Intro to BlockChain')\nGROUP BY \n    course.name\nORDER BY \n    students_with_A DESC\nLIMIT 1;",
    "902": "SELECT p.popularity\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nWHERE RA.capability = (SELECT MAX(capability) FROM RA)\nGROUP BY p.prof_id\nORDER BY COUNT(RA.student_id) DESC\nLIMIT 1",
    "903": "SELECT AVG(student_count) AS average_students\nFROM (\n    SELECT course.course_id, COUNT(registration.student_id) AS student_count\n    FROM course\n    JOIN registration ON course.course_id = registration.course_id\n    WHERE course.diff = 4\n    GROUP BY course.course_id\n)",
    "904": "SELECT COUNT(DISTINCT student.student_id) AS students_failed\nFROM student\nJOIN registration ON student.student_id = registration.student_id\nWHERE student.gpa BETWEEN 3 AND 4\nAND (registration.grade IS NULL OR registration.grade = '')",
    "905": "SELECT COUNT(DISTINCT student.student_id) AS students_with_all_As\nFROM student\nJOIN registration ON student.student_id = registration.student_id\nWHERE student.type = 'UG'\nGROUP BY student.student_id\nHAVING COUNT(*) = SUM(CASE WHEN registration.grade = 'A' THEN 1 ELSE 0 END)",
    "906": "SELECT AVG(s.gpa) AS average_gpa, s.f_name || ' ' || s.l_name AS full_name\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nWHERE RA.capability = 5 AND RA.salary = 'high'\nGROUP BY s.student_id",
    "907": "SELECT prof_id, student_id\nFROM RA\nWHERE capability = (SELECT MIN(capability) FROM RA)",
    "908": "SELECT first_name || ' ' || last_name AS full_name\nFROM prof\nWHERE graduate_from = 'University of Boston'",
    "909": "SELECT registration.course_id, registration.student_id\nFROM registration\nWHERE registration.grade IS NULL OR registration.grade = '';",
    "910": "SELECT \n    SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS Male_Count,\n    SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) AS Female_Count,\n    (SUM(CASE WHEN gender = 'Male' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN gender = 'Female' THEN 1.0 ELSE 0 END)) AS Male_Female_Ratio\nFROM \n    prof;",
    "911": "SELECT name, credit\nFROM course\nWHERE diff = (SELECT MIN(diff) FROM course)",
    "912": "SELECT s.f_name || ' ' || s.l_name AS full_name, s.gpa\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.prof_id = (\n    SELECT prof_id\n    FROM prof\n    ORDER BY popularity DESC\n    LIMIT 1\n)",
    "913": "SELECT s.f_name || ' ' || s.l_name AS full_name, s.email\nFROM RA\nJOIN student s ON RA.student_id = s.student_id\nWHERE RA.salary = 'free'",
    "914": "SELECT s.f_name || ' ' || s.l_name AS full_name, RA.capability, s.gpa\nFROM RA\nJOIN student s ON RA.student_id = s.student_id\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.first_name = 'Merwyn' AND prof.last_name = 'Conkay'",
    "915": "SELECT s.f_name || ' ' || s.l_name AS full_name, r.grade\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Intro to BlockChain'",
    "916": "SELECT s.f_name || ' ' || s.l_name AS full_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.diff = (SELECT MAX(diff) FROM course)\nAND r.grade = 'A'",
    "917": "SELECT p.first_name || ' ' || p.last_name AS full_name, p.graduate_from\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nJOIN student ON RA.student_id = student.student_id\nWHERE student.f_name = 'Olia' AND student.l_name = 'Rabier'",
    "918": "SELECT s.f_name, s.l_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Advanced Database Systems'\nAND r.sat = (SELECT MAX(sat) FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Advanced Database Systems')",
    "919": "SELECT \n    s.student_id,\n    s.f_name || ' ' || s.l_name AS student_name,\n    SUM(\n        CASE r.grade\n            WHEN 'A' THEN 4 * c.credit\n            WHEN 'B' THEN 3 * c.credit\n            WHEN 'C' THEN 2 * c.credit\n            WHEN 'D' THEN 1 * c.credit\n            ELSE 0\n        END\n    ) / SUM(c.credit) AS semester_gpa\nFROM \n    student s\nJOIN \n    registration r ON s.student_id = r.student_id\nJOIN \n    course c ON r.course_id = c.course_id\nWHERE \n    s.f_name = 'Laughton' AND s.l_name = 'Antonio'\nGROUP BY \n    s.student_id, s.f_name, s.l_name",
    "920": "SELECT course.name\nFROM course\nJOIN registration ON course.course_id = registration.course_id\nJOIN student ON registration.student_id = student.student_id\nWHERE student.type = 'UG' AND student.gpa > 3.7",
    "921": "SELECT s.f_name, s.l_name, RA.capability\nFROM RA\nJOIN prof ON RA.prof_id = prof.prof_id\nJOIN student s ON RA.student_id = s.student_id\nWHERE prof.graduate_from = 'University of Washington'",
    "922": "SELECT s.f_name || ' ' || s.l_name AS full_name, s.email, s.intelligence\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nWHERE RA.capability = (SELECT MAX(capability) FROM RA)\nAND RA.salary = 'high'",
    "923": "SELECT c.name, c.credit\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nJOIN student s ON s.student_id = r.student_id\nJOIN RA ON s.student_id = RA.student_id\nJOIN prof p ON RA.prof_id = p.prof_id\nWHERE p.gender = 'Female' AND p.teachingability = (\n    SELECT MAX(teachingability)\n    FROM prof\n    WHERE gender = 'Female'\n)",
    "924": "SELECT COUNT(*) FROM prof WHERE gender = 'Female';",
    "925": "SELECT name FROM course WHERE diff = (SELECT MAX(diff) FROM course);",
    "926": "SELECT COUNT(*) \nFROM student \nWHERE gpa BETWEEN 3.1 AND 3.7 \nAND type = 'UG';",
    "927": "SELECT credit FROM course WHERE name = 'Computer Vision';",
    "928": "SELECT s.student_id\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE s.gpa = 2.5 AND c.name = 'C for Programmers'",
    "929": "SELECT s.l_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Intro to Database 2'\nORDER BY r.sat DESC\nLIMIT 1",
    "930": "SELECT COUNT(*) AS total_students_with_high_salary_and_high_gpa\nFROM student\nJOIN RA ON student.student_id = RA.student_id\nWHERE RA.salary = 'high' AND student.gpa > 3;",
    "931": "SELECT c.name\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nJOIN student s ON r.student_id = s.student_id\nWHERE s.type = 'UG'\nORDER BY r.sat DESC\nLIMIT 1",
    "932": "SELECT RA.capability\nFROM RA\nJOIN student ON RA.student_id = student.student_id\nWHERE student.type = 'RPG' AND student.intelligence >= 4",
    "933": "SELECT COUNT(*) \nFROM student \nJOIN registration ON student.student_id = registration.student_id \nWHERE registration.grade = 'B' AND student.intelligence = 3;",
    "934": "SELECT c.diff\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nJOIN student s ON r.student_id = s.student_id\nWHERE s.intelligence = 5 AND r.grade = 'A'",
    "935": "SELECT COUNT(DISTINCT RA.student_id) AS students_with_capability_5\nFROM RA\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE RA.capability = 5 AND prof.popularity = (SELECT MAX(popularity) FROM prof)",
    "936": "SELECT course.name\nFROM course\nJOIN registration ON course.course_id = registration.course_id\nWHERE registration.grade = 'D'",
    "937": "SELECT RA.capability\nFROM RA\nJOIN student ON RA.student_id = student.student_id\nWHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin'",
    "938": "SELECT COUNT(DISTINCT student.student_id) AS students_with_gpa_3_2\nFROM student\nJOIN registration ON student.student_id = registration.student_id\nJOIN course ON registration.course_id = course.course_id\nWHERE course.credit = 3 AND student.gpa = 3.2;",
    "939": "SELECT COUNT(*) \nFROM student \nJOIN RA ON student.student_id = RA.student_id \nWHERE RA.salary = 'low' AND student.gpa = 3.5;",
    "940": "SELECT s.email\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE r.grade = 'B' AND c.diff > (SELECT AVG(diff) * 0.8 FROM course)",
    "941": "SELECT \n    (CAST(COUNT(CASE WHEN RA.salary = 'low' THEN 1 END) AS REAL) / COUNT(RA.salary)) * 100 AS percentage_low_salary\nFROM \n    prof\nJOIN \n    RA ON prof.prof_id = RA.prof_id\nWHERE \n    prof.teachingability <= 3",
    "942": "SELECT \n    name AS most_important_course,\n    (SELECT name FROM course ORDER BY diff DESC LIMIT 1) AS most_difficult_course\nFROM course\nORDER BY credit DESC\nLIMIT 1;",
    "943": "SELECT AVG(teachingability) AS average_teaching_ability\nFROM prof\nWHERE popularity = (SELECT MAX(popularity) FROM prof)",
    "944": "SELECT AVG(sat) AS average_satisfaction\nFROM registration\nWHERE grade = 'B'",
    "945": "SELECT f_name || ' ' || l_name AS full_name, phone_number\nFROM student\nWHERE intelligence < 4 AND gpa > 3;",
    "946": "SELECT s.f_name, s.l_name\nFROM student s\nJOIN RA ON s.student_id = RA.student_id\nWHERE RA.capability > (SELECT AVG(capability) FROM RA)",
    "947": "SELECT s.f_name || ' ' || s.l_name AS full_name, c.name AS course_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE s.intelligence = 5 AND s.gpa < 3;",
    "948": "SELECT AVG(RA.capability) AS average_capability\nFROM RA\nJOIN student ON RA.student_id = student.student_id\nWHERE student.gpa < 2.5;",
    "949": "SELECT DISTINCT p.first_name || ' ' || p.last_name AS full_name\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nJOIN student ON RA.student_id = student.student_id\nWHERE student.intelligence = 1",
    "950": "SELECT \n    AVG(hardest.gpa) - AVG(easiest.gpa) AS gpa_difference\nFROM \n    student\nJOIN \n    registration AS hardest_reg ON student.student_id = hardest_reg.student_id\nJOIN \n    course AS hardest_course ON hardest_reg.course_id = hardest_course.course_id AND hardest_course.diff = (SELECT MAX(diff) FROM course)\nJOIN \n    registration AS easiest_reg ON student.student_id = easiest_reg.student_id\nJOIN \n    course AS easiest_course ON easiest_reg.course_id = easiest_course.course_id AND easiest_course.diff = (SELECT MIN(diff) FROM course)",
    "951": "SELECT s.f_name || ' ' || s.l_name AS full_name, RA.capability\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nLEFT JOIN RA ON s.student_id = RA.student_id\nWHERE r.grade IS NULL",
    "952": "SELECT COUNT(DISTINCT r.student_id) AS high_salary_students_in_computer_vision\nFROM registration r\nJOIN RA ON r.student_id = RA.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE RA.salary = 'High' AND c.name = 'computer vision';",
    "953": "SELECT p.first_name || ' ' || p.last_name AS full_name, p.popularity\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nGROUP BY p.prof_id\nORDER BY COUNT(RA.student_id) DESC\nLIMIT 1",
    "954": "WITH CourseAStats AS (\n    SELECT\n        course_id,\n        COUNT(student_id) AS ACount\n    FROM\n        registration\n    WHERE\n        grade = 'A'\n    GROUP BY\n        course_id\n),\nMaxACountCourse AS (\n    SELECT\n        course_id\n    FROM\n        CourseAStats\n    WHERE\n        ACount = (SELECT MAX(ACount) FROM CourseAStats)\n    LIMIT 1\n),\nStudentsWithAInMaxCourse AS (\n    SELECT\n        r.student_id,\n        s.f_name || ' ' || s.l_name AS full_name,\n        r.course_id\n    FROM\n        registration r\n    JOIN\n        student s ON r.student_id = s.student_id\n    WHERE\n        r.grade = 'A'\n    AND\n        r.course_id IN (SELECT course_id FROM MaxACountCourse)\n)\nSELECT\n    c.name AS course_name,\n    s.full_name\nFROM\n    StudentsWithAInMaxCourse s\nJOIN\n    course c ON s.course_id = c.course_id",
    "955": "SELECT \n    AVG(CASE WHEN RA.salary = 'high' THEN registration.sat END) - \n    AVG(CASE WHEN RA.salary = 'free' THEN registration.sat END) AS avg_sat_diff\nFROM registration\nJOIN RA ON registration.student_id = RA.student_id",
    "956": "SELECT graduate_from\nFROM prof\nJOIN RA ON prof.prof_id = RA.prof_id\nJOIN student ON RA.student_id = student.student_id\nWHERE student.type = 'UG'\nGROUP BY prof.prof_id\nORDER BY COUNT(student.student_id) DESC\nLIMIT 1",
    "957": "SELECT p.first_name || ' ' || p.last_name AS full_name, p.email\nFROM prof p\nJOIN RA ON p.prof_id = RA.prof_id\nGROUP BY p.prof_id\nHAVING COUNT(RA.student_id) >= 2 AND p.teachingability > (SELECT AVG(teachingability) FROM prof)",
    "958": "WITH CourseID AS (\n    SELECT course_id\n    FROM course\n    WHERE name = 'Intro to Database 2'\n),\nMaxSAT AS (\n    SELECT MAX(sat) AS max_sat\n    FROM registration\n    JOIN CourseID ON registration.course_id = CourseID.course_id\n),\nHighlySatisfiedCount AS (\n    SELECT COUNT(*) AS count_highly_satisfied\n    FROM registration\n    JOIN CourseID ON registration.course_id = CourseID.course_id\n    JOIN MaxSAT ON registration.sat = MaxSAT.max_sat\n),\nTotalStudentsInCourse AS (\n    SELECT COUNT(*) AS total_students\n    FROM registration\n    JOIN CourseID ON registration.course_id = CourseID.course_id\n)\nSELECT \n    (CAST(count_highly_satisfied AS REAL) / CAST(total_students AS REAL)) * 100 AS percentage_highly_satisfied\nFROM HighlySatisfiedCount, TotalStudentsInCourse;",
    "959": "SELECT f_name, l_name FROM student WHERE gpa = (SELECT MAX(gpa) FROM student)",
    "960": "SELECT COUNT(DISTINCT RA.student_id) AS high_salary_students\nFROM RA\nJOIN prof ON RA.prof_id = prof.prof_id\nWHERE prof.teachingability = (SELECT MAX(teachingability) FROM prof)\nAND RA.salary = 'high'",
    "961": "SELECT salary\nFROM RA\nJOIN student ON RA.student_id = student.student_id\nWHERE student.email = 'grosellg@hku.hk'",
    "962": "SELECT COUNT(*) \nFROM student \nJOIN registration ON student.student_id = registration.student_id \nJOIN course ON registration.course_id = course.course_id \nWHERE registration.sat = 4 AND student.gpa = 3.8 AND course.name = 'Statistical Learning';",
    "963": "SELECT COUNT(DISTINCT student.student_id) AS students_with_intelligence_2\nFROM student\nJOIN registration ON student.student_id = registration.student_id\nJOIN course ON registration.course_id = course.course_id\nWHERE student.intelligence = 2 AND course.diff = 3",
    "964": "SELECT s.f_name, s.l_name\nFROM student s\nJOIN registration r ON s.student_id = r.student_id\nJOIN course c ON r.course_id = c.course_id\nWHERE c.name = 'Applied Deep Learning' AND r.grade = 'C'",
    "965": "SELECT c.name\nFROM course c\nJOIN registration r ON c.course_id = r.course_id\nJOIN student s ON r.student_id = s.student_id\nWHERE s.type = 'RPG' AND r.sat = 1",
    "966": "SELECT \n    SUM(CASE WHEN type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN type = 'RPG' THEN 1 ELSE 0 END) AS difference\nFROM \n    student\nWHERE \n    student_id IN (SELECT student_id FROM RA WHERE capability < 3)",
    "967": "SELECT p_id_dummy AS advisor_id, AVG(student_count) AS average_students_per_advisor\nFROM (\n    SELECT p_id_dummy, COUNT(p_id) AS student_count\n    FROM advisedBy\n    GROUP BY p_id_dummy\n)",
    "968": "SELECT COUNT(DISTINCT p_id) AS professors_teaching_course_18\nFROM taughtBy\nWHERE course_id = 18",
    "969": "SELECT course_id FROM course WHERE courseLevel = 'Level_500'",
    "970": "SELECT COUNT(*) AS NumberOfCourses\nFROM course\nWHERE courseLevel = 'Level_300';",
    "971": "SELECT p.p_id, tb.course_id\nFROM person p\nJOIN taughtBy tb ON p.p_id = tb.p_id\nWHERE p.professor = 1 AND p.hasPosition = '0'",
    "972": "SELECT DISTINCT tb.p_id\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nWHERE c.courseLevel = 'Level_400'",
    "973": "SELECT DISTINCT tb.course_id\nFROM taughtBy tb\nJOIN advisedBy ab ON tb.p_id = ab.p_id_dummy\nWHERE ab.p_id = 376",
    "974": "SELECT DISTINCT p.p_id, p.professor, p.student, p.hasPosition, p.inPhase, p.yearsInProgram\nFROM person p\nJOIN advisedBy a ON p.p_id = a.p_id_dummy\nJOIN person p2 ON a.p_id = p2.p_id\nWHERE p2.yearsInProgram = 'Year_3'",
    "975": "SELECT courseLevel\nFROM course\nJOIN taughtBy ON course.course_id = taughtBy.course_id\nWHERE taughtBy.p_id = 297",
    "976": "SELECT c.courseLevel, tb.p_id AS professor\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nWHERE c.course_id = 165",
    "977": "SELECT person.p_id, person.yearsInProgram\nFROM person\nJOIN taughtBy ON person.p_id = taughtBy.p_id\nJOIN advisedBy ON person.p_id = advisedBy.p_id\nWHERE advisedBy.p_id_dummy = 5",
    "978": "SELECT c.course_id, c.courseLevel\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nJOIN person p ON tb.p_id = p.p_id\nWHERE p.professor = 1 AND p.hasPosition = 'Faculty_eme'",
    "979": "SELECT c.courseLevel\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nWHERE tb.p_id IN (\n    SELECT ab.p_id_dummy\n    FROM advisedBy ab\n    WHERE ab.p_id = 80\n)",
    "980": "SELECT DISTINCT tb1.p_id\nFROM taughtBy tb1\nJOIN course c1 ON tb1.course_id = c1.course_id AND c1.courseLevel = 'Level_400'\nJOIN taughtBy tb2 ON tb1.p_id = tb2.p_id\nJOIN course c2 ON tb2.course_id = c2.course_id AND c2.courseLevel = 'Level_500'",
    "981": "SELECT DISTINCT p.professor\nFROM person p\nJOIN advisedBy a ON p.p_id = a.p_id_dummy\nJOIN person s ON a.p_id = s.p_id\nWHERE s.yearsInProgram = 'Year_12'",
    "982": "SELECT c.course_id, c.courseLevel\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nGROUP BY c.course_id, c.courseLevel\nHAVING COUNT(tb.p_id) = (\n    SELECT MAX(profCount)\n    FROM (\n        SELECT COUNT(p_id) as profCount\n        FROM taughtBy\n        GROUP BY course_id\n    )\n)",
    "983": "SELECT COUNT(*) AS NumberOfCourses\nFROM course\nWHERE courseLevel = 'Level_300'",
    "984": "SELECT COUNT(*) AS NumberOfPeopleTeachingCourse11\nFROM taughtBy\nWHERE course_id = 11",
    "985": "SELECT \n    CASE \n        WHEN COUNT(DISTINCT tb1.p_id) > COUNT(DISTINCT tb2.p_id) THEN 'Course no.16 has more teachers'\n        WHEN COUNT(DISTINCT tb1.p_id) < COUNT(DISTINCT tb2.p_id) THEN 'Course no.18 has more teachers'\n        ELSE 'Both courses have the same number of teachers'\n    END AS result\nFROM \n    taughtBy tb1\n    CROSS JOIN taughtBy tb2\nWHERE \n    tb1.course_id = 16\n    AND tb2.course_id = 18;",
    "986": "SELECT COUNT(DISTINCT p.p_id) AS faculty_teachers\nFROM person p\nWHERE p.professor = 1 AND p.hasPosition = 'Faculty_eme'",
    "987": "SELECT p_id_dummy AS teacher_id\nFROM advisedBy\nGROUP BY p_id_dummy\nHAVING COUNT(p_id) > 4;",
    "988": "SELECT COUNT(DISTINCT c.course_id) AS NumberOfCourses\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nJOIN person p ON tb.p_id = p.p_id\nWHERE c.courseLevel = 'Level_300' AND p.professor = 1",
    "989": "SELECT DISTINCT tb.p_id\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nJOIN person p ON tb.p_id = p.p_id\nWHERE c.courseLevel = 'Level_300' AND p.hasPosition = 'Faculty_eme'",
    "990": "SELECT CASE \n         WHEN EXISTS (SELECT 1 \n                      FROM taughtBy \n                      JOIN person ON taughtBy.p_id = person.p_id \n                      WHERE taughtBy.course_id = 9 \n                      AND person.hasPosition != '0') \n         THEN 'Yes' \n         ELSE 'No' \n       END AS IsFacultyMember;",
    "991": "SELECT course.courseLevel\nFROM course\nJOIN taughtBy ON course.course_id = taughtBy.course_id\nWHERE taughtBy.p_id = 79",
    "992": "SELECT advisedBy.p_id_dummy AS advisor_id\nFROM advisedBy\nJOIN person ON advisedBy.p_id = person.p_id\nWHERE person.yearsInProgram = 'Year_5'",
    "993": "SELECT COUNT(DISTINCT advisedBy.p_id) AS NumberOfStudents\nFROM advisedBy\nJOIN person AS student ON advisedBy.p_id = student.p_id AND student.student = 1\nJOIN person AS professor ON advisedBy.p_id_dummy = professor.p_id AND professor.professor = 1\nJOIN taughtBy ON professor.p_id = taughtBy.p_id\nJOIN course ON taughtBy.course_id = course.course_id AND course.courseLevel = 'Level_300'",
    "994": "SELECT COUNT(DISTINCT tb.course_id) AS NumberOfCourses\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nJOIN person p ON tb.p_id = p.p_id\nWHERE c.courseLevel = 'Level_300' AND p.hasPosition != '0'",
    "995": "SELECT tb.course_id\nFROM taughtBy tb\nJOIN advisedBy ab ON tb.p_id = ab.p_id_dummy\nWHERE ab.p_id = 6",
    "996": "SELECT course.courseLevel\nFROM course\nJOIN taughtBy ON course.course_id = taughtBy.course_id\nGROUP BY course.course_id\nORDER BY COUNT(taughtBy.p_id) DESC\nLIMIT 1",
    "997": "SELECT p_id\nFROM taughtBy\nGROUP BY p_id\nHAVING COUNT(course_id) > 3",
    "998": "SELECT p_id\nFROM taughtBy\nJOIN person ON taughtBy.p_id = person.p_id AND person.professor = 1\nGROUP BY taughtBy.p_id\nORDER BY COUNT(taughtBy.course_id) DESC\nLIMIT 3",
    "999": "SELECT COUNT(DISTINCT advisedBy.p_id_dummy) AS total_professors\nFROM advisedBy\nJOIN person ON advisedBy.p_id = person.p_id\nWHERE person.yearsInProgram = 'Year_3'",
    "1000": "SELECT AVG(course_count) AS average_courses_taught\nFROM (\n    SELECT p_id, COUNT(course_id) AS course_count\n    FROM taughtBy\n    INNER JOIN person ON taughtBy.p_id = person.p_id\n    WHERE professor = 1\n    GROUP BY taughtBy.p_id\n)",
    "1001": "SELECT\n    (SELECT CAST(COUNT(*) AS FLOAT) FROM person WHERE professor = 1) / \n    (SELECT COUNT(*) FROM person WHERE student = 1) AS ratio",
    "1002": "SELECT \n    (COUNT(CASE WHEN courseLevel = 'Level_400' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_high_level_undergraduate\nFROM \n    course",
    "1003": "SELECT p_id FROM taughtBy WHERE course_id = 18;",
    "1004": "SELECT person.hasPosition, advisedBy.p_id_dummy AS professor_id\nFROM advisedBy\nJOIN person ON advisedBy.p_id_dummy = person.p_id\nWHERE advisedBy.p_id = 303",
    "1005": "SELECT p.p_id, c.courseLevel\nFROM person p\nJOIN taughtBy tb ON p.p_id = tb.p_id\nJOIN course c ON tb.course_id = c.course_id\nWHERE p.professor = 1 AND p.hasPosition = 'Faculty_aff'",
    "1006": "WITH AdvisorCounts AS (\n    SELECT\n        p_id,\n        COUNT(p_id_dummy) AS num_advisors\n    FROM advisedBy\n    GROUP BY p_id\n),\nMaxAdvisor AS (\n    SELECT\n        p_id\n    FROM AdvisorCounts\n    ORDER BY num_advisors DESC\n    LIMIT 1\n)\nSELECT\n    p.yearsInProgram,\n    p.inPhase\nFROM person p\nJOIN MaxAdvisor ma ON p.p_id = ma.p_id;",
    "1007": "SELECT a.p_id AS advised_student_id, a.p_id_dummy AS employing_professor_id\nFROM advisedBy a\nJOIN person p ON a.p_id_dummy = p.p_id\nWHERE p.hasPosition = 'Faculty_eme'",
    "1008": "SELECT c.course_id, c.courseLevel\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nWHERE tb.p_id BETWEEN 40 AND 50",
    "1009": "SELECT c.courseLevel, tb.p_id\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nWHERE c.course_id = 147",
    "1010": "SELECT tb.p_id, c.courseLevel\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nJOIN person p ON tb.p_id = p.p_id\nWHERE tb.course_id = 104 AND p.professor = 1 AND p.hasPosition != '0'",
    "1011": "SELECT p.p_id AS professor_id, p.hasPosition AS position_in_faculty\nFROM person p\nJOIN taughtBy tb ON p.p_id = tb.p_id\nJOIN course c ON tb.course_id = c.course_id\nWHERE p.professor = 1 AND c.courseLevel = 'Level_400' AND c.course_id < 10",
    "1012": "SELECT DISTINCT p_id\nFROM taughtBy\nWHERE course_id BETWEEN 121 AND 130\nAND course_id IN (SELECT course_id FROM course WHERE courseLevel = 'Level_300')",
    "1013": "SELECT DISTINCT a.p_id_dummy AS advisor_id\nFROM advisedBy a\nJOIN person s ON a.p_id = s.p_id\nJOIN person p ON a.p_id_dummy = p.p_id\nWHERE s.yearsInProgram = 'Year_8'\nAND p.hasPosition IS NOT NULL\nAND p.professor = 1",
    "1014": "SELECT taughtBy.course_id, taughtBy.p_id\nFROM taughtBy\nJOIN course ON taughtBy.course_id = course.course_id\nWHERE course.courseLevel = 'Level_500'\nLIMIT 5",
    "1015": "SELECT COUNT(*) AS students_under_advisor_415\nFROM advisedBy\nWHERE p_id_dummy = 415",
    "1016": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'",
    "1017": "SELECT COUNT(*) \nFROM person \nWHERE hasPosition = '0' AND inPhase = '0';",
    "1018": "SELECT p_id AS professor, COUNT(course_id) AS courses_taught\nFROM taughtBy\nGROUP BY p_id\nORDER BY courses_taught ASC\nLIMIT 1",
    "1019": "SELECT COUNT(*) AS NumberOfStudentsIn5thYear\nFROM person\nWHERE p_id IN (\n    SELECT p_id\n    FROM advisedBy\n    WHERE p_id_dummy = 5\n)\nAND yearsInProgram = 'Year_5'",
    "1020": "SELECT p_id AS professor\nFROM taughtBy\nJOIN course ON taughtBy.course_id = course.course_id\nWHERE courseLevel = 'Level_500'\nGROUP BY p_id\nORDER BY COUNT(taughtBy.course_id) DESC\nLIMIT 1",
    "1021": "SELECT COUNT(DISTINCT p.p_id) AS faculty_teaching_count\nFROM person p\nJOIN taughtBy tb ON p.p_id = tb.p_id\nJOIN course c ON tb.course_id = c.course_id\nWHERE p.professor = 1 AND p.hasPosition = 'Faculty_aff' AND c.courseLevel = 'Level_500'",
    "1022": "SELECT tb.p_id, COUNT(tb.course_id) AS NumberOfCourses\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nWHERE c.courseLevel = 'Level_500'\nGROUP BY tb.p_id\nORDER BY NumberOfCourses DESC\nLIMIT 5",
    "1023": "SELECT COUNT(DISTINCT ab.p_id_dummy) AS NumberOfAdvisors\nFROM advisedBy ab\nJOIN person p ON ab.p_id = p.p_id\nWHERE p.student = 1 AND p.yearsInProgram = 'Year_1';",
    "1024": "SELECT COUNT(DISTINCT tb.p_id) AS NumberOfProfessors\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nWHERE c.courseLevel = 'Level_400'\nGROUP BY tb.p_id\nHAVING COUNT(tb.course_id) <= 2",
    "1025": "SELECT DISTINCT tb.p_id\nFROM taughtBy tb\nJOIN course c ON tb.course_id = c.course_id\nJOIN person p ON tb.p_id = p.p_id\nWHERE c.courseLevel = 'Level_400' AND p.hasPosition = 'Faculty_eme' AND p.professor = 1",
    "1026": "SELECT p.hasPosition\nFROM person p\nJOIN taughtBy tb ON p.p_id = tb.p_id\nGROUP BY p.p_id\nORDER BY COUNT(tb.course_id) DESC\nLIMIT 1",
    "1027": "SELECT DISTINCT p.yearsInProgram\nFROM person p\nJOIN advisedBy a ON p.p_id = a.p_id\nWHERE p.student = 1\nGROUP BY a.p_id\nHAVING COUNT(a.p_id_dummy) > 2",
    "1028": "SELECT COUNT(DISTINCT p_id) AS professors_teaching_basic_or_medium_undergrad_courses\nFROM taughtBy\nJOIN course ON taughtBy.course_id = course.course_id\nWHERE course.courseLevel = 'Level_300'",
    "1029": "SELECT yearsInProgram\nFROM person\nWHERE p_id IN (\n    SELECT p_id_dummy\n    FROM advisedBy\n    JOIN person ON advisedBy.p_id = person.p_id\n    WHERE student = 1\n)\nGROUP BY yearsInProgram\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "1030": "SELECT COUNT(DISTINCT person.p_id) AS students_with_advisors\nFROM person\nJOIN advisedBy ON person.p_id = advisedBy.p_id\nWHERE person.student = 1 AND person.inPhase = 'Pre-Quals'",
    "1031": "SELECT AVG(course_count) AS average_courses_per_professor\nFROM (\n    SELECT p_id, COUNT(course_id) AS course_count\n    FROM taughtBy\n    INNER JOIN course ON taughtBy.course_id = course.course_id\n    WHERE courseLevel = 'Level_500'\n    GROUP BY p_id\n)",
    "1032": "SELECT COUNT(course_id) AS courses_taught_by_more_than_4_people\nFROM (\n    SELECT course_id\n    FROM taughtBy\n    GROUP BY course_id\n    HAVING COUNT(p_id) > 4\n)",
    "1033": "SELECT COUNT(course_id) AS total_professional_courses\nFROM course\nWHERE courseLevel = 'Level_500'",
    "1034": "SELECT SUM(CASE WHEN yearsInProgram IN ('Year_1', 'Year_2') AND student = 1 THEN 1 ELSE 0 END) AS sum_year_1_and_2_students\nFROM person",
    "1035": "SELECT COUNT(DISTINCT course_id) \nFROM taughtBy \nJOIN person ON taughtBy.p_id = person.p_id \nWHERE professor = 1 AND hasPosition <> '0'",
    "1036": "SELECT \n    tb.p_id AS professor_id, \n    p.hasPosition AS position, \n    COUNT(tb.course_id) AS courses_taught\nFROM \n    taughtBy tb\nJOIN \n    person p ON tb.p_id = p.p_id\nGROUP BY \n    tb.p_id\nORDER BY \n    courses_taught DESC\nLIMIT 1;",
    "1037": "SELECT c.course_id\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nJOIN person p ON tb.p_id = p.p_id\nWHERE p.professor = 1 AND p.hasPosition = '0'",
    "1038": "WITH FacultyCourseCount AS (\n    SELECT\n        tb.p_id,\n        COUNT(tb.course_id) AS course_count\n    FROM\n        taughtBy tb\n    JOIN\n        person p ON tb.p_id = p.p_id\n    WHERE\n        p.hasPosition <> '0'\n    GROUP BY\n        tb.p_id\n    ORDER BY\n        course_count DESC\n    LIMIT 1\n), FacultyCourseLevels AS (\n    SELECT\n        c.courseLevel\n    FROM\n        course c\n    JOIN\n        taughtBy tb ON c.course_id = tb.course_id\n    JOIN\n        FacultyCourseCount fcc ON tb.p_id = fcc.p_id\n)\nSELECT\n    fcc.p_id AS faculty_id,\n    fcc.course_count,\n    GROUP_CONCAT(DISTINCT fcl.courseLevel) AS course_levels\nFROM\n    FacultyCourseCount fcc,\n    FacultyCourseLevels fcl",
    "1039": "SELECT device_id FROM gender_age ORDER BY age DESC LIMIT 1",
    "1040": "SELECT COUNT(*) AS events_at_97_40\nFROM events\nWHERE longitude = 97 AND latitude = 40;",
    "1041": "SELECT COUNT(*) AS male_users_in_M32_38\nFROM gender_age\nWHERE gender = 'M' AND `group` = 'M32-38';",
    "1042": "SELECT COUNT(*) AS female_users_over_50\nFROM gender_age\nWHERE gender = 'F' AND age > 50;",
    "1043": "SELECT COUNT(*) AS active_users\nFROM app_events\nWHERE event_id = 2 AND is_active = 1;",
    "1044": "SELECT gender\nFROM gender_age\nWHERE age = (SELECT MIN(age) FROM gender_age)",
    "1045": "SELECT lc.category\nFROM label_categories AS lc\nJOIN app_labels AS al ON lc.label_id = al.label_id\nJOIN app_events AS ae ON al.app_id = ae.app_id\nJOIN events AS e ON ae.event_id = e.event_id\nGROUP BY lc.category\nORDER BY COUNT(DISTINCT e.device_id) DESC\nLIMIT 1;",
    "1046": "SELECT pbdm.device_model\nFROM gender_age ga\nJOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id\nORDER BY ga.age DESC\nLIMIT 1",
    "1047": "SELECT COUNT(DISTINCT e.device_id) AS user_count\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE lc.category = 'Home Decoration'\nAND ae.is_installed = 1;",
    "1048": "SELECT COUNT(DISTINCT ga.device_id) AS male_active_users\nFROM gender_age ga\nJOIN events_relevant er ON ga.device_id = er.device_id\nJOIN app_events_relevant aer ON er.event_id = aer.event_id\nWHERE ga.gender = 'M' AND aer.is_active = 1 AND er.timestamp LIKE '2016-05-01%'",
    "1049": "SELECT COUNT(DISTINCT ga.device_id) AS female_users\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'F' AND pb.device_model = 'ZenFone 5'",
    "1050": "SELECT MAX(ga.age) AS oldest_active_user_age\nFROM gender_age ga\nJOIN events_relevant er ON ga.device_id = er.device_id\nJOIN app_events_relevant aer ON er.event_id = aer.event_id\nWHERE aer.is_active = 1\nAND er.timestamp LIKE '2016-05-06%'\nAND er.longitude = 121\nAND er.latitude = 31",
    "1051": "SELECT pbdm.device_model, COUNT(pbdm.device_id) AS model_count\nFROM phone_brand_device_model2 AS pbdm\nJOIN gender_age AS ga ON pbdm.device_id = ga.device_id\nWHERE ga.gender = 'F' AND ga.group = 'F27-28'\nGROUP BY pbdm.device_model\nORDER BY model_count DESC\nLIMIT 1;",
    "1052": "SELECT lc.category\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE e.timestamp IN (\n    SELECT timestamp\n    FROM events\n    ORDER BY timestamp ASC\n    LIMIT 2\n)",
    "1053": "SELECT gender, COUNT(gender) AS gender_count\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE phone_brand = 'vivo'\nGROUP BY gender\nORDER BY gender_count DESC\nLIMIT 1;",
    "1054": "SELECT lc.category, COUNT(DISTINCT er.device_id) AS user_count\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nJOIN app_events_relevant aer ON al.app_id = aer.app_id\nJOIN events_relevant er ON aer.event_id = er.event_id\nGROUP BY lc.category\nORDER BY user_count DESC\nLIMIT 1;",
    "1055": "SELECT COUNT(DISTINCT er.device_id) AS num_users\nFROM label_categories lc\nJOIN app_labels al ON lc.label_id = al.label_id\nJOIN app_events_relevant aer ON al.app_id = aer.app_id\nJOIN events_relevant er ON aer.event_id = er.event_id\nWHERE lc.category = 'MOBA' AND aer.is_installed = 1 AND aer.is_active = 1;",
    "1056": "SELECT \n    (CAST(SUM(CASE WHEN g.gender = 'F' THEN 1 ELSE 0 END) AS FLOAT) / \n    SUM(CASE WHEN g.gender = 'M' THEN 1 ELSE 0 END)) * 100 AS percentage_female_against_male\nFROM \n    phone_brand_device_model2 p\nJOIN \n    gender_age g ON p.device_id = g.device_id\nWHERE \n    p.phone_brand = 'OPPO';",
    "1057": "SELECT longitude, latitude FROM events WHERE timestamp LIKE '2016-05-08%'",
    "1058": "SELECT ae.app_id, ae.is_installed\nFROM app_events ae\nWHERE ae.event_id = 844",
    "1059": "SELECT COUNT(*) AS events_on_30th_April_2016\nFROM events\nWHERE timestamp LIKE '2016-04-30%'",
    "1060": "SELECT COUNT(DISTINCT device_id) AS users_count\nFROM phone_brand_device_model2\nWHERE phone_brand = 'vivo' AND device_model = 'Xplay3S';",
    "1061": "SELECT \n    (SELECT COUNT(*) FROM gender_age WHERE gender = 'M' AND `group` = 'M27-28') * 1.0 / \n    (SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND `group` = 'F27-28') AS ratio",
    "1062": "SELECT label_id\nFROM label_categories\nWHERE category IN ('online shopping', 'online malls');",
    "1063": "SELECT DISTINCT pb.phone_brand, pb.device_model\nFROM phone_brand_device_model2 AS pb\nJOIN events ON pb.device_id = events.device_id\nWHERE events.timestamp LIKE '2016-05-05%'\nAND events.longitude = 112\nAND events.latitude = 44",
    "1064": "SELECT ae.app_id, e.timestamp\nFROM app_events ae\nJOIN events e ON ae.event_id = e.event_id\nWHERE ae.event_id = 82",
    "1065": "SELECT g.gender, g.age\nFROM events_relevant er\nJOIN gender_age g ON er.device_id = g.device_id\nWHERE er.event_id = 15251",
    "1066": "SELECT COUNT(e.event_id) AS event_count\nFROM events e\nJOIN gender_age ga ON e.device_id = ga.device_id\nWHERE ga.age = 88 AND ga.gender = 'M' AND e.timestamp LIKE '2016-05-04%'",
    "1067": "SELECT ga.gender, ga.age, COUNT(e.event_id) AS number_of_events\nFROM gender_age ga\nJOIN events_relevant e ON ga.device_id = e.device_id\nWHERE e.longitude = -102 AND e.latitude = 38\nGROUP BY ga.gender, ga.age",
    "1068": "SELECT pbdm.phone_brand, pbdm.device_model\nFROM phone_brand_device_model2 AS pbdm\nJOIN events ON pbdm.device_id = events.device_id\nWHERE events.longitude = 80 AND events.latitude = 44;",
    "1069": "SELECT lc.category\nFROM label_categories AS lc\nJOIN app_labels AS al ON lc.label_id = al.label_id\nJOIN (\n    SELECT ae.app_id\n    FROM app_events AS ae\n    WHERE ae.event_id = 155\n    UNION\n    SELECT aer.app_id\n    FROM app_events_relevant AS aer\n    WHERE aer.event_id = 155\n) AS combined_apps ON al.app_id = combined_apps.app_id;",
    "1070": "SELECT gender_age.device_id\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE phone_brand_device_model2.phone_brand = 'HTC' \nAND phone_brand_device_model2.device_model = 'Butterfly'\nAND gender_age.gender = 'F'\nLIMIT 5",
    "1071": "SELECT COUNT(DISTINCT app_labels.app_id) AS sci_fi_app_count\nFROM app_labels\nJOIN label_categories ON app_labels.label_id = label_categories.label_id\nWHERE label_categories.category = 'science fiction';",
    "1072": "SELECT ga.gender, ga.age\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'LG' AND pb.device_model = 'L70'",
    "1073": "SELECT \n    (CAST(COUNT(DISTINCT al.app_id) AS FLOAT) / (SELECT COUNT(DISTINCT app_id) FROM app_labels)) * 100 AS percentage_industry_tag\nFROM \n    app_labels al\nJOIN \n    label_categories lc ON al.label_id = lc.label_id\nWHERE \n    lc.category = 'Industry tag';",
    "1074": "WITH LG_Nexus5 AS (\n    SELECT \n        pbdm.device_id,\n        ga.gender\n    FROM \n        phone_brand_device_model2 pbdm\n    LEFT JOIN \n        gender_age ga ON pbdm.device_id = ga.device_id\n    WHERE \n        pbdm.phone_brand = 'LG' \n        AND pbdm.device_model = 'Nexus 5'\n),\nLG_Total AS (\n    SELECT \n        COUNT(*) AS total\n    FROM \n        phone_brand_device_model2\n    WHERE \n        phone_brand = 'LG'\n),\nNexus5_Gender_Count AS (\n    SELECT \n        gender,\n        COUNT(*) AS count\n    FROM \n        LG_Nexus5\n    GROUP BY \n        gender\n),\nNexus5_Total AS (\n    SELECT \n        COUNT(*) AS total\n    FROM \n        LG_Nexus5\n)\nSELECT \n    (SELECT total FROM Nexus5_Total) * 100.0 / (SELECT total FROM LG_Total) AS Nexus5_Percentage,\n    (SELECT count FROM Nexus5_Gender_Count WHERE gender = 'M') * 1.0 / \n    (SELECT count FROM Nexus5_Gender_Count WHERE gender = 'F') AS Male_Female_Ratio",
    "1075": "SELECT COUNT(DISTINCT ae.app_id) AS not_active_users\nFROM app_events ae\nWHERE ae.event_id = 2 AND ae.is_active = 0;",
    "1076": "SELECT COUNT(*) AS total_events_2016\nFROM events\nWHERE strftime('%Y', timestamp) = '2016';",
    "1077": "SELECT COUNT(*) AS event_count\nFROM events\nWHERE device_id = 29182687948017100\nAND timestamp LIKE '2016%'",
    "1078": "SELECT COUNT(*) FROM gender_age WHERE gender = 'M';",
    "1079": "SELECT MAX(age) AS oldest_age FROM gender_age",
    "1080": "SELECT COUNT(*) \nFROM gender_age \nWHERE gender = 'F' AND age < 30;",
    "1081": "SELECT COUNT(*) AS female_users\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE phone_brand_device_model2.device_model = 'Galaxy Note 2' AND gender_age.gender = 'F'",
    "1082": "SELECT ga.age\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.device_model = 'Galaxy Note 2'",
    "1083": "SELECT pbdm.device_model\nFROM phone_brand_device_model2 pbdm\nJOIN gender_age ga ON pbdm.device_id = ga.device_id\nWHERE ga.age = (SELECT MAX(age) FROM gender_age)",
    "1084": "SELECT `group`, COUNT(`group`) AS group_count\nFROM gender_age\nWHERE device_id IN (\n    SELECT device_id\n    FROM phone_brand_device_model2\n    WHERE phone_brand = 'vivo'\n)\nGROUP BY `group`\nORDER BY group_count DESC\nLIMIT 1",
    "1085": "SELECT COUNT(DISTINCT e.device_id)\nFROM label_categories AS lc\nJOIN app_labels AS al ON lc.label_id = al.label_id\nJOIN app_events AS ae ON al.app_id = ae.app_id\nJOIN events AS e ON ae.event_id = e.event_id\nWHERE lc.category = 'Securities';",
    "1086": "SELECT lc.category\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE al.app_id = 1977658975649780000;",
    "1087": "SELECT lc.category\nFROM app_events ae\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE ae.event_id = 2 AND ae.is_active = 0",
    "1088": "SELECT e.longitude, e.latitude\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nWHERE ae.is_active = 0 AND e.event_id = 2",
    "1089": "SELECT MIN(timestamp) AS earliest_time\nFROM events\nJOIN app_events ON events.event_id = app_events.event_id\nWHERE app_events.event_id = 2 AND app_events.is_active = 0",
    "1090": "SELECT e.event_id\nFROM events e\nJOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id\nWHERE pb.phone_brand = 'vivo'",
    "1091": "SELECT COUNT(DISTINCT e.device_id)\nFROM events e\nJOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id\nWHERE e.event_id = 2 AND pb.phone_brand = 'vivo'",
    "1092": "SELECT e.timestamp\nFROM events e\nJOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id\nWHERE e.event_id = 2 AND pb.phone_brand = 'vivo'",
    "1093": "SELECT COUNT(e.event_id) AS total_events\nFROM events e\nJOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id\nWHERE pb.phone_brand = 'vivo' AND strftime('%Y', e.timestamp) = '2016'",
    "1094": "SELECT COUNT(DISTINCT ga.device_id) AS female_under_30_vivo_users\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'vivo' AND ga.gender = 'F' AND ga.age < 30",
    "1095": "SELECT lc.category, COUNT(al.app_id) AS user_count\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nGROUP BY lc.category\nORDER BY user_count DESC\nLIMIT 1;",
    "1096": "SELECT pb.phone_brand\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'F'\nORDER BY ga.age ASC\nLIMIT 1",
    "1097": "SELECT COUNT(DISTINCT ga.device_id) AS users_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.group = 'M23-26' AND pb.phone_brand = 'vivo'",
    "1098": "SELECT \n    (CAST(SUM(CASE WHEN ga.group = 'M23-26' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM \n    phone_brand_device_model2 pb\nJOIN \n    gender_age ga ON pb.device_id = ga.device_id\nWHERE \n    pb.phone_brand = 'vivo'",
    "1099": "SELECT \n    (SUM(CASE WHEN pb.phone_brand = 'vivo' THEN 1 ELSE 0 END) / COUNT(DISTINCT e.device_id) * 100.0) AS vivo_percentage\nFROM \n    events e\nJOIN \n    phone_brand_device_model2 pb ON e.device_id = pb.device_id\nWHERE \n    e.event_id = 2;",
    "1100": "SELECT AVG(age) AS average_age\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE phone_brand = 'vivo'",
    "1101": "SELECT COUNT(*) AS female_users_27_to_28\nFROM gender_age\nWHERE gender = 'F' AND `group` = 'F27-28';",
    "1102": "SELECT MAX(age) AS oldest_male_age\nFROM gender_age\nWHERE gender = 'M'",
    "1103": "SELECT COUNT(DISTINCT ae.app_id) AS users_installed_not_active\nFROM app_events ae\nWHERE ae.is_installed = 1 AND ae.is_active = 0;",
    "1104": "SELECT MIN(age) AS youngest_female_age\nFROM gender_age\nWHERE gender = 'F'",
    "1105": "SELECT COUNT(DISTINCT device_model) AS models_released\nFROM phone_brand_device_model2\nWHERE phone_brand = 'VIVO'",
    "1106": "SELECT DISTINCT device_model\nFROM phone_brand_device_model2\nWHERE phone_brand = 'OPPO'\nLIMIT 15;",
    "1107": "SELECT DISTINCT pbdm.device_model\nFROM gender_age ga\nJOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id\nWHERE ga.gender = 'M' AND ga.group = 'M39+'\nLIMIT 10",
    "1108": "SELECT DISTINCT pbdm.device_model\nFROM phone_brand_device_model2 AS pbdm\nJOIN gender_age AS ga ON pbdm.device_id = ga.device_id\nJOIN events_relevant AS er ON ga.device_id = er.device_id\nJOIN app_events_relevant AS aer ON er.event_id = aer.event_id\nWHERE aer.is_installed = 1 AND aer.is_active = 1\nLIMIT 5",
    "1109": "SELECT COUNT(DISTINCT e.device_id)\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE lc.category = 'Financial Information'",
    "1110": "SELECT COUNT(DISTINCT er.device_id) AS user_count\nFROM label_categories lc\nJOIN app_labels al ON lc.label_id = al.label_id\nJOIN app_events_relevant aer ON al.app_id = aer.app_id\nJOIN events_relevant er ON aer.event_id = er.event_id\nWHERE lc.category = 'game-Art Style'\nAND aer.is_installed = 1",
    "1111": "SELECT COUNT(DISTINCT ga.device_id) AS total_male_users\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'Male' AND pb.phone_brand = 'OPPO'",
    "1112": "SELECT pb.phone_brand\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.age = (SELECT MIN(age) FROM gender_age)\nLIMIT 1",
    "1113": "SELECT lc.category, COUNT(DISTINCT ga.device_id) AS user_count\nFROM label_categories AS lc\nJOIN app_labels AS al ON lc.label_id = al.label_id\nJOIN app_events AS ae ON al.app_id = ae.app_id\nJOIN events AS e ON ae.event_id = e.event_id\nJOIN gender_age AS ga ON e.device_id = ga.device_id\nGROUP BY lc.category\nORDER BY user_count ASC\nLIMIT 3;",
    "1114": "SELECT COUNT(DISTINCT gender_age.device_id) AS male_users\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE gender_age.gender = 'M' AND phone_brand_device_model2.device_model = 'Galaxy Ace Plus';",
    "1115": "SELECT ga.group\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'OPPO'\nGROUP BY ga.group\nORDER BY COUNT(ga.group) DESC\nLIMIT 1;",
    "1116": "SELECT \n    pbdm.device_model,\n    COUNT(pbdm.device_model) AS model_count\nFROM \n    phone_brand_device_model2 AS pbdm\nJOIN \n    gender_age_train AS gat ON pbdm.device_id = gat.device_id\nWHERE \n    gat.gender = 'F'\nGROUP BY \n    pbdm.device_model\nORDER BY \n    model_count DESC\nLIMIT 5;",
    "1117": "WITH CategoryCounts AS (\n  SELECT\n    lc.category,\n    COUNT(al.app_id) AS app_count\n  FROM\n    app_labels al\n  JOIN\n    label_categories lc ON al.label_id = lc.label_id\n  WHERE\n    lc.category IN ('80s Japanese comic', '90s Japanese comic')\n  GROUP BY\n    lc.category\n),\nAggregatedCounts AS (\n  SELECT\n    SUM(CASE WHEN category = '80s Japanese comic' THEN app_count ELSE 0 END) AS Count80s,\n    SUM(CASE WHEN category = '90s Japanese comic' THEN app_count ELSE 0 END) AS Count90s\n  FROM\n    CategoryCounts\n)\nSELECT\n  (Count80s * 1.0 / Count90s) * 100 AS RatioPercentage\nFROM\n  AggregatedCounts;",
    "1118": "Given the complexity of the question and the need to calculate a percentage based on specific conditions, we need to carefully construct a SQL query that captures all the necessary information. The question asks for the percentage of female users who use the OPPO brand and have the R815T model installed the app. However, there are some ambiguities and potential misunderstandings in the external knowledge provided, particularly regarding the calculation of the percentage. The external knowledge seems to mix up the conditions for the numerator and denominator in a way that doesn't align with the question's intent. \n\nAssuming the intent is to find the percentage of female users with the OPPO brand and R815T model among all female OPPO users who have installed the app, we would need to adjust the approach since the provided external knowledge doesn't directly apply to the question as written. \n\nGiven the tables and relationships, we need to join `gender_age` with `phone_brand_device_model2` to filter by gender and phone brand, then join with `app_events` or a relevant table to check for app installations. However, the tables provided do not directly link users' gender and phone brand to app installations in a straightforward manner that would allow for calculating the percentage as described. \n\nThe tables `app_all`, `app_events`, and others are structured to track app installations and events but do not directly include or link to user demographic information (like gender) or specific device models in a way that supports the calculation described in the external knowledge note. \n\nGiven these constraints and aiming to provide a helpful response despite the ambiguities, I'll outline a hypothetical SQL query that would aim to approach the question's intent if we assume a more direct linkage between the tables (e.g., if `app_events` included `device_id` to link to `gender_age` and `phone_brand_device_model2`):\n\n```sqlite\n-- Hypothetical SQL, assuming direct linkage between app installations and user/device tables\nSELECT \n    (SELECT COUNT(DISTINCT ae.device_id)\n     FROM app_events ae\n     JOIN phone_brand_device_model2 pb ON ae.device_id = pb.device_id\n     JOIN gender_age ga ON ae.device_id = ga.device_id\n     WHERE pb.phone_brand = 'OPPO' AND pb.device_model = 'R815T' AND ga.gender = 'F'\n    ) * 1.0 / \n    (SELECT COUNT(DISTINCT ae.device_id)\n     FROM app_events ae\n     JOIN phone",
    "1119": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_model = \"\u575a\u679c\u624b\u673a\";",
    "1120": "SELECT COUNT(DISTINCT device_model) AS number_of_device_models\nFROM phone_brand_device_model2\nWHERE phone_brand = \"\u4e2d\u5174\"",
    "1121": "SELECT `group` FROM gender_age_train WHERE age = 24",
    "1122": "SELECT `timestamp` FROM `events` WHERE `event_id` = 887711;",
    "1123": "SELECT COUNT(*) FROM events WHERE DATE(timestamp) = '2016-05-06';",
    "1124": "SELECT pbdm.device_model\nFROM events\nJOIN events_relevant ON events.event_id = events_relevant.event_id\nJOIN gender_age ON events_relevant.device_id = gender_age.device_id\nJOIN phone_brand_device_model2 pbdm ON gender_age.device_id = pbdm.device_id\nWHERE events.timestamp = '2016-05-07 23:55:16'\nAND events.longitude = 113\nAND events.latitude = 28",
    "1125": "SELECT COUNT(DISTINCT app_all.app_id) AS game_fishing_app_count\nFROM app_all\nJOIN app_labels ON app_all.app_id = app_labels.app_id\nJOIN label_categories ON app_labels.label_id = label_categories.label_id\nWHERE label_categories.category = 'game-Fishing'",
    "1126": "SELECT COUNT(*) \nFROM phone_brand_device_model2 \nJOIN gender_age_train \nON phone_brand_device_model2.device_id = gender_age_train.device_id \nWHERE phone_brand_device_model2.device_model = '\u9b45\u84ddNote 2' \nAND gender_age_train.group = 'F29-32';",
    "1127": "SELECT COUNT(DISTINCT ga.device_id) AS active_30_year_old_users\nFROM gender_age ga\nJOIN events_relevant er ON ga.device_id = er.device_id\nWHERE ga.age = 30\nAND er.is_active = 1\nAND DATE(er.timestamp) = '2016-05-02'",
    "1128": "SELECT COUNT(DISTINCT ae.app_id) AS installed_apps_count\nFROM app_events ae\nJOIN events e ON ae.event_id = e.event_id\nWHERE e.timestamp = '2016/5/6 23:33:34' AND ae.is_installed = 1;",
    "1129": "SELECT COUNT(DISTINCT ga.device_id) AS female_users_of_E\u6d3e_brand\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'F' AND pb.phone_brand = 'E\u6d3e';",
    "1130": "SELECT COUNT(DISTINCT gender_age.device_id) AS male_users\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE gender_age.gender = 'M' AND phone_brand_device_model2.device_model = 'Galaxy S5'",
    "1131": "SELECT COUNT(DISTINCT ga.device_id) AS active_users\nFROM gender_age ga\nJOIN events_relevant er ON ga.device_id = er.device_id\nWHERE ga.group = 'F29-32'\nAND er.timestamp BETWEEN '2016-05-07 00:00:00' AND '2016-05-07 23:59:59'\nAND EXISTS (\n    SELECT 1\n    FROM app_events_relevant aer\n    WHERE aer.event_id = er.event_id\n    AND aer.is_active = 1\n)",
    "1132": "SELECT lc.category\nFROM app_all aa\nJOIN app_labels al ON aa.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE aa.app_id = 894384172610331000;",
    "1133": "SELECT COUNT(*) AS active_apps_count\nFROM app_events\nJOIN events ON app_events.event_id = events.event_id\nWHERE events.timestamp = '2016/5/6 14:09:49'\nAND events.longitude = 116\nAND events.latitude = 40\nAND app_events.is_active = 1;",
    "1134": "SELECT \n    SUM(CASE WHEN e.timestamp = '2016/5/2 7:50:28' THEN ae.is_active ELSE 0 END) / \n    SUM(CASE WHEN e.timestamp = '2016/5/2 7:41:03' THEN ae.is_active ELSE 0 END) AS times_more_active\nFROM \n    events e\nJOIN \n    app_events ae ON e.event_id = ae.event_id\nWHERE \n    e.timestamp IN ('2016/5/2 7:50:28', '2016/5/2 7:41:03')\n    AND ae.is_active = 1;",
    "1135": "SELECT COUNT(*) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo';",
    "1136": "SELECT \n    (SUM(CASE WHEN phone_brand = 'vivo' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN phone_brand = 'LG' THEN 1 ELSE 0 END)) AS difference\nFROM \n    phone_brand_device_model2;",
    "1137": "SELECT device_id\nFROM gender_age\nORDER BY age ASC\nLIMIT 1",
    "1138": "SELECT COUNT(*) \nFROM gender_age \nWHERE gender = 'F' AND age > 30;",
    "1139": "SELECT gender FROM gender_age ORDER BY age DESC LIMIT 1;",
    "1140": "SELECT MIN(age) AS youngest_female_age\nFROM gender_age\nWHERE gender = 'F';",
    "1141": "SELECT MIN(age) AS youngest_age\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE phone_brand = 'vivo'",
    "1142": "SELECT DISTINCT al.app_id\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE lc.category = 'Securities';",
    "1143": "SELECT gender_age.gender\nFROM gender_age\nJOIN events ON gender_age.device_id = events.device_id\nWHERE events.timestamp = '2016-05-01 00:55:25'",
    "1144": "SELECT COUNT(DISTINCT e.device_id)\nFROM events e\nJOIN gender_age ga ON e.device_id = ga.device_id\nWHERE strftime('%Y', e.timestamp) = '2016' AND ga.group = 'M23-26'",
    "1145": "SELECT pb.phone_brand, COUNT(*) AS user_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.group = 'M23-26'\nGROUP BY pb.phone_brand\nORDER BY user_count DESC\nLIMIT 1;",
    "1146": "SELECT e.longitude, e.latitude\nFROM events e\nJOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id\nWHERE pb.device_model = 'Galaxy Note 2'",
    "1147": "SELECT DISTINCT pbdm.device_model\nFROM phone_brand_device_model2 AS pbdm\nJOIN gender_age AS ga ON pbdm.device_id = ga.device_id\nWHERE ga.gender = 'F'",
    "1148": "SELECT lc.category\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE al.app_id = 7324884708820020000;",
    "1149": "SELECT COUNT(DISTINCT ae.app_id) AS non_active_users_in_property_industry\nFROM app_events ae\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE ae.event_id = 2\nAND ae.is_active = 0\nAND lc.category = 'Property Industry 1.0'",
    "1150": "SELECT COUNT(DISTINCT al.label_id) AS total_categories\nFROM app_labels al\nJOIN app_events ae ON al.app_id = ae.app_id\nWHERE ae.event_id = 2 AND ae.is_active = 0",
    "1151": "SELECT pbdm.device_model\nFROM gender_age ga\nJOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id\nWHERE ga.gender = 'F' AND ga.age > 30\nGROUP BY pbdm.device_model\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "1152": "SELECT DISTINCT pbdm.device_model\nFROM events e\nJOIN phone_brand_device_model2 pbdm ON e.device_id = pbdm.device_id\nWHERE e.longitude = 121 AND e.latitude = 31;",
    "1153": "SELECT lc.category, COUNT(DISTINCT ae.app_id) AS app_users\nFROM app_events ae\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nGROUP BY lc.category\nORDER BY app_users DESC\nLIMIT 3",
    "1154": "SELECT e.event_id\nFROM events e\nJOIN gender_age ga ON e.device_id = ga.device_id\nWHERE ga.age = (SELECT MAX(age) FROM gender_age)",
    "1155": "SELECT COUNT(e.event_id) AS event_count\nFROM events e\nJOIN gender_age ga ON e.device_id = ga.device_id\nWHERE ga.gender = 'F' AND ga.age = (\n    SELECT MIN(age) FROM gender_age WHERE gender = 'F'\n)",
    "1156": "SELECT COUNT(DISTINCT e.device_id)\nFROM events e\nJOIN gender_age ga ON e.device_id = ga.device_id\nWHERE ga.gender = 'M' AND DATE(e.timestamp) = '2016-05-01'",
    "1157": "SELECT \n    CASE \n        WHEN SUM(category = 'Securities') > SUM(category = 'Finance') THEN 'Securities'\n        ELSE 'Finance'\n    END AS more\nFROM \n    app_labels\nJOIN \n    label_categories ON app_labels.label_id = label_categories.label_id",
    "1158": "SELECT DISTINCT pbdm.device_model\nFROM gender_age ga\nJOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id\nWHERE ga.group = 'M23-26'",
    "1159": "SELECT AVG(ga.age) AS average_age\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'F' AND pb.phone_brand = 'vivo';",
    "1160": "SELECT \n    SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS female_users,\n    SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS male_users,\n    (SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) * 1.0) / SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS female_to_male_ratio\nFROM gender_age\nINNER JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE phone_brand = 'vivo';",
    "1161": "SELECT \n    SUM(CASE WHEN lc.category = 'Securities' THEN 1 ELSE 0 END) * 1.0 / \n    SUM(CASE WHEN lc.category = 'Finance' THEN 1 ELSE 0 END) AS ratio\nFROM \n    app_labels al\nJOIN \n    label_categories lc ON al.label_id = lc.label_id\nJOIN \n    app_all aa ON al.app_id = aa.app_id\nWHERE \n    lc.category IN ('Securities', 'Finance');",
    "1162": "SELECT `label_id` FROM `label_categories` WHERE `category` = 'Third-party card management'",
    "1163": "SELECT \n    SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) AS ratio\nFROM \n    app_events\nWHERE \n    event_id = 58;",
    "1164": "SELECT COUNT(*) AS event_count\nFROM events\nWHERE device_id = 3915082290673130000",
    "1165": "SELECT \n    (SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS percentage_male\nFROM \n    gender_age;",
    "1166": "SELECT COUNT(*) AS events_at_longitude_156\nFROM events\nWHERE longitude = -156;",
    "1167": "SELECT COUNT(DISTINCT app_labels.app_id) AS num_apps_with_label_48\nFROM app_labels\nWHERE app_labels.label_id = 48;",
    "1168": "SELECT COUNT(*) FROM label_categories WHERE category LIKE 'game%'",
    "1169": "SELECT COUNT(*) AS event_count\nFROM events\nWHERE longitude = 80 AND latitude = 37;",
    "1170": "SELECT al.label_id, lc.category\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE al.app_id = 5758400314709850000;",
    "1171": "SELECT DISTINCT al.app_id\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE lc.category = 'game-Rowing'",
    "1172": "SELECT \n    al.app_id, \n    lc.label_id \nFROM \n    label_categories lc\nJOIN \n    app_labels al ON lc.label_id = al.label_id\nWHERE \n    lc.category = 'Chinese Classical Mythology';",
    "1173": "SELECT \n    COUNT(DISTINCT ae.app_id) AS number_of_app_ids, \n    e.longitude, \n    e.latitude \nFROM \n    app_events ae \nJOIN \n    events e ON ae.event_id = e.event_id \nWHERE \n    ae.event_id = 79641",
    "1174": "SELECT e.longitude, e.latitude, e.timestamp\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nWHERE ae.app_id = 8715964299802120000",
    "1175": "SELECT COUNT(DISTINCT e.device_id)\nFROM events e\nJOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id\nWHERE pb.phone_brand = 'OPPO'\nAND DATE(e.timestamp) = '2016-05-01'\nAND strftime('%H', e.timestamp) = '00'",
    "1176": "SELECT\n    SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS ratio\nFROM\n    gender_age\nJOIN\n    phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE\n    phone_brand = 'vivo' AND device_model = 'X5Pro';",
    "1177": "SELECT COUNT(*) AS females_under_23_using_ZUK_Z1\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE gender = 'F'\nAND `group` = 'F23-'\nAND phone_brand = 'ZUK'\nAND device_model = 'Z1'",
    "1178": "SELECT p.phone_brand, p.device_model\nFROM phone_brand_device_model2 p\nJOIN gender_age g ON p.device_id = g.device_id\nWHERE g.age < 10",
    "1179": "SELECT \n    (CAST(SUM(CASE WHEN g.gender = 'F' AND g.age > 80 THEN 1 ELSE 0 END) AS REAL) / COUNT(p.device_id)) * 100 AS percentage\nFROM \n    phone_brand_device_model2 p\nJOIN \n    gender_age g ON p.device_id = g.device_id\nWHERE \n    p.phone_brand = 'HTC'",
    "1180": "SELECT pb.phone_brand, pb.device_model\nFROM phone_brand_device_model2 AS pb\nJOIN gender_age AS ga ON pb.device_id = ga.device_id\nJOIN events_relevant AS er ON ga.device_id = er.device_id\nWHERE er.event_id = 6701",
    "1181": "SELECT \n    gender_age.gender, \n    gender_age.age \nFROM \n    gender_age \nJOIN \n    (SELECT \n        device_id, \n        COUNT(event_id) AS event_count \n    FROM \n        events \n    WHERE \n        device_id IN (-9215352913819630000, -9222956879900150000) \n    GROUP BY \n        device_id \n    ORDER BY \n        event_count DESC \n    LIMIT 1) AS most_events \nON \n    gender_age.device_id = most_events.device_id",
    "1182": "SELECT timestamp FROM events WHERE event_id = 12;",
    "1183": "SELECT COUNT(DISTINCT e.device_id) AS active_users\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nWHERE ae.is_active = 1;",
    "1184": "SELECT COUNT(*) FROM phone_brand_device_model2 WHERE device_model = 'A51';",
    "1185": "SELECT gender FROM gender_age WHERE device_id = -9222956879900150000;",
    "1186": "SELECT COUNT(*) AS total_labels\nFROM label_categories\nWHERE category = 'game-card'",
    "1187": "SELECT ga.group, COUNT(*) AS user_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'vivo'\nGROUP BY ga.group",
    "1188": "SELECT COUNT(DISTINCT ga.device_id) AS users_under_30\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.age < 30 AND pb.device_model = 'Galaxy Note 2'",
    "1189": "SELECT \n    (CAST(SUM(CASE WHEN ga.age < 50 THEN 1 ELSE 0 END) AS REAL) / COUNT(ga.device_id)) * 100 AS percentage_under_50\nFROM \n    phone_brand_device_model2 pb\nJOIN \n    gender_age ga ON pb.device_id = ga.device_id\nWHERE \n    pb.phone_brand = 'OPPO'",
    "1190": "SELECT AVG(ga.age) AS average_age\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.device_model = 'R7'",
    "1191": "SELECT lc.category\nFROM label_categories AS lc\nJOIN app_labels AS al ON lc.label_id = al.label_id\nWHERE al.app_id = 5902120154267990000",
    "1192": "SELECT DISTINCT ga.group\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'LG'",
    "1193": "SELECT lc.category\nFROM label_categories AS lc\nJOIN app_labels AS al ON lc.label_id = al.label_id\nWHERE al.app_id = 4955831798976240000;",
    "1194": "SELECT COUNT(DISTINCT ga.device_id) AS female_users\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'F' AND pb.device_model = 'MI 3'",
    "1195": "SELECT COUNT(DISTINCT gender_age.device_id) AS male_users_with_desire_820\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE gender_age.gender = 'M' AND phone_brand_device_model2.device_model = 'Desire 820'",
    "1196": "SELECT COUNT(DISTINCT ga.device_id) AS users_above_20_using_ELIFE_E7_Mini\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.age > 20 AND pb.device_model = 'ELIFE E7 Mini'",
    "1197": "SELECT COUNT(DISTINCT ga.device_id) AS users_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.age > 20 AND ga.age < 50 AND pb.device_model = 'Galaxy Premier'",
    "1198": "SELECT COUNT(DISTINCT gender_age.device_id) AS male_users\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE gender_age.gender = 'M' AND phone_brand_device_model2.phone_brand = 'HTC'",
    "1199": "SELECT COUNT(DISTINCT ga.device_id) AS users_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.age BETWEEN 20 AND 60\nAND pb.phone_brand = 'TCL'",
    "1200": "SELECT\n    (CAST(SUM(CASE WHEN ga.age > 20 THEN 1 ELSE 0 END) AS REAL) / COUNT(ga.device_id)) * 100 AS percentage_above_20\nFROM\n    phone_brand_device_model2 pb\nJOIN\n    gender_age ga ON pb.device_id = ga.device_id\nWHERE\n    pb.phone_brand = 'SUGAR'",
    "1201": "SELECT longitude, latitude FROM events WHERE timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';",
    "1202": "SELECT COUNT(DISTINCT device_model) AS total_htc_models\nFROM phone_brand_device_model2\nWHERE phone_brand = 'HTC'",
    "1203": "SELECT app_id\nFROM app_events\nWHERE is_installed = 1 AND is_active = 1",
    "1204": "SELECT COUNT(DISTINCT app_id) AS apps_labeled_7\nFROM app_labels\nWHERE label_id = 7;",
    "1205": "SELECT device_id \nFROM gender_age \nWHERE gender = 'F' AND age BETWEEN 29 AND 31;",
    "1206": "SELECT DISTINCT al.app_id\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE lc.category = 'game-stress reliever'",
    "1207": "SELECT \n    DATE(e.timestamp) AS event_date, \n    COUNT(e.event_id) AS event_count\nFROM \n    events e\nJOIN \n    gender_age ga ON e.device_id = ga.device_id\nWHERE \n    ga.age = 40 AND ga.gender = 'M'\nGROUP BY \n    event_date\nORDER BY \n    event_count DESC\nLIMIT 1;",
    "1208": "SELECT pb.phone_brand\nFROM phone_brand_device_model2 pb\nJOIN gender_age ga ON pb.device_id = ga.device_id\nJOIN events e ON ga.device_id = e.device_id\nJOIN app_events ae ON e.event_id = ae.event_id\nWHERE ae.is_installed = 1\nGROUP BY pb.phone_brand\nORDER BY COUNT(ae.is_installed) DESC\nLIMIT 1;",
    "1209": "SELECT COUNT(DISTINCT ga.device_id) AS men_under_23_inactive_apps\nFROM gender_age ga\nJOIN app_events ae ON ga.device_id = ae.app_id\nWHERE ga.gender = 'M' AND ga.age < 23 AND ae.is_installed = 1 AND ae.is_active = 0",
    "1210": "SELECT COUNT(DISTINCT ga.device_id) AS women_with_games_installed\nFROM gender_age ga\nJOIN app_events ae ON ga.device_id = ae.app_id\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE ga.gender = 'F' AND ae.is_installed = 1 AND lc.category = 'game-Finding fault'",
    "1211": "SELECT gender, COUNT(gender) AS gender_count\nFROM gender_age\nJOIN events ON gender_age.device_id = events.device_id\nWHERE timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59'\nGROUP BY gender\nORDER BY gender_count DESC\nLIMIT 1",
    "1212": "SELECT `group`, COUNT(`group`) AS group_count\nFROM gender_age_train\nJOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id\nWHERE device_model = 'SM-T2558'\nGROUP BY `group`\nORDER BY group_count DESC\nLIMIT 1;",
    "1213": "SELECT COUNT(DISTINCT ga.device_id) \nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.age > 50 AND NOT (pb.phone_brand = 'HTC' AND pb.device_model = 'One M8 Eye');",
    "1214": "SELECT e.*\nFROM events e\nJOIN gender_age ga ON e.device_id = ga.device_id\nWHERE ga.gender = 'F' AND ga.age < 30",
    "1215": "SELECT \n    (CAST(SUM(CASE WHEN ga.gender = 'F' AND ae.is_installed = 0 THEN 1 ELSE 0 END) AS REAL) / \n    SUM(CASE WHEN ga.gender = 'M' AND ae.is_installed = 0 THEN 1 ELSE 0 END)) * 100.0 AS percentage_women_not_installed_vs_men\nFROM \n    gender_age ga\nJOIN \n    app_events ae ON ga.device_id = ae.app_id\nWHERE \n    ae.is_installed = 0",
    "1216": "SELECT AVG(ga.age) AS average_age\nFROM gender_age ga\nJOIN events_relevant er ON ga.device_id = er.device_id\nJOIN app_events_relevant aer ON er.event_id = aer.event_id\nWHERE aer.is_installed = 1 AND aer.is_active = 0",
    "1217": "SELECT e.event_id\nFROM events e\nWHERE e.timestamp LIKE '2016-05-01%' AND e.latitude = 31\nLIMIT 3;",
    "1218": "SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3;",
    "1219": "SELECT\n  (SUM(CASE WHEN latitude != 0 AND longitude != 0 THEN 1 ELSE 0 END) -\n  SUM(CASE WHEN latitude = 0 AND longitude = 0 THEN 1 ELSE 0 END)) AS difference\nFROM events\nWHERE device_id = -922956879900150000;",
    "1220": "SELECT DISTINCT phone_brand_device_model2.device_id\nFROM phone_brand_device_model2\nJOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id\nWHERE gender_age.gender = 'F'\nLIMIT 3",
    "1221": "SELECT label_id, category\nFROM label_categories\nWHERE category LIKE '%game%'\nLIMIT 5;",
    "1222": "SELECT DISTINCT device_model \nFROM phone_brand_device_model2 \nWHERE phone_brand = 'OPPO' \nLIMIT 3;",
    "1223": "SELECT \n    (CAST(SUM(is_installed = 1 AND is_active = 0) AS REAL) / COUNT(app_id)) * 100 AS percentage\nFROM \n    app_events\nWHERE \n    event_id = 6;",
    "1224": "SELECT\n    CASE \n        WHEN SUM(gender = 'M') > SUM(gender = 'F') THEN 'M'\n        WHEN SUM(gender = 'M') < SUM(gender = 'F') THEN 'F'\n        ELSE 'Equal'\n    END AS gender_that_owned_more\nFROM\n    gender_age\nJOIN\n    phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE\n    device_model = 'Galaxy Note 2'",
    "1225": "SELECT e.timestamp, COUNT(DISTINCT ae.app_id) AS active_users\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nWHERE e.event_id = 2 AND ae.is_active = 1",
    "1226": "SELECT lc.category\nFROM label_categories AS lc\nJOIN app_labels AS al ON lc.label_id = al.label_id\nWHERE al.app_id = 5902120154267990000;",
    "1227": "SELECT COUNT(DISTINCT ga.device_id) AS users_in_comics_category\nFROM gender_age ga\nJOIN events_relevant er ON ga.device_id = er.device_id\nJOIN app_events_relevant aer ON er.event_id = aer.event_id\nJOIN app_labels al ON aer.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE lc.category = 'comics';",
    "1228": "SELECT g.gender, g.age\nFROM gender_age g\nJOIN events_relevant er ON g.device_id = er.device_id\nWHERE er.event_id = 1 AND er.device_id = 29182687948017100",
    "1229": "SELECT COUNT(DISTINCT e.device_id)\nFROM events e\nJOIN gender_age ga ON e.device_id = ga.device_id\nWHERE ga.gender = 'M' AND e.longitude = 114",
    "1230": "SELECT e.timestamp\nFROM events e\nJOIN app_events ae ON e.event_id = ae.event_id\nWHERE ae.event_id = 7 AND ae.app_id = -8022267440849930000",
    "1231": "SELECT lc.category\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE al.app_id = -9222198347540750000;",
    "1232": "SELECT ga.group\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE pb.phone_brand = 'LG' AND pb.device_model = 'Nexus 4'",
    "1233": "SELECT gender_age.gender\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE phone_brand_device_model2.phone_brand = 'HTC' AND phone_brand_device_model2.device_model = 'Desire 826'\nLIMIT 1;",
    "1234": "SELECT \n    (SELECT CAST(COUNT(DISTINCT al.app_id) AS REAL)\n     FROM app_labels al\n     JOIN label_categories lc ON al.label_id = lc.label_id\n     WHERE lc.category = 'Academic Information') / \n    (SELECT CAST(COUNT(DISTINCT app_id) AS REAL) FROM app_all) * 100 AS percentage",
    "1235": "SELECT \n    (CAST(SUM(CASE WHEN ga.group = 'F27-28' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT e.device_id)) * 100 AS percentage\nFROM \n    events e\nJOIN \n    gender_age ga ON e.device_id = ga.device_id\nWHERE \n    e.timestamp LIKE '2016-05-03%'",
    "1236": "SELECT COUNT(*) AS oppo_device_count\nFROM phone_brand_device_model2\nWHERE phone_brand = 'OPPO';",
    "1237": "SELECT `group`, COUNT(`group`) AS group_count\nFROM gender_age\nGROUP BY `group`\nORDER BY group_count DESC\nLIMIT 1;",
    "1238": "SELECT COUNT(*) AS event_count\nFROM events\nWHERE device_id = 4069764298338760000",
    "1239": "SELECT COUNT(DISTINCT al.app_id) AS EquityFundAppCount\nFROM app_labels al\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE lc.category = 'Equity Fund';",
    "1240": "SELECT e.device_id, e.longitude, e.latitude\nFROM events_relevant e\nJOIN gender_age g ON e.device_id = g.device_id\nWHERE g.gender = 'F' AND g.group = 'F24-26'",
    "1241": "SELECT COUNT(DISTINCT ga.device_id) AS male_users_with_galaxy_note_3\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'M' AND pb.device_model = 'Galaxy Note 3'",
    "1242": "SELECT DISTINCT pbdm.phone_brand, pbdm.device_model\nFROM events e\nJOIN phone_brand_device_model2 pbdm ON e.device_id = pbdm.device_id\nWHERE e.timestamp = '2016-05-07 06:03:22';",
    "1243": "SELECT phone_brand, COUNT(*) AS brand_count\nFROM phone_brand_device_model2\nJOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id\nWHERE age BETWEEN 20 AND 30\nGROUP BY phone_brand\nORDER BY brand_count DESC\nLIMIT 1;",
    "1244": "SELECT \n    (CAST(SUM(CASE WHEN ga.gender IS NULL AND ga.age IS NULL AND ga.group IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_no_info\nFROM \n    phone_brand_device_model2 pb\nLEFT JOIN \n    gender_age ga ON pb.device_id = ga.device_id\nWHERE \n    pb.phone_brand = 'vivo';",
    "1245": "SELECT keyword \nFROM Keyword \nJOIN Episode ON Keyword.episode_id = Episode.episode_id \nWHERE Episode.title = 'Refuge: Part 1'",
    "1246": "SELECT COUNT(keyword) AS keyword_count\nFROM Keyword\nJOIN Episode ON Keyword.episode_id = Episode.episode_id\nWHERE Episode.series = 'law_and_order' AND Episode.season = 9 AND Episode.episode = 23",
    "1247": "SELECT Episode.title\nFROM Episode\nJOIN Keyword ON Episode.episode_id = Keyword.episode_id\nWHERE Keyword.keyword = 'laundering money'",
    "1248": "SELECT Keyword.keyword\nFROM Keyword\nJOIN Episode ON Keyword.episode_id = Episode.episode_id\nWHERE Episode.rating > 8",
    "1249": "SELECT SUM(votes) AS total_10_star_votes\nFROM Vote\nWHERE episode_id IN (\n    SELECT episode_id\n    FROM Episode\n    WHERE title = 'Cherished'\n)\nAND stars = 10",
    "1250": "SELECT SUM(votes) AS total_votes\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE title = 'Cherished'",
    "1251": "SELECT e.title\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE v.stars = 10\nORDER BY v.votes DESC\nLIMIT 1",
    "1252": "SELECT Credit.role\nFROM Credit\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nJOIN Person ON Credit.person_id = Person.person_id\nWHERE Episode.title = 'Cherished' AND Person.name = 'Park Dietz' AND Credit.credited = 'true'",
    "1253": "SELECT COUNT(DISTINCT person_id) AS people_not_credited\nFROM Credit\nWHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Cherished')\nAND credited = ''",
    "1254": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE c.role = 'technical advisor' AND e.title = 'Cherished' AND c.credited = 'true'",
    "1255": "SELECT COUNT(*) AS times_credited\nFROM Credit c\nJOIN Person p ON c.person_id = p.person_id\nWHERE p.name = 'Park Dietz' AND c.credited = 'true'",
    "1256": "SELECT Episode.title\nFROM Episode\nJOIN Credit ON Episode.episode_id = Credit.episode_id\nJOIN Person ON Credit.person_id = Person.person_id\nWHERE Person.name = 'Park Dietz' AND Credit.credited = 'true'",
    "1257": "SELECT credited\nFROM Credit\nJOIN Person ON Credit.person_id = Person.person_id\nWHERE Credit.episode_id = 'tt0629204' AND Person.name = 'Anthony Azzara'",
    "1258": "SELECT COUNT(keyword) AS keyword_count\nFROM Keyword\nJOIN Episode ON Keyword.episode_id = Episode.episode_id\nWHERE Episode.title = 'Disciple'",
    "1259": "SELECT Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 1\nORDER BY Vote.votes DESC\nLIMIT 1",
    "1260": "SELECT COUNT(*) AS nominations\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.series = 'Law and Order' AND Episode.season = 9 AND Episode.episode = 20",
    "1261": "SELECT COUNT(*) AS roles_included_in_credit\nFROM Credit c\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE e.series = 'Law and Order' AND e.season = 9 AND e.episode = 17 AND c.credited = 'true'",
    "1262": "SELECT summary\nFROM Episode\nWHERE episode_id = (SELECT episode_id FROM Award WHERE award_id = 296)",
    "1263": "SELECT \n    e.series,\n    e.season,\n    e.episode,\n    e.title AS episode_title,\n    c.role,\n    c.category\nFROM \n    Credit c\nJOIN \n    Person p ON c.person_id = p.person_id\nJOIN \n    Episode e ON c.episode_id = e.episode_id\nWHERE \n    p.name = 'Joseph Blair'",
    "1264": "SELECT COUNT(*) AS nominations\nFROM Award\nJOIN Person ON Award.person_id = Person.person_id\nWHERE Person.name = 'Rene Balcer'",
    "1265": "SELECT air_date\nFROM Episode\nORDER BY votes DESC\nLIMIT 1",
    "1266": "SELECT p.name\nFROM Award a\nJOIN Person p ON a.person_id = p.person_id\nWHERE a.award_id = 313",
    "1267": "SELECT COUNT(DISTINCT Credit.episode_id) AS episodes_count\nFROM Credit\nJOIN Person ON Credit.person_id = Person.person_id\nWHERE Person.name = 'J.K. Simmons';",
    "1268": "SELECT votes\nFROM Vote\nWHERE stars = 9 AND episode_id = (SELECT episode_id FROM Episode WHERE title = 'Sideshow')",
    "1269": "SELECT \n    (SELECT COUNT(*) FROM Keyword JOIN Episode ON Keyword.episode_id = Episode.episode_id WHERE Episode.title = 'Refuge: Part 1') * 1.0 /\n    (SELECT COUNT(*) FROM Keyword JOIN Episode ON Keyword.episode_id = Episode.episode_id WHERE Episode.title = 'Shield') AS times",
    "1270": "SELECT AVG(cast_count) AS average_cast_members\nFROM (\n    SELECT COUNT(person_id) AS cast_count\n    FROM Credit\n    WHERE episode_id IN (\n        SELECT episode_id\n        FROM Episode\n        WHERE number_in_series BETWEEN 185 AND 193\n    )\n    AND category = 'Cast'\n    AND credited = 'TRUE'\n    GROUP BY episode_id\n)",
    "1271": "SELECT Person.name\nFROM Person\nJOIN Credit ON Person.person_id = Credit.person_id\nWHERE Credit.episode_id = 'tt0629391' AND Credit.credited = ''",
    "1272": "SELECT COUNT(*) AS people_with_at_least_3_awards\nFROM (\n    SELECT person_id\n    FROM Award\n    WHERE result = 'Winner'\n    GROUP BY person_id\n    HAVING COUNT(award_id) >= 3\n)",
    "1273": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE c.episode_id = 'tt0629204' AND c.role = 'script supervisor'",
    "1274": "SELECT COUNT(*) AS nominations\nFROM Award\nWHERE person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts')\nAND result = 'Nominee'",
    "1275": "SELECT name \nFROM Person \nJOIN Credit ON Person.person_id = Credit.person_id \nWHERE role = 'camera operator' \nORDER BY height_meters DESC \nLIMIT 1",
    "1276": "SELECT COUNT(DISTINCT Person.person_id) AS CanadianAwardWinners1999\nFROM Person\nJOIN Award ON Person.person_id = Award.person_id\nWHERE Person.birth_country = 'Canada' AND Award.year = 1999",
    "1277": "SELECT v.votes\nFROM Vote v\nJOIN Episode e ON v.episode_id = e.episode_id\nWHERE v.stars = 10 AND e.rating = (SELECT MAX(rating) FROM Episode)",
    "1278": "SELECT keyword \nFROM Keyword \nJOIN Episode ON Keyword.episode_id = Episode.episode_id \nWHERE Episode.title = 'Shield'",
    "1279": "SELECT \n    (SELECT percent \n     FROM Vote \n     WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'True North') \n     AND stars = 1) AS percentage_of_1_star",
    "1280": "SELECT e.title\nFROM Episode e\nJOIN (\n    SELECT episode_id, COUNT(keyword) AS keyword_count\n    FROM Keyword\n    GROUP BY episode_id\n    ORDER BY keyword_count DESC\n    LIMIT 1\n) AS k ON e.episode_id = k.episode_id",
    "1281": "SELECT COUNT(DISTINCT Episode.episode_id) AS episodes_won\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Episode.air_date LIKE '1998%'\nAND Award.organization = 'International Monitor Awards'\nAND Award.result = 'Winner'",
    "1282": "SELECT COUNT(*) AS award_wins\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.title = 'Agony' AND Award.result = 'Winner'",
    "1283": "WITH SeasonEpisodeCount AS (\n    SELECT\n        season,\n        COUNT(episode_id) AS episode_count\n    FROM Episode\n    WHERE series = 'Law and Order' AND season = 9\n),\nCastCount AS (\n    SELECT\n        e.season,\n        COUNT(DISTINCT c.person_id) AS cast_count,\n        COUNT(DISTINCT e.episode_id) AS episode_count\n    FROM Credit c\n    JOIN Episode e ON c.episode_id = e.episode_id\n    WHERE e.series = 'Law and Order' AND c.category = 'Cast'\n    GROUP BY e.season\n)\nSELECT\n    (SELECT episode_count FROM SeasonEpisodeCount) AS episodes_in_9th_season,\n    AVG(CAST(cast_count AS REAL) / episode_count) AS avg_casts_per_season\nFROM CastCount",
    "1284": "SELECT k.keyword\nFROM Keyword k\nJOIN Episode e ON k.episode_id = e.episode_id\nWHERE e.votes = (\n    SELECT MAX(votes)\n    FROM Episode\n    WHERE votes < (SELECT MAX(votes) FROM Episode)\n)",
    "1285": "SELECT COUNT(*) AS total_awards_won\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.title = 'Agony' AND Award.result = 'Winner'",
    "1286": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE e.title = 'Flight' AND c.role = 'Narrator'",
    "1287": "SELECT organization\nFROM Award\nWHERE person_id = (SELECT person_id FROM Person WHERE name = 'Constantine Makris')\nAND result = 'Winner'\nGROUP BY organization\nORDER BY COUNT(award_id) DESC\nLIMIT 1",
    "1288": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nWHERE c.role = 'stunt coordinator' AND c.episode_id IN (\n    SELECT episode_id\n    FROM Episode\n    WHERE episode = 3\n)",
    "1289": "SELECT COUNT(*) AS not_credited_people\nFROM Credit\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nWHERE Episode.title = 'Admissions' AND Credit.credited = ''",
    "1290": "SELECT e.title\nFROM Episode e\nJOIN Credit c ON e.episode_id = c.episode_id\nWHERE c.category = 'Art Department'\nGROUP BY e.episode_id\nORDER BY COUNT(c.person_id) DESC\nLIMIT 1",
    "1291": "SELECT COUNT(DISTINCT role) AS roles_played\nFROM Credit\nWHERE person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts');",
    "1292": "SELECT Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 10 AND Vote.votes >= 30\nORDER BY Vote.percent DESC\nLIMIT 3",
    "1293": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nWHERE c.role = 'Clerk'\nORDER BY p.birthdate DESC\nLIMIT 1",
    "1294": "SELECT SUM(votes) AS people_did_not_enjoy\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE stars = 1 AND episode = 24",
    "1295": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE c.category = 'Cast'",
    "1296": "WITH PersonAppearances AS (\n    SELECT \n        p.name,\n        COUNT(c.person_id) AS appearances\n    FROM \n        Credit c\n    JOIN \n        Person p ON c.person_id = p.person_id\n    GROUP BY \n        c.person_id\n),\nTotalAppearances AS (\n    SELECT \n        SUM(appearances) AS total\n    FROM \n        PersonAppearances\n),\nMaxAppearance AS (\n    SELECT \n        name,\n        appearances,\n        (CAST(appearances AS REAL) / (SELECT total FROM TotalAppearances) * 100) AS percentage\n    FROM \n        PersonAppearances\n    ORDER BY \n        appearances DESC\n    LIMIT 1\n)\nSELECT * FROM MaxAppearance;",
    "1297": "SELECT e.episode_id, e.title\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE e.series = 'Law & Order' AND a.award_category LIKE '%Primetime Emmy%'",
    "1298": "SELECT COUNT(DISTINCT e.episode_id) AS episodes_without_awards\nFROM Episode e\nLEFT JOIN Award a ON e.episode_id = a.episode_id AND e.series LIKE 'Law & Order%' AND a.result != 'Nominee'\nWHERE a.award_id IS NULL;",
    "1299": "SELECT DISTINCT role\nFROM Credit\nWHERE credited = ''",
    "1300": "SELECT title\nFROM Episode\nORDER BY rating ASC\nLIMIT 3",
    "1301": "SELECT birth_place || ', ' || birth_region AS full_place_of_birth\nFROM Person\nWHERE birth_name = 'Rene Chenevert Balcer'",
    "1302": "SELECT name \nFROM Person \nWHERE birth_country = 'USA'",
    "1303": "SELECT Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 1\nORDER BY Vote.percent DESC",
    "1304": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Award a ON p.person_id = a.person_id\nWHERE a.result = 'Winner' AND a.role = 'director'",
    "1305": "SELECT votes\nFROM Episode\nWHERE title = 'Juvenile'",
    "1306": "SELECT e.episode_id, e.title\nFROM Episode e\nJOIN Credit c ON e.episode_id = c.episode_id\nJOIN Person p ON c.person_id = p.person_id\nWHERE p.name = 'Anthony Azzara' AND c.credited = ''",
    "1307": "SELECT DISTINCT Award.year\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.title = 'DWB' AND Award.result = 'Winner'",
    "1308": "SELECT DISTINCT p.birth_region\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nWHERE c.role = 'assistant location manager'",
    "1309": "SELECT SUM(v.stars) AS total_stars\nFROM Vote v\nJOIN Credit c ON v.episode_id = c.episode_id\nJOIN Person p ON c.person_id = p.person_id\nWHERE p.name = 'Donna Villella'",
    "1310": "SELECT role \nFROM Award \nWHERE person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts') \nAND result = 'Nominee'",
    "1311": "SELECT role\nFROM Credit\nWHERE person_id = (\n    SELECT person_id\n    FROM Person\n    ORDER BY height_meters DESC\n    LIMIT 1\n)",
    "1312": "SELECT e.title\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.result = 'Nominee'\nGROUP BY e.episode_id\nORDER BY COUNT(a.episode_id) DESC\nLIMIT 1",
    "1313": "SELECT e.episode_id, e.title, e.rating\nFROM Episode e\nJOIN Credit c ON e.episode_id = c.episode_id\nJOIN Person p ON c.person_id = p.person_id\nWHERE p.name = 'Jace Alexander'",
    "1314": "SELECT Person.name\nFROM Person\nJOIN Credit ON Person.person_id = Credit.person_id\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nWHERE Episode.season = 9 AND Episode.episode = 19",
    "1315": "SELECT AVG(stars) AS average_star_rating\nFROM Vote\nWHERE episode_id IN (\n    SELECT Credit.episode_id\n    FROM Credit\n    JOIN Person ON Credit.person_id = Person.person_id\n    WHERE Person.name = 'Jim Bracchitta'\n)",
    "1316": "SELECT \n    (CAST(COUNT(DISTINCT c.person_id) AS REAL) / (SELECT COUNT(DISTINCT person_id) \n                                                  FROM Credit \n                                                  WHERE episode_id = (SELECT episode_id \n                                                                      FROM Episode \n                                                                      WHERE title = 'True North')) \n    ) * 100 AS percentage_additional_crew\nFROM Credit c\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE e.title = 'True North' AND c.role = 'Additional Crew'",
    "1317": "SELECT Episode.title, Episode.summary, Episode.air_date\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 10 AND Vote.votes = 72",
    "1318": "SELECT e.air_date, e.rating, v.votes\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE e.episode = 12 AND v.stars = 6",
    "1319": "SELECT \n    Person.name, \n    Award.role \nFROM \n    Award \nJOIN \n    Person ON Award.person_id = Person.person_id \nWHERE \n    Award.award = 'Best Television Episode' \n    AND Award.award_category = 'Edgar' \n    AND Award.year = 2000 \n    AND Award.result = 'Winner'",
    "1320": "SELECT organization, year, award, award_category\nFROM Award\nJOIN Person ON Award.person_id = Person.person_id\nWHERE Person.name = 'Rene Balcer' AND Award.result = 'Winner'",
    "1321": "SELECT A.year, A.episode_id\nFROM Award A\nJOIN Person P ON A.person_id = P.person_id\nWHERE A.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'\nAND A.award_category = 'Silver Gavel Award'\nAND A.award = 'Television'\nAND A.result = 'Winner'\nAND P.name = 'Constantine Makris'\nAND EXISTS (\n    SELECT 1\n    FROM Award B\n    WHERE B.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'\n    AND B.award_category = 'Silver Gavel Award'\n    AND B.award = 'Television'\n    AND B.result = 'Winner'\n    AND B.person_id = A.person_id\n    AND (B.year = A.year + 1 OR B.year = A.year - 1)\n)\nORDER BY A.year ASC",
    "1322": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON c.episode_id = e.episode_id\nJOIN Award a ON p.person_id = a.person_id\nWHERE c.role = 'writer'\n  AND e.series = 'Law and Order'\n  AND a.award = 'Television'\n  AND a.award_category = 'Silver Gavel Award'\n  AND a.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'\n  AND a.result = 'Winner'\nGROUP BY p.person_id\nHAVING COUNT(DISTINCT a.year) >= 2",
    "1323": "SELECT COUNT(*) AS nominations\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.series = 'Law and Order'\nAND Episode.number_in_series = 20\nAND Award.organization = 'Primetime Emmy Awards'\nAND Award.year = 1999\nAND Award.result = 'nominee'",
    "1324": "SELECT e.title, a.role\nFROM Award a\nJOIN Episode e ON a.episode_id = e.episode_id\nJOIN Person p ON a.person_id = p.person_id\nWHERE a.result = 'Winner'\nAND a.award = 'Outstanding Guest Actress in a Drama Series'\nAND a.year = 1999\nAND a.organization = 'Primetime Emmy Awards'\nAND p.name = 'Julia Roberts'",
    "1325": "SELECT Episode.title, Episode.air_date\nFROM Episode\nJOIN Credit ON Episode.episode_id = Credit.episode_id\nJOIN Person ON Credit.person_id = Person.person_id\nWHERE Person.name = 'Billy Fox' AND Credit.role = 'producer'",
    "1326": "SELECT COUNT(*) AS uncredited_american_casts\nFROM Credit\nJOIN Person ON Credit.person_id = Person.person_id\nWHERE Credit.episode_id = 'tt0629228'\nAND Credit.category = 'Cast'\nAND Credit.credited = ''\nAND Person.birth_country = 'USA'",
    "1327": "SELECT \n    e.series,\n    e.season,\n    e.episode,\n    p.name,\n    c.role\nFROM \n    Credit c\nJOIN \n    Person p ON c.person_id = p.person_id\nJOIN \n    Episode e ON c.episode_id = e.episode_id\nWHERE \n    p.name = 'Jason Kuschner' AND e.episode = 9;",
    "1328": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE c.role = 'president of NBC West Coast' AND e.episode = 1",
    "1329": "SELECT e.title,\n       SUM(v.stars * v.percent) / 100.0 AS weighted_stars\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nGROUP BY e.episode_id\nORDER BY weighted_stars DESC\nLIMIT 3",
    "1330": "SELECT \n    e.series,\n    e.episode,\n    COUNT(DISTINCT CASE WHEN p.birth_country = 'USA' THEN c.person_id END) * 1.0 / COUNT(DISTINCT c.person_id) AS american_cast_ratio,\n    GROUP_CONCAT(DISTINCT CASE WHEN p.birth_country = 'USA' THEN c.role END) AS american_roles\nFROM \n    Episode e\nJOIN \n    Credit c ON e.episode_id = c.episode_id\nJOIN \n    Person p ON c.person_id = p.person_id\nWHERE \n    e.series = 'The series' -- Replace 'The series' with the actual series name\n    AND e.episode = 2\n    AND c.category = 'Cast'",
    "1331": "SELECT COUNT(DISTINCT Person.person_id) AS CanadianNominated\nFROM Person\nJOIN Award ON Person.person_id = Award.person_id\nWHERE Person.birth_country = 'Canada'",
    "1332": "SELECT COUNT(*) AS episodes_credited_to_Jerry_Orbach\nFROM Credit\nJOIN Person ON Credit.person_id = Person.person_id\nWHERE Person.name = 'Jerry Orbach'",
    "1333": "SELECT p.name AS credit_name\nFROM Credit c\nJOIN Person p ON c.person_id = p.person_id\nWHERE c.episode_id = '9'",
    "1334": "SELECT award\nFROM Award\nWHERE episode_id = '20' AND (result = 'Winner' OR result = 'Nominee')",
    "1335": "SELECT \n    a.role, \n    p.name\nFROM \n    Award a\nJOIN \n    Person p ON a.person_id = p.person_id\nJOIN \n    Episode e ON a.episode_id = e.episode_id\nWHERE \n    a.result = 'Won'\nGROUP BY \n    a.role, e.season, p.name\nHAVING \n    COUNT(a.role) > 1",
    "1336": "SELECT p.name AS director_name, e.episode AS episode_number\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON e.episode_id = c.episode_id\nJOIN Award a ON a.person_id = p.person_id AND (a.episode_id = e.episode_id OR a.series = e.series)\nWHERE c.role = 'director' AND a.result = 'Winner'",
    "1337": "SELECT Episode.episode_id, Episode.title\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Award.result = 'Nominee'",
    "1338": "SELECT e.episode_id, e.title, AVG(v.stars) AS average_rating\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE e.season = 9\nGROUP BY e.episode_id",
    "1339": "SELECT \n    (SELECT votes FROM Vote WHERE episode_id IN (SELECT episode_id FROM Episode WHERE episode = 1) AND stars = 10) - \n    (SELECT votes FROM Vote WHERE episode_id IN (SELECT episode_id FROM Episode WHERE episode = 24) AND stars = 10) AS difference",
    "1340": "SELECT e.rating\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.result = 'Winner'\nGROUP BY e.episode_id\nORDER BY COUNT(a.award_id) DESC\nLIMIT 1",
    "1341": "SELECT COUNT(*) AS displayed_credits\nFROM Credit\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nWHERE credited = 'true'\nAND Episode.episode >= 1\nAND Episode.episode <= 10",
    "1342": "SELECT Episode.episode_id, Episode.title\nFROM Episode\nJOIN Keyword ON Episode.episode_id = Keyword.episode_id\nWHERE Keyword.keyword = 'mafia'",
    "1343": "SELECT AVG(stars) AS average_star\nFROM (\n    SELECT v.stars, MAX(v.percent) AS max_percent\n    FROM Vote v\n    JOIN Award a ON v.episode_id = a.episode_id\n    WHERE a.result = 'Winner'\n    GROUP BY v.episode_id\n)",
    "1344": "SELECT AVG(rating) AS average_ranking\nFROM Episode\nWHERE episode_id IN (\n    SELECT episode_id\n    FROM Award\n    WHERE episode_id IS NOT NULL\n)",
    "1345": "SELECT COUNT(*) AS winners_count\nFROM Award\nWHERE result = 'Winner'\n  AND award = 'Television'\n  AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'",
    "1346": "SELECT birth_country\nFROM Person\nWHERE name = 'Michael Preston';",
    "1347": "SELECT p.name\nFROM Person p\nJOIN Award a ON p.person_id = a.person_id\nWHERE a.series = 'Law & Order'\nAND a.role = 'Katrina Ludlow'\nAND a.result = 'Nominee'",
    "1348": "SELECT p.name\nFROM Person p\nJOIN Award a ON p.person_id = a.person_id\nJOIN Credit c ON p.person_id = c.person_id\nWHERE a.award = 'Best Television Episode'\nAND a.result = 'Winner'\nAND c.role = 'teleplay'",
    "1349": "SELECT P.birthdate\nFROM Person P\nJOIN Credit C ON P.person_id = C.person_id\nWHERE C.role = 'writer'",
    "1350": "SELECT Episode.title\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Award.award = 'Outstanding Costume Design for a Series' AND Award.result = 'Nominated'",
    "1351": "SELECT Episode.episode_id, Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nGROUP BY Episode.episode_id\nORDER BY SUM(Vote.votes) DESC\nLIMIT 1",
    "1352": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nWHERE c.role = 'Alex Brown' AND c.credited = 'true'",
    "1353": "SELECT birth_place\nFROM Person\nWHERE person_id = (\n    SELECT person_id\n    FROM Credit\n    WHERE person_id = 'nm0007064'\n    AND role = 'Narrator'\n    AND credited = ''\n)",
    "1354": "SELECT keyword \nFROM Keyword \nJOIN Episode ON Keyword.episode_id = Episode.episode_id \nWHERE Episode.title = 'Shield'",
    "1355": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Credit c ON p.person_id = c.person_id\nJOIN Episode e ON e.episode_id = c.episode_id\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE p.height_meters > 1.80\nAND c.category = 'Actor'\nAND a.result = 'Winner'",
    "1356": "SELECT e.episode_id, e.title\nFROM Episode e\nJOIN Keyword k1 ON e.episode_id = k1.episode_id AND k1.keyword = 'nun'\nJOIN Keyword k2 ON e.episode_id = k2.episode_id AND k2.keyword = 'priest'\nGROUP BY e.episode_id",
    "1357": "SELECT e.episode_id\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.award = 'Best Television Episode' AND a.result = 'Winner' AND e.rating = 8.5",
    "1358": "SELECT Episode.episode_id, Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 10\nORDER BY Vote.percent DESC, Vote.votes DESC\nLIMIT 3",
    "1359": "SELECT VALUE \nFROM observations \nWHERE DATE = '2008-03-11' \nAND DESCRIPTION = 'Body Height' \nAND PATIENT = (\n    SELECT patient \n    FROM patients \n    WHERE first = 'Elly' AND last = 'Koss'\n)",
    "1360": "SELECT \n    (SELECT VALUE FROM observations \n     JOIN patients ON observations.PATIENT = patients.patient \n     WHERE patients.first = 'Elly' AND patients.last = 'Koss' \n     AND observations.DATE LIKE '2009%' AND observations.DESCRIPTION = 'Body Weight') \n    - \n    (SELECT VALUE FROM observations \n     JOIN patients ON observations.PATIENT = patients.patient \n     WHERE patients.first = 'Elly' AND patients.last = 'Koss' \n     AND observations.DATE LIKE '2008%' AND observations.DESCRIPTION = 'Body Weight') \nAS Weight_Increase;",
    "1361": "SELECT MAX(VALUE) AS Highest_Systolic_BP\nFROM observations\nJOIN patients ON observations.PATIENT = patients.patient\nWHERE patients.first = 'Elly' AND patients.last = 'Koss' AND observations.DESCRIPTION = 'Systolic Blood Pressure'",
    "1362": "SELECT COUNT(*) AS Systolic_BP_Observations\nFROM observations\nJOIN patients ON observations.PATIENT = patients.patient\nWHERE patients.first = 'Elly' AND patients.last = 'Koss' AND observations.DESCRIPTION = 'Systolic Blood Pressure'",
    "1363": "SELECT p.first || ' ' || p.last AS full_name\nFROM observations o\nJOIN patients p ON o.PATIENT = p.patient\nWHERE o.DESCRIPTION = 'Systolic Blood Pressure'\nORDER BY o.VALUE DESC\nLIMIT 1",
    "1364": "SELECT \n    SUM(\n        (strftime('%Y', STOP) - strftime('%Y', START)) * 365 +\n        (strftime('%m', STOP) - strftime('%m', START)) * 30 +\n        (strftime('%d', STOP) - strftime('%d', START))\n    ) AS days_on_acetaminophen\nFROM medications\nJOIN patients ON medications.PATIENT = patients.patient\nWHERE \n    patients.first = 'Elly' AND \n    patients.last = 'Koss' AND \n    medications.DESCRIPTION LIKE 'Acetaminophen%'",
    "1365": "SELECT DISTINCT m.DESCRIPTION\nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE p.first = 'Elly' AND p.last = 'Koss'",
    "1366": "SELECT m.REASONDESCRIPTION\nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE p.first = 'Elly' AND p.last = 'Koss' AND m.DESCRIPTION LIKE 'Acetaminophen%'",
    "1367": "SELECT m.DESCRIPTION\nFROM medications m\nJOIN encounters e ON m.ENCOUNTER = e.ID\nJOIN patients p ON m.PATIENT = p.patient\nWHERE p.first = 'Elly' AND p.last = 'Koss' AND m.REASONDESCRIPTION LIKE 'Streptococcal sore throat%'",
    "1368": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN medications m ON p.patient = m.PATIENT\nWHERE m.DESCRIPTION LIKE 'Acetaminophen%'\nGROUP BY p.patient",
    "1369": "SELECT DESCRIPTION \nFROM conditions \nWHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') \nAND START = '2009-01-08';",
    "1370": "SELECT SUM(\n    (strftime('%Y', STOP) - strftime('%Y', START)) * 365 +\n    (strftime('%m', STOP) - strftime('%m', START)) * 30 +\n    (strftime('%d', STOP) - strftime('%d', START))\n) AS Cystitis_Duration_Days\nFROM conditions\nJOIN patients ON conditions.PATIENT = patients.patient\nWHERE patients.first = 'Elly' AND patients.last = 'Koss' AND conditions.DESCRIPTION = 'Cystitis';",
    "1371": "SELECT AVG(VALUE) AS average_weight\nFROM observations\nJOIN patients ON observations.PATIENT = patients.patient\nWHERE patients.first = 'Elly' AND patients.last = 'Koss' AND observations.DESCRIPTION = 'Body Weight';",
    "1372": "SELECT \n    (CAST(SUM(CASE WHEN p.marital = 'M' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT p.patient)) * 100 AS percentage\nFROM \n    patients p\nJOIN \n    conditions c ON p.patient = c.PATIENT\nWHERE \n    c.DESCRIPTION = 'Cystitis';",
    "1373": "SELECT o.DESCRIPTION, o.VALUE, o.UNITS\nFROM observations o\nJOIN patients p ON o.PATIENT = p.patient\nWHERE p.first = 'Vincent' AND p.last = 'Wyman' AND o.DATE = '2010-08-02' AND o.DESCRIPTION = 'Body Height'",
    "1374": "SELECT COUNT(*) AS NumberOfCarePlans\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.first = 'Norman' AND patients.last = 'Berge';",
    "1375": "SELECT m.REASONDESCRIPTION\nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE m.DESCRIPTION = 'Leucovorin 100 MG Injection'\nAND m.START = '1970-12-19'\nAND p.first = 'Annabelle' AND p.last = 'Pouros'",
    "1376": "SELECT \"PREVALENCE PERCENTAGE\"\nFROM all_prevalences\nWHERE ITEM = '64859006';",
    "1377": "SELECT \"PREVALENCE RATE\"\nFROM all_prevalences\nWHERE ITEM = (\n    SELECT DESCRIPTION\n    FROM conditions\n    WHERE CODE = 368581000119106\n    LIMIT 1\n)",
    "1378": "SELECT p.DESCRIPTION\nFROM procedures p\nJOIN patients pa ON p.PATIENT = pa.patient\nWHERE pa.first = 'Jacquelyn' AND pa.last = 'Shanahan' AND p.DATE = '2009-08-09'",
    "1379": "SELECT COUNT(*) AS NumberOfClaims\nFROM claims c\nJOIN patients p ON c.PATIENT = p.patient\nWHERE p.first = 'Abbie' AND p.last = 'Cole'\nAND c.BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01';",
    "1380": "SELECT COUNT(*) AS NumberOfAllergies\nFROM allergies\nJOIN patients ON allergies.PATIENT = patients.patient\nWHERE patients.first = 'Saundra' AND patients.last = 'Monahan'",
    "1381": "SELECT p.first || ' ' || p.last AS name\nFROM patients p\nJOIN claims c ON p.patient = c.PATIENT\nWHERE c.BILLABLEPERIOD = '1947-09-11'",
    "1382": "SELECT e.ID, e.DATE, e.PATIENT, e.CODE, e.DESCRIPTION, e.REASONCODE, e.REASONDESCRIPTION\nFROM encounters e\nJOIN patients p ON e.PATIENT = p.patient\nWHERE p.first = 'Hubert' AND p.last = 'Baumbach' AND e.DATE = '2008-10-25'",
    "1383": "SELECT c.DESCRIPTION\nFROM conditions c\nJOIN patients p ON c.PATIENT = p.patient\nWHERE p.first = 'Keven' AND p.last = 'Kuhn'\nAND c.START = '2016-09-24' AND c.STOP = '2016-10-10'",
    "1384": "SELECT procedures.DATE\nFROM procedures\nJOIN patients ON procedures.PATIENT = patients.patient\nWHERE patients.first = 'Ira' AND patients.last = 'Deckow' AND procedures.DESCRIPTION = 'Standard pregnancy test'",
    "1385": "SELECT AVG(julianday(STOP) - julianday(START)) AS average_care_plan_period\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.first = 'Wesley' AND patients.last = 'Lemke'",
    "1386": "SELECT AVG(JULIANDAY(STOP) - JULIANDAY(START)) AS average_pregnancy_period\nFROM conditions\nWHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Angelena' AND last = 'Kertzmann')\nAND DESCRIPTION = 'Normal pregnancy';",
    "1387": "SELECT PATIENT\nFROM allergies\nWHERE STOP IS NOT NULL\nORDER BY (julianday(SUBSTR(STOP, 7, 4) || '-' || SUBSTR(STOP, 1, 2) || '-' || SUBSTR(STOP, 4, 2)) - julianday(SUBSTR(START, 7, 4) || '-' || SUBSTR(START, 1, 2) || '-' || SUBSTR(START, 4, 2))) DESC\nLIMIT 1",
    "1388": "SELECT COUNT(DISTINCT PATIENT) \nFROM conditions \nWHERE DESCRIPTION = 'Diabetes' \nAND START LIKE '1988%';",
    "1389": "SELECT COUNT(DISTINCT PATIENT) AS patients_allergic_to_eggs\nFROM allergies\nWHERE DESCRIPTION = 'Allergy to eggs';",
    "1390": "SELECT PATIENT\nFROM conditions\nWHERE DESCRIPTION = 'Hypertension'\nORDER BY START DESC\nLIMIT 1",
    "1391": "SELECT DESCRIPTION, COUNT(DESCRIPTION) AS frequency\nFROM allergies\nGROUP BY DESCRIPTION\nORDER BY frequency DESC\nLIMIT 1;",
    "1392": "SELECT PATIENT\nFROM observations\nWHERE DESCRIPTION = 'Body Height'\nORDER BY VALUE DESC\nLIMIT 1",
    "1393": "SELECT DESCRIPTION, COUNT(DESCRIPTION) AS condition_count\nFROM conditions\nJOIN patients ON conditions.PATIENT = patients.patient\nWHERE gender = 'F' AND ethnicity = 'american'\nGROUP BY DESCRIPTION\nORDER BY condition_count DESC\nLIMIT 1;",
    "1394": "SELECT COUNT(DISTINCT m.PATIENT) \nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE m.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet'\nAND m.START LIKE '2016%'\nAND p.ethnicity = 'dominican'\nAND ((strftime('%m', m.STOP) + 12 * strftime('%Y', m.STOP)) - (strftime('%m', m.START) + 12 * strftime('%Y', m.START))) = 1",
    "1395": "SELECT COUNT(DISTINCT patients.patient) AS patients_with_pneumonia\nFROM patients\nJOIN conditions ON patients.patient = conditions.PATIENT\nWHERE patients.birthdate LIKE '192%' AND conditions.DESCRIPTION = 'Pneumonia'",
    "1396": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN medications m ON p.patient = m.PATIENT\nWHERE m.DESCRIPTION = 'Yaz 28 Day Pack' AND m.START LIKE '2011%'",
    "1397": "SELECT COUNT(DISTINCT i.PATIENT) \nFROM immunizations i\nJOIN patients p ON i.PATIENT = p.patient\nWHERE p.race = 'black' \nAND i.DESCRIPTION = 'DTaP' \nAND strftime('%Y', i.DATE) = '2013'",
    "1398": "SELECT COUNT(*) AS ImmunizationCount\nFROM immunizations\nWHERE PATIENT = (\n    SELECT PATIENT\n    FROM conditions\n    JOIN all_prevalences ON conditions.DESCRIPTION = all_prevalences.ITEM\n    ORDER BY \"PREVALENCE RATE\" DESC, START DESC\n    LIMIT 1\n)",
    "1399": "SELECT COUNT(DISTINCT p.patient) AS NumberOfPatientsWithMostPrevalentConditions\nFROM patients p\nJOIN conditions c ON p.patient = c.PATIENT\nJOIN (\n    SELECT ITEM\n    FROM all_prevalences\n    WHERE \"PREVALENCE RATE\" = (\n        SELECT MAX(\"PREVALENCE RATE\")\n        FROM all_prevalences\n    )\n) ap ON c.DESCRIPTION = ap.ITEM",
    "1400": "SELECT c.DESCRIPTION, COUNT(*) AS count\nFROM conditions c\nJOIN immunizations i ON c.PATIENT = i.PATIENT\nWHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free'\nGROUP BY c.DESCRIPTION\nORDER BY count DESC\nLIMIT 1",
    "1401": "SELECT DISTINCT conditions.PATIENT\nFROM conditions\nJOIN all_prevalences ON conditions.DESCRIPTION = all_prevalences.ITEM\nWHERE all_prevalences.\"PREVALENCE PERCENTAGE\" = 18.8;",
    "1402": "SELECT COUNT(*) AS NumberOfConditions\nFROM conditions\nWHERE PATIENT = (\n    SELECT patient\n    FROM patients\n    WHERE first = 'Tyree' AND last = 'Eichmann'\n)",
    "1403": "SELECT COUNT(DISTINCT conditions.PATIENT)\nFROM conditions\nJOIN immunizations ON conditions.PATIENT = immunizations.PATIENT\nWHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'\nAND immunizations.DESCRIPTION = 'meningococcal MCV4P'\nAND conditions.START > immunizations.DATE",
    "1404": "SELECT COUNT(DISTINCT patients.patient) AS Female_Prediabetes_Patients\nFROM patients\nJOIN conditions ON patients.patient = conditions.PATIENT\nWHERE conditions.DESCRIPTION = 'Prediabetes' AND patients.gender = 'F';",
    "1405": "SELECT p.first || ' ' || p.last AS full_name\nFROM observations o\nJOIN patients p ON o.PATIENT = p.patient\nWHERE o.DESCRIPTION = 'Body Mass Index' AND o.UNITS = 'kg/m2'\nORDER BY o.VALUE ASC\nLIMIT 1;",
    "1406": "SELECT \n    (strftime('%Y', deathdate) - strftime('%Y', birthdate)) AS age\nFROM \n    patients\nWHERE \n    patient IN (\n        SELECT \n            DISTINCT PATIENT\n        FROM \n            conditions\n        WHERE \n            DESCRIPTION = 'Hypertension'\n    )\n    AND first = 'Giovanni' AND last = 'Russel'",
    "1407": "SELECT COUNT(DISTINCT p.patient) AS Asian_Female_Patients_On_Oxaliplatin\nFROM patients p\nJOIN medications m ON p.patient = m.PATIENT\nWHERE p.gender = 'F' AND p.race = 'Asian' AND m.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]'",
    "1408": "SELECT COUNT(DISTINCT patients.patient) AS living_patients_with_stroke\nFROM patients\nJOIN conditions ON patients.patient = conditions.PATIENT\nWHERE patients.deathdate IS NULL AND conditions.DESCRIPTION = 'Stroke'",
    "1409": "SELECT COUNT(DISTINCT patients.patient) AS total_asian_patients_allergic_to_peanuts\nFROM patients\nJOIN allergies ON patients.patient = allergies.PATIENT\nWHERE patients.race LIKE 'asian%'\nAND allergies.DESCRIPTION = 'Allergy to peanuts';",
    "1410": "SELECT AVG(o.VALUE) AS average_diastolic_bp\nFROM observations o\nJOIN conditions c ON o.PATIENT = c.PATIENT\nWHERE c.DESCRIPTION = 'Hypertension'\nAND o.DESCRIPTION = 'Diastolic Blood Pressure'",
    "1411": "SELECT m.DESCRIPTION\nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE p.ssn = '999-94-3751'",
    "1412": "SELECT p.ssn\nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nWHERE p.gender = 'F' AND p.ethnicity = 'irish' AND a.DESCRIPTION = 'Allergy to grass pollen'",
    "1413": "SELECT PATIENT FROM careplans WHERE CODE = 311791003;",
    "1414": "SELECT c.DESCRIPTION\nFROM conditions c\nJOIN patients p ON c.PATIENT = p.patient\nWHERE p.deathdate IS NOT NULL\nORDER BY (strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate)) DESC, p.deathdate DESC\nLIMIT 1",
    "1415": "SELECT c.CODE, ap.ITEM, ap.OCCURRENCES\nFROM all_prevalences ap\nJOIN conditions c ON ap.ITEM = c.DESCRIPTION\nORDER BY ap.OCCURRENCES DESC\nLIMIT 1;",
    "1416": "SELECT VALUE, UNITS\nFROM observations\nJOIN patients ON observations.PATIENT = patients.patient\nWHERE DESCRIPTION = 'Glucose' AND address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US'",
    "1417": "SELECT DISTINCT p.ssn\nFROM patients p\nJOIN conditions c ON p.patient = c.PATIENT\nJOIN all_prevalences ap ON c.DESCRIPTION = ap.ITEM\nWHERE ap.\"PREVALENCE PERCENTAGE\" < (\n    SELECT AVG(ap2.\"PREVALENCE PERCENTAGE\") * 0.3\n    FROM all_prevalences ap2\n)\nLIMIT 5;",
    "1418": "SELECT \n    (CAST(COUNT(DISTINCT p.patient) AS REAL) / (SELECT COUNT(DISTINCT patient) FROM conditions c INNER JOIN patients p ON c.PATIENT = p.patient WHERE c.DESCRIPTION = 'Acute bronchitis (disorder)')) * 100 AS percentage\nFROM \n    conditions c\nINNER JOIN \n    patients p ON c.PATIENT = p.patient\nWHERE \n    c.DESCRIPTION = 'Acute bronchitis (disorder)'\n    AND p.gender = 'F'\n    AND p.race = 'Asian'",
    "1419": "SELECT COUNT(*) AS NumberOfEncounters\nFROM encounters\nJOIN patients ON encounters.PATIENT = patients.patient\nWHERE patients.first = 'Major' AND patients.last = 'D''Amore'",
    "1420": "SELECT p.DESCRIPTION\nFROM procedures p\nJOIN patients pt ON p.PATIENT = pt.patient\nWHERE pt.first = 'Emmy' AND pt.last = 'Waelchi'",
    "1421": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN procedures pr ON p.patient = pr.PATIENT\nWHERE pr.DESCRIPTION = 'Extraction of wisdom tooth'",
    "1422": "SELECT o.VALUE, o.UNITS\nFROM observations o\nJOIN patients p ON o.PATIENT = p.patient\nWHERE p.first = 'Elly' AND p.last = 'Koss' AND o.DESCRIPTION = 'Body Weight'",
    "1423": "SELECT p.first, p.last\nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nWHERE a.DESCRIPTION = 'Allergy to soya';",
    "1424": "SELECT COUNT(*) AS DTaP_Immunization_Count\nFROM immunizations\nJOIN patients ON immunizations.PATIENT = patients.patient\nWHERE patients.first = 'Keven' AND patients.last = 'Kuhn' AND immunizations.DESCRIPTION = 'DTaP';",
    "1425": "SELECT p.first || ' ' || p.last AS full_name\nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE m.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet'\nAND (strftime('%Y', m.STOP) - strftime('%Y', m.START)) > 10",
    "1426": "SELECT \n    p.DESCRIPTION AS Procedure_Description, \n    m.DESCRIPTION AS Medication_Description\nFROM \n    patients pt\nJOIN \n    conditions c ON pt.patient = c.PATIENT\nJOIN \n    encounters e ON c.ENCOUNTER = e.ID\nLEFT JOIN \n    procedures p ON e.ID = p.ENCOUNTER\nLEFT JOIN \n    medications m ON e.ID = m.ENCOUNTER\nWHERE \n    c.DESCRIPTION = 'Third degree burn'",
    "1427": "SELECT m.*\nFROM medications m\nJOIN allergies a ON m.PATIENT = a.PATIENT AND m.ENCOUNTER = a.ENCOUNTER\nWHERE a.DESCRIPTION = 'Allergy to mould'\nAND m.START = '2016-06-06'",
    "1428": "SELECT cp.ID, cp.START, cp.STOP, cp.PATIENT, cp.ENCOUNTER, cp.CODE, cp.DESCRIPTION, cp.REASONCODE, cp.REASONDESCRIPTION\nFROM careplans cp\nJOIN conditions c ON cp.PATIENT = c.PATIENT\nWHERE c.DESCRIPTION = 'Secondary malignant neoplasm of colon'",
    "1429": "SELECT \n    \"PREVALENCE RATE\"\nFROM \n    all_prevalences\nWHERE \n    ITEM IN (SELECT \n                DESCRIPTION\n             FROM \n                conditions\n             WHERE \n                START = '2014-05-09');",
    "1430": "SELECT \n    p.first || ' ' || p.last AS name, \n    (strftime('%Y', '2011') - strftime('%Y', p.birthdate)) AS age\nFROM \n    observations o\nJOIN \n    patients p ON o.PATIENT = p.patient\nWHERE \n    o.DESCRIPTION = 'Systolic Blood Pressure' \n    AND o.VALUE = 200 \n    AND o.UNITS = 'mmHg' \n    AND o.DATE LIKE '2011%'\n    AND p.deathdate IS NULL",
    "1431": "WITH InfluenzaImmunizations AS (\n    SELECT DISTINCT PATIENT\n    FROM immunizations\n    WHERE DESCRIPTION = 'Influenza seasonal injectable preservative free'\n    AND strftime('%Y', DATE) = '2017'\n),\nTotalPatients AS (\n    SELECT COUNT(DISTINCT PATIENT) AS Total\n    FROM immunizations\n    WHERE strftime('%Y', DATE) = '2017'\n),\nEnglishPatients AS (\n    SELECT COUNT(DISTINCT i.PATIENT) AS EnglishCount\n    FROM InfluenzaImmunizations i\n    JOIN patients p ON i.PATIENT = p.patient\n    WHERE p.ethnicity = 'english'\n)\nSELECT \n    (SELECT COUNT(*) FROM InfluenzaImmunizations) * 100.0 / (SELECT Total FROM TotalPatients) AS Percentage,\n    (SELECT EnglishCount FROM EnglishPatients) AS EnglishPatients",
    "1432": "SELECT p.first\nFROM patients p\nJOIN encounters e ON p.patient = e.PATIENT\nWHERE e.REASONDESCRIPTION = 'Normal pregnancy'",
    "1433": "SELECT DISTINCT p.birthdate\nFROM patients p\nJOIN careplans c ON p.patient = c.PATIENT\nWHERE c.DESCRIPTION = 'Outpatient Encounter'",
    "1434": "SELECT p.first\nFROM patients p\nJOIN conditions c ON p.patient = c.PATIENT\nWHERE c.DESCRIPTION = 'Cystitis'",
    "1435": "SELECT COUNT(DISTINCT patients.patient) AS married_stroke_patients\nFROM patients\nJOIN conditions ON patients.patient = conditions.PATIENT\nWHERE conditions.DESCRIPTION = 'Stroke' AND patients.marital = 'M';",
    "1436": "SELECT p.address\nFROM patients p\nJOIN claims c ON p.patient = c.PATIENT\nWHERE strftime('%Y', c.BILLABLEPERIOD) = '2010'",
    "1437": "SELECT p.last\nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nWHERE a.DESCRIPTION = 'Allergy to dairy product';",
    "1438": "SELECT START \nFROM allergies \nJOIN patients ON allergies.PATIENT = patients.patient \nWHERE first = 'Angelo' AND last = 'Buckridge'",
    "1439": "SELECT COUNT(DISTINCT patients.patient) \nFROM patients \nJOIN allergies ON patients.patient = allergies.PATIENT \nWHERE patients.gender = 'M' AND allergies.DESCRIPTION = 'House dust mite allergy';",
    "1440": "SELECT DESCRIPTION\nFROM allergies\nJOIN patients ON allergies.PATIENT = patients.patient\nWHERE race = 'white'\nGROUP BY DESCRIPTION\nORDER BY COUNT(DESCRIPTION) DESC\nLIMIT 1;",
    "1441": "SELECT p.first\nFROM patients p\nJOIN immunizations i ON p.patient = i.PATIENT\nWHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free'",
    "1442": "SELECT COUNT(DISTINCT i.PATIENT)\nFROM immunizations i\nJOIN patients p ON i.PATIENT = p.patient\nWHERE p.gender = 'F' AND i.DESCRIPTION = 'HPV quadrivalent'",
    "1443": "SELECT e.DESCRIPTION\nFROM encounters e\nJOIN patients p ON e.PATIENT = p.patient\nWHERE p.birthplace = 'Pittsfield MA US';",
    "1444": "SELECT COUNT(DISTINCT a.DESCRIPTION) AS total_types_of_allergies_for_german_people\nFROM allergies a\nJOIN patients p ON a.PATIENT = p.patient\nWHERE p.ethnicity = 'german'",
    "1445": "SELECT AVG((julianday(deathdate) - julianday(birthdate)) / 365.25) AS average_age\nFROM patients\nWHERE patient IN (\n    SELECT PATIENT\n    FROM careplans\n    WHERE REASONDESCRIPTION = 'Prediabetes'\n)",
    "1446": "SELECT COUNT(DISTINCT m.PATIENT)\nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE m.REASONDESCRIPTION = 'Coronary Heart Disease'\nAND m.STOP IS NOT NULL\nAND p.deathdate IS NULL;",
    "1447": "SELECT COUNT(DISTINCT p.patient) \nFROM patients p \nJOIN procedures pr ON p.patient = pr.PATIENT \nWHERE pr.DESCRIPTION = 'Bone immobilization' AND p.drivers IS NOT NULL;",
    "1448": "SELECT DISTINCT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nGROUP BY p.patient\nHAVING COUNT(DISTINCT a.DESCRIPTION) >= 3",
    "1449": "SELECT COUNT(DISTINCT a.PATIENT)\nFROM allergies a\nJOIN immunizations i ON a.PATIENT = i.PATIENT\nWHERE a.DESCRIPTION = 'Allergy to eggs'\nAND i.DESCRIPTION = 'Td (adult) preservative free';",
    "1450": "SELECT COUNT(DISTINCT o.PATIENT)\nFROM observations o\nJOIN careplans c ON o.PATIENT = c.PATIENT\nWHERE o.DESCRIPTION = 'Body Weight'\nAND o.VALUE > 100\nAND o.UNITS = 'kg'\nAND c.DESCRIPTION = 'Diabetes self management plan'",
    "1451": "SELECT gender, COUNT(*) AS count\nFROM patients\nJOIN allergies ON patients.patient = allergies.PATIENT\nWHERE allergies.DESCRIPTION = 'Dander (animal) allergy'\nGROUP BY gender\nORDER BY count DESC\nLIMIT 1;",
    "1452": "SELECT BILLABLEPERIOD\nFROM claims\nJOIN patients ON claims.PATIENT = patients.patient\nWHERE patients.last = 'Dickinson'",
    "1453": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN conditions c ON p.patient = c.PATIENT\nWHERE c.DESCRIPTION = 'Otitis media';",
    "1454": "SELECT COUNT(DISTINCT patients.patient) AS IrishPatientsTakingMedicationForMI\nFROM patients\nJOIN medications ON patients.patient = medications.PATIENT\nWHERE patients.ethnicity = 'Irish' AND medications.REASONDESCRIPTION = 'Myocardial Infarction';",
    "1455": "SELECT COUNT(DISTINCT p.patient) \nFROM patients p \nJOIN careplans c ON p.patient = c.PATIENT \nWHERE c.DESCRIPTION = 'Concussion with loss of consciousness' \nAND p.marital = 'M'",
    "1456": "SELECT COUNT(DISTINCT immunizations.PATIENT)\nFROM immunizations\nJOIN careplans ON immunizations.PATIENT = careplans.PATIENT\nWHERE immunizations.DESCRIPTION = 'rotavirus monovalent'\nAND careplans.STOP = '2013-11-23';",
    "1457": "SELECT COUNT(DISTINCT patients.patient) AS women_on_nitroglycerin\nFROM patients\nJOIN medications ON patients.patient = medications.PATIENT\nWHERE patients.gender = 'F' AND medications.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'",
    "1458": "SELECT \n    (CAST(COUNT(DISTINCT p.patient) AS REAL) / CAST(COUNT(DISTINCT p_all.patient) AS REAL)) * 100.0 AS percentage\nFROM \n    patients p\nJOIN \n    allergies a ON p.patient = a.PATIENT\nWHERE \n    p.birthplace = 'Pembroke MA US'\n    AND a.DESCRIPTION = 'Allergy to grass pollen'\nJOIN \n    (SELECT patient FROM patients WHERE birthplace = 'Pembroke MA US') p_all ON p.patient = p_all.patient;",
    "1459": "SELECT AVG(obs.VALUE) AS average_body_weight\nFROM observations obs\nJOIN patients p ON obs.PATIENT = p.patient\nWHERE obs.DESCRIPTION = 'Body Weight' AND obs.UNITS = 'kg' AND p.race = 'Asian'",
    "1460": "SELECT p.ssn\nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nWHERE a.DESCRIPTION = 'Latex allergy'",
    "1461": "SELECT \n    (julianday(STOP) - julianday(START)) AS \"Allergy Duration (Days)\",\n    DESCRIPTION AS \"Kind of Allergy\"\nFROM allergies\nJOIN patients ON allergies.PATIENT = patients.patient\nWHERE patients.first = 'Isadora' AND patients.last = 'Moen'",
    "1462": "SELECT COUNT(*) AS care_plan_count\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.first = 'Elly' AND patients.last = 'Koss'\nAND careplans.START BETWEEN '2009-11-01' AND '2010-10-23';",
    "1463": "SELECT DISTINCT p.first, p.last\nFROM patients p\nJOIN careplans c ON p.patient = c.PATIENT\nWHERE p.marital = 'M'\nAND strftime('%Y', c.START) = '2009'\nAND julianday(c.STOP) - julianday(c.START) > 60",
    "1464": "SELECT immunizations.DATE\nFROM immunizations\nJOIN patients ON immunizations.PATIENT = patients.patient\nWHERE patients.first = 'Elly' AND patients.last = 'Koss'\nAND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free'",
    "1465": "SELECT COUNT(DISTINCT immunizations.PATIENT)\nFROM immunizations\nJOIN patients ON immunizations.PATIENT = patients.patient\nWHERE immunizations.DATE BETWEEN '2010-07-09' AND '2013-10-29'\nAND patients.race = 'black'\nAND immunizations.DESCRIPTION = 'meningococcal MCV4P'",
    "1466": "SELECT immunizations.CODE, immunizations.DATE\nFROM immunizations\nJOIN patients ON immunizations.PATIENT = patients.patient\nWHERE patients.first = 'Jacquelyn' AND patients.last = 'Shanahan'\nAND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free'",
    "1467": "SELECT \n    (julianday(medications.STOP) - julianday(medications.START)) AS DurationInDays\nFROM \n    medications\nJOIN \n    patients ON medications.PATIENT = patients.patient\nWHERE \n    medications.DESCRIPTION = 'Acetaminophen 160 MG'\n    AND medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)'\n    AND patients.first = 'Berry'\n    AND patients.last = 'Keebler';",
    "1468": "SELECT COUNT(DISTINCT PATIENT) \nFROM medications \nWHERE substr(START, 1, 4) = '2010' \nAND substr(STOP, 1, 4) = '2010' \nAND DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]' \nAND REASONDESCRIPTION = 'Cystitis';",
    "1469": "SELECT e.REASONDESCRIPTION\nFROM encounters e\nJOIN patients p ON e.PATIENT = p.patient\nWHERE p.first = 'Lavelle' AND p.last = 'Vandervort' AND e.DATE = '2013-11-20'",
    "1470": "SELECT COUNT(DISTINCT patients.patient) AS German_Outpatient_Count\nFROM patients\nJOIN encounters ON patients.patient = encounters.PATIENT\nWHERE patients.ethnicity = 'german'\nAND encounters.DESCRIPTION = 'Outpatient Encounter'\nAND encounters.DATE BETWEEN '2011-09-01' AND '2012-08-29'",
    "1471": "SELECT p.ssn, p.address\nFROM patients p\nJOIN encounters e ON p.patient = e.PATIENT\nWHERE e.REASONDESCRIPTION = 'Viral sinusitis (disorder)'\nAND e.DATE = '2008-06-13'",
    "1472": "SELECT \n    m.REASONDESCRIPTION AS reason, \n    m.DESCRIPTION AS name_of_the_drug, \n    (julianday(m.STOP) - julianday(m.START)) AS duration_of_medication,\n    CASE \n        WHEN p.deathdate IS NULL THEN 'Alive' \n        ELSE 'Not Alive' \n    END AS patient_status\nFROM \n    medications m\nJOIN \n    encounters e ON m.ENCOUNTER = e.ID\nJOIN \n    patients p ON m.PATIENT = p.patient\nWHERE \n    e.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3';",
    "1473": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nWHERE a.DESCRIPTION = 'Shellfish allergy'\nAND (julianday(p.deathdate) - julianday(p.birthdate)) / 365 < 12;",
    "1474": "SELECT \n    (julianday(medications.STOP) - julianday(medications.START)) AS DurationInDays\nFROM \n    medications\nJOIN \n    patients ON medications.PATIENT = patients.patient\nWHERE \n    medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]'\n    AND patients.first = 'Major' AND patients.last = 'D''Amore';",
    "1475": "SELECT COUNT(DISTINCT medications.DESCRIPTION) AS types_of_medication_prescribed\nFROM medications\nJOIN patients ON medications.PATIENT = patients.patient\nWHERE patients.first = 'Major' AND patients.last = 'D\\'Amore';",
    "1476": "SELECT observations.DESCRIPTION, observations.VALUE, observations.UNITS\nFROM observations\nJOIN patients ON observations.PATIENT = patients.patient\nWHERE patients.first = 'Bella' AND patients.last = 'Rolfson'",
    "1477": "SELECT DISTINCT p.first, p.last\nFROM patients p\nJOIN observations o ON p.patient = o.PATIENT\nWHERE o.DESCRIPTION = 'Calcium' AND o.VALUE < 8.6;",
    "1478": "SELECT conditions.DESCRIPTION, COUNT(conditions.DESCRIPTION) AS condition_count\nFROM conditions\nJOIN observations ON conditions.PATIENT = observations.PATIENT\nWHERE observations.DESCRIPTION = 'Body Mass Index' AND observations.VALUE = (\n    SELECT MIN(observations.VALUE)\n    FROM observations\n    WHERE observations.DESCRIPTION = 'Body Mass Index'\n)\nGROUP BY conditions.DESCRIPTION\nORDER BY condition_count DESC\nLIMIT 5",
    "1479": "SELECT COUNT(DISTINCT i.PATIENT) AS expecting_mothers_with_immunization\nFROM immunizations i\nJOIN encounters e ON i.ENCOUNTER = e.ID\nWHERE e.REASONDESCRIPTION = 'Normal pregnancy';",
    "1480": "SELECT careplans.ID, careplans.DESCRIPTION\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE substr(careplans.START, 1, 4) = '1970'\nAND substr(careplans.STOP, 1, 4) = '1970'\nAND patients.first = 'Elly'\nAND patients.last = 'Koss'\nAND patients.prefix = 'Mrs.'",
    "1481": "SELECT \n    careplans.DESCRIPTION AS care_plan, \n    procedures.DESCRIPTION AS procedure, \n    medications.DESCRIPTION AS medication, \n    (patients.first || ' ' || patients.last) AS full_name\nFROM \n    encounters\nLEFT JOIN \n    careplans ON encounters.ID = careplans.ENCOUNTER\nLEFT JOIN \n    procedures ON encounters.ID = procedures.ENCOUNTER\nLEFT JOIN \n    medications ON encounters.ID = medications.ENCOUNTER\nLEFT JOIN \n    patients ON encounters.PATIENT = patients.patient\nWHERE \n    encounters.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';",
    "1482": "SELECT\n    SUM(CASE WHEN p.gender = 'M' THEN 1 ELSE 0 END) AS male_hypertension,\n    SUM(CASE WHEN p.gender = 'F' THEN 1 ELSE 0 END) AS female_hypertension\nFROM\n    patients p\nJOIN\n    conditions c ON p.patient = c.PATIENT\nWHERE\n    c.DESCRIPTION = 'Hypertension'",
    "1483": "SELECT COUNT(DISTINCT patients.patient) \nFROM patients \nJOIN conditions ON patients.patient = conditions.PATIENT \nWHERE patients.marital = 'S' \nAND patients.gender = 'F' \nAND conditions.DESCRIPTION = 'normal pregnancy';",
    "1484": "SELECT p.DESCRIPTION AS procedure, m.DESCRIPTION AS medicine_prescribed\nFROM encounters e\nJOIN procedures p ON e.ID = p.ENCOUNTER\nJOIN medications m ON e.ID = m.ENCOUNTER\nWHERE e.REASONDESCRIPTION = 'Drug overdose'",
    "1485": "SELECT AVG(bmi.VALUE) AS average_bmi\nFROM observations AS bmi\nINNER JOIN (\n    SELECT DISTINCT PATIENT\n    FROM observations\n    WHERE DESCRIPTION = 'Total Cholesterol' AND VALUE >= 200\n) AS high_cholesterol_patients ON bmi.PATIENT = high_cholesterol_patients.PATIENT\nWHERE bmi.DESCRIPTION = 'Body Mass Index'",
    "1486": "SELECT \n    SUM(CASE WHEN (julianday(o.DATE) - julianday(p.birthdate)) / 365.25 BETWEEN 20 AND 29 THEN o.VALUE ELSE 0 END) / \n    COUNT(DISTINCT CASE WHEN (julianday(o.DATE) - julianday(p.birthdate)) / 365.25 BETWEEN 20 AND 29 THEN o.PATIENT ELSE NULL END) -\n    SUM(CASE WHEN (julianday(o.DATE) - julianday(p.birthdate)) / 365.25 BETWEEN 50 AND 59 THEN o.VALUE ELSE 0 END) / \n    COUNT(DISTINCT CASE WHEN (julianday(o.DATE) - julianday(p.birthdate)) / 365.25 BETWEEN 50 AND 59 THEN o.PATIENT ELSE NULL END) AS difference_in_avg_glucose\nFROM observations o\nJOIN patients p ON o.PATIENT = p.patient\nWHERE (julianday(o.DATE) - julianday(p.birthdate)) / 365.25 BETWEEN 20 AND 29\n   OR (julianday(o.DATE) - julianday(p.birthdate)) / 365.25 BETWEEN 50 AND 59;",
    "1487": "WITH ConditionCounts AS (\n    SELECT DESCRIPTION, COUNT(*) AS TotalCount\n    FROM conditions\n    GROUP BY DESCRIPTION\n    ORDER BY TotalCount DESC\n    LIMIT 1\n), MostCommonConditionPatients AS (\n    SELECT c.PATIENT\n    FROM conditions c\n    JOIN ConditionCounts cc ON c.DESCRIPTION = cc.DESCRIPTION\n), Patients60AndAbove AS (\n    SELECT p.patient\n    FROM patients p\n    WHERE (strftime('%Y', 'now') - strftime('%Y', p.birthdate)) > 60\n), CommonCondition60AndAbove AS (\n    SELECT COUNT(*) AS Count\n    FROM MostCommonConditionPatients mccp\n    JOIN Patients60AndAbove p60 ON mccp.PATIENT = p60.patient\n), TotalPatients60AndAbove AS (\n    SELECT COUNT(*) AS Total\n    FROM Patients60AndAbove\n)\nSELECT (CAST((SELECT Count FROM CommonCondition60AndAbove) AS REAL) / (SELECT Total FROM TotalPatients60AndAbove)) * 100 AS Percentage",
    "1488": "SELECT encounters.REASONDESCRIPTION\nFROM encounters\nJOIN patients ON encounters.PATIENT = patients.patient\nWHERE patients.first = 'Walter' AND patients.last = 'Bahringer' AND substr(encounters.DATE, 1, 7) = '2009-07';",
    "1489": "SELECT \n    (julianday(MIN(e.DATE)) - julianday(p.birthdate)) / 365.25 AS age_at_first_emergency_room_admission_due_to_drug_overdose\nFROM \n    encounters e\nJOIN \n    patients p ON e.PATIENT = p.patient\nWHERE \n    p.first = 'Stacy' AND p.last = 'Morar' AND e.REASONDESCRIPTION = 'Drug overdose'\nORDER BY \n    e.DATE ASC\nLIMIT 1;",
    "1490": "SELECT DESCRIPTION, COUNT(*) AS frequency\nFROM medications\nWHERE REASONDESCRIPTION = 'Child attention deficit disorder'\nGROUP BY DESCRIPTION\nORDER BY frequency DESC\nLIMIT 1;",
    "1491": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN procedures pr ON p.patient = pr.PATIENT\nWHERE pr.DESCRIPTION = 'Transplant of lung (procedure)'",
    "1492": "SELECT AVG(YearlyCount) AS AveragePatientsPerYear\nFROM (\n    SELECT COUNT(DISTINCT p.PATIENT) AS YearlyCount, strftime('%Y', p.DATE) AS Year\n    FROM procedures p\n    WHERE p.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'\n    GROUP BY Year\n)",
    "1493": "SELECT \n    SUBTRACT(JULIANDAY(careplans.STOP), JULIANDAY(careplans.START)) AS time_frame,\n    careplans.DESCRIPTION AS details\nFROM \n    careplans\nJOIN \n    patients ON careplans.PATIENT = patients.patient\nWHERE \n    patients.first = 'Jacquelyn' AND patients.last = 'Shanahan'\nORDER BY \n    careplans.START DESC\nLIMIT 1;",
    "1494": "SELECT \n    julianday(a.STOP) - julianday(a.START) AS allergy_period,\n    a.DESCRIPTION AS triggered_by\nFROM \n    allergies a\nJOIN \n    patients p ON a.PATIENT = p.patient\nWHERE \n    p.first = 'Isadora' AND p.last = 'Moen'",
    "1495": "SELECT \n    (julianday(MIN(encounters.DATE)) - julianday(patients.birthdate)) / 365.25 AS age_at_most_recent_encounter\nFROM \n    patients\nJOIN \n    encounters ON patients.patient = encounters.PATIENT\nWHERE \n    patients.first = 'Laronda' AND patients.last = 'Bernier'",
    "1496": "SELECT conditions.DESCRIPTION\nFROM conditions\nJOIN patients ON conditions.PATIENT = patients.patient\nWHERE patients.first = 'Joye' AND patients.last = 'Homenick' AND substr(conditions.START, 1, 4) = '2017'",
    "1497": "SELECT MAX(DATE) AS Most_Recent_Vaccine_Date\nFROM immunizations\nJOIN patients ON immunizations.PATIENT = patients.patient\nWHERE patients.first = 'Joye' AND patients.last = 'Homenick' AND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';",
    "1498": "SELECT \n    (julianday(medications.STOP) - julianday(medications.START)) AS duration\nFROM \n    medications\nJOIN \n    patients ON medications.PATIENT = patients.patient\nWHERE \n    medications.DESCRIPTION = 'Acetaminophen 160 MG'\n    AND patients.first = 'Elly' AND patients.last = 'Koss';",
    "1499": "SELECT COUNT(DISTINCT p.patient) AS NumberOfPatients, cp.DESCRIPTION AS CarePlanRecommended\nFROM patients p\nJOIN encounters e ON p.patient = e.PATIENT\nJOIN careplans cp ON e.ID = cp.ENCOUNTER\nWHERE e.REASONDESCRIPTION = 'Second degree burn'\nGROUP BY cp.DESCRIPTION",
    "1500": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN p.gender = 'F' THEN e.PATIENT END) AS REAL) / COUNT(DISTINCT e.PATIENT)) * 100 AS percentage_females\nFROM \n    encounters e\nJOIN \n    patients p ON e.PATIENT = p.patient\nWHERE \n    substr(e.DATE, 1, 4) = '2010'\n    AND e.REASONDESCRIPTION = 'Contact dermatitis';",
    "1501": "SELECT \n    COUNT(*) AS TotalInteractions,\n    (SELECT COUNT(*)\n     FROM encounters e\n     JOIN patients p ON e.PATIENT = p.patient\n     WHERE p.first = 'Lorri' AND p.last = 'Simons'\n     AND substr(e.DATE, 1, 4) BETWEEN '2010' AND '2017'\n     AND e.DESCRIPTION = 'Prenatal visit') * 1.0 / COUNT(*) AS PrenatalVisitPercentage\nFROM encounters e\nJOIN patients p ON e.PATIENT = p.patient\nWHERE p.first = 'Lorri' AND p.last = 'Simons'\nAND substr(e.DATE, 1, 4) BETWEEN '2010' AND '2017'",
    "1502": "SELECT m.DESCRIPTION\nFROM medications m\nJOIN patients p ON m.PATIENT = p.patient\nWHERE p.first = 'Joe' AND p.last = 'Homenick'",
    "1503": "SELECT careplans.START\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.maiden = 'Adams'",
    "1504": "SELECT patients.first, patients.last\nFROM patients\nJOIN careplans ON patients.patient = careplans.PATIENT\nWHERE patients.gender = 'M'\nORDER BY careplans.START ASC\nLIMIT 1;",
    "1505": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN substr(c.stop, 1, 4) = '2011' AND p.ethnicity = 'hispanic' THEN c.PATIENT END) AS REAL) / COUNT(DISTINCT c.PATIENT)) * 100 AS percentage\nFROM \n    careplans c\nJOIN \n    patients p ON c.PATIENT = p.patient",
    "1506": "SELECT careplans.REASONDESCRIPTION\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.first = 'Angelo' AND patients.last = 'Buckridge'",
    "1507": "SELECT careplans.DESCRIPTION\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.ethnicity = 'american'",
    "1508": "SELECT encounters.ID\nFROM encounters\nJOIN patients ON encounters.PATIENT = patients.patient\nWHERE patients.birthplace = 'Pembroke MA US'",
    "1509": "SELECT careplans.START\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.deathdate IS NULL",
    "1510": "SELECT COUNT(DISTINCT patients.patient) AS white_patients_with_reason_code_10509002\nFROM patients\nJOIN careplans ON patients.patient = careplans.PATIENT\nWHERE patients.race = 'white' AND careplans.REASONCODE = 10509002;",
    "1511": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN careplans c ON p.patient = c.PATIENT\nWHERE c.DESCRIPTION = 'Diabetic diet'",
    "1512": "SELECT careplans.STOP\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.deathdate IS NOT NULL",
    "1513": "SELECT COUNT(DISTINCT patients.patient) AS ItalianPatientsWithCarePlan\nFROM patients\nJOIN careplans ON patients.patient = careplans.PATIENT\nWHERE patients.ethnicity = 'italian' AND careplans.CODE = 304510005;",
    "1514": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN p.gender = 'F' THEN p.patient END) AS REAL) / COUNT(DISTINCT p.patient)) * 100 AS percentage\nFROM \n    patients p\nJOIN \n    careplans c ON p.patient = c.PATIENT\nWHERE \n    substr(c.START, 1, 4) = '2010'",
    "1515": "SELECT COUNT(DISTINCT patients.patient) \nFROM patients \nJOIN careplans ON patients.patient = careplans.PATIENT \nWHERE patients.race = 'black' AND substr(careplans.STOP, 1, 4) = '2017';",
    "1516": "SELECT COUNT(DISTINCT patients.patient) AS male_patients_with_prediabetes\nFROM patients\nJOIN conditions ON patients.patient = conditions.PATIENT\nWHERE patients.gender = 'M' AND conditions.DESCRIPTION = 'Prediabetes';",
    "1517": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nWHERE a.DESCRIPTION = 'Allergy to nut';",
    "1518": "SELECT c.DESCRIPTION\nFROM conditions c\nJOIN patients p ON c.PATIENT = p.patient\nWHERE p.first = 'Wilmer' AND p.last = 'Koepp'",
    "1519": "SELECT gender, COUNT(gender) AS count\nFROM patients\nWHERE patient IN (\n    SELECT PATIENT\n    FROM conditions\n    WHERE DESCRIPTION = 'Viral sinusitis (disorder)'\n)\nGROUP BY gender\nORDER BY count DESC\nLIMIT 1;",
    "1520": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN medications m ON p.patient = m.PATIENT\nWHERE m.DESCRIPTION = 'Penicillin V Potassium 250 MG'\nAND substr(m.START, 1, 4) >= '1948'",
    "1521": "SELECT COUNT(DISTINCT patients.patient) AS white_patients_born_1935_with_stroke\nFROM patients\nJOIN conditions ON patients.patient = conditions.PATIENT\nWHERE patients.race = 'white'\nAND substr(patients.birthdate, 1, 4) = '1935'\nAND conditions.DESCRIPTION = 'Stroke'",
    "1522": "SELECT DISTINCT c.DESCRIPTION\nFROM conditions c\nJOIN immunizations i ON c.PATIENT = i.PATIENT\nWHERE i.DESCRIPTION = 'IPV'\nAND c.START <= i.DATE\nAND (c.STOP IS NULL OR c.STOP >= i.DATE)",
    "1523": "SELECT DISTINCT conditions.PATIENT\nFROM conditions\nJOIN all_prevalences ON conditions.DESCRIPTION = all_prevalences.ITEM\nWHERE all_prevalences.OCCURRENCES = (\n    SELECT MAX(OCCURRENCES)\n    FROM all_prevalences\n)",
    "1524": "SELECT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN conditions c ON p.patient = c.PATIENT\nWHERE c.DESCRIPTION = 'Cystitis'",
    "1525": "SELECT COUNT(DISTINCT patients.patient) \nFROM patients \nJOIN immunizations ON patients.patient = immunizations.PATIENT \nWHERE patients.gender = 'M' AND immunizations.DESCRIPTION = 'HPV quadrivalent'",
    "1526": "SELECT careplans.START\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.first = 'Walter' AND patients.last = 'Bahringer'",
    "1527": "SELECT careplans.ID, careplans.START, careplans.STOP, careplans.PATIENT, careplans.ENCOUNTER, careplans.CODE, careplans.DESCRIPTION, careplans.REASONCODE, careplans.REASONDESCRIPTION\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.first = 'Major' AND patients.last = 'D''Amore'",
    "1528": "SELECT \n    (CAST(COUNT(DISTINCT p.patient) AS REAL) / (SELECT COUNT(DISTINCT patient) FROM patients WHERE gender = 'M')) * 100 AS percentage\nFROM \n    patients p\nJOIN \n    conditions c ON p.patient = c.PATIENT\nWHERE \n    p.gender = 'M' AND c.DESCRIPTION = 'Viral sinusitis (disorder)';",
    "1529": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN p.gender = 'F' THEN p.patient END) AS REAL) / COUNT(DISTINCT p.patient)) * 100 AS percentage_female\nFROM \n    medications m\nJOIN \n    patients p ON m.PATIENT = p.patient\nWHERE \n    m.DESCRIPTION = 'Penicillin V Potassium 250 MG'",
    "1530": "SELECT AVG(VALUE) AS average_body_height\nFROM observations\nJOIN patients ON observations.PATIENT = patients.patient\nWHERE observations.DESCRIPTION = 'Body Height' AND patients.race = 'white'",
    "1531": "SELECT careplans.DESCRIPTION\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.address = '179 Sydni Roads Taunton MA 02780 US';",
    "1532": "SELECT allergies.DESCRIPTION AS allergen\nFROM allergies\nJOIN patients ON allergies.PATIENT = patients.patient\nWHERE patients.first = 'Dirk' AND patients.last = 'Languish' AND patients.birthplace LIKE '%Dominican%'",
    "1533": "SELECT COUNT(DISTINCT p.patient) \nFROM patients p\nJOIN allergies a ON p.patient = a.PATIENT\nJOIN conditions c ON p.patient = c.PATIENT\nWHERE a.DESCRIPTION = 'Allergy to peanuts' AND c.DESCRIPTION = 'Asthma'",
    "1534": "SELECT \n    p.first, \n    p.last \nFROM \n    patients p \nJOIN \n    conditions c ON p.patient = c.PATIENT \nWHERE \n    c.DESCRIPTION = 'drug overdose' \n    AND (julianday(c.START) - julianday(p.birthdate)) / 365.25 BETWEEN 44 AND 45;",
    "1535": "SELECT p.ssn\nFROM patients p\nJOIN observations o ON p.patient = o.PATIENT\nWHERE o.DESCRIPTION = 'Systolic Blood Pressure'\nORDER BY o.VALUE DESC\nLIMIT 1",
    "1536": "SELECT c.DESCRIPTION \nFROM careplans c\nJOIN conditions con ON c.PATIENT = con.PATIENT AND c.ENCOUNTER = con.ENCOUNTER\nJOIN all_prevalences ap ON con.DESCRIPTION = ap.ITEM\nWHERE ap.\"PREVALENCE PERCENTAGE\" = (SELECT MAX(\"PREVALENCE PERCENTAGE\") FROM all_prevalences)\nLIMIT 1;",
    "1537": "SELECT careplans.DESCRIPTION\nFROM careplans\nJOIN patients ON careplans.PATIENT = patients.patient\nWHERE patients.ssn = '999-15-3685'",
    "1538": "SELECT AVG((julianday('now') - julianday(patients.birthdate)) / 365) AS average_age\nFROM patients\nJOIN conditions ON patients.patient = conditions.PATIENT\nWHERE patients.gender = 'M' AND conditions.DESCRIPTION = 'Hypertension'",
    "1539": "SELECT DISTINCT p.first || ' ' || p.last AS name\nFROM patients p\nJOIN medications m ON p.patient = m.PATIENT\nWHERE m.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)'\nLIMIT 5",
    "1540": "SELECT patients.first, patients.last\nFROM observations\nJOIN patients ON observations.PATIENT = patients.patient\nWHERE observations.DESCRIPTION = 'Body Weight' AND observations.VALUE = 61.97 AND observations.UNITS = 'kg'",
    "1541": "SELECT DISTINCT p.birthdate\nFROM patients p\nJOIN medications m ON p.patient = m.PATIENT\nWHERE p.gender = 'M' AND m.DESCRIPTION = 'Penicillin V Potassium 250 MG'\nLIMIT 5",
    "1542": "SELECT DISTINCT p.first || ' ' || p.last AS full_name\nFROM patients p\nJOIN conditions c ON p.patient = c.PATIENT\nJOIN all_prevalences ap ON c.DESCRIPTION = ap.ITEM\nWHERE p.ethnicity = 'irish'\nAND ap.OCCURRENCES > (\n    SELECT AVG(OCCURRENCES) * 0.96\n    FROM all_prevalences\n)",
    "1543": "SELECT\n    (SELECT COUNT(DISTINCT p.patient)\n     FROM patients p\n     JOIN conditions c ON p.patient = c.PATIENT\n     WHERE p.marital = 'M'\n     AND c.DESCRIPTION = 'Diabetes')\n    -\n    (SELECT COUNT(DISTINCT p.patient)\n     FROM patients p\n     JOIN conditions c ON p.patient = c.PATIENT\n     WHERE p.marital = 'S'\n     AND c.DESCRIPTION = 'Diabetes') AS difference",
    "1544": "SELECT country, COUNT(customerNumber) AS numberOfCustomers\nFROM customers\nGROUP BY country",
    "1545": "SELECT \n    p.productVendor,\n    SUM(od.quantityOrdered) AS totalQuantityOrdered,\n    SUM((p.MSRP - p.buyPrice) * od.quantityOrdered) AS totalEstimatedEarnings\nFROM \n    products p\nJOIN \n    orderdetails od ON p.productCode = od.productCode\nGROUP BY \n    p.productVendor\nORDER BY \n    totalQuantityOrdered DESC,\n    totalEstimatedEarnings DESC\nLIMIT 1;",
    "1546": "SELECT e.firstName, e.lastName\nFROM employees e\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nJOIN payments p ON c.customerNumber = p.customerNumber\nWHERE p.paymentDate BETWEEN '2004-01-01' AND '2004-12-31'\nORDER BY p.amount DESC\nLIMIT 1",
    "1547": "SELECT SUM(od.quantityOrdered * od.priceEach) AS totalPrice\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE c.customerName = 'Mini Gifts Distributors Ltd.'\nAND o.shippedDate BETWEEN '2003-01-01' AND '2003-12-31';",
    "1548": "SELECT COUNT(*) AS NumberOfEmployeesInSydney\nFROM employees\nJOIN offices ON employees.officeCode = offices.officeCode\nWHERE offices.city = 'Sydney'",
    "1549": "SELECT e.employeeNumber\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE o.city = 'New York'\nAND e.reportsTo = (\n    SELECT employeeNumber\n    FROM employees\n    WHERE firstName = 'Anthony' AND lastName = 'Bow' AND employeeNumber = 1143\n)",
    "1550": "SELECT \n    AVG(annual_payments) AS average_annual_payments,\n    MAX(annual_payments) AS highest_annual_payment,\n    MIN(annual_payments) AS lowest_annual_payment\nFROM (\n    SELECT \n        strftime('%Y', paymentDate) AS year,\n        SUM(amount) AS annual_payments\n    FROM payments\n    WHERE paymentDate BETWEEN '2003-01-01' AND '2005-12-31'\n    GROUP BY year\n)",
    "1551": "SELECT c.country, c.addressLine1 || ' ' || IFNULL(c.addressLine2, '') AS entireAddress\nFROM customers c\nJOIN payments p ON c.customerNumber = p.customerNumber\nORDER BY p.amount DESC\nLIMIT 5",
    "1552": "SELECT COUNT(*) AS checks_issued\nFROM payments\nJOIN customers ON payments.customerNumber = customers.customerNumber\nWHERE customers.customerName = 'Euro+ Shopping Channel' AND strftime('%Y', payments.paymentDate) = '2004'",
    "1553": "SELECT p.productName, SUM(od.quantityOrdered) AS totalQuantityOrdered\nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nWHERE p.productLine = 'Classic Cars' AND p.productScale = '1:18'\nGROUP BY p.productCode\nORDER BY totalQuantityOrdered DESC\nLIMIT 1",
    "1554": "WITH CustomerPayments AS (\n    SELECT \n        c.customerNumber, \n        c.customerName, \n        SUM(p.amount) AS totalPaymentAmount\n    FROM customers c\n    JOIN payments p ON c.customerNumber = p.customerNumber\n    WHERE c.creditLimit <= 100000 AND strftime('%Y', p.paymentDate) = '2004'\n    GROUP BY c.customerNumber\n),\nMaxPayment AS (\n    SELECT \n        MAX(totalPaymentAmount) AS maxPayment\n    FROM CustomerPayments\n)\nSELECT \n    COUNT(DISTINCT c.customerNumber) AS NumberOfCustomers,\n    cp.customerName,\n    cp.totalPaymentAmount\nFROM customers c\nLEFT JOIN CustomerPayments cp ON c.customerNumber = cp.customerNumber,\nMaxPayment mp\nWHERE c.creditLimit <= 100000 AND cp.totalPaymentAmount = mp.maxPayment",
    "1555": "SELECT \n    c.customerName, \n    c.contactLastName || ', ' || c.contactFirstName AS contactPerson, \n    SUM(p.amount) AS totalPayments\nFROM customers c\nJOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\nJOIN payments p ON c.customerNumber = p.customerNumber\nWHERE e.officeCode IN (SELECT officeCode FROM offices WHERE city = 'Tokyo')\nAND e.reportsTo = 1056\nGROUP BY c.customerNumber\nORDER BY totalPayments DESC\nLIMIT 1",
    "1556": "WITH ExpectedProfits AS (\n    SELECT \n        p.productCode,\n        p.productName,\n        (p.MSRP - p.buyPrice) AS expectedProfit,\n        MAX(od.quantityOrdered) AS maxQuantityOrdered\n    FROM products p\n    JOIN orderdetails od ON p.productCode = od.productCode\n    GROUP BY p.productCode\n),\nTotalPrice AS (\n    SELECT \n        productCode,\n        productName,\n        expectedProfit,\n        maxQuantityOrdered,\n        (maxQuantityOrdered * (SELECT priceEach FROM orderdetails WHERE productCode = ExpectedProfits.productCode ORDER BY quantityOrdered DESC LIMIT 1)) AS totalPrice\n    FROM ExpectedProfits\n)\nSELECT \n    productCode,\n    productName,\n    expectedProfit,\n    maxQuantityOrdered,\n    totalPrice\nFROM TotalPrice\nORDER BY expectedProfit DESC\nLIMIT 1\nUNION ALL\nSELECT \n    productCode,\n    productName,\n    expectedProfit,\n    maxQuantityOrdered,\n    totalPrice\nFROM TotalPrice\nORDER BY expectedProfit\nLIMIT 1",
    "1557": "SELECT COUNT(DISTINCT o.orderNumber) AS cancelled_orders_over_4000\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nWHERE o.status = 'Cancelled'\nGROUP BY o.orderNumber\nHAVING SUM(od.quantityOrdered * od.priceEach) > 4000;",
    "1558": "SELECT COUNT(DISTINCT orderNumber) \nFROM orderdetails \nJOIN orders ON orderdetails.orderNumber = orders.orderNumber \nWHERE strftime('%Y', orderDate) = '2003' AND quantityOrdered < 30;",
    "1559": "SELECT SUM(quantityOrdered * priceEach) AS totalValueOfCancelledOrders\nFROM orderdetails\nJOIN orders ON orderdetails.orderNumber = orders.orderNumber\nWHERE orders.status = 'Cancelled'",
    "1560": "SELECT SUM(od.quantityOrdered * od.priceEach) AS totalValueOfMotorcycles\nFROM orderdetails od\nJOIN products p ON od.productCode = p.productCode\nJOIN productlines pl ON p.productLine = pl.productLine\nWHERE pl.productLine = 'Motorcycle'",
    "1561": "SELECT COUNT(DISTINCT o.orderNumber) AS planes_orders_count\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE p.productLine = 'Planes'",
    "1562": "SELECT COUNT(DISTINCT o.orderNumber) AS orders_with_high_expected_profits\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE (p.MSRP - p.buyPrice) > 100;",
    "1563": "SELECT AVG(total_price) AS average_total_price\nFROM (\n    SELECT o.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS total_price\n    FROM orders o\n    INNER JOIN orderdetails od ON o.orderNumber = od.orderNumber\n    INNER JOIN products p ON od.productCode = p.productCode\n    WHERE p.productVendor = 'Exoto Designs' AND strftime('%Y', o.orderDate) = '2005'\n    GROUP BY o.orderNumber\n)",
    "1564": "SELECT COUNT(*) AS sales_representatives_count\nFROM employees\nWHERE jobTitle = 'Sales Rep' AND officeCode = '1'",
    "1565": "SELECT DISTINCT c.customerName\nFROM customers c\nJOIN payments p ON c.customerNumber = p.customerNumber\nWHERE p.amount > 50000;",
    "1566": "SELECT SUM(p.amount) AS totalPaymentAmount\nFROM payments p\nJOIN customers c ON p.customerNumber = c.customerNumber\nWHERE c.country = 'USA'",
    "1567": "SELECT SUM(p.amount) AS totalPayments\nFROM payments p\nJOIN customers c ON p.customerNumber = c.customerNumber\nWHERE c.creditLimit = 0 AND strftime('%Y', p.paymentDate) = '2003'",
    "1568": "SELECT c.customerName, c.phone\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE o.status = 'Cancelled'",
    "1569": "SELECT COUNT(DISTINCT c.customerNumber) AS FrenchCustomersWith2CancelledOrders\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE c.country = 'France' AND o.status = 'Cancelled'\nGROUP BY c.customerNumber\nHAVING COUNT(o.orderNumber) = 2",
    "1570": "SELECT AVG(total_price) AS average_total_price\nFROM (\n    SELECT o.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS total_price\n    FROM orders o\n    INNER JOIN customers c ON o.customerNumber = c.customerNumber\n    INNER JOIN orderdetails od ON o.orderNumber = od.orderNumber\n    WHERE o.status = 'Shipped' AND c.country = 'Germany'\n    GROUP BY o.orderNumber\n)",
    "1571": "SELECT firstName || ' ' || lastName AS fullName\nFROM employees\nJOIN offices ON employees.officeCode = offices.officeCode\nWHERE city = 'Tokyo'",
    "1572": "SELECT e.email, (e.firstName || ' ' || e.lastName) AS fullName\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE e.jobTitle = 'Sales Rep' AND o.city = 'Tokyo'",
    "1573": "SELECT e.email \nFROM employees e \nJOIN offices o ON e.officeCode = o.officeCode \nWHERE e.reportsTo = (\n    SELECT employeeNumber \n    FROM employees \n    WHERE lastName = 'Murphy' AND firstName = 'Diane' AND employeeNumber = 1002\n) \nAND o.city = 'San Francisco'",
    "1574": "SELECT e.email, e.employeeNumber AS Code\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE o.country = 'USA' AND o.state = 'MA'",
    "1575": "SELECT e.email\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE e.jobTitle = 'Sales Manager' AND o.city = 'Sydney'",
    "1576": "SELECT e.email, o.country\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nWHERE o.country = 'Australia' AND c.creditLimit < 20000\nGROUP BY e.email, o.country",
    "1577": "SELECT e.email\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nWHERE o.country = 'UK' AND e.jobTitle = 'Sales Rep'\nORDER BY c.creditLimit ASC\nLIMIT 10",
    "1578": "SELECT COUNT(*) AS AustralianCustomersUnder220KCreditLine\nFROM customers\nWHERE country = 'Australia' AND creditLimit < 220000;",
    "1579": "SELECT customerNumber\nFROM payments\nGROUP BY customerNumber\nORDER BY SUM(amount) DESC\nLIMIT 3",
    "1580": "SELECT e.email, e.employeeNumber AS Code_of_employee\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE o.country = 'USA' AND o.state = 'CA'",
    "1581": "SELECT e.firstName || ' ' || e.lastName AS fullName\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE o.city = 'Boston'",
    "1582": "SELECT e.email\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nWHERE o.country = 'UK' AND e.jobTitle = 'Sales Rep'\nORDER BY c.creditLimit DESC\nLIMIT 3",
    "1583": "SELECT COUNT(*) FROM customers WHERE country = 'Norway' AND creditLimit < 220000;",
    "1584": "SELECT firstName || ' ' || lastName AS fullName, email\nFROM employees\nJOIN offices ON employees.officeCode = offices.officeCode\nWHERE city = 'Paris'",
    "1585": "SELECT productCode\nFROM products\nWHERE productLine = 'motorcycle'\nORDER BY quantityInStock DESC\nLIMIT 5",
    "1586": "SELECT COUNT(*) AS GermanCustomersWithZeroCredit\nFROM customers\nWHERE country = 'Germany' AND creditLimit = 0;",
    "1587": "SELECT COUNT(DISTINCT p.customerNumber) AS customers_paid_more_than_three_times\nFROM payments p\nWHERE p.paymentDate BETWEEN '2003-01-01' AND '2004-12-31'\nGROUP BY p.customerNumber\nHAVING COUNT(p.customerNumber) > 3;",
    "1588": "SELECT AVG(od.priceEach - p.buyPrice) AS averageActualProfit\nFROM orderdetails od\nJOIN products p ON od.productCode = p.productCode\nWHERE p.productName = '1937 Lincoln Berline'",
    "1589": "SELECT p.productName, SUM(od.quantityOrdered) AS totalQuantityOrdered\nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nJOIN orders o ON od.orderNumber = o.orderNumber\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE p.productLine = 'motorcycles'\nAND p.productScale = '1:10'\nAND c.country = 'USA'\nGROUP BY p.productName\nORDER BY totalQuantityOrdered DESC\nLIMIT 1",
    "1590": "SELECT payments.checkNumber\nFROM payments\nJOIN customers ON payments.customerNumber = customers.customerNumber\nWHERE customers.customerName = 'Mini Gifts Distributors Ltd.'\nAND payments.paymentDate BETWEEN '2003-08-01' AND '2004-08-30';",
    "1591": "WITH TotalPrice AS (\n    SELECT \n        productCode, \n        SUM(quantityOrdered * priceEach) AS TotalPrice\n    FROM orderdetails\n    JOIN products ON orderdetails.productCode = products.productCode\n    WHERE productLine = 'plane'\n    GROUP BY productCode\n),\nAveragePrice AS (\n    SELECT \n        AVG(priceEach) AS AvgPrice\n    FROM orderdetails\n    JOIN products ON orderdetails.productCode = products.productCode\n    WHERE productLine = 'plane'\n)\nSELECT \n    MAX(TotalPrice) - (SELECT AvgPrice FROM AveragePrice) AS ExceedsAverage\nFROM TotalPrice;",
    "1592": "SELECT SUM(od.quantityOrdered * od.priceEach) AS totalValue\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nJOIN productlines pl ON p.productLine = pl.productLine\nWHERE pl.productLine = 'Vintage Cars'\nAND o.status = 'Shipped'\nAND strftime('%Y', o.orderDate) BETWEEN '2003' AND '2004'",
    "1593": "SELECT \n    e.firstName || ' ' || e.lastName AS salesAgentFullName,\n    m.firstName || ' ' || m.lastName AS supervisorFullName\nFROM payments p\nJOIN customers c ON p.customerNumber = c.customerNumber\nJOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\nLEFT JOIN employees m ON e.reportsTo = m.employeeNumber\nORDER BY p.amount DESC\nLIMIT 1",
    "1594": "SELECT p.productName, MAX(od.quantityOrdered * od.priceEach) AS highestAmount\nFROM orders o\nJOIN customers c ON o.customerNumber = c.customerNumber\nJOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\nJOIN offices of ON e.officeCode = of.officeCode\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE of.city = 'Boston'",
    "1595": "SELECT SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS total_actual_profit\nFROM orders o\nJOIN customers c ON o.customerNumber = c.customerNumber\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE c.country = 'USA' AND o.orderDate BETWEEN '2003-01-06' AND '2005-05-09';",
    "1596": "SELECT o.officeCode, o.city, o.phone, (o.addressLine1 || ' ' || IFNULL(o.addressLine2, '')) AS fullAddress\nFROM offices o\nJOIN employees e ON o.officeCode = e.officeCode\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nJOIN orders ord ON c.customerNumber = ord.customerNumber\nJOIN orderdetails od ON ord.orderNumber = od.orderNumber\nWHERE ord.orderDate BETWEEN '2005-01-01' AND '2005-12-31'\nGROUP BY o.officeCode\nORDER BY SUM(od.quantityOrdered * od.priceEach) DESC\nLIMIT 1",
    "1597": "SELECT phone\nFROM customers\nWHERE contactLastName LIKE 'M%' AND country <> 'Germany'",
    "1598": "SELECT AVG(amount) AS average_payment\nFROM payments\nWHERE paymentDate >= '2004-01-01' AND paymentDate < '2004-07-01';",
    "1599": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM orders \n     WHERE customerNumber = 186 \n     AND status = 'Shipped' \n     AND strftime('%Y', shippedDate) = '2005') / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM orders \n     WHERE status = 'Shipped' \n     AND strftime('%Y', shippedDate) = '2005') \n    AS percentage;",
    "1600": "SELECT COUNT(DISTINCT c.customerNumber) AS customers_with_high_credit_and_cancelled_shipment\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE o.status = 'cancelled' AND c.creditLimit > 115000;",
    "1601": "SELECT MIN(paymentDate) AS earliestPaymentDate\nFROM payments\nWHERE customerNumber = (\n    SELECT customerNumber\n    FROM customers\n    WHERE salesRepEmployeeNumber = (\n        SELECT employeeNumber\n        FROM employees\n        WHERE firstName = 'Barry' AND lastName = 'Jones'\n    )\n    ORDER BY creditLimit ASC\n    LIMIT 1\n)",
    "1602": "SELECT e2.firstName || ' ' || e2.lastName AS ManagerName\nFROM employees e1\nJOIN employees e2 ON e1.reportsTo = e2.employeeNumber\nJOIN customers c ON e1.employeeNumber = c.salesRepEmployeeNumber\nWHERE c.country = 'France'\nLIMIT 1;",
    "1603": "SELECT c.addressLine1 || ' ' || IFNULL(c.addressLine2, '') AS fullAddress\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE o.shippedDate = '2005-04-04' AND o.comments LIKE '%DHL%'",
    "1604": "SELECT o.addressLine1 || ' ' || IFNULL(o.addressLine2, '') AS fullAddress\nFROM offices o\nJOIN employees e ON o.officeCode = e.officeCode\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nWHERE c.city = 'New York'",
    "1605": "SELECT o.addressLine1 || ' ' || IFNULL(o.addressLine2, '') AS fullAddress\nFROM offices o\nJOIN employees e ON o.officeCode = e.officeCode\nGROUP BY o.officeCode\nHAVING COUNT(e.employeeNumber) = 4 AND SUM(CASE WHEN e.jobTitle = 'Sales Representation' THEN 1 ELSE 0 END) = 1;",
    "1606": "SELECT SUM((p.MSRP - p.buyPrice) * od.quantityOrdered) AS totalProfit\nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nWHERE p.productVendor = 'Carousel DieCast Legends'\nAND p.productDescription LIKE '%The perfect holiday or anniversary gift for executives%'",
    "1607": "SELECT c.customerNumber, c.customerName, AVG(p.amount) AS avgPayment\nFROM customers c\nJOIN payments p ON c.customerNumber = p.customerNumber\nWHERE c.city = 'Boston'\nGROUP BY c.customerNumber, c.customerName\nORDER BY avgPayment DESC\nLIMIT 1;",
    "1608": "SELECT \n    SUM(quantityOrdered) AS totalQuantityOrdered, \n    AVG(priceEach) AS averagePrice\nFROM \n    orderdetails \nJOIN \n    products ON orderdetails.productCode = products.productCode\nWHERE \n    productName = '18th Century Vintage Horse Carriage'",
    "1609": "SELECT COUNT(productCode) AS NumberOfProducts\nFROM orderdetails\nWHERE orderNumber = 10252",
    "1610": "SELECT e.firstName, e.lastName\nFROM employees e\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE c.addressLine1 = '25 Maiden Lane' AND c.addressLine2 = 'Floor No. 4'",
    "1611": "SELECT o.city, o.addressLine1, o.addressLine2\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE e.firstName = 'Foon Yue' AND e.lastName = 'Tseng'",
    "1612": "SELECT \n    orderDate, \n    SUM(quantityOrdered * priceEach) AS totalValue\nFROM \n    orders \nJOIN \n    orderdetails ON orders.orderNumber = orderdetails.orderNumber\nWHERE \n    orderDate IN ('2005-04-08', '2005-04-10')\nGROUP BY \n    orderDate\nORDER BY \n    totalValue DESC\nLIMIT 1;",
    "1613": "WITH ExpectedProfits AS (\n    SELECT productCode, (MSRP - buyPrice) AS profit\n    FROM products\n),\nMaxProfit AS (\n    SELECT MAX(profit) AS maxProfit\n    FROM ExpectedProfits\n),\nTopProducts AS (\n    SELECT p.productCode\n    FROM products p\n    JOIN ExpectedProfits ep ON p.productCode = ep.productCode\n    JOIN MaxProfit mp ON ep.profit = mp.maxProfit\n),\nTotalSold AS (\n    SELECT SUM(od.quantityOrdered) AS totalSold\n    FROM orderdetails od\n    JOIN TopProducts tp ON od.productCode = tp.productCode\n)\nSELECT totalSold FROM TotalSold",
    "1614": "SELECT amount \nFROM payments \nJOIN customers ON payments.customerNumber = customers.customerNumber \nWHERE customers.customerName = 'Petit Auto' AND paymentDate = '2004-08-09';",
    "1615": "SELECT c.customerName\nFROM customers c\nJOIN payments p ON c.customerNumber = p.customerNumber\nWHERE p.checkNumber = 'NR157385'",
    "1616": "SELECT c.contactFirstName, c.contactLastName\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE o.orderNumber = 10160",
    "1617": "SELECT o.orderNumber, c.addressLine1, c.addressLine2, c.city, c.state, c.postalCode, c.country\nFROM orders o\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE o.orderNumber = 10383",
    "1618": "SELECT pl.textDescription\nFROM productlines pl\nJOIN products p ON pl.productLine = p.productLine\nWHERE p.productCode = 'S18_2949'",
    "1619": "SELECT e.email\nFROM customers c\nJOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\nWHERE c.customerName = 'Dragon Souveniers, Ltd.'",
    "1620": "SELECT COUNT(*) AS FrenchCustomers\nFROM customers\nWHERE salesRepEmployeeNumber IN (\n    SELECT employeeNumber\n    FROM employees\n    WHERE firstName = 'Gerard' AND lastName = 'Hernandez'\n) AND country = 'France'",
    "1621": "SELECT p.productName\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE o.customerNumber = 114\nORDER BY o.orderDate DESC\nLIMIT 1",
    "1622": "SELECT (MSRP - priceEach) AS discount\nFROM orderdetails\nJOIN products ON orderdetails.productCode = products.productCode\nWHERE orderdetails.orderNumber = 10108 AND orderdetails.productCode = 'S18_3482'",
    "1623": "SELECT e2.firstName || ' ' || e2.lastName AS 'ReportsToFullName'\nFROM employees e1\nJOIN employees e2 ON e1.reportsTo = e2.employeeNumber\nWHERE e1.firstName = 'Steve' AND e1.lastName = 'Patterson'",
    "1624": "SELECT e.email\nFROM employees e\nWHERE e.jobTitle = 'President'",
    "1625": "SELECT e.firstName || ' ' || e.lastName AS salesRepresentativeFullName\nFROM employees e\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nWHERE c.customerName = 'Muscle Machine Inc'",
    "1626": "SELECT e.email\nFROM employees e\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nJOIN employees e2 ON e.reportsTo = e2.employeeNumber\nWHERE c.customerName = 'Muscle Machine Inc'",
    "1627": "SELECT c.customerNumber, c.customerName\nFROM customers c\nJOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\nWHERE e.firstName = 'Steve' AND e.lastName = 'Patterson'",
    "1628": "SELECT COUNT(DISTINCT c.customerNumber) AS NumberOfCustomers\nFROM customers c\nJOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\nJOIN employees m ON e.reportsTo = m.employeeNumber\nWHERE m.firstName = 'William' AND m.lastName = 'Patterson';",
    "1629": "SELECT c.phone\nFROM customers c\nJOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\nWHERE e.firstName = 'Leslie' AND e.lastName = 'Jennings'\nORDER BY c.creditLimit DESC\nLIMIT 3",
    "1630": "SELECT COUNT(*) AS NumberOfSalesReps\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE e.jobTitle = 'Sales Rep' AND o.country = 'USA'",
    "1631": "SELECT o.city, o.addressLine1, o.addressLine2\nFROM offices o\nJOIN employees e ON o.officeCode = e.officeCode\nWHERE e.jobTitle = 'President'",
    "1632": "SELECT o.postalCode\nFROM offices o\nJOIN employees e ON o.officeCode = e.officeCode\nWHERE e.jobTitle = 'VP Sales'",
    "1633": "SELECT SUM(od.quantityOrdered * od.priceEach) AS totalPrice\nFROM orders o\nJOIN customers c ON o.customerNumber = c.customerNumber\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nWHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';",
    "1634": "SELECT p.productName\nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nJOIN orders o ON od.orderNumber = o.orderNumber\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03'",
    "1635": "SELECT p.productName\nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nJOIN orders o ON od.orderNumber = o.orderNumber\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE c.customerName = 'Cruz & Sons Co.'\nORDER BY od.quantityOrdered DESC\nLIMIT 1",
    "1636": "SELECT shippedDate\nFROM orders\nJOIN customers ON orders.customerNumber = customers.customerNumber\nWHERE customers.customerName = 'Cruz & Sons Co.' AND orders.orderDate = '2003-03-03'",
    "1637": "SELECT COUNT(DISTINCT o.customerNumber) AS customerCount\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE p.productName = '1957 Chevy Pickup'\nAND strftime('%Y-%m', o.orderDate) = 'YYYY-MM';",
    "1638": "SELECT productName \nFROM products \nWHERE productLine = 'Classic Cars' \nORDER BY (MSRP - buyPrice) DESC \nLIMIT 1;",
    "1639": "SELECT c.customerName\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE o.status = 'In Process'",
    "1640": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM orders \n     WHERE status = 'Shipped' AND julianday(shippedDate) <= julianday(requiredDate) - 3) \n    / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM orders \n     WHERE status = 'Shipped') \n    * 100 AS percentage_of_orders_shipped_early",
    "1641": "SELECT c.customerNumber, c.customerName\nFROM customers c\nJOIN payments p ON c.customerNumber = p.customerNumber\nWHERE strftime('%Y', p.paymentDate) = '2005'\nORDER BY p.amount DESC\nLIMIT 1",
    "1642": "SELECT \n    p.productName,\n    (p.MSRP - p.buyPrice) AS profitMarginPerPiece,\n    SUM(od.quantityOrdered) AS totalQuantityOrdered\nFROM \n    orderdetails od\nJOIN \n    products p ON od.productCode = p.productCode\nGROUP BY \n    od.productCode\nORDER BY \n    totalQuantityOrdered DESC\nLIMIT 1;",
    "1643": "SELECT c.customerName\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nGROUP BY o.orderNumber\nORDER BY SUM(od.quantityOrdered * od.priceEach) DESC\nLIMIT 1",
    "1644": "SELECT c.customerName\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE o.status = 'Disputed'",
    "1645": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM employees JOIN offices ON employees.officeCode = offices.officeCode WHERE city = 'Paris') / \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM employees) * 100 AS percentage",
    "1646": "SELECT e.firstName, e.lastName, e.officeCode\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE e.jobTitle = 'Sales Manager' AND o.territory = 'EMEA'",
    "1647": "SELECT \n    e.firstName || ' ' || e.lastName AS EmployeeName,\n    m.firstName || ' ' || m.lastName AS ReportsTo\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nLEFT JOIN employees m ON e.reportsTo = m.employeeNumber\nWHERE o.country = 'Japan'",
    "1648": "SELECT c.customerName\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE p.productName = '1939 Chevrolet Deluxe Coupe'\nORDER BY od.priceEach DESC\nLIMIT 1",
    "1649": "SELECT \n    (SELECT SUM(amount) \n     FROM payments \n     JOIN customers ON payments.customerNumber = customers.customerNumber \n     WHERE customerName = 'Atelier graphique' \n     AND strftime('%Y', paymentDate) = '2004') / \n    (SELECT SUM(amount) \n     FROM payments \n     WHERE strftime('%Y', paymentDate) = '2004') \n    AS percentage",
    "1650": "SELECT SUM((od.quantityOrdered * (od.priceEach - p.buyPrice))) AS actualProfit\nFROM orderdetails od\nJOIN products p ON od.productCode = p.productCode\nWHERE od.orderNumber = 10100",
    "1651": "SELECT SUM(amount) AS totalPaid\nFROM payments\nWHERE customerNumber = 103",
    "1652": "SELECT SUM(quantityOrdered * priceEach) AS totalPrice\nFROM orderdetails\nWHERE orderNumber = 10100",
    "1653": "SELECT p.productName\nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nGROUP BY p.productName\nORDER BY MAX(od.priceEach) DESC\nLIMIT 3",
    "1654": "SELECT contactFirstName || ' ' || contactLastName AS FullName\nFROM customers\nWHERE salesRepEmployeeNumber = 1370\nORDER BY creditLimit DESC\nLIMIT 1",
    "1655": "SELECT SUM(quantityOrdered) AS total_ordered\nFROM orderdetails\nJOIN products ON orderdetails.productCode = products.productCode\nWHERE productName = '2003 Harley-Davidson Eagle Drag Bike'",
    "1656": "SELECT o.shippedDate\nFROM orders o\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nORDER BY od.priceEach DESC\nLIMIT 1",
    "1657": "SELECT SUM(od.quantityOrdered) AS total_motorcycles_ordered\nFROM orderdetails od\nJOIN orders o ON od.orderNumber = o.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE p.productLine = 'motorcycles' AND strftime('%Y', o.orderDate) = '2004'",
    "1658": "SELECT orders.orderNumber\nFROM orders\nJOIN customers ON orders.customerNumber = customers.customerNumber\nWHERE customers.creditLimit = 45300;",
    "1659": "SELECT \n    c.customerName,\n    SUM((od.quantityOrdered * (od.priceEach - p.buyPrice))) AS totalProfit\nFROM \n    orders o\nJOIN \n    customers c ON o.customerNumber = c.customerNumber\nJOIN \n    orderdetails od ON o.orderNumber = od.orderNumber\nJOIN \n    products p ON od.productCode = p.productCode\nGROUP BY \n    o.orderNumber\nORDER BY \n    totalProfit DESC\nLIMIT 1;",
    "1660": "SELECT \n    strftime('%Y', paymentDate) AS year, \n    COUNT(*) AS transactions_count\nFROM payments\nWHERE amount < 10000\nGROUP BY year",
    "1661": "SELECT \n    p.productCode, \n    p.productName, \n    SUM(od.quantityOrdered) AS totalQuantitySold\nFROM \n    products p\nJOIN \n    orderdetails od ON p.productCode = od.productCode\nJOIN \n    orders o ON od.orderNumber = o.orderNumber\nWHERE \n    strftime('%Y', o.orderDate) = '2003'\nGROUP BY \n    p.productCode\nORDER BY \n    totalQuantitySold DESC\nLIMIT 3",
    "1662": "SELECT e.firstName, e.lastName, SUM(od.quantityOrdered) AS quantitySold\nFROM employees e\nJOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber\nJOIN orders o ON c.customerNumber = o.customerNumber\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nWHERE p.productName = '1969 Harley Davidson Ultimate Chopper' AND strftime('%Y', o.orderDate) = '2003'\nGROUP BY e.employeeNumber",
    "1663": "SELECT e.firstName || ' ' || e.lastName AS fullName\nFROM employees e\nJOIN offices o ON e.officeCode = o.officeCode\nWHERE o.city = 'NYC' AND e.jobTitle = 'Sales Rep'",
    "1664": "SELECT c.customerNumber, c.country\nFROM customers c\nJOIN payments p ON c.customerNumber = p.customerNumber\nWHERE p.checkNumber = 'GG31455'",
    "1665": "SELECT SUM(quantityOrdered) AS total_ordered\nFROM orderdetails\nJOIN products ON orderdetails.productCode = products.productCode\nWHERE productName = '2001 Ferrari Enzo'",
    "1666": "SELECT p.productName\nFROM products p\nJOIN orderdetails od ON p.productCode = od.productCode\nGROUP BY p.productCode\nORDER BY SUM(od.quantityOrdered) ASC\nLIMIT 5",
    "1667": "SELECT c.customerName\nFROM customers c\nJOIN orders o ON c.customerNumber = o.customerNumber\nWHERE o.status = 'Disputed'",
    "1668": "SELECT COUNT(DISTINCT country) \nFROM customers \nJOIN orders ON customers.customerNumber = orders.customerNumber \nWHERE orders.status = 'In Process' AND customers.country = 'USA'",
    "1669": "SELECT SUM(od.quantityOrdered * od.priceEach) AS total_price\nFROM orders o\nJOIN customers c ON o.customerNumber = c.customerNumber\nJOIN orderdetails od ON o.orderNumber = od.orderNumber\nJOIN products p ON od.productCode = p.productCode\nJOIN productlines pl ON p.productLine = pl.productLine\nWHERE o.status = 'Shipped'\nAND c.customerName = 'Land of Toys Inc'\nAND pl.productLine = 'Classic Cars';",
    "1670": "SELECT COUNT(*) FROM generalinfo WHERE review < 3;",
    "1671": "SELECT food_type\nFROM generalinfo\nWHERE review = 4",
    "1672": "SELECT COUNT(*) \nFROM generalinfo \nWHERE city = 'Richmond' AND food_type = 'mediterranean';",
    "1673": "SELECT city\nFROM geographic\nWHERE county = 'Sonoma';",
    "1674": "SELECT DISTINCT county\nFROM geographic\nWHERE region != 'Bay Area' OR region IS NULL;",
    "1675": "SELECT city\nFROM geographic\nWHERE region = 'Northern California';",
    "1676": "SELECT location.id_restaurant\nFROM location\nJOIN geographic ON location.city = geographic.city\nWHERE location.street_name = '11th Street' AND geographic.city = 'Oakland';",
    "1677": "SELECT COUNT(*) AS NumberOfRestaurants\nFROM location\nWHERE street_num = 871;",
    "1678": "SELECT street_num\nFROM location\nWHERE street_name = '9th avenue' AND city = 'san francisco'",
    "1679": "SELECT gi.food_type\nFROM generalinfo gi\nJOIN location l ON gi.id_restaurant = l.id_restaurant\nWHERE l.street_name = 'adeline st' AND l.city = 'Berkeley'",
    "1680": "SELECT DISTINCT g.region\nFROM geographic g\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM generalinfo gi\n    WHERE gi.city = g.city\n    AND gi.food_type = 'African'\n)",
    "1681": "SELECT DISTINCT g.county\nFROM geographic g\nJOIN generalinfo gi ON g.city = gi.city\nWHERE gi.label = 'a & w root beer'",
    "1682": "SELECT l.street_name, l.street_num\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nWHERE g.label = 'adelitas taqueria'",
    "1683": "SELECT generalinfo.food_type\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nJOIN geographic ON location.city = geographic.city\nWHERE location.street_num = 3140 \nAND LOWER(location.street_name) = 'alpine rd' \nAND LOWER(geographic.county) = 'san mateo county'",
    "1684": "SELECT location.street_name\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE generalinfo.food_type = 'seafood' AND location.city = 'San Francisco'",
    "1685": "SELECT DISTINCT g.county\nFROM geographic g\nLEFT JOIN generalinfo gi ON g.city = gi.city\nWHERE gi.label <> 'bakers square restaurant & pie shop' OR gi.label IS NULL",
    "1686": "SELECT COUNT(DISTINCT county) \nFROM geographic \nJOIN location ON geographic.city = location.city \nWHERE street_name = 'Appian Way'",
    "1687": "SELECT generalinfo.id_restaurant, generalinfo.label, generalinfo.review AS rating\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_name = 'atlantic ave'",
    "1688": "SELECT generalinfo.id_restaurant\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE geographic.county = 'Contra Costa'",
    "1689": "SELECT gi.label\nFROM generalinfo gi\nJOIN geographic g ON gi.city = g.city\nWHERE g.county = 'Yolo'",
    "1690": "SELECT gi.id_restaurant, gi.label\nFROM generalinfo gi\nJOIN location l ON gi.id_restaurant = l.id_restaurant\nWHERE l.street_name = 'Drive' AND l.city = 'San Rafael' AND gi.food_type <> 'American'",
    "1691": "SELECT l.street_name\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nWHERE g.review = 1.7 AND l.city = 'San Francisco'",
    "1692": "SELECT g.label\nFROM generalinfo g\nJOIN location l ON g.id_restaurant = l.id_restaurant\nWHERE l.street_name = 'avenida de las pulgas' AND l.city = 'Menlo Park'\nORDER BY g.review ASC\nLIMIT 1",
    "1693": "SELECT l.street_name\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nJOIN geographic geo ON l.city = geo.city\nWHERE g.label = 'Good Heavens' AND geo.county = 'Tuolumne'",
    "1694": "SELECT street_num\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE lower(generalinfo.label) = 'aux delices vietnamese restaurant'",
    "1695": "SELECT generalinfo.id_restaurant\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE geographic.county = 'Marin'",
    "1696": "SELECT DISTINCT g.region\nFROM geographic g\nLEFT JOIN generalinfo gi ON g.city = gi.city\nWHERE gi.food_type != 'pizza' OR gi.food_type IS NULL",
    "1697": "SELECT AVG(generalinfo.review) AS average_rating\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE geographic.county = 'Santa Cruz County'",
    "1698": "SELECT \n    (COUNT(DISTINCT CASE WHEN g.food_type = 'mexican' THEN g.id_restaurant END) * 100.0 / COUNT(DISTINCT g.id_restaurant)) AS percentage_mexican_food\nFROM \n    generalinfo g\nJOIN \n    geographic geo ON g.city = geo.city\nWHERE \n    geo.county = 'Monterey County';",
    "1699": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM location\n     JOIN geographic ON location.city = geographic.city\n     WHERE street_name = '11th st' AND county = 'Alameda County') /\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM location\n     JOIN geographic ON location.city = geographic.city\n     WHERE county = 'Alameda County') * 100 AS percentage",
    "1700": "SELECT label\nFROM generalinfo\nWHERE food_type = 'european'",
    "1701": "SELECT city\nFROM geographic\nWHERE region = 'northern california'",
    "1702": "SELECT label\nFROM generalinfo\nWHERE food_type = '24 hour diner'",
    "1703": "SELECT city\nFROM geographic\nWHERE county IS NULL AND region IS NULL\nLIMIT 5;",
    "1704": "SELECT county, region FROM geographic WHERE city = 'Davis City';",
    "1705": "SELECT street_name FROM location WHERE city = 'Clayton City';",
    "1706": "SELECT g.label\nFROM generalinfo g\nWHERE g.city = 'San Francisco' AND g.review = (\n    SELECT MAX(review)\n    FROM generalinfo\n    WHERE city = 'San Francisco'\n)",
    "1707": "SELECT COUNT(*) \nFROM generalinfo \nWHERE food_type = 'American' \nAND city = 'Carmel' \nAND review = (SELECT MIN(review) FROM generalinfo WHERE city = 'Carmel')",
    "1708": "SELECT \n    (COUNT(CASE WHEN food_type = 'american food' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_american_food\nFROM \n    generalinfo\nWHERE \n    city = 'dublin'",
    "1709": "SELECT location.street_num, location.street_name, location.city\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE generalinfo.label = 'Albert's Caf\u00e9'",
    "1710": "SELECT generalinfo.label\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_name = '19th St' AND location.city = 'Oakland'",
    "1711": "SELECT gi.food_type\nFROM generalinfo gi\nJOIN location l ON gi.id_restaurant = l.id_restaurant\nWHERE l.street_name = 'E 25th Ave'",
    "1712": "SELECT generalinfo.label AS restaurant_name\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE geographic.region = 'unknown'\nLIMIT 3;",
    "1713": "SELECT g.label\nFROM generalinfo g\nJOIN location l ON g.id_restaurant = l.id_restaurant\nWHERE g.food_type = 'chinese'\nAND l.street_num = 104\nAND l.street_name = 'San Tomas Aquino Road'\nAND l.city = 'Campbell'",
    "1714": "SELECT COUNT(*) AS Thai_Restaurants_In_San_Pablo_Ave_Albany\nFROM generalinfo AS T1\nJOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant\nWHERE T1.food_type = 'thai'\nAND T2.street_name = 'san pablo ave'\nAND T2.city = 'albany';",
    "1715": "SELECT g.county, g.region\nFROM geographic g\nJOIN generalinfo gi ON g.city = gi.city\nWHERE gi.label = 'plearn-thai cuisine'",
    "1716": "SELECT g.label\nFROM generalinfo g\nJOIN geographic geo ON g.city = geo.city\nWHERE geo.county = 'El Dorado' AND geo.region = 'Lake Tahoe'",
    "1717": "SELECT g.county, g.region\nFROM geographic g\nJOIN location l ON g.city = l.city\nWHERE l.street_name = 'E. El Camino Real'",
    "1718": "SELECT g.label\nFROM generalinfo g\nJOIN location l ON g.id_restaurant = l.id_restaurant\nWHERE g.food_type = 'Indian restaurant'\nAND l.street_name = 'shattuck ave'\nAND l.city = 'berkeley'\nORDER BY g.review ASC\nLIMIT 1",
    "1719": "SELECT \n    (CAST(SUM(CASE WHEN review > 4 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    generalinfo\nJOIN \n    geographic ON generalinfo.city = geographic.city\nWHERE \n    geographic.region = 'Bay Area';",
    "1720": "SELECT city \nFROM geographic \nWHERE county = 'San Mateo';",
    "1721": "SELECT COUNT(*) FROM generalinfo WHERE review > 4;",
    "1722": "SELECT street_name\nFROM location\nGROUP BY street_name\nORDER BY COUNT(id_restaurant) DESC\nLIMIT 1",
    "1723": "SELECT g.label\nFROM generalinfo g\nWHERE g.food_type = 'chicken'\nORDER BY g.review DESC\nLIMIT 1",
    "1724": "SELECT county FROM geographic WHERE city = 'el cerrito';",
    "1725": "SELECT COUNT(*) FROM location WHERE street_name = 'Irving';",
    "1726": "SELECT generalinfo.label\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE geographic.county = 'Marin'",
    "1727": "SELECT location.street_num, location.street_name\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE generalinfo.label = 'peking duck restaurant'",
    "1728": "SELECT l.street_name\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nJOIN geographic geo ON l.city = geo.city\nWHERE geo.county = 'Alameda'\nGROUP BY l.street_name\nHAVING COUNT(l.id_restaurant) > 10",
    "1729": "SELECT DISTINCT geographic.region\nFROM geographic\nJOIN generalinfo ON geographic.city = generalinfo.city\nWHERE generalinfo.food_type = 'greek'",
    "1730": "SELECT l.street_num, l.street_name, l.city\nFROM location l\nJOIN geographic g ON l.city = g.city\nWHERE g.region = 'unknown'",
    "1731": "SELECT generalinfo.review\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_num = 8440 AND location.street_name = 'Murray Ave'",
    "1732": "SELECT food_type\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE county = 'Monterey'\nGROUP BY food_type\nORDER BY COUNT(food_type) DESC\nLIMIT 1",
    "1733": "SELECT l.street_name\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nWHERE g.food_type = 'burgers' AND l.city = 'San Francisco'\nGROUP BY l.street_name\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "1734": "SELECT g.region\nFROM location l\nJOIN geographic g ON l.city = g.city\nWHERE l.street_num = 1149 AND LOWER(l.street_name) = 'el camino real';",
    "1735": "SELECT g.county\nFROM geographic g\nJOIN generalinfo gi ON g.city = gi.city\nWHERE gi.label = 'sankee'",
    "1736": "SELECT COUNT(DISTINCT l.street_name || ' ' || l.street_num) AS num_streets_with_restaurants\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nJOIN geographic geo ON l.city = geo.city\nWHERE geo.region = 'Northern California';",
    "1737": "SELECT generalinfo.label\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_name = 'Park St'",
    "1738": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM generalinfo \n     JOIN geographic ON generalinfo.city = geographic.city \n     WHERE geographic.region = 'bay area') / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM generalinfo) * 100 AS percentage_bay_area",
    "1739": "SELECT g.county, AVG(i.review) AS avg_review\nFROM generalinfo i\nJOIN geographic g ON i.city = g.city\nWHERE i.food_type = 'chinese'\nGROUP BY g.county\nORDER BY avg_review DESC",
    "1740": "SELECT street_name FROM location WHERE city = 'San Francisco';",
    "1741": "SELECT generalinfo.id_restaurant\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE geographic.city = 'Danville'",
    "1742": "SELECT COUNT(city) \nFROM geographic \nWHERE region = 'bay area';",
    "1743": "SELECT COUNT(DISTINCT generalinfo.label)\nFROM generalinfo\nJOIN geographic ON generalinfo.city = geographic.city\nWHERE geographic.county = 'unknown'",
    "1744": "SELECT location.street_name\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE generalinfo.food_type = 'American'",
    "1745": "SELECT gi.label\nFROM generalinfo gi\nJOIN geographic g ON gi.city = g.city\nWHERE g.county = 'Santa Cruz county'",
    "1746": "SELECT generalinfo.review\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_num = 430 AND location.street_name = 'Broadway'",
    "1747": "SELECT location.street_num, location.street_name\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nORDER BY generalinfo.review DESC\nLIMIT 1",
    "1748": "SELECT g.city, COUNT(gi.id_restaurant) AS Italian_Restaurant_Count\nFROM generalinfo gi\nJOIN geographic g ON gi.city = g.city\nWHERE gi.food_type = 'Italian'\nGROUP BY g.city\nORDER BY Italian_Restaurant_Count DESC\nLIMIT 1;",
    "1749": "SELECT \n    (SELECT COUNT(*) \n     FROM generalinfo \n     JOIN geographic ON generalinfo.city = geographic.city \n     WHERE geographic.region = 'Napa Valley') * 100.0 / \n    (SELECT COUNT(*) FROM generalinfo) AS percentage_napa_valley",
    "1750": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area';",
    "1751": "SELECT city FROM geographic WHERE county = 'unknown'",
    "1752": "SELECT city\nFROM geographic\nWHERE region = 'bay area' AND county = 'santa clara county';",
    "1753": "SELECT id_restaurant FROM location WHERE city = 'sunnyvale'",
    "1754": "SELECT COUNT(*) \nFROM location \nWHERE street_num < 1000 AND street_name = 'Railroad St.'",
    "1755": "SELECT label\nFROM generalinfo\nWHERE food_type = '24 hour diner' AND city = 'san francisco'",
    "1756": "SELECT generalinfo.review\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_name = 'ocean st' AND location.city = 'santa cruz'",
    "1757": "SELECT location.street_num\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE generalinfo.food_type = 'bar'\nAND generalinfo.city = 'oakland'\nAND generalinfo.review = 2.7",
    "1758": "SELECT COUNT(*) AS total_bakeries\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE generalinfo.food_type = 'bakery'\nAND location.street_name = 'university ave.'\nAND location.city = 'palo alto'",
    "1759": "SELECT location.street_num\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE generalinfo.label = 'Tulocay Winery' AND generalinfo.food_type = 'winery'",
    "1760": "SELECT generalinfo.review, generalinfo.label\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_name = 'mission blvd' AND location.city = 'hayward'",
    "1761": "SELECT COUNT(*) \nFROM generalinfo \nJOIN location ON generalinfo.id_restaurant = location.id_restaurant \nWHERE generalinfo.food_type = 'indian' \nAND location.street_name = 'castro st' \nAND location.city = 'mountainview' \nAND generalinfo.label LIKE '%cookhouse%'",
    "1762": "SELECT COUNT(*) \nFROM generalinfo \nJOIN location ON generalinfo.id_restaurant = location.id_restaurant \nWHERE generalinfo.review = 2 AND location.street_num < 500;",
    "1763": "SELECT COUNT(*) \nFROM generalinfo \nJOIN location ON generalinfo.id_restaurant = location.id_restaurant \nWHERE generalinfo.food_type = 'asian' \nAND location.street_name = 'n milpitas blvd' \nAND location.city = 'milpitas' \nAND generalinfo.id_restaurant > 385",
    "1764": "SELECT generalinfo.id_restaurant, generalinfo.label\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_name = 'Ocean Avenue' AND location.city = 'San Francisco'",
    "1765": "SELECT location.city, location.street_num, location.street_name\nFROM location\nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant\nWHERE lower(generalinfo.label) = 'sanuki restaurant'",
    "1766": "SELECT generalinfo.food_type\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE location.street_num = 22779 AND location.street_name = '6th St' AND location.city = 'Hayward City'",
    "1767": "SELECT COUNT(*) AS American_Restaurants_In_Front_SF\nFROM generalinfo\nJOIN location ON generalinfo.id_restaurant = location.id_restaurant\nWHERE generalinfo.food_type = 'american'\nAND location.street_name = 'front'\nAND location.city = 'san francisco'",
    "1768": "SELECT g.id_restaurant\nFROM generalinfo g\nJOIN location l ON g.id_restaurant = l.id_restaurant\nWHERE g.food_type = 'american'\nAND l.street_num > 2000\nAND g.review > (\n    SELECT AVG(review) * 0.7\n    FROM generalinfo\n    WHERE food_type = 'american'\n)",
    "1769": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM generalinfo \n     JOIN location ON generalinfo.id_restaurant = location.id_restaurant \n     WHERE food_type = 'afghani' \n     AND street_num BETWEEN 1000 AND 2000) / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM location \n     WHERE street_num BETWEEN 1000 AND 2000) * 100 AS percentage_afghani",
    "1770": "SELECT label\nFROM generalinfo\nWHERE city = 'san francisco' AND food_type = 'asian'\nORDER BY review DESC\nLIMIT 1",
    "1771": "SELECT COUNT(city) FROM geographic WHERE region = 'monterey'",
    "1772": "SELECT COUNT(*) \nFROM generalinfo \nWHERE food_type = 'deli' \nAND city = 'Belmont' \nAND review > 2;",
    "1773": "SELECT county\nFROM geographic\nWHERE region = 'northern california'\nGROUP BY county\nORDER BY COUNT(city) DESC\nLIMIT 1",
    "1774": "SELECT COUNT(*) AS number_of_restaurants_in_concord\nFROM generalinfo\nWHERE city = 'concord'",
    "1775": "SELECT DISTINCT g.region\nFROM geographic g\nJOIN generalinfo gi ON g.city = gi.city\nORDER BY gi.review DESC\nLIMIT 4",
    "1776": "SELECT COUNT(*) \nFROM generalinfo \nJOIN location ON generalinfo.id_restaurant = location.id_restaurant \nWHERE generalinfo.food_type = 'chinese' \nAND location.street_name = '1st st' \nAND location.city = 'livermore';",
    "1777": "SELECT COUNT(*) AS Indian_Restaurants_In_LA\nFROM generalinfo AS gi\nJOIN geographic AS g ON gi.city = g.city\nWHERE gi.food_type = 'indian' AND g.region = 'los angeles area'",
    "1778": "SELECT food_type\nFROM generalinfo\nWHERE city IN (SELECT city FROM geographic WHERE region = 'bay area')\nGROUP BY food_type\nORDER BY COUNT(food_type) DESC\nLIMIT 1",
    "1779": "SELECT COUNT(*) \nFROM generalinfo \nJOIN location ON generalinfo.id_restaurant = location.id_restaurant \nWHERE location.street_name = 'Broadway' \nAND location.city = 'Oakland' \nAND generalinfo.review <= 3;",
    "1780": "SELECT g.region\nFROM geographic g\nJOIN generalinfo gi ON g.city = gi.city\nWHERE gi.label = 'baskin robbins'\nGROUP BY g.region\nORDER BY COUNT(gi.city) DESC\nLIMIT 1",
    "1781": "SELECT DISTINCT l.street_name\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nWHERE g.food_type = 'pizza' AND l.city = 'san jose'",
    "1782": "SELECT COUNT(DISTINCT g.food_type) AS NumberOfRestaurantTypes\nFROM generalinfo g\nJOIN geographic geo ON g.city = geo.city\nWHERE geo.region IN ('Yosemite', 'Mono Lake');",
    "1783": "SELECT l.street_num, l.street_name, l.city\nFROM location l\nJOIN generalinfo g ON l.id_restaurant = g.id_restaurant\nORDER BY g.review DESC\nLIMIT 1",
    "1784": "SELECT g.county\nFROM geographic g\nJOIN generalinfo gi ON g.city = gi.city\nGROUP BY g.county\nHAVING gi.label = (\n    SELECT label\n    FROM generalinfo\n    GROUP BY label\n    ORDER BY COUNT(city) DESC\n    LIMIT 1\n)",
    "1785": "SELECT g.region\nFROM geographic g\nJOIN generalinfo gi ON g.city = gi.city\nGROUP BY g.region\nORDER BY COUNT(gi.id_restaurant) DESC\nLIMIT 1",
    "1786": "SELECT \n    l.street_num || ' ' || l.street_name || ', ' || l.city AS full_address\nFROM \n    location l\nJOIN \n    generalinfo g ON l.id_restaurant = g.id_restaurant\nWHERE \n    g.food_type = 'american' AND g.review >= 4",
    "1787": "SELECT COUNT(*) FROM Player WHERE SUBSTR(DOB, 1, 4) > '1985'",
    "1788": "SELECT COUNT(*) AS Matches_in_May_2008\nFROM Match\nWHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 6, 2) = '05'",
    "1789": "SELECT COUNT(*) AS Man_of_the_Match_Awards\nFROM Match\nWHERE Man_of_the_Match = 41;",
    "1790": "SELECT Match_Id FROM Match WHERE SUBSTR(Match_Date, 1, 4) = '2008'",
    "1791": "SELECT COUNT(*) AS Australian_Players\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Country.Country_Name = 'Australia'",
    "1792": "SELECT Country.Country_Name \nFROM Player \nJOIN Country ON Player.Country_Name = Country.Country_Id \nORDER BY Player.DOB \nLIMIT 1;",
    "1793": "SELECT Bowling_Style.Bowling_skill\nFROM Player\nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id\nWHERE Player.Player_Name = 'SC Ganguly'",
    "1794": "SELECT COUNT(*) \nFROM Player \nJOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id \nWHERE Batting_Style.Batting_hand = 'Right-hand bat' \nAND SUBSTR(Player.DOB, 1, 4) > '1985'",
    "1795": "SELECT Player.Player_Name\nFROM Player\nJOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Batting_Style.Batting_hand = 'Right-hand bat' AND Country.Country_Name = 'Australia'",
    "1796": "SELECT Bowling_Style.Bowling_skill\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id\nWHERE Country.Country_Name = 'Australia'",
    "1797": "SELECT MIN(DOB) \nFROM Player \nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id \nWHERE Bowling_skill.Bowling_skill = 'Legbreak';",
    "1798": "SELECT Bowling_skill, COUNT(Bowling_skill) AS count\nFROM Player\nGROUP BY Bowling_skill\nORDER BY count DESC\nLIMIT 1",
    "1799": "SELECT Player.Player_Name \nFROM Player \nJOIN Match ON Player.Player_Id = Match.Man_of_the_Match \nWHERE Match.Match_Date = '2008-04-18'",
    "1800": "SELECT COUNT(*) AS times_played_as_captain\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nWHERE Player.Player_Name = 'SC Ganguly' AND Rolee.Role_Desc = 'Captain'",
    "1801": "SELECT Rolee.Role_Desc \nFROM Player_Match \nJOIN Player ON Player_Match.Player_Id = Player.Player_Id \nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id \nJOIN Match ON Player_Match.Match_Id = Match.Match_Id \nWHERE Player.Player_Name = 'SC Ganguly' AND Match.Match_Date = '2008-04-18'",
    "1802": "SELECT MAX(Match.Win_Margin) AS Highest_Winning_Margin\nFROM Match\nJOIN Player_Match ON Match.Match_Id = Player_Match.Match_Id\nJOIN Player ON Player.Player_Id = Player_Match.Player_Id\nWHERE Player.Player_Name = 'SC Ganguly' AND Match.Win_Margin IS NOT NULL",
    "1803": "SELECT AVG(Win_Margin) AS Avg_Winning_Margin\nFROM Match\nWHERE Match_Id IN (\n    SELECT Match_Id\n    FROM Player_Match\n    WHERE Player_Id = (\n        SELECT Player_Id\n        FROM Player\n        WHERE Player_Name = 'SC Ganguly'\n    )\n)\nAND Win_Margin IS NOT NULL",
    "1804": "SELECT \n    ROUND(\n        (CAST(SUM(CASE WHEN Batting_Style.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(Player.Player_Id)) * 100, \n        2\n    ) AS Percentage_Right_Hand_Batters\nFROM \n    Player\nJOIN \n    Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nWHERE \n    SUBSTR(Player.DOB, 1, 4) > '1985'",
    "1805": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1",
    "1806": "SELECT COUNT(*) AS Toss_Winner_Count\nFROM Match\nJOIN Team ON Match.Toss_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Sunrisers Hyderabad'",
    "1807": "SELECT Player.Player_Name \nFROM Ball_by_Ball \nJOIN Player ON Ball_by_Ball.Striker = Player.Player_Id \nWHERE Ball_by_Ball.Match_Id = 419169 \nAND Ball_by_Ball.Over_Id = 3 \nAND Ball_by_Ball.Ball_Id = 2 \nAND Ball_by_Ball.Innings_No = 2",
    "1808": "SELECT Venue_Name \nFROM Venue \nJOIN Match ON Venue.Venue_Id = Match.Venue_Id \nWHERE Win_Margin = 138;",
    "1809": "SELECT Player_Name \nFROM Player \nJOIN Match ON Player.Player_Id = Match.Man_of_the_Match \nWHERE Match_Date = '2008-05-12';",
    "1810": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nWHERE Player_Match.Match_Id = 419117 AND Rolee.Role_Desc = 'CaptainKeeper'",
    "1811": "SELECT Player.Player_Name\nFROM Player\nJOIN Season ON Player.Player_Id = Season.Man_of_the_Series\nWHERE Season.Season_Year = 2013",
    "1812": "SELECT Player.DOB\nFROM Player\nJOIN Season ON Player.Player_Id = Season.Orange_Cap\nWHERE Season.Season_Year = 2014",
    "1813": "SELECT Country.Country_Name\nFROM Player\nJOIN Season ON Player.Player_Id = Season.Purple_Cap\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Season.Season_Id = 7",
    "1814": "SELECT Country.Country_Name \nFROM Country \nJOIN City ON Country.Country_Id = City.Country_id \nWHERE City.City_Name = 'Ranchi'",
    "1815": "SELECT COUNT(*) FROM City\nJOIN Country ON City.Country_id = Country.Country_Id\nWHERE Country.Country_Name = 'India'",
    "1816": "SELECT City_Name \nFROM City \nWHERE City_Id = (\n    SELECT City_Id \n    FROM Venue \n    GROUP BY City_Id \n    ORDER BY COUNT(Venue_Id) DESC \n    LIMIT 1\n)",
    "1817": "SELECT Batting_Style.Batting_hand\nFROM Player\nJOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nWHERE Player.Player_Name = 'MK Pandey'",
    "1818": "SELECT \n    (SELECT COUNT(*) FROM City JOIN Country ON City.Country_id = Country.Country_Id WHERE Country.Country_Name = 'India') \n    / \n    (SELECT COUNT(*) FROM City JOIN Country ON City.Country_id = Country.Country_Id WHERE Country.Country_Name = 'South Africa') \n    AS Ratio",
    "1819": "SELECT \n    (SELECT COUNT(*) FROM Match JOIN Venue ON Match.Venue_Id = Venue.Venue_Id WHERE Venue.Venue_Name = 'M Chinnaswamy Stadium') * 1.0 /\n    (SELECT COUNT(*) FROM Match JOIN Venue ON Match.Venue_Id = Venue.Venue_Id WHERE Venue.Venue_Name = 'Maharashtra Cricket Association Stadium') AS Times_More",
    "1820": "SELECT Player_Name FROM Player ORDER BY DOB ASC LIMIT 1",
    "1821": "SELECT COUNT(*) AS Matches_Played_In_May_2008\nFROM Match\nWHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 6, 2) = '05'",
    "1822": "SELECT COUNT(*) AS Players_Born_In_90s\nFROM Player\nWHERE DOB >= '1990-01-01' AND DOB <= '1999-12-31'",
    "1823": "SELECT COUNT(*) AS Matches_Played\nFROM Match\nWHERE (Team_1 = 10 OR Team_2 = 10) AND strftime('%Y', Match_Date) = '2012'",
    "1824": "SELECT Orange_Cap AS Player_Id\nFROM Season\nWHERE Season_Year IN (\n    SELECT S1.Season_Year + 1\n    FROM Season S1\n    JOIN Season S2 ON S1.Orange_Cap = S2.Orange_Cap\n    WHERE S1.Season_Year + 1 = S2.Season_Year\n)\nGROUP BY Orange_Cap\nHAVING COUNT(Orange_Cap) > 1",
    "1825": "SELECT COUNT(*) AS Matches_Played\nFROM Match\nWHERE Season_Id = 7;",
    "1826": "SELECT COUNT(Umpire_Id) AS South_African_Umpires\nFROM Umpire\nJOIN Country ON Umpire.Umpire_Country = Country.Country_Id\nWHERE Country.Country_Name = 'South Africa';",
    "1827": "SELECT Player.Player_Name\nFROM Player\nJOIN Match ON Player.Player_Id = Match.Man_of_the_Match\nGROUP BY Player.Player_Id\nORDER BY COUNT(Match.Man_of_the_Match) DESC\nLIMIT 1",
    "1828": "SELECT Country.Country_Name\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nGROUP BY Player.Country_Name\nORDER BY COUNT(Player.Country_Name) DESC\nLIMIT 1",
    "1829": "SELECT COUNT(*) AS Orange_Cap_Awards\nFROM Season\nJOIN Player ON Season.Orange_Cap = Player.Player_Id\nWHERE Player.Player_Name = 'CH Gayle'",
    "1830": "SELECT Season_Id, COUNT(Match_Id) AS Total_Matches\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Venue.Venue_Name = 'M Chinnaswamy Stadium'\nGROUP BY Season_Id\nORDER BY Total_Matches DESC\nLIMIT 1",
    "1831": "SELECT Team.Team_Name\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Match.Season_Id = 1\nGROUP BY Match.Match_Winner\nORDER BY COUNT(Match.Match_Winner) DESC\nLIMIT 1",
    "1832": "SELECT Venue.Venue_Name, COUNT(Match.Venue_Id) AS Matches_Played\nFROM Match\nJOIN Team ON Match.Team_1 = Team.Team_Id\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Team.Team_Name = 'Kolkata Knight Riders'\nGROUP BY Match.Venue_Id\nORDER BY Matches_Played DESC\nLIMIT 1;",
    "1833": "SELECT Team_Name \nFROM Team \nWHERE Team_Id = (\n    SELECT Team_1 AS Team_Id \n    FROM (\n        SELECT Team_1, COUNT(*) AS Losses \n        FROM Match \n        WHERE Team_1 <> Match_Winner \n        GROUP BY Team_1\n        UNION ALL \n        SELECT Team_2, COUNT(*) \n        FROM Match \n        WHERE Team_2 <> Match_Winner \n        GROUP BY Team_2\n    ) \n    GROUP BY Team_Id \n    ORDER BY SUM(Losses) DESC \n    LIMIT 1\n)",
    "1834": "SELECT Player.Player_Name\nFROM Player\nJOIN Match ON Player.Player_Id = Match.Man_of_the_Match\nORDER BY Match.Match_Date ASC\nLIMIT 1",
    "1835": "SELECT MIN(Match_Date) AS First_Match_Date\nFROM Match\nJOIN Team ON Match.Team_1 = Team.Team_Id OR Match.Team_2 = Team.Team_Id\nWHERE Team.Team_Name = 'Chennai Super Kings'",
    "1836": "SELECT COUNT(*) \nFROM Player \nJOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id \nJOIN Country ON Player.Country_Name = Country.Country_Id \nWHERE Batting_Style.Batting_hand = 'Left-hand bat' AND Country.Country_Name = 'India';",
    "1837": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nJOIN Team ON Player_Match.Team_Id = Team.Team_Id\nWHERE Rolee.Role_Desc = 'Captain' AND Team.Team_Name = 'Deccan Chargers'\nGROUP BY Player.Player_Name\nORDER BY COUNT(Player_Match.Role_Id) DESC\nLIMIT 1",
    "1838": "SELECT \n    (COUNT(CASE WHEN Batting_Style.Batting_hand = 'Right-hand bat' THEN 1 END) * 100.0 / COUNT(Player.Player_Id)) AS Right_Handed_Batting_Percentage\nFROM \n    Player\nJOIN \n    Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id",
    "1839": "SELECT Player_Name FROM Player WHERE DOB = '1981-07-07'",
    "1840": "SELECT COUNT(DISTINCT Match_Id) AS Matches_Played\nFROM Player_Match\nWHERE Player_Id = 2;",
    "1841": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Team_1 = Team.Team_Id \nORDER BY Match.Win_Margin DESC \nLIMIT 1",
    "1842": "SELECT Country.Country_Name \nFROM Country \nJOIN City ON Country.Country_Id = City.Country_id \nJOIN Venue ON City.City_Id = Venue.City_Id \nWHERE Venue.Venue_Name = 'St George''s Park'",
    "1843": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Team ON Player_Match.Team_Id = Team.Team_Id\nWHERE Team.Team_Name = 'Mumbai Indians' AND Player_Match.Match_Id = 335990",
    "1844": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Match_Winner = Team.Team_Id \nWHERE Match.Win_Margin = 7 AND Match.Match_Date = '2009-05-07'",
    "1845": "SELECT COUNT(*) AS Superover_Matches\nFROM Match\nJOIN Outcome ON Match.Outcome_type = Outcome.Outcome_Id\nWHERE Outcome.Outcome_Type = 'Superover'",
    "1846": "SELECT City.City_Name\nFROM City\nJOIN Country ON City.Country_id = Country.Country_Id\nWHERE Country.Country_Name = 'U.A.E'",
    "1847": "SELECT COUNT(*) AS Total_Won_Matches\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Pune Warriors'",
    "1848": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Match_Winner = Team.Team_Id \nWHERE Match.Match_Id = 829768 AND Match.Match_Date LIKE '2015%';",
    "1849": "SELECT Rolee.Role_Desc \nFROM Player_Match \nJOIN Player ON Player_Match.Player_Id = Player.Player_Id \nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id \nWHERE Player.Player_Name = 'K Goel' AND Player_Match.Match_Id = 335992",
    "1850": "SELECT COUNT(*) AS Cities_In_South_Africa\nFROM City\nJOIN Country ON City.Country_id = Country.Country_Id\nWHERE Country.Country_Name = 'South Africa';",
    "1851": "SELECT COUNT(*) AS Matches_At_Newlands\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Venue.Venue_Name = 'Newlands';",
    "1852": "SELECT Win_Margin\nFROM Match\nJOIN Team AS T1 ON Match.Team_1 = T1.Team_Id\nJOIN Team AS T2 ON Match.Team_2 = T2.Team_Id\nWHERE T1.Team_Name = 'Mumbai Indians' AND T2.Team_Name = 'Royal Challengers Bangalore'\nAND Match.Match_Date = '2008-05-28'\nUNION\nSELECT Win_Margin\nFROM Match\nJOIN Team AS T1 ON Match.Team_1 = T1.Team_Id\nJOIN Team AS T2 ON Match.Team_2 = T2.Team_Id\nWHERE T1.Team_Name = 'Royal Challengers Bangalore' AND T2.Team_Name = 'Mumbai Indians'\nAND Match.Match_Date = '2008-05-28'",
    "1853": "WITH AvgWinMargin2011 AS (\n    SELECT AVG(Win_Margin) AS AvgMargin\n    FROM Match\n    WHERE Match_Date LIKE '2011%'\n),\nLowMarginMatches AS (\n    SELECT Match_Id, Team_1, Team_2\n    FROM Match, AvgWinMargin2011\n    WHERE Match_Date LIKE '2011%'\n    AND Win_Margin < (AvgMargin * 0.3)\n    LIMIT 2\n)\nSELECT T1.Team_Name AS Team1_Name, T2.Team_Name AS Team2_Name\nFROM LowMarginMatches LMM\nJOIN Team T1 ON LMM.Team_1 = T1.Team_Id\nJOIN Team T2 ON LMM.Team_2 = T2.Team_Id;",
    "1854": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN r.Role_Desc = 'Captain' THEN pm.Player_Id END) AS FLOAT) / COUNT(DISTINCT pm.Player_Id)) * 100 AS Captain_Percentage\nFROM \n    Player p\nJOIN \n    Player_Match pm ON p.Player_Id = pm.Player_Id\nJOIN \n    Rolee r ON pm.Role_Id = r.Role_Id\nWHERE \n    p.DOB LIKE '1977%'",
    "1855": "SELECT MAX(Over_Id) AS Total_Overs\nFROM Ball_by_Ball\nWHERE Match_Id = 335996 AND Innings_No = 1;",
    "1856": "SELECT Over_Id, Ball_Id, Innings_No\nFROM Batsman_Scored\nWHERE Match_Id = 336004 AND Runs_Scored = (\n  SELECT MAX(Runs_Scored)\n  FROM Batsman_Scored\n  WHERE Match_Id = 336004\n)",
    "1857": "SELECT DISTINCT Match_Id\nFROM Ball_by_Ball\nWHERE Over_Id = 20\nLIMIT 5;",
    "1858": "SELECT COUNT(Player_Out) AS Players_Out\nFROM Wicket_Taken\nWHERE Match_Id = 548335 AND Innings_No = 1",
    "1859": "SELECT Player_Name FROM Player WHERE DOB LIKE '1971-%'",
    "1860": "SELECT Match_Id FROM Match WHERE Match_Date = '2015-04-18'",
    "1861": "SELECT Wicket_Taken.Match_Id\nFROM Wicket_Taken\nJOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id\nWHERE Out_Type.Out_Name = 'hit wicket'",
    "1862": "SELECT COUNT(*) AS Stumped_Second_Innings\nFROM Wicket_Taken\nJOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id\nWHERE Out_Type.Out_Name = 'stumped' AND Wicket_Taken.Innings_No = 2",
    "1863": "SELECT COUNT(*) AS Yuvraj_MOM_Awards\nFROM Match\nJOIN Player ON Match.Man_of_the_Match = Player.Player_Id\nWHERE Player.Player_Name = 'Yuvraj Singh'",
    "1864": "SELECT Player.Player_Name, Player.DOB\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Player.DOB LIKE '1977%' AND Country.Country_Name = 'England'",
    "1865": "SELECT Player.Player_Name\nFROM Player\nJOIN Season ON Player.Player_Id = Season.Man_of_the_Series\nWHERE Season.Season_Year = 2010",
    "1866": "SELECT \n    (COUNT(CASE WHEN Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings') THEN 1 END) * 100.0 / COUNT(*)) AS Win_Rate\nFROM \n    Match\nWHERE \n    Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings')\n    OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings')",
    "1867": "SELECT p.Player_Name, c.Country_Name\nFROM Player p\nJOIN Country c ON p.Country_Name = c.Country_Id\nJOIN Player_Match pm ON p.Player_Id = pm.Player_Id\nJOIN Match m ON pm.Match_Id = m.Match_Id\nJOIN Team t ON pm.Team_Id = t.Team_Id\nWHERE t.Team_Name = 'Gujarat Lions' AND m.Match_Date = '2016-04-11'",
    "1868": "SELECT Player_Name, DOB \nFROM Player \nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id \nWHERE Bowling_skill.Bowling_skill = 'Left-arm fast'",
    "1869": "SELECT Country.Country_Name\nFROM Umpire\nJOIN Country ON Umpire.Umpire_Country = Country.Country_Id\nWHERE Umpire.Umpire_Name = 'BR Doctrove'",
    "1870": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nJOIN Match ON Player_Match.Match_Id = Match.Match_Id\nWHERE Rolee.Role_Desc = 'Captain'\nAND Match.Match_Date = '2008-06-01'\nAND Match.Match_Winner = Player_Match.Team_Id",
    "1871": "SELECT Team.Team_Name, COUNT(Player_Match.Match_Id) AS Matches_Played\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Team ON Player_Match.Team_Id = Team.Team_Id\nWHERE Player.Player_Name = 'CK Kapugedera'\nGROUP BY Team.Team_Name",
    "1872": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN v.Venue_Name = 'Wankhede Stadium' THEN m.Match_Id END) AS FLOAT) / COUNT(DISTINCT m.Match_Id)) * 100 AS percent\nFROM \n    Match m\nJOIN \n    Venue v ON m.Venue_Id = v.Venue_Id\nJOIN \n    City c ON v.City_Id = c.City_Id\nWHERE \n    c.City_Name = 'Mumbai'",
    "1873": "SELECT \n    (CAST(COUNT(CASE WHEN o.Out_Name = 'bowled' THEN 1 END) AS FLOAT) / COUNT(w.Player_Out)) * 100 AS percentage_out_by_bowl\nFROM \n    Wicket_Taken w\nJOIN \n    Out_Type o ON w.Kind_Out = o.Out_Id\nWHERE \n    w.Match_Id = 392187",
    "1874": "SELECT \n    ROUND((CAST(SUM(CASE WHEN Toss_Decision.Toss_Name = 'field' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(Match.Toss_Decide)) * 100, 2) AS Percent_Decide_To_Bowl_First\nFROM \n    Match\nJOIN \n    Toss_Decision ON Match.Toss_Decide = Toss_Decision.Toss_Id\nWHERE \n    Match.Match_Date BETWEEN '2010-01-01' AND '2016-12-31';",
    "1875": "SELECT DISTINCT Toss_Winner\nFROM Match\nWHERE Toss_Decide = 2",
    "1876": "SELECT Match.Match_Id\nFROM Match\nJOIN Player ON Match.Man_of_the_Match = Player.Player_Id\nWHERE Player.Player_Name = 'BB McCullum'",
    "1877": "SELECT Player.DOB\nFROM Player\nJOIN Match ON Player.Player_Id = Match.Man_of_the_Match",
    "1878": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Toss_Winner = Team.Team_Id \nWHERE Match.Match_Id BETWEEN 336010 AND 336020",
    "1879": "SELECT COUNT(Match_Winner) AS Matches_Won\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Mumbai Indians'",
    "1880": "SELECT DISTINCT T.Team_Name\nFROM Team T\nJOIN Match M ON T.Team_Id = M.Team_2\nWHERE M.Team_1 IN (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors');",
    "1881": "SELECT Team_Name \nFROM Team \nJOIN Match ON Team.Team_Id = Match.Match_Winner \nWHERE Match.Match_Id = 336000",
    "1882": "SELECT Match_Id FROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Venue.Venue_Name = 'Brabourne Stadium'",
    "1883": "SELECT DISTINCT Venue.Venue_Name\nFROM Venue\nJOIN Match ON Venue.Venue_Id = Match.Venue_Id\nWHERE Match.Season_Id = 2",
    "1884": "SELECT City_Name \nFROM City \nJOIN Venue ON City.City_Id = Venue.City_Id \nWHERE Venue_Name = 'M Chinnaswamy Stadium'",
    "1885": "SELECT Venue.Venue_Name \nFROM Venue \nJOIN City ON Venue.City_Id = City.City_Id \nWHERE City.City_Name = 'Mumbai';",
    "1886": "SELECT DISTINCT Match_Winner\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Venue.Venue_Name LIKE 'St George%'",
    "1887": "SELECT \n    CASE \n        WHEN COUNT(*) > 0 THEN 'Yes'\n        ELSE 'No'\n    END AS Is_SuperSport_Park_in_Centurion\nFROM Venue\nJOIN City ON Venue.City_Id = City.City_Id\nWHERE Venue.Venue_Name = 'SuperSport Park' AND City.City_Name = 'Centurion';",
    "1888": "SELECT COUNT(Match_Winner) AS Total_Winning_Matches\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Deccan Chargers'",
    "1889": "SELECT COUNT(*) AS Total_Venues_In_Pune\nFROM Venue\nJOIN City ON Venue.City_Id = City.City_Id\nWHERE City.City_Name = 'Pune'",
    "1890": "SELECT Non_Striker, COUNT(*) AS balls_faced\nFROM Ball_by_Ball\nWHERE Match_Id = 501219\nGROUP BY Non_Striker\nORDER BY balls_faced DESC\nLIMIT 1;",
    "1891": "SELECT \n    ROUND(SUM(Runs_Scored) * 1.0 / COUNT(DISTINCT Match_Id, Over_Id), 2) AS Average_Runs_First_Half\nFROM \n    Batsman_Scored\nWHERE \n    Over_Id > 1 AND Over_Id < 25 AND Innings_No = 1",
    "1892": "SELECT Match_Id, AVG(Extra_Runs) AS Avg_Extra_Runs\nFROM Extra_Runs\nWHERE Innings_No = 2\nGROUP BY Match_Id",
    "1893": "SELECT \n    (CAST(SUM(CASE WHEN Win_Margin > 100 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(Match_Id)) * 100 AS percentage\nFROM \n    Match",
    "1894": "SELECT Player_Name\nFROM Player\nWHERE DOB BETWEEN '1970-01-01' AND '1990-12-31'\nORDER BY DOB ASC",
    "1895": "SELECT COUNT(*) AS Wickets_Without_Fielders\nFROM Wicket_Taken\nWHERE Over_Id = 3 AND (Fielders IS NULL OR Fielders = '')",
    "1896": "SELECT Umpire_Country, COUNT(Umpire_Id) AS Umpire_Count\nFROM Umpire\nGROUP BY Umpire_Country\nORDER BY Umpire_Count DESC\nLIMIT 1",
    "1897": "SELECT \n    (SELECT CAST(COUNT(DISTINCT pm.Player_Id) AS FLOAT)\n     FROM Player_Match pm\n     JOIN Rolee r ON pm.Role_Id = r.Role_Id\n     WHERE r.Role_Desc = 'CaptainKeeper') / \n    (SELECT CAST(COUNT(DISTINCT Player_Id) AS FLOAT) FROM Player) \n    AS percentage",
    "1898": "SELECT COUNT(DISTINCT Player_Out) AS Hit_Wicket_Out_Count\nFROM Wicket_Taken\nJOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id\nWHERE Out_Type.Out_Name = 'hit wicket'",
    "1899": "SELECT \n    Country.Country_Name,\n    COUNT(Player.Player_Id) AS Right_Hand_Batters,\n    COUNT(DISTINCT Player.Country_Name) AS Total_Players,\n    (CAST(COUNT(Player.Player_Id) AS FLOAT) / COUNT(DISTINCT Player.Country_Name)) AS Average_Right_Hand_Batters\nFROM \n    Player\nJOIN \n    Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nJOIN \n    Country ON Player.Country_Name = Country.Country_Id\nWHERE \n    Batting_Style.Batting_hand = 'Right-hand bat'\nGROUP BY \n    Player.Country_Name",
    "1900": "SELECT \n    (CAST(SUM(CASE WHEN Bowling_Style.Bowling_skill = 'Legbreak' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(Player.Player_Id)) * 100 AS percentage\nFROM \n    Player\nJOIN \n    Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id",
    "1901": "SELECT COUNT(DISTINCT Match_Winner) AS Teams_Won_By_Wicket\nFROM Match\nJOIN Win_By ON Match.Win_Type = Win_By.Win_Id\nWHERE Win_By.Win_Type = 'wickets' AND Win_Margin < 50",
    "1902": "SELECT COUNT(DISTINCT Venue_Id) \nFROM Match \nWHERE Toss_Winner = Team_2 \nAND Match_Winner = Team_1;",
    "1903": "SELECT Player.Player_Name, Country.Country_Name \nFROM Season \nJOIN Player ON Season.Man_of_the_Series = Player.Player_Id \nJOIN Country ON Player.Country_Name = Country.Country_Id \nWHERE Season.Season_Year = 2012;",
    "1904": "SELECT Venue_Name \nFROM Venue \nJOIN (SELECT Venue_Id, COUNT(Venue_Id) AS Venue_Count \n      FROM Match \n      GROUP BY Venue_Id \n      ORDER BY Venue_Count DESC \n      LIMIT 1) AS Most_Matches \nON Venue.Venue_Id = Most_Matches.Venue_Id",
    "1905": "SELECT City.City_Name\nFROM City\nJOIN Venue ON City.City_Id = Venue.City_Id\nJOIN Match ON Venue.Venue_Id = Match.Venue_Id\nJOIN Win_By ON Match.Win_Type = Win_By.Win_Id\nWHERE Win_By.Win_Type = 'NoResult'\nGROUP BY City.City_Name\nORDER BY COUNT(Match.Match_Id) ASC\nLIMIT 1;",
    "1906": "SELECT Player_Name \nFROM Player \nWHERE Player_Id IN (\n    SELECT Man_of_the_Series \n    FROM Season \n    GROUP BY Man_of_the_Series \n    HAVING COUNT(Man_of_the_Series) > 1\n)",
    "1907": "WITH PlayerCatches AS (\n    SELECT \n        p.Player_Id, \n        p.Player_Name, \n        c.Country_Name, \n        COUNT(wt.Player_Out) AS Catches\n    FROM \n        Wicket_Taken wt\n    JOIN \n        Out_Type ot ON wt.Kind_Out = ot.Out_Id\n    JOIN \n        Player p ON wt.Player_Out = p.Player_Id\n    JOIN \n        Country c ON p.Country_Name = c.Country_Id\n    WHERE \n        ot.Out_Name = 'caught'\n    GROUP BY \n        p.Player_Id\n),\nAverageCatches AS (\n    SELECT \n        AVG(Catches) AS AvgCatches\n    FROM \n        PlayerCatches\n)\n\nSELECT \n    pc.Player_Name, \n    pc.Country_Name, \n    pc.Catches\nFROM \n    PlayerCatches pc, \n    AverageCatches ac\nWHERE \n    pc.Catches > ac.AvgCatches\nORDER BY \n    pc.Catches ASC",
    "1908": "SELECT \n    (CAST(SUM(CASE WHEN m.Toss_Winner = m.Team_1 AND td.Toss_Name = 'field' THEN 1 ELSE 0 END) AS FLOAT) / \n    COUNT(*)) * 100 AS percentage\nFROM \n    Match m\nJOIN \n    Win_By wb ON m.Win_Type = wb.Win_Id\nJOIN \n    Toss_Decision td ON m.Toss_Decide = td.Toss_Id\nWHERE \n    wb.Win_Type = 'runs' AND m.Match_Winner = m.Team_1",
    "1909": "SELECT \n    AVG(CASE WHEN Kind_Out = 4 THEN Player_Out END) AS Avg_LBW,\n    AVG(CASE WHEN Kind_Out = 3 THEN Player_Out END) AS Avg_Runout,\n    (AVG(CASE WHEN Kind_Out = 4 THEN Player_Out END) - AVG(CASE WHEN Kind_Out = 3 THEN Player_Out END)) AS Difference\nFROM Wicket_Taken",
    "1910": "SELECT DISTINCT Over_Id\nFROM Ball_by_Ball\nWHERE Striker = 7",
    "1911": "SELECT COUNT(*) FROM Match WHERE Toss_Winner = Team_1 AND Toss_Decide = 2;",
    "1912": "SELECT COUNT(*) AS Games_Played_In_March_2010\nFROM Match\nWHERE Match_Date LIKE '2010-03%'",
    "1913": "SELECT COUNT(*) AS Older_Players\nFROM Player\nWHERE DOB < '1990-06-29';",
    "1914": "SELECT COUNT(*) AS Watson_Man_of_the_Match_Count\nFROM Match\nJOIN Player ON Match.Man_of_the_Match = Player.Player_Id\nWHERE Player.Player_Name = 'SR Watson';",
    "1915": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Team ON Player_Match.Team_Id = Team.Team_Id\nWHERE Team.Team_Name = 'Delhi Daredevils'\nGROUP BY Player.Player_Name\nORDER BY COUNT(DISTINCT Player_Match.Role_Id) DESC, Player.Player_Name\nLIMIT 1",
    "1916": "SELECT Player_Name \nFROM Player \nWHERE Player_Id = (\n    SELECT Man_of_the_Series \n    FROM Season \n    GROUP BY Man_of_the_Series \n    ORDER BY COUNT(Man_of_the_Series) DESC \n    LIMIT 1\n)",
    "1917": "SELECT Season_Year\nFROM Season\nJOIN Player ON Season.Orange_Cap = Player.Player_Id\nWHERE Player.Player_Name = 'SP Narine'",
    "1918": "SELECT DISTINCT T.Team_Name\nFROM Team T\nJOIN Player_Match PM ON T.Team_Id = PM.Team_Id\nJOIN Season S ON (S.Purple_Cap = PM.Player_Id OR S.Orange_Cap = PM.Player_Id)\nWHERE EXISTS (\n    SELECT 1\n    FROM Season S2\n    WHERE S2.Season_Id = S.Season_Id\n    AND ((S2.Purple_Cap = PM.Player_Id AND S2.Orange_Cap != PM.Player_Id)\n    OR (S2.Orange_Cap = PM.Player_Id AND S2.Purple_Cap != PM.Player_Id))\n    AND EXISTS (\n        SELECT 1\n        FROM Player_Match PM2\n        WHERE PM2.Team_Id = PM.Team_Id\n        AND PM2.Match_Id IN (SELECT Match_Id FROM Match WHERE Season_Id = S2.Season_Id)\n        AND ((S2.Purple_Cap = PM2.Player_Id AND S2.Purple_Cap != PM.Player_Id)\n        OR (S2.Orange_Cap = PM2.Player_Id AND S2.Orange_Cap != PM.Player_Id))\n    )\n)",
    "1919": "SELECT Player.Player_Name\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Country.Country_Name = 'Zimbabwea'",
    "1920": "SELECT COUNT(*) FROM Player\nJOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nWHERE Batting_Style.Batting_hand = 'Left-hand bat'",
    "1921": "SELECT COUNT(*) AS Games_Not_Won_By_Runs\nFROM Match\nJOIN Win_By ON Match.Win_Type = Win_By.Win_Id\nWHERE Win_By.Win_Type != 'runs';",
    "1922": "SELECT Umpire_Name \nFROM Umpire \nJOIN Country ON Umpire.Umpire_Country = Country.Country_Id \nWHERE Country.Country_Name = 'New Zealand'",
    "1923": "SELECT Country.Country_Name\nFROM Player\nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Bowling_Style.Bowling_skill = 'Slow left-arm chinaman'\nGROUP BY Country.Country_Name\nORDER BY COUNT(Player.Player_Id) DESC\nLIMIT 1",
    "1924": "SELECT Venue.Venue_Name, COUNT(Match.Match_Id) AS Matches_Played\nFROM Match\nJOIN Team ON Match.Team_1 = Team.Team_Id OR Match.Team_2 = Team.Team_Id\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Team.Team_Name = 'Kochi Tuskers Kerala'\nGROUP BY Venue.Venue_Name\nORDER BY Matches_Played DESC\nLIMIT 1;",
    "1925": "SELECT COUNT(DISTINCT b.Match_Id)\nFROM Batsman_Scored b\nJOIN Match m ON b.Match_Id = m.Match_Id\nJOIN Team t ON (m.Team_1 = t.Team_Id OR m.Team_2 = t.Team_Id)\nJOIN Ball_by_Ball bb ON b.Match_Id = bb.Match_Id AND b.Over_Id = bb.Over_Id AND b.Ball_Id = bb.Ball_Id AND b.Innings_No = bb.Innings_No\nWHERE t.Team_Name = 'Delhi Daredevils' AND b.Runs_Scored = 0 AND ((bb.Team_Batting = 1 AND m.Team_1 = t.Team_Id) OR (bb.Team_Batting = 2 AND m.Team_2 = t.Team_Id))",
    "1926": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Dr DY Patil Sports Academy'))) AS percentage\nFROM \n    Match\nWHERE \n    Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Dr DY Patil Sports Academy')\n    AND Win_Margin < 10",
    "1927": "SELECT AVG(Extra_Runs) AS average_noballs\nFROM Extra_Runs\nJOIN Extra_Type ON Extra_Runs.Extra_Type_Id = Extra_Type.Extra_Id\nWHERE Extra_Type.Extra_Name = 'noballs'",
    "1928": "SELECT Player_Id\nFROM Player\nORDER BY Bowling_skill DESC\nLIMIT 5",
    "1929": "SELECT COUNT(*) \nFROM Player \nWHERE DOB < '1975-10-16' AND Bowling_skill < 3;",
    "1930": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1;",
    "1931": "SELECT Man_of_the_Series\nFROM Season\nWHERE Season_Year > 2011 AND Season_Year < 2015",
    "1932": "SELECT SUM(Runs_Scored) AS Total_Runs\nFROM Batsman_Scored\nWHERE Match_Id = 335988 AND Innings_No = 2",
    "1933": "SELECT COUNT(*) AS times_scored_more_than_3\nFROM Batsman_Scored\nWHERE Match_Id BETWEEN 335989 AND 337000\nAND Over_Id = 1\nAND Ball_Id = 1\nAND Innings_No = 1\nAND Runs_Scored > 3",
    "1934": "SELECT M1.Match_Id AS Match_Id_1, M1.Match_Date AS Match_Date_1, \n       M2.Match_Id AS Match_Id_2, M2.Match_Date AS Match_Date_2, \n       M3.Match_Id AS Match_Id_3, M3.Match_Date AS Match_Date_3\nFROM Match M1\nJOIN Match M2 ON DATE(M2.Match_Date) = DATE(M1.Match_Date, '+1 day')\nJOIN Match M3 ON DATE(M3.Match_Date) = DATE(M2.Match_Date, '+1 day')\nJOIN Venue V1 ON M1.Venue_Id = V1.Venue_Id AND V1.Venue_Name = 'Kingsmead'\nJOIN Venue V2 ON M2.Venue_Id = V2.Venue_Id AND V2.Venue_Name = 'Kingsmead'\nJOIN Venue V3 ON M3.Venue_Id = V3.Venue_Id AND V3.Venue_Name = 'Kingsmead'",
    "1935": "SELECT COUNT(*) AS Matches_Held\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Venue.Venue_Name = 'MA Chidambaram Stadium'\nAND Match.Match_Date BETWEEN '2009-05-09' AND '2011-08-08'",
    "1936": "SELECT Venue.Venue_Name, City.City_Name\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nJOIN City ON Venue.City_Id = City.City_Id\nWHERE Match.Match_Id = 336005",
    "1937": "SELECT Team.Team_Name, Toss_Decision.Toss_Name\nFROM Match\nJOIN Team ON Match.Toss_Winner = Team.Team_Id\nJOIN Toss_Decision ON Match.Toss_Decide = Toss_Decision.Toss_Id\nWHERE Match.Match_Id = 336011",
    "1938": "SELECT COUNT(*) \nFROM Player \nJOIN Country ON Player.Country_Name = Country.Country_Id \nWHERE Country.Country_Name = 'South Africa' AND Player.DOB < '1980-04-11';",
    "1939": "SELECT Player_Name \nFROM Player \nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id \nWHERE Bowling_skill.Bowling_skill = 'Legbreak';",
    "1940": "SELECT \n    MIN(M.Match_Date) AS First_Match_Date, \n    R.Role_Desc AS Role_Description\nFROM \n    Match M\nJOIN \n    Player_Match PM ON M.Match_Id = PM.Match_Id\nJOIN \n    Player P ON PM.Player_Id = P.Player_Id\nJOIN \n    Rolee R ON PM.Role_Id = R.Role_Id\nWHERE \n    P.DOB = (SELECT MAX(DOB) FROM Player)",
    "1941": "SELECT Match.Match_Id\nFROM Match\nJOIN Player ON Match.Man_of_the_Match = Player.Player_Id\nWHERE Player.Player_Name = 'V Kohli'",
    "1942": "SELECT COUNT(DISTINCT Man_of_the_Match) AS Australian_Man_of_the_Match_Count\nFROM Match\nJOIN Player ON Match.Man_of_the_Match = Player.Player_Id\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Match_Date BETWEEN '2011-01-01' AND '2012-12-31'\nAND Country.Country_Name = 'Australia'",
    "1943": "SELECT Player.Player_Name\nFROM Player\nJOIN Season ON Player.Player_Id = Season.Man_of_the_Series AND Player.Player_Id = Season.Orange_Cap",
    "1944": "SELECT MIN(Match_Date) AS First_Win_Date\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Sunrisers Hyderabad'",
    "1945": "SELECT Player.Player_Id, Player.Player_Name\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nJOIN Umpire ON Country.Country_Id = Umpire.Umpire_Country\nWHERE Country.Country_Name = 'England'",
    "1946": "SELECT SUM(Runs_Scored) / 17.0 AS Run_Rate\nFROM Batsman_Scored\nWHERE Match_Id = 335987\nAND Innings_No = 1\nAND Over_Id <= 17;",
    "1947": "SELECT \n    Player.Player_Name AS Man_of_the_Match_Name,\n    (SUM(Batsman_Scored.Runs_Scored) * 1.0 / 16) AS Run_Rate\nFROM \n    Match\nJOIN \n    Player ON Match.Man_of_the_Match = Player.Player_Id\nJOIN \n    Batsman_Scored ON Match.Match_Id = Batsman_Scored.Match_Id\nWHERE \n    Match.Match_Id = 335999 AND Batsman_Scored.Innings_No = 1 AND Batsman_Scored.Over_Id <= 16\nGROUP BY \n    Match.Match_Id",
    "1948": "SELECT Match_Winner AS Team_Id, COUNT(Match_Winner) AS Wins\nFROM Match\nGROUP BY Match_Winner\nORDER BY Wins DESC\nLIMIT 1",
    "1949": "SELECT DOB FROM Player\nGROUP BY strftime('%Y', DOB)\nORDER BY COUNT(Player_Id) DESC\nLIMIT 1",
    "1950": "SELECT Match_Date \nFROM Match \nORDER BY Win_Margin DESC \nLIMIT 1",
    "1951": "SELECT Season_Id, COUNT(Match_Id) AS Num_Matches\nFROM Match\nGROUP BY Season_Id\nORDER BY Num_Matches ASC\nLIMIT 1",
    "1952": "SELECT COUNT(*) AS Players_With_5_MoM_Awards\nFROM (\n    SELECT Man_of_the_Match\n    FROM Match\n    GROUP BY Man_of_the_Match\n    HAVING COUNT(Match_Id) >= 5\n)",
    "1953": "SELECT Player.Player_Name\nFROM Match\nJOIN Player ON Match.Man_of_the_Match = Player.Player_Id\nWHERE Match.Match_Date = (SELECT MAX(Match.Match_Date)\n                          FROM Match\n                          WHERE Match.Season_Id = 9)",
    "1954": "SELECT Team_Name \nFROM Team \nWHERE Team_Id = (\n    SELECT Match_Winner \n    FROM Match \n    ORDER BY Match_Date ASC \n    LIMIT 1\n)",
    "1955": "SELECT COUNT(*) AS Cities_In_UAE\nFROM City\nJOIN Country ON City.Country_id = Country.Country_Id\nWHERE Country.Country_Name = 'U.A.E';",
    "1956": "SELECT Umpire_Name \nFROM Umpire \nJOIN Country ON Umpire.Umpire_Country = Country.Country_Id \nWHERE Country.Country_Name = 'England'",
    "1957": "SELECT COUNT(*) AS Legbreak_Bowlers\nFROM Player\nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id\nWHERE Bowling_Style.Bowling_skill = 'Legbreak'",
    "1958": "SELECT COUNT(*) AS Matches_Played\nFROM Match\nWHERE Season_Id = 8 AND (Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Rajasthan Royals')\n                         OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Rajasthan Royals'))",
    "1959": "SELECT Country.Country_Name \nFROM Umpire \nJOIN Country ON Umpire.Umpire_Country = Country.Country_Id \nWHERE Umpire_Name = 'TH Wijewardene'",
    "1960": "SELECT Venue_Name \nFROM Venue \nJOIN City ON Venue.City_Id = City.City_Id \nWHERE City_Name = 'Abu Dhabi'",
    "1961": "SELECT Country.Country_Name \nFROM Player \nJOIN Country ON Player.Country_Name = Country.Country_Id \nWHERE Player.DOB = (SELECT MAX(DOB) FROM Player);",
    "1962": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Match ON Player_Match.Match_Id = Match.Match_Id\nWHERE Match.Season_Id = 1 AND Match.Match_Date = (SELECT MIN(Match_Date) FROM Match WHERE Season_Id = 1) AND Player_Match.Team_Id = Match.Match_Winner",
    "1963": "SELECT Player.Player_Name\nFROM Player\nJOIN Season ON Player.Player_Id = Season.Purple_Cap\nORDER BY (Season.Season_Year - strftime('%Y', Player.DOB)) ASC\nLIMIT 1",
    "1964": "SELECT Venue.Venue_Name, City.City_Name, Country.Country_Name\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nJOIN City ON Venue.City_Id = City.City_Id\nJOIN Country ON City.Country_id = Country.Country_Id\nORDER BY Match.Match_Date DESC\nLIMIT 1",
    "1965": "SELECT Innings_No, MAX(Over_Id) AS Total_Overs\nFROM Ball_by_Ball\nWHERE Match_Id = 336011\nGROUP BY Innings_No",
    "1966": "SELECT Ball_Id, Runs_Scored, Innings_No\nFROM Batsman_Scored\nWHERE Match_Id = 335988 AND Over_Id = 20",
    "1967": "SELECT COUNT(*) AS Matches_in_2011\nFROM Match\nWHERE Match_Date LIKE '2011%';",
    "1968": "SELECT 2022 - SUBSTR(DOB, 1, 4) AS Age\nFROM Player\nWHERE Player_Name = 'Ishan Kishan';",
    "1969": "SELECT \n    (CAST(SUM(CASE WHEN Toss_Winner = Match_Winner THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) AS win_rate\nFROM \n    Match\nWHERE \n    Match_Date LIKE '2012%'",
    "1970": "SELECT COUNT(*) AS Matches_Less_Than_10_Margin\nFROM Match\nWHERE Match_Date LIKE '2009%'\nAND Win_Margin < 10;",
    "1971": "SELECT DISTINCT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Match ON Player_Match.Match_Id = Match.Match_Id\nWHERE SUBSTR(Match.Match_Date, 6, 2) = '06' AND SUBSTR(Match.Match_Date, 1, 4) = '2014'",
    "1972": "SELECT COUNT(DISTINCT Match_Id) AS Matches_Played\nFROM Player_Match\nJOIN Player ON Player.Player_Id = Player_Match.Player_Id\nWHERE Player.Player_Name = 'Mohammad Hafeez';",
    "1973": "SELECT Player_Name \nFROM Player \nJOIN Country ON Player.Country_Name = Country.Country_Id \nWHERE Country.Country_Name = 'South Africa' AND DOB LIKE '1984%'",
    "1974": "SELECT \n    (CAST(SUM(CASE WHEN M.Match_Winner = T.Team_Id THEN 1 ELSE 0 END) AS FLOAT) / COUNT(M.Match_Id)) * 100 AS Win_Percentage\nFROM \n    Match M\nJOIN \n    Team T ON M.Team_1 = T.Team_Id OR M.Team_2 = T.Team_Id\nWHERE \n    T.Team_Name = 'Mumbai Indians'\n    AND M.Match_Date LIKE '2009%'",
    "1975": "SELECT \n    SUM(CASE WHEN Batting_hand = 1 THEN 1 ELSE 0 END) AS Left_Hand_Batsmen,\n    SUM(CASE WHEN Batting_hand = 2 THEN 1 ELSE 0 END) AS Right_Hand_Batsmen,\n    (1.0 * SUM(CASE WHEN Batting_hand = 1 THEN 1 ELSE 0 END)) / SUM(CASE WHEN Batting_hand = 2 THEN 1 ELSE 0 END) AS Ratio\nFROM Player\nJOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nWHERE Batting_Style.Batting_hand = 'Left-hand bat' OR Batting_Style.Batting_hand = 'Right-hand bat'",
    "1976": "SELECT \n    Player.Player_Name AS Eldest_Player, \n    Country.Country_Name AS Country\nFROM \n    Player\nJOIN \n    Country ON Player.Country_Name = Country.Country_Id\nORDER BY \n    Player.DOB \nLIMIT 1;",
    "1977": "SELECT DISTINCT Bowling_Style.Bowling_skill\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id\nWHERE Country.Country_Name = 'Zimbabwea';",
    "1978": "SELECT Umpire.Umpire_Id, Umpire.Umpire_Name\nFROM Umpire\nJOIN Country ON Umpire.Umpire_Country = Country.Country_Id\nWHERE Country.Country_Name = 'New Zealand'",
    "1979": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Team ON Player_Match.Team_Id = Team.Team_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nWHERE Team.Team_Name = 'Rising Pune Supergiants' AND Rolee.Role_Desc = 'CaptainKeeper';",
    "1980": "SELECT COUNT(*) AS Matches_Won\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Sunrisers Hyderabad' AND strftime('%Y', Match.Match_Date) = '2013'",
    "1981": "SELECT Match_Id \nFROM Extra_Runs \nJOIN Extra_Type ON Extra_Runs.Extra_Type_Id = Extra_Type.Extra_Id \nWHERE Extra_Type.Extra_Name = 'penalty';",
    "1982": "SELECT T1.Team_Name AS Team_1_Name, T2.Team_Name AS Team_2_Name\nFROM Match\nJOIN Team AS T1 ON Match.Team_1 = T1.Team_Id\nJOIN Team AS T2 ON Match.Team_2 = T2.Team_Id\nJOIN Win_By ON Match.Win_Type = Win_By.Win_Id\nWHERE Win_By.Win_Type = 'Tie' AND SUBSTR(Match.Match_Date, 1, 4) = '2015'",
    "1983": "SELECT AVG(Count_Out) AS Avg_Out_First_Innings, SUM(Case_When_LBW) AS LBW_Out_First_Innings\nFROM (\n    SELECT Match_Id, Innings_No, COUNT(*) AS Count_Out, SUM(CASE WHEN Kind_Out = (SELECT Out_Id FROM Out_Type WHERE Out_Name = 'lbw') THEN 1 ELSE 0 END) AS Case_When_LBW\n    FROM Wicket_Taken\n    WHERE Innings_No = 1\n    GROUP BY Match_Id\n)",
    "1984": "SELECT COUNT(*) AS Matches_in_2008\nFROM Match\nWHERE Match_Date LIKE '2008%'",
    "1985": "SELECT COUNT(DISTINCT Match_Id) \nFROM Ball_by_Ball \nWHERE Innings_No = 2;",
    "1986": "SELECT Country.Country_Name\nFROM Country\nJOIN City ON Country.Country_Id = City.Country_id\nWHERE City.City_Name = 'Rajkot';",
    "1987": "SELECT COUNT(*) AS Superover_Matches\nFROM Match\nJOIN Win_By ON Match.Win_Type = Win_By.Win_Id\nWHERE Win_By.Win_Type = 'wickets' AND Match.Win_Margin = 1;",
    "1988": "SELECT T.Team_Name \nFROM Team T \nJOIN Match M ON T.Team_Id = M.Team_1 OR T.Team_Id = M.Team_2 \nWHERE M.Match_Date = '2009-04-30' AND M.Win_Margin = 38;",
    "1989": "SELECT Team.Team_Name \nFROM Player \nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id \nJOIN Team ON Player_Match.Team_Id = Team.Team_Id \nWHERE Player.Player_Name = 'T Kohli' AND Player_Match.Match_Id = 335989",
    "1990": "SELECT COUNT(Venue.Venue_Id) AS Venues_In_Centurion\nFROM Venue\nJOIN City ON Venue.City_Id = City.City_Id\nJOIN Country ON City.Country_id = Country.Country_Id\nWHERE City.City_Name = 'Centurion' AND Country.Country_Name = 'South Africa';",
    "1991": "SELECT COUNT(*) AS won_matches\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Delhi Daredevils'\nAND Match.Match_Date LIKE '2014%'",
    "1992": "SELECT Match_Id \nFROM Match \nJOIN Team ON Match.Match_Winner = Team.Team_Id \nWHERE Team_Name = 'Royal Challengers Bangalore' \nORDER BY Win_Margin DESC \nLIMIT 1",
    "1993": "SELECT COUNT(*) AS times_played_as_player_only\nFROM Player_Match\nJOIN Player ON Player.Player_Id = Player_Match.Player_Id\nWHERE Player.Player_Name = 'K Goel' AND Player_Match.Role_Id = 3",
    "1994": "SELECT AVG(Win_Margin) AS Average_Winning_Margin\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nWHERE Venue.Venue_Name = 'Newlands' AND Win_Margin IS NOT NULL;",
    "1995": "SELECT Team_Name \nFROM Team \nWHERE Team_Id IN \n      (SELECT Team_1 FROM Match WHERE Match_Id = 336039 \n       UNION \n       SELECT Team_2 FROM Match WHERE Match_Id = 336039)\nAND Team_Id NOT IN \n      (SELECT Match_Winner FROM Match WHERE Match_Id = 336039);",
    "1996": "SELECT Venue.Venue_Name \nFROM Match \nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id \nWHERE Match.Match_Id = 829768;",
    "1997": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Team_2 = Team.Team_Id \nWHERE Match.Win_Margin = (\n    SELECT MIN(Win_Margin) \n    FROM Match \n    WHERE Win_Margin > 0\n)",
    "1998": "SELECT \n    ROUND(\n        (SELECT COUNT(*) FROM Match WHERE Match_Winner = 7 AND strftime('%Y', Match_Date) = '2013') * 100.0 / \n        (SELECT COUNT(*) FROM Match WHERE Team_1 = 7 OR Team_2 = 7 AND strftime('%Y', Match_Date) = '2013')\n    , 2) AS Winning_Percentage\nFROM Match\nLIMIT 1;",
    "1999": "SELECT \n    (SELECT COUNT(*) \n     FROM Player_Match \n     JOIN Player ON Player.Player_Id = Player_Match.Player_Id \n     WHERE Player.Player_Name = 'SC Ganguly' AND Player_Match.Role_Id = 1) \n    - \n    (SELECT COUNT(*) \n     FROM Player_Match \n     JOIN Player ON Player.Player_Id = Player_Match.Player_Id \n     WHERE Player.Player_Name = 'SC Ganguly' AND Player_Match.Role_Id > 1) \nAS Difference",
    "2000": "SELECT COUNT(*) FROM Player WHERE Bowling_skill > 2;",
    "2001": "SELECT COUNT(*) FROM Player WHERE DOB LIKE '1970%';",
    "2002": "SELECT COUNT(*) \nFROM Player \nWHERE DOB LIKE '198%' AND Bowling_skill = 2;",
    "2003": "SELECT COUNT(*) AS Matches_in_April_2008\nFROM Match\nWHERE Match_Date LIKE '2008-04%'",
    "2004": "SELECT City_Name FROM City WHERE Country_id = 3;",
    "2005": "SELECT COUNT(*) AS Victory_Matches\nFROM Match\nWHERE Match_Date LIKE '2008%' AND Outcome_type = (SELECT Out_Id FROM Out_Type WHERE Out_Name = 'won')",
    "2006": "SELECT Country_id FROM City WHERE City_Name = 'East London';",
    "2007": "SELECT (2008 - strftime('%Y', DOB)) AS old FROM Player WHERE Player_Name = 'SC Ganguly';",
    "2008": "SELECT Player.Player_Name\nFROM Player\nJOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nWHERE Batting_Style.Batting_hand = 'Left-hand bat'",
    "2009": "SELECT COUNT(*) AS Indian_Players\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Country.Country_Name = 'India'",
    "2010": "SELECT Player_Name FROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Country.Country_Name = 'England'",
    "2011": "SELECT Venue_Name \nFROM Venue \nJOIN City ON Venue.City_Id = City.City_Id \nWHERE City.City_Name = 'Bangalore';",
    "2012": "SELECT DISTINCT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Match ON Player_Match.Match_Id = Match.Match_Id\nJOIN Season ON Match.Season_Id = Season.Season_Id\nWHERE Season.Season_Year = 2008",
    "2013": "SELECT DISTINCT Player.Player_Name\nFROM Player\nJOIN Batsman_Scored ON Player.Player_Id = Batsman_Scored.Striker\nWHERE Batsman_Scored.Runs_Scored < 3;",
    "2014": "SELECT Rolee.Role_Desc \nFROM Player \nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id \nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id \nWHERE Player.Player_Name = 'SC Ganguly'",
    "2015": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nWHERE Rolee.Role_Desc = 'Keeper'",
    "2016": "SELECT Player_Name FROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nWHERE Team_Id = 1",
    "2017": "SELECT COUNT(DISTINCT pm.Player_Id) AS Players_Played_As_Captain\nFROM Player_Match pm\nJOIN Rolee r ON pm.Role_Id = r.Role_Id\nJOIN Match m ON pm.Match_Id = m.Match_Id\nJOIN Season s ON m.Season_Id = s.Season_Id\nWHERE r.Role_Desc = 'Captain' AND s.Season_Year = 2008;",
    "2018": "SELECT DISTINCT T.Team_Name\nFROM Team T\nJOIN Player_Match PM ON T.Team_Id = PM.Team_Id\nJOIN Player P ON PM.Player_Id = P.Player_Id\nJOIN Match M ON PM.Match_Id = M.Match_Id\nJOIN Season S ON M.Season_Id = S.Season_Id\nWHERE P.Player_Name = 'SC Ganguly' AND S.Season_Year = 2008",
    "2019": "SELECT Win_Type\nFROM Win_By\nJOIN Match ON Win_By.Win_Id = Match.Win_Type\nWHERE Match.Match_Id = 336000",
    "2020": "SELECT Country.Country_Name\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Player.Player_Name = 'SB Joshi'",
    "2021": "SELECT COUNT(*) \nFROM Player \nJOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id \nWHERE Bowling_Style.Bowling_skill = 'Left-arm fast';",
    "2022": "SELECT Out_Name FROM Out_Type\nJOIN Match ON Out_Type.Out_Id = Match.Outcome_type\nWHERE Match.Match_Id = 392195;",
    "2023": "SELECT \n    Player.Player_Name, \n    City.City_Name \nFROM \n    Player \nJOIN \n    Country ON Player.Country_Name = Country.Country_Id \nJOIN \n    City ON Country.Country_Id = City.Country_id \nWHERE \n    Player.DOB = (SELECT MAX(DOB) FROM Player)",
    "2024": "SELECT COUNT(Match_Id) AS Wins\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nJOIN Season ON Match.Season_Id = Season.Season_Id\nWHERE Team.Team_Name = 'Kings XI Punjab' AND Season.Season_Year = 2008",
    "2025": "SELECT COUNT(DISTINCT Season_Id) AS Seasons_Participated\nFROM Match\nWHERE Team_1 IN (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors')\n   OR Team_2 IN (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors');",
    "2026": "SELECT Player.DOB, Rolee.Role_Desc\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nWHERE Player.Player_Name = 'R Dravid'",
    "2027": "SELECT COUNT(*) AS Ganguly_Man_of_the_Match_Count\nFROM Match\nJOIN Player ON Match.Man_of_the_Match = Player.Player_Id\nWHERE Player.Player_Name = 'SC Ganguly'",
    "2028": "SELECT COUNT(*) AS Matches_Won\nFROM Match\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Team.Team_Name = 'Mumbai Indians' AND strftime('%Y', Match.Match_Date) = '2008'",
    "2029": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Match_Winner = Team.Team_Id \nWHERE Match.Match_Id = 335993 AND Match.Win_Type = (SELECT Win_Id FROM Win_By WHERE Win_Type = 'Wickets');",
    "2030": "SELECT COUNT(*) AS Matches_Won_By_Wickets\nFROM Match\nJOIN Win_By ON Match.Win_Type = Win_By.Win_Id\nWHERE Win_By.Win_Type = 'wickets';",
    "2031": "SELECT r.Role_Desc\nFROM Player p\nJOIN Player_Match pm ON p.Player_Id = pm.Player_Id\nJOIN Rolee r ON pm.Role_Id = r.Role_Id\nJOIN Match m ON pm.Match_Id = m.Match_Id\nJOIN Season s ON m.Season_Id = s.Season_Id\nWHERE p.Player_Name = 'W Jaffer' AND s.Season_Year = 2012",
    "2032": "SELECT Player.Player_Name\nFROM Player\nJOIN Match ON Player.Player_Id = Match.Man_of_the_Match\nJOIN Season ON Match.Season_Id = Season.Season_Id\nWHERE Season.Season_Year = 2008\nGROUP BY Player.Player_Id\nHAVING COUNT(Match.Man_of_the_Match) > 5",
    "2033": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Player \n     JOIN Country ON Player.Country_Name = Country.Country_Id \n     WHERE Country.Country_Name = 'India' \n     AND strftime('%Y', DOB) BETWEEN '1975' AND '1985') / \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM Player) AS Average_Indian_Players",
    "2034": "SELECT \n    (COUNT(CASE WHEN Batting_hand = 'Left-hand bat' THEN 1 END) * 100.0 / COUNT(*)) AS Left_Hand_Batting_Percentage\nFROM \n    Player\nJOIN \n    Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id\nWHERE \n    Batting_Style.Batting_hand = 'Left-hand bat';",
    "2035": "SELECT \n    (CAST(SUM(CASE WHEN Win_Type = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(Win_Type)) * 100 AS Percentage_Won_By_Runs\nFROM \n    Match",
    "2036": "SELECT COUNT(*) AS Matches_With_7_Points_Winning_Margin\nFROM Match\nWHERE Win_Margin = 7;",
    "2037": "SELECT COUNT(*) AS Total_Players_Born_Between_1970_and_1975\nFROM Player\nWHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975'",
    "2038": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Match_Winner = Team.Team_Id \nWHERE Match.Match_Date = '2009-04-26' AND Match.Win_Margin = 6",
    "2039": "SELECT Team.Team_Name \nFROM Match \nJOIN Team ON Match.Match_Winner = Team.Team_Id \nWHERE Match.Match_Id = 419135 AND Match.Win_Type = (SELECT Win_Id FROM Win_By WHERE Win_Type = 'runs');",
    "2040": "SELECT Match_Id \nFROM Match \nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id \nWHERE Venue.Venue_Name = 'St George''s Park' \nORDER BY Win_Margin DESC \nLIMIT 1",
    "2041": "SELECT COUNT(*) AS Sri_Lankan_Players\nFROM Player\nJOIN Country ON Player.Country_Name = Country.Country_Id\nWHERE Country.Country_Name = 'Sri Lanka';",
    "2042": "SELECT Player.Player_Name\nFROM Player\nJOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id\nJOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id\nWHERE Rolee.Role_Desc = 'captain'",
    "2043": "SELECT Venue.Venue_Name, Team.Team_Name AS Winning_Team\nFROM Match\nJOIN Venue ON Match.Venue_Id = Venue.Venue_Id\nJOIN Team ON Match.Match_Winner = Team.Team_Id\nWHERE Match.Match_Id = 392194",
    "2044": "SELECT \n    (COUNT(CASE WHEN m.Win_Type = wt.Win_Id AND wt.Win_Type = 'wickets' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS percentage_won_by_wickets\nFROM \n    Match m\nJOIN \n    Team t ON m.Match_Winner = t.Team_Id\nJOIN \n    Win_By wt ON m.Win_Type = wt.Win_Id\nWHERE \n    t.Team_Name = 'Delhi Daredevils' \n    AND strftime('%Y', m.Match_Date) = '2009';",
    "2045": "SELECT groupName \nFROM torrents \nWHERE artist = 'Ron Hunt' \nAND groupYear = 1979 \nAND releaseType = 'single' \nAND totalSnatched = 239;",
    "2046": "SELECT totalSnatched\nFROM torrents\nWHERE artist = 'blowfly' AND groupYear = 1980 AND releaseType = 'album'",
    "2047": "SELECT tags.tag\nFROM tags\nJOIN torrents ON tags.id = torrents.id\nWHERE torrents.releaseType = 'album'\nORDER BY torrents.totalSnatched DESC\nLIMIT 1",
    "2048": "SELECT tag, SUM(totalSnatched) AS downloads\nFROM tags\nJOIN torrents ON tags.id = torrents.id\nGROUP BY tag\nORDER BY downloads DESC\nLIMIT 5",
    "2049": "SELECT t.groupName\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType = 'single' AND tg.tag = 'funk'\nORDER BY t.groupYear ASC\nLIMIT 1",
    "2050": "SELECT t.groupName\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType = 'ep' AND tg.tag = 'alternative'",
    "2051": "SELECT t.tag\nFROM tags t\nJOIN (\n    SELECT id\n    FROM torrents\n    WHERE releaseType = 'album'\n    ORDER BY totalSnatched ASC\n    LIMIT 5\n) AS least_downloaded_albums ON t.id = least_downloaded_albums.id",
    "2052": "SELECT t.artist, tg.tag\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType = 'single'\nORDER BY t.totalSnatched DESC\nLIMIT 1",
    "2053": "SELECT COUNT(DISTINCT t.id) AS releases_count\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE tg.tag = '1980s';",
    "2054": "SELECT totalSnatched FROM torrents WHERE groupName = 'city funk';",
    "2055": "SELECT groupName\nFROM torrents\nWHERE totalSnatched > 20000",
    "2056": "SELECT t.tag\nFROM tags t\nJOIN torrents tr ON t.id = tr.id\nWHERE tr.groupName = 'sugarhill gang'",
    "2057": "SELECT COUNT(tags.tag) AS NumberOfTags\nFROM tags\nJOIN torrents ON torrents.id = tags.id\nWHERE torrents.groupName = 'city funk'",
    "2058": "SELECT t.groupName AS titles\nFROM torrents t\nJOIN tags ON t.id = tags.id\nWHERE tags.tag = '1980s';",
    "2059": "SELECT t.groupName AS title\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE tg.tag = '1980s'\nORDER BY t.totalSnatched DESC\nLIMIT 1",
    "2060": "SELECT COUNT(*) AS pop_releases\nFROM torrents\nJOIN tags ON torrents.id = tags.id\nWHERE torrents.artist = 'michael jackson' AND tags.tag = 'pop';",
    "2061": "SELECT COUNT(*) \nFROM torrents \nJOIN tags ON torrents.id = tags.id \nWHERE groupYear = 2000 AND releaseType = 'album' AND tag = 'pop'",
    "2062": "SELECT AVG(totalSnatched) AS averageDownloads\nFROM torrents\nJOIN tags ON torrents.id = tags.id\nWHERE tag = '1980s';",
    "2063": "SELECT groupName\nFROM torrents\nORDER BY totalSnatched DESC\nLIMIT 3",
    "2064": "SELECT artist, groupName AS \"Single-Table title\"\nFROM torrents\nWHERE groupYear = 2012 AND releaseType = 'single'\nORDER BY totalSnatched DESC\nLIMIT 1",
    "2065": "SELECT COUNT(*) AS total_releases\nFROM torrents\nWHERE artist = '50 cent'\nAND groupYear BETWEEN 2010 AND 2015\nAND (releaseType = 'album' OR releaseType = 'single')",
    "2066": "SELECT\n    (SELECT groupYear FROM torrents WHERE artist = '2Pac' AND releaseType = 'album' ORDER BY groupYear ASC LIMIT 1 OFFSET 1) - 1991 AS yearsPassed",
    "2067": "SELECT AVG(totalSnatched) AS average_downloads\nFROM torrents\nWHERE artist = '2Pac'\n  AND releaseType = 'single'\n  AND groupYear BETWEEN 2001 AND 2013",
    "2068": "SELECT t.groupName AS title, t.groupYear AS release_year, tg.tag\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType = 'live album'\nORDER BY t.totalSnatched DESC\nLIMIT 1",
    "2069": "SELECT artist\nFROM torrents\nWHERE releaseType = 'bootleg' AND groupYear = 2016\nGROUP BY artist\nHAVING COUNT(*) >= 2",
    "2070": "SELECT DISTINCT artist\nFROM torrents\nWHERE releaseType = 'single' AND groupYear BETWEEN 1980 AND 1982;",
    "2071": "SELECT groupName\nFROM torrents\nWHERE id BETWEEN 10 AND 20\nAND releaseType = 'single'\nAND totalSnatched >= 20",
    "2072": "SELECT DISTINCT t.artist\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.groupYear BETWEEN 1980 AND 1982\nAND tg.tag = 'disco'",
    "2073": "SELECT DISTINCT t.artist\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.totalSnatched <= 100\nAND t.groupYear = 1980\nAND tg.tag = 'funk'",
    "2074": "SELECT artist\nFROM torrents\nJOIN tags ON torrents.id = tags.id\nWHERE releaseType = 'single' AND tag = 'soul'\nGROUP BY artist\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "2075": "SELECT t.artist\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.id BETWEEN 10 AND 30\nAND t.groupYear = 1980\nAND tg.tag = 'funk'",
    "2076": "SELECT t.groupName\nFROM torrents t\nJOIN tags g ON t.id = g.id\nWHERE t.groupYear >= 1982 AND g.tag = 'jazz'\nORDER BY t.totalSnatched DESC\nLIMIT 1",
    "2077": "SELECT artist, tag\nFROM torrents\nJOIN tags ON torrents.id = tags.id\nWHERE torrents.id = 16",
    "2078": "SELECT t.artist\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.id BETWEEN 10 AND 50\nAND tg.tag = 'new.york'\nORDER BY t.totalSnatched DESC\nLIMIT 1",
    "2079": "SELECT DISTINCT t.artist\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType IN ('album', 'mixtape')\nAND t.groupYear BETWEEN 1980 AND 1985\nAND tg.tag = 'dance'",
    "2080": "SELECT COUNT(DISTINCT t.id) AS soul_singles_count\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType = 'single'\nAND t.groupYear BETWEEN 1979 AND 1981\nAND tg.tag = 'soul'",
    "2081": "SELECT COUNT(*) AS singles_released_in_1979\nFROM torrents\nWHERE releaseType = 'single' AND groupYear = 1979;",
    "2082": "SELECT COUNT(*) AS singles_released_by_sugar_daddy_in_1980\nFROM torrents\nWHERE artist = 'sugar daddy' AND releaseType = 'single' AND groupYear = 1980;",
    "2083": "SELECT COUNT(DISTINCT t.id) AS christmas_albums_2004\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType = 'album' AND t.groupYear = 2004 AND tg.tag = 'christmas';",
    "2084": "SELECT tags.tag\nFROM tags\nJOIN torrents ON tags.id = torrents.id\nWHERE torrents.artist = 'kurtis blow' AND torrents.groupYear BETWEEN 2000 AND 2010",
    "2085": "SELECT t.groupName AS album_title, tg.tag\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.artist = 'millie jackson' AND t.groupYear = 1980 AND t.releaseType = 'album'",
    "2086": "SELECT t.groupName\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.groupYear = 2005 AND tg.tag = 'jazz'",
    "2087": "SELECT t.artist\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.groupYear BETWEEN 1980 AND 2000\nAND tg.tag = 'disco'\nGROUP BY t.artist\nORDER BY COUNT(t.id) DESC\nLIMIT 1",
    "2088": "SELECT DISTINCT t.artist\nFROM torrents t\nJOIN tags tg ON t.id = tg.id\nWHERE t.releaseType = 'single' AND tg.tag = '1970s';",
    "2089": "SELECT \n    (CAST(SUM(CASE WHEN t.tag = 'united.states' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM \n    torrents\nJOIN \n    tags ON torrents.id = tags.id\nWHERE \n    torrents.groupYear BETWEEN 1979 AND 1982\n    AND torrents.releaseType = 'album'",
    "2090": "SELECT COUNT(*) AS NumberOfCountries\nFROM Country\nWHERE OtherGroups = 'HIPC' AND LendingCategory = 'IDA'",
    "2091": "SELECT ShortName \nFROM Country \nWHERE LendingCategory = 'IDA' \nAND ExternalDebtReportingStatus = 'Estimate'",
    "2092": "SELECT cn.Description\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE c.ShortName = 'Aruba' AND cn.Seriescode = 'SM.POP.TOTL'",
    "2093": "SELECT Country.ShortName\nFROM Country\nJOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode\nWHERE Country.Region = 'Latin America & Caribbean' AND CountryNotes.Seriescode = 'SM.POP.TOTL'",
    "2094": "SELECT COUNT(DISTINCT cn.Countrycode) \nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE cn.Seriescode = 'SM.POP.TOTL' \nAND c.IncomeGroup = 'Low income' \nAND cn.Description IS NOT NULL",
    "2095": "SELECT cn.Description\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE c.LendingCategory = 'IDA' AND cn.Seriescode = 'SM.POP.TOTL'",
    "2096": "SELECT COUNT(DISTINCT cn.Countrycode) \nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE c.IncomeGroup = 'Low income' \nAND c.LendingCategory = 'International Development Association' \nAND cn.Seriescode = 'SM.POP.TOTL';",
    "2097": "SELECT COUNT(DISTINCT cn.Countrycode) \nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE c.IncomeGroup = 'High income: OECD' \nAND c.CurrencyUnit = 'Euro' \nAND cn.Seriescode = 'SP.DYN.AMRT.FE'",
    "2098": "SELECT Country.LongName\nFROM Country\nJOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode\nWHERE CountryNotes.Description = \"Estimates are derived from data on foreign-born population.\"\nAND CountryNotes.Seriescode = \"SM.POP.TOTL\"",
    "2099": "SELECT Description \nFROM Footnotes \nWHERE Year = '1990' \nAND Seriescode = 'AG.LND.FRST.K2' \nAND Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba')",
    "2100": "SELECT Year FROM Footnotes\nJOIN Country ON Footnotes.Countrycode = Country.CountryCode\nWHERE Country.ShortName = 'Aruba' AND Footnotes.Seriescode = 'AG.LND.FRST.K2'",
    "2101": "SELECT Countrycode \nFROM Footnotes \nWHERE Seriescode = 'DC.DAC.AUSL.CD' \nAND Year = '2002' \nAND Description = 'Data are classified as official aid'",
    "2102": "SELECT COUNT(*) AS FootnotesCount\nFROM Footnotes\nJOIN Country ON Country.CountryCode = Footnotes.Countrycode\nWHERE Country.ShortName = 'Aruba' AND Footnotes.Year = '2002'",
    "2103": "SELECT MAX(ConsecutiveYears) AS MaxConsecutiveYears FROM (\n    SELECT \n        Countrycode, \n        Seriescode, \n        Year,\n        Year - ROW_NUMBER() OVER(PARTITION BY Countrycode, Seriescode ORDER BY Year) AS GroupID,\n        COUNT(*) OVER(PARTITION BY Countrycode, Seriescode, GroupID) AS ConsecutiveYears\n    FROM Footnotes\n    WHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba')\n    AND Seriescode = 'BX.KLT.DINV.CD.WD'\n)",
    "2104": "SELECT AVG(Value) AS AverageAdolescentFertilityRate\nFROM Indicators\nWHERE CountryCode IN (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A')\nAND IndicatorName LIKE 'adolescent fertility rate%'",
    "2105": "WITH AdolescentFertilityRate AS (\n    SELECT \n        CountryCode,\n        AVG(Value) AS AvgFertilityRate\n    FROM Indicators\n    WHERE IndicatorName LIKE 'adolescent fertility rate%'\n    GROUP BY CountryCode\n),\nMaxFertilityRate AS (\n    SELECT \n        MAX(AvgFertilityRate) AS MaxAvgFertilityRate\n    FROM AdolescentFertilityRate\n),\nHighestFertilityCountry AS (\n    SELECT \n        AFR.CountryCode\n    FROM AdolescentFertilityRate AFR\n    JOIN MaxFertilityRate MFR ON AFR.AvgFertilityRate = MFR.MaxAvgFertilityRate\n)\nSELECT \n    C.SpecialNotes\nFROM Country C\nJOIN HighestFertilityCountry HFC ON C.CountryCode = HFC.CountryCode",
    "2106": "SELECT CountryCode, Alpha2Code\nFROM Country\nWHERE Region = 'East Asia & Pacific' AND IncomeGroup = 'High income: nonOECD'",
    "2107": "SELECT LongName, Alpha2Code FROM Country WHERE LatestTradeData = 2013 AND LatestWaterWithdrawalData = 2013;",
    "2108": "SELECT AVG(Value) AS AverageValue\nFROM Indicators\nWHERE CountryCode = (SELECT CountryCode FROM Country WHERE ShortName = 'Algeria')\nAND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'\nAND Year BETWEEN 1975 AND 1980",
    "2109": "SELECT IndicatorName, AggregationMethod \nFROM Series \nWHERE Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account';",
    "2110": "SELECT SeriesCode\nFROM Series\nWHERE Topic = 'Environment: Emissions' AND LicenseType = 'Restricted'",
    "2111": "SELECT COUNT(DISTINCT i.CountryCode) \nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)' \nAND i.Year = 1970 \nAND i.Value > 600 \nAND c.Region = 'Middle East & North Africa'",
    "2112": "WITH LatinAmericaCaribbean AS (\n    SELECT \n        c.CountryCode,\n        c.ShortName,\n        i.IndicatorCode,\n        i.Year,\n        i.Value\n    FROM \n        Country c\n    JOIN \n        Indicators i ON c.CountryCode = i.CountryCode\n    WHERE \n        c.Region IN ('Latin America', 'Caribbean')\n        AND i.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'\n        AND i.Year > 1965\n),\nRankedCountries AS (\n    SELECT\n        CountryCode,\n        ShortName,\n        Year,\n        Value,\n        RANK() OVER(PARTITION BY CountryCode ORDER BY Value DESC) AS ValueRank\n    FROM \n        LatinAmericaCaribbean\n)\nSELECT \n    ShortName AS CountryName,\n    Year,\n    Value AS HighestCO2Emissions\nFROM \n    RankedCountries\nWHERE \n    ValueRank = 1\nORDER BY \n    Value DESC\nLIMIT 3",
    "2113": "SELECT Description \nFROM SeriesNotes \nWHERE Seriescode = 'SP.DYN.TO65.MA.ZS' AND Year = 'YR1967'",
    "2114": "SELECT Description \nFROM Footnotes \nWHERE Countrycode = (SELECT CountryCode FROM Country WHERE LongName = 'Albania') \nAND Year = '1981'",
    "2115": "SELECT Description \nFROM Footnotes \nWHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'The Bahamas') \nAND Seriescode = 'SH.DTH.IMRT' \nAND Year = '1984'",
    "2116": "SELECT c.ShortName\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)'\nAND i.Year = 1970\nAND i.Value > 570000",
    "2117": "SELECT c.Wb2Code, c.LendingCategory\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE cn.Description = \"Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.\"",
    "2118": "SELECT s.Topic, s.SeriesCode, s.LicenseType\nFROM Indicators i\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Total reserves minus gold (current US$)'\nAND i.Year = 1961\nAND i.Value = 3000000\nAND c.ShortName = 'Haiti'",
    "2119": "SELECT COUNT(DISTINCT i.CountryCode)\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)'\nAND i.Value > 1000\nAND c.ExternalDebtReportingStatus = 'Preliminary'",
    "2120": "SELECT CountryName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'Fertility rate, total (births per woman)'\nAND Year = 1979\nAND Value BETWEEN 4 AND 5",
    "2121": "SELECT \n    c.TableName,\n    c.SourceOfMostRecentIncomeAndExpenditureData\nFROM \n    Country c\nWHERE \n    c.Region = 'South Asia' \n    AND c.IncomeGroup = 'Low income'",
    "2122": "SELECT DISTINCT fn.Description AS Source\nFROM Footnotes fn\nJOIN Indicators i ON fn.CountryCode = i.CountryCode AND fn.SeriesCode = i.IndicatorCode\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'\nAND c.Region = 'Latin America & Caribbean'",
    "2123": "SELECT DISTINCT s.Source\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nWHERE c.Region = 'South America' AND i.Year = 2002 AND i.IndicatorName = 'Net migration'",
    "2124": "SELECT DISTINCT s.Source\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nWHERE c.Region = 'North America' AND i.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';",
    "2125": "SELECT \n    i.CountryName, \n    i.Value AS GDPGrowth\nFROM \n    Indicators i\nJOIN \n    Country c ON i.CountryCode = c.CountryCode\nWHERE \n    c.LatestTradeData = 2013\n    AND i.IndicatorName = 'GDP growth (annual %)'\n    AND i.Year = 2014\nORDER BY \n    i.Value ASC",
    "2126": "SELECT \n    i.CountryName,\n    i.Value AS PrivateExpenditureOnHealth,\n    sn.Description AS Source\nFROM \n    Indicators i\nJOIN \n    Country c ON i.CountryCode = c.CountryCode\nLEFT JOIN \n    SeriesNotes sn ON i.IndicatorCode = sn.Seriescode AND i.Year = sn.Year\nWHERE \n    i.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)'\n    AND i.Year = 2005\n    AND c.Region = 'Europe'\nORDER BY \n    i.Value DESC\nLIMIT 10",
    "2127": "SELECT COUNT(*) FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';",
    "2128": "SELECT ShortName \nFROM Country \nWHERE LatestTradeData > 2010;",
    "2129": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Country \n     WHERE SystemOfTrade = 'Special trade system' \n     AND Region = 'Sub-Saharan Africa') \n    / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Country \n     WHERE Region = 'Sub-Saharan Africa') \n    AS percentage",
    "2130": "SELECT AVG(Value) AS AverageArmsImports\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'Arms imports (SIPRI trend indicator values)'\nAND Region = 'European & Central Asian'",
    "2131": "SELECT \n    CountryName, \n    MIN(Value) AS LowestCO2Emissions\nFROM \n    Indicators \nJOIN \n    Country ON Indicators.CountryCode = Country.CountryCode\nWHERE \n    IndicatorName = 'CO2 emissions (kt)' \n    AND IncomeGroup = 'Upper middle income'",
    "2132": "SELECT MIN(Value) AS MinMigrantStock\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'International migrant stock, total'\nAND OtherGroups LIKE '%HIPC%'",
    "2133": "SELECT DISTINCT IndicatorName\nFROM Series\nJOIN Indicators ON Series.SeriesCode = Indicators.IndicatorCode\nWHERE Topic = 'Education: Inputs' AND Year = 2000;",
    "2134": "SELECT COUNT(DISTINCT i.IndicatorCode) AS AnnualIndicatorsUsingSum\nFROM Indicators i\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nWHERE s.Periodicity = 'Annual'\nAND s.AggregationMethod = 'Sum'\nAND i.Year BETWEEN 2001 AND 2003",
    "2135": "SELECT SeriesCode\nFROM Series\nWHERE Source LIKE '%International Monetary Fund, Balance of Payments Statistics Yearbook and data files%'",
    "2136": "SELECT \n    (SELECT CAST(COUNT(DISTINCT i.CountryCode) AS FLOAT)\n     FROM Indicators i\n     JOIN Country c ON i.CountryCode = c.CountryCode\n     WHERE c.Region = 'South Asia'\n     AND i.IndicatorName = 'Life expectancy at birth, female (years)'\n     AND i.Value > 50)\n    /\n    (SELECT CAST(COUNT(DISTINCT CountryCode) AS FLOAT)\n     FROM Country\n     WHERE Region = 'South Asia') \n    * 100 AS Percentage",
    "2137": "SELECT CountryName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'Death rate, crude (per 1,000 people)'\nAND Year BETWEEN 1960 AND 1965\nORDER BY Value DESC\nLIMIT 1",
    "2138": "SELECT DISTINCT Indicators.IndicatorName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50",
    "2139": "SELECT CountryName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)'\nORDER BY Value DESC\nLIMIT 1",
    "2140": "SELECT DISTINCT i.IndicatorName\nFROM Indicators i\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nWHERE i.Year = 1965 AND i.Value > 100 AND s.Periodicity = 'Annual'",
    "2141": "SELECT DISTINCT Indicators.IndicatorName\nFROM Indicators\nJOIN Series ON Indicators.IndicatorCode = Series.SeriesCode\nWHERE Indicators.Year BETWEEN 1968 AND 1970\nAND Series.LicenseType = 'open'\nAND Indicators.Value < 100",
    "2142": "SELECT CountryName, IndicatorName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nJOIN Series ON Indicators.IndicatorCode = Series.SeriesCode\nWHERE Topic LIKE 'Private Sector & Trade: Exports%'\nORDER BY Value DESC\nLIMIT 1",
    "2143": "SELECT i.IndicatorName\nFROM Indicators i\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nWHERE s.AggregationMethod = 'Weighted average'\nORDER BY i.Value ASC\nLIMIT 1",
    "2144": "SELECT DISTINCT Indicators.IndicatorName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE Country.ShortName = 'Sudan' AND Indicators.Year = 1961 AND\n      EXISTS (\n          SELECT 1\n          FROM Series\n          WHERE Series.SeriesCode = Indicators.IndicatorCode AND Series.Periodicity = 'Annual'\n      )",
    "2145": "SELECT \n    i.CountryName,\n    MIN(i.Value) AS LowestValue\nFROM \n    Indicators i\nJOIN \n    Series s ON i.IndicatorCode = s.SeriesCode\nWHERE \n    i.Year BETWEEN 1960 AND 1965\n    AND s.Topic LIKE 'Health: Population: Structure'\nGROUP BY \n    i.CountryName\nORDER BY \n    LowestValue ASC\nLIMIT 1;",
    "2146": "SELECT \n    (CAST(COUNT(DISTINCT i.CountryCode) AS FLOAT) / \n    (SELECT COUNT(DISTINCT CountryCode) FROM Country WHERE IncomeGroup = 'Upper middle income')) * 100 AS Percentage\nFROM \n    Indicators i\nJOIN \n    Country c ON i.CountryCode = c.CountryCode\nJOIN \n    Series s ON i.IndicatorCode = s.SeriesCode\nWHERE \n    c.IncomeGroup = 'Upper middle income'\n    AND s.IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'\n    AND i.Value < 80",
    "2147": "SELECT IndicatorCode FROM Series WHERE IndicatorName = 'Rural population';",
    "2148": "SELECT COUNT(*) AS NumberOfCountriesUsing2008SNA\nFROM Country\nWHERE SystemOfNationalAccounts = '2008 SNA';",
    "2149": "SELECT DISTINCT Series.SeriesCode\nFROM Series\nJOIN CountryNotes ON Series.SeriesCode = CountryNotes.Seriescode\nJOIN Country ON CountryNotes.Countrycode = Country.CountryCode\nWHERE Country.CurrencyUnit = 'Euro'",
    "2150": "SELECT Country.LongName\nFROM Country\nJOIN Indicators ON Country.CountryCode = Indicators.CountryCode\nWHERE Indicators.IndicatorCode = 'DT.DOD.DSTC.CD'",
    "2151": "SELECT DISTINCT Country.CountryCode\nFROM Country\nWHERE Country.CurrencyUnit = 'Hong Kong dollar'",
    "2152": "SELECT DISTINCT Country.CountryCode, Country.ShortName\nFROM Country\nJOIN Indicators ON Country.CountryCode = Indicators.CountryCode\nWHERE Indicators.IndicatorCode = 'SP.DYN.TO65.MA.ZS'",
    "2153": "SELECT ShortName AS CountryName\nFROM Country\nWHERE IncomeGroup = 'Low income'",
    "2154": "SELECT DISTINCT Indicators.CountryCode, Indicators.IndicatorCode\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE Country.Region = 'Latin American & Carribbean' AND Country.IncomeGroup = 'Low income'",
    "2155": "SELECT DISTINCT s.SeriesCode, c.CountryCode\nFROM Series s\nJOIN CountryNotes cn ON s.SeriesCode = cn.Seriescode\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE c.CurrencyUnit = 'Australian dollar' AND c.IncomeGroup = 'Low middle income'",
    "2156": "SELECT \n    c.LongName AS CountryName, \n    c.Region AS Region, \n    c.NationalAccountsBaseYear AS EarliestBaseYear\nFROM \n    Country c\nWHERE \n    c.IncomeGroup = 'Upper middle income'\n    AND c.NationalAccountsBaseYear = (\n        SELECT \n            MIN(c2.NationalAccountsBaseYear) \n        FROM \n            Country c2 \n        WHERE \n            c2.IncomeGroup = 'Upper middle income'\n    )",
    "2157": "SELECT Country.CountryCode, Country.ShortName\nFROM Country\nWHERE Country.CurrencyUnit = 'Euro' AND Country.IncomeGroup = 'High income'",
    "2158": "SELECT Country.CountryCode, Country.CurrencyUnit\nFROM Country\nJOIN Indicators ON Country.CountryCode = Indicators.CountryCode\nWHERE Indicators.IndicatorCode = 'FP.CPI.TOTL'",
    "2159": "SELECT DISTINCT Indicators.CountryName, Indicators.IndicatorCode\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE Country.IncomeGroup = 'High income: nonOECD'",
    "2160": "SELECT c.CountryCode, c.ShortName\nFROM Country c\nJOIN Indicators i ON c.CountryCode = i.CountryCode\nWHERE c.CurrencyUnit = 'Pound sterling' AND c.IncomeGroup = 'High income'",
    "2161": "SELECT CountryCode, ShortName FROM Country LIMIT 10;",
    "2162": "SELECT COUNT(*), GROUP_CONCAT(Alpha2Code) \nFROM Country \nWHERE ShortName LIKE 'A%';",
    "2163": "SELECT CountryCode, ShortName FROM Country WHERE CurrencyUnit = 'Euro';",
    "2164": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes IS NULL;",
    "2165": "SELECT Country.LongName\nFROM Country\nWHERE Country.Region = 'Asia' AND Country.IncomeGroup = 'High income'",
    "2166": "SELECT LongName \nFROM Country \nWHERE NationalAccountsBaseYear < '1980'",
    "2167": "SELECT \n    Indicators.CountryCode \nFROM \n    Indicators \nJOIN \n    Country ON Indicators.CountryCode = Country.CountryCode \nWHERE \n    IndicatorCode = 'DT.DOD.DECT.CD' \n    AND Country.IncomeGroup = 'Low income';",
    "2168": "SELECT Countrycode FROM CountryNotes WHERE Description LIKE '%Covers mainland Tanzania only%'",
    "2169": "SELECT Footnotes.Description, Footnotes.Seriescode\nFROM Footnotes\nJOIN Country ON Footnotes.Countrycode = Country.CountryCode\nWHERE Country.ShortName = 'Benin' AND Footnotes.Year = 'YR2005'",
    "2170": "SELECT Description \nFROM Footnotes \nJOIN Country ON Footnotes.Countrycode = Country.CountryCode \nWHERE Country.ShortName = 'Finland' AND Year = 'YR2000'",
    "2171": "SELECT DISTINCT Year \nFROM Indicators \nWHERE IndicatorName = \"Air transport, passengers carried\"",
    "2172": "SELECT c.LongName\nFROM Country c\nJOIN Indicators i ON c.CountryCode = i.CountryCode\nWHERE i.Year = 1980 AND i.IndicatorName IS NOT NULL",
    "2173": "SELECT Country.CurrencyUnit, Indicators.IndicatorCode\nFROM Country\nJOIN Indicators ON Country.CountryCode = Indicators.CountryCode\nWHERE Country.LongName = 'Malaysia' AND Indicators.Year = 1970",
    "2174": "SELECT \n    Country.CountryCode, \n    Country.Region, \n    Indicators.Value\nFROM \n    Indicators\nJOIN \n    Country ON Indicators.CountryCode = Country.CountryCode\nWHERE \n    Indicators.Value = (SELECT MAX(Value) FROM Indicators)\nLIMIT 5",
    "2175": "SELECT COUNT(DISTINCT cn.Countrycode) AS NumberOfCountries, c.CurrencyUnit\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE cn.Description = \"Sources: UN Energy Statistics (2014)\"\nGROUP BY c.CurrencyUnit",
    "2176": "SELECT COUNT(Footnotes.Year) AS FootnotesCount, Country.TableName\nFROM Footnotes\nJOIN Country ON Footnotes.Countrycode = Country.CountryCode\nWHERE Footnotes.Year = 'YR1980'\nGROUP BY Footnotes.Countrycode",
    "2177": "SELECT cn.Seriescode, c.Wb2Code\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE cn.Description = \"Data sources : Eurostat\"",
    "2178": "SELECT CountryName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'\nAND IncomeGroup = 'Low income'\nORDER BY Value ASC\nLIMIT 1",
    "2179": "SELECT SUM(Value) AS TotalUrbanPopulation1960\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE Year = 1960\nAND IncomeGroup = 'Middle income'\nAND IndicatorName LIKE '%urban population%'",
    "2180": "SELECT c.ShortName, c.CurrencyUnit\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Adjusted net national income (annual % growth)'\nAND i.Year = 1980\nORDER BY i.Value DESC\nLIMIT 1",
    "2181": "SELECT COUNT(*) AS NumberOfCountries\nFROM Country\nWHERE SystemOfNationalAccounts = '1993 System of National Accounts methodology'",
    "2182": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes';",
    "2183": "SELECT C.ShortName || ' ' || C.LongName AS CountryName\nFROM Country C\nWHERE C.LatestPopulationCensus BETWEEN '2010' AND '2012'\nAND C.VitalRegistrationComplete = 'Yes'",
    "2184": "SELECT CountryName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'CO2 emissions (metric tons per capita)' AND Year = 1960\nORDER BY Value DESC\nLIMIT 1",
    "2185": "WITH InfantDeaths1971 AS (\n    SELECT \n        i.CountryCode,\n        c.ShortName AS CountryName,\n        i.Value\n    FROM \n        Indicators i\n    JOIN \n        Country c ON i.CountryCode = c.CountryCode\n    WHERE \n        i.IndicatorName = 'Number of infant deaths' \n        AND i.Year = 1971\n),\nMaxMinDeaths AS (\n    SELECT \n        MAX(Value) AS MaxDeaths,\n        MIN(Value) AS MinDeaths\n    FROM \n        InfantDeaths1971\n),\nRatio AS (\n    SELECT \n        (MaxDeaths * 1.0) / MinDeaths AS DeathRatio\n    FROM \n        MaxMinDeaths\n),\nMaxCountry AS (\n    SELECT \n        CountryName,\n        Value AS MaxDeaths\n    FROM \n        InfantDeaths1971\n    WHERE \n        Value = (SELECT MaxDeaths FROM MaxMinDeaths)\n),\nMinCountry AS (\n    SELECT \n        CountryName,\n        Value AS MinDeaths\n    FROM \n        InfantDeaths1971\n    WHERE \n        Value = (SELECT MinDeaths FROM MaxMinDeaths)\n)\nSELECT \n    r.DeathRatio,\n    mc.CountryName AS MaxDeathCountry,\n    mc.MaxDeaths,\n    mic.CountryName AS MinDeathCountry,\n    mic.MinDeaths\nFROM \n    Ratio r,\n    MaxCountry mc,\n    MinCountry mic",
    "2186": "SELECT Country.ShortName\nFROM Country\nJOIN Indicators ON Country.CountryCode = Indicators.CountryCode\nWHERE Indicators.IndicatorCode = 'SP.DYN.CBRT.IN'",
    "2187": "SELECT DISTINCT Country.ShortName\nFROM Country\nJOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode\nWHERE CountryNotes.Description = 'Data are classified as official aid.'",
    "2188": "SELECT Country.LongName\nFROM Country\nJOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode\nWHERE CountryNotes.Description LIKE '%Estimates are based on regression.%'",
    "2189": "SELECT DISTINCT c.LongName\nFROM Country c\nJOIN Indicators i ON c.CountryCode = i.CountryCode\nWHERE c.Region = 'East Asia & Pacific'\nAND i.IndicatorName = 'Urban population'\nAND i.Year = 1970\nAND i.Value > 2000000",
    "2190": "SELECT MAX(i.Value) AS LargestPopulation\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Population, total' AND i.Year = 1960 AND c.IncomeGroup = 'Upper middle income'",
    "2191": "SELECT COUNT(*) AS NumberOfCountriesUsing1968SNA\nFROM Country\nWHERE SystemOfNationalAccounts = '1968 System of National Accounts methodology'",
    "2192": "SELECT Country.ShortName\nFROM Country\nJOIN Series ON Series.Topic LIKE '%Social Protection & Labor: Migration%'\nJOIN Indicators ON Country.CountryCode = Indicators.CountryCode AND Series.SeriesCode = Indicators.IndicatorCode\nWHERE Country.Region = 'East Asia & Pacific' AND Country.IncomeGroup = 'Upper middle income'\nGROUP BY Country.CountryCode",
    "2193": "SELECT c.LongName\nFROM Country c\nJOIN Indicators i ON c.CountryCode = i.CountryCode\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nWHERE s.Topic = 'Poverty: Shared Prosperity'",
    "2194": "SELECT Country.TableName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE Indicators.IndicatorCode = 'SP.DYN.CDRT.IN' AND Indicators.Year = (\n    SELECT MAX(LatestTradeData)\n    FROM Country\n)",
    "2195": "SELECT c.LongName\nFROM Country c\nJOIN Indicators i ON c.CountryCode = i.CountryCode\nWHERE c.Region = 'Sub-Saharan Africa' AND i.IndicatorCode = 'SP.DYN.AMRT.FE'",
    "2196": "SELECT CurrencyUnit, COUNT(CurrencyUnit) AS NumberOfCountries, GROUP_CONCAT(ShortName, ', ') AS CountryNames\nFROM Country\nGROUP BY CurrencyUnit\nHAVING COUNT(CurrencyUnit) > 1\nORDER BY NumberOfCountries DESC\nLIMIT 1",
    "2197": "SELECT LongName \nFROM Country \nWHERE Region = 'South Asia' AND IncomeGroup = 'Low income';",
    "2198": "SELECT LongName \nFROM Country \nWHERE SystemOfTrade = 'Special trade system'\nLIMIT 2;",
    "2199": "SELECT CountryName\nFROM Indicators\nWHERE IndicatorCode = (\n    SELECT IndicatorCode\n    FROM Series\n    WHERE IndicatorName LIKE '%CO2 emissions from transport (% of total fuel combustion)%'\n)\nORDER BY Value DESC\nLIMIT 1",
    "2200": "SELECT CountryName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'Arable land (% of land area)'\nORDER BY Value ASC\nLIMIT 1",
    "2201": "SELECT Topic AS subjects\nFROM Series\nWHERE LicenseType = 'Restricted'",
    "2202": "SELECT CountryCode \nFROM Country \nWHERE IncomeGroup = 'Upper middle income' \nAND ExternalDebtReportingStatus = 'Preliminary'",
    "2203": "SELECT \n    (CAST(COUNT(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN 1 END) AS REAL) / COUNT(*) * 100) AS Percentage\nFROM \n    Country\nWHERE \n    Region = 'Middle East & North Africa'",
    "2204": "SELECT GovernmentAccountingConcept, COUNT(*) AS NumberOfCountries\nFROM Country\nWHERE ExternalDebtReportingStatus = 'Actual'\nGROUP BY GovernmentAccountingConcept\nHAVING GovernmentAccountingConcept IN ('Budgetary central government', 'Consolidated central government')\nORDER BY NumberOfCountries DESC\nLIMIT 1;",
    "2205": "SELECT COUNT(*) AS NationsCompletedDebtReportingOnTime\nFROM Country\nWHERE Region = 'East Asia & Pacific' AND ExternalDebtReportingStatus = 'Estimate'",
    "2206": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM Country WHERE Region = 'Sub-Saharan Africa')) * 100 AS Proportion\nFROM \n    Country\nWHERE \n    Region = 'Sub-Saharan Africa' AND IncomeGroup = 'Low income'",
    "2207": "SELECT MAX(Value) AS HighestAgriculturalLandPercentage\nFROM Indicators\nWHERE CountryCode IN (SELECT CountryCode FROM Country WHERE LongName = 'Republic of Benin')\nAND IndicatorName = 'Agricultural land (% of land area)'\nAND Year BETWEEN 1961 AND 1980",
    "2208": "SELECT DISTINCT c.LongName\nFROM Country c\nJOIN CountryNotes cn ON c.CountryCode = cn.Countrycode\nJOIN Series s ON cn.Seriescode = s.SeriesCode\nWHERE s.IndicatorName LIKE '%UN Energy Statistics (2014)%'\nLIMIT 3;",
    "2209": "SELECT Value \nFROM Indicators \nJOIN Country ON Indicators.CountryCode = Country.CountryCode \nWHERE IndicatorName = 'Deposit interest rate (%)' \nAND LongName = 'Commonwealth of Australia' \nAND Year = 1979",
    "2210": "SELECT cn.Seriescode, cn.Description\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nWHERE c.ShortName = 'Germany'",
    "2211": "SELECT DISTINCT s.Topic\nFROM Series s\nJOIN Indicators i ON s.SeriesCode = i.IndicatorCode\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE c.ShortName = 'Austria'",
    "2212": "SELECT Topic, LongDefinition \nFROM Series \nWHERE SeriesCode = 'SP.DYN.AMRT.MA'",
    "2213": "SELECT COUNT(DISTINCT f.Countrycode), c.LongName\nFROM Footnotes f\nJOIN Country c ON f.Countrycode = c.CountryCode\nWHERE f.Description = 'Not specified'\nGROUP BY f.Countrycode\nHAVING COUNT(f.Countrycode) > 0\nLIMIT 3",
    "2214": "SELECT c.LongName\nFROM Country c\nJOIN Indicators i ON c.CountryCode = i.CountryCode\nWHERE c.ExternalDebtReportingStatus = 'Actual'\nAND i.IndicatorName = 'Land under cereal production'\nAND i.Year = 1980\nAND i.Value = 3018500",
    "2215": "SELECT \n    (CAST(COUNT(DISTINCT i.CountryCode) AS FLOAT) / \n    (SELECT COUNT(*) FROM Country WHERE Region = 'Latin America & Caribbean')) * 100 AS portion\nFROM \n    Indicators i\nJOIN \n    Country c ON i.CountryCode = c.CountryCode\nWHERE \n    i.Year = 1961 \n    AND i.IndicatorName = 'Agricultural land (% of land area)'\n    AND i.Value > 50\n    AND c.Region = 'Latin America & Caribbean'",
    "2216": "SELECT LongName \nFROM Country \nWHERE Region = 'South Asia' AND IncomeGroup = 'Low income';",
    "2217": "SELECT IndicatorCode FROM Indicators WHERE IndicatorName = 'Mobile cellular subscriptions' AND CountryCode = (SELECT CountryCode FROM Country WHERE ShortName = 'Brazil')",
    "2218": "SELECT COUNT(*) AS NumberOfCountries, GROUP_CONCAT(LongName) AS CountryFullNames\nFROM Country\nWHERE Region = 'Europe & Central Asia' AND CurrencyUnit = 'Danish krone'",
    "2219": "SELECT CountryName, MAX(Value) AS RuralPopulationPercentage\nFROM Indicators\nWHERE IndicatorName = 'Rural population (% of total population)'",
    "2220": "SELECT COUNT(*) AS NumberOfCountries, LongName\nFROM Country\nWHERE LatestPopulationCensus = '2011'\nGROUP BY LongName",
    "2221": "SELECT Value \nFROM Indicators \nWHERE CountryCode = (SELECT CountryCode FROM Country WHERE ShortName = 'Italy') \nAND IndicatorName = 'Agricultural land (sq. km)' \nAND Year = 1968",
    "2222": "SELECT \n    I.CountryName, \n    I.Year, \n    MAX(I.Value) AS MaxValue\nFROM \n    Indicators I\nJOIN \n    Country C ON I.CountryCode = C.CountryCode\nWHERE \n    C.Region = 'Sub-Saharan Africa' \n    AND I.IndicatorName = 'Out-of-school children of primary school age, female (number)'",
    "2223": "SELECT Indicators.IndicatorCode\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nJOIN Series ON Indicators.IndicatorCode = Series.SeriesCode\nWHERE Indicators.Year = 1965\nAND Series.IndicatorName = 'Number of infant deaths'\nAND Country.LongName = 'Islamic State of Afghanistan'",
    "2224": "SELECT COUNT(*) AS NumberOfCountries\nFROM Country\nWHERE SystemOfNationalAccounts = '1968 System of National Accounts methodology'\nAND Region = 'Middle East & North Africa';\n\nSELECT CountryName\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'CO2 emissions from solid fuel consumption (kt)'\nAND Country.SystemOfNationalAccounts = '1968 System of National Accounts methodology'\nAND Country.Region = 'Middle East & North Africa'\nORDER BY Value DESC\nLIMIT 1;",
    "2225": "SELECT IndicatorCode \nFROM Indicators \nJOIN Country ON Indicators.CountryCode = Country.CountryCode \nWHERE Country.LongName = 'Republic of Albania' AND Indicators.Year = 1960",
    "2226": "SELECT Country.LendingCategory\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE Indicators.IndicatorName = 'Cereal production (metric tons)'\nAND Indicators.Year = 1966\nAND Indicators.Value > 6140000",
    "2227": "SELECT CountryName, Region\nFROM (\n    SELECT I.CountryCode, C.CountryName, C.Region, COUNT(*) AS ConsecutiveYears\n    FROM Indicators I\n    JOIN Country C ON I.CountryCode = C.CountryCode\n    WHERE I.IndicatorName = 'Population in largest city'\n    AND I.Year BETWEEN 1960 AND 1978\n    GROUP BY I.CountryCode\n    HAVING ConsecutiveYears = 19\n    ORDER BY MAX(I.Value) DESC\n    LIMIT 1\n)",
    "2228": "SELECT \n    SUM(Value) AS Total_CO2_Emission_Kiloton, \n    Year, \n    MAX(Value) OVER () AS Highest_CO2_Emission\nFROM \n    Indicators\nWHERE \n    IndicatorName LIKE 'CO2%' \n    AND Year BETWEEN 1975 AND 1980\nGROUP BY \n    Year\nORDER BY \n    Value DESC\nLIMIT 1;",
    "2229": "SELECT \n    i.CountryCode, \n    c.IncomeGroup, \n    i.Value AS LandArea\nFROM \n    Indicators i\nJOIN \n    Country c ON i.CountryCode = c.CountryCode\nWHERE \n    i.IndicatorName = 'Land area (sq. km)' AND \n    i.Year BETWEEN 1961 AND 1979\nGROUP BY \n    i.CountryCode\nHAVING \n    COUNT(i.Year) = 19\nORDER BY \n    i.Value ASC\nLIMIT 1;",
    "2230": "SELECT AVG(Value) AS AveragePassengers, c.SystemOfTrade\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Air transport, passengers carried'\nAND i.Year BETWEEN 1970 AND 1980\nAND c.LongName = 'Bulgaria'",
    "2231": "SELECT LatestHouseholdSurvey\nFROM Country\nWHERE ShortName = 'Angola'",
    "2232": "SELECT COUNT(*) AS NumberOfCountries\nFROM Country\nWHERE Region = 'North America' AND VitalRegistrationComplete = 'Yes';",
    "2233": "SELECT Year \nFROM Indicators \nWHERE CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A') \nAND IndicatorCode = (SELECT SeriesCode FROM Series WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)')",
    "2234": "SELECT c.LongName\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Arms exports (SIPRI trend indicator values)'\nAND i.Year = 1960\nAND i.Value = 3000000",
    "2235": "SELECT Country.Alpha2Code\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE Indicators.IndicatorName = 'Rural population' AND Indicators.Year = 1960",
    "2236": "SELECT c.SpecialNotes\nFROM Indicators i\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'\nAND i.Year = 1960\nORDER BY i.Value DESC\nLIMIT 1",
    "2237": "SELECT \n    (SELECT SUM(Value) FROM Indicators WHERE Year = 1961 AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%' AND CountryCode IN (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A')) - \n    (SELECT SUM(Value) FROM Indicators WHERE Year = 1960 AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%' AND CountryCode IN (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A')) AS Increase",
    "2238": "SELECT cn.Description\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nJOIN Series s ON cn.Seriescode = s.SeriesCode\nWHERE c.ShortName = 'Australia' AND s.SeriesCode = 'SP.ADO.TFRT'",
    "2239": "SELECT cn.Description\nFROM CountryNotes cn\nJOIN Country c ON cn.Countrycode = c.CountryCode\nJOIN Series s ON cn.Seriescode = s.SeriesCode\nWHERE c.ShortName = 'Aruba' AND s.Topic LIKE 'Environment: Energy production & use'",
    "2240": "SELECT DISTINCT cn.Countrycode\nFROM CountryNotes cn\nWHERE cn.Seriescode = 'BX.KLT.DINV.CD.WD'",
    "2241": "SELECT c.Region\nFROM Country c\nJOIN CountryNotes cn ON c.CountryCode = cn.Countrycode\nJOIN Series s ON cn.Seriescode = s.SeriesCode\nWHERE s.IndicatorName = 'Inflation, consumer prices (annual %)'",
    "2242": "SELECT COUNT(DISTINCT cn.Countrycode) AS NumberOfCountriesWithNotes\nFROM CountryNotes cn\nJOIN Series s ON cn.Seriescode = s.SeriesCode\nWHERE s.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'",
    "2243": "SELECT s.AggregationMethod\nFROM Indicators i\nJOIN Series s ON i.IndicatorCode = s.SeriesCode\nJOIN Country c ON i.CountryCode = c.CountryCode\nWHERE i.Year = 1960\nAND i.Value = 133\nAND c.ShortName = 'Arab World'",
    "2244": "SELECT Value \nFROM Indicators \nJOIN Series ON Indicators.IndicatorCode = Series.SeriesCode \nWHERE Series.LongDefinition = \"Adolescent fertility rate is the number of births per 1,000 women ages 15-19.\" \nAND Indicators.Year = 1960 \nAND Indicators.CountryCode = (SELECT CountryCode FROM Country WHERE LongName = \"Arab World\")",
    "2245": "SELECT \n    ((SUM(CASE WHEN Year = 1961 THEN Value ELSE 0 END) - SUM(CASE WHEN Year = 1960 THEN Value ELSE 0 END)) / SUM(CASE WHEN Year = 1960 THEN Value ELSE 0 END)) * 100 AS PercentageIncrease\nFROM \n    Indicators\nJOIN \n    Country ON Indicators.CountryCode = Country.CountryCode\nWHERE \n    Country.Alpha2Code = '1A'\n    AND Indicators.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'\n    AND Year IN (1960, 1961)",
    "2246": "SELECT AVG(Value) AS AverageAdolescentFertilityRate\nFROM Indicators\nJOIN Country ON Indicators.CountryCode = Country.CountryCode\nWHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND Country.Alpha2Code = '1A'",
    "2247": "SELECT DISTINCT m2d.directorid\nFROM \"u2base\" u2b\nJOIN \"movies2directors\" m2d ON u2b.movieid = m2d.movieid\nWHERE CAST(u2b.rating AS INTEGER) > 4",
    "2248": "SELECT COUNT(*) \nFROM u2base \nJOIN users ON u2base.userid = users.userid \nWHERE u2base.rating = '5' AND users.u_gender = 'M'",
    "2249": "SELECT DISTINCT m2d.genre\nFROM movies2actors m2a\nJOIN movies2directors m2d ON m2a.movieid = m2d.movieid\nWHERE m2a.actorid = 851 AND m2a.cast_num = 1",
    "2250": "SELECT COUNT(DISTINCT movies.movieid) AS NumberOfMovies\nFROM movies\nJOIN u2base ON movies.movieid = u2base.movieid\nWHERE movies.country = 'USA'\nAND CAST(u2base.rating AS INTEGER) < 3",
    "2251": "SELECT COUNT(*) AS drama_movies_from_france\nFROM movies\nJOIN movies2directors ON movies.movieid = movies2directors.movieid\nWHERE movies.country = 'France' AND movies2directors.genre = 'drama'",
    "2252": "SELECT occupation, COUNT(*) as count\nFROM users\nWHERE userid IN (\n    SELECT userid\n    FROM u2base\n    WHERE CAST(rating AS INTEGER) <= 2\n)\nGROUP BY occupation\nORDER BY count DESC;",
    "2253": "SELECT m.movieid, m.country, AVG(CAST(u.rating AS INTEGER)) as avg_rating\nFROM movies m\nJOIN u2base u ON m.movieid = u.movieid\nWHERE m.country = 'USA'\nGROUP BY m.movieid\nORDER BY avg_rating DESC\nLIMIT 10;",
    "2254": "SELECT AVG(cast_count) AS avg_casts_per_movie\nFROM (\n    SELECT m.movieid, COUNT(ma.actorid) AS cast_count\n    FROM movies m\n    JOIN movies2actors ma ON m.movieid = ma.movieid\n    WHERE m.country = 'USA'\n    GROUP BY m.movieid\n)",
    "2255": "SELECT movies.movieid, COUNT(u2base.rating) AS rating_count\nFROM movies\nJOIN u2base ON movies.movieid = u2base.movieid\nWHERE movies.isEnglish = 'F'\nGROUP BY movies.movieid\nORDER BY rating_count DESC\nLIMIT 5",
    "2256": "SELECT COUNT(DISTINCT a.actorid) AS best_actors_with_rating_5\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN u2base u ON m2a.movieid = u.movieid\nWHERE u.rating = '5'",
    "2257": "SELECT AVG(CAST(rating AS INTEGER)) AS avg_rating\nFROM u2base\nJOIN movies ON u2base.movieid = movies.movieid\nWHERE country = 'France' AND year = 4",
    "2258": "SELECT COUNT(DISTINCT m.movieid) AS NumberOfMovies\nFROM movies m\nJOIN u2base u ON m.movieid = u.movieid\nWHERE m.country = 'UK' AND m.runningtime < 120",
    "2259": "SELECT u.userid\nFROM users u\nJOIN u2base ub ON u.userid = ub.userid\nJOIN movies m ON ub.movieid = m.movieid\nWHERE u.u_gender = 'M' AND ub.rating < '3' AND m.country = 'France' AND m.runningtime = 2",
    "2260": "SELECT COUNT(DISTINCT a.actorid) \nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN u2base u ON m2a.movieid = u.movieid\nWHERE a.a_quality = 0 AND a.a_gender = 'female' AND CAST(u.rating AS INTEGER) > 3",
    "2261": "SELECT userid\nFROM u2base\nWHERE rating = '5'\nGROUP BY userid\nORDER BY COUNT(rating) DESC\nLIMIT 1",
    "2262": "SELECT DISTINCT a.actorid\nFROM actors a\nJOIN movies2actors ma ON a.actorid = ma.actorid\nJOIN movies2directors md ON ma.movieid = md.movieid\nWHERE md.directorid = 22397",
    "2263": "SELECT a.actorid AS id, 'Actor' AS role\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN movies2directors m2d ON m2a.movieid = m2d.movieid\nWHERE m2d.genre = 'Action'\nUNION\nSELECT d.directorid AS id, 'Director' AS role\nFROM directors d\nJOIN movies2directors m2d ON d.directorid = m2d.directorid\nWHERE m2d.genre = 'Action'",
    "2264": "SELECT COUNT(DISTINCT actors.actorid) AS female_actors_count\nFROM actors\nJOIN movies2actors ON actors.actorid = movies2actors.actorid\nJOIN movies ON movies.movieid = movies2actors.movieid\nWHERE actors.a_gender = 'F' AND movies.year = 4;",
    "2265": "SELECT DISTINCT a.actorid\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN movies m ON m2a.movieid = m.movieid\nWHERE a.a_quality = 3 AND m.isEnglish = 'T' AND m.country = 'USA'",
    "2266": "SELECT m.movieid\nFROM movies m\nJOIN movies2directors m2d ON m.movieid = m2d.movieid\nJOIN directors d ON m2d.directorid = d.directorid\nWHERE m.runningtime = 3 AND d.avg_revenue = 1",
    "2267": "SELECT DISTINCT m2d.genre\nFROM \"movies2directors\" AS m2d\nJOIN \"movies\" AS m ON m2d.movieid = m.movieid\nWHERE m.country = 'UK'",
    "2268": "SELECT genre, COUNT(*) AS genre_count\nFROM u2base\nJOIN users ON u2base.userid = users.userid\nJOIN movies2directors ON u2base.movieid = movies2directors.movieid\nWHERE age = '18'\nGROUP BY genre\nORDER BY genre_count DESC\nLIMIT 1;",
    "2269": "SELECT a.actorid\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN movies m ON m2a.movieid = m.movieid\nJOIN u2base u ON m.movieid = u.movieid\nJOIN users us ON u.userid = us.userid\nWHERE us.occupation = '5'\nGROUP BY a.actorid\nORDER BY COUNT(u.userid) DESC\nLIMIT 1",
    "2270": "SELECT DISTINCT age\nFROM users\nJOIN u2base ON users.userid = u2base.userid\nWHERE rating = '3'",
    "2271": "-- Hypothetical SQL assuming additional tables or columns exist linking directors to countries and genres clearly identified as \"Action\"\nSELECT d.country, COUNT(*) AS NumberOfActionMovies\nFROM directors d\nJOIN movies2directors m2d ON d.directorid = m2d.directorid\nWHERE m2d.genre = 'Action'\nGROUP BY d.country\nORDER BY NumberOfActionMovies DESC\nLIMIT 1;",
    "2272": "SELECT m2a.movieid\nFROM movies2actors m2a\nINNER JOIN (\n    SELECT actorid\n    FROM actors\n    ORDER BY a_quality DESC\n    LIMIT 5\n) top_actors ON m2a.actorid = top_actors.actorid",
    "2273": "SELECT m.movieid\nFROM movies m\nJOIN movies2directors md ON m.movieid = md.movieid\nWHERE m.isEnglish = 'F' AND m.country = 'UK' AND md.genre = 'Adventure'\nLIMIT 5;",
    "2274": "SELECT \n    (COUNT(DISTINCT CASE WHEN u.u_gender = 'F' THEN u.userid END) * 1.0 / COUNT(DISTINCT u.userid)) * 100 AS percentage_female_audiences_with_rating_2\nFROM \n    u2base AS ub\nINNER JOIN \n    users AS u ON ub.userid = u.userid\nWHERE \n    ub.rating = '2'",
    "2275": "SELECT \n    SUM(CASE WHEN u.u_gender = 'F' THEN 1 ELSE 0 END) - SUM(CASE WHEN u.u_gender = 'M' THEN 1 ELSE 0 END) AS gender_difference\nFROM \n    u2base AS ub\nINNER JOIN \n    users AS u ON ub.userid = u.userid\nINNER JOIN \n    movies2directors AS m2d ON ub.movieid = m2d.movieid\nWHERE \n    m2d.genre = 'horror'",
    "2276": "SELECT DISTINCT m2d.genre\nFROM movies2directors AS m2d\nJOIN movies AS m\nON m2d.movieid = m.movieid\nWHERE m.year = 4 AND m.isEnglish = 'T'",
    "2277": "SELECT COUNT(*) \nFROM \"movies\" \nJOIN \"movies2directors\" ON movies.movieid = movies2directors.movieid \nWHERE country = 'USA' \nAND isEnglish = 'F' \nAND genre = 'action';",
    "2278": "SELECT COUNT(*) AS highest_rating_count\nFROM u2base\nJOIN users ON u2base.userid = users.userid\nWHERE users.u_gender = 'M' AND users.age <= '18' AND u2base.rating = (SELECT MAX(rating) FROM u2base)",
    "2279": "SELECT movieid\nFROM u2base\nJOIN users ON u2base.userid = users.userid\nWHERE u_gender = 'F'\nGROUP BY movieid\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "2280": "SELECT COUNT(DISTINCT movieid) AS UK_Movies_With_Highest_Rating\nFROM u2base\nJOIN movies ON u2base.movieid = movies.movieid\nWHERE rating = (SELECT MAX(rating) FROM u2base)\nAND country = 'UK'",
    "2281": "SELECT movieid \nFROM movies \nJOIN u2base ON movies.movieid = u2base.movieid \nWHERE year = 4 AND rating = '1'",
    "2282": "SELECT COUNT(*) \nFROM movies \nJOIN u2base ON movies.movieid = u2base.movieid \nWHERE isEnglish = 'T' AND year = 1 AND rating = '1'",
    "2283": "SELECT COUNT(DISTINCT u.userid) \nFROM users u\nJOIN u2base ub ON u.userid = ub.userid\nJOIN movies m ON ub.movieid = m.movieid\nWHERE u.u_gender = 'F' AND m.country = 'France'",
    "2284": "SELECT COUNT(DISTINCT directorid) \nFROM \"movies2directors\" \nWHERE d_quality = 4 AND genre = 'action';",
    "2285": "SELECT m2d.genre\nFROM movies2directors AS m2d\nJOIN directors AS d ON m2d.directorid = d.directorid\nWHERE d.avg_revenue = (SELECT MAX(avg_revenue) FROM directors)",
    "2286": "SELECT COUNT(DISTINCT m.movieid) AS total_movies\nFROM movies m\nJOIN movies2actors m2a ON m.movieid = m2a.movieid\nJOIN actors a ON m2a.actorid = a.actorid\nWHERE m.isEnglish = 'T' AND a.a_gender = 'M' AND a.a_quality = (SELECT MAX(a_quality) FROM actors WHERE a_gender = 'M');",
    "2287": "SELECT DISTINCT m.country\nFROM movies m\nJOIN movies2actors m2a ON m.movieid = m2a.movieid\nJOIN actors a ON m2a.actorid = a.actorid\nWHERE a.a_gender = 'female' AND a.a_quality = 0",
    "2288": "SELECT MAX(avg_rating) AS highest_avg_rating\nFROM (\n    SELECT m.movieid, AVG(CAST(u.rating AS FLOAT)) AS avg_rating\n    FROM movies m\n    JOIN movies2directors md ON m.movieid = md.movieid\n    JOIN u2base u ON m.movieid = u.movieid\n    WHERE m.country = 'USA' AND md.genre = 'action'\n    GROUP BY m.movieid\n)",
    "2289": "SELECT COUNT(DISTINCT movies.movieid) AS NumberOfMovies\nFROM movies\nJOIN movies2directors ON movies.movieid = movies2directors.movieid\nJOIN directors ON movies2directors.directorid = directors.directorid\nLEFT JOIN (\n    SELECT movieid, AVG(CAST(rating AS FLOAT)) AS avg_rating\n    FROM u2base\n    GROUP BY movieid\n) AS movie_ratings ON movies.movieid = movie_ratings.movieid\nWHERE directors.d_quality = 5 AND movie_ratings.avg_rating > 3.5;",
    "2290": "SELECT m.movieid, AVG(CAST(u.rating AS FLOAT)) as avg_rating\nFROM movies m\nJOIN movies2directors md ON m.movieid = md.movieid\nJOIN u2base u ON m.movieid = u.movieid\nWHERE md.genre = 'Adventure'\nGROUP BY m.movieid\nORDER BY avg_rating DESC\nLIMIT 1;",
    "2291": "SELECT COUNT(*) AS female_users_count\nFROM u2base\nJOIN users ON u2base.userid = users.userid\nWHERE u2base.movieid = 2462959 AND users.u_gender = 'F'",
    "2292": "SELECT movieid, COUNT(DISTINCT userid) AS distinct_ratings\nFROM u2base\nJOIN movies ON u2base.movieid = movies.movieid\nWHERE runningtime = 0\nGROUP BY movieid\nORDER BY distinct_ratings DESC\nLIMIT 1;",
    "2293": "SELECT actors.actorid, u2base.rating\nFROM actors\nJOIN movies2actors ON actors.actorid = movies2actors.actorid\nJOIN u2base ON movies2actors.movieid = u2base.movieid\nWHERE movies2actors.movieid = 1722327",
    "2294": "SELECT directors.directorid, COUNT(movies2directors.movieid) AS total_movies\nFROM directors\nJOIN movies2directors ON directors.directorid = movies2directors.directorid\nWHERE directors.d_quality = 5\nGROUP BY directors.directorid\nORDER BY total_movies DESC\nLIMIT 1;",
    "2295": "SELECT COUNT(DISTINCT u2base.movieid) AS drama_movie_count\nFROM u2base\nJOIN movies2directors ON u2base.movieid = movies2directors.movieid\nWHERE movies2directors.genre = 'drama' AND u2base.rating = '3'",
    "2296": "SELECT COUNT(DISTINCT u2base.movieid) AS movies_rated_5_by_25_to_35\nFROM u2base\nJOIN users ON u2base.userid = users.userid\nWHERE u2base.rating = '5'\nAND CAST(users.age AS INTEGER) BETWEEN 25 AND 35",
    "2297": "SELECT m.movieid, m.year, m.country, m.runningtime\nFROM movies m\nJOIN u2base u ON m.movieid = u.movieid\nJOIN movies2directors md ON m.movieid = md.movieid\nWHERE md.genre = 'horror' AND u.rating = '1'",
    "2298": "SELECT DISTINCT d.directorid\nFROM \"directors\" d\nJOIN \"movies2directors\" m2d ON d.directorid = m2d.directorid\nJOIN \"movies\" m ON m2d.movieid = m.movieid\nWHERE m.country = 'France'",
    "2299": "SELECT users.userid, users.age\nFROM users\nJOIN u2base ON users.userid = u2base.userid\nWHERE u2base.movieid = 1695219",
    "2300": "SELECT genre, COUNT(*) AS non_english_count\nFROM movies2directors\nJOIN movies ON movies.movieid = movies2directors.movieid\nWHERE isEnglish = 'F'\nGROUP BY genre\nORDER BY non_english_count DESC\nLIMIT 1;",
    "2301": "SELECT a.actorid, a.a_gender, a.a_quality, 'Actor' AS role\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nWHERE m2a.movieid = 1949144\nUNION ALL\nSELECT d.directorid, '' AS a_gender, d.d_quality AS a_quality, 'Director' AS role\nFROM directors d\nJOIN movies2directors m2d ON d.directorid = m2d.directorid\nWHERE m2d.movieid = 1949144",
    "2302": "To answer the question, we need to follow these steps:\n\n1. Identify movies that are from the UK.\n2. From those movies, find the actors who acted in them.\n3. For each of those actors, check the ratings of the movies they acted in.\n4. Calculate the percentage of actors who received a rating of at least 3.\n\nGiven the complexity of the question and the need to join multiple tables, the SQL query will involve several JOIN operations and a subquery or CTE (Common Table Expression) to calculate the percentage. However, it's important to note that the schema provided does not directly link actors to ratings. Ratings are given to movies by users. Therefore, we cannot directly calculate the percentage of actors who received a rating of at least 3, as ratings apply to movies, not actors.\n\nInstead, we can interpret the question as asking for the percentage of movies acted in by actors in UK movies that received a rating of at least 3. This interpretation aligns with the schema's structure but might not perfectly match the original question due to its ambiguity. Here's how you could approach it:\n\n```sqlite\nWITH UKMovies AS (\n    SELECT movieid\n    FROM movies\n    WHERE country = 'UK'\n),\nActedInUKMovies AS (\n    SELECT DISTINCT a.actorid\n    FROM actors a\n    JOIN movies2actors m2a ON a.actorid = m2a.actorid\n    WHERE m2a.movieid IN (SELECT movieid FROM UKMovies)\n),\nMoviesWithRatings AS (\n    SELECT m2a.movieid\n    FROM movies2actors m2a\n    JOIN ActedInUKMovies auk ON m2a.actorid = auk.actorid\n    JOIN u2base u ON m2a.movieid = u.movieid\n    WHERE CAST(u.rating AS INTEGER) >= 3\n),\nTotalMoviesActedInByUKActors AS (\n    SELECT COUNT(DISTINCT m2a.movieid) AS totalMovies\n    FROM movies2actors m2a\n    JOIN ActedInUKMovies auk ON m2a.actorid = auk.actorid\n),\nMoviesRatedAtLeast3 AS (\n    SELECT COUNT(DISTINCT movieid) AS rated3OrMore\n    FROM MoviesWithRatings\n)\nSELECT (CAST(rated3OrMore AS FLOAT) / totalMovies) * 100 AS percentageOfMoviesRatedAtLeast3\nFROM MoviesRatedAt",
    "2303": "SELECT \n    (COUNT(DISTINCT CASE WHEN avg_revenue > d_quality THEN directors.directorid END) * 1.0 / COUNT(DISTINCT directors.directorid)) * 100 AS proportion\nFROM \n    directors\nJOIN \n    movies2directors ON directors.directorid = movies2directors.directorid\nWHERE \n    movies2directors.genre = 'action'",
    "2304": "SELECT DISTINCT a.actorid\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN movies m ON m2a.movieid = m.movieid\nWHERE m.year = (SELECT MAX(year) FROM movies);",
    "2305": "SELECT a.actorid\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN movies m ON m2a.movieid = m.movieid\nWHERE m.isEnglish = 'T' AND m.runningtime = 2",
    "2306": "SELECT a.actorid\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN movies m ON m2a.movieid = m.movieid\nWHERE m.country = 'France'\nGROUP BY a.actorid\nHAVING COUNT(m.movieid) >= 2",
    "2307": "SELECT COUNT(DISTINCT m.movieid) AS AmericanMoviesWithCastMoreThan1\nFROM movies m\nJOIN movies2actors m2a ON m.movieid = m2a.movieid\nWHERE m.country = 'USA' AND m2a.cast_num > 1;",
    "2308": "SELECT m.movieid\nFROM movies m\nLEFT JOIN movies2actors m2a ON m.movieid = m2a.movieid\nWHERE m2a.movieid IS NULL AND m.year = (SELECT MIN(year) FROM movies)",
    "2309": "SELECT COUNT(DISTINCT a.actorid) \nFROM actors a \nJOIN movies2actors m2a ON a.actorid = m2a.actorid \nJOIN movies m ON m2a.movieid = m.movieid \nWHERE m.country IN ('US', 'UK');",
    "2310": "SELECT COUNT(DISTINCT directorid) \nFROM \"directors\" \nJOIN \"movies2directors\" ON directors.directorid = movies2directors.directorid \nWHERE avg_revenue = 4 AND (genre = 'action' OR genre = 'adventure');",
    "2311": "SELECT d.directorid\nFROM directors d\nJOIN movies2directors m2d ON d.directorid = m2d.directorid\nWHERE d.d_quality >= 3\nGROUP BY d.directorid\nHAVING COUNT(DISTINCT m2d.genre) >= 2",
    "2312": "SELECT COUNT(*) AS American_Comedies\nFROM movies\nJOIN movies2directors ON movies.movieid = movies2directors.movieid\nWHERE movies.country = 'USA' AND movies2directors.genre = 'comedy';",
    "2313": "SELECT COUNT(DISTINCT movieid) AS latest_released_dramas_and_actions\nFROM movies\nJOIN movies2directors ON movies.movieid = movies2directors.movieid\nWHERE genre IN ('drama', 'action')\nAND year = (\n    SELECT MAX(year) FROM movies\n    JOIN movies2directors ON movies.movieid = movies2directors.movieid\n    WHERE genre IN ('drama', 'action')\n)",
    "2314": "SELECT movieid\nFROM \"movies2directors\"\nWHERE genre = 'horror' AND movieid IN (SELECT movieid FROM \"movies\" WHERE runningtime >= 2)",
    "2315": "SELECT \n    (COUNT(CASE WHEN u2base.rating = '1' THEN 1 END) * 1.0 / COUNT(*) * 100) AS negative_critical_reception_percentage\nFROM \n    u2base\nJOIN \n    movies ON u2base.movieid = movies.movieid\nWHERE \n    movies.country = 'USA'",
    "2316": "SELECT COUNT(DISTINCT m2d.movieid) AS num_comedy_films_with_rating_1\nFROM u2base u2\nJOIN movies2directors m2d ON u2.movieid = m2d.movieid\nWHERE m2d.genre = 'comedy' AND u2.rating = '1'",
    "2317": "SELECT AVG(d.avg_revenue) AS average_revenue_status\nFROM directors d\nJOIN movies2directors m2d ON d.directorid = m2d.directorid\nJOIN (\n    SELECT movieid, COUNT(*) AS num_1_ratings\n    FROM u2base\n    WHERE rating = '1'\n    GROUP BY movieid\n    ORDER BY num_1_ratings DESC\n    LIMIT 1\n) AS most_1_ratings_movies ON m2d.movieid = most_1_ratings_movies.movieid",
    "2318": "SELECT COUNT(DISTINCT movieid) AS NumberOfFrenchMoviesWithHighestRating\nFROM u2base\nJOIN movies ON u2base.movieid = movies.movieid\nWHERE rating = (SELECT MAX(CAST(rating AS INTEGER)) FROM u2base)\nAND country = 'France'",
    "2319": "SELECT m.movieid, COUNT(u.userid) AS rating_count\nFROM movies m\nJOIN u2base u ON m.movieid = u.movieid\nJOIN users us ON u.userid = us.userid\nWHERE us.age = '25'\nGROUP BY m.movieid\nORDER BY rating_count DESC\nLIMIT 1;",
    "2320": "SELECT COUNT(DISTINCT u.userid) \nFROM users u\nJOIN u2base ub ON u.userid = ub.userid\nJOIN movies m ON ub.movieid = m.movieid\nWHERE u.age = '35' AND m.country = 'UK'",
    "2321": "SELECT userid, age\nFROM u2base\nJOIN users ON u2base.userid = users.userid\nWHERE rating = '2' AND movieid = 2409051",
    "2322": "SELECT movieid\nFROM u2base\nWHERE movieid IN (SELECT movieid FROM movies WHERE year = (SELECT MIN(year) FROM movies))\nGROUP BY movieid\nORDER BY COUNT(rating) DESC\nLIMIT 1",
    "2323": "SELECT m.movieid, m.year, m.isEnglish, m.country, m.runningtime, AVG(CAST(u.rating AS INTEGER)) AS avg_rating\nFROM movies m\nJOIN u2base u ON m.movieid = u.movieid\nWHERE m.country = 'France'\nGROUP BY m.movieid\nORDER BY avg_rating ASC\nLIMIT 1;",
    "2324": "SELECT COUNT(DISTINCT actors.actorid) AS female_actors_count\nFROM actors\nJOIN movies2actors ON actors.actorid = movies2actors.actorid\nJOIN movies ON movies2actors.movieid = movies.movieid\nWHERE actors.a_gender = 'F' AND movies.country IN ('French', 'USA')",
    "2325": "SELECT COUNT(DISTINCT a.actorid) AS num_actors\nFROM actors a\nJOIN movies2actors m2a ON a.actorid = m2a.actorid\nJOIN (\n    SELECT movieid\n    FROM u2base\n    WHERE rating = '5'\n    GROUP BY movieid\n) highest_rated_movies ON m2a.movieid = highest_rated_movies.movieid",
    "2326": "SELECT m.movieid, m.title, AVG(CAST(u.rating AS FLOAT)) AS avg_rating\nFROM movies2directors md\nJOIN u2base u ON md.movieid = u.movieid\nJOIN movies m ON m.movieid = md.movieid\nWHERE md.genre = 'Crime'\nGROUP BY m.movieid, m.title\nORDER BY avg_rating ASC\nLIMIT 1;",
    "2327": "SELECT \n    SUM(CASE WHEN a.a_gender = 'M' THEN 1 ELSE 0 END) * 1.0 / \n    SUM(CASE WHEN a.a_gender = 'F' THEN 1 ELSE 0 END) AS gender_ratio\nFROM \n    movies m\nJOIN \n    movies2actors m2a ON m.movieid = m2a.movieid\nJOIN \n    actors a ON m2a.actorid = a.actorid\nWHERE \n    m.country = 'UK'",
    "2328": "SELECT COUNT(*) \nFROM u2base \nJOIN users ON u2base.userid = users.userid \nWHERE users.age = '35' \nAND users.u_gender = 'F' \nAND u2base.movieid = 1711133 \nAND u2base.rating = '3'",
    "2329": "SELECT COUNT(DISTINCT u2base.userid) \nFROM u2base\nJOIN movies ON u2base.movieid = movies.movieid\nWHERE movies.country = 'UK' \nAND movies.year = 2 \nAND movies.runningtime = 2 \nAND u2base.rating = '1'",
    "2330": "SELECT DISTINCT d.directorid\nFROM directors d\nWHERE d.d_quality = 3\nAND d.directorid NOT IN (\n    SELECT md.directorid\n    FROM movies2directors md\n    WHERE md.genre = 'Comedy'\n)",
    "2331": "SELECT \n    (CAST(SUM(CASE WHEN a.a_gender = 'F' AND m2a.cast_num = 2 AND a.a_quality = 2 THEN 1 ELSE 0 END) AS FLOAT) / \n    SUM(CASE WHEN a.a_gender = 'F' THEN 1 ELSE 0 END)) * 100 AS percentage_female_actors_quality_2_cast_2\nFROM \n    \"actors\" a\nJOIN \n    \"movies2actors\" m2a ON a.actorid = m2a.actorid\nWHERE \n    m2a.movieid = 1672580",
    "2332": "SELECT \n    SUM(CASE WHEN a_gender = 'M' THEN 1 ELSE 0 END) AS Men,\n    SUM(CASE WHEN a_gender = 'F' THEN 1 ELSE 0 END) AS Women\nFROM actors\nWHERE a_quality = 0",
    "2333": "SELECT actorid, COUNT(movieid) AS num_movies\nFROM movies2actors\nGROUP BY actorid\nORDER BY num_movies DESC\nLIMIT 1;",
    "2334": "SELECT genre, COUNT(genre) AS genre_count\nFROM \"movies2directors\"\nGROUP BY genre\nORDER BY genre_count DESC\nLIMIT 1;",
    "2335": "SELECT genre, COUNT(genre) AS genre_count\nFROM movies2directors\nJOIN directors ON movies2directors.directorid = directors.directorid\nWHERE d_quality = 0\nGROUP BY genre\nORDER BY genre_count DESC",
    "2336": "SELECT movieid\nFROM u2base\nJOIN movies ON u2base.movieid = movies.movieid\nWHERE isEnglish = 'F' AND country = 'USA'\nORDER BY rating ASC\nLIMIT 1",
    "2337": "SELECT AVG(avg_revenue) AS total_average_revenue\nFROM directors\nWHERE d_quality = 4 AND avg_revenue = 4",
    "2338": "SELECT m.movieid, m.year, m.isEnglish, m.country, m.runningtime\nFROM movies m\nJOIN u2base u ON m.movieid = u.movieid\nJOIN users us ON u.userid = us.userid\nWHERE us.u_gender = 'F' AND us.occupation = '3'\nORDER BY u.rating DESC",
    "2339": "SELECT COUNT(a.actorid) AS female_actress_count, m.country, m.runningtime\nFROM movies m\nJOIN movies2actors ma ON m.movieid = ma.movieid\nJOIN actors a ON ma.actorid = a.actorid\nWHERE m.movieid = 2312852 AND a.a_gender = 'F'",
    "2340": "SELECT COUNT(*) AS horror_movies_by_worst_directors\nFROM \"movies2directors\" AS m2d\nJOIN \"directors\" AS d ON m2d.directorid = d.directorid\nWHERE m2d.genre = 'horror' AND d.d_quality = 0;",
    "2341": "SELECT DISTINCT m2d.genre\nFROM movies2directors AS m2d\nJOIN movies AS m ON m.movieid = m2d.movieid\nWHERE m.isEnglish = 'T' AND m.runningtime <= 120 AND m.country != 'USA'",
    "2342": "SELECT m.movieid, m.year, COUNT(*) AS HighestRatedMoviesCount\nFROM movies m\nJOIN movies2directors m2d ON m.movieid = m2d.movieid\nJOIN u2base u ON m.movieid = u.movieid\nJOIN users us ON u.userid = us.userid\nWHERE m.isEnglish = 'Yes' -- Assuming 'Yes' indicates English movies\n  AND m.country = 'UK'\n  AND m.runningtime = 180 -- Assuming running time is in minutes and 3 hours = 180 minutes\n  AND m2d.genre = 'Comedy'\n  AND us.age BETWEEN '45' AND '50' -- Assuming age is stored in a way that allows this comparison\nGROUP BY m.movieid, m.year\nORDER BY HighestRatedMoviesCount DESC\nLIMIT 1; -- Assuming we want the single highest-rated movie; adjust as needed for ties or multiple results",
    "2343": "SELECT \n    ((CAST(SUM(CASE WHEN isEnglish = 'T' THEN 1 ELSE 0 END) AS REAL) - \n    SUM(CASE WHEN isEnglish = 'F' THEN 1 ELSE 0 END)) / \n    COUNT(*) * 100) AS percentage_difference\nFROM movies\nJOIN movies2directors ON movies.movieid = movies2directors.movieid\nWHERE genre = 'crime' AND country != 'USA' AND year = 3",
    "2344": "SELECT \n    SUM(CASE WHEN a.a_gender = 'F' THEN 1 ELSE 0 END) AS total_female_actors,\n    SUM(CASE WHEN a.a_gender = 'M' THEN 1 ELSE 0 END) AS total_male_actors,\n    ROUND(\n        (SUM(CASE WHEN a.a_quality = 5 THEN 1.0 ELSE 0 END) / SUM(CASE WHEN a.a_quality = 0 THEN 1.0 ELSE 0 END)) * 100, \n        2\n    ) AS high_quality_vs_worst_quality_percentage,\n    d.directorid,\n    md.genre\nFROM \n    \"movies2actors\" ma\nJOIN \n    \"actors\" a ON ma.actorid = a.actorid\nJOIN \n    \"movies2directors\" md ON ma.movieid = md.movieid\nJOIN \n    \"directors\" d ON md.directorid = d.directorid\nWHERE \n    ma.movieid = 1684910\nGROUP BY \n    d.directorid, md.genre",
    "2345": "SELECT p.\"Product Name\"\nFROM central_superstore c\nJOIN product p ON c.\"Product ID\" = p.\"Product ID\" AND c.Region = p.Region\nWHERE c.\"Order ID\" = 'CA-2011-112326' AND c.Region = 'Central'",
    "2346": "SELECT MAX(julianday(\"Ship Date\") - julianday(\"Order Date\")) AS LongestShipmentTime\nFROM (\n    SELECT \"Order Date\", \"Ship Date\"\n    FROM central_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    UNION ALL\n    SELECT \"Order Date\", \"Ship Date\"\n    FROM east_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    UNION ALL\n    SELECT \"Order Date\", \"Ship Date\"\n    FROM south_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    UNION ALL\n    SELECT \"Order Date\", \"Ship Date\"\n    FROM west_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n)",
    "2347": "SELECT COUNT(*) AS slowest_delivery_orders\nFROM (\n    SELECT * FROM central_superstore\n    UNION ALL\n    SELECT * FROM east_superstore\n    UNION ALL\n    SELECT * FROM south_superstore\n    UNION ALL\n    SELECT * FROM west_superstore\n) AS all_orders\nJOIN people ON all_orders.\"Customer ID\" = people.\"Customer ID\" AND all_orders.Region = people.Region\nWHERE people.\"Customer Name\" = 'Aimee Bixby' AND all_orders.\"Ship Mode\" = 'Standard Class'",
    "2348": "SELECT COUNT(*) AS \"Number of Orders\"\nFROM (\n    SELECT \"Order ID\" FROM central_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    UNION ALL\n    SELECT \"Order ID\" FROM east_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    UNION ALL\n    SELECT \"Order ID\" FROM south_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    UNION ALL\n    SELECT \"Order ID\" FROM west_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n)",
    "2349": "SELECT \"Order ID\"\nFROM (\n    SELECT cs.\"Order ID\", COUNT(DISTINCT cs.\"Product ID\") AS ProductCount\n    FROM central_superstore cs\n    JOIN people p ON cs.\"Customer ID\" = p.\"Customer ID\" AND cs.Region = p.Region\n    WHERE p.\"Customer Name\" = 'Aimee Bixby'\n    GROUP BY cs.\"Order ID\"\n    UNION ALL\n    SELECT es.\"Order ID\", COUNT(DISTINCT es.\"Product ID\") AS ProductCount\n    FROM east_superstore es\n    JOIN people p ON es.\"Customer ID\" = p.\"Customer ID\" AND es.Region = p.Region\n    WHERE p.\"Customer Name\" = 'Aimee Bixby'\n    GROUP BY es.\"Order ID\"\n    UNION ALL\n    SELECT ss.\"Order ID\", COUNT(DISTINCT ss.\"Product ID\") AS ProductCount\n    FROM south_superstore ss\n    JOIN people p ON ss.\"Customer ID\" = p.\"Customer ID\" AND ss.Region = p.Region\n    WHERE p.\"Customer Name\" = 'Aimee Bixby'\n    GROUP BY ss.\"Order ID\"\n    UNION ALL\n    SELECT ws.\"Order ID\", COUNT(DISTINCT ws.\"Product ID\") AS ProductCount\n    FROM west_superstore ws\n    JOIN people p ON ws.\"Customer ID\" = p.\"Customer ID\" AND ws.Region = p.Region\n    WHERE p.\"Customer Name\" = 'Aimee Bixby'\n    GROUP BY ws.\"Order ID\"\n) AS Orders\nWHERE ProductCount > 3",
    "2350": "SELECT COUNT(DISTINCT central_superstore.\"Order ID\") AS Furniture_Orders\nFROM central_superstore\nJOIN people ON central_superstore.\"Customer ID\" = people.\"Customer ID\"\n            AND central_superstore.Region = people.Region\nJOIN product ON central_superstore.\"Product ID\" = product.\"Product ID\"\n             AND central_superstore.Region = product.Region\nWHERE people.\"Customer Name\" = 'Aimee Bixby'\nAND product.Category = 'Furniture'\nUNION ALL\nSELECT COUNT(DISTINCT east_superstore.\"Order ID\")\nFROM east_superstore\nJOIN people ON east_superstore.\"Customer ID\" = people.\"Customer ID\"\n            AND east_superstore.Region = people.Region\nJOIN product ON east_superstore.\"Product ID\" = product.\"Product ID\"\n             AND east_superstore.Region = product.Region\nWHERE people.\"Customer Name\" = 'Aimee Bixby'\nAND product.Category = 'Furniture'\nUNION ALL\nSELECT COUNT(DISTINCT south_superstore.\"Order ID\")\nFROM south_superstore\nJOIN people ON south_superstore.\"Customer ID\" = people.\"Customer ID\"\n            AND south_superstore.Region = people.Region\nJOIN product ON south_superstore.\"Product ID\" = product.\"Product ID\"\n             AND south_superstore.Region = product.Region\nWHERE people.\"Customer Name\" = 'Aimee Bixby'\nAND product.Category = 'Furniture'\nUNION ALL\nSELECT COUNT(DISTINCT west_superstore.\"Order ID\")\nFROM west_superstore\nJOIN people ON west_superstore.\"Customer ID\" = people.\"Customer ID\"\n            AND west_superstore.Region = people.Region\nJOIN product ON west_superstore.\"Product ID\" = product.\"Product ID\"\n             AND west_superstore.Region = product.Region\nWHERE people.\"Customer Name\" = 'Aimee Bixby'\nAND product.Category = 'Furniture';",
    "2351": "SELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN central_superstore cs ON pe.\"Customer ID\" = cs.\"Customer ID\" AND pe.Region = cs.Region\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Aimee Bixby' AND strftime('%Y', cs.\"Order Date\") = '2016'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN east_superstore es ON pe.\"Customer ID\" = es.\"Customer ID\" AND pe.Region = es.Region\nJOIN product p ON es.\"Product ID\" = p.\"Product ID\" AND es.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Aimee Bixby' AND strftime('%Y', es.\"Order Date\") = '2016'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN south_superstore ss ON pe.\"Customer ID\" = ss.\"Customer ID\" AND pe.Region = ss.Region\nJOIN product p ON ss.\"Product ID\" = p.\"Product ID\" AND ss.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Aimee Bixby' AND strftime('%Y', ss.\"Order Date\") = '2016'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN west_superstore ws ON pe.\"Customer ID\" = ws.\"Customer ID\" AND pe.Region = ws.Region\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Aimee Bixby' AND strftime('%Y', ws.\"Order Date\") = '2016';",
    "2352": "SELECT SUM(Quantity) AS Total_Quantity\nFROM central_superstore\nJOIN product ON central_superstore.\"Product ID\" = product.\"Product ID\" AND central_superstore.Region = product.Region\nWHERE product.\"Product Name\" = 'Telescoping Adjustable Floor Lamp' AND central_superstore.Region = 'Central'",
    "2353": "SELECT DISTINCT p.\"Customer Name\"\nFROM people p\nJOIN central_superstore c ON p.\"Customer ID\" = c.\"Customer ID\" AND p.Region = c.Region\nJOIN product pr ON c.\"Product ID\" = pr.\"Product ID\" AND c.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Telescoping Adjustable Floor Lamp'\nUNION\nSELECT DISTINCT p.\"Customer Name\"\nFROM people p\nJOIN east_superstore e ON p.\"Customer ID\" = e.\"Customer ID\" AND p.Region = e.Region\nJOIN product pr ON e.\"Product ID\" = pr.\"Product ID\" AND e.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Telescoping Adjustable Floor Lamp'\nUNION\nSELECT DISTINCT p.\"Customer Name\"\nFROM people p\nJOIN south_superstore s ON p.\"Customer ID\" = s.\"Customer ID\" AND p.Region = s.Region\nJOIN product pr ON s.\"Product ID\" = pr.\"Product ID\" AND s.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Telescoping Adjustable Floor Lamp'\nUNION\nSELECT DISTINCT p.\"Customer Name\"\nFROM people p\nJOIN west_superstore w ON p.\"Customer ID\" = w.\"Customer ID\" AND p.Region = w.Region\nJOIN product pr ON w.\"Product ID\" = pr.\"Product ID\" AND w.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Telescoping Adjustable Floor Lamp';",
    "2354": "SELECT COUNT(DISTINCT p.\"Customer ID\")\nFROM (\n    SELECT \"Customer ID\", Region\n    FROM central_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Telescoping Adjustable Floor Lamp')\n    UNION ALL\n    SELECT \"Customer ID\", Region\n    FROM east_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Telescoping Adjustable Floor Lamp')\n    UNION ALL\n    SELECT \"Customer ID\", Region\n    FROM south_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Telescoping Adjustable Floor Lamp')\n    UNION ALL\n    SELECT \"Customer ID\", Region\n    FROM west_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Telescoping Adjustable Floor Lamp')\n) AS p\nJOIN people AS pe ON p.\"Customer ID\" = pe.\"Customer ID\" AND p.Region = pe.Region\nWHERE pe.Segment = 'Consumer'",
    "2355": "SELECT Quantity\nFROM (\n    SELECT * FROM central_superstore\n    UNION ALL\n    SELECT * FROM east_superstore\n    UNION ALL\n    SELECT * FROM south_superstore\n    UNION ALL\n    SELECT * FROM west_superstore\n) AS superstore\nJOIN people ON superstore.\"Customer ID\" = people.\"Customer ID\" AND superstore.Region = people.Region\nJOIN product ON superstore.\"Product ID\" = product.\"Product ID\" AND superstore.Region = product.Region\nWHERE \"Customer Name\" = 'Aimee Bixby' AND \"Product Name\" = 'Xerox 1952' AND \"Order Date\" = date('2014-09-10')",
    "2356": "SELECT SUM(Quantity) AS Total_Orders\nFROM (\n    SELECT Quantity FROM central_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    AND \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Xerox 1952')\n    UNION ALL\n    SELECT Quantity FROM east_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    AND \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Xerox 1952')\n    UNION ALL\n    SELECT Quantity FROM south_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    AND \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Xerox 1952')\n    UNION ALL\n    SELECT Quantity FROM west_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Aimee Bixby')\n    AND \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Xerox 1952')\n) AS Orders",
    "2357": "SELECT Sales / (1 - Discount) AS Original_Price\nFROM (\n    SELECT *\n    FROM central_superstore\n    UNION ALL\n    SELECT *\n    FROM east_superstore\n    UNION ALL\n    SELECT *\n    FROM south_superstore\n    UNION ALL\n    SELECT *\n    FROM west_superstore\n) AS all_superstores\nJOIN people ON all_superstores.\"Customer ID\" = people.\"Customer ID\" AND all_superstores.Region = people.Region\nJOIN product ON all_superstores.\"Product ID\" = product.\"Product ID\" AND all_superstores.Region = product.Region\nWHERE \"Customer Name\" = 'Aimee Bixby' AND \"Order Date\" = date('2014-09-10') AND \"Product Name\" = 'Xerox 1952'",
    "2358": "SELECT \n    (Sales / (1 - Discount) * Quantity) - Profit AS total_cost\nFROM \n    (SELECT * FROM central_superstore\n     UNION ALL\n     SELECT * FROM east_superstore\n     UNION ALL\n     SELECT * FROM south_superstore\n     UNION ALL\n     SELECT * FROM west_superstore) AS superstore\nJOIN \n    people ON superstore.\"Customer ID\" = people.\"Customer ID\" AND superstore.Region = people.Region\nJOIN \n    product ON superstore.\"Product ID\" = product.\"Product ID\" AND superstore.Region = product.Region\nWHERE \n    people.\"Customer Name\" = 'Aimee Bixby' \n    AND product.\"Product Name\" = 'Xerox 1952'\n    AND superstore.\"Order Date\" = date('2014-09-10')",
    "2359": "SELECT COUNT(*) AS \"Number of Art Products Ordered in 2013\"\nFROM east_superstore\nJOIN product ON east_superstore.\"Product ID\" = product.\"Product ID\" AND east_superstore.Region = product.Region\nWHERE strftime('%Y', \"Order Date\") = '2013' AND \"Sub-Category\" = 'Art'",
    "2360": "WITH Combined AS (\n    SELECT \"Customer ID\", \"Order ID\", Sales, Quantity, Discount, Profit,\n    (Sales / (1 - Discount) * Quantity - Profit) AS TotalCost\n    FROM central_superstore\n    UNION ALL\n    SELECT \"Customer ID\", \"Order ID\", Sales, Quantity, Discount, Profit,\n    (Sales / (1 - Discount) * Quantity - Profit) AS TotalCost\n    FROM east_superstore\n    UNION ALL\n    SELECT \"Customer ID\", \"Order ID\", Sales, Quantity, Discount, Profit,\n    (Sales / (1 - Discount) * Quantity - Profit) AS TotalCost\n    FROM south_superstore\n    UNION ALL\n    SELECT \"Customer ID\", \"Order ID\", Sales, Quantity, Discount, Profit,\n    (Sales / (1 - Discount) * Quantity - Profit) AS TotalCost\n    FROM west_superstore\n),\nRanked AS (\n    SELECT \"Customer ID\", \"Order ID\", SUM(TotalCost) OVER (PARTITION BY \"Order ID\") AS OrderTotalCost,\n    RANK() OVER (ORDER BY SUM(TotalCost) OVER (PARTITION BY \"Order ID\") DESC) AS Rank\n    FROM Combined\n    GROUP BY \"Order ID\"\n)\nSELECT \"Customer ID\"\nFROM Ranked\nWHERE Rank = 1\nLIMIT 1;",
    "2361": "WITH Combined AS (\n    SELECT \"Product ID\", Region, Sales, Discount FROM central_superstore\n    UNION ALL\n    SELECT \"Product ID\", Region, Sales, Discount FROM east_superstore\n    UNION ALL\n    SELECT \"Product ID\", Region, Sales, Discount FROM south_superstore\n    UNION ALL\n    SELECT \"Product ID\", Region, Sales, Discount FROM west_superstore\n),\nOriginalPrice AS (\n    SELECT \"Product ID\", Region, MAX(Sales / (1 - Discount)) AS MaxOriginalPrice\n    FROM Combined\n    GROUP BY \"Product ID\", Region\n    ORDER BY MaxOriginalPrice DESC\n    LIMIT 1\n)\nSELECT p.\"Product Name\"\nFROM OriginalPrice op\nJOIN product p ON op.\"Product ID\" = p.\"Product ID\" AND op.Region = p.Region",
    "2362": "SELECT p.\"Product Name\"\nFROM (\n    SELECT \"Product ID\", Region\n    FROM central_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n    UNION ALL\n    SELECT \"Product ID\", Region\n    FROM east_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n    UNION ALL\n    SELECT \"Product ID\", Region\n    FROM south_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n    UNION ALL\n    SELECT \"Product ID\", Region\n    FROM west_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n) AS orders\nJOIN product p ON orders.\"Product ID\" = p.\"Product ID\" AND orders.Region = p.Region\nJOIN (\n    SELECT MAX(\"Order Date\") AS RecentDate\n    FROM (\n        SELECT \"Order Date\" FROM central_superstore\n        UNION ALL\n        SELECT \"Order Date\" FROM east_superstore\n        UNION ALL\n        SELECT \"Order Date\" FROM south_superstore\n        UNION ALL\n        SELECT \"Order Date\" FROM west_superstore\n    )\n) AS recent ON recent.RecentDate IN (\n    SELECT \"Order Date\"\n    FROM central_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n    UNION ALL\n    SELECT \"Order Date\"\n    FROM east_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n    UNION ALL\n    SELECT \"Order Date\"\n    FROM south_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n    UNION ALL\n    SELECT \"Order Date\"\n    FROM west_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Darren Powers')\n)",
    "2363": "SELECT SUM(Quantity) AS Total_Quantities_Ordered\nFROM (\n    SELECT Quantity FROM central_superstore\n    JOIN product ON central_superstore.\"Product ID\" = product.\"Product ID\" AND central_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Advantus plastic paper clips'\n    UNION ALL\n    SELECT Quantity FROM east_superstore\n    JOIN product ON east_superstore.\"Product ID\" = product.\"Product ID\" AND east_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Advantus plastic paper clips'\n    UNION ALL\n    SELECT Quantity FROM south_superstore\n    JOIN product ON south_superstore.\"Product ID\" = product.\"Product ID\" AND south_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Advantus plastic paper clips'\n    UNION ALL\n    SELECT Quantity FROM west_superstore\n    JOIN product ON west_superstore.\"Product ID\" = product.\"Product ID\" AND west_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Advantus plastic paper clips'\n) AS Total_Orders",
    "2364": "SELECT \"Order ID\", MAX(((Sales / (1 - Discount)) * Quantity) - Profit) AS HighestTotalCost\nFROM (\n    SELECT * FROM central_superstore\n    UNION ALL\n    SELECT * FROM east_superstore\n    UNION ALL\n    SELECT * FROM south_superstore\n    UNION ALL\n    SELECT * FROM west_superstore\n) AS all_superstores\nJOIN product ON all_superstores.\"Product ID\" = product.\"Product ID\" AND all_superstores.Region = product.Region\nWHERE \"Product Name\" = 'Logitech G600 MMO Gaming Mouse'",
    "2365": "SELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN central_superstore cs ON pe.\"Customer ID\" = cs.\"Customer ID\" AND pe.Region = cs.Region\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Alejandro Grove'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN east_superstore es ON pe.\"Customer ID\" = es.\"Customer ID\" AND pe.Region = es.Region\nJOIN product p ON es.\"Product ID\" = p.\"Product ID\" AND es.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Alejandro Grove'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN south_superstore ss ON pe.\"Customer ID\" = ss.\"Customer ID\" AND pe.Region = ss.Region\nJOIN product p ON ss.\"Product ID\" = p.\"Product ID\" AND ss.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Alejandro Grove'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN west_superstore ws ON pe.\"Customer ID\" = ws.\"Customer ID\" AND pe.Region = ws.Region\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Alejandro Grove';",
    "2366": "SELECT COUNT(DISTINCT p.\"Customer ID\")\nFROM people p\nJOIN central_superstore c ON p.\"Customer ID\" = c.\"Customer ID\" AND p.Region = c.Region\nJOIN product pr ON c.\"Product ID\" = pr.\"Product ID\" AND c.Region = pr.Region\nWHERE p.City = 'Chicago' AND pr.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND c.Quantity >= 10\nUNION\nSELECT COUNT(DISTINCT p.\"Customer ID\")\nFROM people p\nJOIN east_superstore e ON p.\"Customer ID\" = e.\"Customer ID\" AND p.Region = e.Region\nJOIN product pr ON e.\"Product ID\" = pr.\"Product ID\" AND e.Region = pr.Region\nWHERE p.City = 'Chicago' AND pr.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND e.Quantity >= 10\nUNION\nSELECT COUNT(DISTINCT p.\"Customer ID\")\nFROM people p\nJOIN south_superstore s ON p.\"Customer ID\" = s.\"Customer ID\" AND p.Region = s.Region\nJOIN product pr ON s.\"Product ID\" = pr.\"Product ID\" AND s.Region = pr.Region\nWHERE p.City = 'Chicago' AND pr.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND s.Quantity >= 10\nUNION\nSELECT COUNT(DISTINCT p.\"Customer ID\")\nFROM people p\nJOIN west_superstore w ON p.\"Customer ID\" = w.\"Customer ID\" AND p.Region = w.Region\nJOIN product pr ON w.\"Product ID\" = pr.\"Product ID\" AND w.Region = pr.Region\nWHERE p.City = 'Chicago' AND pr.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND w.Quantity >= 10",
    "2367": "SELECT DISTINCT p.\"Product Name\"\nFROM product p\nJOIN (\n    SELECT \"Product ID\", Region\n    FROM central_superstore\n    WHERE Profit >= 1000\n    UNION ALL\n    SELECT \"Product ID\", Region\n    FROM east_superstore\n    WHERE Profit >= 1000\n    UNION ALL\n    SELECT \"Product ID\", Region\n    FROM south_superstore\n    WHERE Profit >= 1000\n    UNION ALL\n    SELECT \"Product ID\", Region\n    FROM west_superstore\n    WHERE Profit >= 1000\n) AS orders ON p.\"Product ID\" = orders.\"Product ID\" AND p.Region = orders.Region",
    "2368": "SELECT DISTINCT p.\"Product Name\"\nFROM product p\nJOIN east_superstore e ON p.\"Product ID\" = e.\"Product ID\" AND p.Region = e.Region\nWHERE e.\"Ship Mode\" = 'First Class' AND e.Region = 'East'\nLIMIT 10;",
    "2369": "SELECT p.\"Product Name\"\nFROM central_superstore cs\nJOIN people pe ON cs.\"Customer ID\" = pe.\"Customer ID\" AND cs.Region = pe.Region\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Becky Martin' AND pe.Region = 'Central'",
    "2370": "SELECT DISTINCT p.\"Customer Name\"\nFROM people p\nJOIN west_superstore ws ON p.\"Customer ID\" = ws.\"Customer ID\" AND p.Region = ws.Region\nWHERE ws.\"Ship Mode\" = 'Second Class' AND p.Region = 'West'\nLIMIT 5",
    "2371": "SELECT SUM(Profit) AS Total_Profit\nFROM central_superstore\nWHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Patrick Gardner' AND Region = 'Central')",
    "2372": "SELECT p.\"Product Name\"\nFROM south_superstore s\nJOIN product p ON s.\"Product ID\" = p.\"Product ID\" AND s.Region = p.Region\nWHERE s.\"Order Date\" = '2013-03-04' AND s.\"Ship Mode\" = 'Same Day' AND s.Region = 'South'",
    "2373": "SELECT SUM(Sales) AS Total_Sales\nFROM central_superstore\nWHERE \"Product ID\" IN (\n    SELECT \"Product ID\"\n    FROM product\n    WHERE \"Product Name\" = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack'\n    AND Region = 'Central'\n)",
    "2374": "SELECT p.\"Product Name\"\nFROM east_superstore e\nJOIN people pe ON e.\"Customer ID\" = pe.\"Customer ID\" AND e.Region = pe.Region\nJOIN product p ON e.\"Product ID\" = p.\"Product ID\" AND e.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Jonathan Doherty' AND e.Region = 'East'\nORDER BY e.Quantity DESC\nLIMIT 1",
    "2375": "SELECT \n    p.\"Product Name\",\n    SUM(e.Quantity) AS Total_Quantity\nFROM \n    east_superstore e\nJOIN \n    product p ON e.\"Product ID\" = p.\"Product ID\" AND e.Region = p.Region\nWHERE \n    e.\"Ship Date\" = '2015-03-25' AND e.Region = 'East'\nGROUP BY \n    p.\"Product Name\"",
    "2376": "SELECT p.\"Customer ID\", p.\"Customer Name\"\nFROM people p\nJOIN east_superstore e ON p.\"Customer ID\" = e.\"Customer ID\" AND p.Region = e.Region\nJOIN product pr ON e.\"Product ID\" = pr.\"Product ID\" AND e.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Global High-Back Leather Tilter, Burgundy'\nAND e.\"Order Date\" = '2013-10-13'\nAND e.Region = 'East'",
    "2377": "SELECT p.Category\nFROM south_superstore s\nJOIN people pe ON s.\"Customer ID\" = pe.\"Customer ID\" AND s.Region = pe.Region\nJOIN product p ON s.\"Product ID\" = p.\"Product ID\" AND s.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Katherine Murray' AND s.\"Order Date\" = '2018-11-04';",
    "2378": "SELECT\n    (SUM(CASE WHEN p.Category = 'Furniture' THEN w.Quantity ELSE 0 END) * 1.0 / SUM(w.Quantity)) * 100 AS FurniturePercentage\nFROM\n    west_superstore w\nJOIN\n    product p ON w.\"Product ID\" = p.\"Product ID\" AND w.Region = p.Region\nWHERE\n    w.\"Ship Mode\" = 'Standard Class' AND w.Region = 'West'",
    "2379": "SELECT \"Ship Date\"\nFROM central_superstore\nWHERE \"Customer ID\" IN (\n    SELECT \"Customer ID\"\n    FROM people\n    WHERE \"Customer Name\" = 'Ann Chong' AND Region = 'Central'\n)",
    "2380": "SELECT p.Segment\nFROM people p\nJOIN west_superstore ws ON p.\"Customer ID\" = ws.\"Customer ID\" AND p.Region = ws.Region\nWHERE ws.\"Order ID\" = 'CA-2011-108189' AND p.Region = 'West'",
    "2381": "SELECT SUM(Sales) AS Total_Sales\nFROM west_superstore\nJOIN product ON west_superstore.\"Product ID\" = product.\"Product ID\" AND west_superstore.Region = product.Region\nWHERE product.\"Product Name\" = 'Hon Valutask Swivel Chairs' AND product.Region = 'West'",
    "2382": "SELECT \"Order ID\"\nFROM south_superstore\nWHERE \"Customer ID\" IN (\n    SELECT \"Customer ID\"\n    FROM people\n    WHERE \"Customer Name\" = 'Frank Olsen' AND Region = 'South'\n)",
    "2383": "SELECT \"Product ID\"\nFROM central_superstore\nWHERE \"Order Date\" = date('2018-04-26') AND \"Ship Date\" = date('2018-04-27') AND Region = 'Central';",
    "2384": "SELECT p.City, p.State\nFROM people p\nJOIN (\n    SELECT \"Customer ID\", Region\n    FROM (\n        SELECT \"Customer ID\", Region FROM central_superstore\n        UNION ALL\n        SELECT \"Customer ID\", Region FROM east_superstore\n        UNION ALL\n        SELECT \"Customer ID\", Region FROM south_superstore\n        UNION ALL\n        SELECT \"Customer ID\", Region FROM west_superstore\n    ) AS all_superstores\n    JOIN (\n        SELECT \"Customer ID\", Region, MAX(Sales) AS MaxSales\n        FROM (\n            SELECT \"Customer ID\", Region, Sales FROM central_superstore\n            UNION ALL\n            SELECT \"Customer ID\", Region, Sales FROM east_superstore\n            UNION ALL\n            SELECT \"Customer ID\", Region, Sales FROM south_superstore\n            UNION ALL\n            SELECT \"Customer ID\", Region, Sales FROM west_superstore\n        )\n    ) AS max_sales ON all_superstores.\"Customer ID\" = max_sales.\"Customer ID\" AND all_superstores.Region = max_sales.Region\n) AS highest_sales_customer ON p.\"Customer ID\" = highest_sales_customer.\"Customer ID\" AND p.Region = highest_sales_customer.Region",
    "2385": "SELECT p.\"Customer Name\"\nFROM east_superstore e\nJOIN people p ON e.\"Customer ID\" = p.\"Customer ID\" AND e.Region = p.Region\nWHERE e.Profit = (SELECT MAX(Profit) FROM east_superstore WHERE Region = 'East')",
    "2386": "SELECT MAX(Quantity) AS HighestQuantity\nFROM (\n    SELECT Quantity\n    FROM central_superstore\n    WHERE \"Customer ID\" IN (\n        SELECT \"Customer ID\"\n        FROM people\n        WHERE City = 'Chicago' AND State = 'Illinois'\n    )\n    UNION ALL\n    SELECT Quantity\n    FROM east_superstore\n    WHERE \"Customer ID\" IN (\n        SELECT \"Customer ID\"\n        FROM people\n        WHERE City = 'Chicago' AND State = 'Illinois'\n    )\n    UNION ALL\n    SELECT Quantity\n    FROM south_superstore\n    WHERE \"Customer ID\" IN (\n        SELECT \"Customer ID\"\n        FROM people\n        WHERE City = 'Chicago' AND State = 'Illinois'\n    )\n    UNION ALL\n    SELECT Quantity\n    FROM west_superstore\n    WHERE \"Customer ID\" IN (\n        SELECT \"Customer ID\"\n        FROM people\n        WHERE City = 'Chicago' AND State = 'Illinois'\n    )\n)",
    "2387": "SELECT c.\"Order Date\", p.\"Product Name\"\nFROM central_superstore c\nJOIN product p ON c.\"Product ID\" = p.\"Product ID\" AND c.Region = p.Region\nWHERE c.\"Order ID\" = 'CA-2011-137274' AND c.Region = 'Central'",
    "2388": "SELECT DISTINCT p.\"Customer Name\"\nFROM south_superstore ss\nJOIN people p ON ss.\"Customer ID\" = p.\"Customer ID\" AND ss.Region = p.Region\nJOIN product pr ON ss.\"Product ID\" = pr.\"Product ID\" AND ss.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Xerox 23' AND ss.Region = 'South'",
    "2389": "SELECT p.\"Product Name\"\nFROM product p\nJOIN central_superstore c ON p.\"Product ID\" = c.\"Product ID\" AND p.Region = c.Region\nWHERE p.Category = 'Office Supplies' AND p.Region = 'Central'\nORDER BY c.Sales DESC\nLIMIT 1",
    "2390": "SELECT p.\"Customer Name\"\nFROM people p\nJOIN west_superstore ws ON p.\"Customer ID\" = ws.\"Customer ID\" AND p.Region = ws.Region\nORDER BY ws.Discount DESC\nLIMIT 1;",
    "2391": "SELECT DISTINCT p.\"Product Name\"\nFROM product p\nJOIN east_superstore e ON p.\"Product ID\" = e.\"Product ID\" AND p.Region = e.Region\nWHERE e.Profit > (\n    SELECT 0.98 * AVG(Profit)\n    FROM east_superstore\n)",
    "2392": "SELECT DISTINCT p.\"Customer Name\"\nFROM east_superstore e\nJOIN people p ON e.\"Customer ID\" = p.\"Customer ID\" AND e.Region = p.Region\nWHERE (e.Sales / (1 - e.Discount) * e.Quantity) - e.Profit > 80000\nAND e.Region = 'East'",
    "2393": "SELECT COUNT(*) AS NumberOfOrders\nFROM (\n    SELECT \"Order ID\" FROM central_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Maxwell Schwartz')\n    AND strftime('%Y', \"Order Date\") = '2015'\n    UNION ALL\n    SELECT \"Order ID\" FROM east_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Maxwell Schwartz')\n    AND strftime('%Y', \"Order Date\") = '2015'\n    UNION ALL\n    SELECT \"Order ID\" FROM south_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Maxwell Schwartz')\n    AND strftime('%Y', \"Order Date\") = '2015'\n    UNION ALL\n    SELECT \"Order ID\" FROM west_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Maxwell Schwartz')\n    AND strftime('%Y', \"Order Date\") = '2015'\n) AS OrdersByMaxwellSchwartz",
    "2394": "SELECT p.\"Customer Name\"\nFROM central_superstore cs\nJOIN people p ON cs.\"Customer ID\" = p.\"Customer ID\" AND cs.Region = p.Region\nJOIN product pr ON cs.\"Product ID\" = pr.\"Product ID\" AND cs.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Bush Mission Pointe Library' AND cs.Region = 'Central'",
    "2395": "SELECT SUM(Profit) AS Total_Profit_By_Cisco_SPA301\nFROM (\n    SELECT Profit FROM central_superstore\n    JOIN product ON central_superstore.\"Product ID\" = product.\"Product ID\" AND central_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Cisco SPA301'\n    UNION ALL\n    SELECT Profit FROM east_superstore\n    JOIN product ON east_superstore.\"Product ID\" = product.\"Product ID\" AND east_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Cisco SPA301'\n    UNION ALL\n    SELECT Profit FROM south_superstore\n    JOIN product ON south_superstore.\"Product ID\" = product.\"Product ID\" AND south_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Cisco SPA301'\n    UNION ALL\n    SELECT Profit FROM west_superstore\n    JOIN product ON west_superstore.\"Product ID\" = product.\"Product ID\" AND west_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Cisco SPA301'\n) AS Total_Profit",
    "2396": "SELECT DISTINCT p.\"Product Name\"\nFROM west_superstore ws\nJOIN people pe ON ws.\"Customer ID\" = pe.\"Customer ID\" AND ws.Region = pe.Region\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Anne McFarland';",
    "2397": "SELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN central_superstore cs ON pe.\"Customer ID\" = cs.\"Customer ID\" AND pe.Region = cs.Region\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE pe.City = 'Coachella'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN east_superstore es ON pe.\"Customer ID\" = es.\"Customer ID\" AND pe.Region = es.Region\nJOIN product p ON es.\"Product ID\" = p.\"Product ID\" AND es.Region = p.Region\nWHERE pe.City = 'Coachella'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN south_superstore ss ON pe.\"Customer ID\" = ss.\"Customer ID\" AND pe.Region = ss.Region\nJOIN product p ON ss.\"Product ID\" = p.\"Product ID\" AND ss.Region = p.Region\nWHERE pe.City = 'Coachella'\nUNION\nSELECT DISTINCT p.\"Product Name\"\nFROM people pe\nJOIN west_superstore ws ON pe.\"Customer ID\" = ws.\"Customer ID\" AND pe.Region = ws.Region\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nWHERE pe.City = 'Coachella';",
    "2398": "SELECT \n    (SELECT COUNT(*) FROM east_superstore WHERE strftime('%Y', \"Order Date\") = '2015') AS East_2015_Orders,\n    (SELECT COUNT(*) FROM west_superstore WHERE strftime('%Y', \"Order Date\") = '2015') AS West_2015_Orders",
    "2399": "SELECT DISTINCT p.\"Product Name\"\nFROM west_superstore ws\nJOIN people pe ON ws.\"Customer ID\" = pe.\"Customer ID\" AND ws.Region = pe.Region\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Matt Abelman' AND strftime('%Y', ws.\"Order Date\") = '2013'",
    "2400": "SELECT SUM((Sales * (1 - Discount) * Quantity) - Profit) AS TotalCost\nFROM (\n    SELECT Sales, Discount, Quantity, Profit\n    FROM central_superstore\n    JOIN people ON central_superstore.\"Customer ID\" = people.\"Customer ID\" AND central_superstore.Region = people.Region\n    WHERE strftime('%Y', \"Order Date\") = '2016' AND \"Customer Name\" = 'Brad Thomas'\n    UNION ALL\n    SELECT Sales, Discount, Quantity, Profit\n    FROM east_superstore\n    JOIN people ON east_superstore.\"Customer ID\" = people.\"Customer ID\" AND east_superstore.Region = people.Region\n    WHERE strftime('%Y', \"Order Date\") = '2016' AND \"Customer Name\" = 'Brad Thomas'\n    UNION ALL\n    SELECT Sales, Discount, Quantity, Profit\n    FROM south_superstore\n    JOIN people ON south_superstore.\"Customer ID\" = people.\"Customer ID\" AND south_superstore.Region = people.Region\n    WHERE strftime('%Y', \"Order Date\") = '2016' AND \"Customer Name\" = 'Brad Thomas'\n    UNION ALL\n    SELECT Sales, Discount, Quantity, Profit\n    FROM west_superstore\n    JOIN people ON west_superstore.\"Customer ID\" = people.\"Customer ID\" AND west_superstore.Region = people.Region\n    WHERE strftime('%Y', \"Order Date\") = '2016' AND \"Customer Name\" = 'Brad Thomas'\n) AS OrdersByBradThomas",
    "2401": "SELECT p.\"Customer Name\", p.City, p.Country\nFROM people p\nJOIN (\n    SELECT \"Customer ID\", Region\n    FROM central_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Plantronics Single Ear Headset')\n    UNION\n    SELECT \"Customer ID\", Region\n    FROM east_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Plantronics Single Ear Headset')\n    UNION\n    SELECT \"Customer ID\", Region\n    FROM south_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Plantronics Single Ear Headset')\n    UNION\n    SELECT \"Customer ID\", Region\n    FROM west_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Plantronics Single Ear Headset')\n) AS orders ON p.\"Customer ID\" = orders.\"Customer ID\" AND p.Region = orders.Region",
    "2402": "SELECT cs.\"Ship Date\", p.\"Product Name\"\nFROM central_superstore cs\nJOIN people pe ON cs.\"Customer ID\" = pe.\"Customer ID\" AND cs.Region = pe.Region\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Gene Hale'\nUNION\nSELECT es.\"Ship Date\", p.\"Product Name\"\nFROM east_superstore es\nJOIN people pe ON es.\"Customer ID\" = pe.\"Customer ID\" AND es.Region = pe.Region\nJOIN product p ON es.\"Product ID\" = p.\"Product ID\" AND es.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Gene Hale'\nUNION\nSELECT ss.\"Ship Date\", p.\"Product Name\"\nFROM south_superstore ss\nJOIN people pe ON ss.\"Customer ID\" = pe.\"Customer ID\" AND ss.Region = pe.Region\nJOIN product p ON ss.\"Product ID\" = p.\"Product ID\" AND ss.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Gene Hale'\nUNION\nSELECT ws.\"Ship Date\", p.\"Product Name\"\nFROM west_superstore ws\nJOIN people pe ON ws.\"Customer ID\" = pe.\"Customer ID\" AND ws.Region = pe.Region\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Gene Hale'",
    "2403": "SELECT COUNT(DISTINCT s.\"Order ID\") AS FurnitureOrdersWithFastestDelivery\nFROM south_superstore s\nJOIN product p ON s.\"Product ID\" = p.\"Product ID\" AND s.Region = p.Region\nWHERE s.\"Ship Mode\" = 'First Class' AND p.Category = 'Furniture'",
    "2404": "SELECT COUNT(*) AS OfficeSupplyOrders\nFROM south_superstore ss\nJOIN people p ON ss.\"Customer ID\" = p.\"Customer ID\" AND ss.Region = p.Region\nJOIN product pr ON ss.\"Product ID\" = pr.\"Product ID\" AND ss.Region = pr.Region\nWHERE p.\"Customer Name\" = 'Cindy Stewart' AND pr.Category = 'Office Supplies'",
    "2405": "SELECT p.Category\nFROM south_superstore ss\nJOIN product p ON ss.\"Product ID\" = p.\"Product ID\" AND ss.Region = p.Region\nGROUP BY p.Category\nORDER BY SUM(ss.Profit) DESC\nLIMIT 1",
    "2406": "SELECT DISTINCT p.\"Product Name\"\nFROM east_superstore e\nJOIN people pe ON e.\"Customer ID\" = pe.\"Customer ID\" AND e.Region = pe.Region\nJOIN product p ON e.\"Product ID\" = p.\"Product ID\" AND e.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Cindy Stewart'",
    "2407": "SELECT DISTINCT p.\"Product Name\"\nFROM west_superstore w\nJOIN product p ON w.\"Product ID\" = p.\"Product ID\" AND w.Region = p.Region\nWHERE w.\"Ship Mode\" = 'Same Day' AND w.\"Ship Date\" BETWEEN '2013-01-01' AND '2013-12-31'",
    "2408": "SELECT DISTINCT p.Category\nFROM people pe\nJOIN central_superstore cs ON pe.\"Customer ID\" = cs.\"Customer ID\" AND pe.Region = cs.Region\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Sam Craven'\nUNION\nSELECT DISTINCT p.Category\nFROM people pe\nJOIN east_superstore es ON pe.\"Customer ID\" = es.\"Customer ID\" AND pe.Region = es.Region\nJOIN product p ON es.\"Product ID\" = p.\"Product ID\" AND es.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Sam Craven';",
    "2409": "SELECT SUM(Quantity) AS Total_Quantity\nFROM south_superstore ss\nJOIN product p ON ss.\"Product ID\" = p.\"Product ID\" AND ss.Region = p.Region\nJOIN people pe ON ss.\"Customer ID\" = pe.\"Customer ID\" AND ss.Region = pe.Region\nWHERE p.\"Product Name\" = 'Lexmark X 9575 Professional All-in-One Color Printer'\nAND pe.\"Customer Name\" = 'Cindy Stewart';",
    "2410": "SELECT p.\"Product Name\"\nFROM central_superstore c\nJOIN product p ON c.\"Product ID\" = p.\"Product ID\" AND c.Region = p.Region\nWHERE c.\"Ship Mode\" = 'Standard Class'\nGROUP BY p.\"Product Name\"\nHAVING COUNT(c.\"Order ID\") >= 10",
    "2411": "SELECT p.Category\nFROM west_superstore ws\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nGROUP BY p.Category\nORDER BY SUM(ws.Sales) ASC\nLIMIT 1;",
    "2412": "SELECT SUM(Profit) AS Total_Profit\nFROM south_superstore\nJOIN product ON south_superstore.\"Product ID\" = product.\"Product ID\" AND south_superstore.Region = product.Region\nWHERE product.\"Product Name\" = 'Memorex Froggy Flash Drive 8 GB'",
    "2413": "SELECT SUM(Sales) AS TotalSales\nFROM east_superstore\nJOIN product ON east_superstore.\"Product ID\" = product.\"Product ID\" AND east_superstore.Region = product.Region\nWHERE product.Category = 'Furnitures' AND \"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'",
    "2414": "SELECT \n    AVG(CASE WHEN s.Region = 'East' THEN s.Sales ELSE NULL END) AS \"Average Sales in East\",\n    AVG(CASE WHEN s.Region = 'West' THEN s.Sales ELSE NULL END) AS \"Average Sales in West\"\nFROM \n    (SELECT * FROM east_superstore UNION ALL SELECT * FROM west_superstore) AS s\nJOIN \n    product p ON s.\"Product ID\" = p.\"Product ID\" AND s.Region = p.Region\nWHERE \n    p.\"Product Name\" = 'Sharp AL-1530CS Digital Copier'",
    "2415": "WITH OfficeSupplies AS (\n    SELECT p.\"Product ID\"\n    FROM product p\n    WHERE p.Category = 'Office Supplies'\n),\nCentralSouthOrders AS (\n    SELECT cs.\"Product ID\"\n    FROM central_superstore cs\n    WHERE cs.Region = 'Central'\n    UNION ALL\n    SELECT ss.\"Product ID\"\n    FROM south_superstore ss\n    WHERE ss.Region = 'South'\n),\nFilteredOrders AS (\n    SELECT cso.\"Product ID\"\n    FROM CentralSouthOrders cso\n    JOIN OfficeSupplies os ON cso.\"Product ID\" = os.\"Product ID\"\n)\n\nSELECT \n    (CAST(COUNT(fo.\"Product ID\") AS REAL) / CAST(COUNT(cso.\"Product ID\") AS REAL)) * 100 AS PercentageOfOfficeSupplies\nFROM CentralSouthOrders cso\nLEFT JOIN FilteredOrders fo ON cso.\"Product ID\" = fo.\"Product ID\";",
    "2416": "SELECT \n    SUM(CASE WHEN State = 'Texas' THEN 1 ELSE 0 END) * 1.0 / \n    SUM(CASE WHEN State = 'Indiana' THEN 1 ELSE 0 END) AS Ratio\nFROM people",
    "2417": "SELECT p.\"Product ID\", p.\"Product Name\", COUNT(cs.\"Row ID\") AS order_number\nFROM central_superstore cs\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE p.\"Sub-Category\" = 'Art'\nGROUP BY p.\"Product ID\", p.\"Product Name\"\nORDER BY order_number DESC\nLIMIT 1",
    "2418": "SELECT p.\"Customer Name\"\nFROM south_superstore s\nJOIN people p ON s.\"Customer ID\" = p.\"Customer ID\" AND s.Region = p.Region\nWHERE s.\"Order Date\" BETWEEN '2015-01-01' AND '2015-12-31'\nGROUP BY s.\"Customer ID\"\nHAVING COUNT(s.\"Order ID\") > 3",
    "2419": "SELECT MAX(Profit) AS HighestProfit\nFROM central_superstore\nJOIN people ON central_superstore.\"Customer ID\" = people.\"Customer ID\"\nWHERE \"Customer Name\" = 'Anna Chung'",
    "2420": "SELECT COUNT(*) AS TotalOrders\nFROM (\n    SELECT \"Order ID\"\n    FROM central_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Corey Roper')\n    AND strftime('%Y', \"Order Date\") = '2015'\n    UNION ALL\n    SELECT \"Order ID\"\n    FROM east_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Corey Roper')\n    AND strftime('%Y', \"Order Date\") = '2015'\n    UNION ALL\n    SELECT \"Order ID\"\n    FROM south_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Corey Roper')\n    AND strftime('%Y', \"Order Date\") = '2015'\n    UNION ALL\n    SELECT \"Order ID\"\n    FROM west_superstore\n    WHERE \"Customer ID\" IN (SELECT \"Customer ID\" FROM people WHERE \"Customer Name\" = 'Corey Roper')\n    AND strftime('%Y', \"Order Date\") = '2015'\n) AS OrdersByCoreyRoper",
    "2421": "SELECT\n    (SELECT SUM(Sales) FROM east_superstore WHERE Region = 'East') -\n    (SELECT SUM(Sales) FROM west_superstore WHERE Region = 'West') AS SalesDifference",
    "2422": "SELECT p.\"Product Name\"\nFROM central_superstore c\nJOIN product p ON c.\"Product ID\" = p.\"Product ID\" AND c.Region = p.Region\nWHERE c.Profit < 0",
    "2423": "SELECT p.\"Product Name\", ws.\"Ship Mode\"\nFROM west_superstore ws\nJOIN product p ON ws.\"Product ID\" = p.\"Product ID\" AND ws.Region = p.Region\nWHERE (julianday(ws.\"Ship Date\") - julianday(ws.\"Order Date\")) = (\n    SELECT MIN(julianday(\"Ship Date\") - julianday(\"Order Date\"))\n    FROM west_superstore\n)\nLIMIT 1;",
    "2424": "SELECT COUNT(*) \nFROM central_superstore \nWHERE \"Ship Mode\" = 'First Class' \nAND \"Product ID\" = (SELECT \"Product ID\" \n                    FROM product \n                    WHERE \"Product Name\" = 'O'Sullivan Cherrywood Estates Traditional Bookcase');",
    "2425": "SELECT p.\"Customer Name\"\nFROM people p\nJOIN east_superstore e ON p.\"Customer ID\" = e.\"Customer ID\" AND p.Region = e.Region\nWHERE p.Segment = 'Corporate' AND p.State = 'Rhode Island' AND e.\"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'\nGROUP BY p.\"Customer ID\"\nORDER BY COUNT(e.\"Order ID\") DESC\nLIMIT 1;",
    "2426": "SELECT COUNT(*) \nFROM west_superstore ws\nJOIN people p ON ws.\"Customer ID\" = p.\"Customer ID\" AND ws.Region = p.Region\nWHERE ws.Sales >= 5000 AND p.State = 'California'",
    "2427": "SELECT p.Segment\nFROM east_superstore e\nJOIN people p ON e.\"Customer ID\" = p.\"Customer ID\" AND e.Region = p.Region\nORDER BY e.Sales / (1 - e.Discount) DESC\nLIMIT 1",
    "2428": "SELECT (\"Ship Date\" - \"Order Date\") AS shipment_duration\nFROM (\n    SELECT \"Ship Date\", \"Order Date\"\n    FROM central_superstore\n    WHERE \"Order ID\" = 'CA-2011-134103'\n    UNION ALL\n    SELECT \"Ship Date\", \"Order Date\"\n    FROM east_superstore\n    WHERE \"Order ID\" = 'CA-2011-134103'\n    UNION ALL\n    SELECT \"Ship Date\", \"Order Date\"\n    FROM south_superstore\n    WHERE \"Order ID\" = 'CA-2011-134103'\n    UNION ALL\n    SELECT \"Ship Date\", \"Order Date\"\n    FROM west_superstore\n    WHERE \"Order ID\" = 'CA-2011-134103'\n)",
    "2429": "SELECT COUNT(*) AS \"Total Orders\"\nFROM (\n    SELECT * FROM central_superstore\n    UNION ALL\n    SELECT * FROM east_superstore\n    UNION ALL\n    SELECT * FROM south_superstore\n    UNION ALL\n    SELECT * FROM west_superstore\n) AS combined_superstore\nWHERE Quantity > 5 AND \"Ship Mode\" = 'First Class'",
    "2430": "SELECT \"Order ID\", Sales, Profit\nFROM (\n    SELECT \"Order ID\", Sales, Profit FROM central_superstore\n    UNION ALL\n    SELECT \"Order ID\", Sales, Profit FROM east_superstore\n    UNION ALL\n    SELECT \"Order ID\", Sales, Profit FROM south_superstore\n    UNION ALL\n    SELECT \"Order ID\", Sales, Profit FROM west_superstore\n)\nWHERE Profit < 0\nLIMIT 3",
    "2431": "To answer the question about which product Phillina Ober bought, we need to join the relevant tables (`people`, `product`, and the superstore tables) based on the provided schema and the relationships between these tables. Since Phillina Ober is a customer, we first need to find her `Customer ID` from the `people` table, and then use this ID to find the products she bought from one of the superstore tables. However, without knowing Phillina Ober's region, we cannot directly pinpoint which superstore table to query. Assuming Phillina Ober could have made purchases in any region, we would need to check all superstore tables. For simplicity, let's assume we are checking all tables and consolidating the results.\n\nGiven the structure of your database and the question, here is a SQL query that attempts to find the product(s) Phillina Ober bought by joining the necessary tables. This query checks all superstore tables (`central_superstore`, `east_superstore`, `south_superstore`, `west_superstore`) for simplicity and assumes Phillina Ober's purchases could be in any of these tables.\n\n```sqlite\nSELECT DISTINCT pr.\"Product Name\"\nFROM people pe\nJOIN central_superstore cs ON pe.\"Customer ID\" = cs.\"Customer ID\" AND pe.Region = cs.Region\nJOIN product pr ON cs.\"Product ID\" = pr.\"Product ID\" AND cs.Region = pr.Region\nWHERE pe.\"Customer Name\" = 'Phillina Ober'\nUNION\nSELECT DISTINCT pr.\"Product Name\"\nFROM people pe\nJOIN east_superstore es ON pe.\"Customer ID\" = es.\"Customer ID\" AND pe.Region = es.Region\nJOIN product pr ON es.\"Product ID\" = pr.\"Product ID\" AND es.Region = pr.Region\nWHERE pe.\"Customer Name\" = 'Phillina Ober'\nUNION\nSELECT DISTINCT pr.\"Product Name\"\nFROM people pe\nJOIN south_superstore ss ON pe.\"Customer ID\" = ss.\"Customer ID\" AND pe.Region = ss.Region\nJOIN product pr ON ss.\"Product ID\" = pr.\"Product ID\" AND ss.Region = pr.Region\nWHERE pe.\"Customer Name\" = 'Phillina Ober'\nUNION\nSELECT DISTINCT pr.\"Product Name\"\nFROM people pe\nJOIN west_superstore ws ON pe.\"Customer ID\" = ws.\"Customer ID\" AND pe.Region = ws.Region\nJOIN product pr ON ws.\"Product ID\" = pr.\"Product ID\" AND ws.Region = pr.Region\n",
    "2432": "SELECT p.\"Customer Name\"\nFROM south_superstore ss\nJOIN people p ON ss.\"Customer ID\" = p.\"Customer ID\" AND ss.Region = p.Region\nJOIN product pr ON ss.\"Product ID\" = pr.\"Product ID\" AND ss.Region = pr.Region\nWHERE pr.\"Product Name\" = 'Hon Multipurpose Stacking Arm Chairs'\nORDER BY ss.Quantity DESC\nLIMIT 1",
    "2433": "SELECT SUM(Profit) AS Total_Profit\nFROM (\n    SELECT Profit FROM central_superstore WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'O''Sullivan Living Dimensions 2-Shelf Bookcases')\n    UNION ALL\n    SELECT Profit FROM east_superstore WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'O''Sullivan Living Dimensions 2-Shelf Bookcases')\n    UNION ALL\n    SELECT Profit FROM south_superstore WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'O''Sullivan Living Dimensions 2-Shelf Bookcases')\n    UNION ALL\n    SELECT Profit FROM west_superstore WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'O''Sullivan Living Dimensions 2-Shelf Bookcases')\n)",
    "2434": "SELECT SUM(Quantity) AS Total_Quantity_Sold\nFROM west_superstore\nJOIN product ON west_superstore.\"Product ID\" = product.\"Product ID\" AND west_superstore.Region = product.Region\nWHERE product.\"Product Name\" = 'Hon Pagoda Stacking Chairs' AND west_superstore.Region = 'West'",
    "2435": "SELECT COUNT(*) AS slowest_shipping_orders\nFROM (\n    SELECT * FROM central_superstore\n    UNION ALL\n    SELECT * FROM east_superstore\n    UNION ALL\n    SELECT * FROM south_superstore\n    UNION ALL\n    SELECT * FROM west_superstore\n) AS all_orders\nJOIN people ON all_orders.\"Customer ID\" = people.\"Customer ID\" AND all_orders.Region = people.Region\nWHERE people.\"Customer Name\" = 'Aaron Bergman' AND all_orders.\"Ship Mode\" = 'Standard Class'",
    "2436": "SELECT Sales / (1 - Discount) AS OriginalPrice\nFROM (\n    SELECT Sales, Discount\n    FROM central_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Black Avery Flip-Chart Easel Binder')\n    UNION ALL\n    SELECT Sales, Discount\n    FROM east_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Black Avery Flip-Chart Easel Binder')\n    UNION ALL\n    SELECT Sales, Discount\n    FROM south_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Black Avery Flip-Chart Easel Binder')\n    UNION ALL\n    SELECT Sales, Discount\n    FROM west_superstore\n    WHERE \"Product ID\" IN (SELECT \"Product ID\" FROM product WHERE \"Product Name\" = 'Black Avery Flip-Chart Easel Binder')\n)\nLIMIT 1",
    "2437": "SELECT p.\"Product Name\"\nFROM product p\nJOIN central_superstore cs ON p.\"Product ID\" = cs.\"Product ID\" AND p.Region = cs.Region\nJOIN people pe ON cs.\"Customer ID\" = pe.\"Customer ID\" AND cs.Region = pe.Region\nWHERE pe.\"Customer Name\" = 'Aimee Bixby';",
    "2438": "SELECT SUM(Profit) AS Total_Profit\nFROM (\n    SELECT Profit FROM central_superstore\n    JOIN product ON central_superstore.\"Product ID\" = product.\"Product ID\" AND central_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'\n    UNION ALL\n    SELECT Profit FROM east_superstore\n    JOIN product ON east_superstore.\"Product ID\" = product.\"Product ID\" AND east_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'\n    UNION ALL\n    SELECT Profit FROM south_superstore\n    JOIN product ON south_superstore.\"Product ID\" = product.\"Product ID\" AND south_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'\n    UNION ALL\n    SELECT Profit FROM west_superstore\n    JOIN product ON west_superstore.\"Product ID\" = product.\"Product ID\" AND west_superstore.Region = product.Region\n    WHERE product.\"Product Name\" = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'\n) AS Total_Profits",
    "2439": "SELECT COUNT(*) AS FurnitureProductsShippedByStandardClass\nFROM east_superstore\nJOIN product ON east_superstore.\"Product ID\" = product.\"Product ID\" AND east_superstore.Region = product.Region\nWHERE product.Category = 'Furniture' AND east_superstore.\"Ship Mode\" = 'Standard Class'",
    "2440": "SELECT \n    e.\"Order ID\", \n    MAX(e.Profit) AS HighestProfit\nFROM \n    east_superstore e\nJOIN \n    people p ON e.\"Customer ID\" = p.\"Customer ID\" AND e.Region = p.Region\nWHERE \n    p.City = 'Houston' AND p.State = 'Texas' AND e.Region = 'East'",
    "2441": "SELECT SUM(Quantity) AS Total_Furniture_Orders\nFROM central_superstore\nJOIN product ON central_superstore.\"Product ID\" = product.\"Product ID\" AND central_superstore.Region = product.Region\nWHERE Category = 'Furniture'",
    "2442": "SELECT DISTINCT p.\"Product Name\"\nFROM central_superstore c\nJOIN product p ON c.\"Product ID\" = p.\"Product ID\" AND c.Region = p.Region\nWHERE strftime('%Y-%m', c.\"Ship Date\") = '2013-03'",
    "2443": "SELECT COUNT(DISTINCT cs.\"Order ID\") AS Total_Orders_Texas\nFROM central_superstore cs\nJOIN people p ON cs.\"Customer ID\" = p.\"Customer ID\" AND cs.Region = p.Region\nWHERE p.State = 'Texas'",
    "2444": "SELECT COUNT(*) AS NumberOfOrders\nFROM central_superstore cs\nJOIN people p ON cs.\"Customer ID\" = p.\"Customer ID\" AND cs.Region = p.Region\nWHERE p.\"Customer Name\" = 'Alan Barnes' AND strftime('%Y', cs.\"Order Date\") = '2015'",
    "2445": "SELECT p.\"Product Name\"\nFROM east_superstore e\nJOIN product p ON e.\"Product ID\" = p.\"Product ID\" AND e.Region = p.Region\nWHERE e.\"Order ID\" = 'CA-2011-115791'",
    "2446": "SELECT\n    SUM(CASE WHEN cs.Discount = 0.2 THEN 1 ELSE 0 END) * 1.0 / COUNT(cs.\"Order ID\") AS percentage\nFROM\n    central_superstore cs\nJOIN\n    people p ON cs.\"Customer ID\" = p.\"Customer ID\" AND cs.Region = p.Region\nWHERE\n    p.State = 'Texas';",
    "2447": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM central_superstore cs\n     JOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\n     WHERE p.Category = 'Furniture' \n     AND cs.\"Ship Mode\" = 'First Class' \n     AND strftime('%Y', cs.\"Ship Date\") = '2013') /\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM central_superstore cs\n     JOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\n     WHERE p.Category = 'Furniture') \n    AS percentage;",
    "2448": "SELECT p.\"Customer Name\"\nFROM people p\nJOIN west_superstore w ON p.\"Customer ID\" = w.\"Customer ID\" AND p.Region = w.Region\nWHERE w.\"Order Date\" = '2013-08-12' AND w.Discount = 0.2",
    "2449": "SELECT c.\"Order ID\"\nFROM central_superstore c\nJOIN product p ON c.\"Product ID\" = p.\"Product ID\" AND c.Region = p.Region\nWHERE p.\"Product Name\" = 'Security-Tint Envelopes' AND c.\"Order Date\" = '2013-06-03' AND c.Region = 'Central'",
    "2450": "SELECT p.\"Product Name\"\nFROM central_superstore cs\nJOIN people pe ON cs.\"Customer ID\" = pe.\"Customer ID\" AND cs.Region = pe.Region\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE pe.\"Customer Name\" = 'Bill Shonely' AND pe.Region = 'Central'",
    "2451": "SELECT p.\"Customer Name\"\nFROM people p\nJOIN west_superstore w ON p.\"Customer ID\" = w.\"Customer ID\" AND p.Region = w.Region\nWHERE w.Quantity = 8 AND p.Region = 'West'",
    "2452": "SELECT SUM(Profit) AS Total_Profit\nFROM central_superstore\nWHERE \"Customer ID\" IN (\n    SELECT \"Customer ID\"\n    FROM people\n    WHERE State = 'Texas' AND City = 'Houston' AND Region = 'Central'\n)",
    "2453": "SELECT p.\"Customer Name\"\nFROM people p\nJOIN east_superstore e ON p.\"Customer ID\" = e.\"Customer ID\" AND p.Region = e.Region\nWHERE e.\"Ship Date\" = '2013-03-05' AND e.Region = 'East'",
    "2454": "SELECT p.\"Product Name\"\nFROM central_superstore cs\nJOIN product p ON cs.\"Product ID\" = p.\"Product ID\" AND cs.Region = p.Region\nWHERE cs.\"Order Date\" LIKE '2016%' AND cs.Region = 'Central'\nORDER BY cs.Profit ASC\nLIMIT 1;",
    "2455": "SELECT p.\"Customer Name\"\nFROM east_superstore e\nJOIN people p ON e.\"Customer ID\" = p.\"Customer ID\" AND e.Region = p.Region\nWHERE e.\"Order ID\" = 'CA-2011-118976'",
    "2456": "SELECT p.\"Product Name\"\nFROM south_superstore ss\nJOIN product p ON ss.\"Product ID\" = p.\"Product ID\" AND ss.Region = p.Region\nWHERE ss.Sales = (SELECT MAX(Sales) FROM south_superstore WHERE Region = 'South')",
    "2457": "SELECT e.Sales, e.Profit, p.\"Sub-Category\"\nFROM east_superstore e\nJOIN product p ON e.\"Product ID\" = p.\"Product ID\" AND e.Region = p.Region\nWHERE e.\"Order ID\" = 'US-2011-126571' AND e.Region = 'East'",
    "2458": "SELECT p.\"Product Name\"\nFROM (\n    SELECT \"Product ID\", Region, MAX(Quantity) AS MaxQuantity\n    FROM (\n        SELECT \"Product ID\", Region, Quantity FROM central_superstore\n        UNION ALL\n        SELECT \"Product ID\", Region, Quantity FROM east_superstore\n        UNION ALL\n        SELECT \"Product ID\", Region, Quantity FROM south_superstore\n        UNION ALL\n        SELECT \"Product ID\", Region, Quantity FROM west_superstore\n    )\n) AS max_purchase\nJOIN product p ON max_purchase.\"Product ID\" = p.\"Product ID\" AND max_purchase.Region = p.Region",
    "2459": "SELECT p.\"Customer Name\"\nFROM south_superstore s\nJOIN people p ON s.\"Customer ID\" = p.\"Customer ID\" AND s.Region = p.Region\nWHERE s.\"Ship Mode\" = 'Standard Class' AND s.Sales > (SELECT AVG(Sales) * 0.88 FROM south_superstore)",
    "2460": "SELECT \n    (CAST(SUM(CASE WHEN Discount = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM central_superstore\nJOIN people ON central_superstore.\"Customer ID\" = people.\"Customer ID\" AND central_superstore.Region = people.Region\nWHERE people.State = 'Indiana' AND central_superstore.Region = 'Central'",
    "2461": "SELECT \n    (CAST(SUM(CASE WHEN race = 'W' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_white_male_officers\nFROM officers\nWHERE gender = 'M'",
    "2462": "WITH CaseCounts AS (\n    SELECT \n        i.case_number,\n        COUNT(o.case_number) AS officer_count\n    FROM incidents i\n    LEFT JOIN officers o ON i.case_number = o.case_number\n    WHERE i.date BETWEEN '2010-01-01' AND '2015-12-31'\n    GROUP BY i.case_number\n),\nTotalCases AS (\n    SELECT \n        COUNT(*) AS total_cases\n    FROM CaseCounts\n),\nCasesWithMoreThanThreeOfficers AS (\n    SELECT \n        COUNT(*) AS cases_with_more_than_three_officers\n    FROM CaseCounts\n    WHERE officer_count > 3\n),\nPercentageCalculation AS (\n    SELECT \n        (CAST(cases_with_more_than_three_officers AS REAL) / CAST(total_cases AS REAL)) * 100 AS percentage\n    FROM CasesWithMoreThanThreeOfficers, TotalCases\n)\nSELECT \n    percentage\nFROM PercentageCalculation;",
    "2463": "SELECT strftime('%Y', date) AS year\nFROM incidents\nWHERE subject_weapon = 'Handgun'\nGROUP BY year\nORDER BY COUNT(case_number) DESC\nLIMIT 1",
    "2464": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM incidents WHERE grand_jury_disposition = 'No Bill')) * 100 AS percentage_of_injured_cases\nFROM incidents\nWHERE subject_statuses = 'injured' AND grand_jury_disposition = 'No Bill';",
    "2465": "SELECT \n    SUM(CASE WHEN strftime('%Y', date) = '2007' THEN 1 ELSE 0 END) AS cases_2007,\n    SUM(CASE WHEN strftime('%Y', date) = '2008' THEN 1 ELSE 0 END) AS cases_2008,\n    (SUM(CASE WHEN strftime('%Y', date) = '2008' THEN 1 ELSE 0 END) - SUM(CASE WHEN strftime('%Y', date) = '2007' THEN 1 ELSE 0 END)) AS difference\nFROM incidents\nWHERE subject_weapon = 'Vehicle'",
    "2466": "SELECT \n    (CAST(SUM(CASE WHEN subject_statuses = 'Shoot and Miss' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percent_shoot_and_miss\nFROM incidents\nWHERE subject_weapon = 'Handgun'",
    "2467": "SELECT o.last_name, o.gender\nFROM officers o\nJOIN incidents i ON o.case_number = i.case_number\nWHERE i.grand_jury_disposition = 'No Bill'",
    "2468": "SELECT incidents.case_number, incidents.subject_statuses, incidents.subject_weapon\nFROM incidents\nJOIN subjects ON incidents.case_number = subjects.case_number\nWHERE subjects.gender = 'F'",
    "2469": "SELECT incidents.case_number, incidents.location, incidents.subject_statuses\nFROM incidents\nJOIN subjects ON incidents.case_number = subjects.case_number\nWHERE subjects.gender = 'M'",
    "2470": "SELECT i.case_number\nFROM incidents i\nJOIN officers o ON i.case_number = o.case_number\nWHERE o.full_name = 'Evenden, George'",
    "2471": "SELECT officers.last_name, incidents.subject_statuses\nFROM officers\nJOIN incidents ON officers.case_number = incidents.case_number\nWHERE officers.case_number = '134472-2015'",
    "2472": "SELECT subjects.last_name, subjects.gender, subjects.race, subjects.case_number\nFROM subjects\nJOIN incidents ON subjects.case_number = incidents.case_number\nWHERE incidents.subject_statuses = 'Deceased'",
    "2473": "SELECT \n    (CAST(SUM(CASE WHEN s.gender = 'F' AND i.subject_weapon = 'Vehicle' THEN 1 ELSE 0 END) AS FLOAT) / \n    SUM(CASE WHEN s.gender = 'F' THEN 1 ELSE 0 END)) * 100 AS percentage_female_subjects_used_vehicle\nFROM \n    subjects s\nJOIN \n    incidents i ON s.case_number = i.case_number\nWHERE \n    s.gender = 'F';",
    "2474": "SELECT \n    SUM(CASE WHEN subject_weapon = 'knife' THEN 1 ELSE 0 END) * 1.0 / \n    SUM(CASE WHEN subject_weapon = 'handgun' THEN 1 ELSE 0 END) AS knife_to_handgun_ratio\nFROM incidents\nWHERE subject_statuses = 'Injured'",
    "2475": "SELECT incidents.case_number\nFROM incidents\nWHERE date BETWEEN '2012-01-01' AND '2012-12-31'\nAND subject_statuses = 'Deceased'",
    "2476": "SELECT \n    (CAST(SUM(CASE WHEN race = 'B' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_black_male_officers\nFROM officers\nWHERE gender = 'M'",
    "2477": "SELECT COUNT(DISTINCT incidents.case_number)\nFROM incidents\nJOIN officers ON incidents.case_number = officers.case_number\nWHERE incidents.subject_weapon = 'Vehicle' AND officers.gender = 'F'",
    "2478": "SELECT COUNT(*) AS deceased_female_subjects\nFROM subjects\nJOIN incidents ON subjects.case_number = incidents.case_number\nWHERE subjects.gender = 'F' AND incidents.subject_statuses = 'Deceased'",
    "2479": "SELECT COUNT(DISTINCT officers.full_name) AS black_officers_investigated_cases\nFROM officers\nJOIN incidents ON officers.case_number = incidents.case_number\nWHERE officers.race = 'B' AND incidents.date BETWEEN '2010-01-01' AND '2015-12-31'",
    "2480": "SELECT COUNT(*) AS instances_in_june_2015\nFROM incidents\nWHERE date BETWEEN '2015-06-01' AND '2015-06-30';",
    "2481": "SELECT SUM(subject_count) AS total_injured\nFROM incidents\nWHERE subject_statuses = 'injured'\nAND date BETWEEN '2006-01-01' AND '2013-12-31'\nAND subject_weapon = 'handgun'",
    "2482": "SELECT subject_weapon\nFROM incidents\nWHERE subject_statuses = 'Deceased'\nGROUP BY subject_weapon\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "2483": "SELECT\n    SUM(CASE WHEN race = 'W' AND gender = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS proportion_white_males,\n    SUM(CASE WHEN race = 'W' AND gender = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS proportion_white_females\nFROM officers;",
    "2484": "SELECT \n  (SELECT COUNT(*) FROM subjects WHERE race = 'B' AND gender = 'F') -\n  (SELECT COUNT(*) FROM subjects WHERE race = 'W' AND gender = 'F') AS difference_in_count",
    "2485": "SELECT \n    (CAST(SUM(CASE WHEN subject_weapon = 'rifles' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) * 100) AS percentage\nFROM \n    incidents\nWHERE \n    subject_statuses = 'Deceased'",
    "2486": "SELECT i.subject_weapon, s.race, s.gender\nFROM incidents i\nJOIN subjects s ON i.case_number = s.case_number\nWHERE i.case_number = '031347-2015';",
    "2487": "SELECT \n    incidents.case_number, \n    subjects.race, \n    subjects.gender\nFROM \n    incidents\nJOIN \n    officers ON incidents.case_number = officers.case_number\nJOIN \n    subjects ON incidents.case_number = subjects.case_number\nWHERE \n    incidents.subject_statuses = 'Deceased Injured'\n    AND officers.full_name = 'Ruben Fredirick'",
    "2488": "SELECT \n    (CAST(COUNT(DISTINCT o.case_number) AS FLOAT) / (SELECT COUNT(DISTINCT i.case_number) \n     FROM incidents i \n     WHERE i.subject_statuses = 'Injured')) * 100 AS proportion_of_male_officers_in_injured_cases\nFROM officers o\nJOIN incidents i ON o.case_number = i.case_number\nWHERE i.subject_statuses = 'Injured' AND o.gender = 'M'",
    "2489": "SELECT Chromosome, COUNT(*) AS NumberOfGenes\nFROM Genes\nWHERE Localization = 'plasma membrane'\nGROUP BY Chromosome",
    "2490": "SELECT COUNT(*) \nFROM Genes \nWHERE Essential = 'No' AND Localization = 'nucleus'",
    "2491": "SELECT COUNT(DISTINCT g.GeneID)\nFROM Genes g\nJOIN Classification c ON g.GeneID = c.GeneID\nWHERE g.Function = 'nucleic acid metabolism' AND c.Localization = 'vacuole'",
    "2492": "SELECT Localization\nFROM Genes\nGROUP BY Localization\nORDER BY MAX(Chromosome) DESC\nLIMIT 1",
    "2493": "SELECT MAX(Expression_Corr) AS Highest_Expression_Correlation\nFROM Interactions\nJOIN Classification AS C1 ON Interactions.GeneID1 = C1.GeneID\nJOIN Classification AS C2 ON Interactions.GeneID2 = C2.GeneID\nWHERE C1.Localization = 'nucleus' AND C2.Localization = 'nucleus'",
    "2494": "SELECT G1.Function AS Function1, G2.Function AS Function2\nFROM Interactions\nJOIN Genes AS G1 ON Interactions.GeneID1 = G1.GeneID\nJOIN Genes AS G2 ON Interactions.GeneID2 = G2.GeneID\nORDER BY Interactions.Expression_Corr ASC\nLIMIT 1",
    "2495": "SELECT COUNT(*) \nFROM Interactions \nJOIN Genes AS G1 ON Interactions.GeneID1 = G1.GeneID \nJOIN Genes AS G2 ON Interactions.GeneID2 = G2.GeneID \nWHERE G1.Class != 'motorproteins' \nAND G2.Class != 'motorproteins' \nAND Expression_Corr < 0;",
    "2496": "SELECT MAX(i.Expression_Corr) AS Highest_Expression_Corr\nFROM Interactions i\nJOIN Genes g1 ON i.GeneID1 = g1.GeneID\nJOIN Genes g2 ON i.GeneID2 = g2.GeneID\nWHERE (g1.Chromosome = 8 AND g2.Chromosome = 6)\n   OR (g1.Chromosome = 6 AND g2.Chromosome = 8);",
    "2497": "SELECT Motif\nFROM Genes\nWHERE Localization = 'cytoplasm' AND Chromosome = 7",
    "2498": "SELECT COUNT(*) \nFROM Genes \nWHERE Essential = 'No' \nAND Function = 'transcription' \nAND Localization != 'cytoplasm'",
    "2499": "SELECT COUNT(*) \nFROM Interactions AS i\nJOIN Genes AS g1 ON i.GeneID1 = g1.GeneID\nJOIN Genes AS g2 ON i.GeneID2 = g2.GeneID\nWHERE i.Expression_Corr > 0\nAND g1.Essential = 'no'\nAND g2.Essential = 'no';",
    "2500": "SELECT \n    CAST(SUM(CASE WHEN g1.Chromosome > 10 AND g2.Chromosome > 10 THEN 1 ELSE 0 END) AS REAL) / \n    SUM(CASE WHEN i.Expression_Corr > 0 THEN 1 ELSE 0 END) AS Possibility\nFROM \n    Interactions i\nJOIN \n    Genes g1 ON i.GeneID1 = g1.GeneID\nJOIN \n    Genes g2 ON i.GeneID2 = g2.GeneID\nWHERE \n    i.Expression_Corr > 0",
    "2501": "SELECT AVG(Expression_Corr) AS Avg_Expression_Corr\nFROM Interactions\nJOIN Genes AS G1 ON Interactions.GeneID1 = G1.GeneID\nJOIN Genes AS G2 ON Interactions.GeneID2 = G2.GeneID\nWHERE G1.Class = 'ATPases' AND G2.Class = 'ATPases'",
    "2502": "SELECT G.GeneID\nFROM Genes G\nJOIN Classification C ON G.GeneID = C.GeneID\nWHERE G.Localization = 'cytoplasm' AND G.Function = 'metabolism'",
    "2503": "SELECT COUNT(DISTINCT GeneID) \nFROM Classification \nWHERE Localization IN ('plasma', 'nucleus');",
    "2504": "SELECT \n    CASE \n        WHEN COUNT(*) = 0 THEN 'No physical type interactions found'\n        ELSE 'Negative Correlation'\n    END AS Correlation_Type,\n    (COUNT(CASE WHEN Expression_Corr < 0 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage_Negative_Correlation\nFROM Interactions\nWHERE Type = 'physical'",
    "2505": "WITH Cytoskeleton_Genes AS (\n    SELECT \n        g.GeneID,\n        g.Class,\n        g.Phenotype\n    FROM \n        Genes g\n        JOIN Classification c ON g.GeneID = c.GeneID\n    WHERE \n        c.Localization = 'cytoskeleton'\n),\nUnknown_Class_Genes AS (\n    SELECT \n        COUNT(*) AS Unknown_Class_Count\n    FROM \n        Cytoskeleton_Genes\n    WHERE \n        Class = 'unknown'\n),\nNon_Conditional_Unknown_Class_Genes AS (\n    SELECT \n        COUNT(*) AS Non_Conditional_Unknown_Class_Count\n    FROM \n        Cytoskeleton_Genes\n    WHERE \n        Class = 'unknown' AND Phenotype != 'conditional'\n),\nTotal_Cytoskeleton_Genes AS (\n    SELECT \n        COUNT(*) AS Total_Count\n    FROM \n        Cytoskeleton_Genes\n)\n\nSELECT \n    (SELECT Unknown_Class_Count FROM Unknown_Class_Genes) * 100.0 / (SELECT Total_Count FROM Total_Cytoskeleton_Genes) AS Percentage_Unknown_Class,\n    (SELECT Non_Conditional_Unknown_Class_Count FROM Non_Conditional_Unknown_Class_Genes) AS Non_Conditional_Unknown_Class_Count",
    "2506": "SELECT Interactions.Type\nFROM Interactions\nJOIN Genes AS G1 ON Interactions.GeneID1 = G1.GeneID\nJOIN Genes AS G2 ON Interactions.GeneID2 = G2.GeneID\nWHERE G1.Function = 'cellular transport' AND G2.Function = 'transport medicine'\nAND G1.Essential = 'no' AND G2.Essential = 'no'",
    "2507": "SELECT DISTINCT I.GeneID1 AS Gene\nFROM Interactions I\nJOIN Classification C1 ON I.GeneID1 = C1.GeneID\nJOIN Classification C2 ON I.GeneID2 = C2.GeneID\nWHERE C2.Localization = 'nucleus' AND I.Expression_Corr > 0\nUNION\nSELECT DISTINCT I.GeneID2 AS Gene\nFROM Interactions I\nJOIN Classification C1 ON I.GeneID1 = C1.GeneID\nJOIN Classification C2 ON I.GeneID2 = C2.GeneID\nWHERE C1.Localization = 'nucleus' AND I.Expression_Corr > 0",
    "2508": "SELECT DISTINCT i.GeneID1\nFROM Interactions i\nJOIN Genes g ON i.GeneID1 = g.GeneID\nWHERE g.Essential = 'yes'\nAND g.Class = 'transcription factor'\nAND g.Localization = 'nucleus'\nAND i.Type = 'genetic'",
    "2509": "SELECT COUNT(DISTINCT g.GeneID) \nFROM Genes g \nLEFT JOIN Interactions i ON g.GeneID = i.GeneID1 OR g.GeneID = i.GeneID2 \nWHERE g.Essential = 'no' \nAND g.Class != 'motorprotein' \nAND g.Phenotype = 'cell cycle defects' \nAND (i.Type != 'physical' OR i.Type IS NULL)",
    "2510": "SELECT \n    (COUNT(DISTINCT CASE WHEN i.Type = 'positive' THEN i.GeneID1 END) * 1.0 / COUNT(DISTINCT g.GeneID)) * 100 AS positive_interaction_percentage\nFROM \n    Genes g\n    LEFT JOIN Interactions i ON g.GeneID = i.GeneID1 OR g.GeneID = i.GeneID2\nWHERE \n    g.Phenotype = 'nucleic acid metabolism defects'\n    AND g.Motif = 'PS00107'",
    "2511": "WITH NegativelyCorrelatedGenes AS (\n    SELECT \n        I.GeneID1, \n        I.GeneID2, \n        G1.Essential AS Essential1, \n        G2.Essential AS Essential2\n    FROM \n        Interactions I\n    JOIN \n        Genes G1 ON I.GeneID1 = G1.GeneID\n    JOIN \n        Genes G2 ON I.GeneID2 = G2.GeneID\n    WHERE \n        I.Expression_Corr < 0 \n        AND I.Type = 'genetical'\n), NonEssentialCount AS (\n    SELECT \n        COUNT(*) AS NonEssentialCount\n    FROM \n        NegativelyCorrelatedGenes\n    WHERE \n        Essential1 = 'non-essential' \n        OR Essential2 = 'non-essential'\n), EssentialCount AS (\n    SELECT \n        COUNT(*) AS EssentialCount\n    FROM \n        NegativelyCorrelatedGenes\n    WHERE \n        (Essential1 = 'essential' AND Essential2 = 'non-essential')\n        OR (Essential1 = 'non-essential' AND Essential2 = 'essential')\n        OR (Essential1 = 'essential' AND Essential2 = 'essential')\n), PercentageCalc AS (\n    SELECT \n        (CAST(NonEssentialCount.NonEssentialCount AS REAL) / (NonEssentialCount.NonEssentialCount + EssentialCount.EssentialCount)) * 100 AS Percentage\n    FROM \n        NonEssentialCount, EssentialCount\n)\nSELECT \n    Percentage\nFROM \n    PercentageCalc;",
    "2512": "SELECT \n    p.App, \n    ur.Translated_Review\nFROM \n    playstore p\nJOIN \n    user_reviews ur ON p.App = ur.App\nWHERE \n    p.\"Last Updated\" BETWEEN '2018-01-01' AND '2018-01-31'\n    AND ur.Sentiment = 'Positive'\nGROUP BY \n    p.App",
    "2513": "SELECT COUNT(*) AS MildlyLikes\nFROM user_reviews\nWHERE App = '7 Minute Workout'\nAND Sentiment_Polarity >= 0\nAND Sentiment_Polarity < 0.5;",
    "2514": "SELECT COUNT(*) AS Neutral_Attitude_Count, p.Rating\nFROM user_reviews u\nJOIN playstore p ON u.App = p.App\nWHERE u.Sentiment = 'Neutral' AND p.App = 'HTC Weather'",
    "2515": "SELECT p.App, p.Category\nFROM playstore p\nJOIN (\n    SELECT App, COUNT(*) as Total\n    FROM user_reviews\n    WHERE Sentiment_Polarity = '-1'\n    GROUP BY App\n    ORDER BY Total DESC\n    LIMIT 1\n) AS subquery ON p.App = subquery.App",
    "2516": "SELECT AVG(CAST(Sentiment_Polarity AS REAL)) AS avg_sentiment_polarity, \n       (SELECT \"Content Rating\" FROM playstore WHERE App = 'Cooking Fever') AS target_age_group\nFROM user_reviews\nWHERE App = 'Cooking Fever'",
    "2517": "SELECT MIN(CAST(Sentiment_Polarity AS REAL)) AS Lowest_Sentiment_Polarity, p.Installs\nFROM user_reviews u\nJOIN playstore p ON u.App = p.App\nWHERE u.App = 'Basketball Stars' AND CAST(Sentiment_Polarity AS REAL) < -0.5",
    "2518": "SELECT COUNT(*) AS NumberOfReviews\nFROM user_reviews\nWHERE App = 'Akinator'\nAND CAST(Sentiment_Subjectivity AS REAL) <= 0.5;",
    "2519": "SELECT COUNT(*) AS NumberOfApps\nFROM playstore\nWHERE Rating = 5;",
    "2520": "SELECT App\nFROM playstore\nWHERE Price = '0'\nORDER BY CAST(REPLACE(Installs, '+', '') AS INTEGER) DESC\nLIMIT 5",
    "2521": "SELECT App\nFROM playstore\nORDER BY Reviews DESC\nLIMIT 10",
    "2522": "SELECT \n    COUNT(u.Sentiment) AS Neutral_Attitude_Count, \n    p.Category\nFROM \n    user_reviews u\nJOIN \n    playstore p ON u.App = p.App\nWHERE \n    u.App = '10 Best Foods for You' AND u.Sentiment = 'Neutral'",
    "2523": "SELECT p.App, p.Installs\nFROM playstore p\nJOIN user_reviews u ON p.App = u.App\nWHERE u.Sentiment = 'Positive'\nGROUP BY p.App",
    "2524": "SELECT p.App, u.Translated_Review\nFROM playstore p\nJOIN user_reviews u ON p.App = u.App\nWHERE p.Rating = 3.9",
    "2525": "SELECT ps.App, ur.Sentiment\nFROM playstore AS ps\nJOIN user_reviews AS ur ON ps.App = ur.App\nWHERE ps.Android_Ver = '8.0 and up';",
    "2526": "SELECT \n    p.App, \n    SUM(CAST(ur.Sentiment_Subjectivity AS REAL)) AS Total_Sentiment_Subjectivity\nFROM \n    playstore p\nJOIN \n    user_reviews ur ON p.App = ur.App\nWHERE \n    p.Genres LIKE '%;%'\nGROUP BY \n    p.App",
    "2527": "SELECT ps.App, ur.Sentiment\nFROM playstore ps\nJOIN user_reviews ur ON ps.App = ur.App\nWHERE \"Last Updated\" < '2015-01-01'\nGROUP BY ps.App, ur.Sentiment;",
    "2528": "SELECT \n    SUM(CAST(REPLACE(Installs, '+', '') AS INTEGER)) AS total_installs,\n    GROUP_CONCAT(Translated_Review, '; ') AS translated_reviews\nFROM playstore\nLEFT JOIN user_reviews ON playstore.App = user_reviews.App\nWHERE \"Content Rating\" = 'Adults only 18+'",
    "2529": "Given the structure of the tables and the external knowledge provided, we need to calculate the best selling app based on the product of `Price` and `Installs`. However, there are a couple of challenges to address:\n\n1. The `Price` field is in TEXT format and may include a currency symbol that needs to be removed before conversion to a numeric type for calculation.\n2. The `Installs` field is also in TEXT format and includes characters like '+' and ',' which need to be removed before conversion to a numeric type.\n3. After calculating the best selling app, we need to join with the `user_reviews` table to get the sentiment polarity of that app.\n\nGiven these challenges, the SQL query will involve multiple steps including data cleaning, conversion, and joining tables. However, it's important to note that SQLite does not directly support multiplying two columns when one or both are stored as TEXT and require conversion. Additionally, SQLite does not have a built-in function for directly parsing and converting formatted numbers (like those in `Installs` and `Price`). We'll need to use SQLite's `REPLACE` function to clean these fields and `CAST` to convert them to a numeric type for calculation.\n\nHowever, there's a conceptual issue with the external knowledge provided: SQLite cannot directly execute mathematical operations on the `Price` and `Installs` fields without first converting these fields from TEXT to a numeric type, and even then, the operation as described (multiplying a price by installs) is not straightforward due to the formatting of these fields. Moreover, calculating the \"best selling\" app based on this operation requires assumptions not directly supported by SQL or SQLite functions (e.g., removing currency symbols, handling formatted numbers).\n\nGiven these limitations, the exact solution as requested cannot be implemented directly in SQLite without assuming specific formats and making conversions. Below is a conceptual approach to how one might start addressing this problem, but it's important to note that without further assumptions and potentially custom functions or preprocessing steps, this query will not execute successfully in SQLite as-is.\n\n```sqlite\n-- This is a conceptual approach and may not execute successfully due to the reasons mentioned above.\n\nSELECT \n    ps.App, \n    AVG(CAST(ur.Sentiment_Polarity AS REAL)) AS AvgSentimentPolarity\nFROM \n    (SELECT \n        App, \n        CAST(REPLACE(REPLACE(Price, '$', ''), 'Free', '0') AS REAL) AS NumericPrice,\n        CAST(RE",
    "2530": "SELECT \n    AVG(p.Rating) AS average_rating,\n    (SELECT SUM(CASE WHEN u.Sentiment = 'Positive' THEN 1 ELSE 0 END) \n     FROM user_reviews u \n     WHERE u.App = p.App) AS positive_attitude_users\nFROM playstore p\nWHERE p.Category = 'COMICS'",
    "2531": "SELECT Rating FROM playstore WHERE App = 'Draw A Stickman';",
    "2532": "SELECT COUNT(*) AS NumberOfReviewsWithComments\nFROM user_reviews\nWHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL",
    "2533": "SELECT App, Reviews\nFROM playstore\nWHERE Genres = 'Shopping'\nORDER BY Reviews DESC\nLIMIT 5",
    "2534": "SELECT COUNT(*) AS Neutral_Reviews\nFROM user_reviews\nWHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral'",
    "2535": "SELECT App\nFROM playstore\nWHERE Installs = '5,000+'",
    "2536": "SELECT Translated_Review \nFROM user_reviews \nWHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative'",
    "2537": "SELECT u.App\nFROM user_reviews u\nJOIN playstore p ON u.App = p.App\nWHERE p.Type = 'Free' AND u.Sentiment = 'Negative'\nGROUP BY u.App\nORDER BY COUNT(u.Sentiment) DESC\nLIMIT 1",
    "2538": "SELECT COUNT(*) AS Negative_Comments\nFROM user_reviews\nWHERE Sentiment = 'Negative'\nAND App IN (\n    SELECT App\n    FROM playstore\n    WHERE Installs = '100,000,000+'\n)",
    "2539": "SELECT DISTINCT p.\"Content Rating\"\nFROM playstore p\nJOIN user_reviews u ON p.App = u.App\nWHERE u.Translated_Review LIKE '%gr8%'",
    "2540": "SELECT \n    SUM(CAST(ur.Sentiment_Polarity AS REAL)) AS total_sentiment_polarity\nFROM \n    playstore p\nJOIN \n    user_reviews ur ON p.App = ur.App\nWHERE \n    p.Price = (\n        SELECT \n            MAX(CAST(SUBSTR(Price, 2) AS REAL)) \n        FROM \n            playstore \n        WHERE \n            Price LIKE '$%'\n    )",
    "2541": "SELECT p.Rating, u.Translated_Review\nFROM playstore p\nLEFT JOIN user_reviews u ON p.App = u.App\nWHERE p.App = 'Garden Coloring Book'",
    "2542": "SELECT p.App, SUM(CAST(ur.Sentiment_Subjectivity AS REAL)) AS TotalSentimentSubjectivity\nFROM playstore p\nJOIN user_reviews ur ON p.App = ur.App\nWHERE p.Genres LIKE '%Photography%'\nGROUP BY p.App\nORDER BY TotalSentimentSubjectivity DESC\nLIMIT 1",
    "2543": "SELECT ur.Translated_Review AS comments\nFROM user_reviews ur\nJOIN playstore p ON ur.App = p.App\nWHERE p.Rating = 1 AND p.\"Content Rating\" = 'Mature 17+'",
    "2544": "SELECT p.Installs\nFROM playstore p\nJOIN (\n    SELECT App, SUM(CAST(Sentiment_Polarity AS REAL)) AS TotalSentimentPolarity\n    FROM user_reviews\n    WHERE Sentiment_Polarity != '' AND Sentiment_Polarity IS NOT NULL\n    GROUP BY App\n    ORDER BY TotalSentimentPolarity DESC\n    LIMIT 1\n) AS ur ON p.App = ur.App",
    "2545": "SELECT COUNT(*) AS Neutral_Comments\nFROM user_reviews\nJOIN playstore ON user_reviews.App = playstore.App\nWHERE Sentiment = 'Neutral' AND Genres LIKE '%Weather%'",
    "2546": "SELECT \n    p.App,\n    COUNT(u.Translated_Review) AS No_Comment_Reviews\nFROM \n    playstore p\nJOIN \n    user_reviews u ON p.App = u.App\nWHERE \n    p.Installs = '1,000,000,000+' AND u.Translated_Review = 'nan'\nGROUP BY \n    p.App\nORDER BY \n    No_Comment_Reviews DESC\nLIMIT 1",
    "2547": "SELECT \n    p.Rating, \n    SUM(CAST(s.Sentiment_Subjectivity AS REAL)) AS Total_Sentiment_Subjectivity\nFROM \n    playstore p\nJOIN \n    user_reviews s ON p.App = s.App\nWHERE \n    p.App = 'Onefootball - Soccer Scores'",
    "2548": "SELECT \n    (COUNT(CASE WHEN p.\"Content Rating\" = 'Teen' AND u.Translated_Review = 'nan' THEN 1 END) * 1.0 / \n    COUNT(CASE WHEN u.Translated_Review = 'nan' THEN 1 END)) * 100 AS percentage_no_comment_from_teen\nFROM \n    user_reviews u\nJOIN \n    playstore p ON u.App = p.App\nWHERE \n    u.Translated_Review = 'nan'",
    "2549": "SELECT App FROM playstore WHERE Rating = 5;",
    "2550": "SELECT p.App\nFROM playstore p\nWHERE p.Reviews > 75000000 AND p.\"Content Rating\" = 'Teen'",
    "2551": "SELECT DISTINCT Genres\nFROM playstore\nWHERE REPLACE(Installs, '+', '') > 1000000000",
    "2552": "SELECT AVG(CAST(SUBSTR(Price, 2) AS REAL)) AS average_price\nFROM playstore\nWHERE Genres = 'Dating' AND Price != '0'",
    "2553": "SELECT AVG(CAST(REPLACE(Installs, '+', '') AS INTEGER)) AS average_downloads\nFROM playstore\nWHERE Category = 'ENTERTAINMENT'\nAND Size <= '1.0M'",
    "2554": "SELECT AVG(Reviews) AS average_reviews\nFROM playstore\nWHERE Rating = 5;",
    "2555": "SELECT Genres, COUNT(*) AS PositiveReviews\nFROM playstore\nJOIN user_reviews ON playstore.App = user_reviews.App\nWHERE Sentiment_Polarity > 0.5\nGROUP BY Genres\nORDER BY PositiveReviews DESC\nLIMIT 3",
    "2556": "WITH PositiveNegativeCounts AS (\n    SELECT \n        p.App,\n        SUM(CASE WHEN u.Sentiment = 'Positive' THEN 1 ELSE 0 END) AS PositiveCount,\n        SUM(CASE WHEN u.Sentiment = 'Negative' THEN 1 ELSE 0 END) AS NegativeCount\n    FROM \n        playstore p\n    INNER JOIN \n        user_reviews u ON p.App = u.App\n    WHERE \n        p.Rating = 4.7\n    GROUP BY \n        p.App\n),\nPositiveMoreThanNegative AS (\n    SELECT \n        COUNT(*) AS PositiveMoreThanNegativeCount\n    FROM \n        PositiveNegativeCounts\n    WHERE \n        PositiveCount > NegativeCount\n),\nTotalApps AS (\n    SELECT \n        COUNT(DISTINCT p.App) AS TotalAppsWithRating4_7\n    FROM \n        playstore p\n    WHERE \n        p.Rating = 4.7\n)\nSELECT \n    (CAST(PositiveMoreThanNegative.PositiveMoreThanNegativeCount AS REAL) / TotalApps.TotalAppsWithRating4_7) * 100 AS Percentage\nFROM \n    PositiveMoreThanNegative, TotalApps;",
    "2557": "SELECT p.App, AVG(p.Rating) AS Average_Rating\nFROM playstore p\nJOIN user_reviews u ON p.App = u.App\nWHERE u.Sentiment != 'Negative'\nGROUP BY p.App",
    "2558": "WITH SentimentCounts AS (\n    SELECT\n        App,\n        SUM(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE 0 END) AS PositiveCount,\n        SUM(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE 0 END) AS NegativeCount\n    FROM\n        user_reviews\n    GROUP BY\n        App\n),\nMoreNegatives AS (\n    SELECT\n        App\n    FROM\n        SentimentCounts\n    WHERE\n        NegativeCount > PositiveCount\n)\n\nSELECT\n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM SentimentCounts)) * 100 AS PercentageOfAppsMoreNegative\nFROM\n    MoreNegatives;",
    "2559": "SELECT \n    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM playstore WHERE Type = 'Free') AS percentage\nFROM \n    playstore\nWHERE \n    Type = 'Free'\n    AND Rating > 4.5\n    AND substr(\"Last Updated\", -4) <= '2018';",
    "2560": "SELECT Genres FROM playstore WHERE App = 'Honkai Impact 3rd';",
    "2561": "SELECT Rating FROM playstore WHERE App = 'Learn C++';",
    "2562": "SELECT AVG(CAST(SUBSTR(Price, 2) AS REAL)) AS average_price\nFROM playstore\nWHERE Genres LIKE '%Arcade%'\nAND \"Content Rating\" = 'Everyone 10+'\nAND Price != '0'",
    "2563": "SELECT \n    p.Size,\n    COUNT(u.Sentiment_Polarity) AS Pretty_Positive_Favorability_Count\nFROM \n    playstore p\nLEFT JOIN \n    user_reviews u ON p.App = u.App\nWHERE \n    p.App = 'Browser 4G' AND u.Sentiment_Polarity = '0.5'",
    "2564": "SELECT p.App, p.Installs\nFROM playstore p\nJOIN user_reviews u ON p.App = u.App\nWHERE u.Sentiment_Subjectivity = '0.3'",
    "2565": "SELECT \n    p.App, \n    AVG(CAST(ur.Sentiment_Polarity AS REAL)) AS Avg_Sentiment_Polarity, \n    p.Rating\nFROM \n    playstore p\nJOIN \n    user_reviews ur ON p.App = ur.App\nWHERE \n    p.App = 'Golf GPS Rangefinder: Golf Pad'\nGROUP BY \n    p.App",
    "2566": "SELECT \n    p.App,\n    p.Rating,\n    COUNT(u.Sentiment) AS Negative_Sentiments\nFROM \n    playstore p\nLEFT JOIN \n    user_reviews u ON p.App = u.App AND u.Sentiment = 'Negative'\nWHERE \n    p.Genres LIKE '%Puzzle%'\nGROUP BY \n    p.App\nORDER BY \n    p.Rating ASC, \n    Negative_Sentiments DESC\nLIMIT 5",
    "2567": "SELECT \n    (CAST(SUM(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE 0 END) AS REAL) / \n    SUM(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE 0 END)) * 100 AS percentage_ratio\nFROM \n    user_reviews\nWHERE \n    App = 'Fate/Grand Order'",
    "2568": "SELECT \n    p.Installs,\n    ROUND((CAST(SUM(CASE WHEN u.Sentiment = 'Positive' THEN 1 ELSE 0 END) AS REAL) / COUNT(u.Sentiment)) * 100, 2) AS Positive_Sentiment_Percentage\nFROM \n    playstore p\nLEFT JOIN \n    user_reviews u ON p.App = u.App\nWHERE \n    p.App = 'FREEDOME VPN Unlimited anonymous Wifi Security'\nGROUP BY \n    p.Installs",
    "2569": "SELECT \n    MAX(CAST(user_reviews.Sentiment_Polarity AS REAL)) AS Highest_Sentiment_Polarity, \n    playstore.Genres\nFROM \n    user_reviews\nJOIN \n    playstore ON user_reviews.App = playstore.App\nWHERE \n    playstore.App = 'Honkai Impact 3rd'",
    "2570": "SELECT p.Rating, COUNT(u.Sentiment_Polarity) AS Dislikes\nFROM playstore p\nLEFT JOIN user_reviews u ON p.App = u.App\nWHERE p.App = 'Dragon Ball Legends' AND u.Sentiment_Polarity < -0.5",
    "2571": "SELECT p.App, p.Rating, u.Translated_Review\nFROM playstore p\nLEFT JOIN user_reviews u ON p.App = u.App\nWHERE p.Category = 'EDUCATION'\nORDER BY p.Rating ASC, p.Reviews ASC\nLIMIT 1",
    "2572": "SELECT p.App, u.Translated_Review\nFROM playstore p\nLEFT JOIN user_reviews u ON p.App = u.App\nWHERE p.Type = 'Free' AND p.Category = 'SPORTS'",
    "2573": "SELECT \n    COUNT(playstore.App) AS Total_Teen_RPG_Apps, \n    AVG(CAST(user_reviews.Sentiment_Polarity AS REAL)) AS Average_Sentiment_Polarity\nFROM \n    playstore\nJOIN \n    user_reviews ON playstore.App = user_reviews.App\nWHERE \n    playstore.Genres LIKE '%Role Playing%' \n    AND playstore.\"Content Rating\" = 'Teen'",
    "2574": "SELECT \n    AVG(p.Rating) AS average_rating,\n    ROUND((SUM(CASE WHEN u.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100.0 / COUNT(u.Sentiment)), 2) AS positive_sentiment_percentage\nFROM \n    playstore p\nLEFT JOIN \n    user_reviews u ON p.App = u.App\nWHERE \n    p.Genres LIKE '%Racing%'",
    "2575": "SELECT Region, COUNT(\"Sales Team\") AS NumberOfSalesTeams\nFROM \"Sales Team\"\nGROUP BY Region\nORDER BY NumberOfSalesTeams DESC\nLIMIT 1",
    "2576": "SELECT * FROM Customers WHERE \"Customer Names\" LIKE '%Group%'",
    "2577": "SELECT AVG(\"Median Income\") AS AverageMedianIncome\nFROM \"Store Locations\"\nWHERE Type = 'City';",
    "2578": "SELECT \"Sales Team\".\"Sales Team\", \"Sales Team\".Region\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \"Sales Orders\".OrderNumber = 'SO - 000137'",
    "2579": "SELECT \"Sales Orders\".OrderNumber, Products.\"Product Name\"\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Sales Team\".\"Sales Team\" = 'Douglas Tucker'",
    "2580": "SELECT c.\"Customer Names\"\nFROM \"Sales Orders\" so\nJOIN Customers c ON so._CustomerID = c.CustomerID\nJOIN Products p ON so._ProductID = p.ProductID\nWHERE p.\"Product Name\" = 'Cocktail Glasses'\nAND so.OrderDate BETWEEN '2020-01-01' AND '2020-12-31'\nAND so.\"Discount Applied\" = (\n    SELECT MAX(so2.\"Discount Applied\")\n    FROM \"Sales Orders\" so2\n    JOIN Products p2 ON so2._ProductID = p2.ProductID\n    WHERE p2.\"Product Name\" = 'Cocktail Glasses'\n    AND so2.OrderDate BETWEEN '2020-01-01' AND '2020-12-31'\n)",
    "2581": "SELECT \"Sales Orders\".OrderNumber, \"Store Locations\".\"City Name\"\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nWHERE \"Sales Orders\".\"Sales Channel\" = 'In-Store'",
    "2582": "SELECT \"Customer Names\", OrderDate, \"Product Name\"\nFROM \"Sales Orders\"\nJOIN Customers ON Customers.CustomerID = _CustomerID\nJOIN Products ON Products.ProductID = _ProductID\nORDER BY CAST(\"Unit Cost\" AS REAL) DESC\nLIMIT 1",
    "2583": "SELECT \"Sales Orders\".OrderNumber\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Rochester Ltd' AND SUBSTR(OrderDate, -2) = '18'",
    "2584": "SELECT \"Sales Orders\".OrderNumber, Products.\"Product Name\", \"Sales Team\".\"Sales Team\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \"Sales Orders\".WarehouseCode = 'WARE-NMK1003'",
    "2585": "SELECT \"Customer Names\"\nFROM Customers\nWHERE CustomerID IN (\n    SELECT _CustomerID\n    FROM \"Sales Orders\"\n    WHERE \"Sales Channel\" = 'Online'\n)",
    "2586": "SELECT AVG(CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) AS AvgNetProfit\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Bakeware';",
    "2587": "SELECT \"Sales Team\".\"Sales Team\"\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \"Sales Orders\".OrderDate LIKE '%/20'\nORDER BY (CAST(\"Sales Orders\".\"Unit Price\" AS REAL) - CAST(\"Sales Orders\".\"Unit Cost\" AS REAL)) DESC\nLIMIT 1",
    "2588": "SELECT \n    \"Sales Orders\".OrderNumber,\n    (\"Sales Orders\".\"Unit Price\" - \"Sales Orders\".\"Unit Cost\") * \"Sales Orders\".\"Order Quantity\" AS NetProfit\nFROM \n    \"Sales Orders\"\nJOIN \n    \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \n    \"Sales Team\".\"Sales Team\" = 'Joshua Bennett'",
    "2589": "SELECT\n    100.0 * SUM(CASE WHEN P.\"Product Name\" = 'Home Fragrances' THEN 1 ELSE 0 END) / COUNT(SO.OrderNumber) AS percentage\nFROM\n    \"Sales Orders\" SO\nJOIN\n    Products P ON SO._ProductID = P.ProductID\nWHERE\n    SO.ShipDate BETWEEN '2018-07-01' AND '2018-07-31';",
    "2590": "SELECT CustomerID, \"Customer Names\"\nFROM Customers\nWHERE \"Customer Names\" LIKE 'W%'",
    "2591": "SELECT ProductID, \"Product Name\"\nFROM Products\nWHERE \"Product Name\" LIKE '%Outdoor%'",
    "2592": "SELECT COUNT(*) AS NumberOfProductsShipped\nFROM \"Sales Orders\"\nWHERE \"Discount Applied\" = 0.4\nAND \"Sales Channel\" = 'In-Store'\nAND WarehouseCode = 'WARE-NMK1003'",
    "2593": "SELECT \"City Name\", \"Median Income\"\nFROM \"Store Locations\"\nWHERE StateCode = (SELECT StateCode FROM Regions WHERE State = 'Florida')\nORDER BY Population DESC\nLIMIT 1;",
    "2594": "SELECT s.StoreID AS ID, s.\"City Name\" AS City, r.Region\nFROM \"Store Locations\" s\nJOIN Regions r ON s.StateCode = r.StateCode\nWHERE s.County = 'Allen'",
    "2595": "WITH StoreCounts AS (\n    SELECT\n        Type,\n        COUNT(StoreID) AS TotalStores\n    FROM \"Store Locations\"\n    GROUP BY Type\n    HAVING Type IN ('Borough', 'CDP')\n),\nMinType AS (\n    SELECT\n        Type\n    FROM StoreCounts\n    ORDER BY TotalStores ASC\n    LIMIT 1\n)\nSELECT\n    sl.StoreID AS ID,\n    sl.\"City Name\" AS City,\n    sl.State,\n    r.Region\nFROM \"Store Locations\" sl\nJOIN Regions r ON sl.StateCode = r.StateCode\nJOIN MinType mt ON sl.Type = mt.Type",
    "2596": "SELECT st.Region, st.\"Sales Team\", \n       SUM(CASE WHEN so.\"Sales Channel\" = 'In-Store' THEN 1 ELSE 0 END) AS InStoreOrders,\n       SUM(CASE WHEN so.\"Sales Channel\" = 'Online' THEN 1 ELSE 0 END) AS OnlineOrders\nFROM \"Sales Team\" st\nJOIN \"Sales Orders\" so ON st.SalesTeamID = so._SalesTeamID\nWHERE st.SalesTeamID = 18\nGROUP BY st.Region, st.\"Sales Team\"",
    "2597": "SELECT\n    (SELECT COUNT(*) FROM \"Sales Orders\"\n     INNER JOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\n     WHERE \"Sales Channel\" = 'In-Store' AND \"Customer Names\" = 'Medline') * 1.0 /\n    (SELECT COUNT(*) FROM \"Sales Orders\"\n     INNER JOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\n     WHERE \"Customer Names\" = 'Medline') AS percentage",
    "2598": "SELECT c.\"Customer Names\", \n       julianday(so.DeliveryDate) - julianday(so.OrderDate) AS \"Lasting Delivery Period\"\nFROM \"Sales Orders\" so\nJOIN Customers c ON so._CustomerID = c.CustomerID\nJOIN Products p ON so._ProductID = p.ProductID\nWHERE so.\"Sales Channel\" = 'Wholesale'\n  AND p.\"Product Name\" = 'Bedroom Furniture'\n  AND SUBSTR(so.OrderDate, -2) = '19'",
    "2599": "SELECT c.\"Customer Names\", p.\"Product Name\"\nFROM \"Sales Orders\" so\nJOIN Customers c ON so._CustomerID = c.CustomerID\nJOIN Products p ON so._ProductID = p.ProductID\nWHERE (CAST(so.\"Unit Price\" AS REAL) - CAST(so.\"Unit Cost\" AS REAL)) * so.\"Order Quantity\" > 3800",
    "2600": "SELECT \"City Name\", Region\nFROM \"Store Locations\" SL\nJOIN Regions R ON SL.StateCode = R.StateCode\nWHERE \"Water Area\" = 0 AND R.State = 'California'",
    "2601": "SELECT\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM \"Sales Orders\" \n     JOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\n     WHERE \"Sales Team\".\"Sales Team\" = 'Carlos Miller') /\n    (SELECT CAST(COUNT(*) AS REAL) FROM \"Sales Orders\") * 100 AS percentage",
    "2602": "SELECT\n    (SELECT COUNT(*) FROM \"Sales Orders\" JOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID WHERE \"Product Name\" = 'Platters') AS PlattersOrders,\n    (SELECT COUNT(*) FROM \"Sales Orders\" JOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID WHERE \"Product Name\" = 'Serveware') AS ServewareOrders",
    "2603": "SELECT\n    SUM((CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) * \"Order Quantity\") AS TotalNetProfit\nFROM\n    \"Sales Orders\"\nJOIN\n    \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nWHERE\n    \"Store Locations\".\"City Name\" = (\n        SELECT\n            \"City Name\"\n        FROM\n            \"Store Locations\"\n        ORDER BY\n            \"Median Income\" DESC\n        LIMIT 1\n    )",
    "2604": "SELECT \"Sales Team\".SalesTeamID, COUNT(\"Sales Orders\".OrderNumber) AS NumberOfOrders\nFROM \"Sales Team\"\nJOIN \"Sales Orders\" ON \"Sales Team\".SalesTeamID = \"Sales Orders\"._SalesTeamID\nWHERE \"Sales Team\".Region = 'South' AND \"Sales Team\".SalesTeamID BETWEEN 1 AND 9\nGROUP BY \"Sales Team\".SalesTeamID",
    "2605": "SELECT COUNT(OrderNumber) AS NumberOfOrders\nFROM \"Sales Orders\"\nWHERE OrderDate = '5/31/2018'",
    "2606": "SELECT OrderNumber\nFROM \"Sales Orders\"\nWHERE DeliveryDate = '6/13/2018'",
    "2607": "SELECT COUNT(OrderNumber) AS NumberOfOrders\nFROM \"Sales Orders\"\nWHERE \"Order Quantity\" > 5",
    "2608": "SELECT State FROM Regions WHERE StateCode = 'GA';",
    "2609": "SELECT COUNT(*) AS MidwestStates\nFROM Regions\nWHERE Region = 'Midwest'",
    "2610": "SELECT \"Product Name\"\nFROM Products\nJOIN \"Sales Orders\" ON Products.ProductID = \"Sales Orders\"._ProductID\nWHERE \"Unit Cost\" = '781.22'",
    "2611": "SELECT \"Delivery Date\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Cookware'",
    "2612": "SELECT COUNT(*) AS \"Furniture Cushions Orders in 2018\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Furniture Cushions' AND SUBSTR(OrderDate, -2) = '18'",
    "2613": "SELECT \"Product Name\"\nFROM Products\nWHERE ProductID IN (\n    SELECT _ProductID\n    FROM \"Sales Orders\"\n    WHERE \"Discount Applied\" = 0.1\n)",
    "2614": "SELECT AVG(CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) AS AvgNetProfit\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Phones' AND \"Sales Channel\" = 'Distributor';",
    "2615": "SELECT AVG(CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) AS AvgNetProfit\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Bar Tools' AND \"Order Quantity\" > 5;",
    "2616": "SELECT \"City Name\"\nFROM \"Store Locations\" sl\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE r.Region = 'South'",
    "2617": "SELECT DISTINCT r.Region\nFROM \"Store Locations\" sl\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE sl.Type = 'Town'",
    "2618": "SELECT COUNT(*) AS NumberOfOrders\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Medsep Group';",
    "2619": "SELECT \"Discount Applied\"\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Ole Group' AND \"Discount Applied\" IS NOT NULL",
    "2620": "SELECT \"Customer Names\"\nFROM Customers\nJOIN \"Sales Orders\" ON Customers.CustomerID = \"Sales Orders\"._CustomerID\nWHERE ShipDate = '7/8/18'",
    "2621": "SELECT COUNT(OrderNumber) AS NumberOfOrders\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Ei' AND \"Order Quantity\" > 4;",
    "2622": "SELECT COUNT(*) AS NumberOfOrdersWith5PercentDiscount\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Pacific Ltd' AND \"Discount Applied\" = 0.05;",
    "2623": "SELECT \"Customer Names\"\nFROM Customers\nJOIN \"Sales Orders\" ON Customers.CustomerID = \"Sales Orders\"._CustomerID\nWHERE CAST(\"Unit Cost\" AS REAL) > 4000",
    "2624": "SELECT StoreID AS id, Latitude, Longitude\nFROM \"Store Locations\"\nWHERE \"City Name\" = 'Birmingham'",
    "2625": "SELECT \"City Name\"\nFROM \"Store Locations\"\nORDER BY Population DESC\nLIMIT 1;",
    "2626": "SELECT COUNT(*) AS \"Number of CDP Stores in California\"\nFROM \"Store Locations\"\nWHERE Type = 'CDP' AND StateCode IN (SELECT StateCode FROM Regions WHERE State = 'California')",
    "2627": "SELECT \"Sales Orders\".OrderNumber, Products.\"Product Name\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Sales Orders\".\"Unit Price\" = (\n    SELECT MIN(\"Unit Price\") FROM \"Sales Orders\"\n)",
    "2628": "SELECT \"Product Name\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE OrderDate LIKE '%/19'\nORDER BY (CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) DESC\nLIMIT 1",
    "2629": "SELECT AVG(CAST(\"Unit Price\" AS REAL)) AS AvgUnitPrice\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Cookware';",
    "2630": "SELECT DISTINCT \"Sales Team\".\"Sales Team\"\nFROM \"Sales Team\"\nJOIN \"Sales Orders\" ON \"Sales Team\".SalesTeamID = \"Sales Orders\"._SalesTeamID\nWHERE \"Sales Orders\".OrderDate = '5/31/18'",
    "2631": "SELECT \"Sales Team\".\"Sales Team\"\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE SUBSTR(OrderDate, -4) = '2019'\nGROUP BY \"Sales Team\".\"Sales Team\"\nORDER BY COUNT(OrderNumber) ASC\nLIMIT 1",
    "2632": "SELECT SUBSTR(OrderDate, -2) AS Year, COUNT(OrderNumber) AS NumberOfOrders\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \"Sales Team\".\"Sales Team\" = 'George Lewis'\nAND SUBSTR(OrderDate, -2) IN ('18', '19', '20')\nGROUP BY Year\nORDER BY NumberOfOrders DESC\nLIMIT 1",
    "2633": "SELECT\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM \"Sales Orders\" SO\n     JOIN \"Store Locations\" SL ON SO._StoreID = SL.StoreID\n     WHERE SL.County = 'Orange County' AND SUBSTR(SO.OrderDate, -2) = '18') /\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM \"Sales Orders\"\n     WHERE SUBSTR(OrderDate, -2) = '18') AS percentage;",
    "2634": "SELECT OrderNumber\nFROM \"Sales Orders\"\nORDER BY CAST(\"Unit Price\" AS REAL) DESC\nLIMIT 1",
    "2635": "SELECT _SalesTeamID\nFROM \"Sales Orders\"\nWHERE SUBSTR(OrderDate, -2) = '18'\nGROUP BY _SalesTeamID\nORDER BY COUNT(OrderNumber) DESC\nLIMIT 1;",
    "2636": "SELECT \"Unit Cost\"\nFROM \"Sales Orders\"\nWHERE OrderNumber = 'SO - 000103';",
    "2637": "SELECT COUNT(so.OrderNumber) AS TotalOrders2020\nFROM \"Sales Orders\" so\nJOIN \"Store Locations\" sl ON so._StoreID = sl.StoreID\nWHERE sl.County = 'Maricopa' AND SUBSTR(so.OrderDate, -2) = '20'",
    "2638": "SELECT \"Store Locations\".Latitude, \"Store Locations\".Longitude\nFROM \"Store Locations\"\nJOIN \"Sales Orders\" ON \"Store Locations\".StoreID = \"Sales Orders\"._StoreID\nWHERE \"Sales Orders\".OrderNumber = 'SO - 000115';",
    "2639": "SELECT \"Store Locations\".\"City Name\", COUNT(\"Sales Orders\".OrderNumber) AS TotalOrders\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nWHERE \"Sales Orders\".OrderDate BETWEEN '2019-01-01' AND '2019-12-31'\nGROUP BY \"Store Locations\".\"City Name\"",
    "2640": "SELECT c.\"Customer Names\"\nFROM Customers c\nJOIN \"Sales Orders\" so ON c.CustomerID = so._CustomerID\nWHERE SUBSTR(so.OrderDate, -2) = '18'\nGROUP BY c.CustomerID\nHAVING COUNT(so.OrderNumber) > 3",
    "2641": "SELECT COUNT(OrderNumber) AS TotalOrders\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Medsep Group' AND SUBSTR(OrderDate, -2) IN ('18', '19', '20');",
    "2642": "SELECT \"Customer Names\"\nFROM Customers\nJOIN \"Sales Orders\" ON Customers.CustomerID = \"Sales Orders\"._CustomerID\nWHERE \"Order Quantity\" > 5 AND OrderDate = '6/1/2018'",
    "2643": "WITH ProfitData AS (\n    SELECT \n        \"Sales Orders\".OrderNumber,\n        \"Sales Team\".\"Sales Team\",\n        (\"Unit Price\" - \"Unit Cost\") AS NetProfit\n    FROM \"Sales Orders\"\n    JOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\n    JOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\n    WHERE \"Sales Team\".\"Sales Team\" = 'Stephen Payne'\n),\nTotalOrders AS (\n    SELECT \n        COUNT(*) AS TotalCount\n    FROM ProfitData\n),\nProfitableOrders AS (\n    SELECT \n        COUNT(*) AS ProfitableCount\n    FROM ProfitData\n    WHERE NetProfit > 1000\n)\nSELECT \n    (CAST(ProfitableCount AS REAL) / TotalCount) * 100 AS Percentage\nFROM TotalOrders, ProfitableOrders;",
    "2644": "SELECT COUNT(*) AS NumberOfSalesTeamsFromNortheast\nFROM \"Sales Team\"\nWHERE Region = 'Northeast'",
    "2645": "SELECT \"City Name\", Latitude, Longitude\nFROM \"Store Locations\"\nWHERE County = 'Maricopa'",
    "2646": "SELECT OrderNumber\nFROM \"Sales Orders\"\nORDER BY CAST(\"Unit Cost\" AS REAL) DESC\nLIMIT 1;",
    "2647": "SELECT \"Product Name\"\nFROM Products\nWHERE ProductID BETWEEN 30 AND 40;",
    "2648": "SELECT MAX(\"Unit Cost\") / MIN(\"Unit Cost\") AS Cost_Ratio\nFROM \"Sales Orders\"\nWHERE \"Unit Cost\" IS NOT NULL AND \"Unit Cost\" != ''",
    "2649": "SELECT \"Product Name\"\nFROM Products\nJOIN \"Sales Orders\" ON Products.ProductID = \"Sales Orders\"._ProductID\nWHERE SUBSTR(OrderDate, -2) = '18'\nGROUP BY Products.ProductID\nORDER BY COUNT(\"Sales Orders\".OrderNumber) DESC\nLIMIT 1;",
    "2650": "SELECT SUM(\"Order Quantity\") AS ProductsSoldByAdamHernandez\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \"Sales Team\".\"Sales Team\" = 'Adam Hernandez';",
    "2651": "SELECT \"Sales Orders\".OrderNumber\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nWHERE \"Store Locations\".\"City Name\" = 'Daly City'",
    "2652": "SELECT COUNT(*) AS NumberOfOrders\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Rochester Ltd'",
    "2653": "SELECT \"Sales Orders\".OrderNumber\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Qualitest'\nORDER BY \"Sales Orders\".\"Order Quantity\" DESC\nLIMIT 1;",
    "2654": "SELECT \"Sales Orders\".OrderNumber, Products.\"Product Name\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Sales Orders\".\"Sales Channel\" = 'In-Store'",
    "2655": "SELECT COUNT(*) AS OnlineSalesMay2018FromNorman\nFROM \"Sales Orders\" SO\nJOIN \"Store Locations\" SL ON SO._StoreID = SL.StoreID\nWHERE SO.\"Sales Channel\" = 'Online'\nAND SO.OrderDate LIKE '5/%/18'\nAND SL.\"City Name\" = 'Norman'",
    "2656": "SELECT \n    p.\"Product Name\",\n    SUM(so.\"Order Quantity\") AS TotalQuantity\nFROM \n    \"Sales Orders\" so\nINNER JOIN \n    \"Store Locations\" sl ON so._StoreID = sl.StoreID\nINNER JOIN \n    Products p ON so._ProductID = p.ProductID\nWHERE \n    sl.County = 'Maricopa'\nGROUP BY \n    p.\"Product Name\"\nORDER BY \n    TotalQuantity ASC\nLIMIT 1;",
    "2657": "SELECT \"Sales Orders\".OrderNumber\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \"Sales Team\".\"Sales Team\" = 'Samuel Fowler'",
    "2658": "SELECT SUM(\"Order Quantity\") AS Total_Baseballs_Ordered\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Baseball' AND OrderDate LIKE '12/%/17'",
    "2659": "SELECT AVG(\"Order Quantity\") AS AverageMonthlySales\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Ornaments' AND OrderDate LIKE '2018-%'\nGROUP BY strftime('%m', OrderDate)",
    "2660": "SELECT\n    (SUM(CASE WHEN sl.\"City Name\" = 'Burbank' THEN so.\"Order Quantity\" ELSE 0 END) * 1.0 / \n    SUM(so.\"Order Quantity\")) * 100 AS percentage\nFROM\n    \"Sales Orders\" so\nJOIN\n    \"Store Locations\" sl ON so._StoreID = sl.StoreID\nWHERE\n    SUBSTR(so.OrderDate, -2) = '18'",
    "2661": "SELECT\n    (SELECT COUNT(OrderNumber) FROM \"Sales Orders\" WHERE WarehouseCode = 'WARE-MKL1006') -\n    (SELECT COUNT(OrderNumber) FROM \"Sales Orders\" WHERE WarehouseCode = 'WARE-NBV1002') AS Difference",
    "2662": "SELECT \"Product Name\"\nFROM Products\nWHERE ProductID IN (\n    SELECT _ProductID\n    FROM \"Sales Orders\"\n    WHERE DeliveryDate LIKE '%/21'\n    AND _CustomerID IN (\n        SELECT CustomerID\n        FROM Customers\n        WHERE \"Customer Names\" = 'Sundial'\n    )\n)",
    "2663": "SELECT \"Store Locations\".StoreID, Regions.Region\nFROM \"Store Locations\"\nJOIN Regions ON \"Store Locations\".StateCode = Regions.StateCode\nWHERE Regions.State = 'Michigan'",
    "2664": "SELECT \n    C.\"Customer Names\",\n    COUNT(SO.OrderNumber) AS TotalOrders\nFROM \n    \"Sales Orders\" SO\nJOIN \n    Customers C ON SO._CustomerID = C.CustomerID\nWHERE \n    C.\"Customer Names\" IN ('Apollo Ltd', 'Pacific Ltd')\nGROUP BY \n    C.\"Customer Names\"",
    "2665": "SELECT _StoreID, COUNT(OrderNumber) AS OrderCount\nFROM \"Sales Orders\"\nWHERE _StoreID IN (SELECT StoreID FROM \"Store Locations\" WHERE \"City Name\" IN ('Aurora (Township)', 'Babylong (Town)'))\nGROUP BY _StoreID\nORDER BY OrderCount DESC\nLIMIT 1",
    "2666": "SELECT c.\"Customer Names\", p.\"Product Name\"\nFROM \"Sales Orders\" so\nJOIN \"Sales Team\" st ON so._SalesTeamID = st.SalesTeamID\nJOIN Customers c ON so._CustomerID = c.CustomerID\nJOIN Products p ON so._ProductID = p.ProductID\nWHERE st.\"Sales Team\" = 'Anthony Torres' AND so.\"Sales Channel\" = 'Distributor'",
    "2667": "SELECT \n    c.CustomerID, \n    c.\"Customer Names\"\nFROM \n    Customers c\nJOIN \n    \"Sales Orders\" so ON c.CustomerID = so._CustomerID\nWHERE \n    so.\"Sales Channel\" = 'online'\nGROUP BY \n    c.CustomerID, c.\"Customer Names\"\nHAVING \n    SUM((CAST(so.\"Unit Price\" AS REAL) - CAST(so.\"Unit Cost\" AS REAL)) * so.\"Order Quantity\") > 5000",
    "2668": "SELECT SUM((CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) * \"Order Quantity\") AS TotalNetProfit\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Product Name\" = 'Floral' AND DeliveryDate LIKE '%/21'",
    "2669": "SELECT COUNT(*) AS NumberOfOrders\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nWHERE \"Store Locations\".Population BETWEEN 3000000 AND 4000000",
    "2670": "SELECT DISTINCT p.\"Product Name\"\nFROM \"Sales Orders\" so\nJOIN \"Store Locations\" sl ON so._StoreID = sl.StoreID\nJOIN Products p ON so._ProductID = p.ProductID\nWHERE so.\"Sales Channel\" = 'Wholesale'\nAND sl.\"Time Zone\" = 'Pacific/Honolulu'",
    "2671": "SELECT \"Sales Orders\".OrderNumber, Products.\"Product Name\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Sales Orders\".OrderDate = '6/5/18'",
    "2672": "SELECT AVG(YearlyOrders) AS AverageYearlyOrders\nFROM (\n    SELECT SUBSTR(OrderDate, -2) AS Year, COUNT(OrderNumber) AS YearlyOrders\n    FROM \"Sales Orders\"\n    JOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\n    WHERE \"Customer Names\" = 'Weimei Corp' AND SUBSTR(OrderDate, -2) IN ('18', '19', '20')\n    GROUP BY Year\n) AS YearlyOrderCounts",
    "2673": "SELECT \n    AVG(CountOrders2019) AS AverageMonthlyOrders,\n    (CountWarehouseNMK1003 * 100.0 / TotalOrders) AS WarehouseNMK1003Percentage,\n    CountFloorLamps AS NumberOfOrdersForFloorLamps\nFROM\n    (SELECT \n        COUNT(OrderNumber) AS CountOrders2019\n    FROM \"Sales Orders\"\n    WHERE SUBSTR(OrderDate, -2) = '19') \n    CROSS JOIN \n    (SELECT \n        COUNT(OrderNumber) AS CountWarehouseNMK1003\n    FROM \"Sales Orders\"\n    WHERE WarehouseCode = 'WARE-NMK1003') \n    CROSS JOIN \n    (SELECT \n        COUNT(*) AS TotalOrders\n    FROM \"Sales Orders\") \n    CROSS JOIN \n    (SELECT \n        COUNT(OrderNumber) AS CountFloorLamps\n    FROM \"Sales Orders\"\n    JOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\n    WHERE \"Product Name\" = 'Floor Lamps' AND SUBSTR(OrderDate, -2) = '19' AND WarehouseCode = 'WARE-NMK1003')",
    "2674": "SELECT ProcuredDate\nFROM \"Sales Orders\"\nWHERE _CustomerID = 11;",
    "2675": "SELECT COUNT(*) AS MinQuantityOrders\nFROM \"Sales Orders\"\nWHERE \"Sales Channel\" = 'Distributor' AND \"Order Quantity\" = (\n    SELECT MIN(\"Order Quantity\")\n    FROM \"Sales Orders\"\n    WHERE \"Sales Channel\" = 'Distributor'\n)",
    "2676": "SELECT DISTINCT \"Sales Orders\"._SalesTeamID AS ID\nFROM \"Sales Orders\"\nWHERE \"Sales Orders\".\"Discount Applied\" = 0.1\nAND \"Sales Orders\".\"Sales Channel\" = 'In-Store'",
    "2677": "SELECT COUNT(*)\nFROM \"Store Locations\"\nWHERE \"City Name\" = 'Brooklyn'\nAND Type = 'Borough'\nAND Population < 3000000",
    "2678": "SELECT COUNT(*) AS MidwestStatesCount\nFROM Regions\nWHERE Region = 'Midwest'",
    "2679": "SELECT p.\"Product Name\", \n       MAX(CAST(s.\"Unit Price\" AS REAL) - CAST(s.\"Unit Cost\" AS REAL)) AS NetProfit\nFROM \"Sales Orders\" s\nJOIN Products p ON s._ProductID = p.ProductID\nGROUP BY p.\"Product Name\"\nORDER BY NetProfit DESC\nLIMIT 10",
    "2680": "SELECT \"Customer Names\"\nFROM Customers\nJOIN \"Sales Orders\" ON Customers.CustomerID = \"Sales Orders\"._CustomerID\nWHERE \"Order Quantity\" = 3 AND OrderDate LIKE '2/%/18'",
    "2681": "SELECT DISTINCT \"Sales Team\".\"Sales Team\"\nFROM \"Sales Team\"\nJOIN \"Sales Orders\" ON \"Sales Team\".SalesTeamID = \"Sales Orders\"._SalesTeamID\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Apotheca, Ltd'",
    "2682": "SELECT DISTINCT r.Region\nFROM \"Store Locations\" sl\nJOIN \"Sales Orders\" so ON sl.StoreID = so._StoreID\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE so.WarehouseCode = 'WARE-UHY1004'",
    "2683": "SELECT DISTINCT sl.\"City Name\"\nFROM \"Sales Orders\" so\nJOIN \"Sales Team\" st ON so._SalesTeamID = st.SalesTeamID\nJOIN Products p ON so._ProductID = p.ProductID\nJOIN \"Store Locations\" sl ON so._StoreID = sl.StoreID\nWHERE st.\"Sales Team\" = 'Shawn Torres' AND p.\"Product Name\" = 'Audio'",
    "2684": "SELECT p.\"Product Name\", c.\"Customer Names\"\nFROM \"Sales Orders\" so\nJOIN Products p ON so._ProductID = p.ProductID\nJOIN Customers c ON so._CustomerID = c.CustomerID\nWHERE so.OrderDate = '10/21/18' AND so.DeliveryDate = '11/21/19'",
    "2685": "SELECT COUNT(DISTINCT so._StoreID) AS NumberOfStores\nFROM \"Sales Orders\" so\nJOIN \"Store Locations\" sl ON so._StoreID = sl.StoreID\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE so.ProcuredDate = '10/27/18'\nAND r.State = 'Oregon';",
    "2686": "WITH TopIncomeStores AS (\n    SELECT StoreID\n    FROM \"Store Locations\"\n    ORDER BY \"Median Income\" DESC\n    LIMIT 3\n)\nSELECT \"Sales Channel\", COUNT(\"Sales Channel\") AS ChannelUsage\nFROM \"Sales Orders\"\nWHERE _StoreID IN (SELECT StoreID FROM TopIncomeStores)\nGROUP BY \"Sales Channel\"\nORDER BY ChannelUsage DESC",
    "2687": "SELECT \"Sales Team\".\"Sales Team\", SUM((CAST(\"Sales Orders\".\"Unit Price\" AS REAL) - CAST(\"Sales Orders\".\"Unit Cost\" AS REAL)) * \"Sales Orders\".\"Order Quantity\") AS NetProfit\nFROM \"Sales Team\"\nJOIN \"Sales Orders\" ON \"Sales Team\".SalesTeamID = \"Sales Orders\"._SalesTeamID\nGROUP BY \"Sales Team\".\"Sales Team\"\nORDER BY NetProfit DESC\nLIMIT 5",
    "2688": "SELECT MAX(\"Discount Applied\") AS HighestDiscountApplied\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nWHERE \"Store Locations\".State = 'Colorado'\nAND \"Store Locations\".\"Land Area\" = 111039036",
    "2689": "SELECT COUNT(DISTINCT \"Time Zone\")\nFROM \"Store Locations\"\nJOIN Regions ON \"Store Locations\".StateCode = Regions.StateCode\nWHERE Regions.Region = 'Northeast'",
    "2690": "SELECT Type, COUNT(Type) AS TypeCount\nFROM \"Store Locations\" sl\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE r.Region = 'South'\nGROUP BY Type\nORDER BY TypeCount DESC\nLIMIT 1;",
    "2691": "SELECT st.Region\nFROM \"Sales Team\" st\nJOIN \"Sales Orders\" so ON st.SalesTeamID = so._SalesTeamID\nWHERE so.WarehouseCode = 'WARE-MKL1006'\nGROUP BY st.Region\nORDER BY COUNT(so.WarehouseCode) DESC\nLIMIT 1",
    "2692": "SELECT sl.\"City Name\"\nFROM \"Store Locations\" sl\nJOIN \"Sales Orders\" so ON sl.StoreID = so._StoreID\nORDER BY CAST(so.\"Unit Price\" AS REAL) DESC\nLIMIT 1",
    "2693": "SELECT COUNT(*) AS OnlinePurchases\nFROM \"Sales Orders\" SO\nJOIN Customers C ON SO._CustomerID = C.CustomerID\nWHERE C.\"Customer Names\" = 'Ole Group'\nAND SO.\"Sales Channel\" = 'Online'\nAND SO.OrderDate LIKE '5/%/19'",
    "2694": "SELECT COUNT(DISTINCT \"Store Locations\".StoreID) AS NumberOfStores\nFROM \"Store Locations\"\nJOIN \"Sales Orders\"\n  ON \"Store Locations\".StoreID = \"Sales Orders\"._StoreID\nWHERE \"Store Locations\".County = 'Washtenaw County'\n  AND \"Sales Orders\".\"Order Quantity\" = 1\n  AND \"Sales Orders\".\"Sales Channel\" = 'Distributor';",
    "2695": "SELECT \"Product Name\", COUNT(\"Sales Orders\".\"OrderNumber\") AS OrderCount\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Store Locations\".\"City Name\" = 'Santa Clarita'\nGROUP BY \"Sales Orders\"._ProductID\nORDER BY OrderCount ASC\nLIMIT 1;",
    "2696": "SELECT sl.Latitude, sl.Longitude\nFROM \"Store Locations\" sl\nJOIN \"Sales Orders\" so ON sl.StoreID = so._StoreID\nWHERE so.WarehouseCode = 'WARE-PUJ1005'\nGROUP BY sl.StoreID\nORDER BY COUNT(so.WarehouseCode) ASC\nLIMIT 1",
    "2697": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM \"Sales Orders\" \n     JOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\n     WHERE \"Store Locations\".\"City Name\" = 'New York' \n     AND \"Sales Orders\".OrderDate = '4/4/20') \n    /\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM \"Sales Orders\"\n     WHERE OrderDate = '4/4/20') \n    * 100 AS PercentageOfOrdersForNewYork",
    "2698": "SELECT AVG(\"Land Area\") AS AverageLandArea\nFROM \"Store Locations\"\nWHERE StoreID IN (\n    SELECT _StoreID\n    FROM \"Sales Orders\"\n    WHERE \"Unit Price\" = '998.30'\n)",
    "2699": "SELECT AVG(\"Household Income\") AS AvgHouseholdIncome\nFROM \"Store Locations\"\nWHERE State = 'New Hampshire' AND Type = 'city'",
    "2700": "SELECT COUNT(*) AS \"Number of Sales Teams in Midwest\"\nFROM \"Sales Team\"\nWHERE Region = 'Midwest'",
    "2701": "SELECT OrderNumber\nFROM \"Sales Orders\"\nWHERE OrderDate > '2018-01-01'",
    "2702": "SELECT COUNT(DISTINCT \"Sales Channel\") AS NumberOfSalesChannels\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nWHERE \"Sales Team\".Region = 'Midwest';",
    "2703": "SELECT \"Sales Team\".\"Sales Team\"\nFROM \"Sales Orders\"\nJOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\nORDER BY CAST(\"Sales Orders\".\"Unit Price\" AS REAL) DESC\nLIMIT 1",
    "2704": "SELECT r.Region\nFROM \"Sales Orders\" so\nJOIN \"Store Locations\" sl ON so._StoreID = sl.StoreID\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE \"Sales Channel\" = 'Online'\nGROUP BY r.Region\nORDER BY MAX(\"Discount Applied\") DESC\nLIMIT 1",
    "2705": "SELECT \"Sales Orders\".OrderNumber, \"Sales Orders\".OrderDate\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Apollo Ltd'\nORDER BY CAST(\"Sales Orders\".\"Unit Price\" AS REAL) DESC\nLIMIT 1",
    "2706": "SELECT \"Sales Orders\".OrderNumber, \"Sales Orders\".WarehouseCode\nFROM \"Sales Orders\"\nJOIN Customers ON \"Sales Orders\"._CustomerID = Customers.CustomerID\nWHERE \"Customer Names\" = 'Elorac, Corp'",
    "2707": "SELECT c.\"Customer Names\"\nFROM \"Sales Orders\" so\nJOIN Customers c ON so._CustomerID = c.CustomerID\nJOIN Products p ON so._ProductID = p.ProductID\nWHERE p.\"Product Name\" = 'Cocktail Glasses' AND so.\"Sales Channel\" = 'Online'",
    "2708": "SELECT sl.StoreID, sl.\"City Name\", SUM((CAST(so.\"Unit Price\" AS REAL) - CAST(so.\"Unit Cost\" AS REAL)) * so.\"Order Quantity\") AS TotalNetProfit\nFROM \"Sales Orders\" so\nJOIN \"Store Locations\" sl ON so._StoreID = sl.StoreID\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE r.State = 'Arizona'\nGROUP BY sl.StoreID\nORDER BY TotalNetProfit DESC\nLIMIT 1;",
    "2709": "SELECT\n    ABS(FL.UnitPrice - TX.UnitPrice) AS PriceDifference\nFROM\n    (SELECT\n        CAST(\"Unit Price\" AS REAL) AS UnitPrice\n    FROM\n        \"Sales Orders\"\n    JOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\n    JOIN Regions ON \"Store Locations\".StateCode = Regions.StateCode\n    JOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\n    WHERE\n        Regions.State = 'Florida'\n        AND \"Product Name\" = 'Computers') AS FL,\n    (SELECT\n        CAST(\"Unit Price\" AS REAL) AS UnitPrice\n    FROM\n        \"Sales Orders\"\n    JOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\n    JOIN Regions ON \"Store Locations\".StateCode = Regions.StateCode\n    JOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\n    WHERE\n        Regions.State = 'Texas'\n        AND \"Product Name\" = 'Computers') AS TX",
    "2710": "SELECT \"Sales Team\".\"Sales Team\"\nFROM \"Sales Team\"\nJOIN \"Sales Orders\"\nON \"Sales Team\".SalesTeamID = \"Sales Orders\"._SalesTeamID\nWHERE \"Sales Team\".Region = 'Midwest' AND \"Sales Orders\".\"Order Quantity\" > 5",
    "2711": "SELECT DISTINCT \"Store Locations\".StoreID\nFROM \"Store Locations\"\nJOIN \"Sales Orders\"\n  ON \"Store Locations\".StoreID = \"Sales Orders\"._StoreID\nJOIN Regions\n  ON \"Store Locations\".StateCode = Regions.StateCode\nWHERE Regions.State = 'California'\n  AND \"Sales Orders\".\"Sales Channel\" = 'In-Store'\n  AND \"Sales Orders\".\"Discount Applied\" = 0.2",
    "2712": "SELECT c.\"Customer Names\"\nFROM \"Sales Orders\" so\nJOIN Customers c ON so._CustomerID = c.CustomerID\nWHERE so.\"Order Quantity\" = 8 AND so.OrderDate BETWEEN '2018-01-01' AND '2020-12-31'\nLIMIT 1;",
    "2713": "WITH TotalOrders AS (\n    SELECT\n        SUM(\"Order Quantity\") AS TotalQuantity\n    FROM \"Sales Orders\"\n),\nCandleOrders AS (\n    SELECT\n        SUM(\"Order Quantity\") AS CandleQuantity\n    FROM \"Sales Orders\"\n    JOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\n    WHERE \"Product Name\" = 'Candles'\n)\nSELECT\n    CandleOrders.CandleQuantity AS \"Total Order Quantity of Candles\",\n    (CandleOrders.CandleQuantity * 1.0 / TotalOrders.TotalQuantity) * 100 AS \"Percentage of Candles Among All Orders\"\nFROM TotalOrders, CandleOrders",
    "2714": "SELECT Region\nFROM \"Sales Team\"\nWHERE \"Sales Team\" = 'Joshua Bennett'",
    "2715": "SELECT StoreID\nFROM \"Store Locations\"\nORDER BY Population DESC\nLIMIT 1",
    "2716": "SELECT COUNT(*) AS \"Number of Sales Teams in Midwest\"\nFROM \"Sales Team\"\nWHERE Region = 'Midwest'",
    "2717": "SELECT Type\nFROM \"Store Locations\"\nWHERE \"Water Area\" = (SELECT MAX(\"Water Area\") FROM \"Store Locations\")\nAND Type = 'City'",
    "2718": "SELECT COUNT(*) AS OnlineOrdersShippedInJune2018\nFROM \"Sales Orders\"\nWHERE \"Sales Channel\" = 'Online'\nAND SUBSTR(ShipDate, 6, 2) = '06'\nAND SUBSTR(ShipDate, 1, 4) = '2018'",
    "2719": "SELECT \"Discount Applied\"\nFROM \"Sales Orders\"\nORDER BY CAST(\"Unit Price\" AS REAL) DESC\nLIMIT 1",
    "2720": "SELECT \"Product Name\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nORDER BY (CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) DESC\nLIMIT 1;",
    "2721": "WITH StateStoreCounts AS (\n    SELECT \n        sl.StateCode,\n        COUNT(sl.StoreID) AS StoreCount\n    FROM \"Store Locations\" sl\n    JOIN Regions r ON sl.StateCode = r.StateCode\n    WHERE r.Region = 'Northeast'\n    GROUP BY sl.StateCode\n    ORDER BY StoreCount DESC\n    LIMIT 1\n),\nCityHouseholdIncome AS (\n    SELECT \n        sl.\"City Name\",\n        AVG(sl.\"Household Income\") AS AvgHouseholdIncome\n    FROM \"Store Locations\" sl\n    JOIN StateStoreCounts ssc ON sl.StateCode = ssc.StateCode\n    GROUP BY sl.\"City Name\"\n)\nSELECT \n    chi.\"City Name\",\n    chi.AvgHouseholdIncome\nFROM CityHouseholdIncome chi",
    "2722": "SELECT DISTINCT r.Region\nFROM Regions r\nJOIN \"Store Locations\" sl ON r.StateCode = sl.StateCode\nWHERE sl.\"Median Income\" <= 30000;",
    "2723": "SELECT COUNT(*)\nFROM \"Store Locations\" sl\nJOIN Regions r ON sl.StateCode = r.StateCode\nWHERE r.Region = 'West' AND \"Land Area\" < 20000000;",
    "2724": "SELECT \"Customer Names\"\nFROM Customers\nJOIN \"Sales Orders\" ON Customers.CustomerID = \"Sales Orders\"._CustomerID\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nORDER BY (CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) DESC\nLIMIT 1",
    "2725": "WITH SalesTeamOrders AS (\n    SELECT \n        st.\"Sales Team\",\n        COUNT(so.OrderNumber) AS OrderCount\n    FROM \n        \"Sales Orders\" so\n    JOIN \n        \"Sales Team\" st ON so._SalesTeamID = st.SalesTeamID\n    WHERE \n        SUBSTR(so.ShipDate, -2) = '19'\n    GROUP BY \n        st.\"Sales Team\"\n),\nMaxOrders AS (\n    SELECT \n        MAX(OrderCount) AS MaxOrderCount\n    FROM \n        SalesTeamOrders\n)\nSELECT \n    sto.\"Sales Team\",\n    sto.OrderCount\nFROM \n    SalesTeamOrders sto\nJOIN \n    MaxOrders mo ON sto.OrderCount = mo.MaxOrderCount",
    "2726": "SELECT \"Product Name\"\nFROM \"Sales Orders\"\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nWHERE \"Order Quantity\" >= 5 AND ShipDate LIKE '5/%/19'\nORDER BY (CAST(\"Unit Price\" AS REAL) - CAST(\"Unit Cost\" AS REAL)) ASC\nLIMIT 1",
    "2727": "SELECT \"Store Locations\".Latitude, \"Store Locations\".Longitude\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nJOIN Products ON \"Sales Orders\"._ProductID = Products.ProductID\nORDER BY (CAST(\"Sales Orders\".\"Unit Price\" AS REAL) - CAST(\"Sales Orders\".\"Unit Cost\" AS REAL)) DESC\nLIMIT 1 OFFSET 3",
    "2728": "WITH ShippedOrders2020 AS (\n    SELECT\n        _SalesTeamID,\n        COUNT(OrderNumber) AS ShippedOrdersCount\n    FROM \"Sales Orders\"\n    WHERE ShipDate LIKE '%2020' -- Ensures that the ShipDate is in the year 2020\n    GROUP BY _SalesTeamID\n),\nMaxShippedOrders AS (\n    SELECT\n        MAX(ShippedOrdersCount) AS MaxOrders\n    FROM ShippedOrders2020\n)\nSELECT\n    st.\"Sales Team\",\n    so2020.ShippedOrdersCount\nFROM ShippedOrders2020 so2020\nJOIN MaxShippedOrders mso ON so2020.ShippedOrdersCount = mso.MaxOrders\nJOIN \"Sales Team\" st ON so2020._SalesTeamID = st.SalesTeamID",
    "2729": "SELECT AVG(YearlyOrders) AS AverageShippedOrdersPerYear\nFROM (\n    SELECT COUNT(OrderNumber) AS YearlyOrders\n    FROM \"Sales Orders\" \n    JOIN \"Sales Team\" ON \"Sales Orders\"._SalesTeamID = \"Sales Team\".SalesTeamID\n    WHERE \"Sales Team\".\"Sales Team\" = 'Carl Nguyen'\n    AND SUBSTR(ShipDate, -2) IN ('18', '19', '20')\n    GROUP BY SUBSTR(ShipDate, 1, 4)\n)",
    "2730": "SELECT \n    \"Sales Orders\".\"Discount Applied\",\n    Products.\"Product Name\"\nFROM \n    \"Sales Orders\"\nJOIN \n    Products ON \"Sales Orders\"._ProductID = Products.ProductID\nORDER BY \n    (CAST(\"Sales Orders\".\"Unit Price\" AS REAL) - CAST(\"Sales Orders\".\"Unit Cost\" AS REAL)) DESC\nLIMIT 1",
    "2731": "SELECT c.\"Customer Names\"\nFROM \"Sales Orders\" so\nJOIN Customers c ON so._CustomerID = c.CustomerID\nORDER BY ((CAST(so.\"Unit Price\" AS REAL) * so.\"Order Quantity\") - so.\"Discount Applied\") DESC\nLIMIT 3",
    "2732": "SELECT \"Sales Channel\"\nFROM \"Sales Orders\"\nWHERE Substr(OrderDate, -2) = '20' AND Substr(OrderDate, 1, 1) = '1'\nGROUP BY \"Sales Channel\"\nORDER BY COUNT(OrderNumber) DESC\nLIMIT 1",
    "2733": "SELECT \"Product Name\"\nFROM Products\nJOIN \"Sales Orders\" ON Products.ProductID = \"Sales Orders\"._ProductID\nWHERE OrderNumber = 'SO - 0005951'",
    "2734": "SELECT sl.\"City Name\", st.\"Sales Team\"\nFROM \"Sales Orders\" so\nJOIN \"Store Locations\" sl ON so._StoreID = sl.StoreID\nJOIN \"Sales Team\" st ON so._SalesTeamID = st.SalesTeamID\nWHERE so.OrderNumber = 'SO - 0001004'",
    "2735": "SELECT \n    _CustomerID,\n    \"Customer Names\",\n    MAX(NetProfit) AS MaxNetProfit\nFROM\n    (\n        SELECT \n            so._CustomerID,\n            c.\"Customer Names\",\n            SUM((CAST(so.\"Unit Price\" AS REAL) - CAST(so.\"Unit Cost\" AS REAL)) * so.\"Order Quantity\") AS NetProfit\n        FROM \n            \"Sales Orders\" so\n        JOIN \n            \"Store Locations\" sl ON so._StoreID = sl.StoreID\n        JOIN \n            Customers c ON so._CustomerID = c.CustomerID\n        WHERE \n            sl.\"City Name\" = 'Gilbert' \n            AND sl.State = 'Arizona' \n            AND so.ProcuredDate LIKE '%/19'\n        GROUP BY \n            so._CustomerID\n    )\nGROUP BY \n    _CustomerID\nORDER BY \n    MaxNetProfit DESC\nLIMIT 1;",
    "2736": "SELECT COUNT(*) AS NumberOfOrders\nFROM \"Sales Orders\"\nJOIN \"Store Locations\" ON \"Sales Orders\"._StoreID = \"Store Locations\".StoreID\nWHERE \"City Name\" = 'Chandler' AND SUBSTR(OrderDate, -2) = '20'",
    "2737": "SELECT AVG(\"Household Income\") AS \"Average Household Income\"\nFROM \"Store Locations\"\nWHERE \"City Name\" = 'Glendale'",
    "2738": "SELECT MAX(\"Discount Applied\") AS BestDiscountApplied\nFROM \"Sales Orders\"\nWHERE SUBSTR(OrderDate, -2) = '20';",
    "2739": "WITH RECURSIVE DateSequences AS (\n  SELECT AwayTeam, Date, 1 AS TieStreak\n  FROM matchs\n  WHERE AwayTeam = 'Ebbsfleet' AND FTR = 'D' AND season = 2008\n  UNION ALL\n  SELECT m.AwayTeam, m.Date, ds.TieStreak + 1\n  FROM matchs m\n  JOIN DateSequences ds ON m.AwayTeam = ds.AwayTeam AND m.Date = date(ds.Date, '+1 day') AND m.season = 2008\n  WHERE m.FTR = 'D'\n)\nSELECT MAX(TieStreak) AS MaxConsecutiveTies\nFROM DateSequences;",
    "2740": "SELECT \n    (CAST(COUNT(*) FILTER (WHERE country = 'England') AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    divisions;",
    "2741": "SELECT\n    SUM(CASE WHEN FTR = 'H' THEN 1 ELSE 0 END) * 100.0 / COUNT(Div) AS percentage_won,\n    SUM(CASE WHEN FTR = 'A' THEN 1 ELSE 0 END) * 100.0 / COUNT(Div) AS percentage_lost,\n    SUM(CASE WHEN FTR = 'D' THEN 1 ELSE 0 END) * 100.0 / COUNT(Div) AS percentage_drawn\nFROM matchs\nWHERE HomeTeam = 'Cittadella'",
    "2742": "SELECT AwayTeam, \n       (CAST(SUM(CASE WHEN FTR = 'A' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS WinningPercentage\nFROM matchs\nWHERE HomeTeam = 'Caen' AND season = 2010\nGROUP BY AwayTeam\nORDER BY WinningPercentage DESC\nLIMIT 1;",
    "2743": "SELECT \n    (CAST(SUM(CASE WHEN Div = 'F1' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    matchs\nWHERE \n    Date = '2005-07-30';",
    "2744": "SELECT \n    (CAST(SUM(CASE WHEN FTR = 'D' AND (HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo') THEN 1 ELSE 0 END) AS FLOAT) / \n    SUM(CASE WHEN HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo' THEN 1 ELSE 0 END)) * 100 AS percentage\nFROM \n    matchs",
    "2745": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM matchs WHERE season = 2017)) * 100 AS percentage\nFROM \n    matchs\nWHERE \n    season = 2017 AND FTAG = 2",
    "2746": "SELECT DISTINCT HomeTeam AS Team\nFROM matchs\nWHERE Div = 'E2'\nUNION\nSELECT DISTINCT AwayTeam\nFROM matchs\nWHERE Div = 'E2'",
    "2747": "SELECT COUNT(DISTINCT AwayTeam) \nFROM matchs \nJOIN divisions ON matchs.Div = divisions.division \nWHERE divisions.country = 'Greece' AND FTAG >= 4",
    "2748": "SELECT COUNT(*) \nFROM matchs \nJOIN divisions ON matchs.Div = divisions.division \nWHERE divisions.name = 'Scottish Championship' \nAND matchs.season = 2019 \nAND matchs.FTHG = 2 \nAND matchs.FTAG = 2",
    "2749": "SELECT m.HomeTeam, m.season\nFROM matchs m\nJOIN divisions d ON m.Div = d.division\nWHERE d.country = 'Scotland' AND m.FTHG = 10",
    "2750": "WITH LaLigaHomeWins AS (\n    SELECT \n        HomeTeam,\n        COUNT(*) AS Wins\n    FROM matchs m\n    JOIN divisions d ON m.Div = d.division\n    WHERE d.name = 'LaLiga' AND d.country = 'Spain' AND m.season = 2017 AND m.FTR = 'H'\n    GROUP BY HomeTeam\n),\nTotalLaLigaMatches AS (\n    SELECT \n        COUNT(*) AS TotalMatches\n    FROM matchs m\n    JOIN divisions d ON m.Div = d.division\n    WHERE d.name = 'LaLiga' AND d.country = 'Spain' AND m.season = 2017\n),\nMaxWins AS (\n    SELECT \n        MAX(Wins) AS MaxWins\n    FROM LaLigaHomeWins\n)\nSELECT \n    l.HomeTeam,\n    l.Wins,\n    (CAST(l.Wins AS REAL) / t.TotalMatches) * 100 AS Percentage\nFROM LaLigaHomeWins l, TotalLaLigaMatches t, MaxWins mw\nWHERE l.Wins = mw.MaxWins",
    "2751": "WITH EnglishTeams AS (\n    SELECT HomeTeam AS Team\n    FROM matchs\n    WHERE season = 2012 AND Div IN (SELECT division FROM divisions WHERE country = 'England')\n    UNION\n    SELECT AwayTeam AS Team\n    FROM matchs\n    WHERE season = 2012 AND Div IN (SELECT division FROM divisions WHERE country = 'England')\n),\nDivisionCounts AS (\n    SELECT Div, COUNT(DISTINCT Team) AS TeamsInDivision\n    FROM (\n        SELECT HomeTeam AS Team, Div\n        FROM matchs\n        WHERE season = 2012 AND Div IN (SELECT division FROM divisions WHERE country = 'England')\n        UNION ALL\n        SELECT AwayTeam, Div\n        FROM matchs\n        WHERE season = 2012 AND Div IN (SELECT division FROM divisions WHERE country = 'England')\n    )\n    GROUP BY Div\n),\nTotalTeams AS (\n    SELECT COUNT(*) AS TotalTeams\n    FROM EnglishTeams\n)\nSELECT d.Div, d.TeamsInDivision, (d.TeamsInDivision * 100.0 / t.TotalTeams) AS Percentage\nFROM DivisionCounts d, TotalTeams t",
    "2752": "SELECT HomeTeam AS Team, SUM(FTHG) AS TotalGoals\nFROM matchs\nWHERE season = 2021\nGROUP BY HomeTeam\nUNION\nSELECT AwayTeam AS Team, SUM(FTAG) AS TotalGoals\nFROM matchs\nWHERE season = 2021\nGROUP BY AwayTeam\nORDER BY TotalGoals DESC\nLIMIT 1;",
    "2753": "SELECT HomeTeam\nFROM matchs\nWHERE Div = 'P1' AND FTHG = (SELECT MAX(FTHG) FROM matchs WHERE Div = 'P1')",
    "2754": "SELECT \n    (CAST(SUM(CASE WHEN FTR = 'H' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) - \n    CAST(SUM(CASE WHEN FTR = 'A' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_difference\nFROM matchs\nWHERE season = 2010;",
    "2755": "SELECT Div\nFROM matchs\nWHERE season = 2008 AND FTR = 'D'\nGROUP BY Div\nORDER BY COUNT(Div) DESC\nLIMIT 1",
    "2756": "SELECT HomeTeam\nFROM matchs\nWHERE Div = 'EC' AND Date = '2008-01-20' AND FTR = 'H'",
    "2757": "SELECT divisions.name\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE matchs.Date = '2009-09-13' AND matchs.HomeTeam = 'Club Brugge' AND matchs.AwayTeam = 'Genk'",
    "2758": "SELECT COUNT(*) AS total_matches\nFROM matchs\nWHERE Div IN (SELECT division FROM divisions WHERE name = 'Scottish Premiership')\nAND season BETWEEN 2006 AND 2008",
    "2759": "SELECT d.division, d.country\nFROM matchs m\nJOIN divisions d ON m.Div = d.division\nWHERE m.HomeTeam = 'Hearts' AND m.AwayTeam = 'Hibernian'",
    "2760": "SELECT AwayTeam\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE divisions.name = 'Bundesliga'\nORDER BY FTAG DESC\nLIMIT 1",
    "2761": "SELECT DISTINCT AwayTeam\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE divisions.country = 'Italy'\nLIMIT 3",
    "2762": "SELECT d.name\nFROM divisions d\nJOIN (\n    SELECT Div, COUNT(*) as draft_count\n    FROM matchs\n    WHERE FTR = 'D' AND season = 2019\n    GROUP BY Div\n    ORDER BY draft_count ASC\n    LIMIT 1\n) AS lowest_drafts ON d.division = lowest_drafts.Div",
    "2763": "SELECT COUNT(*) AS ValenciaHomeWins\nFROM matchs\nWHERE Div = 'LaLiga' AND HomeTeam = 'Valencia' AND FTR = 'H'",
    "2764": "SELECT COUNT(*) AS EqualGoalMatches\nFROM matchs\nWHERE Div = 'Seria A' AND FTR = 'D'",
    "2765": "SELECT COUNT(*) FROM divisions WHERE country = 'England';",
    "2766": "SELECT name FROM divisions WHERE country = 'Netherlands'",
    "2767": "SELECT \n    CASE \n        WHEN FTR = 'A' THEN AwayTeam \n        WHEN FTR = 'H' THEN HomeTeam \n        ELSE 'Draw' \n    END AS Winner\nFROM matchs\nWHERE Date = '2009-10-10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton'",
    "2768": "SELECT FTHG AS HomeGoals, FTAG AS AwayGoals\nFROM matchs\nWHERE HomeTeam = 'Bursaspor' AND AwayTeam = 'Denizlispor' AND Date = '2009-04-26'",
    "2769": "SELECT MIN(Date) AS FirstMatchDate\nFROM matchs\nWHERE (FTHG + FTAG) > 10",
    "2770": "SELECT FTR AS winner\nFROM matchs\nWHERE Div = 'Ligue 2' AND (FTHG + FTAG) = (\n    SELECT MAX(FTHG + FTAG)\n    FROM matchs\n    WHERE Div = 'Ligue 2'\n)\nLIMIT 1",
    "2771": "SELECT COUNT(*) AS AwayVictories\nFROM matchs\nWHERE Div = 'LaLiga 2' AND Date = '2016-03-27' AND FTR = 'A'",
    "2772": "SELECT COUNT(*) AS draw_games\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'National League')\nAND Date = '2018-08-07'\nAND FTR = 'D'",
    "2773": "SELECT d.country\nFROM matchs m\nJOIN divisions d ON m.Div = d.division\nORDER BY m.FTAG DESC\nLIMIT 1",
    "2774": "SELECT divisions.name\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE matchs.FTHG = 1 AND matchs.FTAG = 8 AND matchs.season = 2011",
    "2775": "SELECT d.name\nFROM matchs m\nJOIN divisions d ON m.Div = d.division\nWHERE m.Date = '2020-02-22' AND (m.FTHG + m.FTAG) > 5\nGROUP BY m.Div\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "2776": "SELECT d.name\nFROM divisions d\nJOIN matchs m ON d.division = m.Div\nWHERE m.FTHG = 0 AND m.FTAG = 0\nGROUP BY d.division\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "2777": "SELECT COUNT(*) AS ScottishLeagueOneGames\nFROM matchs\nWHERE Div = 'Scottish League One'\nAND Date = (\n    SELECT Date\n    FROM matchs\n    WHERE HomeTeam = 'Pro Vercelli'\n    AND AwayTeam = 'Pescara'\n    AND FTHG = 5\n    AND FTAG = 2\n)",
    "2778": "SELECT COUNT(*) AS NumberOfGames\nFROM matchs m\nJOIN divisions d ON m.Div = d.division\nWHERE d.country = 'Greece' AND m.FTHG = 5 AND m.FTAG = 0",
    "2779": "SELECT country\nFROM divisions\nWHERE division IN (\n    SELECT Div\n    FROM matchs\n    WHERE HomeTeam = 'Bradford' OR AwayTeam = 'Bradford'\n    LIMIT 1\n)",
    "2780": "SELECT COUNT(DISTINCT HomeTeam) AS NumberOfTeams\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'Eredivisie')\nAND season = 2008",
    "2781": "SELECT \n    (CAST(SUM(CASE WHEN FTR = 'H' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM \n    matchs\nJOIN \n    divisions ON matchs.Div = divisions.division\nWHERE \n    divisions.name = 'Bundesliga' AND matchs.season = 2021",
    "2782": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM matchs WHERE FTHG = 1 AND FTAG = 1)) AS percentage\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE FTHG = 1 AND FTAG = 1 AND divisions.name = 'Liga NOS'",
    "2783": "SELECT COUNT(*) AS total_matches\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE divisions.name = 'Premier League' AND matchs.season = 2021",
    "2784": "SELECT HomeTeam\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')\nAND Date = '2020-10-02'",
    "2785": "SELECT HomeTeam AS Winner\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')\n      AND Date = '2020-10-02'\n      AND FTR = 'H'",
    "2786": "SELECT HomeTeam\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND FTR = 'H'\nGROUP BY HomeTeam\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "2787": "SELECT COUNT(*) AS AwayWins\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')\nAND AwayTeam = 'Werder Bremen'\nAND FTR = 'A'",
    "2788": "SELECT COUNT(*) AS AwayVictories\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE divisions.name = 'Bundesliga' AND matchs.FTR = 'A' AND matchs.season = 2021",
    "2789": "SELECT COUNT(*) AS NumberOfTies\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE divisions.name = 'Bundesliga' AND FTR = 'D'",
    "2790": "SELECT \n    (SELECT COUNT(*) \n     FROM matchs m\n     JOIN divisions d ON m.Div = d.division\n     WHERE m.FTR = 'H' AND m.season = 2021 AND d.name = 'Bundesliga') -\n    (SELECT COUNT(*) \n     FROM matchs m\n     JOIN divisions d ON m.Div = d.division\n     WHERE m.FTR = 'H' AND m.season = 2021 AND d.name = 'Premier League') AS HomeVictoryDifference;",
    "2791": "SELECT HomeTeam\nFROM matchs\nJOIN divisions ON matchs.Div = divisions.division\nWHERE divisions.name = 'Bundesliga' AND matchs.FTR = 'H' AND matchs.season = 2021",
    "2792": "SELECT HomeTeam, COUNT(*) AS HomeVictories\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')\n      AND season = 2021\n      AND FTR = 'H'\n      AND HomeTeam IN ('Augsburg', 'Mainz')\nGROUP BY HomeTeam\nORDER BY HomeVictories DESC\nLIMIT 1",
    "2793": "SELECT HomeTeam\nFROM matchs\nWHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')\n      AND season = 2021\nORDER BY FTHG DESC\nLIMIT 1",
    "2794": "SELECT SUM(FTHG) AS total_home_goals\nFROM matchs\nWHERE Div IN (SELECT division FROM divisions WHERE name = 'Bundesliga')\nAND season = 2021",
    "2795": "SELECT \n    (SELECT COUNT(*) \n     FROM matchs \n     JOIN divisions ON matchs.Div = divisions.division \n     WHERE divisions.name = 'Premier League' \n     AND season = 2021 \n     AND ((HomeTeam = 'Club Brugge' AND FTR = 'H') OR (AwayTeam = 'Club Brugge' AND FTR = 'A'))\n    ) * 1.0 / \n    (SELECT COUNT(*) \n     FROM matchs \n     JOIN divisions ON matchs.Div = divisions.division \n     WHERE divisions.name = 'Premier League' \n     AND season = 2021 \n     AND (HomeTeam = 'Club Brugge' OR AwayTeam = 'Club Brugge')\n    ) AS WinningRate;",
    "2796": "SELECT \n    SUM(homeWon) * 100.0 / SUM(won) AS homeWinningPercentage\nFROM \n    teams\nWHERE \n    won > 0;",
    "2797": "SELECT tmID \nFROM teams \nWHERE CAST(lost AS REAL) / CAST(games AS REAL) > 0.75;",
    "2798": "SELECT t2005.tmID AS team_name, t2005.won AS total_wins_2005\nFROM teams t2005\nJOIN teams t2004 ON t2005.tmID = t2004.tmID AND t2005.year = t2004.year + 1\nWHERE t2005.year = 2005 AND t2004.year = 2004 AND t2005.won > t2004.won",
    "2799": "SELECT t.name, t.o_pts\nFROM teams t\nWHERE (CAST(t.homeWon AS REAL) / (t.homeWon + t.homeLost)) > 0.8",
    "2800": "SELECT \n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM teams WHERE playoff IS NOT NULL)) * 100 AS percentage\nFROM \n    teams\nWHERE \n    `rank` = 1 AND playoff IS NOT NULL;",
    "2801": "SELECT c.coachID, c.won, c.lost\nFROM coaches c\nWHERE c.tmID = 'BOS' AND c.year = 1950",
    "2802": "WITH CoachYears AS (\n    SELECT \n        coachID, \n        tmID, \n        COUNT(year) AS YearsServed\n    FROM \n        coaches\n    WHERE \n        year BETWEEN 1970 AND 1980\n    GROUP BY \n        coachID, tmID\n),\nMaxYears AS (\n    SELECT \n        MAX(YearsServed) AS MaxYearsServed\n    FROM \n        CoachYears\n)\nSELECT \n    c.coachID, \n    c.tmID\nFROM \n    CoachYears c\nJOIN \n    MaxYears m ON c.YearsServed = m.MaxYearsServed",
    "2803": "SELECT c.coachID, t.name AS team_name, c.won AS games_won_at_home\nFROM coaches c\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE c.year = 2000 AND c.won > 50",
    "2804": "SELECT c.coachID, t.name AS team_name, c.year\nFROM coaches c\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE c.lost > c.won AND c.year BETWEEN 2000 AND 2010",
    "2805": "SELECT t.name, c.year, t.o_pts\nFROM coaches c\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE c.coachID = 'adelmri01' AND c.year BETWEEN 1990 AND 1995",
    "2806": "SELECT c.coachID, t.year\nFROM teams t\nJOIN coaches c ON t.tmID = c.tmID AND t.year = c.year\nWHERE CAST(t.won AS REAL) / t.games > 0.9",
    "2807": "SELECT \n    (SELECT CAST(COUNT(DISTINCT ap.playerID) AS FLOAT)\n     FROM awards_players ap\n     JOIN players p ON ap.playerID = p.playerID\n     WHERE ap.award = 'All-Defensive First Team'\n     AND ap.year BETWEEN 1980 AND 2000\n     AND p.birthState = 'NY') / \n    (SELECT CAST(COUNT(DISTINCT ap.playerID) AS FLOAT)\n     FROM awards_players ap\n     WHERE ap.award = 'All-Defensive First Team'\n     AND ap.year BETWEEN 1980 AND 2000) * 100 AS percentage",
    "2808": "SELECT t.divID\nFROM awards_coaches ac\nJOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year - 1\nWHERE ac.award = 'NBA Coach of the Year' AND ac.year = 1977",
    "2809": "SELECT c.coachID\nFROM coaches c\nJOIN awards_coaches ac ON c.coachID = ac.coachID AND c.year = ac.year\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE t.name = 'Chicago Bulls' AND c.year = 1981 AND ac.award = 'NBA Coach of the Year' AND ac.year BETWEEN 1970 AND 1979",
    "2810": "SELECT p.nameNick\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE t.confID = 'West'\nAND pt.year = 2006\nAND pt.blocks = 2",
    "2811": "SELECT year, MIN(`rank`) as lowest_rank\nFROM teams\nWHERE tmID = (\n    SELECT tmIDWinner\n    FROM series_post\n    WHERE tmIDLoser = 'HSM'\n    AND round = 'DSF'\n    GROUP BY tmIDWinner\n    HAVING COUNT(*) = 1\n)",
    "2812": "SELECT p.birthDate\nFROM player_allstar pa\nJOIN players p ON pa.playerID = p.playerID\nWHERE pa.season_id = 1985\nORDER BY pa.assists DESC\nLIMIT 1",
    "2813": "SELECT p.playerID\nFROM players p\nJOIN player_allstar pa ON p.playerID = pa.playerID\nWHERE p.birthCity = 'Winter Haven' AND pa.minutes = 12 AND pa.season_id BETWEEN 1980 AND 1989",
    "2814": "SELECT COUNT(DISTINCT p.playerID) AS Illinois_College_Allstars\nFROM player_allstar pa\nJOIN players p ON pa.playerID = p.playerID\nWHERE pa.conference = 'East'\nAND pa.minutes <= 5\nAND p.college = 'Illinois College'",
    "2815": "SELECT COUNT(DISTINCT playerID) AS players_exceeding_75_percent_defensive_rebounds\nFROM players_teams\nWHERE year BETWEEN 1990 AND 2007\nAND CAST(dRebounds AS REAL) / CAST(rebounds AS REAL) > 0.75\nAND rebounds > 0;",
    "2816": "SELECT year, MAX(won * 1.0 / (won + lost)) AS best_balance\nFROM coaches\nWHERE coachID = 'costela01'\nGROUP BY year\nORDER BY best_balance DESC\nLIMIT 1;",
    "2817": "SELECT SUM(p.minutes) AS total_minutes\nFROM player_allstar p\nJOIN players pl ON p.playerID = pl.playerID\nWHERE pl.birthCity = 'Brooklyn' AND pl.nameNick LIKE '%Superman%'",
    "2818": "SELECT c.tmID, t.homeLost\nFROM awards_coaches ac\nJOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE ac.year = 1994 AND ac.award = 'NBA Coach of the Year'\nORDER BY t.homeLost DESC\nLIMIT 1",
    "2819": "SELECT s.tmIDWinner\nFROM series_post s\nJOIN teams t ON s.tmIDWinner = t.tmID AND s.year = t.year\nWHERE s.round = 'CSF' \nAND s.tmIDLoser = 'LAL' \nAND s.lgIDWinner = 'NBA' \nAND t.won > 60 \nAND s.year = 1996",
    "2820": "SELECT DISTINCT p.lgID\nFROM players_teams p\nJOIN players pl ON p.playerID = pl.playerID\nWHERE pl.height = 80 AND pl.weight = (SELECT MAX(weight) * 0.6 FROM players)",
    "2821": "SELECT c.coachID\nFROM coaches c\nWHERE c.lgID = 'NBA'\nGROUP BY c.coachID\nHAVING COUNT(DISTINCT c.tmID) > 2",
    "2822": "SELECT c.coachID\nFROM coaches c\nORDER BY c.post_wins DESC\nLIMIT 1",
    "2823": "SELECT c.coachID, c.year, c.tmID, MIN(c.post_losses) AS min_post_losses\nFROM coaches c\nJOIN (\n    SELECT coachID\n    FROM coaches\n    GROUP BY coachID\n    HAVING COUNT(DISTINCT tmID) > 2\n) AS more_than_two_teams ON c.coachID = more_than_two_teams.coachID\nWHERE c.post_losses IS NOT NULL\nGROUP BY c.coachID, c.year, c.tmID\nORDER BY min_post_losses ASC\nLIMIT 1",
    "2824": "SELECT COUNT(DISTINCT p.playerID) AS center_players_count\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nWHERE pt.lgID = 'ABA' AND (p.pos = 'C' OR p.pos = 'F-C')",
    "2825": "SELECT firstName\nFROM players\nWHERE pos = 'F' OR pos = 'F-C'\nAND playerID IN (\n    SELECT playerID\n    FROM players_teams\n    WHERE lgID = 'NBA'\n)",
    "2826": "SELECT COUNT(DISTINCT p.playerID) \nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE p.hsCity = 'Chicago' AND t.divID = 'WE'",
    "2827": "SELECT DISTINCT p.college\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE t.divID = 'EA' AND p.college IS NOT NULL",
    "2828": "SELECT COUNT(*) AS players_born_in_spencer\nFROM players\nJOIN players_teams ON players.playerID = players_teams.playerID\nWHERE players.birthCity = 'Spencer' AND players_teams.lgID = 'NBL'",
    "2829": "SELECT p.birthDate\nFROM players p\nJOIN (\n    SELECT playerID, COUNT(*) AS MVPCount\n    FROM awards_players\n    WHERE award = 'Most Valuable Player'\n    GROUP BY playerID\n    ORDER BY MVPCount DESC\n    LIMIT 1\n) AS MostMVPs ON p.playerID = MostMVPs.playerID",
    "2830": "SELECT COUNT(DISTINCT p.playerID) AS MVP_Winners\nFROM players p\nJOIN awards_players ap ON p.playerID = ap.playerID\nWHERE p.birthCity = 'Whitestone' AND ap.award = 'Most Valuable Player'",
    "2831": "SELECT MAX(p.height) AS tallest_height\nFROM awards_players ap\nJOIN players p ON ap.playerID = p.playerID\nWHERE ap.award = 'Rookie of the Year'",
    "2832": "SELECT AVG(p.weight) AS average_weight\nFROM players p\nJOIN awards_players ap ON p.playerID = ap.playerID\nWHERE ap.award = 'Rookie of the Year'",
    "2833": "SELECT AVG(height) AS average_height\nFROM players\nWHERE playerID IN (\n    SELECT playerID\n    FROM awards_players\n    WHERE award = 'Most Valuable Player'\n) AND highSchool LIKE '%New York%'",
    "2834": "SELECT tmID, MAX(o_pts) as highest_score\nFROM teams\nWHERE year = 2000\nGROUP BY tmID\nORDER BY highest_score DESC\nLIMIT 10",
    "2835": "SELECT tmID, year, (CAST(won AS FLOAT) / (won + lost)) AS winning_rate\nFROM teams\nWHERE (CAST(won AS FLOAT) / (won + lost)) < 0.5;",
    "2836": "SELECT DISTINCT c.coachID\nFROM coaches c\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE CAST(t.won AS REAL) / (t.won + t.lost) >= 0.8",
    "2837": "SELECT coachID\nFROM coaches\nWHERE lgID = 'NBA'\nGROUP BY coachID\nHAVING MAX(year) - MIN(year) > 10",
    "2838": "SELECT COUNT(DISTINCT t.tmID) \nFROM teams t \nJOIN players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year \nJOIN awards_players ap ON pt.playerID = ap.playerID \nWHERE t.o_pts > 3800 AND ap.award = 'Most Valuable Player'",
    "2839": "SELECT p.playerID, p.height \nFROM players p \nJOIN players_teams pt ON p.playerID = pt.playerID \nWHERE pt.tmID = 'AFS' \nORDER BY p.height DESC \nLIMIT 1;",
    "2840": "SELECT p.lastName\nFROM players_teams pt\nJOIN players p ON pt.playerID = p.playerID\nWHERE pt.tmID = 'BLB'",
    "2841": "SELECT COUNT(DISTINCT coachID) \nFROM awards_coaches \nWHERE year BETWEEN 1962 AND 1975;",
    "2842": "SELECT coachID\nFROM awards_coaches\nWHERE year BETWEEN 1970 AND 1990\nGROUP BY coachID\nHAVING COUNT(coachID) = 2",
    "2843": "SELECT COUNT(DISTINCT coachID) \nFROM awards_coaches \nWHERE year BETWEEN 1962 AND 2011 \nAND coachID IN (\n    SELECT coachID \n    FROM awards_coaches \n    WHERE award LIKE 'NBA%' \n    INTERSECT \n    SELECT coachID \n    FROM awards_coaches \n    WHERE award LIKE 'ABA%'\n)",
    "2844": "SELECT AVG(points) AS average_points\nFROM player_allstar\nJOIN players ON player_allstar.playerID = players.playerID\nWHERE season_id = 1975 AND birthCountry = 'USA'",
    "2845": "SELECT p.lastName, p.firstName\nFROM player_allstar pa\nJOIN players p ON pa.playerID = p.playerID\nWHERE p.height > 75",
    "2846": "SELECT MIN(weight) AS min_weight\nFROM players\nWHERE playerID IN (\n    SELECT playerID\n    FROM player_allstar\n)\nAND college = 'UCLA'",
    "2847": "SELECT MAX(weight) AS max_weight\nFROM players\nWHERE birthCountry = 'USA' AND playerID IN (\n    SELECT playerID\n    FROM player_allstar\n)",
    "2848": "SELECT SUM(points) AS total_points\nFROM player_allstar\nJOIN players ON player_allstar.playerID = players.playerID\nWHERE season_id BETWEEN 1960 AND 1970\nAND deathDate IS NULL OR deathDate = '0000-00-00';",
    "2849": "SELECT p.lastName, p.firstName\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nWHERE p.birthDate >= '1950-01-01'\nAND (CAST(pt.oRebounds AS REAL) / pt.rebounds) > 0.3\nGROUP BY p.playerID",
    "2850": "SELECT COUNT(*) AS RookieOfTheYearCount\nFROM awards_players\nWHERE award = 'Rookie of the Year' AND year BETWEEN 1969 AND 2010;",
    "2851": "SELECT t.name\nFROM teams t\nJOIN (\n    SELECT pa.tmID, pa.season_id\n    FROM player_allstar pa\n    GROUP BY pa.tmID, pa.season_id\n    HAVING COUNT(pa.playerID) >= 3\n) AS allstar_teams ON t.tmID = allstar_teams.tmID AND t.year = allstar_teams.season_id",
    "2852": "SELECT MAX(points) AS max_points\nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE t.rank = 1 AND pt.year BETWEEN 1950 AND 1970",
    "2853": "SELECT DISTINCT pa.last_name, pa.first_name\nFROM player_allstar pa\nJOIN players_teams pt ON pa.playerID = pt.playerID\nJOIN (\n    SELECT tmID\n    FROM teams\n    WHERE year BETWEEN 1937 AND 1940\n    GROUP BY tmID\n    HAVING SUM(CASE WHEN `rank` = 1 THEN 1 ELSE 0 END) >= 3\n) AS ranked_teams ON pt.tmID = ranked_teams.tmID AND pt.year BETWEEN 1937 AND 1940",
    "2854": "SELECT t.name\nFROM teams t\nJOIN players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year\nWHERE t.rank = 3 AND t.year BETWEEN 1937 AND 1940\nGROUP BY t.tmID\nORDER BY SUM(pt.points) DESC\nLIMIT 1;",
    "2855": "SELECT COUNT(DISTINCT pt.tmID)\nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.year = 1937\nGROUP BY pt.tmID\nHAVING SUM(pt.points) >= 500",
    "2856": "SELECT COUNT(DISTINCT pt.playerID) \nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.year = 1990 AND (CAST(t.won AS REAL) / t.games) > 0.75;",
    "2857": "SELECT firstName, lastName, height \nFROM players \nWHERE race = 'B' \nORDER BY height ASC \nLIMIT 3",
    "2858": "SELECT COUNT(*) \nFROM draft \nWHERE firstName = 'Joe' AND draftYear = 1970;",
    "2859": "SELECT SUM(fg_made) AS total_field_goals\nFROM player_allstar\nWHERE first_name = 'George' AND last_name = 'Mikan' AND season_id BETWEEN 1951 AND 1953;",
    "2860": "SELECT MIN((weight * 703) / (height * height)) AS MinBMI, MAX((weight * 703) / (height * height)) AS MaxBMI\nFROM players\nWHERE height IS NOT NULL AND weight IS NOT NULL AND height > 0 AND weight > 0;",
    "2861": "SELECT name\nFROM teams\nWHERE homeLost IS NOT NULL AND homeWon + homeLost > 0\nORDER BY CAST(homeLost AS REAL) / (homeWon + homeLost) DESC\nLIMIT 1;",
    "2862": "SELECT draftYear - CAST(strftime('%Y', birthDate) AS INTEGER) AS age_when_drafted\nFROM draft\nJOIN players ON draft.playerID = players.playerID\nWHERE players.lastName = 'Ajinca' AND draftYear IS NOT NULL\nORDER BY draftYear ASC\nLIMIT 1",
    "2863": "SELECT p.firstName, p.lastName, p.height\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE t.name = 'Denver Nuggets' AND t.year > 1980\nORDER BY p.height DESC\nLIMIT 1;",
    "2864": "SELECT playerID, COUNT(award) AS award_count\nFROM awards_players\nWHERE playerID IN (SELECT playerID FROM players WHERE deathDate IS NOT NULL)\nGROUP BY playerID\nORDER BY award_count DESC\nLIMIT 1",
    "2865": "SELECT t.name\nFROM players_teams pt\nJOIN players p ON pt.playerID = p.playerID\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE p.college = 'UCLA'\nGROUP BY pt.tmID\nORDER BY COUNT(pt.playerID) DESC\nLIMIT 1;",
    "2866": "SELECT AVG((weight / (height * height)) * 703) AS average_BMI\nFROM players\nWHERE playerID IN (\n    SELECT DISTINCT playerID\n    FROM player_allstar\n)",
    "2867": "WITH Growth AS (\n    SELECT \n        t1973.tmID,\n        t1973.name AS team_name,\n        (CAST(t1973.won AS REAL) / (t1973.won + t1973.lost)) - (CAST(t1972.won AS REAL) / (t1972.won + t1972.lost)) AS growth_rate\n    FROM \n        teams t1973\n    JOIN \n        teams t1972 ON t1973.tmID = t1972.tmID AND t1972.year = 1972\n    WHERE \n        t1973.year = 1973 \n        AND t1973.lgID = 'ABA'\n)\nSELECT \n    team_name\nFROM \n    Growth\nORDER BY \n    growth_rate DESC\nLIMIT 1;",
    "2868": "SELECT p.firstName\nFROM players_teams pt\nJOIN players p ON pt.playerID = p.playerID\nWHERE pt.lgID = 'NBL'\nGROUP BY pt.playerID\nORDER BY SUM(pt.PF) DESC\nLIMIT 1",
    "2869": "SELECT AVG(players.height) AS avg_height\nFROM player_allstar\nJOIN players ON player_allstar.playerID = players.playerID\nWHERE player_allstar.conference = 'East'",
    "2870": "SELECT c.coachID, c.won\nFROM coaches c\nJOIN awards_coaches ac ON c.coachID = ac.coachID AND c.year = ac.year\nWHERE ac.award = 'ABA Coach of the Year'\nORDER BY c.won DESC\nLIMIT 1",
    "2871": "SELECT t.name\nFROM \"awards_coaches\" ac\nJOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE ac.award = 'NBA Coach of the Year' AND ac.year = 1992",
    "2872": "SELECT p.firstName, p.lastName\nFROM players_teams pt\nJOIN players p ON pt.playerID = p.playerID\nWHERE pt.year = 1973 AND pt.fgAttempted > 0\nORDER BY CAST(pt.fgMade AS REAL) / pt.fgAttempted DESC\nLIMIT 1;",
    "2873": "SELECT t.name\nFROM draft d\nJOIN teams t ON d.tmID = t.tmID AND d.draftYear = t.year\nWHERE d.firstName = 'Mike' AND d.lastName = 'Lynn'",
    "2874": "SELECT COUNT(*) \nFROM awards_players \nJOIN players ON awards_players.playerID = players.playerID \nWHERE awards_players.award = 'Most Improved Player' \nAND awards_players.year BETWEEN 1985 AND 1990 \nAND players.birthCountry = 'USA'",
    "2875": "SELECT p.firstName, p.lastName\nFROM players p\nJOIN player_allstar pa ON p.playerID = pa.playerID\nWHERE p.college = 'California'",
    "2876": "SELECT COUNT(DISTINCT c.coachID) AS coaches_with_more_than_one_award\nFROM awards_coaches ac\nJOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year\nWHERE ac.year BETWEEN 1950 AND 1970\nGROUP BY c.coachID\nHAVING COUNT(ac.id) > 1",
    "2877": "SELECT COUNT(DISTINCT playerID) AS MVPs\nFROM awards_players\nWHERE award = 'Most Valuable Player' AND year BETWEEN 1969 AND 1975;",
    "2878": "SELECT t.name\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE p.birthState IS NOT NULL\nGROUP BY t.name, p.birthState\nHAVING COUNT(p.playerID) >= 5",
    "2879": "SELECT COUNT(DISTINCT t.tmID) AS NumberOfTeams\nFROM teams t\nJOIN player_allstar pa ON t.year = pa.season_id AND t.lgID = pa.league_id\nWHERE t.lgID = 'NBA'\nGROUP BY t.tmID, t.year\nHAVING COUNT(DISTINCT pa.playerID) >= 3",
    "2880": "SELECT birthState, COUNT(DISTINCT player_allstar.playerID) AS all_star_count\nFROM player_allstar\nJOIN players ON player_allstar.playerID = players.playerID\nGROUP BY birthState\nORDER BY all_star_count DESC\nLIMIT 1",
    "2881": "SELECT COUNT(DISTINCT pt.playerID)\nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE t.rank = 6 AND t.year = 1937;",
    "2882": "SELECT COUNT(DISTINCT pt.playerID) \nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.year = 1950 AND (t.lost * 1.0 / (t.won + t.lost)) < 0.2;",
    "2883": "SELECT firstName || ' ' || COALESCE(middleName || ' ', '') || lastName AS FullName\nFROM players\nWHERE birthCountry != 'USA'",
    "2884": "SELECT coachID\nFROM coaches\nGROUP BY coachID\nHAVING COUNT(DISTINCT tmID) > 2",
    "2885": "SELECT coachID \nFROM coaches \nWHERE year = 1988 \nORDER BY (won - lost) DESC \nLIMIT 1",
    "2886": "SELECT t.name\nFROM awards_coaches ac\nJOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE ac.award = 'NBA Coach of the Year' AND ac.year = 2010",
    "2887": "SELECT p.firstName, p.lastName, p.height, p.weight\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nWHERE pt.ftAttempted > 0 AND pt.ftAttempted = pt.ftMade",
    "2888": "SELECT p.firstName, p.lastName, t.name AS team_name\nFROM draft d\nJOIN players p ON d.playerID = p.playerID\nJOIN teams t ON d.tmID = t.tmID AND d.draftYear = t.year\nWHERE d.draftFrom = 'Seattle' AND d.draftYear BETWEEN 1965 AND 1970",
    "2889": "SELECT \n    p.firstName || ' ' || COALESCE(p.middleName || ' ', '') || p.lastName AS full_name, \n    (2003 - strftime('%Y', p.birthDate)) AS age\nFROM \n    awards_players ap\nJOIN \n    players p ON ap.playerID = p.playerID\nWHERE \n    ap.award = 'Finals MVP'\n    AND ap.year = 2003",
    "2890": "SELECT t.name AS champion, sp.year\nFROM series_post sp\nJOIN teams t ON sp.tmIDWinner = t.tmID AND sp.year = t.year\nWHERE sp.round = 'F' AND sp.year BETWEEN 1950 AND 1960",
    "2891": "SELECT t.name AS team_name, c.coachID AS coach\nFROM teams t\nJOIN series_post sp ON t.tmID = sp.tmIDWinner AND t.year = sp.year\nJOIN coaches c ON t.tmID = c.tmID AND t.year = c.year\nWHERE sp.round = 'QF' AND sp.year = 1946\nUNION\nSELECT t.name AS team_name, c.coachID AS coach\nFROM teams t\nJOIN series_post sp ON t.tmID = sp.tmIDLoser AND t.year = sp.year\nJOIN coaches c ON t.tmID = c.tmID AND t.year = c.year\nWHERE sp.round = 'QF' AND sp.year = 1946",
    "2892": "SELECT \n    p.firstName || ' ' || COALESCE(p.middleName || ' ', '') || p.lastName AS fullName\nFROM \n    players p\nJOIN \n    players_teams pt ON p.playerID = pt.playerID\nJOIN \n    series_post sp ON pt.tmID = sp.tmIDWinner AND pt.year = sp.year\nWHERE \n    sp.year = 1970 AND sp.round = 'F'\nGROUP BY \n    p.playerID",
    "2893": "SELECT p.college\nFROM awards_players ap\nJOIN players p ON ap.playerID = p.playerID\nWHERE ap.year = 1970\nGROUP BY ap.playerID\nORDER BY COUNT(ap.award) DESC\nLIMIT 1",
    "2894": "SELECT p.playerID, p.firstName, p.lastName\nFROM players p\nJOIN awards_players ap ON p.playerID = ap.playerID\nWHERE ap.award = 'Rookie of the Year'\nORDER BY p.birthDate DESC\nLIMIT 1;",
    "2895": "SELECT p.firstName || ' ' || COALESCE(p.middleName || ' ', '') || p.lastName AS full_name\nFROM draft d\nJOIN players p ON d.playerID = p.playerID\nWHERE d.draftYear = 1973\nAND d.draftRound = 1\nAND p.birthCountry <> 'USA'",
    "2896": "SELECT \n    (SUM(oRebounds) * 1.0 / SUM(rebounds)) * 100 AS percentage_offense_rebounds\nFROM \n    players_teams\nWHERE \n    year = 2000",
    "2897": "SELECT c.year, t.name AS team, c.coachID AS coach\nFROM coaches c\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE CAST(c.won AS REAL) / (CAST(c.won AS REAL) + CAST(c.lost AS REAL)) > 0.75",
    "2898": "SELECT c.coachID\nFROM coaches c\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE t.name = 'Oklahoma City Thunder'",
    "2899": "SELECT COUNT(DISTINCT playerID) \nFROM player_allstar \nWHERE season_id = 1990 AND o_rebounds <= d_rebounds * 0.5;",
    "2900": "SELECT COUNT(DISTINCT playerID) \nFROM player_allstar \nWHERE season_id BETWEEN 2000 AND 2005 \nAND (steals <= 10 OR steals IS NULL);",
    "2901": "SELECT d.playerID\nFROM draft d\nJOIN awards_players ap ON d.playerID = ap.playerID\nWHERE d.tmID = 'POR'\nAND d.draftRound = 2\nAND ap.award = 'Rookie of the Year'\nAND d.draftYear = 1971",
    "2902": "SELECT COUNT(DISTINCT pa.playerID) AS black_allstars_1973\nFROM player_allstar pa\nJOIN players p ON pa.playerID = p.playerID\nWHERE pa.season_id = 1973 AND p.race = 'B'",
    "2903": "SELECT tmIDWinner AS winning_team\nFROM series_post\nWHERE year = 1947\nAND round = 'QF'\nAND tmIDWinner IN (\n    SELECT tmID\n    FROM teams\n    WHERE year = 1947\n    AND d_pts >= 3513\n)",
    "2904": "SELECT \n    (SUM(lost) * 1.0 / SUM(games)) * 100 AS percentage_lost\nFROM \n    teams\nWHERE \n    name = 'Houston Mavericks'",
    "2905": "SELECT p.playerID, p.firstName || ' ' || p.lastName AS playerName\nFROM awards_players ap\nJOIN players p ON ap.playerID = p.playerID\nWHERE ap.award = 'Most Valuable Player' AND ap.year > 1990 AND ap.lgID = 'NBA'",
    "2906": "SELECT COUNT(*) AS times_played_for_LAL\nFROM players_teams\nWHERE playerID = 'abdulka01' AND tmID = 'LAL' AND year BETWEEN 1975 AND 1980",
    "2907": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM coaches WHERE year = 1969)) * 100 AS percentage\nFROM \n    awards_coaches\nWHERE \n    year = 1969 AND award = 'NBA Coach of the Year'",
    "2908": "SELECT \n    ((CAST(COUNT(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 END) AS REAL) / COUNT(CASE WHEN year = 1947 THEN 1 END))\n    -\n    (CAST(COUNT(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 END) AS REAL) / COUNT(CASE WHEN year = 1946 THEN 1 END))\n    ) * 100 AS difference_percentage\nFROM series_post\nWHERE year IN (1946, 1947)",
    "2909": "SELECT COUNT(*) \nFROM awards_players \nJOIN players ON awards_players.playerID = players.playerID \nWHERE year = 2010 AND hsCity = 'Chicago';",
    "2910": "SELECT \n    (CAST(COUNT(DISTINCT ap.playerID) AS FLOAT) / CAST(COUNT(DISTINCT p.playerID) AS FLOAT)) * 100 AS percentage\nFROM \n    players p\nLEFT JOIN \n    awards_players ap ON p.playerID = ap.playerID AND ap.award = 'All-Defensive Second Team'\nWHERE \n    p.college = 'Auburn';",
    "2911": "SELECT p.firstName || ' ' || COALESCE(p.middleName || ' ', '') || p.lastName AS full_name\nFROM player_allstar pa\nJOIN players p ON pa.playerID = p.playerID\nWHERE pa.season_id = 1997\nORDER BY pa.steals DESC\nLIMIT 5",
    "2912": "SELECT d.draftFrom\nFROM awards_players ap\nJOIN draft d ON ap.playerID = d.playerID\nWHERE ap.award = 'Finals MVP'\nAND ap.year = 1990\nAND ap.lgID = 'NBA'",
    "2913": "SELECT playerID\nFROM player_allstar\nWHERE league_id = 'NBA' AND season_id = 1996 AND ft_made >= 0 AND ft_attempted > 0 AND (CAST(ft_made AS REAL) / ft_attempted) > 0.7",
    "2914": "SELECT COUNT(*) AS AllStarPlayersWithHighThreePointRate\nFROM player_allstar\nWHERE season_id BETWEEN 1980 AND 1983\nAND league_id = 'NBA'\nAND threeAttempted > 0\nAND CAST(threeMade AS REAL) / CAST(threeAttempted AS REAL) > 0.6;",
    "2915": "SELECT DISTINCT c.coachID\nFROM coaches c\nJOIN awards_coaches ac ON c.coachID = ac.coachID AND c.year = ac.year\nJOIN teams t ON c.tmID = t.tmID AND c.year = t.year\nWHERE t.lgID = 'NBA' AND t.tmID = 'STL' AND ac.award LIKE '%Coach of the Year%'",
    "2916": "SELECT COUNT(*) AS times_awarded\nFROM awards_coaches ac\nJOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year\nWHERE c.tmID = 'CHI' AND ac.award = 'Coach of the Year' AND ac.lgID = 'NBA'",
    "2917": "SELECT pa.first_name, pa.last_name\nFROM player_allstar pa\nJOIN draft d ON pa.playerID = d.playerID\nWHERE d.lgID = 'NBA' AND d.draftYear BETWEEN 1990 AND 2000\nORDER BY pa.points DESC\nLIMIT 1",
    "2918": "SELECT p.firstName || ' ' || COALESCE(p.middleName || ' ', '') || p.lastName AS full_name\nFROM player_allstar pa\nJOIN players p ON pa.playerID = p.playerID\nWHERE p.college = 'Wake Forest'\nGROUP BY pa.playerID\nHAVING SUM(pa.o_rebounds) > SUM(pa.d_rebounds)\nORDER BY SUM(pa.o_rebounds) - SUM(pa.d_rebounds) DESC\nLIMIT 1;",
    "2919": "SELECT \n    p.firstName || ' ' || COALESCE(p.middleName || ' ', '') || p.lastName AS full_name, \n    pt.tmID AS team\nFROM \n    players p\nJOIN \n    players_teams pt ON p.playerID = pt.playerID\nWHERE \n    p.birthCity = 'Atlanta'\nORDER BY \n    pt.blocks DESC\nLIMIT 1;",
    "2920": "SELECT t.name\nFROM teams t\nWHERE t.year BETWEEN 1980 AND 2000\nAND t.rank = 1\nGROUP BY t.name\nHAVING COUNT(t.rank) >= 5 AND SUM(t.lost) > 2",
    "2921": "SELECT pt.tmID\nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.lgID = 'NBA' AND pt.year BETWEEN 1991 AND 2000 AND pt.minutes > 0\nORDER BY CAST(pt.points AS REAL) / CAST(pt.minutes AS REAL) DESC\nLIMIT 1;",
    "2922": "SELECT \n    AVG(CASE WHEN lgID = 'ABA' THEN 1970 - CAST(strftime('%Y', birthDate) AS INTEGER) END) AS avg_age_ABA,\n    AVG(CASE WHEN lgID = 'NBA' THEN 1970 - CAST(strftime('%Y', birthDate) AS INTEGER) END) AS avg_age_NBA,\n    (AVG(CASE WHEN lgID = 'ABA' THEN 1970 - CAST(strftime('%Y', birthDate) AS INTEGER) END) - \n    AVG(CASE WHEN lgID = 'NBA' THEN 1970 - CAST(strftime('%Y', birthDate) AS INTEGER) END)) AS difference\nFROM draft\nJOIN players ON draft.playerID = players.playerID\nWHERE draftYear BETWEEN 1970 AND 1970",
    "2923": "SELECT playerID\nFROM players_teams\nWHERE year = 2011 AND lgID = 'NBA'\nORDER BY GP DESC\nLIMIT 1",
    "2924": "SELECT COUNT(DISTINCT d.playerID)\nFROM draft d\nJOIN player_allstar pa ON d.playerID = pa.playerID\nWHERE d.draftYear = 1996 AND d.lgID = 'NBA' AND d.draftRound = 1",
    "2925": "SELECT ap.tmID\nFROM awards_players ap\nJOIN players_teams pt ON ap.playerID = pt.playerID AND ap.year = pt.year\nWHERE ap.award LIKE '%MVP' AND ap.year = 1997 AND ap.lgID = 'NBA'",
    "2926": "SELECT t.won\nFROM teams t\nJOIN players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year\nJOIN (\n    SELECT pt.playerID\n    FROM players_teams pt\n    WHERE pt.year = 2001 AND pt.lgID = 'NBA'\n    GROUP BY pt.playerID\n    ORDER BY SUM(pt.points) DESC\n    LIMIT 1\n) AS scoring_champion ON pt.playerID = scoring_champion.playerID\nWHERE t.year = 2001 AND t.lgID = 'NBA'",
    "2927": "SELECT \n    p.playerID, \n    (SUM(pt.turnovers) * 1.0 / SUM(pt.GP)) AS turnovers_per_game\nFROM \n    players_teams pt\nJOIN \n    players p ON pt.playerID = p.playerID\nJOIN \n    teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE \n    pt.year = 2003 AND t.lgID = 'NBA'\nGROUP BY \n    p.playerID\nORDER BY \n    SUM(pt.assists) DESC\nLIMIT 1;",
    "2928": "SELECT COUNT(*) AS NBA_Titles\nFROM series_post sp\nJOIN players_teams pt ON sp.tmIDWinner = pt.tmID AND sp.year = pt.year\nJOIN players p ON pt.playerID = p.playerID\nWHERE p.lastName = 'Allen' AND p.firstName = 'Ray' AND sp.lgIDWinner = 'NBA'",
    "2929": "WITH DraftPickTeam AS (\n    SELECT tmID\n    FROM draft\n    WHERE draftYear = 2003 AND draftRound = 1 AND draftSelection = 1\n),\nWinRate2003 AS (\n    SELECT d.tmID, \n           CAST(SUM(t.won) AS REAL) / (SUM(t.won) + SUM(t.lost)) AS winRate\n    FROM DraftPickTeam d\n    JOIN teams t ON d.tmID = t.tmID AND t.year = 2003\n),\nWinRate2004 AS (\n    SELECT d.tmID, \n           CAST(SUM(t.won) AS REAL) / (SUM(t.won) + SUM(t.lost)) AS winRate\n    FROM DraftPickTeam d\n    JOIN teams t ON d.tmID = t.tmID AND t.year = 2004\n)\nSELECT (WinRate2004.winRate - WinRate2003.winRate) AS winRateIncrease\nFROM WinRate2003, WinRate2004",
    "2930": "SELECT COUNT(*) AS NumberOfCoaches\nFROM awards_coaches ac\nJOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year\nWHERE ac.award = 'NBA coach of the year'\nAND ac.year BETWEEN 1971 AND 1975\nAND c.tmID = 'POR'",
    "2931": "SELECT \n    (SUM(CASE WHEN steals > 0 THEN points ELSE 0 END) * 1.0 / SUM(points)) * 100 AS percent_points_with_steals\nFROM \n    players_teams\nWHERE \n    lgID = 'NBA' \n    AND tmID = 'LAL'",
    "2932": "SELECT p.firstName || ' ' || COALESCE(p.middleName || ' ', '') || p.lastName AS name\nFROM players_teams pt\nJOIN players p ON pt.playerID = p.playerID\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.year = 1996 AND t.playoff IS NULL\nORDER BY pt.steals DESC\nLIMIT 1;",
    "2933": "SELECT pt.playerID\nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.year = 1988 AND t.playoff IS NULL\nORDER BY pt.turnovers DESC\nLIMIT 1",
    "2934": "SELECT tmID, MAX(winning_rate) AS max_winning_rate\nFROM (\n    SELECT tmID, CAST(won AS REAL) / (won + lost) AS winning_rate\n    FROM teams\n    WHERE year = 2000 AND lgID = 'NBA' AND playoff IS NULL\n)",
    "2935": "SELECT tmID, o_pts \nFROM teams \nWHERE year = 1998 AND playoff IS NULL \nORDER BY o_pts DESC \nLIMIT 1;",
    "2936": "SELECT t.name\nFROM teams t\nLEFT JOIN players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year\nWHERE t.year = 2001 AND pt.PostGP IS NULL\nORDER BY t.won DESC\nLIMIT 1;",
    "2937": "SELECT tmID \nFROM teams \nWHERE year = 1997 AND playoff IS NULL \nORDER BY (o_pts + d_pts) DESC \nLIMIT 1;",
    "2938": "SELECT tmID\nFROM draft\nWHERE draftYear = 1976 AND draftRound = 1 AND draftSelection = 6",
    "2939": "SELECT t.homeWon\nFROM teams t\nJOIN draft d ON t.tmID = d.tmID AND t.year = d.draftYear\nWHERE d.draftYear = 1998 AND d.draftRound = 1 AND d.draftSelection = 12",
    "2940": "SELECT p.weight, p.height\nFROM players p\nJOIN (\n    SELECT pa.playerID, SUM(pa.rebounds) AS total_rebounds\n    FROM player_allstar pa\n    GROUP BY pa.playerID\n    ORDER BY total_rebounds DESC\n    LIMIT 1\n) AS max_rebounds_player ON p.playerID = max_rebounds_player.playerID",
    "2941": "SELECT p.hsCity, p.hsState, p.hsCountry\nFROM player_allstar pa\nJOIN players p ON pa.playerID = p.playerID\nORDER BY pa.rebounds DESC\nLIMIT 1",
    "2942": "SELECT DISTINCT pt.tmID\nFROM player_allstar pa\nJOIN players_teams pt ON pa.playerID = pt.playerID AND pt.year = pa.season_id\nWHERE pa.season_id = 1997 AND pa.rebounds = (\n    SELECT MAX(rebounds)\n    FROM player_allstar\n    WHERE season_id = 1997\n)",
    "2943": "SELECT SUM(points) AS total_points\nFROM player_allstar\nWHERE playerID = (\n    SELECT playerID\n    FROM players\n    WHERE pos LIKE '%C%' AND pos LIKE '%F%' AND pos LIKE '%G%'\n    ORDER BY lastseason DESC\n    LIMIT 1\n)",
    "2944": "SELECT pt.tmID\nFROM players_teams pt\nJOIN players p ON pt.playerID = p.playerID\nWHERE p.pos LIKE '%F' AND pt.lgID = 'NBA'\nORDER BY p.birthDate DESC\nLIMIT 1;",
    "2945": "SELECT p.firstName, p.lastName\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nWHERE p.college = 'Central Missouri State'\nAND pt.GP = (\n    SELECT MAX(GP)\n    FROM players_teams\n)",
    "2946": "SELECT t.name\nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.year = 2000 AND pt.GP = 82\nORDER BY pt.minutes ASC\nLIMIT 1",
    "2947": "SELECT p.first_name || ' ' || p.last_name AS full_name\nFROM players_teams pt\nJOIN players p ON pt.playerID = p.playerID\nWHERE pt.year = 1995 AND pt.GP = 82\nORDER BY pt.turnovers DESC\nLIMIT 1",
    "2948": "SELECT pt.tmID\nFROM players_teams pt\nJOIN (\n    SELECT playerID\n    FROM players_teams\n    WHERE year = 2011 AND GP = GS\n) AS started_every_game ON pt.playerID = started_every_game.playerID\nWHERE pt.year = 2011\nORDER BY pt.steals DESC\nLIMIT 1;",
    "2949": "SELECT t.name, COUNT(*) AS same_starting_players\nFROM players_teams pt\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pt.GP = pt.GS\nGROUP BY pt.tmID, pt.year\nORDER BY same_starting_players DESC\nLIMIT 1;",
    "2950": "SELECT p.birthDate\nFROM players p\nJOIN players_teams pt ON p.playerID = pt.playerID\nWHERE pt.year = 2001\nORDER BY pt.rebounds DESC\nLIMIT 1",
    "2951": "SELECT t.name\nFROM player_allstar pa\nJOIN players_teams pt ON pa.playerID = pt.playerID AND pa.season_id = pt.year\nJOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year\nWHERE pa.season_id = 1997\nORDER BY pa.rebounds DESC\nLIMIT 1",
    "2952": "SELECT t.name\nFROM teams t\nJOIN (\n    SELECT pt.tmID, pt.year\n    FROM players_teams pt\n    WHERE pt.year = 2011 AND pt.rebounds > 600\n    GROUP BY pt.tmID\n    HAVING COUNT(DISTINCT pt.playerID) > 1\n) AS sub ON t.tmID = sub.tmID AND t.year = sub.year",
    "2953": "SELECT COUNT(*) FROM works WHERE Date < 1602;",
    "2954": "SELECT COUNT(DISTINCT Scene) AS NumberOfScenesInAct1\nFROM chapters\nWHERE Act = 1 AND work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night')",
    "2955": "SELECT Description \nFROM chapters \nJOIN works ON chapters.work_id = works.id \nWHERE Act = 1 AND Scene = 2 AND Title = 'Twelfth Night'",
    "2956": "SELECT\n    (SELECT COUNT(DISTINCT Scene) FROM chapters WHERE Act = 1 AND work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night'))\n    -\n    (SELECT COUNT(DISTINCT Scene) FROM chapters WHERE Act = 5 AND work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night')) AS SceneDifference",
    "2957": "SELECT w.Title\nFROM works w\nJOIN characters c ON w.id = (SELECT chapter_id FROM paragraphs WHERE character_id = c.id)\nWHERE c.CharName = 'Lord Abergavenny'\nLIMIT 1;",
    "2958": "SELECT characters.CharName\nFROM characters\nJOIN paragraphs ON characters.id = paragraphs.character_id\nJOIN chapters ON paragraphs.chapter_id = chapters.id\nJOIN works ON chapters.work_id = works.id\nWHERE works.Title = 'Twelfth Night'\nGROUP BY characters.CharName",
    "2959": "SELECT COUNT(p.id) AS NumberOfParagraphs\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nJOIN works w ON c.work_id = w.id\nWHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 1",
    "2960": "SELECT p.PlainText\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nJOIN works w ON c.work_id = w.id\nWHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 1",
    "2961": "SELECT COUNT(*) AS NumberOfParagraphs\nFROM paragraphs\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE characters.CharName = 'Lord Abergavenny'",
    "2962": "SELECT paragraphs.id\nFROM paragraphs\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE characters.Description = 'son to Tamora'",
    "2963": "SELECT COUNT(*) AS SceneCount\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE chapters.Description = 'OLIVIA\u2019S house.'\nAND works.Title = 'Twelfth Night';",
    "2964": "SELECT COUNT(*) AS NumberOfCharacters\nFROM characters\nWHERE id IN (\n    SELECT DISTINCT character_id\n    FROM paragraphs\n    WHERE chapter_id IN (\n        SELECT id\n        FROM chapters\n        WHERE work_id = (\n            SELECT id\n            FROM works\n            WHERE Title = 'Twelfth Night'\n        )\n    )\n)",
    "2965": "SELECT w.Title\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nGROUP BY w.id\nORDER BY COUNT(DISTINCT ch.id) DESC\nLIMIT 1",
    "2966": "SELECT AVG(CharacterCount) AS AverageCharactersPerWork\nFROM (\n    SELECT COUNT(DISTINCT c.id) AS CharacterCount, ch.work_id\n    FROM characters c\n    JOIN paragraphs p ON c.id = p.character_id\n    JOIN chapters ch ON p.chapter_id = ch.id\n    GROUP BY ch.work_id\n)",
    "2967": "SELECT AVG(SceneCount) AS AvgScenesPerAct\nFROM (\n    SELECT Act, COUNT(DISTINCT Scene) AS SceneCount\n    FROM chapters\n    WHERE work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night')\n    GROUP BY Act\n)",
    "2968": "SELECT COUNT(*) AS NumberOfComedies\nFROM works\nWHERE GenreType = 'Comedy'",
    "2969": "SELECT MIN(Date) AS FirstPoemDate\nFROM works\nWHERE GenreType = 'Poem'",
    "2970": "SELECT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland';",
    "2971": "SELECT c.Description\nFROM chapters c\nJOIN paragraphs p ON c.id = p.chapter_id\nGROUP BY c.id\nORDER BY COUNT(p.id) DESC\nLIMIT 1",
    "2972": "SELECT c.CharName\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nWHERE p.PlainText = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'",
    "2973": "SELECT COUNT(*) AS NumberOfCharacters\nFROM characters\nWHERE id IN (\n    SELECT DISTINCT character_id\n    FROM paragraphs\n    WHERE chapter_id IN (\n        SELECT id\n        FROM chapters\n        WHERE work_id = (\n            SELECT id\n            FROM works\n            WHERE Title = 'Titus Andronicus'\n        )\n    )\n)",
    "2974": "SELECT COUNT(DISTINCT Act) AS NumberOfActs\nFROM chapters\nWHERE work_id = (SELECT id FROM works WHERE LongTitle = 'Two Gentlemen of Verona')",
    "2975": "SELECT c.Description\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nWHERE p.id = 640171",
    "2976": "SELECT w.Title\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.CharName = 'Shylock'\nGROUP BY w.Title",
    "2977": "SELECT COUNT(DISTINCT Scene) AS NumberOfScenes\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE Title = 'King John'",
    "2978": "SELECT COUNT(DISTINCT chapter_id) AS chapters_count\nFROM paragraphs\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE CharName = 'Demetrius'",
    "2979": "SELECT w.Title\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.id = 324 AND ch.Description = 'this friend of Caesar'",
    "2980": "SELECT chapters.Description\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE works.Title = 'Midsummer Night''s Dream' AND chapters.Act = 2 AND chapters.Scene = 2",
    "2981": "SELECT LongTitle\nFROM works\nWHERE GenreType = 'Tragedy' AND id IN (\n    SELECT work_id\n    FROM chapters\n    GROUP BY work_id\n    ORDER BY COUNT(Scene) DESC\n    LIMIT 1\n)",
    "2982": "SELECT COUNT(*) AS NumberOfParagraphs\nFROM paragraphs\nJOIN chapters ON paragraphs.chapter_id = chapters.id\nWHERE chapters.Description = \"A Sea-port in Cyprus. An open place near the quay.\"",
    "2983": "SELECT \n    (CAST(SUM(CASE WHEN w.GenreType = 'Tragedy' THEN c.Scene ELSE 0 END) AS FLOAT) / CAST(SUM(c.Scene) AS FLOAT)) * 100 AS percentage_of_tragic_scenes\nFROM \n    chapters c\nJOIN \n    works w ON c.work_id = w.id\nWHERE \n    w.Date = 1594;",
    "2984": "SELECT AVG(ChapterCount) AS AvgChapters\nFROM (\n    SELECT works.id, COUNT(chapters.id) AS ChapterCount\n    FROM works\n    LEFT JOIN chapters ON works.id = chapters.work_id\n    WHERE works.Date = 1599\n    GROUP BY works.id\n)",
    "2985": "SELECT COUNT(*) AS NumberOfServantsToTimon\nFROM characters\nWHERE Description = 'servant to Timon'",
    "2986": "SELECT Title \nFROM works \nWHERE Date = (SELECT MIN(Date) FROM works)",
    "2987": "SELECT COUNT(*) FROM works WHERE GenreType = 'Poem'",
    "2988": "SELECT COUNT(DISTINCT Scene) AS NumberOfScenes\nFROM chapters\nWHERE work_id = 7 AND Act = 1;",
    "2989": "SELECT COUNT(*) AS NumberOfTragedies\nFROM works\nWHERE Date BETWEEN 1500 AND 1599\nAND GenreType = 'Tragedy'",
    "2990": "SELECT CharName FROM characters WHERE Description = 'Daughter to Capulet'",
    "2991": "SELECT COUNT(*) AS NumberOfParagraphs\nFROM paragraphs\nWHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'",
    "2992": "SELECT w.LongTitle\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nWHERE c.Act = 1\nGROUP BY w.id\nORDER BY COUNT(c.Scene) DESC\nLIMIT 1",
    "2993": "SELECT c.Description\nFROM chapters c\nJOIN paragraphs p ON c.id = p.chapter_id\nGROUP BY c.id\nORDER BY COUNT(p.id) DESC\nLIMIT 1",
    "2994": "SELECT Description \nFROM chapters \nJOIN works ON chapters.work_id = works.id \nWHERE works.LongTitle = 'Twelfth Night, Or What You Will' AND chapters.Scene = 2 AND chapters.Act = 2",
    "2995": "SELECT c.Description\nFROM chapters c\nJOIN paragraphs p ON c.id = p.chapter_id\nGROUP BY c.id\nHAVING MAX(p.ParagraphNum) < 150",
    "2996": "SELECT w.Title\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nWHERE c.Description = \"A field near Windsor\";",
    "2997": "SELECT COUNT(p.id) AS total_paragraphs\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nWHERE c.Act = 1 AND c.Scene = (\n    SELECT MAX(Scene) \n    FROM chapters \n    WHERE Act = 1\n)",
    "2998": "SELECT c.CharName\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nJOIN chapters ch ON p.chapter_id = ch.id\nWHERE c.CharName != '(stage directions)'\nAND ch.Description = 'The sea-coast'\nGROUP BY c.CharName\nHAVING COUNT(p.character_id) = 5",
    "2999": "SELECT COUNT(DISTINCT chapters.id) AS NumberOfChapters\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nJOIN paragraphs ON chapters.id = paragraphs.chapter_id\nWHERE works.Title = 'As You Like It' AND paragraphs.ParagraphNum <= 50",
    "3000": "SELECT p.character_id\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nWHERE c.Description = 'Florence. Without the walls. A tucket afar off'\nAND p.PlainText = 'His name, I pray you.'",
    "3001": "SELECT COUNT(*) AS NumberOfCharacters\nFROM characters\nWHERE id IN (\n    SELECT character_id\n    FROM paragraphs\n    WHERE chapter_id IN (\n        SELECT id\n        FROM chapters\n        WHERE work_id = (\n            SELECT id\n            FROM works\n            WHERE Title = 'Hamlet'\n        )\n    )\n)\nGROUP BY character_id",
    "3002": "SELECT COUNT(DISTINCT Scene) AS NumberOfScenes\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE Act = 5 AND LongTitle = 'History of Henry VIII'",
    "3003": "SELECT COUNT(DISTINCT w.id) AS history_works_with_1st_act_having_no_more_than_2_scenes\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nWHERE w.GenreType = 'History'\nAND c.Act = 1\nGROUP BY w.id\nHAVING COUNT(c.Scene) <= 2",
    "3004": "SELECT COUNT(DISTINCT Act) AS NumberOfActs\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE Title = 'Sonnets';",
    "3005": "SELECT c.Description\nFROM chapters c\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.Abbrev = '1Play'\nORDER BY p.chapter_id ASC\nLIMIT 1",
    "3006": "SELECT w.Title, w.GenreType\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nGROUP BY w.id\nHAVING COUNT(DISTINCT c.Act) = 1",
    "3007": "SELECT COUNT(p.id) AS NumberOfParagraphs\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.CharName = 'Sir Richard Ratcliff'\nAND c.id = (\n    SELECT c.id\n    FROM paragraphs p\n    JOIN chapters c ON p.chapter_id = c.id\n    JOIN characters ch ON p.character_id = ch.id\n    WHERE ch.CharName = 'Sir Richard Ratcliff'\n    GROUP BY c.id\n    ORDER BY MAX(p.ParagraphNum) DESC\n    LIMIT 1\n)",
    "3008": "SELECT Description \nFROM chapters \nJOIN works ON chapters.work_id = works.id \nWHERE Title = 'A Lover''s Complaint' AND Act = 1 AND Scene = 1",
    "3009": "SELECT w.Date\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nGROUP BY w.id\nHAVING COUNT(DISTINCT c.Scene) = 154",
    "3010": "SELECT AVG(SceneCount) AS AverageScenesPerComedy\nFROM (\n    SELECT w.id, COUNT(DISTINCT c.Scene) AS SceneCount\n    FROM works w\n    JOIN chapters c ON w.id = c.work_id\n    WHERE w.GenreType = 'Comedy'\n    GROUP BY w.id\n)",
    "3011": "WITH WorkID AS (\n    SELECT id FROM works WHERE LongTitle = 'The Tragedy of Romeo and Juliet'\n),\nRomeoJulietIDs AS (\n    SELECT id FROM characters WHERE CharName IN ('Romeo', 'Juliet')\n),\nTotalCharacterAppearances AS (\n    SELECT COUNT(DISTINCT character_id) AS TotalAppearances\n    FROM paragraphs\n    WHERE chapter_id IN (SELECT id FROM chapters WHERE work_id IN (SELECT id FROM WorkID))\n),\nRomeoAppearances AS (\n    SELECT COUNT(*) AS RomeoCount\n    FROM paragraphs\n    WHERE character_id IN (SELECT id FROM RomeoJulietIDs WHERE CharName = 'Romeo')\n    AND chapter_id IN (SELECT id FROM chapters WHERE work_id IN (SELECT id FROM WorkID))\n),\nJulietAppearances AS (\n    SELECT COUNT(*) AS JulietCount\n    FROM paragraphs\n    WHERE character_id IN (SELECT id FROM RomeoJulietIDs WHERE CharName = 'Juliet')\n    AND chapter_id IN (SELECT id FROM chapters WHERE work_id IN (SELECT id FROM WorkID))\n)\nSELECT \n    'Romeo' AS Character,\n    (CAST(RomeoCount AS REAL) / TotalAppearances) * 100 AS Percentage\nFROM RomeoAppearances, TotalCharacterAppearances\nUNION\nSELECT \n    'Juliet' AS Character,\n    (CAST(JulietCount AS REAL) / TotalAppearances) * 100 AS Percentage\nFROM JulietAppearances, TotalCharacterAppearances",
    "3012": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = \"This is Illyria, lady\";",
    "3013": "SELECT COUNT(*) AS NumberOfParagraphs\nFROM paragraphs\nWHERE chapter_id = 18881;",
    "3014": "SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5;",
    "3015": "SELECT COUNT(DISTINCT Scene) AS NumberOfScenes\nFROM chapters\nWHERE Act = 5 AND work_id = 9;",
    "3016": "SELECT c.CharName, c.Description\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nJOIN chapters ch ON p.chapter_id = ch.id\nWHERE ch.id = 18710\nGROUP BY c.CharName",
    "3017": "SELECT COUNT(*) AS NumberOfChapters\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE works.Title = 'Midsummer Night's Dream'",
    "3018": "SELECT COUNT(p.id) AS NumberOfParagraphs\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nJOIN works w ON c.work_id = w.id\nWHERE w.Title = 'Comedy of Errors' AND c.Act = 5 AND c.Scene = 1",
    "3019": "SELECT c.CharName, c.Description\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nJOIN chapters ch ON p.chapter_id = ch.id\nJOIN works w ON ch.work_id = w.id\nWHERE w.Title = 'Venus and Adonis'\nGROUP BY c.CharName",
    "3020": "SELECT w.Title\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.CharName = 'Froth'\nGROUP BY w.Title",
    "3021": "SELECT COUNT(DISTINCT chapters.id) AS NumberOfChapters\nFROM chapters\nJOIN paragraphs ON chapters.id = paragraphs.chapter_id\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE characters.CharName = 'First Witch'",
    "3022": "SELECT chapters.Scene, chapters.Description\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE works.LongTitle = 'Pericles, Prince of Tyre' AND chapters.Act = 1",
    "3023": "SELECT w.LongTitle\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.Description = 'Servant to Montague'",
    "3024": "SELECT c.Scene, c.Act, w.Title\nFROM chapters c\nJOIN works w ON c.work_id = w.id\nWHERE c.Description = \"The house of ANTIPHOLUS of Ephesus\"",
    "3025": "SELECT c.CharName, p.ParagraphNum, p.PlainText\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nWHERE c.Description LIKE '%cousin to the king%'",
    "3026": "SELECT AVG(SceneCount) AS AvgScenePerAct\nFROM (\n    SELECT Act, COUNT(Scene) AS SceneCount\n    FROM chapters\n    JOIN works ON chapters.work_id = works.id\n    WHERE Title = 'Antony and Cleopatra'\n    GROUP BY Act\n)",
    "3027": "SELECT\n    (CAST(SUM(CASE WHEN w.Title = 'All\\'s Well That Ends Well' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(p.id)) * 100 AS percentage\nFROM\n    paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nJOIN works w ON c.work_id = w.id",
    "3028": "SELECT COUNT(*) FROM characters WHERE CharName = 'all' AND Abbrev = 'all'",
    "3029": "SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3;",
    "3030": "SELECT\n    (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'comedy') -\n    (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'History') AS difference",
    "3031": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1",
    "3032": "SELECT id FROM works WHERE Title LIKE '%Henry%'",
    "3033": "SELECT CharName \nFROM characters \nWHERE Description = 'a senator of Venice'",
    "3034": "SELECT c.CharName\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nWHERE p.ParagraphNum = 8 AND p.chapter_id = 18820",
    "3035": "SELECT chapters.Description\nFROM chapters\nJOIN paragraphs ON chapters.id = paragraphs.chapter_id\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE chapters.id = 18704 AND characters.CharName = 'Orsino'",
    "3036": "SELECT COUNT(DISTINCT Scene) \nFROM chapters \nJOIN works ON chapters.work_id = works.id \nWHERE LongTitle = \"Twelfth Night, Or What You Will\";",
    "3037": "SELECT c.Description\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nWHERE p.ParagraphNum = 20",
    "3038": "SELECT COUNT(DISTINCT chapters.id) AS GratianoChapters\nFROM chapters\nJOIN paragraphs ON chapters.id = paragraphs.chapter_id\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE characters.CharName = 'Gratiano' AND characters.Description = 'friend to Antonio and Bassiano'",
    "3039": "SELECT chapters.Description \nFROM chapters \nJOIN works ON chapters.work_id = works.id \nWHERE chapters.id = 18706 AND works.Title = 'All's Well That Ends Well'",
    "3040": "SELECT CharName\nFROM characters\nWHERE id IN (\n    SELECT character_id\n    FROM paragraphs\n    WHERE ParagraphNum = 3\n)",
    "3041": "SELECT paragraphs.PlainText \nFROM paragraphs \nJOIN characters ON paragraphs.character_id = characters.id \nWHERE characters.CharName = 'Aedile'",
    "3042": "SELECT DISTINCT c.CharName\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nWHERE p.chapter_id = 18708\nLIMIT 2;",
    "3043": "SELECT COUNT(DISTINCT Act) AS NumberOfActs\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE works.GenreType = 'comedy' AND works.Title = 'Two Gentlemen of Verona'",
    "3044": "WITH HistoricalWorks AS (\n    SELECT w.id\n    FROM works w\n    WHERE w.GenreType = 'history'\n),\nScenesIn1500s AS (\n    SELECT w.id, COUNT(c.Scene) AS SceneCount\n    FROM works w\n    JOIN chapters c ON w.id = c.work_id\n    WHERE w.Date >= 1500 AND w.Date <= 1599\n    GROUP BY w.id\n    HAVING COUNT(c.Scene) >= 5\n),\nHistoricalScenesIn1500s AS (\n    SELECT w.id\n    FROM HistoricalWorks w\n    JOIN ScenesIn1500s s ON w.id = s.id\n),\nTotalHistoricalWorks AS (\n    SELECT COUNT(*) AS TotalCount\n    FROM HistoricalWorks\n),\nTotalHistoricalScenesIn1500s AS (\n    SELECT COUNT(*) AS TotalCount\n    FROM HistoricalScenesIn1500s\n)\nSELECT \n    (CAST(TotalHistoricalScenesIn1500s.TotalCount AS FLOAT) / TotalHistoricalWorks.TotalCount) * 100 AS Percentage\nFROM TotalHistoricalWorks, TotalHistoricalScenesIn1500s;",
    "3045": "SELECT\n    (CAST(SUM(CASE WHEN Act = 5 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM\n    chapters\nJOIN\n    works ON chapters.work_id = works.id\nWHERE\n    Title = 'Titus Andronicus'",
    "3046": "SELECT COUNT(*) FROM works WHERE GenreType = 'Tragedy';",
    "3047": "SELECT COUNT(*) FROM works WHERE Title LIKE '%Henry%'",
    "3048": "SELECT character_id FROM paragraphs WHERE PlainText = 'O my poor brother! and so perchance may he be.'",
    "3049": "SELECT paragraphs.ParagraphNum, paragraphs.PlainText\nFROM paragraphs\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE characters.CharName = 'Sir Andrew Aguecheek'",
    "3050": "SELECT w.Title, c.CharName\nFROM works w\nJOIN chapters ch ON w.id = ch.work_id\nJOIN paragraphs p ON ch.id = p.chapter_id\nJOIN characters c ON p.character_id = c.id\nWHERE w.Date = (SELECT MAX(Date) FROM works)\nGROUP BY c.CharName",
    "3051": "SELECT paragraphs.PlainText\nFROM paragraphs\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE paragraphs.ParagraphNum >= 1900 AND paragraphs.ParagraphNum <= 1950\nAND characters.Description = 'a sea captain, friend to Sebastian'",
    "3052": "SELECT w.LongTitle\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nWHERE c.Act = 4 AND c.Scene = 5 AND c.Description = 'Mytilene. A street before the brothel.'",
    "3053": "SELECT c.CharName\nFROM characters c\nJOIN paragraphs p ON c.id = p.character_id\nWHERE p.PlainText = 'This is Illyria, lady.'",
    "3054": "SELECT COUNT(DISTINCT works.id) AS NumberOfWorks\nFROM works\nJOIN chapters ON works.id = chapters.work_id\nJOIN paragraphs ON chapters.id = paragraphs.chapter_id\nJOIN characters ON paragraphs.character_id = characters.id\nWHERE works.Date >= 1600 AND works.Date <= 1610\nAND characters.CharName = 'Third Servingman'",
    "3055": "SELECT c.Description\nFROM chapters c\nJOIN works w ON c.work_id = w.id\nWHERE w.Title = 'Venus and Adonis' AND c.Scene = (SELECT MAX(Scene) FROM chapters WHERE work_id = w.id)\nLIMIT 1",
    "3056": "SELECT COUNT(p.id) AS ViolaLines\nFROM paragraphs p\nJOIN characters c ON p.character_id = c.id\nJOIN chapters ch ON p.chapter_id = ch.id\nJOIN works w ON ch.work_id = w.id\nWHERE c.CharName = 'Viola'\nAND ch.Act = 1\nAND ch.Scene = 2\nAND w.Title = 'Twelfth Night'",
    "3057": "SELECT p.character_id, c.work_id\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nWHERE p.PlainText = 'Fear not thou, man, thou shalt lose nothing here.'",
    "3058": "SELECT c.Description\nFROM chapters c\nJOIN paragraphs p ON c.id = p.chapter_id\nWHERE p.PlainText = 'What, wilt thou hear some music, my sweet love?'",
    "3059": "SELECT DISTINCT c.Scene\nFROM chapters c\nJOIN works w ON c.work_id = w.id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE w.Title = 'Twelfth Night' AND ch.CharName = 'Sir Toby Belch'",
    "3060": "SELECT w.Title\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE w.Date < 1600\nAND w.GenreType = 'Tragedy'\nAND ch.CharName = 'Tybalt'\nGROUP BY w.Title",
    "3061": "SELECT chapters.id\nFROM chapters\nJOIN works ON chapters.work_id = works.id\nWHERE works.Date > (\n    SELECT (SUM(Date) / COUNT(Date)) * 0.89\n    FROM works\n)",
    "3062": "SELECT \n    (SELECT COUNT(DISTINCT w.id) \n     FROM works w\n     JOIN chapters c ON w.id = c.work_id\n     JOIN paragraphs p ON c.id = p.chapter_id\n     JOIN characters ch ON p.character_id = ch.id\n     WHERE w.GenreType = 'Comedy' AND ch.CharName = 'antonio') * 100.0 /\n    (SELECT COUNT(*) \n     FROM works \n     WHERE GenreType = 'Comedy') AS percentage",
    "3063": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nWHERE d.cylinders = 8\nORDER BY p.price DESC\nLIMIT 1",
    "3064": "SELECT COUNT(DISTINCT d.ID)\nFROM data d\nJOIN price p ON d.ID = p.ID\nWHERE d.weight > 3000 AND p.price < 30000",
    "3065": "SELECT d.acceleration\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY p.price DESC\nLIMIT 1",
    "3066": "SELECT price.price\nFROM price\nJOIN data ON price.ID = data.ID\nWHERE data.car_name = 'ford torino'",
    "3067": "SELECT c.country\nFROM country c\nJOIN production p ON c.origin = p.country\nJOIN data d ON p.ID = d.ID\nWHERE d.car_name = 'ford torino' AND p.model_year = 1970",
    "3068": "SELECT COUNT(DISTINCT p.ID) \nFROM production p\nJOIN country c ON p.country = c.origin\nWHERE p.model_year = 1970 AND c.country = 'USA'",
    "3069": "SELECT d.car_name\nFROM data d\nJOIN production p ON d.ID = p.ID\nJOIN country c ON p.country = c.origin\nWHERE c.country = 'USA'",
    "3070": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY p.price DESC\nLIMIT 3",
    "3071": "SELECT DISTINCT p.model_year\nFROM production p\nJOIN data d ON p.ID = d.ID\nWHERE d.car_name = 'chevrolet impala'\nORDER BY p.model_year",
    "3072": "SELECT COUNT(*) \nFROM data \nJOIN price ON data.ID = price.ID \nWHERE acceleration > 10 AND price > 20000 AND price < 30000",
    "3073": "SELECT d.weight\nFROM data d\nJOIN price p ON d.ID = p.ID\nWHERE p.price > 40000",
    "3074": "SELECT MAX(data.acceleration) AS max_acceleration\nFROM data\nJOIN price ON data.ID = price.ID\nWHERE price.price > 40000",
    "3075": "SELECT AVG(price.price) AS average_price\nFROM price\nJOIN data ON price.ID = data.ID\nWHERE data.cylinders = 8",
    "3076": "SELECT MAX(displacement / cylinders) AS max_sweep_volume\nFROM data\nJOIN price ON data.ID = price.ID\nWHERE price < 30000",
    "3077": "SELECT COUNT(DISTINCT p.ID) AS EuropeanCarsCount\nFROM production p\nJOIN country c ON p.country = c.origin\nWHERE c.country = 'Europe'",
    "3078": "SELECT c.country\nFROM country c\nJOIN production p ON c.origin = p.country\nJOIN data d ON p.ID = d.ID\nWHERE d.car_name = 'chevrolet malibu'",
    "3079": "SELECT d.mpg\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY p.price DESC\nLIMIT 1",
    "3080": "SELECT country.country\nFROM production\nJOIN country ON production.country = country.origin\nWHERE production.ID = 382",
    "3081": "SELECT country.country\nFROM country\nJOIN production ON country.origin = production.country\nJOIN price ON production.ID = price.ID\nWHERE price.price = 44274.40748",
    "3082": "SELECT p.price\nFROM price p\nJOIN data d ON p.ID = d.ID\nWHERE d.car_name = 'volkswagen dasher' AND d.acceleration = 14.1",
    "3083": "SELECT displacement \nFROM data \nJOIN price ON data.ID = price.ID \nWHERE price = 37443.85589",
    "3084": "SELECT p.ID, pr.model_year\nFROM price p\nJOIN production pr ON p.ID = pr.ID\nWHERE p.price = 32650.65157",
    "3085": "SELECT p.price\nFROM price p\nJOIN data d ON p.ID = d.ID\nWHERE d.car_name = 'toyota corona hardtop'",
    "3086": "SELECT d.cylinders\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY p.price ASC\nLIMIT 1",
    "3087": "SELECT d.car_name, p.price\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY d.weight DESC\nLIMIT 1",
    "3088": "SELECT c.country\nFROM country c\nJOIN production p ON c.origin = p.country\nJOIN data d ON p.ID = d.ID\nORDER BY d.horsepower DESC\nLIMIT 1",
    "3089": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM production \n     JOIN country ON production.country = country.origin \n     WHERE country.country = 'Japan') / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM production) * 100 AS percentage_japanese_cars",
    "3090": "SELECT displacement / cylinders AS swept_volume\nFROM data\nJOIN price ON data.ID = price.ID\nWHERE price = 34538.97449",
    "3091": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY p.price DESC\nLIMIT 1",
    "3092": "SELECT COUNT(*) \nFROM production \nJOIN country ON production.country = country.origin \nWHERE country.country = 'USA' AND production.model_year = 1981",
    "3093": "SELECT price.price\nFROM data\nJOIN price ON data.ID = price.ID\nORDER BY (data.displacement / data.cylinders) DESC\nLIMIT 1",
    "3094": "SELECT d.car_name\nFROM data d\nJOIN production p ON d.ID = p.ID\nJOIN country c ON p.country = c.origin\nWHERE c.country = 'Japan'\nORDER BY d.horsepower DESC\nLIMIT 1",
    "3095": "SELECT COUNT(DISTINCT model_year) AS introduction_count\nFROM production\nJOIN data ON production.ID = data.ID\nWHERE data.car_name = 'ford maverick'",
    "3096": "SELECT c.country\nFROM country c\nJOIN production p ON c.origin = p.country\nJOIN data d ON p.ID = d.ID\nORDER BY d.mpg DESC\nLIMIT 1",
    "3097": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nWHERE d.car_name LIKE 'dodge%'\nORDER BY p.price ASC\nLIMIT 1",
    "3098": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nJOIN production pr ON d.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE c.country = 'USA'\nORDER BY p.price DESC\nLIMIT 1",
    "3099": "SELECT COUNT(DISTINCT d.ID) \nFROM data d \nJOIN price p ON d.ID = p.ID \nWHERE d.displacement > 400 AND p.price > 30000;",
    "3100": "SELECT p.model_year\nFROM production p\nJOIN country c ON p.country = c.origin\nWHERE c.country = 'Europe'\nGROUP BY p.model_year\nORDER BY COUNT(p.ID) DESC\nLIMIT 1",
    "3101": "SELECT price.price\nFROM price\nJOIN data ON price.ID = data.ID\nWHERE data.car_name = 'peugeot 505s turbo diesel'",
    "3102": "SELECT d.acceleration\nFROM data d\nJOIN price p ON d.ID = p.ID\nJOIN production pr ON d.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE c.country = 'USA'\nORDER BY p.price ASC\nLIMIT 1",
    "3103": "SELECT \n    c.country,\n    COUNT(p.ID) / COUNT(DISTINCT p.model_year) AS annual_average\nFROM \n    production p\nJOIN \n    country c ON p.country = c.origin\nGROUP BY \n    p.country\nORDER BY \n    COUNT(p.ID) DESC\nLIMIT 1;",
    "3104": "SELECT \n    ROUND((CAST(SUM(CASE WHEN c.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) / COUNT(p.ID)) * 100, 2) AS percentage\nFROM \n    production p\nJOIN \n    data d ON p.ID = d.ID\nJOIN \n    country c ON p.country = c.origin\nWHERE \n    d.displacement / d.cylinders >= 30;",
    "3105": "SELECT data.car_name\nFROM data\nJOIN production ON data.ID = production.ID\nWHERE production.model_year = 1975",
    "3106": "SELECT AVG(p.price) AS average_price\nFROM price p\nJOIN production pr ON p.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE c.country = 'Europe'",
    "3107": "SELECT price FROM price WHERE ID = 15",
    "3108": "SELECT COUNT(*) \nFROM production \nJOIN country ON production.country = country.origin \nJOIN data ON production.ID = data.ID \nWHERE country.country = 'Japan' AND data.weight < 3000;",
    "3109": "SELECT COUNT(*) \nFROM production \nJOIN data ON production.ID = data.ID \nWHERE production.model_year = 1973 AND data.horsepower < 100;",
    "3110": "SELECT d.ID\nFROM data d\nJOIN price p ON d.ID = p.ID\nJOIN production pr ON d.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE c.country = 'Japan' AND p.price > 35000 AND d.acceleration = 14",
    "3111": "SELECT model_year\nFROM production\nJOIN data ON production.ID = data.ID\nORDER BY weight DESC\nLIMIT 1",
    "3112": "SELECT d.horsepower, p.model_year\nFROM data d\nJOIN production p ON d.ID = p.ID\nWHERE d.car_name = 'subaru dl'",
    "3113": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nJOIN production pr ON d.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE c.country = 'Japan'\nORDER BY p.price DESC\nLIMIT 1",
    "3114": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nWHERE p.price = 20000",
    "3115": "SELECT COUNT(DISTINCT p.ID) AS NumberOfCars\nFROM price p\nJOIN production pr ON p.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE p.price > 40000 AND c.country = 'USA'",
    "3116": "SELECT p.price, c.origin\nFROM price p\nJOIN data d ON p.ID = d.ID\nJOIN production pr ON d.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE d.car_name = 'ford maverick'",
    "3117": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nWHERE p.price > (SELECT AVG(price) * 0.85 FROM price)",
    "3118": "SELECT \n    (SELECT COUNT(*) FROM production JOIN data ON production.ID = data.ID WHERE data.horsepower = 130 AND production.model_year = 1970) - \n    (SELECT COUNT(*) FROM production JOIN data ON production.ID = data.ID WHERE data.horsepower = 130 AND production.model_year = 1976) AS difference",
    "3119": "SELECT production.ID\nFROM production\nJOIN country ON production.country = country.origin\nWHERE country.country = 'Japan' AND production.model_year = 1979",
    "3120": "SELECT country.country\nFROM country\nJOIN production ON country.origin = production.country\nJOIN data ON production.ID = data.ID\nORDER BY data.mpg ASC\nLIMIT 1",
    "3121": "SELECT d.car_name AS name, \n       d.model AS model, \n       (d.displacement / d.cylinders) AS sweep_volume, \n       p.model_year AS introduced_year\nFROM data d\nJOIN production p ON d.ID = p.ID\nORDER BY d.weight DESC\nLIMIT 1",
    "3122": "SELECT d.car_name, d.horsepower\nFROM data d\nJOIN production p ON d.ID = p.ID\nJOIN country c ON p.country = c.origin\nWHERE p.model_year = 1977 AND c.country = 'Europe'",
    "3123": "SELECT d.car_name, d.model\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY p.price DESC\nLIMIT 1",
    "3124": "SELECT price.price\nFROM price\nJOIN data ON price.ID = data.ID\nWHERE data.car_name = 'chevrolet bel air'",
    "3125": "SELECT AVG(p.price) AS average_price_per_car\nFROM price p\nJOIN production pr ON p.ID = pr.ID\nJOIN country c ON pr.country = c.origin\nWHERE c.country = 'Japan'",
    "3126": "SELECT c.country\nFROM country c\nJOIN production p ON c.origin = p.country\nJOIN price pr ON p.ID = pr.ID\nWHERE pr.price = (SELECT MIN(price) FROM price)",
    "3127": "SELECT d.ID, d.car_name, c.country\nFROM data d\nJOIN production p ON d.ID = p.ID\nJOIN country c ON p.country = c.origin\nWHERE p.model_year = 1975 AND d.cylinders = (\n    SELECT MAX(cylinders)\n    FROM data d\n    JOIN production p ON d.ID = p.ID\n    WHERE p.model_year = 1975\n)",
    "3128": "SELECT d.acceleration, d.cylinders, p.model_year\nFROM data d\nJOIN price pr ON d.ID = pr.ID\nJOIN production p ON d.ID = p.ID\nWHERE pr.price = (SELECT MIN(price) FROM price)",
    "3129": "SELECT d.car_name, p.price\nFROM data d\nJOIN price p ON d.ID = p.ID\nWHERE d.model = 82 AND d.mpg > 30",
    "3130": "SELECT COUNT(DISTINCT model_year) AS models_produced\nFROM production\nJOIN data ON production.ID = data.ID\nWHERE car_name = 'ford maverick'",
    "3131": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM production \n     JOIN country ON production.country = country.origin \n     WHERE country.country = 'USA') / \n    (SELECT CAST(COUNT(*) AS REAL) FROM production) * 100 AS percentage_usa",
    "3132": "SELECT AVG(production_count) AS avg_production_rate_per_year, GROUP_CONCAT(car_name, ', ') AS cars_under_1800_lbs\nFROM (\n  SELECT COUNT(p.ID) AS production_count, d.car_name, d.weight\n  FROM production p\n  JOIN data d ON p.ID = d.ID\n  WHERE p.model_year BETWEEN 1971 AND 1980\n  GROUP BY p.model_year\n  HAVING d.weight < 1800\n)",
    "3133": "SELECT AVG(price.price) AS average_price\nFROM price\nJOIN data ON price.ID = data.ID\nJOIN production ON data.ID = production.ID\nWHERE production.model_year = 70",
    "3134": "SELECT price.price\nFROM price\nJOIN data ON price.ID = data.ID\nWHERE data.car_name = 'chevrolet vega 2300'",
    "3135": "SELECT country.country\nFROM country\nJOIN production ON country.origin = production.country\nJOIN data ON production.ID = data.ID\nWHERE data.car_name = 'chevy c20'",
    "3136": "SELECT p.price\nFROM price p\nJOIN data d ON p.ID = d.ID\nJOIN production pr ON d.ID = pr.ID\nWHERE d.car_name LIKE 'ford%'\nAND pr.model_year BETWEEN 1970 AND 1980",
    "3137": "SELECT d.car_name\nFROM data d\nJOIN production p ON d.ID = p.ID\nWHERE p.model_year = 1975\nORDER BY d.mpg DESC\nLIMIT 1",
    "3138": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY d.mpg ASC, p.price DESC\nLIMIT 1",
    "3139": "SELECT COUNT(*) \nFROM production \nJOIN country ON production.country = country.origin \nJOIN data ON production.ID = data.ID \nWHERE country.country = 'USA' AND data.acceleration < 12",
    "3140": "SELECT COUNT(DISTINCT data.ID) AS JapaneseCarsOver2000lbs\nFROM data\nJOIN production ON data.ID = production.ID\nJOIN country ON production.country = country.origin\nWHERE country.country = 'Japan' AND data.weight > 2000",
    "3141": "SELECT d.car_name\nFROM data d\nJOIN price p ON d.ID = p.ID\nORDER BY p.price DESC\nLIMIT 1",
    "3142": "SELECT production.model_year\nFROM production\nJOIN data ON production.ID = data.ID\nWHERE data.car_name = 'buick skylark 320'",
    "3143": "SELECT country.country\nFROM country\nJOIN production ON country.origin = production.country\nJOIN price ON production.ID = price.ID\nWHERE production.model_year = 1970\nORDER BY price.price DESC\nLIMIT 1",
    "3144": "SELECT COUNT(*) \nFROM production \nJOIN data ON production.ID = data.ID \nWHERE horsepower > 200 AND model_year = 1975",
    "3145": "SELECT \n    (SELECT COUNT(*) \n     FROM production \n     JOIN country ON production.country = country.origin \n     WHERE country.country = 'USA') * 100.0 / COUNT(*) AS percentage_of_american_cars\nFROM production",
    "3146": "SELECT AVG(d.weight) AS average_weight\nFROM data d\nJOIN production p ON d.ID = p.ID\nJOIN country c ON p.country = c.origin\nWHERE c.country = 'Japan'\nAND d.cylinders = 4\nAND p.model_year BETWEEN 1975 AND 1980",
    "3147": "SELECT SUM(donation_total) AS total_amount_of_donations_2012\nFROM donations\nWHERE donation_timestamp LIKE '2012%'",
    "3148": "SELECT donation_timestamp, donation_total\nFROM donations\nORDER BY donation_total DESC\nLIMIT 1",
    "3149": "SELECT SUM(donation_total) AS total_amount\nFROM donations\nWHERE donation_timestamp LIKE '2011%'\nAND for_honoree = 't'\nAND via_giving_page = 't'",
    "3150": "SELECT donor_acctid, \n       (donation_optional_support / donation_total) * 100 AS percentage_of_donation_for_optional_support\nFROM donations\nWHERE is_teacher_acct = 'f'",
    "3151": "SELECT p.title\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE p.primary_focus_subject = 'Literacy'",
    "3152": "SELECT e.title\nFROM essays e\nJOIN projects p ON e.projectid = p.projectid\nWHERE p.poverty_level = 'highest poverty'",
    "3153": "SELECT p.projectid, p.title\nFROM projects p\nJOIN essays e ON p.projectid = e.projectid\nWHERE p.primary_focus_subject = (\n    SELECT primary_focus_subject\n    FROM projects p\n    JOIN essays e ON p.projectid = e.projectid\n    WHERE e.title = 'Toot Your Flute!'\n)",
    "3154": "SELECT e.title\nFROM essays e\nJOIN projects p ON e.projectid = p.projectid\nWHERE p.teacher_prefix = 'Dr.'",
    "3155": "SELECT p.title, p.total_price_excluding_optional_support\nFROM projects p\nWHERE p.students_reached = 320",
    "3156": "SELECT d.donation_message, e.title AS project_name\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nJOIN essays e ON p.projectid = e.projectid\nWHERE d.donor_city = 'Texas City'",
    "3157": "SELECT vendor_name, item_name, item_unit_price\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE projects.title = 'Lights, Camera, Action!'",
    "3158": "SELECT SUM(donation_to_project) AS total_donations_collected\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Whistle While We Work!';",
    "3159": "SELECT p.projectid, e.title AS project_name, e.short_description AS describe\nFROM projects p\nJOIN essays e ON p.projectid = e.projectid\nWHERE p.teacher_ny_teaching_fellow = 't'",
    "3160": "SELECT e.title AS project_name, p.total_price_excluding_optional_support AS project_cost\nFROM projects p\nJOIN essays e ON p.projectid = e.projectid\nWHERE p.students_reached >= 600 AND p.poverty_level = 'moderate poverty'",
    "3161": "SELECT \n    (SUM(CASE WHEN p.school_metro = 'rural' THEN d.donation_to_project ELSE 0 END) / SUM(d.donation_to_project)) * 100 AS percentage_donations_rural\nFROM \n    donations d\nJOIN \n    projects p ON d.projectid = p.projectid",
    "3162": "SELECT \n    p.projectid,\n    p.title,\n    p.total_price_excluding_optional_support AS project_cost,\n    IFNULL(SUM(d.donation_to_project), 0) AS total_collected,\n    ((p.total_price_excluding_optional_support - IFNULL(SUM(d.donation_to_project), 0)) / p.total_price_excluding_optional_support) * 100 AS percentage_still_lacking\nFROM \n    projects p\nLEFT JOIN \n    donations d ON p.projectid = d.projectid\nGROUP BY \n    p.projectid\nORDER BY \n    p.total_price_excluding_optional_support DESC, p.projectid\nLIMIT 1;",
    "3163": "SELECT COUNT(DISTINCT schoolid) \nFROM projects \nWHERE school_district = 'West New York School District' \nAND poverty_level = 'highest poverty';",
    "3164": "SELECT COUNT(*) AS teacher_donations_in_colorado\nFROM donations\nWHERE is_teacher_acct = 't' AND donor_state = 'CO-Colorado'",
    "3165": "SELECT projectid \nFROM projects \nORDER BY total_price_including_optional_support DESC \nLIMIT 1",
    "3166": "SELECT donor_state, COUNT(*) AS paypal_donations\nFROM donations\nWHERE payment_method = 'paypal'\nAND for_honoree = 't'\nAND payment_included_campaign_gift_card = 't'\nGROUP BY donor_state\nORDER BY paypal_donations DESC\nLIMIT 1",
    "3167": "SELECT donationid, donation_total\nFROM donations\nORDER BY donation_total DESC\nLIMIT 1",
    "3168": "WITH OptionalTips AS (\n    SELECT \n        projectid, \n        (total_price_including_optional_support - total_price_excluding_optional_support) AS optional_tip\n    FROM projects\n    ORDER BY optional_tip DESC\n    LIMIT 1\n)\nSELECT \n    r.projectid, \n    r.item_name\nFROM resources r\nJOIN OptionalTips ot ON r.projectid = ot.projectid",
    "3169": "SELECT r.item_name, r.item_quantity, CASE WHEN p.teacher_prefix = 'Dr.' THEN 'Yes' ELSE 'No' END AS teacher_has_phd\nFROM resources r\nJOIN projects p ON r.projectid = p.projectid\nWHERE r.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'",
    "3170": "SELECT \n    SUM(d.donation_total) AS total_price_including_optional_support\nFROM \n    donations d\nJOIN \n    projects p ON d.projectid = p.projectid\nJOIN \n    essays e ON p.projectid = e.projectid\nWHERE \n    e.title = \"Recording Rockin' Readers\"",
    "3171": "SELECT school_latitude, school_longitude\nFROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE title = 'Smile for the Camera!!!'",
    "3172": "SELECT \n    SUM(d.donation_total) AS total_amount_donated, \n    e.title AS essay_title\nFROM \n    donations d\nJOIN \n    projects p ON d.projectid = p.projectid\nJOIN \n    essays e ON p.projectid = e.projectid\nWHERE \n    d.donor_acctid = (\n        SELECT \n            donor_acctid\n        FROM \n            donations\n        ORDER BY \n            donation_total DESC\n        LIMIT 1\n    )\nGROUP BY \n    d.donor_acctid",
    "3173": "SELECT \n    d.donor_acctid,\n    r.project_resource_type,\n    SUM(d.donation_total) AS total_donation\nFROM \n    donations d\nJOIN \n    resources r ON d.projectid = r.projectid\nGROUP BY \n    d.donor_acctid, r.project_resource_type\nORDER BY \n    total_donation DESC\nLIMIT 10",
    "3174": "SELECT \n    p.date_posted, \n    r.item_name\nFROM \n    projects p\nJOIN \n    resources r ON p.projectid = r.projectid\nWHERE \n    p.date_posted = (SELECT MIN(date_posted) FROM projects)",
    "3175": "SELECT vendor_name\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'iMath'",
    "3176": "SELECT p.date_posted, p.grade_level\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nORDER BY r.item_quantity DESC\nLIMIT 1",
    "3177": "SELECT AVG(donation_to_project) AS average_donation\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Recording Rockin'' Readers'",
    "3178": "WITH HighestPricedProject AS (\n    SELECT \n        projectid,\n        total_price_excluding_optional_support\n    FROM projects\n    ORDER BY total_price_excluding_optional_support DESC\n    LIMIT 1\n), BiggestDonor AS (\n    SELECT \n        d.projectid,\n        d.donor_acctid,\n        d.donation_to_project\n    FROM donations d\n    JOIN HighestPricedProject hpp ON d.projectid = hpp.projectid\n    ORDER BY d.donation_to_project DESC\n    LIMIT 1\n)\nSELECT \n    e.title AS EssayTitle,\n    bd.donor_acctid AS BiggestDonor,\n    (bd.donation_to_project / hpp.total_price_excluding_optional_support) * 100 AS DonationPercent\nFROM BiggestDonor bd\nJOIN HighestPricedProject hpp ON bd.projectid = hpp.projectid\nJOIN essays e ON bd.projectid = e.projectid",
    "3179": "WITH DonorOptionalSupport AS (\n    SELECT\n        donor_acctid,\n        SUM(donation_optional_support) AS total_optional_support\n    FROM donations\n    GROUP BY donor_acctid\n    ORDER BY total_optional_support DESC\n    LIMIT 5\n),\nAvgOptionalSupport AS (\n    SELECT\n        d.donor_acctid,\n        AVG(d.donation_optional_support) AS avg_optional_support\n    FROM donations d\n    JOIN DonorOptionalSupport dos ON d.donor_acctid = dos.donor_acctid\n    GROUP BY d.donor_acctid\n),\nMaxOptionalSupportDonation AS (\n    SELECT\n        d.donor_acctid,\n        d.projectid,\n        MAX(d.donation_optional_support) AS max_optional_support\n    FROM donations d\n    JOIN DonorOptionalSupport dos ON d.donor_acctid = dos.donor_acctid\n    GROUP BY d.donor_acctid\n),\nResourceTypeMaxSupport AS (\n    SELECT\n        mosd.donor_acctid,\n        r.project_resource_type\n    FROM MaxOptionalSupportDonation mosd\n    JOIN resources r ON mosd.projectid = r.projectid\n    WHERE mosd.max_optional_support = (\n        SELECT MAX(d.donation_optional_support)\n        FROM donations d\n        WHERE d.donor_acctid = mosd.donor_acctid AND d.projectid = mosd.projectid\n    )\n)\nSELECT\n    aos.donor_acctid,\n    aos.avg_optional_support,\n    rtms.project_resource_type\nFROM AvgOptionalSupport aos\nJOIN ResourceTypeMaxSupport rtms ON aos.donor_acctid = rtms.donor_acctid",
    "3180": "SELECT \n    r.projectid,\n    GROUP_CONCAT(r.item_name) AS item_names\nFROM \n    resources r\nJOIN \n    projects p ON r.projectid = p.projectid\nWHERE \n    p.school_city = 'Brooklyn'\nGROUP BY \n    r.projectid\nORDER BY \n    COUNT(r.item_name) DESC,\n    r.projectid ASC -- In case of ties, ensure a deterministic result\nLIMIT 1;",
    "3181": "SELECT COUNT(DISTINCT projects.schoolid) AS urban_schools_requesting_books\nFROM projects\nJOIN resources ON projects.projectid = resources.projectid\nWHERE projects.school_metro = 'urban' AND resources.project_resource_type = 'Books'",
    "3182": "SELECT r.projectid, p.schoolid, COUNT(r.resourceid) AS total_resources\nFROM resources r\nJOIN projects p ON r.projectid = p.projectid\nWHERE r.vendor_name = 'Amazon'\nGROUP BY p.schoolid\nORDER BY total_resources DESC\nLIMIT 1",
    "3183": "SELECT COUNT(DISTINCT donor_acctid) \nFROM donations \nJOIN projects ON donations.projectid = projects.projectid \nWHERE donor_city = 'Los Angeles' AND school_city != 'Los Angeles'",
    "3184": "SELECT teacher_prefix\nFROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Reading About Other Cultures'",
    "3185": "SELECT students_reached\nFROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Fit Firsties!'",
    "3186": "SELECT e.title, d.donor_acctid\nFROM essays e\nJOIN projects p ON e.projectid = p.projectid\nJOIN donations d ON p.projectid = d.projectid\nWHERE p.school_city = 'Chicago'",
    "3187": "SELECT e.title\nFROM projects p\nJOIN essays e ON p.projectid = e.projectid\nWHERE p.teacher_prefix = 'Dr.' AND p.students_reached > 300",
    "3188": "SELECT DISTINCT vendor_name\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE projects.primary_focus_subject = 'Literacy' AND resources.project_resource_type = 'Books'",
    "3189": "SELECT e.title\nFROM essays e\nJOIN (\n    SELECT r.projectid\n    FROM resources r\n    ORDER BY (r.item_unit_price * r.item_quantity) DESC\n    LIMIT 1\n) AS most_expensive ON e.projectid = most_expensive.projectid",
    "3190": "SELECT COUNT(*) AS teachers_from_new_york\nFROM donations\nWHERE donor_city = 'New York' AND is_teacher_acct = 't'",
    "3191": "SELECT COUNT(DISTINCT donor_acctid) AS donors_from_new_jersey_for_honoree\nFROM donations\nWHERE donor_state = 'NJ' AND for_honoree = 't';",
    "3192": "SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5';",
    "3193": "SELECT DISTINCT project_resource_type\nFROM resources\nWHERE vendor_name = 'Lakeshore Learning Materials'",
    "3194": "SELECT item_name\nFROM resources\nWHERE vendor_name = 'Lakeshore Learning Materials'\nORDER BY item_quantity DESC\nLIMIT 1",
    "3195": "SELECT COUNT(DISTINCT p.projectid) \nFROM projects p\nJOIN donations d ON p.projectid = d.projectid\nWHERE p.teacher_ny_teaching_fellow = 't' AND d.donor_city = 'New York'",
    "3196": "SELECT COUNT(DISTINCT p.projectid) AS total_projects\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE r.vendor_name = 'Lakeshore Learning Materials'\nAND p.teacher_prefix = 'Dr.';",
    "3197": "SELECT DISTINCT vendor_name\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE projects.poverty_level = 'highest poverty'",
    "3198": "SELECT p.schoolid\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE r.vendor_name = 'Lakeshore Learning Materials'\nORDER BY p.fulfillment_labor_materials DESC\nLIMIT 1",
    "3199": "SELECT vendor_name\nFROM resources\nWHERE projectid = (\n    SELECT projectid\n    FROM projects\n    ORDER BY (total_price_including_optional_support - total_price_excluding_optional_support) DESC\n    LIMIT 1\n)",
    "3200": "SELECT SUM(d.donation_total) AS total_donated_amount\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE p.school_city = 'Brooklyn'",
    "3201": "SELECT donations.donation_message\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.school_city = 'Brooklyn'\nAND projects.school_magnet = 't'\nAND projects.teacher_acctid IN (\n    SELECT teacher_acctid\n    FROM projects\n    WHERE school_city = 'Brooklyn'\n    AND school_magnet = 't'\n)",
    "3202": "SELECT COUNT(*) AS donations_for_year_round_public_schools\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE donations.payment_included_acct_credit = 't'\nAND projects.school_year_round = 't'\nAND projects.school_charter = 'f';",
    "3203": "SELECT SUM(d.donation_total) AS total_donation_amount\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE p.primary_focus_area = 'Literacy & Language'",
    "3204": "SELECT donor_acctid\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.primary_focus_area = 'Literacy & Language'\nORDER BY donation_total DESC\nLIMIT 1",
    "3205": "SELECT item_name, SUM(item_quantity) AS total_quantity\nFROM resources\nWHERE projectid IN (\n    SELECT projectid\n    FROM projects\n    WHERE primary_focus_area = 'Literacy & Language'\n)\nAND project_resource_type = 'Supplies'\nGROUP BY item_name\nORDER BY total_quantity DESC\nLIMIT 1",
    "3206": "SELECT \n    item_name, \n    MAX(item_unit_price) AS highest_unit_price\nFROM \n    resources\nJOIN \n    projects ON resources.projectid = projects.projectid\nWHERE \n    primary_focus_area = 'Literacy & Language'",
    "3207": "SELECT AVG(d.donation_total) AS average_donation_amount\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE p.school_city = 'Brooklyn'",
    "3208": "SELECT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'",
    "3209": "SELECT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5' LIMIT 1;",
    "3210": "-- Given the structure of the tables provided, there is no direct information about the educational background of teachers, including whether they have acquired a Ph.D. or a doctoral degree. The tables focus on projects, donations, resources, and essays related to projects but do not include personal or educational details about the teachers. Therefore, it is not possible to answer the question about the teacher's educational background using the provided SQL schema and data.",
    "3211": "SELECT EXISTS(\n    SELECT 1 \n    FROM projects \n    WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973' \n    AND school_state = 'NY'\n) AS IsNewYorkTeacher;",
    "3212": "SELECT essays.title\nFROM essays\nJOIN projects ON essays.projectid = projects.projectid\nJOIN donations ON projects.projectid = donations.projectid\nWHERE projects.school_city = 'Abington';",
    "3213": "SELECT item_name\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE projects.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'",
    "3214": "SELECT COUNT(DISTINCT p.schoolid) AS public_magnet_schools_count\nFROM projects p\nJOIN donations d ON p.projectid = d.projectid\nWHERE d.payment_included_acct_credit = 'f'\nAND p.school_magnet = 't';",
    "3215": "SELECT r.project_resource_type\nFROM donations d\nJOIN resources r ON d.projectid = r.projectid\nWHERE d.donationid = 'b39547f29dfc25fb13c6e9e8d940dc43'",
    "3216": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN r.project_resource_type = 'Books' THEN p.projectid END) AS REAL) / COUNT(DISTINCT p.projectid)) * 100 AS percentage_of_books_donated\nFROM \n    projects p\nJOIN \n    resources r ON p.projectid = r.projectid\nWHERE \n    p.school_magnet = 't';",
    "3217": "SELECT COUNT(DISTINCT p.schoolid) AS public_magnet_schools_count\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE r.vendor_name = 'ABC School Supply' AND p.school_magnet = 't'",
    "3218": "SELECT COUNT(DISTINCT p.schoolid) AS high_poverty_schools\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE d.donor_acctid = '000eebf28658900e63b538cf8a73afbd'\nAND p.poverty_level = 'highest poverty';",
    "3219": "SELECT e.short_description\nFROM essays e\nJOIN projects p ON e.projectid = p.projectid\nJOIN donations d ON p.projectid = d.projectid\nWHERE p.schoolid = '301c9bf0a45d159d162b65a93fddd74e'",
    "3220": "SELECT school_city\nFROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'iMath'",
    "3221": "SELECT payment_method\nFROM donations\nWHERE projectid IN (\n    SELECT projectid\n    FROM projects\n    WHERE teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'\n)",
    "3222": "SELECT SUM(donation_total) AS total_donated\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'",
    "3223": "SELECT DISTINCT d.is_teacher_acct\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE p.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85' AND d.is_teacher_acct = 't';",
    "3224": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN school_city = 'Brooklyn' THEN p.schoolid END) AS REAL) / COUNT(DISTINCT p.schoolid)) * 100 AS percentage_of_schools_in_brooklyn\nFROM \n    projects p\nJOIN \n    donations d ON p.projectid = d.projectid\nWHERE \n    d.is_teacher_acct = 't'",
    "3225": "SELECT \n    ROUND(\n        (CAST(COUNT(DISTINCT CASE WHEN p.students_reached > 30 THEN p.projectid END) AS FLOAT) / \n        COUNT(DISTINCT p.projectid)) * 100, \n        2\n    ) AS percentage_of_projects_affecting_more_than_30_students\nFROM \n    projects p\nJOIN \n    donations d ON p.projectid = d.projectid\nWHERE \n    d.is_teacher_acct = 't'",
    "3226": "SELECT COUNT(DISTINCT schoolid) \nFROM projects \nWHERE school_city = 'Bethlehem' AND school_metro = 'suburban';",
    "3227": "SELECT COUNT(*) AS year_round_schools_in_LA\nFROM projects\nWHERE school_city = 'Los Angeles' AND school_year_round = 't';",
    "3228": "SELECT COUNT(*) AS number_of_public_magnet_schools_in_New_York_Manhattan\nFROM projects\nWHERE school_magnet = 't' AND school_county = 'New York(Manhattan)'",
    "3229": "SELECT COUNT(DISTINCT teacher_acctid) \nFROM projects \nWHERE school_county = 'Twin Falls' \nAND primary_focus_area = 'Math & Science';",
    "3230": "SELECT COUNT(DISTINCT teacher_acctid) \nFROM projects \nWHERE primary_focus_subject = 'Literature & Writing' \nAND teacher_prefix = 'Mr';",
    "3231": "SELECT COUNT(*) AS total_projects\nFROM projects\nWHERE grade_level = 'Grades 3-5'\nAND school_district = 'Boston Public School District';",
    "3232": "SELECT school_city\nFROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'ABC Read'",
    "3233": "SELECT teacher_prefix\nFROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Creating Memories and Inspiring Dreams'",
    "3234": "SELECT is_teacher_acct\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Calculate, Financial Security For Tomorrow Starts Today!'",
    "3235": "SELECT p.title\nFROM projects p\nJOIN donations d ON p.projectid = d.projectid\nWHERE d.donation_message = \"Donation on behalf of Matt Carpenter because I'm a strong believer in education\"",
    "3236": "SELECT COUNT(donationid) AS number_of_donations\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'A Rug For Reaching Readers'",
    "3237": "SELECT SUM(donation_to_project + donation_optional_support) AS total_donation_amount\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.title = 'Engaging Young Readers with a Leveled Classroom Library'",
    "3238": "SELECT donation_optional_support\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Armenian Genocide'",
    "3239": "SELECT e.short_description\nFROM essays e\nJOIN donations d ON e.projectid = d.projectid\nWHERE d.donation_timestamp = '2012-09-06 14:44:29'",
    "3240": "SELECT \n    p.title,\n    d.donation_optional_support\nFROM \n    projects p\nJOIN \n    donations d ON p.projectid = d.projectid\nWHERE \n    p.title = 'I Can\\'t See It...Can You Help Me???'\n    AND d.donation_optional_support > 0",
    "3241": "SELECT p.teacher_acctid\nFROM projects p\nJOIN donations d ON p.projectid = d.projectid\nWHERE d.donation_timestamp = '2008/7/29 11:38:43'",
    "3242": "SELECT schoolid FROM projects WHERE projectid IN (SELECT projectid FROM essays WHERE title = 'Virtual Aquarium Needs Help!');",
    "3243": "SELECT e.title\nFROM essays e\nJOIN projects p ON e.projectid = p.projectid\nJOIN donations d ON p.projectid = d.projectid\nORDER BY d.donation_total DESC\nLIMIT 1",
    "3244": "SELECT \n    (donation_optional_support / donation_total) * 100 AS tip_percentage\nFROM \n    donations\nJOIN \n    projects ON donations.projectid = projects.projectid\nWHERE \n    projects.title = 'Awesome Audiobooks Make Avid Readers'",
    "3245": "SELECT \n    (CAST(SUM(CASE WHEN payment_method = 'creditcard' THEN 1 ELSE 0 END) AS REAL) / COUNT(donationid)) * 100 AS percentage_paid_by_credit_card\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.title = 'Bringing Drama to Life'",
    "3246": "SELECT short_description FROM essays WHERE title = 'Future Einsteins Of America';",
    "3247": "SELECT need_statement FROM essays WHERE title = 'Family History Project'",
    "3248": "SELECT COUNT(DISTINCT school_metro) \nFROM projects \nWHERE school_district = 'Livingston Parish School District' \nAND school_metro = 'suburban';",
    "3249": "SELECT DISTINCT vendor_name\nFROM resources\nWHERE item_name = 'Classroom Keepers Management Center'",
    "3250": "SELECT DISTINCT project_resource_type \nFROM resources \nWHERE vendor_name = 'Sax Arts & Crafts'",
    "3251": "SELECT school_county, COUNT(*) AS low_poverty_count\nFROM projects\nWHERE school_state = 'NY' AND poverty_level = 'low poverty'\nGROUP BY school_county\nORDER BY low_poverty_count DESC\nLIMIT 1;",
    "3252": "SELECT school_district FROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title LIKE '%Future Einsteins Of America%'",
    "3253": "SELECT payment_method\nFROM donations\nJOIN essays ON donations.projectid = essays.projectid\nWHERE essays.title = 'Needed Resource Materials For My Students'",
    "3254": "SELECT COUNT(*) AS credit_card_donations_to_memphis_city_school_district\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE payment_method = 'creditcard'\nAND school_district = 'Memphis City School District'",
    "3255": "SELECT DISTINCT p.school_district\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE r.vendor_name = 'Barnes and Noble'",
    "3256": "SELECT school_latitude, school_longitude\nFROM projects\nJOIN resources ON projects.projectid = resources.projectid\nWHERE resources.item_name = 'R & A Plant Genetics'\nAND resources.vendor_name = 'Benchmark Education'",
    "3257": "SELECT payment_method, COUNT(payment_method) AS method_count\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE school_state = 'GA'\nGROUP BY payment_method\nORDER BY method_count DESC\nLIMIT 1;",
    "3258": "SELECT p.school_latitude, p.school_longitude, r.project_resource_type\nFROM projects p\nJOIN essays e ON p.projectid = e.projectid\nLEFT JOIN resources r ON p.projectid = r.projectid\nWHERE e.title = 'Look, Look, We Need a Nook!'",
    "3259": "SELECT d.donation_message\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE p.school_district = 'Newark School District'\nAND p.school_latitude = 40.735332\nAND p.school_longitude = -74.196014",
    "3260": "SELECT p.date_posted\nFROM projects p\nJOIN essays e ON p.projectid = e.projectid\nWHERE e.title = 'Lets Share Ideas'",
    "3261": "SELECT donations.donation_message\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Lets Share Ideas'\nAND donations.payment_method = 'credit card'",
    "3262": "SELECT project_resource_type, COUNT(project_resource_type) AS resource_count\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE projects.school_district = 'Los Angeles Unif Sch Dist'\nGROUP BY project_resource_type\nORDER BY resource_count DESC\nLIMIT 1",
    "3263": "SELECT DISTINCT p.school_city\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE p.school_district = 'Los Angeles Unified School District'\nAND r.vendor_name = 'Quill.com'",
    "3264": "SELECT \n    SUM(r.item_unit_price * r.item_quantity) AS total_price,\n    p.school_latitude || ', ' || p.school_longitude AS coordinates,\n    p.school_district\nFROM resources r\nJOIN projects p ON r.projectid = p.projectid\nWHERE r.vendor_name = 'ABC School Supply' AND r.project_resource_type = 'Other'\nGROUP BY r.projectid",
    "3265": "SELECT \n    p.school_city AS city, \n    p.poverty_level, \n    SUM(d.donation_total) AS total_amount_donated\nFROM \n    donations d\nJOIN \n    projects p ON d.projectid = p.projectid\nJOIN \n    essays e ON p.projectid = e.projectid\nWHERE \n    e.title = 'Lets Share Ideas' \n    AND d.payment_method = 'paypal'\nGROUP BY \n    p.school_city, p.poverty_level",
    "3266": "SELECT COUNT(DISTINCT donor_acctid) \nFROM donations \nWHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f'",
    "3267": "SELECT COUNT(DISTINCT schoolid) \nFROM projects \nWHERE school_county = 'Suffolk' AND teacher_prefix = 'Dr.'",
    "3268": "SELECT SUM(donation_to_project + donation_optional_support) AS total_donated_amazon\nFROM donations\nWHERE payment_method = 'Amazon'",
    "3269": "SELECT COUNT(*) \nFROM donations \nWHERE dollar_amount = '100_and_up' AND for_honoree = 't';",
    "3270": "SELECT vendorid, COUNT(*) AS non_technology_resources_under_15\nFROM resources\nWHERE item_unit_price <= 15 AND project_resource_type != 'technology'\nGROUP BY vendorid",
    "3271": "SELECT COUNT(DISTINCT r.projectid) \nFROM resources r\nJOIN projects p ON r.projectid = p.projectid\nWHERE r.vendor_name = 'Quill.com' AND r.item_quantity BETWEEN 5 AND 10;",
    "3272": "SELECT schoolid, projectid\nFROM projects\nWHERE school_district = 'Union Pub School District I-9' AND teacher_ny_teaching_fellow = 't'",
    "3273": "SELECT DISTINCT school_city\nFROM projects\nWHERE school_county = 'Los Angeles' AND school_metro = 'suburban'",
    "3274": "SELECT DISTINCT r.vendor_name, r.projectid\nFROM resources r\nJOIN projects p ON r.projectid = p.projectid\nWHERE r.project_resource_type = 'Books'",
    "3275": "SELECT \n    ROUND(\n        CAST(SUM(CASE WHEN payment_included_campaign_gift_card = 't' THEN 1 ELSE 0 END) AS REAL) / \n        COUNT(*) * 100, \n        2\n    ) AS percentage\nFROM donations\nWHERE payment_method = 'no_cash_received'",
    "3276": "SELECT \n    (CAST(SUM(CASE WHEN school_metro = 'suburban' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_suburban\nFROM \n    projects\nWHERE \n    school_city = 'Santa Barbara';",
    "3277": "SELECT \n    payment_method, \n    ROUND((COUNT(payment_method) * 100.0) / (SELECT COUNT(*) FROM donations WHERE substr(donation_timestamp,1,7) = '2013-03'), 2) AS percentage\nFROM donations\nWHERE substr(donation_timestamp,1,7) = '2013-03'\nGROUP BY payment_method",
    "3278": "SELECT AVG(item_unit_price) AS average_unit_price_of_AKJ_Books_items\nFROM resources\nWHERE vendor_name = 'AKJ Books'",
    "3279": "SELECT COUNT(DISTINCT projects.schoolid) AS schools_in_brooklyn_with_urban_metro_and_donations_for_honoree_requested_TT992\nFROM projects\nJOIN resources ON projects.projectid = resources.projectid\nJOIN donations ON projects.projectid = donations.projectid\nWHERE projects.school_city = 'Brooklyn'\nAND projects.school_metro = 'urban'\nAND donations.for_honoree = 't'\nAND resources.item_name = 'TT992 - Refill Pack for Safety Name Tags'",
    "3280": "SELECT COUNT(DISTINCT p.schoolid) AS schools_with_highest_poverty_and_corporate_gift_card\nFROM projects p\nJOIN donations d ON p.projectid = d.projectid\nWHERE p.poverty_level = 'highest' AND d.payment_included_campaign_gift_card = 't'",
    "3281": "SELECT school_city, COUNT(DISTINCT schoolid) AS num_schools\nFROM projects\nJOIN donations ON projects.projectid = donations.projectid\nWHERE dollar_amount = 'under_10'\nGROUP BY school_city\nORDER BY num_schools DESC\nLIMIT 1",
    "3282": "SELECT e.title\nFROM essays e\nJOIN projects p ON e.projectid = p.projectid\nWHERE p.school_latitude = 42003718 AND p.school_longitude = -87668289",
    "3283": "SELECT \n    CASE \n        WHEN EXISTS (\n            SELECT 1 \n            FROM essays \n            JOIN projects ON essays.projectid = projects.projectid \n            WHERE essays.title = 'Team More Books!' \n            AND projects.teacher_ny_teaching_fellow = 't'\n        ) \n        THEN 'Yes' \n        ELSE 'No' \n    END AS has_ny_teaching_fellow",
    "3284": "SELECT DISTINCT vendor_name\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE projects.primary_focus_area = 'Literature'",
    "3285": "SELECT DISTINCT vendor_name\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE grade_level = 'Grades 9-12'",
    "3286": "SELECT COUNT(DISTINCT donor_acctid) AS teachers_donated\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.school_city = 'Chicago' AND donations.is_teacher_acct = 't'",
    "3287": "SELECT COUNT(DISTINCT projects.projectid) AS Rock_Hill_Teacher_Donor_Projects\nFROM projects\nJOIN donations ON projects.projectid = donations.projectid\nWHERE projects.school_city = 'Rock Hill' AND donations.is_teacher_acct = 't'",
    "3288": "SELECT SUM(d.donation_total) AS total_sum_of_donations_with_optional_support\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE d.donation_included_optional_support = 't'\nAND p.students_reached > 300",
    "3289": "SELECT SUM(item_quantity) AS total_items_requested\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nWHERE projects.school_district = 'Onslow Co School District' AND projects.school_metro = 'urban'",
    "3290": "SELECT AVG(donation_total) AS average_total_donations\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE projects.school_county = 'Fresno'",
    "3291": "SELECT \n    (COUNT(DISTINCT CASE WHEN e.title = 'ABC Read' THEN p.school_county END) * 1.0 / COUNT(DISTINCT p.school_county)) * 100 AS percentage_of_counties_with_ABC_Read\nFROM \n    projects p\nLEFT JOIN \n    essays e ON p.projectid = e.projectid",
    "3292": "SELECT AVG(item_quantity) AS average_resources_per_honoree_project\nFROM (\n    SELECT d.projectid, SUM(r.item_quantity) AS item_quantity\n    FROM donations d\n    JOIN resources r ON d.projectid = r.projectid\n    WHERE d.for_honoree = 't'\n    GROUP BY d.projectid\n)",
    "3293": "SELECT date_posted \nFROM projects \nJOIN essays ON projects.projectid = essays.projectid \nWHERE essays.title = 'Photojournalists Want to Exhibit Their Best Works';",
    "3294": "SELECT \n    item_name, \n    MAX(item_unit_price) AS most_expensive_price\nFROM \n    resources\nJOIN \n    projects ON resources.projectid = projects.projectid\nWHERE \n    primary_focus_subject = 'Mathematics'",
    "3295": "SELECT p.school_latitude, p.school_longitude\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE r.item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'",
    "3296": "SELECT COUNT(donationid) AS number_of_donations\nFROM donations\nJOIN essays ON donations.projectid = essays.projectid\nWHERE essays.title = 'Look, Look, We Need a Nook!'",
    "3297": "SELECT DISTINCT p.poverty_level\nFROM projects p\nJOIN donations d ON p.projectid = d.projectid\nWHERE d.donor_zip = '7079'",
    "3298": "SELECT vendor_name\nFROM resources\nJOIN projects ON resources.projectid = projects.projectid\nJOIN essays ON projects.projectid = essays.projectid\nWHERE essays.title = 'Bloody Times'",
    "3299": "SELECT r.item_name, p.school_zip\nFROM resources r\nJOIN projects p ON r.projectid = p.projectid\nWHERE r.vendor_name = 'Sax Arts & Crafts'",
    "3300": "SELECT school_longitude, school_latitude\nFROM projects\nWHERE title = 'Wiping Away Bad Grades'",
    "3301": "SELECT DISTINCT p.primary_focus_subject\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE d.payment_included_campaign_gift_card = 't'",
    "3302": "SELECT p.projectid, p.title, p.short_description, MAX(r.item_unit_price) AS most_expensive_book_price\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE r.project_resource_type = 'Books'\nGROUP BY p.projectid, p.title, p.short_description\nORDER BY most_expensive_book_price DESC\nLIMIT 1;",
    "3303": "SELECT grade_level\nFROM projects\nJOIN essays ON projects.projectid = essays.projectid\nWHERE title = 'Too Close for Comfort'",
    "3304": "SELECT SUM(students_reached) AS total_students_impacted\nFROM projects\nWHERE projectid IN (\n    SELECT projectid\n    FROM donations\n    WHERE donor_zip = '22205'\n)",
    "3305": "SELECT \n    primary_focus_area,\n    ROUND(\n        CAST(SUM(CASE WHEN via_giving_page = 't' THEN 1 ELSE 0 END) AS REAL) / \n        CAST(COUNT(donationid) AS REAL) * 100, \n        2\n    ) AS percentage_via_giving_page\nFROM \n    donations\nJOIN \n    projects ON donations.projectid = projects.projectid\nGROUP BY \n    primary_focus_area",
    "3306": "SELECT \n    p.date_posted,\n    ROUND(\n        (CAST(COUNT(CASE WHEN r.vendor_name = 'Best Buy for Business' THEN 1 END) AS REAL) / COUNT(r.projectid)) * 100,\n        2\n    ) AS percentage\nFROM \n    resources r\nJOIN \n    projects p ON r.projectid = p.projectid\nWHERE \n    r.project_resource_type = 'Technology'\nGROUP BY \n    p.date_posted",
    "3307": "SELECT \n    (SELECT COALESCE(SUM(num_sales), 0) FROM region_sales WHERE game_platform_id = 50 AND region_id = 1) - \n    (SELECT COALESCE(SUM(num_sales), 0) FROM region_sales WHERE game_platform_id = 51 AND region_id = 1) AS difference_in_sales",
    "3308": "SELECT g.game_name\nFROM game g\nJOIN genre ge ON g.genre_id = ge.id\nWHERE ge.id = (SELECT genre_id FROM game WHERE game_name = '3D Lemmings')",
    "3309": "SELECT COUNT(DISTINCT game.id) AS total_action_games\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Action'",
    "3310": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = '3D Lemmings'",
    "3311": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.game_name = '3D Lemmings'",
    "3312": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = '10TACLE Studios'",
    "3313": "SELECT COUNT(DISTINCT g.id) AS puzzle_games_count\nFROM game g\nJOIN genre ge ON g.genre_id = ge.id\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = '10TACLE Studios' AND ge.genre_name = 'Puzzle'",
    "3314": "SELECT g.game_name\nFROM game g\nJOIN genre ge ON g.genre_id = ge.id\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = '10TACLE Studios' AND ge.genre_name = 'Puzzle'",
    "3315": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nGROUP BY publisher.id\nORDER BY COUNT(game_publisher.game_id) DESC\nLIMIT 1",
    "3316": "SELECT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN game g ON gpub.game_id = g.id\nWHERE g.game_name = 'Panzer Tactics' AND gp.release_year = 2007",
    "3317": "SELECT gp.release_year\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game AS g ON gpub.game_id = g.id\nJOIN platform AS p ON gp.platform_id = p.id\nWHERE g.game_name = 'Panzer Tactics' AND p.platform_name = 'DS'",
    "3318": "SELECT DISTINCT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Puzzle'",
    "3319": "SELECT publisher_name\nFROM publisher\nWHERE id IN (\n    SELECT publisher_id\n    FROM game_publisher\n    WHERE game_id IN (\n        SELECT id\n        FROM game\n        WHERE genre_id = (\n            SELECT id\n            FROM genre\n            WHERE genre_name = 'Puzzle'\n        )\n    )\n    GROUP BY publisher_id\n    ORDER BY COUNT(game_id) DESC\n    LIMIT 1\n)",
    "3320": "SELECT COUNT(DISTINCT gp.publisher_id) AS publishers_count\nFROM game_publisher AS gp\nJOIN game AS g ON gp.game_id = g.id\nJOIN genre AS ge ON g.genre_id = ge.id\nWHERE ge.genre_name = 'Puzzle'\nGROUP BY gp.publisher_id\nHAVING COUNT(gp.game_id) > 3",
    "3321": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN g.genre_id = sg.id THEN g.id END) AS FLOAT) / COUNT(DISTINCT g.id)) * 100 AS percentage_sports\nFROM \n    game g\nJOIN \n    game_publisher gp ON g.id = gp.game_id\nJOIN \n    publisher p ON gp.publisher_id = p.id\nJOIN \n    genre sg ON g.genre_id = sg.id\nWHERE \n    p.publisher_name = 'Nintendo' AND sg.genre_name = 'Sports'",
    "3322": "SELECT SUM(num_sales) / 4 AS average_games_sold\nFROM region_sales\nJOIN game_platform ON region_sales.game_platform_id = game_platform.id\nJOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id\nJOIN game ON game_publisher.game_id = game.id\nJOIN platform ON game_platform.platform_id = platform.id\nWHERE platform.platform_name = 'DS'",
    "3323": "SELECT COUNT(DISTINCT game_id) AS number_of_games\nFROM game_publisher\nWHERE publisher_id = 352",
    "3324": "SELECT genre_id FROM game WHERE game_name = 'Pro Evolution Soccer 2012'",
    "3325": "SELECT id FROM region WHERE region_name = 'Japan'",
    "3326": "SELECT game_platform_id\nFROM region_sales\nWHERE region_id = 2\nORDER BY num_sales DESC\nLIMIT 1",
    "3327": "SELECT genre_id\nFROM game\nGROUP BY genre_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "3328": "SELECT id FROM game WHERE game_name = 'Resident Evil Archives: Resident Evil'",
    "3329": "SELECT COUNT(DISTINCT gp.game_id) AS num_games_released\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN platform AS p ON gp.platform_id = p.id\nWHERE p.platform_name = 'X360' AND gp.release_year = 2010",
    "3330": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.game_name = 'ModNation Racers'",
    "3331": "SELECT game_platform_id\nFROM region_sales\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'Japan'\nORDER BY num_sales DESC\nLIMIT 1",
    "3332": "SELECT COUNT(DISTINCT gp.platform_id) AS num_platforms\nFROM game g\nJOIN game_publisher gpublisher ON g.id = gpublisher.game_id\nJOIN game_platform gp ON gpublisher.id = gp.game_publisher_id\nWHERE g.game_name = 'Pro Evolution Soccer 2016'",
    "3333": "SELECT COUNT(*) AS sports_games_count\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Sports'",
    "3334": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.id = 10031",
    "3335": "SELECT p.publisher_name, COUNT(gp.game_id) AS num_games\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nGROUP BY p.id\nORDER BY num_games DESC\nLIMIT 1;",
    "3336": "SELECT\n  (SELECT SUM(game.id) FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'Sports') -\n  (SELECT SUM(game.id) FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'Simulation') AS difference",
    "3337": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = 'Resident Evil: Revelations'",
    "3338": "SELECT (num_sales * 100000) AS total_sales_in_europe\nFROM region_sales\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'Europe' AND region_sales.game_platform_id = 3871",
    "3339": "SELECT COUNT(DISTINCT game.id) AS num_games_published_by_ascaron\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Ascaron Entertainment GmbH'",
    "3340": "SELECT platform_name \nFROM platform \nJOIN game_platform ON platform.id = game_platform.platform_id \nORDER BY release_year ASC \nLIMIT 1",
    "3341": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN g.genre_id = ag.id THEN g.id END) AS FLOAT) / COUNT(DISTINCT g.id)) * 100 AS percentage_adventure_games\nFROM \n    game g\nJOIN \n    game_publisher gp ON g.id = gp.game_id\nJOIN \n    publisher p ON gp.publisher_id = p.id\nJOIN \n    genre ag ON g.genre_id = ag.id\nWHERE \n    p.publisher_name = 'Namco Bandai Games' AND ag.genre_name = 'Adventure'",
    "3342": "SELECT \n    (SELECT COUNT(DISTINCT g.id) \n     FROM game g \n     JOIN game_publisher gp ON g.id = gp.game_id \n     JOIN publisher p ON gp.publisher_id = p.id \n     WHERE p.publisher_name = 'Atari') \n    /\n    (SELECT COUNT(DISTINCT g.id) \n     FROM game g \n     JOIN game_publisher gp ON g.id = gp.game_id \n     JOIN publisher p ON gp.publisher_id = p.id \n     WHERE p.publisher_name = 'Athena') AS times_more",
    "3343": "SELECT COUNT(DISTINCT game_id) AS num_games_published\nFROM game_publisher\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Electronic Arts'",
    "3344": "SELECT genre.genre_name\nFROM genre\nJOIN game ON game.genre_id = genre.id\nWHERE game.game_name = 'Advent Rising'",
    "3345": "SELECT COUNT(DISTINCT g.id) AS total_role_playing_games_published\nFROM game g\nJOIN genre ge ON g.genre_id = ge.id\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE ge.genre_name = 'Role-Playing' AND p.publisher_name = 'Microsoft Game Studios'",
    "3346": "SELECT publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nGROUP BY publisher.id\nORDER BY COUNT(game_publisher.game_id) DESC\nLIMIT 1",
    "3347": "SELECT DISTINCT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN publisher pub ON gpub.publisher_id = pub.id\nWHERE pub.publisher_name = 'Codemasters' AND gp.release_year = 2004",
    "3348": "SELECT COUNT(DISTINCT gp.game_id) AS total_games\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN platform AS p ON gp.platform_id = p.id\nWHERE p.platform_name = 'PS4' AND gp.release_year = 2014",
    "3349": "SELECT DISTINCT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nWHERE gpl.release_year = (\n    SELECT MIN(release_year)\n    FROM game_platform\n)",
    "3350": "SELECT COUNT(DISTINCT gp.publisher_id) AS publishers_in_japan\nFROM game_publisher AS gp\nJOIN game_platform AS gpl ON gp.id = gpl.game_publisher_id\nJOIN platform AS p ON gpl.platform_id = p.id\nJOIN game AS g ON gp.game_id = g.id\nJOIN region_sales AS rs ON gpl.id = rs.game_platform_id\nJOIN region AS r ON rs.region_id = r.id\nWHERE p.platform_name = 'X360'\nAND gpl.release_year = 2011\nAND r.region_name = 'Japan'",
    "3351": "SELECT gp.id AS game_platform_id\nFROM region_sales rs\nJOIN game_platform gp ON rs.game_platform_id = gp.id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'Europe'\nORDER BY rs.num_sales DESC\nLIMIT 1",
    "3352": "SELECT gp.release_year, COUNT(gp.game_publisher_id) AS num_releases\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN platform AS p ON gp.platform_id = p.id\nWHERE p.platform_name = 'PC'\nGROUP BY gp.release_year\nORDER BY num_releases DESC\nLIMIT 1;",
    "3353": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nGROUP BY p.id\nHAVING COUNT(DISTINCT gp.game_id) = 1",
    "3354": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = '505 Games'",
    "3355": "SELECT genre_id FROM game WHERE game_name = '25 to Life'",
    "3356": "SELECT id FROM game WHERE genre_id = 2;",
    "3357": "SELECT gp.id AS game_id, gp.release_year\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game ON gpub.game_id = game.id\nWHERE game.id BETWEEN 1 AND 10",
    "3358": "SELECT DISTINCT gp.id AS game_publisher_id\nFROM game_platform AS gp\nWHERE gp.platform_id = 15",
    "3359": "SELECT gp.id\nFROM game_platform AS gp\nWHERE gp.release_year BETWEEN 2000 AND 2003",
    "3360": "SELECT num_sales * 100000 AS number_of_sales\nFROM region_sales\nWHERE region_id = 2 AND game_platform_id = 9615",
    "3361": "SELECT DISTINCT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nWHERE gp.release_year = 2016",
    "3362": "SELECT gp.release_year\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game ON gpub.game_id = game.id\nWHERE game.game_name = '3DS Classic Collection'",
    "3363": "SELECT AVG(num_sales) * 100000 AS average_sales_in_japan\nFROM region_sales\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'Japan'",
    "3364": "SELECT DISTINCT genre.genre_name\nFROM genre\nJOIN game ON game.genre_id = genre.id\nJOIN game_publisher ON game_publisher.game_id = game.id\nJOIN game_platform ON game_platform.game_publisher_id = game_publisher.id\nWHERE game_platform.release_year BETWEEN 2000 AND 2002",
    "3365": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = '3DO'",
    "3366": "SELECT COUNT(DISTINCT game.id) AS role_playing_game_count\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Role-Playing'",
    "3367": "SELECT DISTINCT region.region_name\nFROM region\nJOIN region_sales ON region.id = region_sales.region_id\nWHERE region_sales.num_sales > 3",
    "3368": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'North America'\nORDER BY rs.num_sales DESC\nLIMIT 1",
    "3369": "SELECT gp.release_year\nFROM region_sales rs\nJOIN game_platform gp ON rs.game_platform_id = gp.id\nJOIN region r ON rs.region_id = r.id\nWHERE rs.num_sales = 3.5 AND r.region_name = 'North America'",
    "3370": "SELECT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN game g ON gpub.game_id = g.id\nWHERE g.game_name = '15 Days'",
    "3371": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.id = 75",
    "3372": "SELECT g.game_name AS title\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'Japan'\nORDER BY rs.num_sales DESC\nLIMIT 1",
    "3373": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'Japan'\nAND rs.num_sales > (\n    SELECT 0.9 * AVG(rs2.num_sales)\n    FROM region_sales rs2\n    JOIN game_platform gpl2 ON rs2.game_platform_id = gpl2.id\n    JOIN region r2 ON rs2.region_id = r2.id\n    WHERE r2.region_name = 'Japan'\n)",
    "3374": "SELECT \n    (CAST(SUM(CASE WHEN p.platform_name = 'PSP' THEN 1 ELSE 0 END) AS REAL) / COUNT(gp.id)) * 100 AS percentage_of_games_on_psp\nFROM \n    game_platform AS gp\nJOIN \n    platform AS p ON gp.platform_id = p.id\nWHERE \n    gp.release_year = 2004;",
    "3375": "SELECT COUNT(DISTINCT game_id) AS games_released_in_1981\nFROM game_platform\nJOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id\nWHERE release_year = 1981;",
    "3376": "SELECT g.genre_id\nFROM game g\nWHERE g.game_name = '2Xtreme'",
    "3377": "SELECT SUM(num_sales) * 100000 AS total_game_sales\nFROM region_sales\nWHERE game_platform_id = 9658",
    "3378": "SELECT id FROM publisher WHERE publisher_name = '1C Company'",
    "3379": "SELECT genre_name FROM genre WHERE id = 3;",
    "3380": "SELECT DISTINCT game.id AS game_id\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id\nWHERE game_platform.release_year = 2017",
    "3381": "SELECT gp.release_year\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game ON gpub.game_id = game.id\nWHERE game.game_name = 'Adventure Island'",
    "3382": "SELECT COUNT(DISTINCT game.id) AS puzzle_genre_games\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Puzzle'",
    "3383": "SELECT DISTINCT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN platform p ON gpl.platform_id = p.id\nWHERE p.platform_name = 'SCD'",
    "3384": "SELECT COUNT(DISTINCT game.id) AS num_games_published_by_acclaim\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Acclaim Entertainment'",
    "3385": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game g ON gp.game_id = g.id\nWHERE g.game_name = 'Chronicles of the Sword'",
    "3386": "SELECT SUM(region_sales.num_sales * 100000) AS total_games_sold\nFROM region_sales\nJOIN game_platform ON region_sales.game_platform_id = game_platform.id\nJOIN platform ON game_platform.platform_id = platform.id\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'North America' AND platform.platform_name = 'PS4'",
    "3387": "SELECT gp.platform_id\nFROM game_platform AS gp\nJOIN region_sales AS rs ON gp.id = rs.game_platform_id\nJOIN region AS r ON rs.region_id = r.id\nWHERE r.region_name = 'Europe'\nORDER BY rs.num_sales DESC\nLIMIT 1",
    "3388": "SELECT game.game_name\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id\nWHERE game_platform.release_year = 2011",
    "3389": "SELECT COUNT(DISTINCT game.id) AS num_games_on_wii\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id\nJOIN platform ON game_platform.platform_id = platform.id\nWHERE platform.platform_name = 'Wii'",
    "3390": "SELECT g.game_name, gp.release_year\nFROM game g\nJOIN genre ge ON g.genre_id = ge.id\nJOIN game_publisher gpublisher ON g.id = gpublisher.game_id\nJOIN game_platform gp ON gpublisher.id = gp.game_publisher_id\nWHERE ge.genre_name = 'Sports'\nLIMIT 5",
    "3391": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = '2Xtreme'",
    "3392": "SELECT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN game g ON gpub.game_id = g.id\nWHERE g.game_name = 'Panzer Tactics'",
    "3393": "SELECT \n    ((NA_sales.num_sales - AVG_sales.avg_num_sales) / AVG_sales.avg_num_sales) * 100 AS percent_higher_than_avg\nFROM \n    (SELECT num_sales \n     FROM region_sales \n     JOIN region ON region_sales.region_id = region.id \n     WHERE region_name = 'North America' AND game_platform_id = 9577) AS NA_sales,\n    (SELECT AVG(num_sales) AS avg_num_sales \n     FROM region_sales \n     WHERE game_platform_id = 9577) AS AVG_sales",
    "3394": "SELECT game_name \nFROM game \nORDER BY LENGTH(game_name) DESC \nLIMIT 1",
    "3395": "SELECT COUNT(DISTINCT game_id) AS games_released_in_2001\nFROM game_platform\nJOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id\nWHERE release_year = 2001;",
    "3396": "SELECT SUM(num_sales) AS total_sales\nFROM region_sales",
    "3397": "SELECT AVG(game_count) AS average_games_per_publisher\nFROM (\n    SELECT publisher_id, COUNT(game_id) AS game_count\n    FROM game_publisher\n    GROUP BY publisher_id\n)",
    "3398": "SELECT MIN(release_year) AS first_year_released\nFROM game_platform",
    "3399": "SELECT genre_name\nFROM genre\nWHERE id = (\n    SELECT genre_id\n    FROM game\n    GROUP BY genre_id\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n)",
    "3400": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.game_name = 'Prism: Light the Way'",
    "3401": "WITH YearlyGameReleases AS (\n    SELECT \n        gp.release_year, \n        gp.platform_id, \n        COUNT(gp.game_publisher_id) AS total_games\n    FROM game_platform AS gp\n    GROUP BY gp.release_year, gp.platform_id\n),\nMaxGamesPerYear AS (\n    SELECT \n        release_year, \n        MAX(total_games) AS max_games\n    FROM YearlyGameReleases\n    GROUP BY release_year\n)\nSELECT \n    y.release_year, \n    p.platform_name, \n    y.total_games\nFROM YearlyGameReleases AS y\nJOIN MaxGamesPerYear AS m ON y.release_year = m.release_year AND y.total_games = m.max_games\nJOIN platform AS p ON y.platform_id = p.id\nORDER BY y.release_year ASC, y.total_games DESC",
    "3402": "SELECT COUNT(DISTINCT g.id) AS games_without_sales_in_europe\nFROM game g\nLEFT JOIN game_publisher gp ON g.id = gp.game_id\nLEFT JOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nLEFT JOIN region_sales rs ON gpl.id = rs.game_platform_id\nLEFT JOIN region r ON rs.region_id = r.id AND r.region_name = 'Europe'\nWHERE rs.num_sales IS NULL OR rs.num_sales = 0",
    "3403": "SELECT DISTINCT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nWHERE gpl.release_year = 2006",
    "3404": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = 'Mario vs. Donkey Kong'",
    "3405": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nGROUP BY publisher.publisher_name\nORDER BY COUNT(game_publisher.game_id) DESC\nLIMIT 1",
    "3406": "SELECT game.game_name\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Platform'",
    "3407": "SELECT DISTINCT gp.release_year\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game AS g ON gpub.game_id = g.id\nJOIN platform AS p ON gp.platform_id = p.id\nWHERE p.platform_name = 'WiiU'\nORDER BY gp.release_year",
    "3408": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'Japan'\nORDER BY rs.num_sales DESC\nLIMIT 1",
    "3409": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = 'Activision'",
    "3410": "SELECT COUNT(DISTINCT publisher_id) AS num_publishers\nFROM game_publisher\nWHERE game_id IN (\n    SELECT id FROM game WHERE game_name LIKE 'Marvel%'\n)",
    "3411": "SELECT \n    (COUNT(DISTINCT CASE WHEN g.genre_id = ge.id AND ge.genre_name = 'sport' THEN g.id END) * 100.0 / COUNT(DISTINCT g.id)) AS percentage_of_sports_games\nFROM \n    game g\nLEFT JOIN \n    genre ge ON g.genre_id = ge.id;",
    "3412": "SELECT \n    SUM(CASE WHEN r.region_name = 'North America' THEN rs.num_sales ELSE 0 END) / \n    SUM(CASE WHEN r.region_name = 'Japan' THEN rs.num_sales ELSE 0 END) AS sales_ratio\nFROM \n    region_sales rs\nJOIN \n    region r ON rs.region_id = r.id",
    "3413": "SELECT release_year\nFROM game_platform\nGROUP BY release_year\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "3414": "SELECT COUNT(*) AS InteractivePublishers\nFROM publisher\nWHERE publisher_name LIKE '%Interactive%'",
    "3415": "SELECT p.platform_name, SUM(rs.num_sales) AS total_sales\nFROM region_sales rs\nJOIN game_platform gp ON rs.game_platform_id = gp.id\nJOIN platform p ON gp.platform_id = p.id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'North America'\nGROUP BY p.platform_name\nORDER BY total_sales DESC\nLIMIT 2",
    "3416": "SELECT COUNT(DISTINCT gp.game_id) AS games_released\nFROM game_publisher AS gp\nJOIN publisher AS p ON gp.publisher_id = p.id\nJOIN game_platform AS gpl ON gp.id = gpl.game_publisher_id\nWHERE p.publisher_name = 'BMG Interactive Entertainment' AND gpl.release_year = 2012",
    "3417": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nWHERE gpl.release_year = 2007\nGROUP BY p.publisher_name\nORDER BY COUNT(gp.game_id) DESC\nLIMIT 1",
    "3418": "SELECT COUNT(DISTINCT publisher_id) AS number_of_publishers\nFROM game_publisher\nWHERE game_id = (SELECT id FROM game WHERE game_name = 'Minecraft')",
    "3419": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game g ON gp.game_id = g.id\nJOIN genre gr ON g.genre_id = gr.id\nWHERE gr.genre_name = 'Action'\nGROUP BY p.publisher_name\nORDER BY COUNT(g.id) DESC\nLIMIT 1",
    "3420": "SELECT COUNT(DISTINCT game.id) AS NumberOfSportsGamesPublishedByNintendo\nFROM game\nJOIN genre ON game.genre_id = genre.id\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE genre.genre_name = 'Sports' AND publisher.publisher_name = 'Nintendo'",
    "3421": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!'",
    "3422": "SELECT COUNT(*) AS positive_sales_in_other_regions\nFROM region_sales\nJOIN game_platform ON region_sales.game_platform_id = game_platform.id\nJOIN platform ON game_platform.platform_id = platform.id\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'Other'\nAND platform.platform_name = 'DS'\nAND region_sales.num_sales > 0",
    "3423": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = 'American Softworks'",
    "3424": "SELECT COUNT(DISTINCT game.id) AS strategy_games_count\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Strategy';",
    "3425": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.game_name = 'Overwatch'",
    "3426": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nGROUP BY genre.genre_name\nORDER BY COUNT(game.id) DESC\nLIMIT 1",
    "3427": "SELECT SUM(num_sales * 100000) AS total_games_sold_in_europe\nFROM region_sales\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'Europe' AND region_sales.game_platform_id = 26;",
    "3428": "SELECT COUNT(DISTINCT game.id) AS games_released_in_2001\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id\nWHERE game_platform.release_year = 2001;",
    "3429": "SELECT COUNT(*) FROM game WHERE game_name LIKE '%Box%'",
    "3430": "SELECT g.game_name, SUM(rs.num_sales) AS total_sales\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nGROUP BY g.game_name\nORDER BY total_sales DESC\nLIMIT 3",
    "3431": "SELECT MIN(release_year) AS first_game_release_year\nFROM game_platform",
    "3432": "SELECT publisher_name FROM publisher WHERE publisher_name LIKE '%Entertainment%'",
    "3433": "SELECT game.game_name\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Adventure'",
    "3434": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = 'Pioneer LDC'",
    "3435": "SELECT DISTINCT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN platform p ON gpl.platform_id = p.id\nWHERE p.platform_name = 'SCD'",
    "3436": "SELECT DISTINCT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'Japan'",
    "3437": "SELECT DISTINCT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Agatsuma Entertainment'",
    "3438": "SELECT COUNT(DISTINCT game.id) AS games_not_in_specified_genres\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation');",
    "3439": "WITH TotalSales AS (\n    SELECT \n        r.region_name,\n        p.platform_name,\n        SUM(rs.num_sales) AS total_sales\n    FROM region_sales rs\n    INNER JOIN game_platform gp ON rs.game_platform_id = gp.id\n    INNER JOIN platform p ON gp.platform_id = p.id\n    INNER JOIN region r ON rs.region_id = r.id\n    GROUP BY r.region_name, p.platform_name\n),\nMaxSales AS (\n    SELECT \n        region_name,\n        MAX(total_sales) AS max_sales\n    FROM TotalSales\n    GROUP BY region_name\n)\nSELECT \n    ts.region_name,\n    ts.platform_name,\n    ts.total_sales\nFROM TotalSales ts\nINNER JOIN MaxSales ms ON ts.region_name = ms.region_name AND ts.total_sales = ms.max_sales\nORDER BY ts.region_name, ts.total_sales DESC",
    "3440": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game g ON gp.game_id = g.id\nJOIN genre gr ON g.genre_id = gr.id\nWHERE gr.genre_name = 'Puzzle'\nGROUP BY p.publisher_name\nORDER BY COUNT(g.id) DESC\nLIMIT 1",
    "3441": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nGROUP BY g.game_name\nORDER BY SUM(rs.num_sales) ASC\nLIMIT 1",
    "3442": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game g ON gp.game_id = g.id\nWHERE g.game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'",
    "3443": "SELECT r.region_name\nFROM region r\nJOIN region_sales rs ON r.id = rs.region_id\nJOIN game_platform gp ON rs.game_platform_id = gp.id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN game g ON gpub.game_id = g.id\nWHERE g.game_name = 'Pengo'",
    "3444": "SELECT DISTINCT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nWHERE gpl.release_year = 2010",
    "3445": "SELECT AVG(num_sales) * 100000 AS average_sales\nFROM region_sales\nJOIN game_platform ON region_sales.game_platform_id = game_platform.id\nJOIN platform ON game_platform.platform_id = platform.id\nWHERE platform.platform_name = 'PS2'",
    "3446": "SELECT \n    (COUNT(DISTINCT gp.game_id) * 100.0) / (SELECT COUNT(*) FROM game) AS percentage\nFROM \n    game_publisher AS gp\nJOIN \n    publisher AS p ON gp.publisher_id = p.id\nWHERE \n    p.publisher_name = 'Brash Entertainment';",
    "3447": "SELECT SUM(num_sales) * 100000 AS total_games_sold_in_region_1\nFROM region_sales\nWHERE region_id = 1;",
    "3448": "SELECT COUNT(DISTINCT game.id) AS total_fifa_games\nFROM game\nWHERE game_name LIKE '%FIFA%';",
    "3449": "SELECT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN region_sales rs ON gp.id = rs.game_platform_id\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'Europe'\nGROUP BY p.platform_name\nORDER BY SUM(rs.num_sales) DESC\nLIMIT 1;",
    "3450": "SELECT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game g ON gp.game_id = g.id\nWHERE g.game_name = '2002 FIFA World Cup'",
    "3451": "SELECT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN game g ON gpub.game_id = g.id\nWHERE g.game_name = '3Xtreme'",
    "3452": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = '2010 FIFA World Cup South Africa'",
    "3453": "SELECT r.region_name\nFROM region_sales rs\nJOIN region r ON rs.region_id = r.id\nGROUP BY rs.region_id\nORDER BY SUM(rs.num_sales) DESC\nLIMIT 1",
    "3454": "SELECT SUM(num_sales) * 100000 AS total_games_sold\nFROM region_sales\nJOIN game_platform ON region_sales.game_platform_id = game_platform.id\nJOIN platform ON game_platform.platform_id = platform.id\nJOIN region ON region_sales.region_id = region.id\nWHERE platform.platform_name = 'PS3' AND region.region_name = 'Japan';",
    "3455": "SELECT DISTINCT game.game_name\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id\nWHERE game_platform.release_year = 2007",
    "3456": "SELECT COUNT(DISTINCT game_id) AS games_published_by_activision\nFROM game_publisher\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Activision'",
    "3457": "SELECT gp.release_year\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game AS g ON gpub.game_id = g.id\nJOIN region_sales AS rs ON gp.id = rs.game_platform_id\nJOIN region AS r ON rs.region_id = r.id\nWHERE r.region_name = 'Japan'\nGROUP BY gp.id\nHAVING SUM(rs.num_sales) > 200000",
    "3458": "SELECT COUNT(DISTINCT gp.game_publisher_id) AS num_ps3_games_released\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN platform AS p ON gp.platform_id = p.id\nWHERE gp.release_year = 2010 AND p.platform_name = 'PS3'",
    "3459": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nGROUP BY publisher.publisher_name\nORDER BY COUNT(game_publisher.game_id) DESC\nLIMIT 1",
    "3460": "SELECT COUNT(DISTINCT game.id) AS shooter_games_count\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'shooter';",
    "3461": "SELECT \n    (CAST(SUM(CASE WHEN p.platform_name = 'PS4' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT gp.game_publisher_id)) * 100 AS percentage_ps4_2014\nFROM \n    game_platform gp\nJOIN \n    platform p ON gp.platform_id = p.id\nWHERE \n    gp.release_year = 2014;",
    "3462": "SELECT SUM(num_sales) AS total_sales\nFROM region_sales\nWHERE region_id = 4;",
    "3463": "SELECT DISTINCT gp.id AS game_platform_id\nFROM game_platform gp\nJOIN region_sales rs ON gp.id = rs.game_platform_id\nWHERE rs.region_id = 1;",
    "3464": "SELECT\n    (SELECT SUM(num_sales) FROM region_sales WHERE region_id = 2) -\n    (SELECT SUM(num_sales) FROM region_sales WHERE region_id = 3) AS difference",
    "3465": "SELECT DISTINCT platform_id\nFROM game_platform\nWHERE release_year = 2007;",
    "3466": "SELECT DISTINCT gp.id AS game_publisher_id\nFROM game_platform AS gpl\nJOIN game_publisher AS gp ON gpl.game_publisher_id = gp.id\nWHERE gpl.platform_id = 16",
    "3467": "SELECT COUNT(DISTINCT game_publisher.id) AS num_game_publisher_ids\nFROM game_publisher\nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id\nWHERE game_platform.release_year = 1984",
    "3468": "SELECT DISTINCT gp.platform_id\nFROM game_platform AS gp\nJOIN region_sales AS rs ON gp.id = rs.game_platform_id\nWHERE rs.region_id = 3",
    "3469": "SELECT SUM(rs.num_sales) AS total_sales_in_japan\nFROM region_sales rs\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'Japan'",
    "3470": "SELECT COUNT(DISTINCT gp.id) AS num_game_publisher_ids\nFROM game_publisher gp\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN platform p ON gpl.platform_id = p.id\nWHERE p.platform_name = 'X360'",
    "3471": "SELECT DISTINCT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nWHERE gp.release_year = 2000",
    "3472": "SELECT \n    (SELECT COUNT(DISTINCT gp.publisher_id)\n     FROM game_publisher AS gp\n     JOIN game_platform AS gpl ON gp.id = gpl.game_publisher_id\n     JOIN platform AS p ON gpl.platform_id = p.id\n     WHERE p.platform_name = 'PS3') -\n    (SELECT COUNT(DISTINCT gp.publisher_id)\n     FROM game_publisher AS gp\n     JOIN game_platform AS gpl ON gp.id = gpl.game_publisher_id\n     JOIN platform AS p ON gpl.platform_id = p.id\n     WHERE p.platform_name = 'X360') AS difference",
    "3473": "SELECT g.id AS game_id\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nWHERE p.publisher_name = 'Bethesda Softworks'",
    "3474": "SELECT COUNT(DISTINCT game.id) AS total_game_ids\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE publisher.publisher_name IN ('Capcom', 'Sony Computer Entertainment')",
    "3475": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = 'Grand Theft Auto V'",
    "3476": "SELECT game.game_name\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Racing'",
    "3477": "SELECT COUNT(DISTINCT game.id) AS number_of_fighting_games\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Fighting'",
    "3478": "SELECT DISTINCT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nJOIN game_publisher ON game.id = game_publisher.game_id\nWHERE game_publisher.publisher_id = 464",
    "3479": "SELECT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN game g ON gpub.game_id = g.id\nWHERE g.game_name = 'Final Fantasy XIII-2'",
    "3480": "SELECT SUM(rs.num_sales) AS total_sales_2000\nFROM region_sales rs\nJOIN game_platform gp ON rs.game_platform_id = gp.id\nWHERE gp.release_year = 2000;",
    "3481": "SELECT \n    (SELECT SUM(num_sales) \n     FROM region_sales \n     JOIN game_platform ON region_sales.game_platform_id = game_platform.id \n     WHERE release_year = 2000) \n    - \n    (SELECT SUM(num_sales) \n     FROM region_sales \n     JOIN game_platform ON region_sales.game_platform_id = game_platform.id \n     WHERE release_year = 1990) AS difference_in_sales;",
    "3482": "SELECT DISTINCT platform_id\nFROM game_platform\nWHERE release_year = 2006;",
    "3483": "SELECT AVG(num_sales * 100000) AS average_sales\nFROM region_sales\nWHERE region_id = 3;",
    "3484": "SELECT release_year FROM game_platform WHERE id = 19",
    "3485": "SELECT SUM(num_sales) * 100000 AS total_sales_in_all_regions\nFROM region_sales\nWHERE game_platform_id = 66;",
    "3486": "SELECT game_name FROM game WHERE id = 44;",
    "3487": "SELECT DISTINCT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN platform p ON gpl.platform_id = p.id\nWHERE p.platform_name = 'Wii'",
    "3488": "SELECT DISTINCT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nWHERE gpl.release_year = 2015",
    "3489": "SELECT COUNT(DISTINCT g.id) AS total_adventure_games_2005\nFROM game g\nJOIN genre ge ON g.genre_id = ge.id\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nWHERE ge.genre_name = 'Adventure' AND gpl.release_year = 2005",
    "3490": "SELECT publisher.publisher_name\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nWHERE game.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!';",
    "3491": "SELECT gp.id AS game_platform_id, r.region_name\nFROM region_sales rs\nJOIN game_platform gp ON rs.game_platform_id = gp.id\nJOIN region r ON rs.region_id = r.id\nWHERE rs.num_sales <= 0.2",
    "3492": "SELECT g.game_name\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nWHERE p.publisher_name = '505 Games' AND gpl.release_year = 2006",
    "3493": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.id = 119",
    "3494": "SELECT game.id\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN publisher ON game_publisher.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Abylight'",
    "3495": "SELECT r.region_name\nFROM region_sales rs\nJOIN region r ON rs.region_id = r.id\nORDER BY rs.num_sales ASC\nLIMIT 1",
    "3496": "SELECT game.game_name\nFROM game\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Strategy';",
    "3497": "SELECT p.platform_name\nFROM platform p\nJOIN game_platform gp ON p.id = gp.platform_id\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nWHERE gpub.game_id = 178",
    "3498": "SELECT g.game_name, gn.genre_name\nFROM game g\nJOIN genre gn ON g.genre_id = gn.id\nWHERE g.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade')",
    "3499": "SELECT SUM(num_sales) * 100000 AS total_sales_in_north_america\nFROM region_sales\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'North America'",
    "3500": "SELECT DISTINCT p.publisher_name\nFROM publisher p\nJOIN game_publisher gp ON p.id = gp.publisher_id\nJOIN game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN region_sales rs ON gpl.id = rs.game_platform_id\nWHERE rs.num_sales < 0.1;",
    "3501": "SELECT gp.platform_id\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game AS g ON gpub.game_id = g.id\nWHERE g.game_name = 'Airborne Troops: Countdown to D-Day'",
    "3502": "SELECT COUNT(DISTINCT game.id) AS num_games\nFROM game\nJOIN game_publisher ON game.id = game_publisher.game_id\nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id\nJOIN platform ON game_platform.platform_id = platform.id\nWHERE platform.platform_name = 'PSP' AND game_platform.release_year = 2004",
    "3503": "SELECT genre.genre_name\nFROM genre\nJOIN game ON genre.id = game.genre_id\nWHERE game.game_name = '999: Nine Hours, Nine Persons, Nine Doors'",
    "3504": "SELECT release_year\nFROM game_platform\nWHERE game_publisher_id IN (\n    SELECT id\n    FROM game_publisher\n    WHERE game_id = 156\n)",
    "3505": "SELECT \n    SUM(CASE WHEN p.platform_name = 'SNES' THEN 1 ELSE 0 END) -\n    SUM(CASE WHEN p.platform_name = 'DS' THEN 1 ELSE 0 END) AS difference\nFROM \n    game g\nJOIN \n    game_publisher gp ON g.id = gp.game_id\nJOIN \n    publisher pub ON gp.publisher_id = pub.id\nJOIN \n    game_platform gpl ON gp.id = gpl.game_publisher_id\nJOIN \n    platform p ON gpl.platform_id = p.id\nWHERE \n    pub.publisher_name = 'Culture Brain'",
    "3506": "SELECT \n    (COUNT(CASE WHEN gp.release_year = 2007 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM \n    game_platform AS gp\nJOIN \n    game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN \n    game AS g ON gpub.game_id = g.id\nJOIN \n    platform AS p ON gp.platform_id = p.id\nWHERE \n    p.platform_name = 'Wii'",
    "3507": "SELECT gp.platform_id\nFROM game_platform AS gp\nJOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id\nJOIN game AS g ON gpub.game_id = g.id\nJOIN region_sales AS rs ON gp.id = rs.game_platform_id\nJOIN region AS r ON rs.region_id = r.id\nWHERE r.region_name = 'Europe'\nGROUP BY gp.platform_id\nHAVING SUM(rs.num_sales) < (SELECT AVG(num_sales) * 0.3 FROM region_sales JOIN game_platform AS gp2 ON region_sales.game_platform_id = gp2.id JOIN region AS r2 ON region_sales.region_id = r2.id WHERE r2.region_name = 'Europe')",
    "3508": "SELECT COUNT(DISTINCT Author.Id) AS NumberOfAuthors\nFROM Author\nWHERE Affiliation = 'University of California Berkeley'",
    "3509": "SELECT Keyword \nFROM Paper \nWHERE Title = \"Stitching videos streamed by mobile phones in real-time\"",
    "3510": "SELECT Paper.Title\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Concepts in Magnetic Resonance Part A' AND Paper.Year = 2008",
    "3511": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Concepts in Magnetic Resonance Part A'",
    "3512": "SELECT Journal.HomePage\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Paper.Title = 'Area Effects in Cepaea'",
    "3513": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Molecular Brain' AND Paper.Year = 2011",
    "3514": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Paper.Year = 2011 AND Journal.ShortName = 'Mol Brain'",
    "3515": "SELECT COUNT(DISTINCT AuthorId) AS NumberOfAuthors\nFROM PaperAuthor\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'Equation Solving in Geometrical Theories'",
    "3516": "SELECT Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'Area Effects in Cepaea'",
    "3517": "SELECT COUNT(*) \nFROM PaperAuthor \nJOIN Author ON PaperAuthor.AuthorId = Author.Id \nJOIN Paper ON PaperAuthor.PaperId = Paper.Id \nWHERE Paper.Title = \"Stitching videos streamed by mobile phones in real-time\" \nAND Author.Affiliation = \"Cairo Microsoft Innovation Lab\";",
    "3518": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Klaus Zimmermann'",
    "3519": "SELECT a.Name\nFROM Author a\nJOIN PaperAuthor pa ON a.Id = pa.AuthorId\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE p.Title = \"Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web\"\nAND a.Affiliation = \"National Taiwan University Department of Computer Science and Information Engineering Taiwan\"",
    "3520": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Paper.Year = 1995 AND Author.Name = 'Thomas Wiegand'",
    "3521": "SELECT COUNT(DISTINCT Paper.Id) AS NumberOfPapers\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Thomas Wiegand' AND Paper.Year = 1995",
    "3522": "SELECT AVG(YearlyPapers.Count) AS AveragePapersPerYear\nFROM (\n    SELECT COUNT(p.Id) AS Count\n    FROM Paper p\n    JOIN Journal j ON p.JournalId = j.Id\n    WHERE j.FullName = 'Molecular Brain' AND p.Year BETWEEN 2008 AND 2011\n    GROUP BY p.Year\n) AS YearlyPapers",
    "3523": "SELECT \n    ((SELECT COUNT(*) FROM Paper WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Cases Journal')) - \n    (SELECT COUNT(*) FROM Paper WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Molecular Brain'))) * 100.0 / \n    (SELECT COUNT(*) FROM Paper WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Molecular Brain')) AS PercentageDifference",
    "3524": "SELECT COUNT(*) FROM Journal WHERE FullName LIKE '%computing%'",
    "3525": "SELECT PaperAuthor.PaperId, PaperAuthor.AuthorId\nFROM PaperAuthor\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Affiliation = 'Cairo Microsoft Innovation Lab'",
    "3526": "SELECT ShortName, FullName \nFROM Conference \nWHERE HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html'",
    "3527": "SELECT Id FROM Author WHERE Name = 'Peter'",
    "3528": "SELECT Paper.Title, Conference.ShortName\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE ConferenceId BETWEEN 160 AND 170",
    "3529": "SELECT Paper.Title, Journal.HomePage\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Paper.Year = (SELECT MAX(Year) FROM Paper)\nLIMIT 1",
    "3530": "SELECT Paper.Title, Conference.ShortName\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Paper.Year = 1999 AND Author.Name LIKE 'Philip%'",
    "3531": "SELECT COUNT(P.Id) AS TotalPapers, C.HomePage\nFROM Paper P\nJOIN Conference C ON P.ConferenceId = C.Id\nWHERE P.ConferenceId = 187 AND P.Year BETWEEN 1990 AND 2000",
    "3532": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Paper.Year = 2003\nAND Author.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications'",
    "3533": "SELECT a.Name AS AuthorName, j.ShortName AS JournalShortName\nFROM Paper p\nJOIN PaperAuthor pa ON p.Id = pa.PaperId\nJOIN Author a ON pa.AuthorId = a.Id\nJOIN Journal j ON p.JournalId = j.Id\nWHERE p.Title LIKE 'chemiluminescence%' AND p.JournalId BETWEEN 245 AND 250",
    "3534": "SELECT DISTINCT a.Name\nFROM Author a\nJOIN PaperAuthor pa ON a.Id = pa.AuthorId\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE p.ConferenceId = 0 AND p.JournalId < 100",
    "3535": "SELECT Paper.Title, PaperAuthor.AuthorId\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE Paper.ConferenceId < 100 AND Paper.Year = 2006",
    "3536": "SELECT Paper.Id\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'",
    "3537": "SELECT DISTINCT Journal.HomePage, PaperAuthor.AuthorId\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE Paper.Year BETWEEN 2000 AND 2005\nAND Paper.Title LIKE '%social%'",
    "3538": "SELECT Author.Id, Author.Affiliation\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.JournalId = 0 AND Paper.Year = 2009",
    "3539": "SELECT \n    (CAST(SUM(CASE WHEN ConferenceId = 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS Percentage\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE JournalId BETWEEN 200 AND 300\nAND Journal.ShortName LIKE 'A%'",
    "3540": "SELECT \n    (CAST(COUNT(CASE WHEN Year = 2001 THEN 1 END) AS FLOAT) / COUNT(*) * 100) AS PaperPublishedRate2001\nFROM \n    Paper\nWHERE \n    Year BETWEEN 2001 AND 2010",
    "3541": "SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICWE'",
    "3542": "SELECT Affiliation, COUNT(DISTINCT AuthorId) AS TotalAuthors\nFROM PaperAuthor\nWHERE Affiliation IN ('Standford University', 'Massachusetts Institute of Technology')\nGROUP BY Affiliation\nORDER BY TotalAuthors DESC\nLIMIT 1;",
    "3543": "SELECT \n    SUM(CASE WHEN Affiliation IS NOT NULL THEN 1 ELSE 0 END) AS WithAffiliation,\n    SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END) AS WithoutAffiliation,\n    (SUM(CASE WHEN Affiliation IS NOT NULL THEN 1 ELSE 0 END) || ' : ' || SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END)) AS Ratio\nFROM Author",
    "3544": "SELECT Author.Id, Author.Name\nFROM Author\nWHERE Author.Affiliation = 'University of Oulu'",
    "3545": "SELECT Paper.Title, PaperAuthor.Affiliation\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = \"Roger J. Marshall\" AND Paper.ConferenceId = 0 AND Paper.JournalId = 0",
    "3546": "SELECT \n    Paper.Id AS PaperId, \n    Paper.Title, \n    Paper.Year, \n    Journal.FullName AS JournalFullName\nFROM \n    Paper\nJOIN \n    Journal ON Paper.JournalId = Journal.Id\nWHERE \n    Paper.Id = (\n        SELECT \n            PaperAuthor.PaperId \n        FROM \n            PaperAuthor\n        GROUP BY \n            PaperAuthor.PaperId \n        ORDER BY \n            COUNT(PaperAuthor.AuthorId) DESC\n        LIMIT 1\n    )",
    "3547": "SELECT \n    Paper.Title AS PaperTitle,\n    Paper.Year AS PublishedYear,\n    Conference.ShortName AS ConferenceShortName,\n    GROUP_CONCAT(Author.Name, '; ') AS AuthorNames\nFROM \n    Paper\nLEFT JOIN \n    Conference ON Paper.ConferenceId = Conference.Id\nLEFT JOIN \n    PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nLEFT JOIN \n    Author ON PaperAuthor.AuthorId = Author.Id\nWHERE \n    Paper.Id = 15\nGROUP BY \n    Paper.Id",
    "3548": "SELECT p.Id AS PaperId, p.Year, p.Keyword\nFROM PaperAuthor pa\nJOIN Author a ON pa.AuthorId = a.Id\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE a.Id < 1000 AND pa.Affiliation = 'Zurich, ETH'",
    "3549": "SELECT Author.Id, Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = \"Inspection resistant memory: Architectural support for security from physical examination\"\nAND PaperAuthor.Affiliation = \"Microsoft Research, USA\"",
    "3550": "SELECT \n    Author.Name AS AuthorName, \n    Author.Affiliation AS AuthorAffiliation, \n    Journal.ShortName AS JournalShortName, \n    Journal.FullName AS JournalFullName\nFROM \n    Paper\nINNER JOIN \n    PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nINNER JOIN \n    Author ON PaperAuthor.AuthorId = Author.Id\nLEFT JOIN \n    Journal ON Paper.JournalId = Journal.Id\nWHERE \n    Paper.Title = \"Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats\"",
    "3551": "SELECT Paper.Title, Paper.JournalId\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = \"International Symposium of Robotics Research\"",
    "3552": "SELECT Paper.Title, Paper.Year, Paper.Keyword\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE PaperAuthor.AuthorId = 661002 \nAND PaperAuthor.Affiliation = \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\"",
    "3553": "SELECT \n    (SELECT COUNT(*) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Journal.ShortName = 'IWC' AND Paper.Year = 2000) - \n    (SELECT COUNT(*) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Journal.ShortName = 'IWC' AND Paper.Year = 2010) AS Difference",
    "3554": "SELECT Journal.Id, Journal.ShortName, Journal.FullName\nFROM Journal\nJOIN Paper ON Journal.Id = Paper.JournalId\nWHERE Paper.Year = 2013 AND Journal.Id != 0 AND Journal.Id != -1\nGROUP BY Journal.Id\nLIMIT 4",
    "3555": "WITH PaperCounts AS (\n    SELECT\n        '1971-1980' AS Period,\n        COUNT(*) AS Count\n    FROM Paper\n    JOIN Conference ON Paper.ConferenceId = Conference.Id\n    WHERE Conference.ShortName = 'MICRO'\n    AND Paper.Year BETWEEN 1971 AND 1980\n    UNION ALL\n    SELECT\n        '1991-2000' AS Period,\n        COUNT(*) AS Count\n    FROM Paper\n    JOIN Conference ON Paper.ConferenceId = Conference.Id\n    WHERE Conference.ShortName = 'MICRO'\n    AND Paper.Year BETWEEN 1991 AND 2000\n),\nDifference AS (\n    SELECT\n        (SELECT Count FROM PaperCounts WHERE Period = '1991-2000') -\n        (SELECT Count FROM PaperCounts WHERE Period = '1971-1980') AS Diff\n),\nAverageNeeded AS (\n    SELECT\n        CAST(Diff AS REAL) / 10 AS AvgNeeded\n    FROM Difference\n)\nSELECT\n    Paper.Title,\n    Author.Name\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Conference.ShortName = 'MICRO'\nAND Paper.Year BETWEEN 1971 AND 1980\nUNION ALL\nSELECT\n    'Average papers needed per year to match 1991-2000:',\n    CAST(AvgNeeded AS TEXT)\nFROM AverageNeeded;",
    "3556": "SELECT COUNT(*) AS PreprintedOrNotPublishedPapers\nFROM Paper\nWHERE Year = 0",
    "3557": "SELECT c.FullName\nFROM Conference c\nJOIN Paper p ON c.Id = p.ConferenceId\nWHERE p.Title = \"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\"",
    "3558": "SELECT \n    CASE \n        WHEN p.ConferenceId IS NOT NULL THEN c.HomePage\n        WHEN p.JournalId IS NOT NULL THEN j.HomePage\n    END AS HomePage\nFROM Paper p\nLEFT JOIN Conference c ON p.ConferenceId = c.Id\nLEFT JOIN Journal j ON p.JournalId = j.Id\nWHERE p.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits';",
    "3559": "SELECT Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nWHERE PaperAuthor.PaperId BETWEEN 101 AND 105",
    "3560": "SELECT Conference.ShortName\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Paper.Year = 2009\nLIMIT 10",
    "3561": "SELECT j.HomePage\nFROM Journal j\nJOIN Paper p ON j.Id = p.JournalId\nWHERE p.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'",
    "3562": "SELECT Paper.Title\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'International Conference on Internet Computing'",
    "3563": "SELECT pa.Name\nFROM PaperAuthor pa\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE p.Year = 2005 AND p.Keyword = 'LOAD; IDE; SNP; haplotype; asso- ciation studies'",
    "3564": "SELECT COUNT(DISTINCT AuthorId) AS NumberOfAuthors\nFROM PaperAuthor\nWHERE PaperId IN (\n    SELECT Id\n    FROM Paper\n    WHERE Title LIKE '%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%'\n)",
    "3565": "SELECT DISTINCT pa.Name, p.Title\nFROM PaperAuthor pa\nJOIN PaperAuthor pa2 ON pa.PaperId = pa2.PaperId\nJOIN Paper p ON pa.PaperId = p.Id\nJOIN Author a ON pa2.AuthorId = a.Id\nWHERE a.Name = 'Jei Keon Chee' AND pa.Name != 'Jei Keon Chee'",
    "3566": "SELECT \n    P.Title AS PaperTitle,\n    C.FullName AS ConferenceName,\n    J.FullName AS JournalName,\n    A.Name AS CoAuthorName\nFROM \n    PaperAuthor PA\nJOIN \n    Author A ON PA.AuthorId = A.Id\nJOIN \n    Paper P ON PA.PaperId = P.Id\nLEFT JOIN \n    Conference C ON P.ConferenceId = C.Id\nLEFT JOIN \n    Journal J ON P.JournalId = J.Id\nWHERE \n    P.Id IN (\n        SELECT \n            PA.PaperId\n        FROM \n            PaperAuthor PA\n        JOIN \n            Author A ON PA.AuthorId = A.Id\n        WHERE \n            A.Name = 'Shueh-Lin Yau'\n    )\nAND A.Name != 'Shueh-Lin Yau';",
    "3567": "SELECT COUNT(Id) AS papers\nFROM Paper\nWHERE Year BETWEEN 1990 AND 2000;",
    "3568": "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London'",
    "3569": "SELECT ShortName FROM Conference WHERE FullName LIKE 'International Symposium%'",
    "3570": "SELECT COUNT(*) FROM Journal WHERE HomePage = ''",
    "3571": "SELECT DISTINCT Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Year = 0",
    "3572": "SELECT DISTINCT a.Affiliation\nFROM Author a\nJOIN PaperAuthor pa ON a.Id = pa.AuthorId\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE p.Keyword = 'Quantum Physics'",
    "3573": "SELECT c.FullName, p.Title\nFROM Paper p\nJOIN Conference c ON p.ConferenceId = c.Id\nWHERE p.JournalId = 0 AND p.ConferenceId != 0 AND p.Year != 0",
    "3574": "SELECT Paper.Title\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.HomePage IS NULL OR Conference.HomePage = ''",
    "3575": "SELECT DISTINCT j.Id, j.FullName, j.HomePage, p.Year\nFROM Journal j\nJOIN Paper p ON j.Id = p.JournalId\nWHERE (j.ShortName IS NULL OR j.ShortName = '')\nORDER BY p.Year;",
    "3576": "SELECT Author.Affiliation\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'A combined search for the standard model Higgs boson at s = 1.96 \u00c2 TeV'",
    "3577": "SELECT DISTINCT Journal.FullName\nFROM Journal\nJOIN Paper ON Journal.Id = Paper.JournalId\nWHERE Paper.Year = 2001",
    "3578": "SELECT a.Name\nFROM Author a\nJOIN PaperAuthor pa ON a.Id = pa.AuthorId\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE p.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'",
    "3579": "SELECT COUNT(P.Id) AS NumberOfPapers, P.Year\nFROM Paper P\nJOIN Conference C ON P.ConferenceId = C.Id\nWHERE C.FullName = 'International Conference on Database Theory' AND P.Year != 0\nGROUP BY P.Year",
    "3580": "SELECT DISTINCT Journal.FullName\nFROM Journal\nJOIN Paper ON Journal.Id = Paper.JournalId\nWHERE Paper.Keyword = 'Sustainability'",
    "3581": "SELECT DISTINCT Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName LIKE '%Workshop%'",
    "3582": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN PA.Affiliation LIKE '%INFN%' THEN PA.AuthorId END) AS FLOAT) / COUNT(DISTINCT PA.AuthorId)) * 100 AS PercentageINFN\nFROM \n    Paper P\nJOIN \n    PaperAuthor PA ON P.Id = PA.PaperId\nWHERE \n    P.Title LIKE '%Charged particle multiplicity%'",
    "3583": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Journal \n     WHERE ShortName LIKE 'ANN%' \n     AND Id IN (SELECT JournalId FROM Paper WHERE Year = 1989)\n    ) / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Journal \n     WHERE Id IN (SELECT JournalId FROM Paper WHERE Year = 1989)\n    ) * 100 AS Percentage",
    "3584": "SELECT COUNT(DISTINCT AuthorId) \nFROM PaperAuthor \nWHERE PaperId = 1 AND Affiliation LIKE '%Microsoft Research%'",
    "3585": "SELECT Paper.Keyword, Paper.Year\nFROM Paper\nWHERE Paper.Title = 'A Formal Approach to Service Component Architecture'",
    "3586": "SELECT \n    (CAST(SUM(CASE WHEN ConferenceId = 0 AND JournalId = 0 AND Year > 2000 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(Id)) * 100 AS PercentagePreprintedAfter2000\nFROM \n    Paper",
    "3587": "SELECT Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'",
    "3588": "SELECT j.FullName\nFROM Journal j\nJOIN Paper p ON j.Id = p.JournalId\nWHERE p.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'",
    "3589": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Iet Software/iee Proceedings - Software'",
    "3590": "SELECT Conference.FullName\nFROM Conference\nJOIN Paper ON Conference.Id = Paper.ConferenceId\nWHERE Paper.Id = 5",
    "3591": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name LIKE '%Jun du%'\nLIMIT 2",
    "3592": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Cheng Huang' AND PaperAuthor.Affiliation LIKE 'Microsoft %'",
    "3593": "SELECT Conference.FullName\nFROM Conference\nJOIN Paper ON Conference.Id = Paper.ConferenceId\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Jean-luc Hainaut'\nLIMIT 1",
    "3594": "SELECT DISTINCT j.FullName\nFROM Journal j\nJOIN Paper p ON j.Id = p.JournalId\nJOIN PaperAuthor pa ON p.Id = pa.PaperId\nJOIN Author a ON pa.AuthorId = a.Id\nWHERE a.Name = 'Andrew Cain'",
    "3595": "SELECT DISTINCT Author.Affiliation\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'",
    "3596": "SELECT Paper.Title, Journal.FullName\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Paper.Year = 0\nLIMIT 2;",
    "3597": "SELECT DISTINCT Journal.ShortName, Journal.FullName\nFROM Journal\nJOIN Paper ON Journal.Id = Paper.JournalId\nWHERE Paper.Keyword = 'Materials'",
    "3598": "SELECT Name\nFROM Author\nWHERE Affiliation = 'University of Oxford'\nORDER BY Name ASC",
    "3599": "SELECT ShortName, HomePage\nFROM Conference\nWHERE FullName LIKE 'International Conference on Artificial Intelligence%'",
    "3600": "SELECT Title \nFROM Paper \nWHERE Year = 1996;",
    "3601": "SELECT Paper.Title, PaperAuthor.Name\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE Paper.Year = 2007 AND Journal.FullName = 'Neoplasia'",
    "3602": "SELECT a.Name, p.Title\nFROM Author a\nJOIN PaperAuthor pa ON a.Id = pa.AuthorId\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE a.Affiliation = 'Soongsil University' AND p.Year = 2000",
    "3603": "SELECT Paper.Title, PaperAuthor.Name\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE Paper.Year BETWEEN 2000 AND 2005\nAND Paper.Keyword LIKE '%optical properties%'",
    "3604": "SELECT AVG(Count) AS AveragePapersPerYear\nFROM (\n    SELECT Year, COUNT(*) AS Count\n    FROM Paper\n    JOIN Conference ON Paper.ConferenceId = Conference.Id\n    WHERE Conference.FullName = 'World Computer Congress'\n    GROUP BY Year\n)",
    "3605": "SELECT Paper.Title, PaperAuthor.Name\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE Paper.Year = 1997 AND Paper.ConferenceId = 0 AND Paper.JournalId = 0",
    "3606": "SELECT Paper.Title, Journal.FullName\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nLEFT JOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Author.Name = 'Adam Jones' AND Paper.Year BETWEEN 2005 AND 2010",
    "3607": "SELECT COUNT(DISTINCT Author.Id) AS NumberOfAuthors\nFROM Author\nWHERE Affiliation = 'Otterbein University'",
    "3608": "SELECT COUNT(DISTINCT AuthorId) AS NumberOfAuthors\nFROM PaperAuthor\nWHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'Subcellular localization of nuclease in barley aleurone')",
    "3609": "SELECT Conference.FullName\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Paper.Title = 'Extended Fuzzy Regression Models'",
    "3610": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'Mathematics of Program Construction'",
    "3611": "SELECT PaperAuthor.Name\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE Paper.Title = \"Open Sourcing Social Solutions (Building Communities of Change)\"",
    "3612": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Jianli Hua'",
    "3613": "SELECT PaperAuthor.Name\nFROM PaperAuthor\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'Testing timed automata'",
    "3614": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.ShortName = 'SSPR' AND Paper.Year = 2000",
    "3615": "SELECT Paper.Title\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Theoretical Computer Science' AND Paper.Year = 2003",
    "3616": "SELECT Conference.HomePage\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Paper.Title = 'Quality evaluation of long duration audiovisual content'",
    "3617": "SELECT pa.Name\nFROM PaperAuthor pa\nJOIN Paper p ON pa.PaperId = p.Id\nWHERE p.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus'\nAND pa.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea'",
    "3618": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Software - Practice and Experience'",
    "3619": "SELECT Paper.Title\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.HomePage = 'http://www.irma-international.org/';",
    "3620": "SELECT AVG(PaperCount) AS AvgPapers\nFROM (\n    SELECT COUNT(p.Id) AS PaperCount\n    FROM Paper p\n    JOIN Conference c ON p.ConferenceId = c.Id\n    WHERE p.Year BETWEEN 2002 AND 2010\n    AND c.FullName = 'Information and Knowledge Engineering'\n    GROUP BY p.Year\n)",
    "3621": "SELECT \n    (SELECT SUM(P1.Id) \n     FROM Paper P1 \n     JOIN Conference C1 ON P1.ConferenceId = C1.Id \n     WHERE C1.FullName = 'International Conference on Supercomputing' \n     AND P1.Year BETWEEN 1991 AND 2000) - \n    (SELECT SUM(P2.Id) \n     FROM Paper P2 \n     JOIN Conference C2 ON P2.ConferenceId = C2.Id \n     WHERE C2.FullName = 'Informatik & Schule' \n     AND P2.Year BETWEEN 1991 AND 2000) AS Difference",
    "3622": "SELECT ShortName FROM Journal WHERE FullName = 'Software - Concepts and Tools / Structured Programming'",
    "3623": "SELECT j.FullName\nFROM Journal j\nJOIN Paper p ON j.Id = p.JournalId\nWHERE p.Title = 'Education, democracy and growth'",
    "3624": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'IEEE Transactions on Nuclear Science' AND Paper.Year = 1999",
    "3625": "SELECT Paper.Title\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence'\nAND Paper.Year = 2011",
    "3626": "SELECT Keyword FROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Modeling Identification and Control' AND Paper.Year = 1994",
    "3627": "SELECT \n    CASE \n        WHEN Paper.Year = 0 THEN 'Yes'\n        ELSE 'No'\n    END AS IsPreprinted\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Zvezdan Proti\u0107'",
    "3628": "SELECT Conference.FullName\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Paper.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes'",
    "3629": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'International Symposium on Software Testing and Analysis'",
    "3630": "SELECT Conference.HomePage\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Paper.Title = 'Increasing the Concurrency in Estelle'",
    "3631": "SELECT COUNT(DISTINCT AuthorId) AS NumberOfAuthors\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles'",
    "3632": "SELECT c.ShortName\nFROM Conference c\nJOIN Paper p ON c.Id = p.ConferenceId\nWHERE p.Year = 2012\nGROUP BY c.Id\nORDER BY COUNT(p.Id) DESC\nLIMIT 1",
    "3633": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.ShortName = 'ECSQARU' AND Paper.Year = 2003",
    "3634": "SELECT Paper.Keyword\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'International Radar Symposium' AND Paper.Year = 2012",
    "3635": "SELECT \n    (SELECT COUNT(*) FROM Paper \n     JOIN Conference ON Paper.ConferenceId = Conference.Id \n     WHERE Conference.FullName = 'International Conference on Thermoelectrics') \n    /\n    (SELECT COUNT(*) FROM Paper \n     JOIN Conference ON Paper.ConferenceId = Conference.Id \n     WHERE Conference.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing') \n    AS TimesMore",
    "3636": "SELECT \n    (CAST(SUM(CASE WHEN p.ConferenceId = 0 AND p.JournalId = 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(p.Id)) * 100 AS PreprintPercentage\nFROM \n    PaperAuthor pa\nJOIN \n    Paper p ON pa.PaperId = p.Id\nWHERE \n    pa.Name = 'John Van Reenen'",
    "3637": "SELECT Title \nFROM Paper \nORDER BY Year ASC \nLIMIT 1;",
    "3638": "SELECT Id, ShortName, FullName, HomePage\nFROM Conference\nORDER BY LENGTH(FullName) DESC\nLIMIT 1",
    "3639": "SELECT COUNT(*) AS NumberOfAuthors\nFROM Author\nWHERE Affiliation = 'NASA Langley Research Center'",
    "3640": "SELECT COUNT(*) FROM Journal WHERE ShortName IS NULL",
    "3641": "SELECT COUNT(*) AS PreprintedPapers\nFROM Paper\nWHERE Year = 0;",
    "3642": "SELECT Paper.Title\nFROM Paper\nJOIN (\n    SELECT PaperId, COUNT(AuthorId) AS AuthorCount\n    FROM PaperAuthor\n    GROUP BY PaperId\n    ORDER BY AuthorCount DESC\n    LIMIT 1\n) AS MostAuthors ON Paper.Id = MostAuthors.PaperId",
    "3643": "SELECT Paper.Title\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.ShortName = 'TUBERCLE LUNG DIS'\nORDER BY Paper.Year ASC\nLIMIT 1",
    "3644": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Karin Rengefors'",
    "3645": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'Virtual Reality, IEEE Annual International Symposium'\nAND Paper.Year = 2012",
    "3646": "SELECT Journal.ShortName\nFROM Journal\nJOIN Paper ON Journal.Id = Paper.JournalId\nWHERE Paper.Title = \"A Case of Unilateral Ashy Dermatosis\"",
    "3647": "SELECT DISTINCT Affiliation\nFROM (\n    SELECT Affiliation\n    FROM Author\n    WHERE Name = 'Mark A. Musen'\n    UNION\n    SELECT Affiliation\n    FROM PaperAuthor\n    WHERE Name = 'Mark A. Musen'\n)",
    "3648": "SELECT Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'Determination of Planetary Meteorology from Aerobot Flight Sensors'",
    "3649": "SELECT Paper.Title, Journal.FullName\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Paper.Year BETWEEN 1960 AND 1969",
    "3650": "SELECT Year, COUNT(*) AS PaperCount\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'Internet, Multimedia Systems and Applications'\nGROUP BY Year\nORDER BY PaperCount DESC\nLIMIT 1",
    "3651": "SELECT DISTINCT PaperAuthor.Name\nFROM PaperAuthor\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Randall Davis'",
    "3652": "SELECT DISTINCT Conference.Id, Conference.ShortName, Conference.FullName, Conference.HomePage\nFROM Conference\nJOIN Paper ON Conference.Id = Paper.ConferenceId\nWHERE Paper.Year = 2008",
    "3653": "SELECT j.HomePage\nFROM Journal j\nJOIN Paper p ON j.Id = p.JournalId\nGROUP BY j.Id\nORDER BY COUNT(p.Id) DESC\nLIMIT 1;",
    "3654": "SELECT \n    a.Name, \n    a.Affiliation, \n    CAST(COUNT(DISTINCT CASE WHEN p.Keyword = 'cancer' THEN p.Id END) AS FLOAT) / COUNT(DISTINCT p.Id) AS Proportion\nFROM \n    PaperAuthor pa\nJOIN \n    Author a ON pa.AuthorId = a.Id\nJOIN \n    Paper p ON pa.PaperId = p.Id\nGROUP BY \n    a.Id\nHAVING \n    Proportion > 0",
    "3655": "SELECT Name FROM Author WHERE Id = 1722",
    "3656": "SELECT COUNT(*) AS PreprintOrNotPublishedPapers\nFROM Paper\nWHERE Year = 0;",
    "3657": "SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago'",
    "3658": "SELECT \n    SUM(CASE WHEN Year = 2005 THEN 1 ELSE 0 END) AS Papers_2005,\n    SUM(CASE WHEN Year = 2005 THEN 1 ELSE 0 END) - SUM(CASE WHEN Year = 2004 THEN 1 ELSE 0 END) AS Difference\nFROM \n    Paper",
    "3659": "SELECT Paper.Title\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Ibm Journal of Research and Development'",
    "3660": "SELECT Author.Name, Author.Affiliation\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'Education, democracy and growth'",
    "3661": "SELECT COUNT(DISTINCT PaperAuthor.AuthorId) AS NumberOfAuthors\nFROM PaperAuthor\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'IEEE Computer'",
    "3662": "SELECT c.FullName\nFROM Paper p\nJOIN Conference c ON p.ConferenceId = c.Id\nWHERE p.Title = 'A context-based navigation paradigm for accessing Web data'",
    "3663": "SELECT COUNT(*) AS NumberOfPapers\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'International Workshop on Inductive Logic Programming'\nAND Year BETWEEN 2001 AND 2009;",
    "3664": "SELECT \n    Paper.Id AS PaperId, \n    Paper.Title, \n    COUNT(DISTINCT PaperAuthor.AuthorId) AS AuthorCount, \n    Paper.Year\nFROM \n    Paper\nJOIN \n    PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nWHERE \n    Paper.Year BETWEEN 1990 AND 2000\nGROUP BY \n    Paper.Id\nHAVING \n    COUNT(DISTINCT PaperAuthor.AuthorId) > 0",
    "3665": "SELECT Paper.Year, Journal.FullName\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Paper.Title = 'Area Effects in Cepaea'",
    "3666": "SELECT Author.Name\nFROM Author\nJOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId\nJOIN Paper ON PaperAuthor.PaperId = Paper.Id\nWHERE Paper.Title = 'Real-Time Automata'",
    "3667": "SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines'",
    "3668": "SELECT COUNT(*) AS NumberOfPublications\nFROM Paper\nJOIN Journal ON Paper.JournalId = Journal.Id\nWHERE Journal.FullName = 'Academic Medicine' AND Paper.Year BETWEEN 2005 AND 2010",
    "3669": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Zuliang Du'\nORDER BY Paper.Year DESC\nLIMIT 1",
    "3670": "SELECT COUNT(*) AS NumberOfPublications\nFROM Paper\nJOIN Conference ON Paper.ConferenceId = Conference.Id\nWHERE Conference.FullName = 'Adaptive Multimedia Retrieval' AND Paper.Year = 2007",
    "3671": "SELECT AVG(YearlyCount) AS AveragePapersPerYear\nFROM (\n    SELECT COUNT(*) AS YearlyCount, Year\n    FROM Paper\n    WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Information Sciences')\n    GROUP BY Year\n)",
    "3672": "SELECT COUNT(Paper.Id) AS NumberOfPublications\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Howard F. Lipson'",
    "3673": "SELECT \n    (SELECT COUNT(*) \n     FROM Paper \n     JOIN Journal ON Paper.JournalId = Journal.Id \n     WHERE Paper.Keyword = 'Turbulent Fluids' AND Journal.FullName = 'Physics of Fluids') * 100.0 / \n    (SELECT COUNT(*) \n     FROM Paper \n     WHERE Paper.Keyword = 'Turbulent Fluids') AS percentage",
    "3674": "SELECT COUNT(*) AS NumberOfAuthors\nFROM Author\nWHERE Affiliation = 'Arizona State University'",
    "3675": "SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICCI'",
    "3676": "SELECT Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name = 'Joe Lograsso'",
    "3677": "SELECT COUNT(DISTINCT Paper.Id) AS NumberOfPapers\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Affiliation = 'University of Hong Kong'",
    "3678": "SELECT Paper.Year, Paper.Title\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Author.Name LIKE 'Barassa'",
    "3679": "SELECT Author.Name, Paper.Year\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Paper.Id = 2",
    "3680": "SELECT Author.Name, Paper.Keyword\nFROM Paper\nJOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId\nJOIN Author ON PaperAuthor.AuthorId = Author.Id\nWHERE Paper.Id = 5",
    "3681": "SELECT Conference.FullName\nFROM Conference\nJOIN Paper ON Conference.Id = Paper.ConferenceId\nWHERE Paper.Title = '2004 YD5'",
    "3682": "WITH AmericanIndianCounts AS (\n    SELECT \n        i.state,\n        COUNT(*) AS AiCount\n    FROM \n        institution_grads AS g\n    INNER JOIN \n        institution_details AS i ON g.unitid = i.unitid\n    WHERE \n        g.race = 'Ai' AND g.year = 2007\n    GROUP BY \n        i.state\n    ORDER BY \n        AiCount DESC\n    LIMIT 1\n)\nSELECT \n    i.chronname\nFROM \n    institution_details AS i\nINNER JOIN \n    AmericanIndianCounts AS aic ON i.state = aic.state",
    "3683": "SELECT i.chronname AS name, i.site AS website\nFROM institution_details i\nJOIN institution_grads g ON i.unitid = g.unitid\nWHERE g.grad_cohort = '209' AND g.year = 2011",
    "3684": "SELECT SUM(CAST(grad_cohort AS INTEGER)) AS total_female_graduates\nFROM institution_grads\nWHERE unitid IN (\n    SELECT unitid\n    FROM institution_details\n    WHERE state = (\n        SELECT state\n        FROM institution_details\n        WHERE chronname = 'Gateway Community College'\n    )\n)\nAND gender = 'F'\nAND year BETWEEN 2011 AND 2013",
    "3685": "SELECT SUM(CAST(sg.grad_cohort AS INTEGER)) AS total_male_graduates_2012\nFROM institution_grads ig\nJOIN institution_details id ON ig.unitid = id.unitid\nJOIN (\n    SELECT state\n    FROM institution_details\n    ORDER BY aid_value DESC\n    LIMIT 1\n) AS highest_aid_state ON id.state = highest_aid_state.state\nJOIN state_sector_grads sg ON id.state = sg.state AND ig.year = sg.year AND ig.gender = sg.gender\nWHERE ig.year = 2012 AND ig.gender = 'M'",
    "3686": "SELECT AVG(CAST(med_sat_value AS INTEGER)) AS avg_med_sat_value\nFROM institution_details\nWHERE state = (\n    SELECT i.state\n    FROM institution_grads AS g\n    JOIN institution_details AS i ON g.unitid = i.unitid\n    WHERE g.year = 2013 AND g.gender = 'M'\n    GROUP BY i.state\n    ORDER BY COUNT(g.grad_cohort) DESC\n    LIMIT 1\n)",
    "3687": "SELECT \n    id.state, \n    id.chronname\nFROM \n    institution_details AS id\nJOIN \n    institution_grads AS ig ON id.unitid = ig.unitid\nWHERE \n    id.control = 'Private for-profit' \n    AND ig.year = 2012\nGROUP BY \n    id.state\nORDER BY \n    SUM(CAST(ig.grad_cohort AS INTEGER)) DESC\nLIMIT 1;",
    "3688": "WITH StateWithLeastGradCohort AS (\n    SELECT \n        s.state,\n        SUM(CAST(s.grad_cohort_ct AS INTEGER)) AS total_grad_cohort\n    FROM state_sector_grads s\n    WHERE s.year = 2013\n    GROUP BY s.state\n    ORDER BY total_grad_cohort ASC\n    LIMIT 1\n)\nSELECT \n    i.chronname AS institute_name,\n    i.state\nFROM institution_details i\nJOIN StateWithLeastGradCohort slgc ON i.state = slgc.state\nWHERE i.control = 'Public'",
    "3689": "SELECT id.chronname, id.fte_value\nFROM institution_details id\nJOIN institution_grads ig ON id.unitid = ig.unitid\nWHERE ig.grad_cohort < '200' AND ig.race = 'X' AND ig.gender = 'B' AND ig.year = 2013\nGROUP BY id.unitid",
    "3690": "SELECT grad_cohort\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'Oakwood University'\nAND institution_grads.year = 2013\nAND institution_grads.gender = 'F'\nAND institution_grads.race = 'X'\nAND institution_grads.cohort = 'all students'",
    "3691": "SELECT SUM(CAST(grad_cohort AS INTEGER)) AS total_asian_female_graduates\nFROM institution_grads\nWHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'University of Alaska at Anchorage')\nAND year = 2012\nAND gender = 'F'\nAND race = 'A'\nAND cohort = '4y other'",
    "3692": "SELECT year, gender, race, cohort, grad_cohort\nFROM institution_grads\nWHERE unitid IN (SELECT unitid FROM institution_details WHERE chronname = 'Auburn University')\nAND gender = 'B'\nAND race = 'X'\nAND cohort IN ('4y other', '4y bach')\nAND year IN (2011, 2012, 2013)",
    "3693": "SELECT \n    SUM(CASE WHEN race = 'B' THEN CAST(grad_cohort AS INTEGER) ELSE 0 END) * 100.0 / SUM(CAST(grad_cohort AS INTEGER)) AS percentage_black_students\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE control = 'Private for-profit'",
    "3694": "SELECT \n    (CAST(SUM(CASE WHEN race = 'A' THEN grad_100 ELSE 0 END) AS REAL) / SUM(grad_100)) * 100 AS asian_grad_percentage\nFROM \n    institution_grads\nJOIN \n    institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE \n    institution_details.state = 'Alabama'\n    AND institution_grads.year = 2013\n    AND grad_100 != 'NULL' AND grad_100 != ''",
    "3695": "SELECT \n    (SUM(CASE WHEN gender = 'M' THEN CAST(grad_cohort AS INTEGER) ELSE 0 END) * 1.0) / \n    SUM(CASE WHEN gender = 'F' THEN CAST(grad_cohort AS INTEGER) ELSE 0 END) AS ratio\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE \n    institution_details.chronname = 'Harvard University' AND\n    institution_grads.year = 2013 AND\n    institution_grads.race = 'A'",
    "3696": "SELECT chronname, MIN(grad_100_value) AS hardest_grad_100_value\nFROM institution_details\nWHERE chronname IN ('Amridge University', 'Auburn University')\nGROUP BY chronname\nORDER BY hardest_grad_100_value ASC\nLIMIT 1;",
    "3697": "SELECT COUNT(*) AS private_not_for_profit_institutes\nFROM institution_details\nWHERE control = 'Private not-for-profit';",
    "3698": "SELECT SUM(CAST(grad_150 AS INTEGER)) AS total_hispanic_male_graduates\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'Amridge University'\nAND institution_grads.gender = 'M'\nAND institution_grads.race = 'H'",
    "3699": "SELECT SUM(CAST(grad_cohort AS INTEGER))\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'Lincoln College'\nAND institution_grads.year = 2011\nAND institution_grads.cohort = '4y bach'",
    "3700": "SELECT grad_100\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'Central Alabama Community College'\nAND institution_grads.year = 2011\nAND institution_grads.gender = 'M'\nAND institution_grads.race = 'H'",
    "3701": "SELECT SUM(CAST(grad_150 AS INTEGER)) AS total_graduates_2011\nFROM institution_grads\nWHERE unitid = (\n    SELECT unitid\n    FROM institution_details\n    WHERE chronname = 'Central Alabama Community College'\n)\nAND year = 2011",
    "3702": "SELECT \n    (SELECT grad_150_rate \n     FROM institution_grads \n     JOIN institution_details ON institution_grads.unitid = institution_details.unitid \n     WHERE institution_details.chronname = 'Central Alabama Community College' \n     AND institution_grads.year = 2011 \n     AND institution_grads.gender = 'F' \n     AND institution_grads.race = 'W') AS female_white_grad_rate,\n    (SELECT grad_150_rate \n     FROM institution_grads \n     JOIN institution_details ON institution_grads.unitid = institution_details.unitid \n     WHERE institution_details.chronname = 'Central Alabama Community College' \n     AND institution_grads.year = 2011 \n     AND institution_grads.gender = 'M' \n     AND institution_grads.race = 'W') AS male_white_grad_rate",
    "3703": "SELECT i.chronname\nFROM institution_grads g\nJOIN institution_details i ON g.unitid = i.unitid\nWHERE g.year = 2011 AND g.gender = 'M' AND g.race = 'w' AND grad_150_rate IS NOT NULL\nORDER BY CAST(grad_150_rate AS REAL) DESC\nLIMIT 1;",
    "3704": "SELECT id.chronname, ig.grad_150_rate\nFROM institution_details id\nJOIN institution_grads ig ON id.unitid = ig.unitid\nWHERE ig.year = 2011\nAND ig.gender = 'M'\nAND ig.race = 'w'\nAND CAST(ig.grad_150_rate AS REAL) > 20",
    "3705": "SELECT SUM(CAST(grad_cohort AS INTEGER)) AS total_graduates\nFROM institution_grads AS T1\nJOIN institution_details AS T2 ON T1.unitid = T2.unitid\nWHERE T1.year = 2011\nAND T1.gender = 'B'\nAND T1.cohort = '2y all'\nAND T2.state = 'Alabama'",
    "3706": "SELECT \n    (SELECT SUM(CAST(grad_cohort AS INTEGER)) FROM institution_grads \n     INNER JOIN institution_details ON institution_grads.unitid = institution_details.unitid \n     WHERE institution_details.chronname = 'Central Alabama Community College' AND institution_grads.year = 2012) \n    - \n    (SELECT SUM(CAST(grad_cohort AS INTEGER)) FROM institution_grads \n     INNER JOIN institution_details ON institution_grads.unitid = institution_details.unitid \n     WHERE institution_details.chronname = 'Central Alabama Community College' AND institution_grads.year = 2011) \nAS difference_in_graduates;",
    "3707": "SELECT COUNT(DISTINCT id.unitid) AS institutes_with_over_500_graduates\nFROM institution_details id\nJOIN institution_grads ig ON id.unitid = ig.unitid\nWHERE id.state = 'Alabama'\nAND id.med_sat_percentile = '77'\nAND ig.year = 2011\nAND CAST(ig.grad_cohort AS INTEGER) > 500",
    "3708": "SELECT COUNT(DISTINCT ig.unitid) AS public_institutes_with_over_30_grads\nFROM institution_grads ig\nJOIN institution_details id ON ig.unitid = id.unitid\nWHERE id.state = 'Alabama'\nAND id.control = 'Public'\nAND ig.grad_100 > 30\nAND ig.year = 2011",
    "3709": "SELECT i.chronname\nFROM institution_details i\nJOIN institution_grads g ON i.unitid = g.unitid\nWHERE i.state = 'Alabama'\nAND g.year = 2011\nAND g.race = 'X'\nAND CAST(g.grad_cohort AS INTEGER) > 500",
    "3710": "SELECT AVG(grad_cohort) AS average_graduates\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'Central Alabama Community College'\nAND institution_grads.year BETWEEN 2011 AND 2013\nAND grad_cohort != 'NULL'",
    "3711": "SELECT AVG(CAST(grad_100_rate AS REAL)) AS average_grad_100_rate\nFROM institution_grads\nWHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Central Alabama Community College')",
    "3712": "SELECT site FROM institution_details WHERE chronname = 'Swarthmore College';",
    "3713": "SELECT state FROM institution_details WHERE chronname = 'Mercer University';",
    "3714": "SELECT city FROM institution_details WHERE chronname = 'Rensselaer Polytechnic Institute';",
    "3715": "SELECT state_abbr FROM state_sector_grads WHERE state = 'Delaware' LIMIT 1;",
    "3716": "SELECT COUNT(*) AS NumberOfSchools\nFROM institution_details\nWHERE state = 'California' AND level = '2-year' AND control = 'public';",
    "3717": "SELECT state_post FROM state_sector_details WHERE state = 'Idaho'",
    "3718": "SELECT chronname \nFROM institution_details \nWHERE state = (SELECT state FROM state_sector_details WHERE state_abbr = 'NJ') \nAND level = '4-year' \nORDER BY student_count DESC \nLIMIT 1;",
    "3719": "SELECT site \nFROM institution_details \nWHERE state = 'PA' \nORDER BY lat_y DESC \nLIMIT 1;",
    "3720": "SELECT COUNT(*) \nFROM institution_details AS id\nJOIN state_sector_details AS ssd ON id.state = ssd.state\nWHERE id.level = '4-year' \nAND id.control = 'Public' \nAND id.state = 'UT' \nAND id.awards_per_value > (\n    SELECT awards_per_state_value \n    FROM state_sector_details \n    WHERE state_post = 'UT' \n    AND level = '4-year' \n    AND control = 'Public'\n    LIMIT 1\n)",
    "3721": "SELECT COUNT(*) \nFROM institution_details \nWHERE level = '2-year' \nAND control = 'Private not-for-profit' \nAND state = 'CT' \nAND awards_per_value < (\n    SELECT awards_per_natl_value \n    FROM state_sector_details \n    WHERE state = 'CT' \n    AND level = '2-year' \n    AND control = 'Private not-for-profit'\n)",
    "3722": "SELECT chronname\nFROM institution_details\nWHERE level = '4-year' AND control = 'Public' AND state = 'ID'\nORDER BY grad_100_value\nLIMIT 1;",
    "3723": "SELECT unitid\nFROM institution_details\nWHERE level = '4-year' AND control = 'Private for-profit' AND state = 'KY'\nORDER BY grad_150_value DESC\nLIMIT 1",
    "3724": "SELECT grad_100\nFROM institution_grads\nWHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Pennsylvania State University-Altoona')\nAND gender = 'F'\nAND race = 'H'\nAND grad_100_rate = 'graduated within 100 percent of expected time'",
    "3725": "SELECT cohort \nFROM institution_grads \nWHERE unitid = (\n    SELECT unitid \n    FROM institution_details \n    ORDER BY cohort_size DESC \n    LIMIT 1\n)",
    "3726": "SELECT COUNT(*) AS NumberOfSchools\nFROM institution_details\nWHERE state = (\n    SELECT state\n    FROM institution_details\n    WHERE chronname = 'Brevard Community College'\n)\nAND level = '4-year'\nAND control = 'Private not-for-profit'",
    "3727": "SELECT SUM(CAST(grad_cohort AS INTEGER)) AS total_graduated_students\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.state = 'Alabama'\nAND institution_details.level = '2-year'\nAND institution_details.control = 'Public'\nAND institution_grads.year = 2011",
    "3728": "SELECT SUM(grad_cohort_ct) AS total_graduated_asian_students\nFROM state_sector_grads\nJOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid\nWHERE state_sector_details.schools_count = 113\nAND state_sector_grads.level = '2-year'\nAND state_sector_grads.control = 'public'\nAND state_sector_grads.race = 'A'\nAND state_sector_grads.cohort = '2y all'\nAND state_sector_grads.year = 2013",
    "3729": "SELECT \n    (CAST(SUM(CASE WHEN chronname = 'Madison Area Technical College' THEN 1 ELSE 0 END) AS REAL) / \n    SUM(CASE WHEN state = (SELECT state FROM institution_details WHERE chronname = 'Madison Area Technical College') AND level = '4-year' AND control = 'Public' THEN 1 ELSE 0 END)) * 100 AS percentage\nFROM \n    institution_details;",
    "3730": "SELECT i.state, i.chronname\nFROM institution_details i\nJOIN institution_grads g ON i.unitid = g.unitid\nWHERE g.year BETWEEN 2010 AND 2012\nAND g.race = 'B'\nGROUP BY i.state, i.chronname",
    "3731": "SELECT DISTINCT ssd.state\nFROM state_sector_details ssd\nJOIN state_sector_grads ssg ON ssd.stateid = ssg.stateid\nWHERE ssg.year = 2011 AND ssd.awards_per_natl_value <= 20;",
    "3732": "SELECT control, level\nFROM institution_details\nJOIN institution_grads ON institution_details.unitid = institution_grads.unitid\nWHERE race = 'X'\nORDER BY student_count DESC\nLIMIT 1",
    "3733": "SELECT DISTINCT ssg.race\nFROM state_sector_details ssd\nJOIN state_sector_grads ssg ON ssd.stateid = ssg.stateid\nWHERE ssd.control = 'Public' AND ssd.schools_count <= 20",
    "3734": "SELECT i.basic\nFROM institution_details i\nJOIN institution_grads g ON i.unitid = g.unitid\nWHERE g.year = 2012 AND g.gender = 'M' AND g.race = 'X'",
    "3735": "SELECT SUM(CAST(grad_cohort AS INTEGER)) AS total_white_students\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.state = 'Alaska'\nAND institution_grads.year BETWEEN 2011 AND 2013\nAND institution_grads.race = 'W';",
    "3736": "SELECT i.chronname\nFROM institution_grads g\nJOIN institution_details i ON g.unitid = i.unitid\nWHERE g.race = 'Ai' AND CAST(g.grad_cohort AS INTEGER) BETWEEN 1 AND 3",
    "3737": "SELECT SUM(grad_cohort_ct) AS total_degree_seeking_students\nFROM state_sector_grads\nJOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid\nWHERE state_sector_grads.year = 2012\nAND state_sector_details.awards_per_natl_value = 16.5\nAND state_sector_grads.state LIKE 'A%'",
    "3738": "SELECT i.site\nFROM institution_details i\nJOIN institution_grads g ON i.unitid = g.unitid\nWHERE i.student_count BETWEEN 500 AND 1000\nAND g.year = (SELECT MAX(year) FROM institution_grads)",
    "3739": "SELECT ig.state\nFROM institution_grads AS ig\nJOIN institution_details AS id ON ig.unitid = id.unitid\nWHERE ig.year = 2011\nAND ig.gender = 'M'\nAND ig.race = 'B'\nAND id.control = 'Private for-profit'",
    "3740": "SELECT i.site, i.chronname\nFROM institution_details i\nJOIN institution_grads g ON i.unitid = g.unitid\nWHERE g.race = 'B' AND g.year = 2011 AND g.grad_cohort BETWEEN 20 AND 30",
    "3741": "SELECT COUNT(*) \nFROM institution_grads ig\nJOIN institution_details id ON ig.unitid = id.unitid\nJOIN state_sector_details ssd ON id.state = ssd.state\nWHERE ig.year = 2012 \nAND ig.gender = 'F' \nAND ssd.schools_count BETWEEN 10 AND 20;",
    "3742": "SELECT DISTINCT ig.race\nFROM institution_grads ig\nJOIN institution_details id ON ig.unitid = id.unitid\nWHERE id.state = 'Alabama' AND id.student_count > (SELECT AVG(student_count) * 0.9 FROM institution_details)",
    "3743": "SELECT \n    (CAST(SUM(CASE WHEN level = '2-year' THEN 1 ELSE 0 END) AS REAL) / COUNT(level)) * 100 AS percentage\nFROM \n    institution_details\nWHERE \n    state = 'Hawaii'\n    AND unitid IN (\n        SELECT \n            unitid\n        FROM \n            institution_grads\n        WHERE \n            year = 2010\n    );",
    "3744": "SELECT chronname\nFROM institution_details\nWHERE state = 'Connecticut' AND retain_percentile = (\n    SELECT MAX(retain_percentile)\n    FROM institution_details\n    WHERE state = 'Connecticut'\n)",
    "3745": "SELECT i.site\nFROM institution_grads g\nJOIN institution_details i ON g.unitid = i.unitid\nWHERE g.year = 2008\nAND g.race = 'W'\nAND g.cohort = '2y all'\nORDER BY CAST(g.grad_cohort AS INTEGER) DESC\nLIMIT 1;",
    "3746": "SELECT year, MAX(CAST(grad_cohort AS INTEGER)) AS max_grad_cohort\nFROM institution_grads\nWHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Harvard University')\nGROUP BY year\nORDER BY max_grad_cohort DESC\nLIMIT 1",
    "3747": "SELECT id.chronname, id.student_count\nFROM institution_details AS id\nJOIN state_sector_details AS ssd ON id.state = ssd.state\nWHERE ssd.state_appr_value = (\n    SELECT MAX(state_appr_value) \n    FROM state_sector_details\n    WHERE state_post = '2011'\n) AND id.student_count = (\n    SELECT MIN(id2.student_count)\n    FROM institution_details AS id2\n    JOIN state_sector_details AS ssd2 ON id2.state = ssd2.state\n    WHERE ssd2.state_appr_value = (\n        SELECT MAX(state_appr_value) \n        FROM state_sector_details\n        WHERE state_post = '2011'\n    ) AND id2.site = '2010'\n)",
    "3748": "SELECT AVG(grad_cohort) AS average_black_students\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'Yale University'\nAND institution_grads.race = 'B'\nAND institution_grads.cohort = '4y bach'\nAND institution_grads.year BETWEEN 2002 AND 2005",
    "3749": "SELECT i.chronname, SUM(CAST(ig.grad_cohort AS INTEGER)) AS total_hispanic_graduates\nFROM institution_details i\nJOIN institution_grads ig ON i.unitid = ig.unitid\nWHERE i.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University')\nAND ig.race = 'H'\nGROUP BY i.chronname\nORDER BY total_hispanic_graduates DESC\nLIMIT 1;",
    "3750": "SELECT COUNT(*) AS total_institutions, GROUP_CONCAT(chronname, '; ') AS institution_names\nFROM institution_details\nWHERE state = 'Florida' AND level = '4-year' AND control = 'Public'",
    "3751": "SELECT i.chronname, ssd.state, ssd.state_appr_value\nFROM institution_details i\nJOIN state_sector_details ssd ON i.state = ssd.state\nWHERE i.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University')\nAND ssd.level = 'All' AND ssd.control = 'All'\nORDER BY CAST(ssd.state_appr_value AS REAL) ASC\nLIMIT 1;",
    "3752": "WITH StateWithMostSchools AS (\n    SELECT state\n    FROM state_sector_details\n    ORDER BY schools_count DESC\n    LIMIT 1\n)\nSELECT COUNT(chronname) AS NumberOfInstitutions, GROUP_CONCAT(chronname, '; ') AS InstitutionNames\nFROM institution_details\nWHERE state IN (SELECT state FROM StateWithMostSchools)\n      AND ft_pct >= 90;",
    "3753": "SELECT AVG(CAST(med_sat_value AS INTEGER)) AS avg_sat_value\nFROM institution_details\nWHERE state = (\n    SELECT state\n    FROM state_sector_details\n    WHERE state_appr_value = (\n        SELECT MIN(state_appr_value)\n        FROM state_sector_details\n        WHERE state_appr_value != 'NULL' AND state_appr_value != ''\n    )\n)",
    "3754": "SELECT i.chronname\nFROM institution_details i\nJOIN institution_grads g ON i.unitid = g.unitid\nWHERE g.gender = 'F' AND g.cohort = '4y other'\nORDER BY CAST(g.grad_cohort AS INTEGER) DESC\nLIMIT 1",
    "3755": "SELECT i.chronname, ig.grad_150\nFROM institution_grads ig\nJOIN institution_details i ON ig.unitid = i.unitid\nWHERE ig.year = 2013\nAND ig.race = 'B'\nAND ig.cohort = '4y bach'\nAND i.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University')\nORDER BY ig.grad_150 DESC\nLIMIT 1;",
    "3756": "SELECT AVG(CAST(grad_150 AS INTEGER)) AS avg_grad_150\nFROM institution_grads\nJOIN institution_details ON institution_grads.unitid = institution_details.unitid\nWHERE institution_details.chronname = 'United Education Institute-Huntington Park Campus'\nAND institution_grads.year BETWEEN 2011 AND 2013\nAND institution_grads.gender = 'M'\nAND institution_grads.race = 'H'\nAND institution_details.level = '2-year'",
    "3757": "SELECT chronname, state_appr_value\nFROM institution_details\nJOIN state_sector_details ON institution_details.state = state_sector_details.state\nORDER BY (awards_per_value - awards_per_natl_value) DESC\nLIMIT 1;",
    "3758": "SELECT COUNT(*) AS NumberOfBusinesses\nFROM Business\nWHERE state = 'AZ' AND stars < 3;",
    "3759": "SELECT COUNT(*) AS closed_businesses_in_AZ\nFROM Business\nWHERE active = 'False' AND state = 'AZ';",
    "3760": "SELECT COUNT(*) AS long_reviews_count\nFROM Reviews\nWHERE user_id = 36139 AND review_length = 'long'",
    "3761": "SELECT COUNT(*) AS uber_fans_count\nFROM Users\nWHERE user_fans = 'uber';",
    "3762": "SELECT COUNT(DISTINCT b.business_id) AS businesses_open_24_hours\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true';",
    "3763": "SELECT BA.attribute_value AS wi_fi_type\nFROM \"Business_Attributes\" BA\nJOIN Attributes A ON BA.attribute_id = A.attribute_id\nWHERE A.attribute_name = 'Wi-Fi' AND BA.business_id = 10172",
    "3764": "SELECT COUNT(DISTINCT Business.business_id) AS number_of_bars\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Bars'",
    "3765": "WITH BuffetCount AS (\n    SELECT COUNT(*) AS BuffetTotal\n    FROM Business_Categories BC\n    JOIN Categories C ON BC.category_id = C.category_id\n    WHERE C.category_name = 'Buffets'\n),\nGymCount AS (\n    SELECT COUNT(*) AS GymTotal\n    FROM Business_Categories BC\n    JOIN Categories C ON BC.category_id = C.category_id\n    WHERE C.category_name = 'Gyms'\n)\nSELECT (BuffetTotal - GymTotal) AS Difference\nFROM BuffetCount, GymCount",
    "3766": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Reviews r ON bc.business_id = r.business_id\nWHERE r.review_stars = 5\nGROUP BY c.category_name\nORDER BY COUNT(r.review_stars) DESC\nLIMIT 1;",
    "3767": "SELECT u.user_yelping_since_year\nFROM Reviews r\nJOIN Users u ON r.user_id = u.user_id\nWHERE r.review_stars = 5\nGROUP BY r.user_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "3768": "SELECT AVG(review_stars) AS average_rating\nFROM Reviews\nWHERE user_id = (\n    SELECT user_id\n    FROM Reviews\n    WHERE review_length = 'long'\n    GROUP BY user_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
    "3769": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN (\n    SELECT r.business_id\n    FROM Reviews r\n    WHERE r.review_length = 'long'\n    GROUP BY r.business_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n) AS MostLongReviews ON bc.business_id = MostLongReviews.business_id",
    "3770": "SELECT c.category_name\nFROM \"Business_Categories\" bc\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE bc.business_id = (\n    SELECT t.business_id\n    FROM \"Tips\" t\n    WHERE t.tip_length = 'short'\n    GROUP BY t.business_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
    "3771": "SELECT u.user_yelping_since_year\nFROM \"Tips\" t\nJOIN \"Users\" u ON t.user_id = u.user_id\nWHERE LENGTH(t.tip_length) <= 5 -- Assuming 'Short' tips are 5 characters or less\nGROUP BY t.user_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "3772": "SELECT c.category_name\nFROM \"Tips\" t\nJOIN \"Business_Categories\" bc ON t.business_id = bc.business_id\nJOIN \"Categories\" c ON bc.category_id = c.category_id\nWHERE t.user_id = 70271\nGROUP BY c.category_name\nHAVING COUNT(t.tip_length) = 1",
    "3773": "SELECT b.stars\nFROM \"Tips\" t\nJOIN \"Business\" b ON t.business_id = b.business_id\nWHERE t.user_id = 69722",
    "3774": "SELECT\n    (CAST(SUM(CASE WHEN category_name = 'Automotive' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT b.business_id)) * 100 AS percentage_automotive\nFROM\n    Business b\nJOIN\n    Business_Categories bc ON b.business_id = bc.business_id\nJOIN\n    Categories c ON bc.category_id = c.category_id;",
    "3775": "SELECT \n    ((CAST(SUM(CASE WHEN category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS REAL) - \n    SUM(CASE WHEN category_name = 'Men''s Clothing' THEN 1 ELSE 0 END)) / \n    SUM(CASE WHEN category_name = 'Men''s Clothing' THEN 1 ELSE 0 END)) * 100 AS percentage_more\nFROM \n    Categories\nJOIN \n    Business_Categories ON Categories.category_id = Business_Categories.category_id",
    "3776": "SELECT COUNT(*) AS users_since_2004\nFROM Users\nWHERE user_yelping_since_year = 2004;",
    "3777": "SELECT COUNT(*) \nFROM Users \nWHERE user_yelping_since_year = 2005 \nAND user_fans = 'None';",
    "3778": "SELECT COUNT(*) AS actively_running_businesses_in_tolleson\nFROM Business\nWHERE active = 'TRUE' AND city = 'Tolleson';",
    "3779": "SELECT COUNT(*) AS number_of_reviews\nFROM Reviews\nWHERE user_id = 21679;",
    "3780": "SELECT COUNT(*) AS five_star_reviews\nFROM Reviews\nWHERE business_id = 10682 AND review_stars = 5;",
    "3781": "SELECT business_id\nFROM Business\nWHERE city = 'Sun City' AND active = 'False'\nORDER BY CAST(review_count AS INTEGER) DESC\nLIMIT 1;",
    "3782": "SELECT COUNT(*) AS medium_reviews_count\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id\nWHERE Business.city = 'Yuma' AND Reviews.review_length = 'Medium'",
    "3783": "SELECT CASE \n         WHEN EXISTS (SELECT 1 \n                      FROM \"Business_Attributes\" BA \n                      JOIN Attributes A ON BA.attribute_id = A.attribute_id \n                      WHERE BA.business_id = 4960 \n                      AND A.attribute_name = 'Has TV') \n         THEN 'Yes' \n         ELSE 'No' \n       END AS \"Has TV\"",
    "3784": "SELECT COUNT(DISTINCT ba.business_id) AS number_of_dogs_allowed_businesses\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Dogs Allowed' AND ba.attribute_value = 'true';",
    "3785": "SELECT \n    business_id, \n    (strftime('%s', closing_time) - strftime('%s', opening_time)) / 3600 AS hours_open\nFROM \n    \"Business_Hours\" \nJOIN \n    Days ON Business_Hours.day_id = Days.day_id\nWHERE \n    business_id = 5734 \n    AND day_of_week = 'Saturday'",
    "3786": "SELECT COUNT(b.business_id) AS hair_removal_business_count\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Hair Removal';",
    "3787": "SELECT\n    (SELECT COUNT(*) FROM Business_Categories BC\n     JOIN Categories C ON BC.category_id = C.category_id\n     WHERE C.category_name = 'Chinese') -\n    (SELECT COUNT(*) FROM Business_Categories BC\n     JOIN Categories C ON BC.category_id = C.category_id\n     WHERE C.category_name = 'Filipino') AS difference",
    "3788": "SELECT B.city\nFROM \"Tips\" T\nJOIN \"Business\" B ON T.business_id = B.business_id\nWHERE T.user_id = 63469 AND T.likes = 1",
    "3789": "SELECT COUNT(*) AS music_types_count\nFROM Business_Attributes BA\nJOIN Attributes A ON BA.attribute_id = A.attribute_id\nWHERE BA.business_id = 1141\nAND A.attribute_name LIKE '%music%'\nAND BA.attribute_value = 'true';",
    "3790": "SELECT number_of_compliments \nFROM \"Users_Compliments\" \nJOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id \nWHERE Compliments.compliment_type = 'cute' AND Users_Compliments.user_id = 57400",
    "3791": "SELECT uc.user_id\nFROM \"Users_Compliments\" uc\nJOIN \"Compliments\" c ON uc.compliment_id = c.compliment_id\nWHERE c.compliment_type = 'funny'\nGROUP BY uc.user_id\nORDER BY SUM(CAST(uc.number_of_compliments AS INTEGER)) DESC\nLIMIT 1",
    "3792": "SELECT COUNT(DISTINCT b.business_id) AS drive_thru_businesses_in_scottsdale\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.city = 'Scottsdale'\nAND b.business_id < 1000\nAND a.attribute_name = 'Drive-Thru'\nAND ba.attribute_value = 'true'",
    "3793": "SELECT AVG(b.stars) AS average_rating\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true'",
    "3794": "SELECT \n    (CAST(SUM(CASE WHEN B.city = 'Phoenix' THEN 1 ELSE 0 END) AS REAL) / COUNT(B.business_id)) * 100 AS percentage\nFROM \n    Business B\nJOIN \n    Business_Attributes BA ON B.business_id = BA.business_id\nJOIN \n    Attributes A ON BA.attribute_id = A.attribute_id\nWHERE \n    A.attribute_name = 'BYOB' AND BA.attribute_value = 'TRUE'",
    "3795": "SELECT business_id, city, state, stars\nFROM Business\nWHERE state = 'AZ' AND stars = 5.0",
    "3796": "SELECT COUNT(*) AS active_underrated_businesses\nFROM Business\nWHERE active = 'true' AND review_count = 'Low';",
    "3797": "SELECT COUNT(user_id) \nFROM \"Users\" \nWHERE user_id BETWEEN 1 AND 20 \nAND user_fans = 'None' \nAND user_review_count = 'Low';",
    "3798": "SELECT B.business_id, B.city, B.state, BH.opening_time, BH.closing_time\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nWHERE C.category_name = 'fashion'",
    "3799": "SELECT COUNT(DISTINCT b.business_id) AS shopping_businesses_open_before_8AM\nFROM \"Business\" b\nJOIN \"Business_Categories\" bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nJOIN \"Business_Hours\" bh ON b.business_id = bh.business_id\nWHERE c.category_name = 'Shopping' AND bh.opening_time < '08:00'",
    "3800": "SELECT B.business_id, B.city, B.state, B.stars, B.review_count\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nWHERE C.category_name = 'pets' AND BH.closing_time > '9PM' AND B.active = 'Yes'",
    "3801": "SELECT COUNT(DISTINCT b.business_id) AS businesses_open_mon_to_thu\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nJOIN Business_Hours bh ON b.business_id = bh.business_id\nJOIN Days d ON bh.day_id = d.day_id\nWHERE d.day_of_week BETWEEN 'Monday' AND 'Thursday'\nAND d.day_id BETWEEN 2 AND 5",
    "3802": "SELECT SUM(CAST(b.review_count AS INTEGER)) AS total_review_count\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE b.city = 'Phoenix' AND c.category_name = 'Active Life'",
    "3803": "SELECT B.business_id AS \"businesses name\", B.stars AS rating\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nWHERE C.category_name = \"men's clothing\" AND B.stars < 5;",
    "3804": "SELECT Business.business_id\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Business.active = 'False' AND Reviews.review_votes_useful = 'Low'",
    "3805": "SELECT Business.business_id, Business.active\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Reviews.review_length = 'Long' AND Business.business_id BETWEEN 1 AND 20;",
    "3806": "SELECT B.business_id, B.active, B.city, B.state, B.stars, B.review_count\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nWHERE C.category_name = 'Fashion' AND B.city = 'Scottsdale'",
    "3807": "SELECT COUNT(*) AS medium_compliments_in_phoenix\nFROM Users_Compliments UC\nJOIN Users U ON UC.user_id = U.user_id\nJOIN Business B ON B.business_id IN (\n    SELECT business_id\n    FROM Tips\n    WHERE user_id = UC.user_id\n    UNION\n    SELECT business_id\n    FROM Reviews\n    WHERE user_id = UC.user_id\n)\nWHERE B.city = 'Phoenix'\nAND UC.number_of_compliments = 'Medium'",
    "3808": "SELECT Business.business_id\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nWHERE Business.city = 'Tempe' AND Business_Hours.opening_time < '08:00'",
    "3809": "SELECT COUNT(*) AS total_businesses\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nWHERE Business.city = 'Glendale'\nAND Business.active = 'true'\nAND Business_Hours.opening_time = '8AM'\nAND Business_Hours.closing_time = '6PM';",
    "3810": "SELECT \n    (CAST(SUM(CASE WHEN city = 'Phoenix' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_of_businesses_in_phoenix\nFROM \n    Business",
    "3811": "WITH ActiveLifeBusinesses AS (\n    SELECT b.city, b.review_count\n    FROM Business b\n    JOIN Business_Categories bc ON b.business_id = bc.business_id\n    JOIN Categories c ON bc.category_id = c.category_id\n    WHERE c.category_name = 'Active Life'\n),\nLowReviewCountCities AS (\n    SELECT city, COUNT(*) AS LowReviewCount\n    FROM ActiveLifeBusinesses\n    WHERE review_count = 'LOW'\n    GROUP BY city\n),\nTotalCitiesWithActiveLife AS (\n    SELECT COUNT(DISTINCT city) AS TotalCities\n    FROM ActiveLifeBusinesses\n),\nTotalLowReviewCountCities AS (\n    SELECT COUNT(DISTINCT city) AS LowReviewCities\n    FROM LowReviewCountCities\n)\nSELECT \n    TotalCitiesWithActiveLife.TotalCities AS TotalCitiesWithActiveLife,\n    TotalLowReviewCountCities.LowReviewCities AS CitiesWithLowReviewCount,\n    (CAST(TotalLowReviewCountCities.LowReviewCities AS REAL) / TotalCitiesWithActiveLife.TotalCities) * 100.0 AS PercentageOfCitiesWithLowReview\nFROM TotalCitiesWithActiveLife, TotalLowReviewCountCities",
    "3812": "SELECT COUNT(*) AS active_businesses_in_phoenix\nFROM Business\nWHERE active = 'true' AND city = 'Phoenix'",
    "3813": "SELECT COUNT(*) AS wonderful_experience_count\nFROM Business\nWHERE city = 'Scottsdale' AND stars > 3;",
    "3814": "SELECT AVG(stars) AS average_rating_of_inactive_businesses\nFROM Business\nWHERE active = 'False'",
    "3815": "SELECT COUNT(DISTINCT b.business_id) AS businesses_with_beer_and_wine\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.state = 'AZ' AND a.attribute_name = 'beer_and_wine' AND ba.attribute_value = 'beer_and_wine'",
    "3816": "SELECT city\nFROM Business\nJOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id\nJOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id\nWHERE Attributes.attribute_name = 'full_bar' AND Business_Attributes.attribute_value = 'full_bar'\nGROUP BY city\nORDER BY COUNT(Business.business_id) DESC\nLIMIT 1",
    "3817": "SELECT COUNT(*) AS Five_Star_Fashion_Businesses\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Fashion' AND Business.stars = 5",
    "3818": "SELECT city\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE category_name = 'Food' AND review_count = 'High'\nGROUP BY city\nORDER BY COUNT(Business.business_id) DESC\nLIMIT 1",
    "3819": "SELECT DISTINCT Business.business_id\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Business.city = 'Mesa' AND Reviews.review_stars > 3;",
    "3820": "SELECT city\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE review_votes_funny = 'Low'\nGROUP BY city\nORDER BY COUNT(Business.business_id) ASC\nLIMIT 1",
    "3821": "SELECT \n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM Business WHERE city = 'Chandler')) * 100 AS percentage\nFROM \n    Business\nJOIN \n    Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN \n    Categories ON Business_Categories.category_id = Categories.category_id\nWHERE \n    Business.city = 'Chandler' \n    AND Business.stars = 5 \n    AND Categories.category_name = 'Real Estate';",
    "3822": "SELECT COUNT(*) \nFROM \"Users\" \nWHERE user_yelping_since_year = 2012 \nAND user_votes_funny = 'High';",
    "3823": "SELECT review_votes_useful\nFROM Reviews\nWHERE user_id = 52592 AND business_id = 2;",
    "3824": "SELECT attribute_id\nFROM Attributes\nWHERE attribute_name LIKE '%payment%'",
    "3825": "SELECT review_length \nFROM Reviews \nWHERE business_id = 2 AND user_id = 612;",
    "3826": "SELECT COUNT(*) AS actively_running_businesses\nFROM Business\nWHERE active = 'true' AND city = 'Gilbert'",
    "3827": "SELECT COUNT(*) AS low_quality_reviews_in_AZ\nFROM Business\nWHERE state = 'AZ' AND review_count = 'low';",
    "3828": "SELECT DISTINCT Business.business_id\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Business.state = 'AZ' AND Reviews.review_stars = 5\nLIMIT 3",
    "3829": "SELECT attribute_name\nFROM Attributes\nWHERE attribute_id NOT IN (\n    SELECT attribute_id\n    FROM Business_Attributes\n    WHERE business_id = 2 AND attribute_value != 'none'\n)",
    "3830": "SELECT number_of_compliments \nFROM \"Users_Compliments\" \nJOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id \nWHERE compliment_type = 'cool' AND user_id = 33",
    "3831": "SELECT opening_time, closing_time\nFROM Business_Hours\nJOIN Days ON Business_Hours.day_id = Days.day_id\nWHERE business_id = 53 AND day_of_week = 'Friday'",
    "3832": "SELECT Attributes.attribute_name\nFROM Business_Attributes\nJOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id\nWHERE Business_Attributes.business_id = 56 AND Business_Attributes.attribute_value = 'true';",
    "3833": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nWHERE bc.business_id = 15",
    "3834": "SELECT COUNT(DISTINCT b.business_id) AS number_of_businesses\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE b.city = 'Scottsdale' AND c.category_name = 'Beauty & Spas'",
    "3835": "SELECT uc.user_id\nFROM \"Users_Compliments\" uc\nJOIN \"Compliments\" c ON uc.compliment_id = c.compliment_id\nWHERE c.compliment_type = 'cute' AND uc.number_of_compliments = 'Uber'",
    "3836": "SELECT COUNT(DISTINCT Business.business_id) AS wonderful_experience_businesses\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Categories.category_name = 'Accessories' AND Reviews.review_stars > 3",
    "3837": "SELECT \n    (strftime('%s', closing_time) - strftime('%s', opening_time)) / 3600 AS hours_open\nFROM \n    \"Business_Hours\"\nJOIN \n    \"Business\" ON Business.business_id = Business_Hours.business_id\nWHERE \n    Business_Hours.business_id = 12 \n    AND Business.city = 'Scottsdale' \n    AND Business_Hours.day_id = 3",
    "3838": "SELECT COUNT(*) \nFROM Business \nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id \nJOIN Days ON Business_Hours.day_id = Days.day_id \nJOIN Checkins ON Business.business_id = Checkins.business_id AND Business_Hours.day_id = Checkins.day_id \nWHERE Business.state = 'AZ' \nAND Days.day_of_week = 'Thursday' \nAND Checkins.label_time_4 = 'None';",
    "3839": "SELECT COUNT(*) AS number_of_businesses_in_scottsdale\nFROM Business\nWHERE city = 'Scottsdale';",
    "3840": "SELECT COUNT(*) AS running_businesses_in_arizona\nFROM Business\nWHERE state = 'AZ' AND active = 'true';",
    "3841": "SELECT COUNT(*) AS Positive_EliteStar_Businesses_In_Scottsdale\nFROM Business\nWHERE city = 'Scottsdale' AND stars > 3",
    "3842": "SELECT city, MAX(CAST(review_count AS INTEGER)) AS max_review_count\nFROM Business\nWHERE city IN ('Scottsdale', 'Anthem')\nGROUP BY city\nORDER BY max_review_count DESC\nLIMIT 1;",
    "3843": "SELECT COUNT(*) AS Elite_Businesses_In_Arizona\nFROM Business\nWHERE state = 'AZ' AND stars > 4;",
    "3844": "SELECT COUNT(*) AS total_businesses_in_arizona\nFROM Business\nWHERE state = 'AZ';",
    "3845": "SELECT city\nFROM Business\nWHERE stars = 5",
    "3846": "SELECT COUNT(*) AS total_reviews\nFROM Reviews\nWHERE user_id = 3;",
    "3847": "SELECT COUNT(*) AS long_reviews_count\nFROM Reviews\nWHERE user_id = 3 AND review_length = 'Long';",
    "3848": "SELECT COUNT(*) AS long_reviews_with_medium_useful_votes\nFROM Reviews\nWHERE user_id = 3 AND review_length = 'Long' AND review_votes_useful = 'medium'",
    "3849": "SELECT COUNT(*) AS users_since_2012\nFROM Users\nWHERE user_yelping_since_year >= 2012",
    "3850": "SELECT user_id\nFROM \"Users\"\nWHERE user_fans = 'High'",
    "3851": "SELECT COUNT(DISTINCT b.business_id) AS Businesses_Without_Alcohol\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Alcohol' AND ba.attribute_value = 'none'",
    "3852": "SELECT COUNT(DISTINCT b.business_id) AS Businesses_Without_Alcohol\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.state = 'AZ' AND a.attribute_name = 'Alcohol' AND ba.attribute_value = 'none'",
    "3853": "SELECT Business_Attributes.business_id\nFROM Business_Attributes\nJOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id\nWHERE Attributes.attribute_name = 'Good for Kids' AND Business_Attributes.attribute_value = 'true'",
    "3854": "SELECT COUNT(DISTINCT Business.business_id) AS Shopping_Business_Count\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Shopping'",
    "3855": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nWHERE bc.business_id = 1",
    "3856": "SELECT COUNT(DISTINCT b.business_id) AS Food_Businesses\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE b.active = 'true' AND c.category_name = 'Food'",
    "3857": "SELECT COUNT(DISTINCT b.business_id) AS Food_Businesses_In_Anthem\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE b.city = 'Anthem' AND c.category_name = 'Food';",
    "3858": "SELECT b.business_id\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nJOIN Reviews r ON b.business_id = r.business_id\nJOIN Elite e ON r.user_id = e.user_id\nWHERE c.category_name = 'Food'\nGROUP BY b.business_id\nORDER BY AVG(r.review_stars) DESC\nLIMIT 1",
    "3859": "SELECT COUNT(DISTINCT b.business_id) AS Food_Businesses_Good_For_Kids\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE c.category_name = 'Food'\nAND a.attribute_name = 'Good for Kids'\nAND ba.attribute_value = 'true'",
    "3860": "SELECT COUNT(*) AS number_of_reviews\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id\nWHERE Business.state = 'AZ' AND Reviews.user_id = 3",
    "3861": "SELECT DISTINCT Categories.category_name\nFROM Categories\nJOIN Business_Categories ON Categories.category_id = Business_Categories.category_id\nJOIN Business ON Business_Categories.business_id = Business.business_id\nWHERE Business.state = 'AZ'",
    "3862": "SELECT \n    business_id, \n    day_of_week, \n    opening_time || ' to ' || closing_time AS open_hours\nFROM \n    Business_Hours\nJOIN \n    Days ON Business_Hours.day_id = Days.day_id\nWHERE \n    business_id = 1 AND day_of_week = 'Tuesday'",
    "3863": "SELECT opening_time \nFROM \"Business_Hours\" \nJOIN Days ON Business_Hours.day_id = Days.day_id \nWHERE business_id = 1 AND day_of_week = 'Tuesday'",
    "3864": "SELECT COUNT(DISTINCT Business.business_id) AS businesses_closing_after_8pm_on_Mondays\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nJOIN Days ON Business_Hours.day_id = Days.day_id\nWHERE Days.day_of_week = 'Monday'\nAND Business_Hours.closing_time IN ('9PM', '10PM', '11PM', '12AM');",
    "3865": "SELECT B.business_id, BH.opening_time\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nJOIN Days D ON BH.day_id = D.day_id\nWHERE B.city = 'Anthem'\nAND B.active = 'true'\nAND D.day_of_week = 'Monday'",
    "3866": "SELECT COUNT(*) AS businesses_closing_at_12pm_on_sundays\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nJOIN Days ON Business_Hours.day_id = Days.day_id\nWHERE Business.state = 'AZ'\nAND Business_Hours.closing_time = '12PM'\nAND Days.day_of_week = 'Sunday'",
    "3867": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Business b ON bc.business_id = b.business_id\nJOIN Business_Hours bh ON b.business_id = bh.business_id\nJOIN Days d ON bh.day_id = d.day_id\nWHERE bh.closing_time = '12PM' AND d.day_of_week = 'Sunday'",
    "3868": "SELECT COUNT(DISTINCT ba.business_id) AS \"Good for Kids Businesses Open Everyday\"\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nJOIN Business_Hours bh ON ba.business_id = bh.business_id\nWHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true'\nGROUP BY ba.business_id\nHAVING COUNT(DISTINCT bh.day_id) = 7",
    "3869": "SELECT COUNT(*) AS users_became_elite_same_year_joined\nFROM \"Elite\"\nJOIN \"Users\" ON Elite.user_id = Users.user_id\nJOIN \"Years\" ON Elite.year_id = Years.year_id\nWHERE Users.user_yelping_since_year = Years.actual_year",
    "3870": "WITH MondayHours AS (\n    SELECT \n        BH.business_id,\n        BH.opening_time,\n        BH.closing_time,\n        (strftime('%s', BH.closing_time) - strftime('%s', BH.opening_time)) AS business_seconds\n    FROM \"Business_Hours\" BH\n    JOIN Days D ON BH.day_id = D.day_id\n    WHERE D.day_of_week = 'Monday'\n),\nShoppingBusinesses AS (\n    SELECT \n        BC.business_id\n    FROM \"Business_Categories\" BC\n    JOIN Categories C ON BC.category_id = C.category_id\n    WHERE C.category_name = 'Shopping'\n),\nMondayShoppingHours AS (\n    SELECT \n        MH.business_id,\n        MH.opening_time,\n        MH.closing_time,\n        MH.business_seconds\n    FROM MondayHours MH\n    JOIN ShoppingBusinesses SB ON MH.business_id = SB.business_id\n)\nSELECT \n    business_id,\n    opening_time,\n    closing_time,\n    business_seconds\nFROM MondayShoppingHours\nORDER BY business_seconds DESC\nLIMIT 1;",
    "3871": "SELECT b.business_id\nFROM \"Business_Hours\" bh\nJOIN Days d ON bh.day_id = d.day_id\nJOIN \"Business\" b ON bh.business_id = b.business_id\nWHERE d.day_of_week = 'Sunday'\nAND (strftime('%s', bh.closing_time) - strftime('%s', bh.opening_time)) > 12 * 3600",
    "3872": "SELECT COUNT(DISTINCT r.user_id) AS elite_users_count\nFROM Reviews r\nJOIN Elite e ON r.user_id = e.user_id\nWHERE r.business_id = 1",
    "3873": "SELECT COUNT(DISTINCT r.user_id) AS elite_users_count\nFROM Reviews r\nJOIN Elite e ON r.user_id = e.user_id\nGROUP BY r.user_id\nHAVING COUNT(r.business_id) > 10",
    "3874": "SELECT Business.business_id, Business.city, Business.state, COUNT(Reviews.business_id) AS review_count\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Business.state = 'AZ'\nGROUP BY Business.business_id\nORDER BY review_count DESC\nLIMIT 1;",
    "3875": "SELECT AVG(review_stars) AS average_stars\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id\nWHERE city = 'Anthem'",
    "3876": "SELECT AVG(review_stars) AS average_stars\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id\nWHERE Reviews.user_id = 3 AND Business.state = 'AZ'",
    "3877": "SELECT AVG(\n    (strftime('%s', closing_time) - strftime('%s', opening_time)) / 2\n) AS average_business_time_seconds\nFROM Business_Hours\nJOIN Days ON Business_Hours.day_id = Days.day_id\nWHERE business_id = 1 AND (day_of_week = 'Saturday' OR day_of_week = 'Sunday')",
    "3878": "SELECT AVG(stars) AS average_elitestar_rating\nFROM Business\nWHERE business_id IN (\n    SELECT business_id\n    FROM Business_Hours\n    JOIN Days ON Business_Hours.day_id = Days.day_id\n    WHERE closing_time = '12PM' AND day_of_week = 'Sunday'\n)",
    "3879": "SELECT COUNT(*) AS businesses_in_casa_grande\nFROM Business\nWHERE city = 'Casa Grande'",
    "3880": "SELECT COUNT(*) AS total_active_businesses_low_review_count\nFROM Business\nWHERE active = 'true' AND state = 'AZ' AND CAST(review_count AS INTEGER) < 5",
    "3881": "SELECT business_id\nFROM Business\nWHERE stars >= 2 AND stars < 4 AND city = 'Mesa'",
    "3882": "SELECT COUNT(*) AS high_fan_count_users\nFROM Users\nWHERE user_yelping_since_year >= 2011 AND user_yelping_since_year < 2014\nAND CAST(user_fans AS INTEGER) > (SELECT AVG(CAST(user_fans AS INTEGER)) FROM Users)",
    "3883": "SELECT review_length FROM Reviews WHERE user_id = 35026 AND business_id = 2",
    "3884": "SELECT a.attribute_name\nFROM Attributes a\nJOIN Business_Attributes ba ON a.attribute_id = ba.attribute_id\nJOIN Business b ON ba.business_id = b.business_id\nWHERE b.city = 'Chandler' AND b.review_count = (\n    SELECT MIN(review_count)\n    FROM Business\n    WHERE city = 'Chandler'\n)",
    "3885": "SELECT COUNT(*) AS mexican_businesses_below_4_stars\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Mexican' AND Business.stars < 4",
    "3886": "SELECT b.business_id, b.stars\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE b.active = 'true' AND c.category_name = 'Fashion'",
    "3887": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Business b ON bc.business_id = b.business_id\nWHERE b.stars = (SELECT MAX(stars) FROM Business)",
    "3888": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN (\n    SELECT r.business_id, MAX(r.review_stars) AS max_stars\n    FROM Reviews r\n    WHERE r.business_id BETWEEN 6 AND 9\n    GROUP BY r.business_id\n    ORDER BY LENGTH(r.review_length) ASC, r.review_stars DESC\n    LIMIT 1\n) AS filtered_reviews ON bc.business_id = filtered_reviews.business_id",
    "3889": "SELECT COUNT(DISTINCT b.business_id) AS active_businesses_with_caters_low_review_count\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.active = 'true'\nAND a.attribute_name = 'Caters'\nAND CAST(b.review_count AS INTEGER) < 10",
    "3890": "SELECT B.business_id, BH.opening_time, BH.closing_time\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nWHERE B.city = 'Tempe' AND B.stars = (\n    SELECT MAX(stars)\n    FROM Business\n    WHERE city = 'Tempe'\n)",
    "3891": "SELECT \n    C.category_name, \n    A.attribute_name\nFROM \n    Business B\nJOIN \n    Business_Categories BC ON B.business_id = BC.business_id\nJOIN \n    Categories C ON BC.category_id = C.category_id\nJOIN \n    Business_Attributes BA ON B.business_id = BA.business_id\nJOIN \n    Attributes A ON BA.attribute_id = A.attribute_id\nWHERE \n    B.active = 'true' \n    AND B.city = 'Chandler' \n    AND B.state = 'AZ' \n    AND B.review_count BETWEEN (SELECT review_count FROM Business WHERE active = 'true' AND city = 'Chandler' AND state = 'AZ' ORDER BY CAST(review_count AS INTEGER) LIMIT 1 OFFSET (SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Chandler' AND state = 'AZ') / 3 - 1)\n    AND (SELECT review_count FROM Business WHERE active = 'true' AND city = 'Chandler' AND state = 'AZ' ORDER BY CAST(review_count AS INTEGER) DESC LIMIT 1 OFFSET (SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Chandler' AND state = 'AZ') / 3 - 1)",
    "3892": "SELECT DISTINCT Categories.category_name\nFROM Categories\nJOIN Business_Categories ON Categories.category_id = Business_Categories.category_id\nJOIN Business ON Business_Categories.business_id = Business.business_id\nWHERE Business.active = 'true' AND Business.city = 'Surprise' AND Business.state = 'AZ'",
    "3893": "SELECT B.city, B.state\nFROM \"Business\" B\nJOIN \"Business_Hours\" BH ON B.business_id = BH.business_id\nJOIN \"Days\" D ON BH.day_id = D.day_id\nWHERE BH.opening_time = '8AM' AND BH.closing_time = '9PM' AND D.day_of_week = 'Friday'",
    "3894": "SELECT BA.attribute_value\nFROM \"Business_Attributes\" BA\nJOIN \"Business\" B ON BA.business_id = B.business_id\nWHERE B.active = 'true'\nAND B.city = 'Mesa'\nAND B.state = 'AZ'\nAND B.stars = 3\nAND CAST(B.review_count AS INTEGER) > (SELECT AVG(CAST(review_count AS INTEGER)) FROM \"Business\")",
    "3895": "SELECT BH.opening_time\nFROM \"Business_Hours\" AS BH\nJOIN \"Business\" AS B ON BH.business_id = B.business_id\nWHERE B.active = 'true' \nAND B.city = 'Chandler' \nAND B.review_count = 'medium'",
    "3896": "WITH AccessoriesBusinesses AS (\n    SELECT b.business_id\n    FROM Business b\n    JOIN Business_Categories bc ON b.business_id = bc.business_id\n    JOIN Categories c ON bc.category_id = c.category_id\n    WHERE c.category_name = 'Accessories'\n),\nLessThanFourStars AS (\n    SELECT COUNT(*) AS CountLessThanFourStars\n    FROM AccessoriesBusinesses ab\n    JOIN Business b ON ab.business_id = b.business_id\n    WHERE b.stars < 4\n),\nTotalAccessoriesBusinesses AS (\n    SELECT COUNT(*) AS TotalCount\n    FROM AccessoriesBusinesses\n)\nSELECT (CAST(CountLessThanFourStars AS REAL) / CAST(TotalCount AS REAL)) * 100 AS PercentageLessThanFourStars\nFROM LessThanFourStars, TotalAccessoriesBusinesses",
    "3897": "WITH AverageStarRating AS (\n    SELECT \n        SUM(stars) / COUNT(business_id) * 0.7 AS avg_star_70_percent\n    FROM \n        Business\n    WHERE \n        active = 'true' AND city = 'Tempe'\n)\nSELECT \n    BH.closing_time, \n    D.day_of_week\nFROM \n    Business AS B\nJOIN \n    Business_Hours AS BH ON B.business_id = BH.business_id\nJOIN \n    Days AS D ON BH.day_id = D.day_id,\n    AverageStarRating AS ASR\nWHERE \n    B.active = 'true' \n    AND B.city = 'Tempe' \n    AND B.stars > ASR.avg_star_70_percent",
    "3898": "SELECT COUNT(*) AS active_businesses_in_phoenix\nFROM Business\nWHERE active = 'true' AND city = 'Phoenix' AND state = 'Arizona';",
    "3899": "SELECT COUNT(*) AS high_review_count_businesses\nFROM Business\nWHERE review_count = 'High'",
    "3900": "SELECT COUNT(DISTINCT business_id) AS businesses_selling_beer_and_wine\nFROM Business_Attributes\nWHERE attribute_value = 'beer_and_wine'",
    "3901": "SELECT COUNT(attribute_id) AS attributes_owned_by_business_2\nFROM Business_Attributes\nWHERE business_id = 2",
    "3902": "SELECT COUNT(*) AS high_photo_compliments\nFROM \"Users_Compliments\"\nWHERE compliment_id = 1 AND number_of_compliments = 'High'",
    "3903": "SELECT COUNT(DISTINCT b.business_id) AS number_of_businesses\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.city = 'Phoenix' AND b.state = 'Arizona' AND a.attribute_name = 'waiter_service'",
    "3904": "SELECT B.business_id, A.attribute_name\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nJOIN Business_Attributes BA ON B.business_id = BA.business_id\nJOIN Attributes A ON BA.attribute_id = A.attribute_id\nWHERE BH.opening_time = BH.closing_time\nGROUP BY B.business_id\nHAVING COUNT(DISTINCT BH.day_id) = 7",
    "3905": "SELECT \n    Business.business_id, \n    Business.review_count\nFROM \n    Business\nJOIN \n    Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN \n    Categories ON Business_Categories.category_id = Categories.category_id\nWHERE \n    Categories.category_name = 'Fashion'\nORDER BY \n    CAST(Business.review_count AS INTEGER) DESC\nLIMIT 1;",
    "3906": "SELECT c.category_name, AVG(b.stars) AS average_stars\nFROM \"Business\" b\nJOIN \"Business_Categories\" bc ON b.business_id = bc.business_id\nJOIN \"Categories\" c ON bc.category_id = c.category_id\nWHERE b.state = 'AZ' AND b.stars >= 3\nGROUP BY c.category_name\nORDER BY average_stars DESC",
    "3907": "SELECT \n    IFNULL(SUM(CASE WHEN u.user_average_stars = '5' THEN 1 ELSE 0 END), 0) / \n    MAX(IFNULL(SUM(CASE WHEN u.user_average_stars = '1' THEN 1 ELSE 0 END), 1)) AS ratio\nFROM \n    \"Elite\" e\nJOIN \n    \"Users\" u ON e.user_id = u.user_id\nWHERE \n    e.year_id = 2013",
    "3908": "WITH EliteCounts AS (\n    SELECT \n        y.actual_year AS year,\n        COUNT(e.user_id) AS elite_count\n    FROM \n        Years y\n        LEFT JOIN Elite e ON y.year_id = e.year_id\n    WHERE \n        y.actual_year >= 2005\n    GROUP BY \n        y.actual_year\n),\nPreviousYearCounts AS (\n    SELECT \n        ec.year,\n        ec.elite_count,\n        LAG(ec.elite_count, 1, 0) OVER (ORDER BY ec.year) AS previous_year_count\n    FROM \n        EliteCounts ec\n)\nSELECT \n    py.year,\n    CASE \n        WHEN py.previous_year_count = 0 THEN 0\n        ELSE (CAST((py.elite_count - py.previous_year_count) AS REAL) / py.previous_year_count) * 100\n    END AS increment_percentage\nFROM \n    PreviousYearCounts py\nORDER BY \n    py.year;",
    "3909": "SELECT \n    COUNT(DISTINCT r.business_id) AS businesses_reviewed_by_user_3, \n    (strftime('%Y', 'now') - u.user_yelping_since_year) AS years_with_yelp\nFROM \n    Reviews r\nJOIN \n    Users u ON r.user_id = u.user_id\nWHERE \n    r.user_id = 3;",
    "3910": "SELECT \n    user_id, \n    (CAST(user_review_count AS FLOAT) / (strftime('%Y', 'now') - user_yelping_since_year)) AS yearly_average_review\nFROM \n    Users\nWHERE \n    user_id = 3;",
    "3911": "SELECT \n    b.business_id,\n    b.city,\n    b.state,\n    AVG(e.count_reviews) AS average_reviews_per_business\nFROM \n    Business AS b\nJOIN \n    (SELECT \n        r.business_id, \n        COUNT(r.review_id) AS count_reviews\n    FROM \n        Reviews AS r\n    INNER JOIN \n        Elite AS e ON r.user_id = e.user_id\n    GROUP BY \n        r.business_id) AS e ON b.business_id = e.business_id\nGROUP BY \n    b.business_id",
    "3912": "WITH EliteYears AS (\n    SELECT \n        user_id, \n        MIN(year_id) AS min_year, \n        MAX(year_id) AS max_year, \n        COUNT(year_id) AS total_years,\n        MAX(year_id) - MIN(year_id) + 1 AS year_span\n    FROM Elite\n    GROUP BY user_id\n    HAVING total_years >= 5 AND total_years = year_span\n),\nUserLikes AS (\n    SELECT \n        user_id, \n        SUM(likes) AS total_likes\n    FROM Tips\n    GROUP BY user_id\n),\nUserAverageStars AS (\n    SELECT \n        user_id, \n        AVG(user_average_stars) AS avg_stars\n    FROM Users\n    WHERE user_id IN (SELECT user_id FROM EliteYears)\n    GROUP BY user_id\n)\nSELECT \n    e.user_id, \n    u.avg_stars, \n    IFNULL(l.total_likes, 0) AS total_likes\nFROM EliteYears e\nJOIN UserAverageStars u ON e.user_id = u.user_id\nLEFT JOIN UserLikes l ON e.user_id = l.user_id",
    "3913": "WITH HotelTravelBusiness AS (\n    SELECT bc.business_id\n    FROM Business_Categories bc\n    JOIN Categories c ON bc.category_id = c.category_id\n    WHERE c.category_name = 'Hotel & Travel'\n),\nReviewCounts AS (\n    SELECT r.business_id, COUNT(*) AS review_count\n    FROM Reviews r\n    JOIN HotelTravelBusiness htb ON r.business_id = htb.business_id\n    GROUP BY r.business_id\n    ORDER BY review_count DESC\n    LIMIT 1\n),\nReviewStars AS (\n    SELECT r.review_stars\n    FROM Reviews r\n    JOIN ReviewCounts rc ON r.business_id = rc.business_id\n)\nSELECT b.business_id, b.city, b.state, b.stars, rc.review_count,\n       (SELECT AVG(review_stars * 1.0) FROM ReviewStars) AS avg_stars,\n       (SELECT SQRT(SUM((review_stars - avg_stars) * (review_stars - avg_stars)) / COUNT(*)) FROM ReviewStars, (SELECT AVG(review_stars * 1.0) AS avg_stars FROM ReviewStars)) AS std_deviation\nFROM Business b\nJOIN ReviewCounts rc ON b.business_id = rc.business_id;",
    "3914": "SELECT AVG(review_stars) AS average_review_stars, AVG(stars) AS average_business_stars\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id",
    "3915": "SELECT COUNT(*) AS active_business_count\nFROM Business\nWHERE active = 'true'",
    "3916": "SELECT business_id\nFROM Business\nWHERE city = 'Phoenix' AND review_count = 'Low'",
    "3917": "SELECT COUNT(*) AS total_active_business_in_AZ_with_high_review_count\nFROM Business\nWHERE active = 'true' AND state = 'AZ' AND review_count = 'High'",
    "3918": "SELECT business_id\nFROM Business\nWHERE stars >= 3 AND stars < 5 AND city = 'Tempe'",
    "3919": "SELECT COUNT(*) \nFROM \"Users\" \nWHERE user_yelping_since_year >= 2010 \nAND user_yelping_since_year < 2013 \nAND user_fans = 'Low'",
    "3920": "SELECT review_length\nFROM Reviews\nWHERE user_id = 60776 AND business_id = 1;",
    "3921": "SELECT a.attribute_name\nFROM Attributes a\nJOIN Business_Attributes ba ON a.attribute_id = ba.attribute_id\nJOIN Business b ON ba.business_id = b.business_id\nWHERE b.city = 'Scottsdale' AND b.review_count = 'High'",
    "3922": "SELECT COUNT(*) AS low_rating_automotive_businesses\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Automotive' AND Business.stars < 3",
    "3923": "SELECT B.business_id, B.stars\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nWHERE B.active = 'true' AND C.category_name = 'Pets'",
    "3924": "SELECT a.attribute_name\nFROM Attributes a\nJOIN Business_Attributes ba ON a.attribute_id = ba.attribute_id\nJOIN Business b ON ba.business_id = b.business_id\nWHERE b.stars = (SELECT MAX(stars) FROM Business)",
    "3925": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Business b ON bc.business_id = b.business_id\nJOIN Reviews r ON b.business_id = r.business_id\nWHERE r.review_length = 'Short'\nAND b.business_id BETWEEN 5 AND 10\nAND r.review_stars = (\n    SELECT MAX(review_stars)\n    FROM Reviews\n    WHERE business_id BETWEEN 5 AND 10\n    AND review_length = 'Short'\n)",
    "3926": "SELECT COUNT(DISTINCT b.business_id) AS active_businesses_with_wifi_medium_review\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.active = 'true'\nAND a.attribute_name = 'Wi-Fi'\nAND b.review_count = 'Medium'",
    "3927": "SELECT B.business_id, BH.opening_time, BH.closing_time\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nWHERE B.city = 'Gilbert' AND B.stars = (\n    SELECT MAX(stars)\n    FROM Business\n    WHERE city = 'Gilbert'\n)",
    "3928": "SELECT \n    Categories.category_name, \n    Attributes.attribute_name\nFROM \n    Business\nJOIN \n    Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN \n    Categories ON Business_Categories.category_id = Categories.category_id\nJOIN \n    Business_Attributes ON Business.business_id = Business_Attributes.business_id\nJOIN \n    Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id\nWHERE \n    Business.active = 'true' \n    AND Business.city = 'Mesa' \n    AND Business.state = 'AZ' \n    AND Business.review_count = 'Low'",
    "3929": "SELECT DISTINCT Categories.category_name\nFROM Categories\nJOIN Business_Categories ON Categories.category_id = Business_Categories.category_id\nJOIN Business ON Business_Categories.business_id = Business.business_id\nWHERE Business.active = 'FALSE' AND Business.state = 'AZ'",
    "3930": "SELECT B.city\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nJOIN Days D ON BH.day_id = D.day_id\nWHERE D.day_of_week = 'Saturday'\nAND BH.opening_time = '9AM'\nAND BH.closing_time = '9PM'",
    "3931": "SELECT BA.attribute_value\nFROM \"Business_Attributes\" BA\nJOIN \"Business\" B ON BA.business_id = B.business_id\nWHERE B.active = 'FALSE'\nAND B.review_count = 'Medium'\nAND B.stars = 3.5\nAND B.city = 'Phoenix'\nAND B.state = 'AZ'",
    "3932": "SELECT Business_Hours.opening_time\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nWHERE Business.active = 'true'\nAND Business.city = 'Surprise'\nAND Business.review_count = 'Low'",
    "3933": "SELECT \n    (CAST(COUNT(CASE WHEN B.stars < 3 THEN 1 END) AS FLOAT) / COUNT(B.business_id)) * 100 AS percentage_of_businesses_under_3_stars\nFROM \n    Business B\nJOIN \n    Business_Categories BC ON B.business_id = BC.business_id\nJOIN \n    Categories C ON BC.category_id = C.category_id\nWHERE \n    C.category_name = 'Local Services'",
    "3934": "SELECT BH.closing_time, D.day_of_week\nFROM \"Business_Hours\" BH\nJOIN Days D ON BH.day_id = D.day_id\nJOIN (\n    SELECT business_id\n    FROM \"Business\"\n    WHERE active = 'true'\n    AND city = 'Scottsdale'\n    AND stars > (\n        SELECT AVG(stars) * 0.6\n        FROM \"Business\"\n    )\n) AS FilteredBusiness ON BH.business_id = FilteredBusiness.business_id",
    "3935": "SELECT COUNT(*) \nFROM \"Users\" \nWHERE user_yelping_since_year = 2014 \nAND user_fans = 'None'",
    "3936": "SELECT user_id\nFROM \"Users_Compliments\"\nWHERE number_of_compliments < '5'\nGROUP BY user_id\nHAVING COUNT(compliment_id) < 5\nLIMIT 5",
    "3937": "SELECT user_id\nFROM Users\nWHERE user_average_stars = '4'\nLIMIT 10",
    "3938": "SELECT B.city\nFROM \"Business\" B\nJOIN \"Business_Hours\" BH ON B.business_id = BH.business_id\nJOIN \"Days\" D ON BH.day_id = D.day_id\nWHERE BH.opening_time = '10AM' AND BH.closing_time = '12PM' AND D.day_of_week = 'Sunday'",
    "3939": "SELECT COUNT(DISTINCT ba.business_id) AS businesses_open_24_hours\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true'",
    "3940": "SELECT DISTINCT ba1.business_id\nFROM Business_Attributes AS ba1\nJOIN Business_Attributes AS ba2 ON ba1.business_id = ba2.business_id\nJOIN Attributes AS a1 ON ba1.attribute_id = a1.attribute_id\nJOIN Attributes AS a2 ON ba2.attribute_id = a2.attribute_id\nJOIN Business ON ba1.business_id = Business.business_id\nWHERE a1.attribute_name = 'Good for Groups'\nAND a2.attribute_name = 'Good for Dancing'\nAND Business.active = 'true'\nLIMIT 5",
    "3941": "SELECT B.business_id, B.city, B.active\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nJOIN Days D ON BH.day_id = D.day_id\nWHERE B.active = 'true' AND B.city = 'Ahwatukee' AND D.day_of_week = 'Sunday'",
    "3942": "SELECT DISTINCT Categories.category_name\nFROM Categories\nJOIN Business_Categories ON Categories.category_id = Business_Categories.category_id\nJOIN Business ON Business_Categories.business_id = Business.business_id\nWHERE Business.active = 'true' AND Business.state != 'AZ'",
    "3943": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Business b ON bc.business_id = b.business_id\nWHERE b.review_count = 'High' AND b.stars = 2",
    "3944": "SELECT COUNT(DISTINCT ba.business_id) AS romantic_ambiance_business_count\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'ambience_romantic' AND ba.attribute_value = 'true'",
    "3945": "SELECT B.city\nFROM \"Business\" B\nJOIN \"Business_Hours\" BH ON B.business_id = BH.business_id\nJOIN \"Days\" D ON BH.day_id = D.day_id\nWHERE BH.opening_time = '1PM' AND BH.closing_time = '6PM' AND D.day_of_week = 'Saturday'",
    "3946": "SELECT SUM(user_fans) AS total_fans_of_most_liked_comments\nFROM Users\nWHERE user_id IN (\n    SELECT user_id\n    FROM Tips\n    ORDER BY likes DESC\n    LIMIT 1\n)",
    "3947": "SELECT B.city\nFROM Business B\nJOIN Checkins C ON B.business_id = C.business_id\nJOIN Days D ON C.day_id = D.day_id\nWHERE D.day_of_week = 'Saturday'\nAND C.label_time_0 = 'High'\nAND C.label_time_1 = 'High'",
    "3948": "SELECT COUNT(*) AS Shopping_Centers_High_Review_Count\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Shopping Centers' AND Business.review_count = 'High'",
    "3949": "SELECT COUNT(DISTINCT ba.business_id) AS businesses_accepting_insurance\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Accepts Insurance' AND ba.attribute_value = 'true'",
    "3950": "SELECT AVG(review_stars) AS average_review_stars\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id\nWHERE Business.state IN ('SC', 'CA')",
    "3951": "WITH MondayBusinesses AS (\n    SELECT bh.business_id\n    FROM Business_Hours bh\n    JOIN Days d ON bh.day_id = d.day_id\n    WHERE d.day_of_week = 'Monday'\n    AND bh.opening_time = '10AM'\n    AND bh.closing_time = '9PM'\n),\nTuesdayBusinesses AS (\n    SELECT bh.business_id\n    FROM Business_Hours bh\n    JOIN Days d ON bh.day_id = d.day_id\n    WHERE d.day_of_week = 'Tuesday'\n    AND bh.opening_time = '10AM'\n    AND bh.closing_time = '9PM'\n),\nMondayCount AS (\n    SELECT COUNT(DISTINCT business_id) AS MondayBusinessCount\n    FROM MondayBusinesses\n),\nTuesdayCount AS (\n    SELECT COUNT(DISTINCT business_id) AS TuesdayBusinessCount\n    FROM TuesdayBusinesses\n)\nSELECT (SELECT MondayBusinessCount FROM MondayCount) - (SELECT TuesdayBusinessCount FROM TuesdayCount) AS Difference",
    "3952": "SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance';",
    "3953": "SELECT COUNT(*) AS actively_running_businesses\nFROM Business\nWHERE active = 'true' AND city = 'Phoenix'",
    "3954": "SELECT COUNT(*) AS NumberOf4StarBusinesses\nFROM Business\nWHERE stars = 4 AND city = 'Mesa'",
    "3955": "SELECT COUNT(*) AS High_Review_Count_Businesses\nFROM Business\nWHERE city = 'Gilbert' AND review_count = 'High'",
    "3956": "SELECT business_id\nFROM Business\nWHERE active = 'true' AND city = 'Gilbert'\nORDER BY CAST(review_count AS INTEGER) DESC\nLIMIT 1",
    "3957": "SELECT COUNT(*) AS long_reviews_count\nFROM \"Reviews\" JOIN \"Business\"\nON Reviews.business_id = Business.business_id\nWHERE Business.city = 'Tempe'\nAND Business.stars = 3.5\nAND Business.review_count = 'Uber'\nAND Reviews.review_length = 'Long'",
    "3958": "SELECT BA.attribute_value AS noise_level\nFROM Business_Attributes BA\nJOIN Attributes A ON BA.attribute_id = A.attribute_id\nJOIN Business B ON BA.business_id = B.business_id\nWHERE A.attribute_name = 'Noise Level'\nAND B.city = 'Mesa'\nAND B.review_count = 'Uber'",
    "3959": "SELECT CASE \n         WHEN ba.attribute_value = 'True' THEN 'Yes' \n         ELSE 'No' \n       END AS is_good_for_supper\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE ba.business_id = 14033 AND a.attribute_name = 'good_for_dinner'",
    "3960": "SELECT \n    (strftime('%s', closing_time) - strftime('%s', opening_time)) / 3600 AS hours_open\nFROM \n    \"Business_Hours\"\nJOIN \n    Days ON Business_Hours.day_id = Days.day_id\nWHERE \n    business_id = 15098 \n    AND day_of_week = 'Monday'",
    "3961": "SELECT r.business_id\nFROM Reviews r\nJOIN Business b ON r.business_id = b.business_id\nWHERE r.review_stars = 5\nAND r.review_votes_funny = 'Uber'\nAND b.city = 'Phoenix'",
    "3962": "SELECT b.city\nFROM \"Business\" b\nJOIN \"Tips\" t ON b.business_id = t.business_id\nWHERE t.tip_length = 'Medium' AND t.likes = 3",
    "3963": "SELECT \n    UC.number_of_compliments\nFROM \n    \"Users_Compliments\" UC\nJOIN \n    \"Compliments\" C ON UC.compliment_id = C.compliment_id\nJOIN \n    \"Users\" U ON UC.user_id = U.user_id\nWHERE \n    C.compliment_type = 'funny'\n    AND U.user_yelping_since_year = 2010\n    AND U.user_average_stars = '4.5'",
    "3964": "SELECT number_of_compliments \nFROM \"Users_Compliments\" \nJOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id \nWHERE compliment_type = 'cool' AND user_id = 41717",
    "3965": "SELECT EXISTS(\n    SELECT 1 \n    FROM \"Business_Attributes\" \n    JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id \n    WHERE Business_Attributes.business_id = 12476 \n    AND Attributes.attribute_name = 'parking lot'\n) AS has_parking_lot;",
    "3966": "SELECT EXISTS(\n    SELECT 1 \n    FROM \"Business_Attributes\" \n    WHERE business_id = 12476 \n    AND attribute_value = 'payment_types_mastercard'\n) AS mastercard_payment_possible;",
    "3967": "SELECT \n    (SELECT CAST(COUNT(DISTINCT bc.business_id) AS FLOAT)\n     FROM \"Business_Categories\" bc\n     JOIN Categories c ON bc.category_id = c.category_id\n     WHERE c.category_name = 'Pets') / \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM \"Business\") * 100 AS percentage_of_pets",
    "3968": "SELECT \n    (SELECT COUNT(*) FROM Business_Categories BC \n     JOIN Categories C ON BC.category_id = C.category_id \n     WHERE C.category_name = 'Women''s Clothing') * 1.0 /\n    (SELECT COUNT(*) FROM Business_Categories BC \n     JOIN Categories C ON BC.category_id = C.category_id \n     WHERE C.category_name = 'Men''s Clothing') AS times",
    "3969": "SELECT business_id, active, city\nFROM Business\nWHERE state = 'CA'",
    "3970": "SELECT \n    (CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) / COUNT(business_id)) * 100 AS percentage_running\nFROM \n    Business",
    "3971": "SELECT attribute_id, attribute_name\nFROM Attributes\nWHERE attribute_name LIKE 'music%'",
    "3972": "SELECT year_id, COUNT(user_id) AS elite_user_count\nFROM Elite\nJOIN Years ON Elite.year_id = Years.year_id\nWHERE actual_year BETWEEN 2006 AND 2007\nGROUP BY year_id\nORDER BY elite_user_count DESC\nLIMIT 1",
    "3973": "SELECT \n    (CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_low_compliments\nFROM \n    \"Users_Compliments\"",
    "3974": "SELECT Reviews.business_id, Reviews.user_id\nFROM Reviews\nWHERE Reviews.review_votes_cool = 'Uber'",
    "3975": "SELECT t.user_id, t.business_id, t.tip_length\nFROM \"Tips\" t\nJOIN \"Users\" u ON t.user_id = u.user_id\nWHERE u.user_yelping_since_year = 2004 AND u.user_fans = 'High'",
    "3976": "SELECT \n    R.business_id, \n    B.active, \n    R.user_id, \n    U.user_yelping_since_year\nFROM \n    Reviews R\nJOIN \n    Business B ON R.business_id = B.business_id\nJOIN \n    Users U ON R.user_id = U.user_id\nWHERE \n    (R.review_votes_funny = 'Uber' OR R.review_votes_cool = 'Uber')\n    AND LENGTH(R.review_length) > 0",
    "3977": "SELECT a.attribute_id, ba.business_id, b.city, b.active AS inactive_status\nFROM Attributes a\nJOIN Business_Attributes ba ON a.attribute_id = ba.attribute_id\nJOIN Business b ON ba.business_id = b.business_id\nWHERE a.attribute_name = 'music_playlist' AND b.active = 'false'",
    "3978": "SELECT \n    (COUNT(DISTINCT CASE WHEN a.attribute_name = 'Accepts Credit Cards' THEN ba.business_id END) * 1.0 / COUNT(DISTINCT b.business_id)) * 100 AS percentage_accepts_credit_cards\nFROM \n    Business b\nLEFT JOIN \n    Business_Attributes ba ON b.business_id = ba.business_id\nLEFT JOIN \n    Attributes a ON ba.attribute_id = a.attribute_id",
    "3979": "SELECT r.user_id, r.review_length\nFROM Reviews r\nJOIN Business b ON r.business_id = b.business_id\nWHERE b.active = 'false'\nAND b.city = 'San Tan Valley'\nAND r.review_stars = 5",
    "3980": "SELECT \n    U.user_average_stars, \n    E.year_id AS elite_year, \n    C.compliment_type\nFROM \n    \"Users\" U\nJOIN \n    \"Elite\" E ON U.user_id = E.user_id\nJOIN \n    \"Users_Compliments\" UC ON U.user_id = UC.user_id\nJOIN \n    \"Compliments\" C ON UC.compliment_id = C.compliment_id\nWHERE \n    U.user_id = 6027 \n    AND UC.number_of_compliments = 'Uber'",
    "3981": "SELECT b.business_id, b.state, b.city\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Coffee & Tea'\nLIMIT 5",
    "3982": "SELECT \n    Categories.category_name,\n    COUNT(DISTINCT Business_Categories.business_id) AS business_count,\n    (COUNT(DISTINCT Business_Categories.business_id) * 100.0 / (SELECT COUNT(*) FROM Business)) AS percentage\nFROM \n    Business_Categories\nJOIN \n    Categories ON Business_Categories.category_id = Categories.category_id\nGROUP BY \n    Categories.category_name\nHAVING \n    percentage > 10",
    "3983": "SELECT r.user_id, u.user_fans\nFROM \"Reviews\" r\nJOIN \"Business\" b ON r.business_id = b.business_id\nJOIN \"Users\" u ON r.user_id = u.user_id\nWHERE b.city = 'Sun Lakes' AND b.stars = 5",
    "3984": "SELECT \n    (SELECT COUNT(*) \n     FROM \"Business_Categories\" BC \n     JOIN Categories C ON BC.category_id = C.category_id \n     WHERE C.category_name = 'Men''s Clothing') AS Mens_Clothing,\n    (SELECT COUNT(*) \n     FROM \"Business_Categories\" BC \n     JOIN Categories C ON BC.category_id = C.category_id \n     WHERE C.category_name = 'Women''s Clothing') AS Womens_Clothing",
    "3985": "SELECT C.compliment_type, U.user_fans\nFROM \"Users_Compliments\" UC\nJOIN \"Compliments\" C ON UC.compliment_id = C.compliment_id\nJOIN \"Users\" U ON UC.user_id = U.user_id\nWHERE UC.number_of_compliments = 'Uber' AND U.user_id < 100\nORDER BY UC.number_of_compliments DESC\nLIMIT 1",
    "3986": "SELECT Business.business_id, Business.city, Business.state, Business.stars, Business.review_count\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nWHERE Business_Hours.closing_time = '8PM';",
    "3987": "SELECT COUNT(*) AS two_star_businesses_in_phoenix\nFROM Business\nWHERE stars = 2.0 AND city = 'Phoenix' AND state = 'AZ'",
    "3988": "SELECT COUNT(*) AS WonderfulExperienceCount\nFROM Business\nWHERE city = 'Tempe' AND stars > 3;",
    "3989": "SELECT *\nFROM \"Users\"\nWHERE user_average_stars < '3'\n  AND user_yelping_since_year = 2012",
    "3990": "SELECT \n    (CAST(COUNT(CASE WHEN stars = 5 THEN 1 END) AS REAL) / COUNT(business_id)) * 100 AS percentage_of_5_stars\nFROM \n    Business",
    "3991": "SELECT MAX(review_count) - MIN(review_count) AS review_count_difference\nFROM (\n    SELECT business_id, COUNT(*) AS review_count\n    FROM Reviews\n    GROUP BY business_id\n)",
    "3992": "SELECT B.business_id, B.city, B.state, B.stars, B.review_count\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nWHERE C.category_name = 'Tires'\nGROUP BY B.business_id\nHAVING COUNT(DISTINCT BH.day_id) = 7;",
    "3993": "SELECT u.user_id\nFROM \"Elite\" e\nJOIN \"Years\" y ON e.year_id = y.year_id\nJOIN \"Users\" u ON e.user_id = u.user_id\nWHERE y.actual_year = 2012",
    "3994": "SELECT b.business_id\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Shopping' AND b.stars = 4",
    "3995": "SELECT COUNT(DISTINCT c.business_id) AS low_checkin_businesses\nFROM Checkins c\nJOIN Days d ON c.day_id = d.day_id\nWHERE d.day_of_week = 'Sunday' AND c.label_time_10 = 'Low'",
    "3996": "SELECT COUNT(DISTINCT Reviews.business_id) AS Glendale_Businesses_Reviewed_By_User_20241\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id\nWHERE Business.city = 'Glendale' AND Reviews.user_id = 20241;",
    "3997": "SELECT DISTINCT B.city\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nWHERE C.category_name = 'Pet Services'",
    "3998": "SELECT COUNT(*) AS photos_type_compliments\nFROM \"Users_Compliments\" UC\nJOIN Compliments C ON UC.compliment_id = C.compliment_id\nJOIN \"Users\" U ON UC.user_id = U.user_id\nWHERE C.compliment_type = 'photos' AND U.user_votes_cool = 'High'",
    "3999": "SELECT COUNT(DISTINCT b.business_id) AS closed_businesses_with_more_than_10_attributes\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nWHERE b.active = 'false'\nGROUP BY b.business_id\nHAVING COUNT(ba.attribute_id) > 10",
    "4000": "SELECT B.business_id, B.city\nFROM Business B\nJOIN Business_Attributes BA ON B.business_id = BA.business_id\nJOIN Attributes A ON BA.attribute_id = A.attribute_id\nWHERE B.city = 'Mesa' AND A.attribute_name = 'Alcohol' AND BA.attribute_value = 'Yes'",
    "4001": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN r.review_votes_funny = 'Low' THEN b.business_id END) AS FLOAT) / COUNT(DISTINCT b.business_id)) * 100 AS percentage_low_funny_votes\nFROM \n    Business b\nJOIN \n    Reviews r ON b.business_id = r.business_id\nWHERE \n    b.city = 'Phoenix'",
    "4002": "SELECT\n    (SELECT COUNT(DISTINCT bc.business_id)\n     FROM \"Business_Categories\" bc\n     JOIN Categories c ON bc.category_id = c.category_id\n     WHERE c.category_name = 'Shopping') * 1.0 /\n    (SELECT COUNT(DISTINCT bc.business_id)\n     FROM \"Business_Categories\" bc\n     JOIN Categories c ON bc.category_id = c.category_id\n     WHERE c.category_name = 'Pets') AS ratio",
    "4003": "SELECT COUNT(*) AS number_of_businesses\nFROM Business_Categories BC\nJOIN Categories C ON BC.category_id = C.category_id\nWHERE C.category_name = 'Banks & Credit Unions'",
    "4004": "SELECT COUNT(*) AS active_businesses_from_casa_grande\nFROM Business\nWHERE active = 'true' AND city = 'Casa Grande'",
    "4005": "SELECT opening_time \nFROM \"Business_Hours\" \nJOIN Days ON Business_Hours.day_id = Days.day_id \nWHERE business_id = 12 AND day_of_week = 'Monday'",
    "4006": "SELECT COUNT(DISTINCT ba.business_id) AS businesses_good_for_kids\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true'",
    "4007": "SELECT \n    Business.business_id, \n    Business.city, \n    Business.state, \n    Business.stars, \n    Business.review_count\nFROM \n    Business\nWHERE \n    Business.active = 'true' \n    AND Business.city = 'Gilbert' \n    AND Business.review_count = 'High'\nORDER BY \n    Business.stars DESC, \n    Business.review_count DESC\nLIMIT 1;",
    "4008": "SELECT Categories.category_name\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Business.stars = 5 AND Business.city = 'Ahwatukee' AND Business.state = 'AZ'",
    "4009": "SELECT \n    ROUND(\n        (CAST(COUNT(*) AS REAL) / \n        (SELECT COUNT(*) \n         FROM Business \n         WHERE active = 'false' AND city = 'Avondale')) * 100, 2) AS percentage_wonderful_experience\nFROM Business\nWHERE active = 'false' AND city = 'Avondale' AND stars > 3",
    "4010": "SELECT u.user_id, CASE WHEN e.user_id IS NOT NULL THEN 'Yes' ELSE 'No' END AS Elite_Status\nFROM Users u\nLEFT JOIN Elite e ON u.user_id = e.user_id\nWHERE u.user_yelping_since_year = 2004",
    "4011": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM Reviews WHERE review_stars = 5)) * 100 AS percentage_long_reviews\nFROM \n    Reviews\nWHERE \n    review_stars = 5\n    AND review_length = 'Long'",
    "4012": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM \"Users\" WHERE user_average_stars >= '4')) * 100 AS percentage\nFROM \n    \"Users\"\nWHERE \n    user_average_stars >= '4'\n    AND user_fans = '0'",
    "4013": "SELECT COUNT(*) AS short_tips_count\nFROM \"Tips\"\nWHERE business_id = 2 AND tip_length = 'Short'",
    "4014": "SELECT user_id\nFROM Users\nWHERE user_average_stars = '5'\nORDER BY user_yelping_since_year ASC\nLIMIT 1",
    "4015": "SELECT B.business_id, B.city, H.day_id, H.opening_time, H.closing_time\nFROM \"Business_Hours\" H\nJOIN \"Business\" B ON H.business_id = B.business_id\nWHERE B.city = 'Black Canyon City'\nAND B.review_count > (\n    SELECT AVG(CAST(review_count AS INTEGER))\n    FROM \"Business\"\n    WHERE city = 'Black Canyon City'\n)",
    "4016": "WITH HighComplimentUsers AS (\n    SELECT user_id\n    FROM \"Users_Compliments\"\n    WHERE number_of_compliments = 'High'\n),\nCuteComplimentCount AS (\n    SELECT COUNT(DISTINCT uc.user_id) AS cute_count\n    FROM \"Users_Compliments\" uc\n    JOIN Compliments c ON uc.compliment_id = c.compliment_id\n    WHERE c.compliment_type = 'cute'\n    AND uc.user_id IN (SELECT user_id FROM HighComplimentUsers)\n),\nTotalHighComplimentUsers AS (\n    SELECT COUNT(*) AS total_high\n    FROM HighComplimentUsers\n)\nSELECT (CuteComplimentCount.cute_count * 100.0 / TotalHighComplimentUsers.total_high) AS percentage_cute_compliments\nFROM CuteComplimentCount, TotalHighComplimentUsers;",
    "4017": "SELECT COUNT(DISTINCT b.business_id) AS businesses_with_no_attributes\nFROM Business b\nLEFT JOIN Business_Attributes ba ON b.business_id = ba.business_id\nWHERE ba.attribute_id IS NULL OR ba.attribute_value IN ('none', 'no', 'false')",
    "4018": "SELECT opening_time, closing_time\nFROM \"Business_Hours\"\nWHERE business_id = 1 AND day_id = 2;",
    "4019": "SELECT DISTINCT B.city\nFROM Business B\nJOIN Reviews R ON B.business_id = R.business_id\nWHERE R.review_length = 'Medium'",
    "4020": "SELECT closing_time \nFROM \"Business_Hours\" \nJOIN Days ON Business_Hours.day_id = Days.day_id \nWHERE business_id = 4 AND day_of_week = 'Sunday'",
    "4021": "SELECT Business.business_id\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Reviews.review_length = 'Short' AND Business.city = 'Phoenix'",
    "4022": "SELECT COUNT(DISTINCT u.user_id) AS users_with_high_compliments\nFROM \"Users\" u\nJOIN \"Users_Compliments\" uc ON u.user_id = uc.user_id\nWHERE u.user_fans = 'Medium' AND uc.number_of_compliments = 'High'",
    "4023": "SELECT u.user_id\nFROM \"Users\" u\nJOIN \"Users_Compliments\" uc ON u.user_id = uc.user_id\nWHERE uc.number_of_compliments = 'Low'\nAND u.user_yelping_since_year = 2012",
    "4024": "SELECT COUNT(DISTINCT b.business_id) AS businesses_without_attribute_in_gilbert\nFROM Business b\nLEFT JOIN Business_Attributes ba ON b.business_id = ba.business_id AND ba.attribute_value != 'None'\nWHERE b.city = 'Gilbert' AND ba.attribute_id IS NULL",
    "4025": "SELECT COUNT(*) AS businesses_with_full_bar\nFROM Business\nJOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id\nJOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id\nWHERE Attributes.attribute_name = 'full_bar' AND Business_Attributes.attribute_value = 'full_bar'",
    "4026": "SELECT DISTINCT B.state\nFROM \"Business\" B\nJOIN \"Business_Hours\" BH ON B.business_id = BH.business_id\nWHERE BH.opening_time = '01:00'",
    "4027": "SELECT Categories.category_name\nFROM Categories\nJOIN Business_Categories ON Categories.category_id = Business_Categories.category_id\nWHERE Business_Categories.business_id = 5;",
    "4028": "SELECT user_id\nFROM \"Users_Compliments\"\nJOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id\nWHERE compliment_type = 'photos'",
    "4029": "WITH MediumTips AS (\n    SELECT\n        user_id,\n        tip_length\n    FROM\n        Tips\n    WHERE\n        tip_length = 'Medium'\n),\nTotalTips AS (\n    SELECT\n        COUNT(*) AS total_tips\n    FROM\n        Tips\n),\nMediumTipUsers AS (\n    SELECT\n        MT.user_id,\n        U.user_yelping_since_year\n    FROM\n        MediumTips MT\n    JOIN\n        Users U ON MT.user_id = U.user_id\n),\nMediumTipCount AS (\n    SELECT\n        COUNT(*) AS medium_tips\n    FROM\n        MediumTips\n)\nSELECT\n    MTU.user_yelping_since_year,\n    (CAST(MTC.medium_tips AS REAL) / TT.total_tips) * 100 AS percentage_medium_tips\nFROM\n    MediumTipUsers MTU,\n    MediumTipCount MTC,\n    TotalTips TT\nGROUP BY\n    MTU.user_yelping_since_year",
    "4030": "WITH MesaBusinesses AS (\n    SELECT COUNT(*) AS MesaCount\n    FROM Business\n    WHERE city = 'Mesa'\n),\nTotalBusinesses AS (\n    SELECT COUNT(*) AS TotalCount\n    FROM Business\n),\nMesaPercentage AS (\n    SELECT (CAST(MesaCount AS REAL) / TotalCount) * 100 AS Percentage\n    FROM MesaBusinesses, TotalBusinesses\n)\nSELECT BA.attribute_value, MP.Percentage\nFROM Business_Attributes AS BA\nJOIN Business ON BA.business_id = Business.business_id\nJOIN MesaPercentage AS MP\nWHERE Business.city = 'Mesa'",
    "4031": "SELECT DISTINCT B.state\nFROM \"Business\" B\nJOIN \"Business_Hours\" BH ON B.business_id = BH.business_id\nWHERE BH.closing_time = '12AM'",
    "4032": "SELECT COUNT(DISTINCT b.business_id) AS businesses_in_peoria_with_beer_and_wine\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.city = 'Peoria' AND ba.attribute_value = 'beer_and_wine' AND a.attribute_name = 'beer_and_wine'",
    "4033": "SELECT u.user_id, u.user_yelping_since_year\nFROM \"Users\" u\nJOIN \"Users_Compliments\" uc ON u.user_id = uc.user_id\nWHERE uc.number_of_compliments = 'High'\nORDER BY u.user_yelping_since_year ASC\nLIMIT 1",
    "4034": "SELECT business_id\nFROM Reviews\nGROUP BY business_id\nORDER BY COUNT(user_id) DESC\nLIMIT 1;",
    "4035": "SELECT year_id, COUNT(user_id) AS elite_user_count\nFROM Elite\nGROUP BY year_id\nORDER BY elite_user_count DESC\nLIMIT 1;",
    "4036": "SELECT COUNT(DISTINCT Business.business_id) AS five_star_uber_funny_businesses\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Business.stars = 5.0 AND Reviews.review_votes_funny = 'uber'",
    "4037": "SELECT COUNT(DISTINCT u.user_id) AS users_with_uber_funny_votes\nFROM Users u\nJOIN Reviews r ON u.user_id = r.user_id\nWHERE r.review_votes_funny = 'uber'",
    "4038": "WITH OperatingHours AS (\n    SELECT \n        business_id, \n        day_id, \n        strftime('%H:%M', closing_time) AS closing, \n        strftime('%H:%M', opening_time) AS opening,\n        (strftime('%s', closing_time) - strftime('%s', opening_time)) / 3600.0 AS hours_difference\n    FROM \n        \"Business_Hours\"\n),\nRankedHours AS (\n    SELECT \n        business_id, \n        SUM(hours_difference) AS total_hours,\n        RANK() OVER (ORDER BY SUM(hours_difference)) AS rank\n    FROM \n        OperatingHours\n    GROUP BY \n        business_id\n)\nSELECT \n    business_id \nFROM \n    RankedHours \nWHERE \n    rank = 1;",
    "4039": "SELECT business_id\nFROM Business_Hours\nGROUP BY business_id\nHAVING COUNT(*) = 7 AND SUM(CASE WHEN opening_time = closing_time THEN 1 ELSE 0 END) = 7",
    "4040": "SELECT \n    AVG(CAST(t.likes AS FLOAT)) AS average_likes, \n    AVG(LENGTH(t.tip_length)) AS average_tip_length\nFROM \n    \"Tips\" t\nJOIN \n    \"Business_Categories\" bc ON t.business_id = bc.business_id\nJOIN \n    \"Categories\" c ON bc.category_id = c.category_id\nWHERE \n    c.category_name = 'Hotels & Travel'\nGROUP BY \n    c.category_name",
    "4041": "SELECT COUNT(*) AS uber_votes_users_count, user_average_stars\nFROM Users\nWHERE user_id IN (\n    SELECT user_id\n    FROM Reviews\n    WHERE review_votes_funny = 'uber' \n    AND review_votes_useful = 'uber' \n    AND review_votes_cool = 'uber'\n)\nGROUP BY user_average_stars",
    "4042": "WITH OpenAllTime AS (\n    SELECT \n        business_id\n    FROM \n        Business_Hours\n    WHERE \n        day_id BETWEEN 1 AND 7 \n        AND opening_time = closing_time\n    GROUP BY \n        business_id\n    HAVING \n        COUNT(*) = 7\n),\nGoodBusiness AS (\n    SELECT \n        COUNT(*) AS GoodCount\n    FROM \n        Business\n    WHERE \n        stars BETWEEN 3.5 AND 5\n        AND business_id IN (SELECT business_id FROM OpenAllTime)\n),\nBadBusiness AS (\n    SELECT \n        COUNT(*) AS BadCount\n    FROM \n        Business\n    WHERE \n        stars BETWEEN 1 AND 2.5\n        AND business_id IN (SELECT business_id FROM OpenAllTime)\n)\nSELECT \n    CASE \n        WHEN BadBusiness.BadCount = 0 THEN 'Infinity'\n        ELSE CAST(GoodBusiness.GoodCount AS REAL) / BadBusiness.BadCount\n    END AS GoodToBadRatio\nFROM \n    GoodBusiness, BadBusiness",
    "4043": "WITH BusinessReviewCounts AS (\n    SELECT \n        business_id, \n        COUNT(user_id) AS review_count\n    FROM Reviews\n    GROUP BY business_id\n    ORDER BY review_count DESC\n    LIMIT 10\n), TopBusinessCategories AS (\n    SELECT \n        BC.business_id, \n        C.category_name\n    FROM Business_Categories BC\n    JOIN Categories C ON BC.category_id = C.category_id\n    WHERE BC.business_id IN (SELECT business_id FROM BusinessReviewCounts)\n), CategoryCounts AS (\n    SELECT \n        category_name, \n        COUNT(category_name) AS count\n    FROM TopBusinessCategories\n    GROUP BY category_name\n    ORDER BY count DESC\n    LIMIT 3\n)\nSELECT \n    BR.business_id, \n    CC.category_name\nFROM BusinessReviewCounts BR\nJOIN TopBusinessCategories TBC ON BR.business_id = TBC.business_id\nJOIN CategoryCounts CC ON TBC.category_name = CC.category_name\nGROUP BY BR.business_id, CC.category_name\nORDER BY BR.review_count DESC, CC.category_name",
    "4044": "SELECT COUNT(DISTINCT b.business_id) AS businesses_in_arizona_with_low_avg_stars\nFROM Business b\nJOIN Reviews r ON b.business_id = r.business_id\nWHERE b.state = 'Arizona'\nGROUP BY b.business_id\nHAVING AVG(r.review_stars) < 3.0;",
    "4045": "SELECT \n    (CAST((COUNT(DISTINCT u.user_id) - COUNT(DISTINCT e.user_id)) AS FLOAT) / COUNT(DISTINCT u.user_id)) * 100 AS percentage_not_elite\nFROM \n    Users u\nLEFT JOIN \n    Elite e ON u.user_id = e.user_id;",
    "4046": "SELECT C.compliment_type\nFROM \"Users_Compliments\" UC\nJOIN \"Compliments\" C ON UC.compliment_id = C.compliment_id\nJOIN \"Users\" U ON UC.user_id = U.user_id\nWHERE U.user_fans = 'uber'\nGROUP BY UC.compliment_id\nORDER BY COUNT(UC.compliment_id) DESC\nLIMIT 1;",
    "4047": "SELECT AVG(Years.actual_year) AS average_elite_year\nFROM \"Elite\"\nJOIN \"Users\" ON Elite.user_id = Users.user_id\nJOIN \"Years\" ON Elite.year_id = Years.year_id\nWHERE Users.user_fans = 'uber';",
    "4048": "SELECT AVG(Years.actual_year) AS average_elite_year\nFROM Elite\nJOIN Years ON Elite.year_id = Years.year_id\nJOIN Users ON Elite.user_id = Users.user_id",
    "4049": "WITH MesaBusinessHours AS (\n    SELECT \n        BH.business_id,\n        B.active,\n        (strftime('%H:%M', BH.closing_time) - strftime('%H:%M', BH.opening_time)) * 24 AS hours_open\n    FROM \"Business_Hours\" BH\n    JOIN \"Business\" B ON BH.business_id = B.business_id\n    WHERE B.city = 'Mesa'\n),\nMesaBusinessMoreThan8Hours AS (\n    SELECT \n        business_id,\n        active,\n        hours_open\n    FROM MesaBusinessHours\n    WHERE hours_open > 8\n),\nTotalBusinesses AS (\n    SELECT \n        COUNT(*) AS total_businesses\n    FROM MesaBusinessMoreThan8Hours\n),\nActiveBusinesses AS (\n    SELECT \n        COUNT(*) AS active_businesses\n    FROM MesaBusinessMoreThan8Hours\n    WHERE active = 'true'\n)\nSELECT \n    (SELECT total_businesses FROM TotalBusinesses) AS Total_Businesses_Open_More_Than_8_Hours,\n    (SELECT active_businesses FROM ActiveBusinesses) AS Active_Businesses_Open_More_Than_8_Hours,\n    (SELECT CAST(active_businesses AS REAL) / CAST(total_businesses AS REAL) * 100 FROM ActiveBusinesses, TotalBusinesses) AS Percentage_Active",
    "4050": "WITH LateAfternoonBusinesses AS (\n    SELECT bh.business_id\n    FROM \"Business_Hours\" bh\n    JOIN \"Business\" b ON bh.business_id = b.business_id\n    WHERE b.active = 'true'\n    AND b.city = 'Phoenix'\n    AND (substr(bh.opening_time, -2) = 'PM' AND CAST(substr(bh.opening_time, 1, length(bh.opening_time) - 2) AS INTEGER) >= 5\n         OR bh.opening_time = '5PM')\n    GROUP BY bh.business_id\n),\nTopCategories AS (\n    SELECT bc.category_id, COUNT(bc.business_id) AS business_count\n    FROM \"Business_Categories\" bc\n    JOIN LateAfternoonBusinesses lab ON bc.business_id = lab.business_id\n    GROUP BY bc.category_id\n    ORDER BY business_count DESC\n    LIMIT 3\n)\nSELECT c.category_name\nFROM TopCategories tc\nJOIN \"Categories\" c ON tc.category_id = c.category_id",
    "4051": "SELECT r.user_id\nFROM Reviews r\nJOIN Business_Attributes ba ON r.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Delivery'\nGROUP BY r.user_id\nORDER BY COUNT(r.business_id) DESC\nLIMIT 1",
    "4052": "Given the complexity of the question and the need to calculate the total operating hours of businesses, we need to first understand that SQLite does not directly support the subtraction of time strings. Therefore, we need to convert the `opening_time` and `closing_time` into a format that allows us to calculate the duration each business is open per day, sum this up for the week, and then filter businesses based on this sum being less than or equal to 30 hours.\n\nHowever, the question also involves filtering businesses based on their `active` status and then calculating the average number of reviews for these businesses. This involves joining several tables (`Business`, `Business_Hours`, and `Reviews`) and aggregating data across these joins.\n\nGiven the constraints and the need for a step-by-step approach, here's a conceptual breakdown of how the SQL query could be structured, keeping in mind that direct calculation of time differences as described in the external knowledge is not straightforward in SQLite:\n\n1. **Convert `opening_time` and `closing_time` to a calculable format**: This would typically involve converting these times to seconds since midnight, then calculating the difference. However, without specific formats for these times, we'll assume they're in a format like 'HH:MM' for simplicity.\n\n2. **Sum the daily operating hours for each business across the week**: This involves grouping by `business_id` and summing the calculated durations.\n\n3. **Filter businesses based on the total operating hours and their active status**: This requires joining the calculated durations with the `Business` table and applying the necessary filters.\n\n4. **Calculate the average number of reviews for these filtered businesses**: This involves joining with the `Reviews` table and calculating the average.\n\nGiven the limitations in executing time calculations directly in SQLite and the lack of specific time format details, the exact SQL query cannot be accurately provided without making several assumptions. However, the conceptual SQL query structure, assuming we could calculate time differences directly, would look something like this:\n\n```sqlite\nWITH BusinessOperatingHours AS (\n    SELECT\n        bh.business_id,\n        SUM((strftime('%s', bh.closing_time) - strftime('%s', bh.opening_time)) / 3600.0) AS TotalHours\n    FROM Business_Hours bh\n    GROUP BY bh.business_id\n    HAVING TotalHours <= 30\n),\nActiveBusinesses AS (\n    SELECT\n        b.business_id\n    FROM Business b\n    JOIN BusinessOperatingHours boh",
    "4053": "SELECT COUNT(DISTINCT business_id) AS total_businesses_with_8AM_to_6PM_hours\nFROM \"Business_Hours\"\nWHERE opening_time = '8AM' AND closing_time = '6PM';",
    "4054": "SELECT business_id\nFROM \"Business_Hours\"\nWHERE opening_time = '10AM' AND day_id = (SELECT day_id FROM Days WHERE day_of_week = 'Saturday')",
    "4055": "SELECT business_id, day_id\nFROM \"Business_Hours\"\nWHERE opening_time = '8AM' AND closing_time = '6PM';",
    "4056": "SELECT COUNT(business_id) AS businesses_rated_above_4\nFROM Business\nWHERE stars > 4;",
    "4057": "SELECT DISTINCT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Business_Hours bh ON bc.business_id = bh.business_id\nWHERE bh.day_id = 1 AND bh.opening_time IS NOT NULL;",
    "4058": "SELECT Days.day_of_week\nFROM Days\nJOIN Business_Hours ON Days.day_id = Business_Hours.day_id\nJOIN Business ON Business.business_id = Business_Hours.business_id\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Pets'\nGROUP BY Days.day_of_week",
    "4059": "SELECT B.business_id, BH.closing_time, BH.day_id\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nWHERE C.category_name = 'Doctors'",
    "4060": "SELECT \n    B.business_id, \n    C.category_name, \n    COUNT(DISTINCT BH.day_id) AS working_days\nFROM \n    Business B\nJOIN \n    Business_Categories BC ON B.business_id = BC.business_id\nJOIN \n    Categories C ON BC.category_id = C.category_id\nJOIN \n    Business_Hours BH ON B.business_id = BH.business_id\nWHERE \n    BH.day_id BETWEEN 2 AND 7\nGROUP BY \n    B.business_id, C.category_name\nORDER BY \n    working_days DESC, B.business_id\nLIMIT 1;",
    "4061": "SELECT BH.business_id\nFROM \"Business_Hours\" AS BH\nJOIN \"Business_Categories\" AS BC ON BH.business_id = BC.business_id\nJOIN Categories AS C ON BC.category_id = C.category_id\nJOIN Days AS D ON BH.day_id = D.day_id\nWHERE C.category_name = 'Arts & Entertainment'\nAND D.day_of_week = 'Sunday'\nAND BH.closing_time IS NOT NULL",
    "4062": "SELECT COUNT(b.business_id) AS businesses_rated_less_than_5\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'DJs' AND b.stars < 5",
    "4063": "SELECT Business.business_id\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nWHERE Business.active = 'true' AND Business_Hours.opening_time = '7AM' AND Business_Hours.closing_time = '8PM'",
    "4064": "SELECT COUNT(*) AS highest_rated_stadiums_and_arenas\nFROM Business\nJOIN Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN Categories ON Business_Categories.category_id = Categories.category_id\nWHERE Categories.category_name = 'Stadiums & Arenas'\nAND Business.stars = (\n    SELECT MAX(stars)\n    FROM Business\n    JOIN Business_Categories ON Business.business_id = Business_Categories.business_id\n    JOIN Categories ON Business_Categories.category_id = Categories.category_id\n    WHERE Categories.category_name = 'Stadiums & Arenas'\n)",
    "4065": "SELECT COUNT(DISTINCT bc.category_id) AS low_review_count_categories\nFROM \"Business_Categories\" bc\nJOIN \"Business\" b ON bc.business_id = b.business_id\nWHERE b.review_count < '10' AND b.stars > 2;",
    "4066": "SELECT B.business_id, B.city, B.state, BH.opening_time\nFROM \"Business\" B\nJOIN \"Business_Categories\" BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nJOIN \"Business_Hours\" BH ON B.business_id = BH.business_id\nWHERE C.category_name = 'Accessories' AND BH.opening_time < '7:00'",
    "4067": "SELECT COUNT(DISTINCT b.business_id) AS businesses_working_after_12PM\nFROM \"Business\" b\nJOIN \"Business_Hours\" bh ON b.business_id = bh.business_id\nWHERE b.state = 'Arizona' AND b.active = 'true' AND bh.opening_time > '12:00'",
    "4068": "SELECT B.business_id, B.city, B.state, B.stars, B.review_count\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nJOIN Reviews R ON B.business_id = R.business_id\nWHERE R.user_id = 16328",
    "4069": "WITH FoodBusinesses AS (\n    SELECT b.business_id, b.stars\n    FROM \"Business\" b\n    JOIN \"Business_Categories\" bc ON b.business_id = bc.business_id\n    JOIN \"Categories\" c ON bc.category_id = c.category_id\n    WHERE c.category_name = 'Food'\n),\nLowStarFoodBusinesses AS (\n    SELECT business_id\n    FROM FoodBusinesses\n    WHERE stars < 2\n)\nSELECT \n    COUNT(*) AS TotalFoodBusinesses,\n    (SELECT COUNT(*) FROM LowStarFoodBusinesses) AS LowStarFoodBusinesses,\n    (SELECT COUNT(*) FROM LowStarFoodBusinesses) * 1.0 / COUNT(*) AS PercentageLowStar\nFROM FoodBusinesses",
    "4070": "WITH FoodBusinesses AS (\n    SELECT b.business_id\n    FROM Business b\n    JOIN Business_Categories bc ON b.business_id = bc.business_id\n    JOIN Categories c ON bc.category_id = c.category_id\n    JOIN Business_Hours bh ON b.business_id = bh.business_id\n    WHERE c.category_name = 'Food'\n    AND bh.opening_time = '7AM'\n    AND bh.closing_time = '8PM'\n),\nAllBusinessesWithHours AS (\n    SELECT b.business_id\n    FROM Business b\n    JOIN Business_Hours bh ON b.business_id = bh.business_id\n    WHERE bh.opening_time = '7AM'\n    AND bh.closing_time = '8PM'\n)\nSELECT \n    (CAST(COUNT(DISTINCT fb.business_id) AS REAL) / COUNT(DISTINCT ab.business_id)) * 100 AS percentage\nFROM AllBusinessesWithHours ab\nLEFT JOIN FoodBusinesses fb ON ab.business_id = fb.business_id;",
    "4071": "SELECT \n    review_count,\n    COUNT(business_id) AS number_of_running_business\nFROM \n    Business\nWHERE \n    active = 'true'\n    AND city = 'Cave Creek'\nGROUP BY \n    review_count",
    "4072": "SELECT user_yelping_since_year, AVG(user_id) AS avg_user_id\nFROM Users\nWHERE user_yelping_since_year BETWEEN 2005 AND 2014\nGROUP BY user_yelping_since_year",
    "4073": "SELECT \n    SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN active = 'false' THEN 1 ELSE 0 END) AS active_inactive_ratio\nFROM \n    Business\nWHERE \n    review_count = 'Low';",
    "4074": "SELECT user_id \nFROM \"Elite\" \nWHERE year_id = (SELECT year_id FROM Years WHERE actual_year = 2006)\nLIMIT 5;",
    "4075": "SELECT category_id, category_name \nFROM Categories \nWHERE category_name LIKE 'P%'\nLIMIT 5;",
    "4076": "SELECT r.user_id, r.review_stars\nFROM \"Reviews\" r\nWHERE r.review_length = 'medium' AND r.business_id = 35",
    "4077": "SELECT BA.business_id, BA.attribute_value\nFROM \"Business_Attributes\" BA\nJOIN Attributes A ON BA.attribute_id = A.attribute_id\nWHERE A.attribute_name = 'payment_types_visa'",
    "4078": "SELECT b.business_id, b.active\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Diagnostic Imaging'",
    "4079": "SELECT \n    Users.user_id, \n    Users.user_yelping_since_year \nFROM \n    Users \nJOIN \n    Reviews ON Users.user_id = Reviews.user_id \nWHERE \n    Reviews.business_id = 143 \n    AND Reviews.review_stars = 5",
    "4080": "SELECT U.user_id, U.user_yelping_since_year\nFROM \"Users\" U\nJOIN \"Users_Compliments\" UC ON U.user_id = UC.user_id\nJOIN \"Compliments\" C ON UC.compliment_id = C.compliment_id\nWHERE C.compliment_type = 'profile' AND UC.number_of_compliments = 'Uber'\nLIMIT 5",
    "4081": "SELECT \n    t.user_id, \n    t.business_id, \n    r.review_length\nFROM \n    Tips t\nINNER JOIN \n    Reviews r ON t.business_id = r.business_id\nWHERE \n    t.business_id = (\n        SELECT \n            business_id \n        FROM \n            Tips \n        ORDER BY \n            likes DESC \n        LIMIT 1\n    )",
    "4082": "SELECT \n    u.user_id, \n    IFNULL(SUM(uc.number_of_compliments), 0) AS number_of_compliments_on_photos\nFROM \n    Users u\nJOIN \n    Elite e ON u.user_id = e.user_id\nLEFT JOIN \n    Users_Compliments uc ON u.user_id = uc.user_id\nLEFT JOIN \n    Compliments c ON uc.compliment_id = c.compliment_id AND c.compliment_type = 'photos'\nWHERE \n    e.year_id BETWEEN 2005 AND 2014\nGROUP BY \n    u.user_id\nHAVING \n    COUNT(DISTINCT e.year_id) = 10",
    "4083": "SELECT \n    ROUND(\n        CAST(SUM(CASE WHEN opening_time = '9AM' AND closing_time = '9PM' THEN 1 ELSE 0 END) AS FLOAT) / \n        COUNT(*) * 100, 2\n    ) AS percentage\nFROM Business_Hours\nJOIN Days ON Business_Hours.day_id = Days.day_id\nWHERE Days.day_of_week = 'Sunday'",
    "4084": "SELECT Business.business_id, Days.day_of_week\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nJOIN Days ON Business_Hours.day_id = Days.day_id\nWHERE Business.active = 'true' AND Business.city = 'Black Canyon City'",
    "4085": "SELECT \n    Users.user_id, \n    Reviews.review_length\nFROM \n    Users\nJOIN \n    Reviews ON Users.user_id = Reviews.user_id\nWHERE \n    Users.user_yelping_since_year = 2004 AND \n    Users.user_average_stars = '5'",
    "4086": "WITH ReviewStats AS (\n    SELECT\n        business_id,\n        SUM(CASE WHEN review_stars > 4 THEN 1 ELSE 0 END) AS AboveFourStars,\n        COUNT(*) AS TotalReviews\n    FROM Reviews\n    GROUP BY business_id\n    HAVING (CAST(AboveFourStars AS REAL) / TotalReviews) > 0.65\n)\nSELECT\n    b.business_id,\n    b.active,\n    b.city\nFROM Business b\nJOIN ReviewStats rs ON b.business_id = rs.business_id",
    "4087": "SELECT ABS(\n    (SELECT COUNT(*) FROM Business WHERE city = 'Glendale' AND active = 'true') -\n    (SELECT COUNT(*) FROM Business WHERE city = 'Mesa' AND active = 'true')\n) AS difference",
    "4088": "SELECT SUM(likes) AS total_likes_for_short_comments\nFROM \"Tips\"\nJOIN \"Users\" ON Tips.user_id = Users.user_id\nWHERE tip_length = 'Short' AND user_yelping_since_year = 2010;",
    "4089": "SELECT tip_length, COUNT(*) AS tip_count\nFROM \"Tips\"\nJOIN \"Users\" ON Tips.user_id = Users.user_id\nWHERE user_average_stars = '3'\nGROUP BY tip_length\nORDER BY tip_count DESC\nLIMIT 1;",
    "4090": "SELECT SUM(likes) AS total_likes_for_short_reviews_in_goodyear\nFROM \"Tips\"\nJOIN \"Business\" ON Tips.business_id = Business.business_id\nWHERE tip_length = 'Short' AND city = 'Goodyear'",
    "4091": "SELECT DISTINCT B.state\nFROM \"Business\" B\nJOIN \"Tips\" T ON B.business_id = T.business_id\nWHERE T.tip_length = 'Long';",
    "4092": "SELECT AVG(\n    (strftime('%s', Business_Hours.closing_time) - strftime('%s', Business_Hours.opening_time)) / 3600.0\n) AS average_daily_operating_hours\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nWHERE Business.city = 'El Mirage' AND Business.state = 'AZ'",
    "4093": "SELECT \n    B.business_id, \n    D.day_of_week AS closing_day\nFROM \n    \"Business_Hours\" BH\nJOIN \n    \"Days\" D ON BH.day_id = D.day_id\nJOIN \n    \"Business\" B ON BH.business_id = B.business_id\nWHERE \n    B.state = 'SC' AND \n    BH.closing_time = '00:00'",
    "4094": "SELECT Categories.category_name\nFROM Categories\nJOIN Business_Categories ON Categories.category_id = Business_Categories.category_id\nJOIN Business ON Business_Categories.business_id = Business.business_id\nWHERE Business.stars = 5",
    "4095": "SELECT DISTINCT B.state\nFROM Business B\nJOIN Business_Attributes BA ON B.business_id = BA.business_id\nJOIN Attributes A ON BA.attribute_id = A.attribute_id\nWHERE BA.attribute_value = 'beer_and_wine'",
    "4096": "SELECT COUNT(*) \nFROM \"Users_Compliments\" UC\nJOIN Compliments C ON UC.compliment_id = C.compliment_id\nWHERE C.compliment_type = 'photo' AND UC.number_of_compliments = 'Medium'",
    "4097": "SELECT b.business_id\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'Wi-Fi' AND ba.attribute_value = 'true' AND b.state = 'SC'",
    "4098": "SELECT COUNT(DISTINCT ba.business_id) AS number_of_businesses_with_ambience_romantic\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'ambience_romantic' AND ba.attribute_value = 'true'",
    "4099": "SELECT \n    (SELECT COUNT(*) \n     FROM \"Business_Attributes\" AS BA\n     JOIN Attributes AS A ON BA.attribute_id = A.attribute_id\n     WHERE A.attribute_name = 'Good for Kids' AND BA.attribute_value = 'true') * 100.0 / \n    (SELECT COUNT(DISTINCT business_id) FROM \"Business_Attributes\") AS percentage_good_for_kids",
    "4100": "SELECT COUNT(*) AS not_closed_businesses_in_mesa\nFROM Business\nWHERE active = 'true' AND city = 'Mesa'",
    "4101": "SELECT COUNT(*) AS bad_or_terrible_experience_count\nFROM Business\nWHERE stars IN (1, 2)",
    "4102": "SELECT Business.business_id\nFROM Business\nJOIN Reviews ON Business.business_id = Reviews.business_id\nWHERE Business.city = 'Paradise Valley' AND Reviews.review_votes_useful = 'Low' AND Reviews.review_stars > 3",
    "4103": "SELECT COUNT(DISTINCT business_id) AS businesses_with_more_than_one_attribute\nFROM Business_Attributes\nGROUP BY business_id\nHAVING COUNT(attribute_value) > 1",
    "4104": "WITH BusinessHoursDifferences AS (\n    SELECT \n        business_id,\n        day_id,\n        strftime('%s', closing_time) - strftime('%s', opening_time) AS seconds_open\n    FROM \n        \"Business_Hours\"\n),\nDailyOpenHours AS (\n    SELECT \n        business_id,\n        AVG(seconds_open) AS avg_seconds_open\n    FROM \n        BusinessHoursDifferences\n    GROUP BY \n        business_id\n    HAVING \n        COUNT(DISTINCT day_id) = 7\n),\nConsistentOpenHours AS (\n    SELECT \n        b.business_id\n    FROM \n        BusinessHoursDifferences b\n    INNER JOIN \n        DailyOpenHours d ON b.business_id = d.business_id\n    GROUP BY \n        b.business_id\n    HAVING \n        MIN(b.seconds_open) = MAX(b.seconds_open)\n        AND MIN(b.seconds_open) = AVG(d.avg_seconds_open)\n)\nSELECT \n    COUNT(*) AS businesses_with_consistent_open_hours\nFROM \n    ConsistentOpenHours;",
    "4105": "SELECT COUNT(*) AS uber_funny_reviews\nFROM Reviews\nJOIN Business ON Reviews.business_id = Business.business_id\nWHERE Business.active = 'true' AND Reviews.review_votes_funny = 'Uber'",
    "4106": "SELECT COUNT(*) \nFROM \"Users_Compliments\" \nJOIN \"Users\" ON \"Users_Compliments\".user_id = \"Users\".user_id \nWHERE \"Users_Compliments\".number_of_compliments = 'High' \nAND \"Users\".user_fans = 'None'",
    "4107": "SELECT compliment_type\nFROM Compliments\nJOIN Users_Compliments ON Compliments.compliment_id = Users_Compliments.compliment_id\nGROUP BY Compliments.compliment_type\nORDER BY COUNT(Users_Compliments.number_of_compliments) DESC\nLIMIT 1",
    "4108": "SELECT U.user_id, U.user_average_stars\nFROM Users U\nJOIN Tips T ON U.user_id = T.user_id\nGROUP BY U.user_id\nORDER BY SUM(T.likes) DESC\nLIMIT 3",
    "4109": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Business b ON bc.business_id = b.business_id\nWHERE b.city = 'Arcadia'",
    "4110": "SELECT business_id\nFROM \"Business_Hours\"\nWHERE day_id = 1",
    "4111": "SELECT COUNT(DISTINCT b.business_id) AS closed_businesses_with_music_karaoke\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.active = 'false'\nAND a.attribute_name = 'music_karaoke'\nAND ba.attribute_value = 'true'",
    "4112": "SELECT COUNT(DISTINCT b.business_id) AS open_businesses_with_long_reviews\nFROM Business b\nJOIN Reviews r ON b.business_id = r.business_id\nWHERE b.active = 'true' AND b.city = 'Phoenix' AND r.review_length = 'Long'",
    "4113": "SELECT COUNT(DISTINCT u.user_id) AS users_with_low_cool_votes\nFROM \"Users\" u\nJOIN \"Reviews\" r ON u.user_id = r.user_id\nWHERE u.user_votes_cool = 'Low'\nAND r.review_votes_cool = 'Low'",
    "4114": "SELECT COUNT(*) \nFROM \"Users\" \nWHERE user_id IN (\n    SELECT user_id \n    FROM \"Tips\" \n    WHERE tip_length = 'Long' AND likes = 2\n) \nAND user_fans = 'High'",
    "4115": "SELECT COUNT(DISTINCT ba.business_id) AS businesses_with_ambience_trendy_false\nFROM Business_Attributes ba\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE a.attribute_name = 'ambience_trendy' AND ba.attribute_value = 'false'",
    "4116": "SELECT COUNT(DISTINCT b.business_id) AS businesses_open_sunday_12pm\nFROM \"Business\" b\nJOIN \"Business_Hours\" bh ON b.business_id = bh.business_id\nJOIN \"Days\" d ON bh.day_id = d.day_id\nWHERE b.city = 'Scottsdale' AND d.day_of_week = 'Sunday' AND bh.opening_time = '12PM'",
    "4117": "SELECT AVG(b.stars) AS avg_stars\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Obstetricians & Gynecologists'",
    "4118": "WITH Elite2011 AS (\n    SELECT e.user_id\n    FROM Elite e\n    JOIN Years y ON e.year_id = y.year_id\n    WHERE y.actual_year = 2011\n),\nHighFans AS (\n    SELECT user_id\n    FROM Users\n    WHERE user_fans = 'High'\n),\nHighFansElite2011 AS (\n    SELECT e.user_id\n    FROM Elite2011 e\n    JOIN HighFans h ON e.user_id = h.user_id\n)\nSELECT \n    (CAST(COUNT(DISTINCT h.user_id) AS FLOAT) / COUNT(DISTINCT e.user_id)) * 100 AS percentage\nFROM Elite2011 e\nLEFT JOIN HighFansElite2011 h ON e.user_id = h.user_id;",
    "4119": "SELECT COUNT(*) AS businesses_in_surprise\nFROM Business\nWHERE city = 'Surprise'",
    "4120": "SELECT business_id\nFROM Business\nWHERE city = 'Tempe' AND review_count = 'High'",
    "4121": "SELECT COUNT(*) AS total_active_businesses_in_AZ_with_medium_review_count\nFROM Business\nWHERE active = 'true' AND state = 'AZ' AND review_count = 'Medium'",
    "4122": "SELECT business_id\nFROM Business\nWHERE stars BETWEEN 3 AND 5\nAND city = 'Chandler'",
    "4123": "SELECT COUNT(*) AS low_fan_count\nFROM Users\nWHERE user_yelping_since_year BETWEEN 2009 AND 2011\nAND user_fans = 'Low'",
    "4124": "SELECT review_length\nFROM Reviews\nWHERE user_id = 11021 AND business_id = 3",
    "4125": "SELECT Attributes.attribute_name\nFROM Attributes\nJOIN Business_Attributes ON Attributes.attribute_id = Business_Attributes.attribute_id\nJOIN Business ON Business_Attributes.business_id = Business.business_id\nWHERE Business.city = 'Tempe' AND Business.review_count = 'Medium'",
    "4126": "SELECT COUNT(DISTINCT b.business_id) AS low_rating_food_businesses\nFROM Business b\nJOIN Business_Categories bc ON b.business_id = bc.business_id\nJOIN Categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Food' AND b.stars < 3",
    "4127": "SELECT B.business_id, B.stars\nFROM Business B\nJOIN Business_Categories BC ON B.business_id = BC.business_id\nJOIN Categories C ON BC.category_id = C.category_id\nWHERE B.active = 'true' AND C.category_name = 'Food'",
    "4128": "SELECT \n    C.category_name, \n    A.attribute_name\nFROM \n    Business B\n    JOIN Business_Categories BC ON B.business_id = BC.business_id\n    JOIN Categories C ON BC.category_id = C.category_id\n    JOIN Business_Attributes BA ON B.business_id = BA.business_id\n    JOIN Attributes A ON BA.attribute_id = A.attribute_id\nWHERE \n    B.stars = (SELECT MAX(stars) FROM Business)",
    "4129": "SELECT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Reviews r ON bc.business_id = r.business_id\nJOIN Business b ON r.business_id = b.business_id\nWHERE r.review_length = 'Short'\nAND b.business_id BETWEEN 7 AND 14\nORDER BY r.review_stars DESC\nLIMIT 1",
    "4130": "SELECT COUNT(DISTINCT b.business_id) AS active_businesses_with_BYOB_and_high_review_count\nFROM Business b\nJOIN Business_Attributes ba ON b.business_id = ba.business_id\nJOIN Attributes a ON ba.attribute_id = a.attribute_id\nWHERE b.active = 'true'\nAND a.attribute_name = 'BYOB'\nAND b.review_count = 'High'",
    "4131": "SELECT B.business_id, BH.opening_time, BH.closing_time\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nWHERE B.city = 'Glendale' AND B.stars = (\n    SELECT MAX(stars)\n    FROM Business\n    WHERE city = 'Glendale'\n)",
    "4132": "SELECT \n    Categories.category_name, \n    Attributes.attribute_name\nFROM \n    Business\nJOIN \n    Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN \n    Categories ON Business_Categories.category_id = Categories.category_id\nJOIN \n    Business_Attributes ON Business.business_id = Business_Attributes.business_id\nJOIN \n    Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id\nWHERE \n    Business.active = 'true' \n    AND Business.city = 'Goodyear' \n    AND Business.state = 'AZ' \n    AND Business.review_count = 'High'",
    "4133": "SELECT DISTINCT c.category_name\nFROM Categories c\nJOIN Business_Categories bc ON c.category_id = bc.category_id\nJOIN Business b ON bc.business_id = b.business_id\nWHERE b.active = 'true' AND b.city = 'Glendale' AND b.state = 'AZ'",
    "4134": "SELECT B.city\nFROM Business B\nJOIN Business_Hours BH ON B.business_id = BH.business_id\nJOIN Days D ON BH.day_id = D.day_id\nWHERE BH.opening_time = '7AM' AND BH.closing_time = '7PM' AND D.day_of_week = 'Wednesday'",
    "4135": "SELECT BA.attribute_value\nFROM \"Business_Attributes\" BA\nJOIN \"Business\" B ON BA.business_id = B.business_id\nWHERE B.active = 'true'\nAND B.review_count = 'Low'\nAND B.stars = 3\nAND B.city = 'Goodyear'\nAND B.state = 'AZ'",
    "4136": "SELECT Business_Hours.opening_time\nFROM Business\nJOIN Business_Hours ON Business.business_id = Business_Hours.business_id\nWHERE Business.active = 'true'\nAND Business.city = 'Glendale'\nAND Business.review_count = 'Medium'",
    "4137": "SELECT \n    (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'Food')) * 100 AS percentage_of_businesses_over_3_stars\nFROM \n    Business \nJOIN \n    Business_Categories ON Business.business_id = Business_Categories.business_id\nJOIN \n    Categories ON Business_Categories.category_id = Categories.category_id\nWHERE \n    Categories.category_name = 'Food' AND Business.stars > 3",
    "4138": "SELECT BH.closing_time, D.day_of_week\nFROM \"Business_Hours\" BH\nJOIN Days D ON BH.day_id = D.day_id\nJOIN \"Business\" B ON BH.business_id = B.business_id\nWHERE B.active = 'true'\nAND B.city = 'Goodyear'\nAND B.stars > (\n    SELECT AVG(stars) * 0.8\n    FROM \"Business\"\n)",
    "4139": "SELECT \n    (CAST(COUNT(DISTINCT p.paper_id) AS FLOAT) / (SELECT COUNT(*) FROM paper) * 100) AS percentage_of_agents\nFROM \n    paper p\nWHERE \n    p.class_label = 'Agents'",
    "4140": "SELECT word_cited_id, COUNT(paper_id) AS citation_count\nFROM content\nGROUP BY word_cited_id\nORDER BY citation_count DESC\nLIMIT 1",
    "4141": "SELECT COUNT(*) AS total_word_cited\nFROM content\nJOIN paper ON content.paper_id = paper.paper_id\nWHERE paper.class_label = 'AI'",
    "4142": "SELECT DISTINCT c2.paper_id, p.class_label\nFROM content c1\nJOIN content c2 ON c1.word_cited_id = c2.word_cited_id AND c1.paper_id != c2.paper_id\nJOIN paper p ON c2.paper_id = p.paper_id\nWHERE c1.paper_id = '315017'",
    "4143": "SELECT word_cited_id\nFROM content\nJOIN paper ON content.paper_id = paper.paper_id\nWHERE class_label = 'DB'\nGROUP BY word_cited_id\nORDER BY COUNT(word_cited_id) DESC\nLIMIT 1",
    "4144": "SELECT \n    (CAST(SUM(CASE WHEN p.class_label = 'Agents' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(c.word_cited_id)) * 100 AS percentage\nFROM \n    content c\nJOIN \n    paper p ON c.paper_id = p.paper_id",
    "4145": "SELECT \n    c.paper_id, \n    p.class_label\nFROM \n    content c\nJOIN \n    paper p ON c.paper_id = p.paper_id\nGROUP BY \n    c.paper_id\nORDER BY \n    COUNT(c.word_cited_id) DESC\nLIMIT 1",
    "4146": "SELECT p.paper_id, p.class_label\nFROM paper p\nJOIN content c ON p.paper_id = c.paper_id\nWHERE c.word_cited_id = 'word1002'",
    "4147": "SELECT content.word_cited_id\nFROM content\nJOIN paper ON content.paper_id = paper.paper_id\nWHERE paper.class_label = 'AI'",
    "4148": "SELECT p.class_label, COUNT(c.word_cited_id) AS cited_word_count\nFROM paper p\nLEFT JOIN content c ON p.paper_id = c.paper_id\nWHERE p.paper_id = 'chakrabarti01integrating'",
    "4149": "SELECT p.paper_id, p.class_label\nFROM paper p\nJOIN content c ON p.paper_id = c.paper_id\nGROUP BY p.paper_id\nHAVING COUNT(c.word_cited_id) > 20",
    "4150": "SELECT DISTINCT c1.word_cited_id\nFROM content c1\nJOIN paper p1 ON c1.paper_id = p1.paper_id AND p1.class_label = 'AI'\nJOIN content c2 ON c1.word_cited_id = c2.word_cited_id\nJOIN paper p2 ON c2.paper_id = p2.paper_id AND p2.class_label = 'IR'",
    "4151": "WITH CitationCounts AS (\n    SELECT\n        cited_paper_id,\n        COUNT(*) AS times_cited\n    FROM\n        cites\n    GROUP BY\n        cited_paper_id\n),\nMaxCitation AS (\n    SELECT\n        cited_paper_id,\n        times_cited\n    FROM\n        CitationCounts\n    WHERE\n        times_cited = (SELECT MAX(times_cited) FROM CitationCounts)\n),\nMinCitation AS (\n    SELECT\n        cited_paper_id,\n        times_cited\n    FROM\n        CitationCounts\n    WHERE\n        times_cited = (SELECT MIN(times_cited) FROM CitationCounts)\n)\nSELECT\n    'Most Cited Paper' AS Description,\n    cited_paper_id,\n    times_cited\nFROM\n    MaxCitation\nUNION ALL\nSELECT\n    'Least Cited Paper' AS Description,\n    cited_paper_id,\n    times_cited\nFROM\n    MinCitation;",
    "4152": "SELECT AVG(count) AS average_papers_in_ML\nFROM (\n  SELECT class_label, COUNT(paper_id) AS count\n  FROM paper\n  GROUP BY class_label\n) \nWHERE class_label = 'M'",
    "4153": "SELECT content.word_cited_id\nFROM content\nJOIN cites ON content.paper_id = cites.cited_paper_id\nWHERE cites.citing_paper_id = 'sima01computational'",
    "4154": "SELECT COUNT(DISTINCT c.cited_paper_id) AS cited_papers_count\nFROM cites c\nJOIN content ct ON c.cited_paper_id = ct.paper_id\nWHERE c.citing_paper_id = 'schmidt99advanced' AND ct.word_cited_id = 'word3555';",
    "4155": "SELECT DISTINCT p.class_label\nFROM paper p\nJOIN cites c ON p.paper_id = c.citing_paper_id\nJOIN content ct ON c.cited_paper_id = ct.paper_id\nWHERE ct.word_cited_id = 'word1163'",
    "4156": "SELECT content.paper_id\nFROM content\nJOIN paper ON content.paper_id = paper.paper_id\nWHERE paper.class_label = 'DB'\nGROUP BY content.paper_id\nORDER BY COUNT(content.word_cited_id) DESC\nLIMIT 1",
    "4157": "SELECT COUNT(DISTINCT cites.cited_paper_id) AS count\nFROM cites\nJOIN paper ON cites.cited_paper_id = paper.paper_id\nWHERE cites.citing_paper_id = 'butz01algorithmic'\nAND paper.class_label = 'ML'",
    "4158": "SELECT Person.name, MIN(Person.birthdate) AS oldest_birthdate\nFROM Person\nJOIN Credit ON Person.name = Credit.person\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nWHERE Episode.season = 20",
    "4159": "SELECT nickname FROM Person WHERE name = 'Dan Castellaneta';",
    "4160": "SELECT COUNT(*) \nFROM Person \nWHERE birth_region = 'New York' \nAND strftime('%Y', birthdate) > '1970' \nAND name IN (\n    SELECT person \n    FROM Credit \n    WHERE episode_id IN (\n        SELECT episode_id \n        FROM Episode \n        WHERE season = 20\n    )\n)",
    "4161": "SELECT p.birth_country\nFROM Award a\nJOIN Person p ON a.person = p.name\nWHERE a.year = 2009\nAND a.award = 'Outstanding Voice-Over Performance'\nAND a.result = 'Winner'",
    "4162": "SELECT Award.award\nFROM Award\nJOIN Person ON Award.person = Person.name\nWHERE Person.nickname = 'Doofus' AND Award.result = 'Winner'",
    "4163": "SELECT COUNT(DISTINCT p.name) AS num_crew_members\nFROM Person p\nJOIN Award a ON p.name = a.person\nWHERE p.birth_country = 'USA'\nAND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND a.year = 2009\nAND a.result = 'Nominee'",
    "4164": "SELECT Character_Award.character\nFROM Award\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Award.year = 2009\nAND Award.award_category = 'Outstanding Voice-Over Performance'\nAND Award.result = 'Winner'",
    "4165": "SELECT keyword FROM Keyword\nJOIN Episode ON Keyword.episode_id = Episode.episode_id\nWHERE Episode.title = 'Lost Verizon'",
    "4166": "SELECT COUNT(keyword) AS keyword_count\nFROM Keyword\nJOIN Episode ON Keyword.episode_id = Episode.episode_id\nWHERE Episode.air_date = '2008-10-19'",
    "4167": "SELECT e.rating\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.person = 'Dan Castellaneta'\nAND a.year = 2009\nAND a.result = 'Winner'\nAND a.award = 'Outstanding Voice-Over Performance'",
    "4168": "SELECT votes\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE stars = 7 AND title = 'Lost Verizon'",
    "4169": "SELECT stars\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.title = 'Lost Verizon'\nORDER BY votes DESC\nLIMIT 1",
    "4170": "SELECT Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 10 AND Vote.votes > 200",
    "4171": "SELECT COUNT(DISTINCT e.episode_id) AS episodes_with_high_ratings\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE e.air_date LIKE '2009%'\nAND v.stars = 10\nAND v.percent > 15",
    "4172": "SELECT Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 7\nORDER BY Vote.votes DESC\nLIMIT 1",
    "4173": "SELECT \n    episode_id, \n    SUM(stars * votes) / SUM(votes) AS average_stars\nFROM \n    Vote\nJOIN \n    Episode ON Vote.episode_id = Episode.episode_id\nWHERE \n    Episode.title = 'Lost Verizon'\nGROUP BY \n    Episode.episode_id",
    "4174": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN a.result = 'Nominee' AND a.award_category = 'Primetime Emmy' THEN e.episode_id END) AS REAL) / \n    COUNT(DISTINCT e.episode_id)) * 100 AS percentage\nFROM Episode e\nLEFT JOIN Award a ON e.episode_id = a.episode_id\nWHERE e.rating > 7",
    "4175": "SELECT Episode.title\nFROM Episode\nJOIN Credit ON Episode.episode_id = Credit.episode_id\nWHERE Credit.person = 'Pamela Hayden' AND Credit.role = 'Ruthie'",
    "4176": "SELECT Credit.role, Episode.episode, Episode.number_in_series\nFROM Credit\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nWHERE Credit.person = 'Matt Groening' AND Episode.title = 'In the Name of the Grandfather'",
    "4177": "SELECT Episode.title, Episode.summary\nFROM Episode\nJOIN Keyword ON Episode.episode_id = Keyword.episode_id\nWHERE Keyword.keyword = 'eviction';",
    "4178": "SELECT AVG(stars) AS average_stars\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.title = 'Wedding for Disaster'",
    "4179": "SELECT Episode.title, Keyword.keyword\nFROM Episode\nJOIN Keyword ON Episode.episode_id = Keyword.episode_id\nWHERE Episode.air_date = '2009-03-22'",
    "4180": "SELECT Person.birth_name\nFROM Person\nJOIN Credit ON Person.name = Credit.person\nWHERE Credit.role = 'Helen Lovejoy'",
    "4181": "SELECT \n    E.title,\n    C.person,\n    C.role,\n    (SELECT CAST(SUM(CASE WHEN C.credited = '' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN C.credited = 'true' THEN 1 ELSE 0 END) * 100\n     FROM Credit C\n     JOIN Episode E ON C.episode_id = E.episode_id\n     JOIN Award A ON E.episode_id = A.episode_id\n     WHERE A.year = 2017 AND A.award_category = 'Jupiter Award' AND A.award = 'Best International TV Series') AS percentage_ratio\nFROM Credit C\nJOIN Episode E ON C.episode_id = E.episode_id\nJOIN Award A ON E.episode_id = A.episode_id\nWHERE A.year = 2017 AND A.award_category = 'Jupiter Award' AND A.award = 'Best International TV Series' AND C.credited = ''",
    "4182": "SELECT COUNT(*) \nFROM Episode \nWHERE votes > 1000;",
    "4183": "SELECT COUNT(*) FROM Person WHERE birth_place = 'New York' AND birth_region = 'USA';",
    "4184": "SELECT Award.award, Award.award_category\nFROM Award\nWHERE Award.person = 'Marc Wilmore'",
    "4185": "SELECT name AS full_name, nickname\nFROM Person\nWHERE nickname IS NOT NULL",
    "4186": "SELECT name, height_meters\nFROM Person;",
    "4187": "SELECT MAX(votes) - MIN(votes) AS vote_difference FROM Vote",
    "4188": "SELECT Character_Award.character\nFROM Character_Award\nJOIN Award ON Character_Award.award_id = Award.award_id\nWHERE Award.year = 2009 AND Award.award = 'Outstanding Voice-Over Performance'",
    "4189": "SELECT COUNT(DISTINCT Person.name)\nFROM Person\nJOIN Award ON Person.name = Award.person\nWHERE Award.year = 2009\nAND Award.award_category = 'Comedy Series'\nAND Award.result = 'Nominee'\nAND Person.birth_place = 'California'",
    "4190": "SELECT Episode.title\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Award.year = 2017\nAND Award.award = 'Best International TV Series'\nAND Award.result = 'Winner'",
    "4191": "SELECT Person.name\nFROM Person\nLEFT JOIN Credit ON Person.name = Credit.person AND Credit.credited = ' '\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nWHERE Episode.title = 'How the Test Was Won'",
    "4192": "SELECT e.title\nFROM Episode e\nJOIN Keyword k1 ON e.episode_id = k1.episode_id AND k1.keyword = 'riot'\nJOIN Keyword k2 ON e.episode_id = k2.episode_id AND k2.keyword = 'cake'",
    "4193": "SELECT episode_id\nFROM Vote\nWHERE stars = 10\nORDER BY votes DESC\nLIMIT 1",
    "4194": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE e.title LIKE 'simpson 20%' AND strftime('%m', e.air_date) BETWEEN '10' AND '11'",
    "4195": "SELECT person\nFROM Credit\nWHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Treehouse of Horror XIX')\nAND role = 'director'",
    "4196": "SELECT COUNT(*) AS roles_played\nFROM Credit\nWHERE episode_id IN (\n    SELECT episode_id\n    FROM Episode\n    WHERE season = 20 AND episode = 5\n)",
    "4197": "SELECT keyword \nFROM Keyword \nJOIN Episode ON Keyword.episode_id = Episode.episode_id \nWHERE Episode.title = 'Take My Life, Please'",
    "4198": "SELECT \n    COUNT(DISTINCT e.episode_id) AS nominated_episodes,\n    (COUNT(DISTINCT CASE WHEN a.result = 'Nominee' AND a.award = 'Outstanding Voice-Over Performance' AND a.year = 2009 THEN e.episode_id END) * 1.0 / COUNT(DISTINCT e.episode_id)) * 100 AS percentage\nFROM \n    Episode e\nJOIN \n    Vote v ON e.episode_id = v.episode_id\nLEFT JOIN \n    Award a ON e.episode_id = a.episode_id\nWHERE \n    v.votes > 950\n    AND a.award = 'Outstanding Voice-Over Performance'\n    AND a.year = 2009",
    "4199": "SELECT \n    (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'No Loan Again, Naturally') AND stars = 5) * 1.0 /\n    (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Coming to Homerica') AND stars = 5) AS ratio",
    "4200": "SELECT COUNT(*) AS nominations\nFROM Award\nWHERE person = 'Ian Maxtone-Graham'\nAND organization = 'Writers Guild of America, USA'\nAND result = 'Nominee'",
    "4201": "SELECT person\nFROM Award\nWHERE result = 'Nominee'\nGROUP BY person\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "4202": "SELECT title\nFROM Episode\nWHERE rating = (SELECT MIN(rating) FROM Episode)",
    "4203": "SELECT MIN(year) AS first_award_year\nFROM Award\nWHERE award = 'Favorite Animated Comedy'\nAND award_category = 'People's Choice Award'\nAND result = 'Winner'",
    "4204": "SELECT COUNT(*) AS episodes_not_credited\nFROM Episode\nWHERE episode_id NOT IN (\n    SELECT episode_id\n    FROM Credit\n    WHERE person = 'Dell Hake' AND credited != ''\n)",
    "4205": "SELECT \n    A.year - CAST(SUBSTR(P.birthdate, 1, 4) AS INTEGER) AS age_at_award\nFROM \n    Award A\nJOIN \n    Person P ON A.person = P.name\nWHERE \n    A.award = 'Outstanding Voice-Over Performance'\n    AND A.organization = 'Primetime Emmy Awards'\n    AND A.result = 'Winner'\nORDER BY \n    A.year ASC\nLIMIT 1;",
    "4206": "SELECT Character_Award.character\nFROM Character_Award\nJOIN Award ON Character_Award.award_id = Award.award_id\nWHERE Award.person = 'Dan Castellaneta'\nAND Award.result = 'Winner'\nAND Award.award = 'Outstanding Voice-Over Performance'\nAND Award.organization = 'Primetime Emmy Awards'\nAND Award.year = 2009",
    "4207": "SELECT COUNT(DISTINCT Episode.episode_id) AS episodes_won_award\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE SUBSTR(Episode.air_date, 6, 2) = '04'\nAND SUBSTR(Episode.air_date, 1, 4) = '2009';",
    "4208": "SELECT p.birth_place\nFROM Person p\nJOIN Award a ON p.name = a.person\nWHERE a.award = 'Best Voice-Over Performance'\nAND a.organization = 'Online Film & Television Association'\nAND a.year = 2009\nAND a.result = 'Winner'",
    "4209": "SELECT SUM(v.Votes) AS total_10_star_votes\nFROM Vote v\nJOIN Episode e ON v.episode_id = e.episode_id\nWHERE v.stars = 10\nAND e.episode_id IN (\n    SELECT episode_id\n    FROM Episode\n    ORDER BY rating DESC, votes DESC\n    LIMIT 4\n)",
    "4210": "SELECT SUM(stars) AS total_stars\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.title = \"No Loan Again, Naturally\" AND Vote.votes <= 50",
    "4211": "SELECT COUNT(DISTINCT Award.award_id) AS total_winners_from_usa\nFROM Award\nJOIN Person ON Award.person = Person.name\nWHERE Award.result = 'Winner' AND Person.birth_country = 'USA'",
    "4212": "SELECT COUNT(*) AS times_credited\nFROM Credit\nJOIN Person ON Credit.person = Person.name\nWHERE Credit.episode_id = 'S20-E11' AND Person.nickname = 'Doofus' AND Credit.credited = 'true'",
    "4213": "SELECT person\nFROM Award\nWHERE result = 'Winner'\nORDER BY year ASC\nLIMIT 1",
    "4214": "SELECT percent\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.title = \"Sex, Pies and Idiot Scrapes\" AND Vote.stars = 9",
    "4215": "SELECT Award.award, Person.name\nFROM Award\nJOIN Person ON Award.person = Person.name\nWHERE Award.result = 'Winner' AND Award.year = 2009",
    "4216": "SELECT name, birthdate\nFROM Person\nWHERE birth_place = 'Los Angeles' AND height_meters >= 1.8",
    "4217": "SELECT episode, title, rating\nFROM Episode\nWHERE Substr(air_date, 6, 2) = '10' AND Substr(air_date, 0, 5) = '2008'",
    "4218": "SELECT Award.award_id, Award.award, Character_Award.character\nFROM Award\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Character_Award.character = \"Homer simpson 20\" AND Award.result = \"Winner\"",
    "4219": "SELECT \n    Award.award AS award_name, \n    Award.result, \n    Credit.category AS credit_category, \n    Credit.credited AS credited_status\nFROM \n    Award\nLEFT JOIN \n    Credit ON Award.person = Credit.person AND Award.episode_id = Credit.episode_id\nWHERE \n    Award.person = 'Billy Kimball'",
    "4220": "SELECT \n    p.name, \n    a.award, \n    a.organization, \n    a.result, \n    c.credited\nFROM Person p\nJOIN Credit c ON p.name = c.person\nLEFT JOIN Award a ON p.name = a.person\nWHERE c.episode_id = 'S20-E13' \nAND c.role = 'assistant director'",
    "4221": "SELECT P.birth_country, P.height_meters, P.name\nFROM Person P\nLEFT JOIN Credit C ON P.name = C.person AND C.category = 'Casting Department' AND C.credited = ''\nWHERE C.person IS NULL",
    "4222": "SELECT a.person AS nominee, k.keyword, k.episode_id\nFROM Award a\nJOIN Keyword k ON a.episode_id = k.episode_id\nJOIN Episode e ON k.episode_id = e.episode_id\nWHERE a.result = 'Nominee' AND e.title = \"The Good, the Sad and the Drugly\"",
    "4223": "SELECT v.votes, v.percent\nFROM Vote v\nJOIN Keyword k ON v.episode_id = k.episode_id\nWHERE k.keyword = \"arab stereotype\" AND v.stars = 10",
    "4224": "SELECT \n    Award.award AS award_name, \n    Episode.air_date AS aired_date, \n    Episode.rating AS rating\nFROM \n    Award\nJOIN \n    Episode ON Award.episode_id = Episode.episode_id\nWHERE \n    Award.organization = 'Jupiter Award' \n    AND Award.result = 'Winner'",
    "4225": "SELECT e.episode_id, e.title, k.keyword\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nJOIN Keyword k ON e.episode_id = k.episode_id\nWHERE v.stars = 1\nORDER BY v.votes DESC, k.keyword\nLIMIT 3",
    "4226": "SELECT \n    Episode.title, \n    Episode.episode_image, \n    Award.award AS award_name, \n    Award.person\nFROM \n    Episode\nJOIN \n    Award ON Episode.episode_id = Award.episode_id\nWHERE \n    Episode.rating > 7 \n    AND Episode.rating <= 10 \n    AND SUBSTR(Episode.air_date, 1, 4) = '2008' \n    AND Award.result = 'Nominee'",
    "4227": "SELECT \n    Award.award AS award_title, \n    Award.person AS person_name, \n    Character_Award.character AS character_name \nFROM \n    Award \nLEFT JOIN \n    Character_Award ON Award.award_id = Character_Award.award_id \nWHERE \n    Award.award_id = 326",
    "4228": "SELECT \n    p.name, \n    p.birth_country, \n    c.role, \n    (2022 - CAST(SUBSTR(p.birthdate, 1, 4) AS INTEGER)) AS age_in_2022\nFROM \n    Person p\nJOIN \n    Credit c ON p.name = c.person\nWHERE \n    p.birthdate = (SELECT MIN(birthdate) FROM Person)",
    "4229": "SELECT COUNT(Credit.credited) AS number_of_credits, Credit.category, Credit.role, Person.birth_place\nFROM Credit\nJOIN Person ON Credit.person = Person.name\nWHERE Person.birth_country = 'North Korea'\nGROUP BY Credit.person, Credit.category, Credit.role, Person.birth_place",
    "4230": "SELECT \n    P.name AS winner_name,\n    A.award AS award_name,\n    E.title AS episode_title,\n    C.role AS role_in_episode,\n    (SELECT CAST(COUNT(*) AS REAL) FROM Award WHERE result = 'winner' AND year = 2010) / \n    (SELECT CAST(COUNT(*) AS REAL) FROM Award WHERE year = 2010) AS winning_rate\nFROM \n    Award A\nJOIN \n    Person P ON A.person = P.name\nJOIN \n    Episode E ON A.episode_id = E.episode_id\nJOIN \n    Credit C ON E.episode_id = C.episode_id AND A.person = C.person\nWHERE \n    A.result = 'winner' AND A.year = 2010\nGROUP BY \n    P.name, A.award, E.title, C.role",
    "4231": "SELECT E.title\nFROM Episode E\nJOIN Vote V ON E.episode_id = V.episode_id\nWHERE V.stars = (SELECT MAX(stars) FROM Vote)\nAND V.votes = (SELECT MAX(votes) FROM Vote)",
    "4232": "SELECT COUNT(*) AS total_awards_won\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.season = 20\nAND Award.result = 'Winner'",
    "4233": "SELECT Episode.title\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Award.organization = 'Primetime Emmy Awards'\nAND Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND Award.result = 'Nominee'\nGROUP BY Episode.episode_id\nHAVING COUNT(Episode.episode_id) = 21",
    "4234": "SELECT AVG(stars) AS average_stars, summary\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.episode_id = 'S20-E12'",
    "4235": "SELECT Person.name\nFROM Person\nJOIN Award ON Person.name = Award.person\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Award.organization = 'Primetime Emmy Awards'\nAND Award.award = 'Outstanding Voice-Over Performance'\nAND Award.result = 'Winner'\nAND Character_Award.character = 'Homer simpson 20'",
    "4236": "SELECT p.birth_name, c.role\nFROM Person p\nJOIN Credit c ON p.name = c.person\nWHERE p.name = 'Al Jean' AND c.episode_id IN (\n    SELECT episode_id\n    FROM Episode\n    WHERE season = 20\n)",
    "4237": "SELECT COUNT(*) AS nominations\nFROM Award\nWHERE person = 'Billy Kimball'\nAND year = 2010\nAND result = 'Nominee'\nAND episode_id IN (\n    SELECT episode_id\n    FROM Episode\n    WHERE title LIKE 'The Simpson 20s:%'\n    AND season = 20\n)",
    "4238": "SELECT keyword \nFROM Keyword \nWHERE episode_id = (\n    SELECT episode_id \n    FROM Episode \n    WHERE title = 'Take My Life, Please'\n)",
    "4239": "SELECT award, award_category\nFROM Award\nWHERE result = 'Winner' AND episode_id IS NOT NULL\nORDER BY year DESC\nLIMIT 1",
    "4240": "SELECT \n    SUM(CASE WHEN result = 'winner' THEN 1 ELSE 0 END) * 1.0 / COUNT(award_id) AS average_awards_winning_rate\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.season = 20",
    "4241": "SELECT COUNT(*) AS episodes_count\nFROM Episode\nWHERE air_date BETWEEN '2008-10-01' AND '2008-11-30';",
    "4242": "SELECT episode_id, title, MIN(rating) AS worst_rating\nFROM Episode\nWHERE strftime('%Y', air_date) = '2009'\nGROUP BY episode_id\nORDER BY worst_rating ASC\nLIMIT 1;",
    "4243": "SELECT category, role\nFROM Credit\nWHERE person = 'Bonita Pietila'",
    "4244": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE p.birthdate = '1957-10-29'\nAND p.birth_place = 'Chicago'\nAND p.birth_region = 'Illinois'\nAND e.season = 20",
    "4245": "SELECT person\nFROM Credit\nWHERE episode_id IN (SELECT episode_id FROM Episode WHERE season = 20)\nAND role = 'producer'",
    "4246": "SELECT \n    P.name,\n    (2009 - CAST(strftime('%Y', P.birthdate) AS INTEGER)) AS age_in_2009\nFROM \n    Person P\nJOIN \n    Award A ON P.name = A.person\nWHERE \n    A.organization = 'Primetime Emmy Awards'\n    AND A.year = 2009\n    AND A.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'\n    AND A.role = 'composer'\n    AND A.result = 'Nominee'",
    "4247": "SELECT e.title\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE e.season = 20\nGROUP BY e.episode_id\nORDER BY COUNT(a.episode_id) DESC\nLIMIT 1",
    "4248": "SELECT birth_place FROM Person WHERE name = 'Dan Castellaneta';",
    "4249": "SELECT COUNT(DISTINCT person) \nFROM Credit \nJOIN Person ON Credit.person = Person.name \nWHERE Person.birth_country = 'USA'",
    "4250": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nWHERE p.birthdate < '1970-01-01'",
    "4251": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nWHERE p.birth_place = 'California' AND p.birth_country = 'USA' AND p.birthdate BETWEEN '1958-01-01' AND '1969-12-31'",
    "4252": "SELECT episode_id\nFROM Vote\nWHERE stars = 5 AND votes > 100",
    "4253": "INSERT INTO Keyword (episode_id, keyword)\nSELECT episode_id, keyword\nFROM (\n    VALUES \n    ('Double, Double, Boy in Trouble', 'Double'),\n    ('Double, Double, Boy in Trouble', 'Trouble'),\n    ('Double, Double, Boy in Trouble', 'Boy')\n) AS temp(episode_id, keyword)\nWHERE EXISTS (\n    SELECT 1\n    FROM Episode\n    WHERE title = temp.episode_id\n);",
    "4254": "SELECT e.episode_id, e.title\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE e.number_in_series BETWEEN 10 AND 20\nAND v.votes > 200",
    "4255": "SELECT k.keyword\nFROM Keyword k\nJOIN Episode e ON k.episode_id = e.episode_id\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.award_category = 'Primetime Emmy' AND a.result = 'Won'",
    "4256": "SELECT person\nFROM Award\nWHERE award_category = 'Primetime Emmy' AND votes = (\n    SELECT MAX(votes)\n    FROM Award\n    WHERE award_category = 'Primetime Emmy'\n)",
    "4257": "SELECT Award.episode_id\nFROM Award\nJOIN Vote ON Award.episode_id = Vote.episode_id\nWHERE Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND Vote.stars = 10",
    "4258": "SELECT Credit.person AS director\nFROM Credit\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Credit.role = 'director'\nAND Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND Episode.title = 'No Loan Again, Naturally'",
    "4259": "SELECT DISTINCT Credit.person\nFROM Credit\nJOIN Episode ON Credit.episode_id = Episode.episode_id\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Credit.role = 'writer' AND Vote.stars > 5 AND strftime('%Y', Episode.air_date) = '2009'",
    "4260": "SELECT COUNT(DISTINCT a.person)\nFROM Award a\nJOIN Person p ON a.person = p.name\nWHERE a.award_category = 'WGA Award (TV)'\nAND p.birth_country = 'USA'\nAND p.birthdate BETWEEN '2009-01-01' AND '2010-12-31';",
    "4261": "SELECT e.episode_id, e.title\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE a.role = 'composer'\nAND a.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'\nAND v.votes > 200",
    "4262": "SELECT Award.episode_id\nFROM Award\nJOIN Person ON Award.person = Person.name\nWHERE Person.name = 'Al Jean'\nAND Award.year = 2009\nAND Award.award_category = 'Primetime Emmy Award'",
    "4263": "SELECT\n    (SUM(CASE WHEN episode = 1 THEN votes ELSE 0 END) - SUM(CASE WHEN episode = 5 THEN votes ELSE 0 END)) AS more_votes_for_episode_1_than_5\nFROM\n    Vote\nJOIN\n    Episode ON Vote.episode_id = Episode.episode_id",
    "4264": "SELECT Award.award\nFROM Award\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Character_Award.character = 'Homer Simpson'\nAND Award.year = 2009",
    "4265": "WITH AwardedEpisodes AS (\n    SELECT e.episode_id\n    FROM Episode e\n    JOIN Award a ON e.episode_id = a.episode_id\n    WHERE a.award = 'Outstanding Animated Program (Programming Under One Hour)'\n),\nLowVoteEpisodes AS (\n    SELECT episode_id\n    FROM Vote\n    WHERE votes < 100\n),\nAwardedLowVoteEpisodes AS (\n    SELECT ae.episode_id\n    FROM AwardedEpisodes ae\n    JOIN LowVoteEpisodes lve ON ae.episode_id = lve.episode_id\n),\nTotalAwarded AS (\n    SELECT COUNT(*) AS TotalAwarded\n    FROM AwardedEpisodes\n),\nTotalAwardedLowVotes AS (\n    SELECT COUNT(*) AS TotalAwardedLowVotes\n    FROM AwardedLowVoteEpisodes\n),\nPercentageCalc AS (\n    SELECT \n        TotalAwardedLowVotes,\n        TotalAwarded,\n        (CAST(TotalAwardedLowVotes AS REAL) / TotalAwarded) * 100 AS Percentage\n    FROM TotalAwarded, TotalAwardedLowVotes\n)\nSELECT TotalAwardedLowVotes, TotalAwarded, Percentage\nFROM PercentageCalc;",
    "4266": "SELECT \n    COUNT(DISTINCT CASE WHEN P.birth_country = 'USA' THEN A.person END) AS US_Recipients,\n    COUNT(DISTINCT A.person) AS Total_Recipients,\n    (COUNT(DISTINCT CASE WHEN P.birth_country = 'USA' THEN A.person END) * 1.0 / COUNT(DISTINCT A.person)) * 100 AS Percentage_Americans\nFROM \n    Award A\nINNER JOIN \n    Person P ON A.person = P.name\nWHERE \n    A.award_category = 'Primetime Emmy'",
    "4267": "SELECT Person.name\nFROM Person\nJOIN Award ON Person.name = Award.person\nWHERE Award.award_category = 'Outstanding Voice-Over Performance'\nAND Award.episode_id LIKE 'S20%'",
    "4268": "SELECT COUNT(DISTINCT a.person)\nFROM Award a\nJOIN Credit c ON a.person = c.person\nWHERE a.result = 'Nominee'\nAND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND c.role = 'executive producer'",
    "4269": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nWHERE strftime('%Y', p.birthdate) = '1962' AND p.birth_region = 'California'",
    "4270": "SELECT COUNT(DISTINCT Person.name)\nFROM Person\nJOIN Credit ON Person.name = Credit.person\nWHERE Person.height_meters > 1.70 AND Person.birth_country = 'Canada'",
    "4271": "SELECT COUNT(DISTINCT person) \nFROM Award \nWHERE award_category = 'Animation' AND result = 'Nominee'",
    "4272": "SELECT episode_id, title, rating\nFROM Episode\nWHERE rating > 7 AND rating <= 10\nLIMIT 3;",
    "4273": "SELECT episode_id, title, votes\nFROM Episode\nORDER BY votes DESC\nLIMIT 5",
    "4274": "SELECT e.episode_id, e.title, v.stars, SUM(v.votes) AS total_votes\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE v.stars = 1\nGROUP BY e.episode_id\nORDER BY total_votes DESC\nLIMIT 3",
    "4275": "SELECT Character_Award.character\nFROM Character_Award\nJOIN Award ON Character_Award.award_id = Award.award_id\nJOIN Person ON Award.person = Person.name\nWHERE Person.name = 'Dan Castellaneta'\nAND Award.award LIKE '%Voice-Over%'",
    "4276": "SELECT e.*\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE e.air_date LIKE '2008%'\nAND v.stars = 10\nAND v.votes = (\n    SELECT MAX(votes)\n    FROM Vote\n    WHERE stars = 10\n    AND episode_id IN (\n        SELECT episode_id\n        FROM Episode\n        WHERE air_date LIKE '2008%'\n    )\n)",
    "4277": "SELECT keyword \nFROM Keyword \nWHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Take My Life, Please')",
    "4278": "SELECT E1.title AS Episode1, E2.title AS Episode2\nFROM Episode E1\nJOIN Keyword K1 ON E1.episode_id = K1.episode_id\nJOIN Keyword K2 ON K1.keyword = K2.keyword\nJOIN Episode E2 ON K2.episode_id = E2.episode_id AND E1.episode_id < E2.episode_id\nWHERE K1.keyword = '1930s to 2020s'",
    "4279": "SELECT Award.episode_id, Episode.title\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Award.person = 'Joel H. Cohen' AND Award.year = 2010",
    "4280": "SELECT votes\nFROM Vote\nWHERE episode_id = (\n    SELECT episode_id\n    FROM Episode\n    WHERE title = 'Lisa the Drama Queen'\n)\nAND stars = 5",
    "4281": "SELECT v.votes\nFROM Vote v\nJOIN Keyword k ON v.episode_id = k.episode_id\nWHERE k.keyword = 'reference to the fantastic four' AND v.stars = 10",
    "4282": "SELECT\n    (SELECT votes FROM Vote WHERE stars = 1 AND episode_id = (SELECT episode_id FROM Episode WHERE title = 'The Burns and the Bees'))\n    -\n    (SELECT votes FROM Vote WHERE stars = 10 AND episode_id = (SELECT episode_id FROM Episode WHERE title = 'The Burns and the Bees')) AS difference",
    "4283": "SELECT k.keyword\nFROM Keyword k\nJOIN Episode e ON k.episode_id = e.episode_id\nORDER BY e.votes ASC\nLIMIT 1",
    "4284": "SELECT e.*\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE v.stars = 2 AND v.votes > 20 AND e.rating > 5 AND e.rating <= 7",
    "4285": "SELECT episode_id\nFROM Vote\nORDER BY votes DESC\nLIMIT 1",
    "4286": "SELECT name\nFROM Person\nORDER BY birthdate\nLIMIT 1",
    "4287": "SELECT Episode.episode_id, Episode.title\nFROM Episode\nJOIN Credit ON Episode.episode_id = Credit.episode_id\nWHERE Credit.person = 'Oscar Cervantes' AND Credit.credited = 'true';",
    "4288": "SELECT Credit.person, Credit.role\nFROM Credit\nJOIN Person ON Credit.person = Person.name\nWHERE Person.birth_country != 'USA'",
    "4289": "SELECT v.votes\nFROM Vote v\nJOIN Episode e ON v.episode_id = e.episode_id\nWHERE v.stars = 1 AND e.rating = (\n    SELECT MIN(rating)\n    FROM Episode\n)",
    "4290": "SELECT Character_Award.character\nFROM Award\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Award.award = 'Outstanding Voice-Over Performance' AND Award.result = 'Winner'",
    "4291": "SELECT Episode.summary\nFROM Episode\nJOIN Credit ON Episode.episode_id = Credit.episode_id\nWHERE Credit.person = 'Emily Blunt'",
    "4292": "SELECT Credit.role\nFROM Credit\nJOIN Person ON Credit.person = Person.name\nWHERE Person.nickname = 'The Tiny Canadian'",
    "4293": "SELECT \n    e.episode_id, \n    e.title, \n    v.percent\nFROM \n    Episode e\nJOIN \n    Award a ON e.episode_id = a.episode_id\nJOIN \n    Vote v ON e.episode_id = v.episode_id\nWHERE \n    v.stars = 5\nORDER BY \n    v.percent DESC\nLIMIT 1",
    "4294": "SELECT person\nFROM Credit\nWHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'In the Name of the Grandfather')\nAND category = 'Cast'\nAND credited = 'true'",
    "4295": "SELECT Person.birthdate\nFROM Person\nJOIN Award ON Person.name = Award.person\nWHERE Award.result = 'Winner'",
    "4296": "SELECT Credit.person AS writer\nFROM Credit\nJOIN (\n    SELECT episode_id\n    FROM Vote\n    WHERE stars = 10\n    ORDER BY votes DESC\n    LIMIT 1\n) AS MostVotedEpisode ON Credit.episode_id = MostVotedEpisode.episode_id\nWHERE Credit.role = 'Writer'",
    "4297": "SELECT Award.award\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.air_date = '11/30/2008' AND Award.result = 'Winner'",
    "4298": "SELECT * FROM Credit WHERE category = 'Music Department'",
    "4299": "SELECT keyword\nFROM Keyword\nJOIN Episode ON Keyword.episode_id = Episode.episode_id\nWHERE Episode.number_in_series = 426",
    "4300": "WITH SeasonAverage AS (\n    SELECT \n        e.season,\n        AVG(v.votes) AS avg_votes\n    FROM \n        Episode e\n    JOIN Vote v ON e.episode_id = v.episode_id\n    WHERE v.stars = 7\n    GROUP BY e.season\n),\nSevenStarVotes AS (\n    SELECT \n        e.episode_id,\n        e.title,\n        e.season,\n        v.votes AS seven_star_votes\n    FROM \n        Episode e\n    JOIN Vote v ON e.episode_id = v.episode_id\n    WHERE v.stars = 7\n)\nSELECT \n    ssv.title\nFROM \n    SevenStarVotes ssv\nJOIN SeasonAverage sa ON ssv.season = sa.season\nWHERE ssv.seven_star_votes > sa.avg_votes",
    "4301": "SELECT\n    (SUM(CASE WHEN a.result = 'Nominee' THEN v.votes ELSE 0 END) * 1.0 / SUM(v.votes)) * 100 AS percentage_of_votes_from_nominated_episodes\nFROM\n    Vote v\nJOIN\n    Award a ON v.episode_id = a.episode_id\nWHERE\n    a.result = 'Nominee'",
    "4302": "SELECT name FROM Person WHERE nickname IS NOT NULL",
    "4303": "SELECT birth_country\nFROM Person\nORDER BY height_meters DESC\nLIMIT 1",
    "4304": "SELECT AVG(height_meters) AS average_height\nFROM Person\nWHERE birth_country = 'USA'",
    "4305": "SELECT \n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM Person) * 100) AS percentage\nFROM \n    Person\nWHERE \n    birthdate > '1970-01-01' AND birth_region = 'California'",
    "4306": "SELECT COUNT(*) \nFROM Person \nWHERE NOT (birth_region = 'Connecticut' AND birth_country = 'USA');",
    "4307": "SELECT title\nFROM Episode\nWHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3')",
    "4308": "SELECT episode_image FROM Episode WHERE episode = 5;",
    "4309": "SELECT SUM(votes) AS total_votes_for_high_rated_episodes\nFROM Episode\nWHERE rating > 7.0",
    "4310": "SELECT COUNT(DISTINCT episode_id) AS titles_with_casting_department\nFROM Credit\nWHERE category = 'Casting Department'",
    "4311": "SELECT COUNT(DISTINCT p.name)\nFROM Person p\nJOIN Credit c ON p.name = c.person\nWHERE c.role = 'additional timer' AND p.birth_country = 'USA'",
    "4312": "SELECT COUNT(*) \nFROM Person \nJOIN Credit ON Person.name = Credit.person \nWHERE Person.birthdate > '1970-01-01' AND Credit.role = 'animation executive producer'",
    "4313": "SELECT e.summary\nFROM Episode e\nJOIN Credit c ON e.episode_id = c.episode_id\nWHERE c.credited = ''",
    "4314": "SELECT e.rating\nFROM Episode e\nJOIN Credit c ON e.episode_id = c.episode_id\nWHERE c.person = 'Jason Bikowski' AND c.category = 'Producer'",
    "4315": "SELECT AVG(height_meters) AS avg_height\nFROM Person\nJOIN Credit ON Person.name = Credit.person\nWHERE Credit.category = 'Animation Department'",
    "4316": "SELECT Character_Award.character\nFROM Character_Award\nJOIN Award ON Character_Award.award_id = Award.award_id\nWHERE Award.award_category = 'Primetime Emmy' AND Award.year = 2009 AND Award.result = 'won'",
    "4317": "SELECT Character_Award.character\nFROM Character_Award\nJOIN Award ON Character_Award.award_id = Award.award_id\nWHERE Award.award_category = 'Primetime Emmy'\nAND Award.year BETWEEN 2009 AND 2010\nAND Award.result = 'Nominee'",
    "4318": "SELECT SUM(v.votes) AS total_votes\nFROM Vote v\nJOIN Credit c ON v.episode_id = c.episode_id\nWHERE c.person = 'Adam Kuhlman'",
    "4319": "SELECT Keyword.keyword, Credit.person\nFROM Keyword\nLEFT JOIN Credit ON Keyword.episode_id = Credit.episode_id\nWHERE Keyword.episode_id = 'S20-E1'",
    "4320": "SELECT Keyword.keyword\nFROM Keyword\nJOIN Vote ON Keyword.episode_id = Vote.episode_id\nWHERE Vote.stars = 10 AND Vote.percent >= 30",
    "4321": "SELECT \n    (SUM(CASE WHEN stars = 5 THEN 1 ELSE 0 END) * 1.0 / COUNT(stars)) * 100 AS percentage\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.title = \"Sex, Pies and Idiot Scrapes\"",
    "4322": "SELECT EXISTS(\n    SELECT 1 \n    FROM Keyword \n    JOIN Episode ON Keyword.episode_id = Episode.episode_id \n    WHERE Keyword.keyword = 'limbo dancing' AND Episode.title = 'Dangerous Curves'\n) AS IsKeywordForTitle;",
    "4323": "SELECT e.title\nFROM Episode e\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.award = 'Best International TV Series'\nAND a.year = 2017\nAND a.result = 'Winner'",
    "4324": "SELECT k.keyword\nFROM Keyword k\nJOIN Episode e ON k.episode_id = e.episode_id\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.award_category = 'WGA Award (TV)' AND a.result = 'Winner'",
    "4325": "SELECT p.birth_place\nFROM Person p\nJOIN Credit c ON p.name = c.person\nJOIN Episode e ON c.episode_id = e.episode_id\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE c.role = 'co-executive producer'\nAND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND a.result = 'Nominee'",
    "4326": "SELECT SUM(v.votes) AS total_votes\nFROM Vote v\nJOIN Episode e ON v.episode_id = e.episode_id\nJOIN Award a ON e.episode_id = a.episode_id\nWHERE a.award = 'Blimp Award'\nAND a.result IN ('Winner', 'Nominee')\nAND v.stars > 1 AND v.stars < 5",
    "4327": "SELECT SUM(E.rating) AS total_rating\nFROM Episode E\nJOIN Award A ON E.episode_id = A.episode_id\nWHERE A.result = 'Winner'\nAND (A.award = 'OFTA Television Award' OR A.award = 'WGA Award (TV)')",
    "4328": "SELECT SUM(percent) AS percent_5_to_10\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.title = \"No Loan Again, Naturally\" AND stars BETWEEN 5 AND 10",
    "4329": "SELECT COUNT(*) FROM Episode\nWHERE rating > 8;",
    "4330": "SELECT episode_id\nFROM Vote\nORDER BY votes DESC\nLIMIT 1",
    "4331": "SELECT COUNT(*) AS episodes_with_2d_animation\nFROM Keyword\nWHERE keyword = '2d animation'",
    "4332": "SELECT organization FROM Award WHERE award_id = 328;",
    "4333": "SELECT COUNT(*) AS awards_held_in_2009\nFROM Award\nWHERE year = 2009;",
    "4334": "SELECT COUNT(*) AS Primetime_Emmy_Awards\nFROM Award\nWHERE award_category = 'Primetime Emmy'",
    "4335": "SELECT p.birth_name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nWHERE c.role = 'co-executive producer' AND p.height_meters > 1.60",
    "4336": "SELECT \n    (CAST(COUNT(DISTINCT Person.name) AS REAL) / (SELECT COUNT(*) FROM Person WHERE birth_country = 'USA')) * 100 AS percentage\nFROM \n    Person\nJOIN \n    Award ON Person.name = Award.person\nWHERE \n    Award.result = 'Nominee' AND Person.birth_country = 'USA'",
    "4337": "SELECT \n    (CAST(SUM(CASE WHEN p.height_meters > 1.75 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    Award a\nJOIN \n    Person p ON a.person = p.name\nWHERE \n    a.result = 'Winner'",
    "4338": "SELECT Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Vote.stars = 2",
    "4339": "SELECT Vote.stars\nFROM Vote\nJOIN Episode ON Vote.episode_id = Episode.episode_id\nWHERE Episode.title = \"How the Test Was Won\"",
    "4340": "SELECT COUNT(*) \nFROM Episode \nJOIN Vote ON Episode.episode_id = Vote.episode_id \nWHERE stars > 5 AND air_date LIKE '2008%'",
    "4341": "SELECT Character_Award.character\nFROM Award\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Award.year = 2009",
    "4342": "SELECT Award.year\nFROM Award\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Character_Award.character = 'Mr. Burns'",
    "4343": "SELECT Award.award_category\nFROM Award\nJOIN Character_Award ON Award.award_id = Character_Award.award_id\nWHERE Character_Award.character = 'Lenny'",
    "4344": "SELECT person FROM Credit WHERE role = 'Smithers'",
    "4345": "SELECT keyword \nFROM Keyword \nWHERE episode_id = (\n    SELECT episode_id \n    FROM Episode \n    WHERE title = 'Dangerous Curves'\n)",
    "4346": "SELECT k.keyword\nFROM Keyword k\nJOIN Episode e ON k.episode_id = e.episode_id\nWHERE e.air_date LIKE '2008%'",
    "4347": "SELECT COUNT(*) \nFROM Episode \nWHERE rating < 8 \nAND air_date LIKE '2009%'",
    "4348": "SELECT p.birth_name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nWHERE c.role = 'director' AND p.birth_country = 'South Korea'",
    "4349": "SELECT COUNT(*) AS awards_won\nFROM Award\nWHERE episode_id IN (\n    SELECT episode_id\n    FROM Episode\n    WHERE season = 20\n)\nAND year = 2009\nAND result = 'Winner'",
    "4350": "SELECT COUNT(*) AS total_episodes_below_7\nFROM Episode\nWHERE rating < 7;",
    "4351": "SELECT name \nFROM Person \nWHERE birth_region = 'California' AND birth_country = 'USA'",
    "4352": "SELECT COUNT(*) AS credited_casting_count\nFROM Credit\nWHERE episode_id IN ('S20-E5', 'S20-E6', 'S20-E7', 'S20-E8', 'S20-E9', 'S20-E10')\nAND credited = 'true'\nAND role = 'casting'",
    "4353": "SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9",
    "4354": "SELECT Episode.title\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Award.organization = 'Primetime Emmy Awards'\nAND Award.year = 2009\nAND Award.result = 'Winner'",
    "4355": "SELECT Episode.episode_id\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Episode.air_date LIKE '2008%' AND Vote.stars <= 5",
    "4356": "SELECT c.category\nFROM Credit c\nJOIN (\n    SELECT e.episode_id\n    FROM Episode e\n    WHERE e.votes = (SELECT MAX(votes) FROM Episode)\n) AS highest_votes_episode ON c.episode_id = highest_votes_episode.episode_id\nWHERE c.person = 'Carlton Batten'",
    "4357": "SELECT v.percent\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE e.air_date LIKE '2008%' AND v.votes BETWEEN 920 AND 950",
    "4358": "SELECT episode_id, title\nFROM Episode\nJOIN Credit ON Episode.episode_id = Credit.episode_id\nWHERE Credit.person = 'Bonita Pietila' AND Credit.category = 'casting' AND Credit.credited = 'true'",
    "4359": "SELECT COUNT(DISTINCT Episode.episode_id) AS episodes_with_percent_greater_than_6\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nWHERE Award.organization = 'Annie Awards'\nAND Award.result = 'Nominee'\nAND Vote.percent > 6",
    "4360": "SELECT Episode.title\nFROM Episode\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Award.result = 'Nominee'\nAND Award.award_category = 'WGA Award (TV)'\nAND Episode.votes > 1000",
    "4361": "SELECT p.name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE c.category = 'Animation Department'\nAND c.credited = 'true'\nAND c.role = 'additional timer'\nAND e.title = 'How the Test Was Won'",
    "4362": "SELECT DISTINCT p.name\nFROM Person p\nJOIN Credit c ON p.name = c.person\nJOIN Episode e ON c.episode_id = e.episode_id\nWHERE e.air_date LIKE '2008-11%'",
    "4363": "SELECT Episode.title\nFROM Episode\nJOIN Vote ON Episode.episode_id = Vote.episode_id\nJOIN Award ON Episode.episode_id = Award.episode_id\nWHERE Vote.stars = 5\nAND Award.result = 'Nominee'\nAND Award.award_category = 'Prism Award'\nAND Episode.air_date = '2009-04-19'",
    "4364": "SELECT DISTINCT a.award_category\nFROM Award a\nJOIN Episode e ON a.episode_id = e.episode_id\nWHERE a.result = 'Nominee' AND e.episode_id = (\n    SELECT episode_id\n    FROM Episode\n    ORDER BY votes DESC\n    LIMIT 1\n)",
    "4365": "SELECT COUNT(*) \nFROM Credit \nWHERE episode_id IN (SELECT episode_id FROM Episode WHERE air_date LIKE '2009%') \nAND person = 'Sam Im' \nAND role = 'additional timer' \nAND credited = 'true';",
    "4366": "SELECT e.title\nFROM Episode e\nJOIN Vote v ON e.episode_id = v.episode_id\nWHERE v.stars > (SELECT AVG(stars) * 0.7 FROM Vote)",
    "4367": "SELECT \n    (COUNT(CASE WHEN result = 'Nominee' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS nomination_percentage\nFROM Award\nJOIN Episode ON Award.episode_id = Episode.episode_id\nWHERE Episode.title = 'Gone Maggie Gone'\nAND Award.year = 2009",
    "4368": "SELECT COUNT(DISTINCT enrolled.name) \nFROM enrolled \nJOIN longest_absense_from_school \nON enrolled.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month = 0;",
    "4369": "SELECT MAX(month) AS longest_absence_months FROM longest_absense_from_school",
    "4370": "SELECT COUNT(DISTINCT e.name) AS navy_students\nFROM enlist e\nJOIN enrolled en ON e.name = en.name\nWHERE e.organ = 'navy';",
    "4371": "SELECT COUNT(DISTINCT e.name)\nFROM enrolled e\nJOIN longest_absense_from_school las ON e.name = las.name\nJOIN male m ON e.name = m.name\nWHERE las.month >= 5",
    "4372": "SELECT male.name \nFROM male \nJOIN enlist ON male.name = enlist.name \nWHERE enlist.organ = 'navy'",
    "4373": "SELECT COUNT(DISTINCT f.name)\nFROM filed_for_bankrupcy f\nJOIN longest_absense_from_school l ON f.name = l.name\nWHERE l.month > 5;",
    "4374": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e \nJOIN no_payment_due npd ON e.name = npd.name \nWHERE e.organ = 'navy' AND npd.bool = 'pos';",
    "4375": "SELECT p.name \nFROM person p\nJOIN male m ON p.name = m.name\nJOIN disabled d ON p.name = d.name\nJOIN filed_for_bankrupcy f ON p.name = f.name",
    "4376": "SELECT COUNT(DISTINCT d.name)\nFROM disabled d\nJOIN enrolled e ON d.name = e.name\nLEFT JOIN male m ON d.name = m.name\nWHERE m.name IS NULL;",
    "4377": "SELECT COUNT(*) \nFROM unemployed \nWHERE name NOT IN (\n  SELECT name \n  FROM no_payment_due \n  WHERE bool = 'false' -- Assuming 'false' means no payment due; adjust based on actual data representation\n)",
    "4378": "SELECT MAX(longest_absense_from_school.month) AS longest_absence\nFROM longest_absense_from_school\nJOIN enlist ON longest_absense_from_school.name = enlist.name\nWHERE enlist.organ = 'navy'",
    "4379": "SELECT COUNT(DISTINCT d.name) \nFROM disabled d\nJOIN enrolled e ON d.name = e.name\nJOIN longest_absense_from_school las ON d.name = las.name\nWHERE las.month = 0",
    "4380": "SELECT DISTINCT e.organ\nFROM enlist e\nJOIN longest_absense_from_school las ON e.name = las.name\nWHERE las.month = 9",
    "4381": "SELECT organ AS department, COUNT(*) AS disabled_students\nFROM enlist\nJOIN disabled ON enlist.name = disabled.name\nGROUP BY organ\nORDER BY disabled_students DESC\nLIMIT 1",
    "4382": "SELECT f.name\nFROM filed_for_bankrupcy f\nLEFT JOIN male m ON f.name = m.name\nWHERE m.name IS NULL;",
    "4383": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN organ = 'navy' AND male.name IS NOT NULL THEN enlist.name END) AS FLOAT) / \n    COUNT(DISTINCT CASE WHEN organ = 'navy' THEN enlist.name END)) * 100 AS percentage_of_male_students_in_navy\nFROM \n    enlist\nLEFT JOIN \n    male ON enlist.name = male.name\nWHERE \n    organ = 'navy'",
    "4384": "SELECT AVG(`month`) AS average_absence\nFROM longest_absense_from_school\nWHERE `name` IN (SELECT `name` FROM disabled)",
    "4385": "SELECT e.name\nFROM enlist e\nJOIN enrolled enr ON e.name = enr.name\nWHERE e.organ = 'foreign_legion';",
    "4386": "SELECT CASE WHEN bool = 'pos' THEN 'Yes' ELSE 'No' END AS PaymentDue\nFROM no_payment_due\nWHERE name = 'student348'",
    "4387": "SELECT school FROM enrolled WHERE name = 'student829';",
    "4388": "SELECT \"month\" FROM longest_absense_from_school WHERE \"name\" = 'student217';",
    "4389": "SELECT name FROM longest_absense_from_school WHERE month = 6;",
    "4390": "SELECT organ FROM enlist WHERE name = 'student285'",
    "4391": "SELECT \n    d.name AS Disabled, \n    e.school AS School\nFROM \n    disabled d\nJOIN \n    enrolled e ON d.name = e.name\nWHERE \n    d.name = 'student281'",
    "4392": "SELECT enrolled.name, enrolled.school\nFROM enlisted\nJOIN enrolled ON enlisted.name = enrolled.name\nWHERE enlisted.organ = 'air_force';",
    "4393": "SELECT p.name\nFROM person p\nJOIN no_payment_due npd ON p.name = npd.name\nLEFT JOIN male m ON p.name = m.name\nWHERE npd.bool = 'neg' AND m.name IS NULL\nLIMIT 10",
    "4394": "SELECT enlist.name, enlist.organ\nFROM enlist\nJOIN no_payment_due ON enlist.name = no_payment_due.name\nWHERE no_payment_due.bool = 'pos'\nLIMIT 5",
    "4395": "SELECT d.name\nFROM disabled d\nJOIN enrolled e ON d.name = e.name\nWHERE e.school = 'smc'",
    "4396": "SELECT f.name\nFROM filed_for_bankrupcy f\nJOIN enlist e ON f.name = e.name AND e.organ = 'foreign_legion'",
    "4397": "SELECT COUNT(DISTINCT enrolled.name) \nFROM enrolled \nJOIN male ON enrolled.name = male.name \nJOIN no_payment_due ON enrolled.name = no_payment_due.name \nWHERE no_payment_due.bool = 'neg';",
    "4398": "SELECT e.name\nFROM enlist e\nJOIN enrolled r ON e.name = r.name\nJOIN longest_absense_from_school l ON e.name = l.name\nWHERE e.organ = 'marines' AND l.month = 6",
    "4399": "SELECT COUNT(*) \nFROM enrolled \nJOIN unemployed ON enrolled.name = unemployed.name \nWHERE school = 'smc';",
    "4400": "SELECT COUNT(*) \nFROM unemployed \nJOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month = 6;",
    "4401": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e \nJOIN enrolled r ON e.name = r.name \nWHERE e.organ = 'peace_corps' AND r.school = 'ucsd';",
    "4402": "SELECT enlist.organ AS organization, \n       CASE \n           WHEN longest_absense_from_school.month > 0 THEN 'Yes' \n           ELSE 'No' \n       END AS has_been_absent \nFROM enlist \nLEFT JOIN longest_absense_from_school ON enlist.name = longest_absense_from_school.name \nWHERE enlist.name = 'Student21'",
    "4403": "WITH EnlistedInForeignLegion AS (\n    SELECT e.name\n    FROM enlist e\n    WHERE e.organ = 'foreign_legion'\n),\nDuePayment AS (\n    SELECT np.name\n    FROM no_payment_due np\n    JOIN bool b ON np.bool = b.name\n    WHERE b.name = 'pos'\n),\nEnlistedWithDuePayment AS (\n    SELECT e.name\n    FROM EnlistedInForeignLegion e\n    JOIN DuePayment dp ON e.name = dp.name\n),\nTotalEnlistedInForeignLegion AS (\n    SELECT COUNT(*) AS total\n    FROM EnlistedInForeignLegion\n),\nTotalEnlistedWithDuePayment AS (\n    SELECT COUNT(*) AS total\n    FROM EnlistedWithDuePayment\n)\nSELECT \n    CASE \n        WHEN TotalEnlistedInForeignLegion.total = 0 THEN 0\n        ELSE (TotalEnlistedWithDuePayment.total * 1.0 / TotalEnlistedInForeignLegion.total) * 100\n    END AS percentage_ratio\nFROM TotalEnlistedInForeignLegion, TotalEnlistedWithDuePayment",
    "4404": "WITH NavyEnlisted AS (\n    SELECT COUNT(DISTINCT e.name) AS NavyCount\n    FROM enlist e\n    WHERE e.organ = 'navy'\n),\nOCCEntrolled AS (\n    SELECT COUNT(DISTINCT en.name) AS OCCCount\n    FROM enrolled en\n    WHERE en.school = 'occ'\n),\nCombinedCounts AS (\n    SELECT \n        (SELECT NavyCount FROM NavyEnlisted) AS NavyCount,\n        (SELECT OCCCount FROM OCCEntrolled) AS OCCCount\n)\nSELECT \n    (NavyCount * 1.0 / OCCCount) * 100 AS PercentageOfNavyInOCC\nFROM CombinedCounts",
    "4405": "SELECT name \nFROM longest_absense_from_school \nWHERE month = (SELECT MAX(month) FROM longest_absense_from_school)",
    "4406": "SELECT COUNT(DISTINCT name) AS total_students FROM enrolled;",
    "4407": "SELECT MAX(month) AS longest_absence_duration FROM longest_absense_from_school;",
    "4408": "SELECT COUNT(*) FROM longest_absense_from_school WHERE month = 4;",
    "4409": "SELECT COUNT(DISTINCT p.name) \nFROM person p \nJOIN unemployed u ON p.name = u.name \nJOIN filed_for_bankrupcy f ON p.name = f.name \nJOIN enrolled e ON p.name = e.name;",
    "4410": "SELECT disabled.name, enlist.organ\nFROM disabled\nJOIN enlist ON disabled.name = enlist.name",
    "4411": "SELECT COUNT(DISTINCT p.name) \nFROM person p\nJOIN unemployed u ON p.name = u.name\nJOIN filed_for_bankrupcy f ON p.name = f.name\nJOIN no_payment_due npd ON p.name = npd.name\nWHERE npd.bool = 'neg';",
    "4412": "SELECT \n    CASE \n        WHEN EXISTS (\n            SELECT 1 \n            FROM person \n            JOIN disabled ON person.name = disabled.name \n            JOIN male ON person.name = male.name \n            WHERE person.name = '124'\n        ) THEN 'Yes'\n        ELSE 'No'\n    END AS 'Is Disabled Male?'",
    "4413": "SELECT \n    p.name AS student,\n    CASE WHEN u.name IS NOT NULL THEN 'Unemployed' ELSE 'Employed' END AS employment_status,\n    CASE WHEN d.name IS NOT NULL THEN 'Disabled' ELSE 'Not Disabled' END AS disability_status,\n    CASE WHEN m.name IS NOT NULL THEN 'Male' ELSE 'Female' END AS gender,\n    CASE WHEN np.bool IS NULL OR np.bool = 'neg' THEN 'No Payment Due' ELSE 'Payment Due' END AS school_debt_status\nFROM \n    person p\nLEFT JOIN \n    unemployed u ON p.name = u.name\nLEFT JOIN \n    disabled d ON p.name = d.name\nLEFT JOIN \n    male m ON p.name = m.name\nLEFT JOIN \n    no_payment_due np ON p.name = np.name\nWHERE \n    p.name IN ('student180', 'student117')",
    "4414": "SELECT COUNT(DISTINCT e.name) AS female_students_joined_marines_and_air_force\nFROM enlisted e\nJOIN person p ON e.name = p.name\nLEFT JOIN male m ON e.name = m.name\nWHERE e.organ IN ('marines', 'air_force') AND m.name IS NULL",
    "4415": "SELECT p.name, e.organ AS organization_joined, en.school AS school_enrolled\nFROM person p\nLEFT JOIN enlist e ON p.name = e.name\nLEFT JOIN enrolled en ON p.name = en.name\nWHERE p.name IN ('student27', 'student17', 'student101')",
    "4416": "SELECT \n    SUM(CASE WHEN m.name IS NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(m.name) AS ratio\nFROM \n    disabled d\nLEFT JOIN \n    male m ON d.name = m.name",
    "4417": "SELECT COUNT(DISTINCT e.name) AS female_students_not_joining_organizations\nFROM enlist e\nLEFT JOIN male m ON e.name = m.name\nWHERE m.name IS NULL",
    "4418": "SELECT f.name\nFROM filed_for_bankrupcy f\nJOIN no_payment_due n ON f.name = n.name\nWHERE n.bool = 'neg';",
    "4419": "SELECT AVG(month) AS average_absence_period FROM longest_absense_from_school",
    "4420": "SELECT AVG(l.month) AS average_absence\nFROM enrolled e\nJOIN longest_absense_from_school l ON e.name = l.name\nWHERE e.name NOT IN (SELECT name FROM unemployed)",
    "4421": "SELECT AVG(month) AS average_absence_period\nFROM longest_absense_from_school\nWHERE name IN (SELECT name FROM disabled)",
    "4422": "SELECT organ\nFROM enlist\nWHERE name = '313'",
    "4423": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e \nJOIN enrolled r ON e.name = r.name \nWHERE e.organ = 'fire_department';",
    "4424": "SELECT COUNT(DISTINCT enrolled.name) \nFROM enrolled \nJOIN longest_absense_from_school \nON enrolled.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month = 0;",
    "4425": "SELECT COUNT(*) FROM longest_absense_from_school WHERE month > 2;",
    "4426": "SELECT COUNT(*) FROM no_payment_due WHERE bool = 'neg';",
    "4427": "SELECT COUNT(DISTINCT enrolled.name) \nFROM enrolled \nJOIN no_payment_due ON enrolled.name = no_payment_due.name \nWHERE no_payment_due.bool = 'pos';",
    "4428": "SELECT d.name \nFROM disabled d\nJOIN longest_absense_from_school las ON d.name = las.name\nWHERE las.month = 0",
    "4429": "SELECT COUNT(*) \nFROM unemployed \nJOIN enlist ON unemployed.name = enlist.name \nWHERE enlist.organ = 'navy';",
    "4430": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e \nJOIN male m ON e.name = m.name \nWHERE e.organ = 'foreign_legion';",
    "4431": "SELECT COUNT(*) AS female_students_in_air_force\nFROM person\nWHERE \"name\" NOT IN (SELECT \"name\" FROM male)\nAND \"name\" IN (SELECT \"name\" FROM enlist WHERE organ = 'air_force')\nAND \"name\" IN (SELECT \"name\" FROM enrolled);",
    "4432": "SELECT d.name\nFROM disabled d\nJOIN longest_absense_from_school las ON d.name = las.name\nWHERE las.month = (SELECT MAX(month) FROM longest_absense_from_school)",
    "4433": "SELECT e.name \nFROM enlist e\nJOIN unemployed u ON e.name = u.name\nWHERE e.organ = 'marines'",
    "4434": "SELECT AVG(month) AS average_duration_of_absence\nFROM longest_absense_from_school\nWHERE name IN (SELECT name FROM disabled)",
    "4435": "SELECT \n    IFNULL((CAST(SUM(CASE WHEN l.month > 5 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(l.month)), 0) AS percentage\nFROM \n    person p\nJOIN \n    unemployed u ON p.name = u.name\nJOIN \n    longest_absense_from_school l ON p.name = l.name",
    "4436": "SELECT COUNT(DISTINCT e.name) \nFROM enrolled e\nJOIN disabled d ON e.name = d.name\nJOIN unemployed u ON e.name = u.name\nJOIN longest_absense_from_school l ON e.name = l.name\nWHERE l.month = 8;",
    "4437": "SELECT unemployed.name \nFROM unemployed\nJOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name\nWHERE longest_absense_from_school.month = (\n  SELECT MAX(month) FROM longest_absense_from_school\n)",
    "4438": "SELECT unemployed.name \nFROM unemployed \nJOIN enrolled ON unemployed.name = enrolled.name \nLEFT JOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month IS NULL OR longest_absense_from_school.month = 0",
    "4439": "SELECT COUNT(*) \nFROM disabled \nJOIN enrolled ON disabled.name = enrolled.name \nWHERE enrolled.month = 3",
    "4440": "SELECT ffb.name \nFROM filed_for_bankrupcy ffb\nJOIN longest_absense_from_school labfs ON ffb.name = labfs.name\nWHERE labfs.month = 0;",
    "4441": "SELECT f.name \nFROM filed_for_bankrupcy f\nJOIN longest_absense_from_school l ON f.name = l.name\nWHERE l.month = (SELECT MAX(month) FROM longest_absense_from_school)",
    "4442": "SELECT CASE \n         WHEN EXISTS(SELECT 1 FROM male WHERE name = 'student1000') THEN 'Male'\n         ELSE 'Female'\n       END AS gender",
    "4443": "SELECT COUNT(*) FROM disabled WHERE name IN (SELECT name FROM enrolled)",
    "4444": "SELECT COUNT(*) FROM longest_absense_from_school WHERE month > 6;",
    "4445": "SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school)",
    "4446": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e \nJOIN enrolled enr ON e.name = enr.name \nWHERE e.organ = 'army';",
    "4447": "SELECT name, AVG(month) AS average_absences\nFROM (\n    SELECT name, month FROM longest_absense_from_school\n    UNION ALL\n    SELECT name, month FROM enrolled\n)\nGROUP BY name",
    "4448": "SELECT COUNT(*) AS total_enlisted_in_foreign_legion_peace_corps_army\nFROM enlist\nWHERE organ IN ('foreign_legion', 'peace_corps', 'army')",
    "4449": "SELECT COUNT(*) \nFROM enlist \nJOIN disabled ON enlist.name = disabled.name \nWHERE enlist.organ = 'marines';",
    "4450": "SELECT COUNT(DISTINCT unemployed.name) \nFROM unemployed \nJOIN no_payment_due ON unemployed.name = no_payment_due.name \nWHERE no_payment_due.bool = 'pos'",
    "4451": "SELECT p.name\nFROM person p\nLEFT JOIN male m ON p.name = m.name\nLEFT JOIN enrolled e ON p.name = e.name\nLEFT JOIN longest_absense_from_school las ON p.name = las.name\nWHERE m.name IS NULL\nAND e.school IS NOT NULL\nAND (las.month = 0 OR las.name IS NULL)",
    "4452": "SELECT enrolled.school\nFROM enrolled\nJOIN disabled ON enrolled.name = disabled.name\nGROUP BY enrolled.school\nORDER BY COUNT(disabled.name) DESC\nLIMIT 1",
    "4453": "SELECT DISTINCT enlist.organ\nFROM enlist\nJOIN filed_for_bankrupcy ON enlist.name = filed_for_bankrupcy.name",
    "4454": "SELECT COUNT(*) FROM (\n    SELECT e.name \n    FROM enlist e\n    JOIN male m ON e.name = m.name\n    GROUP BY e.name\n    HAVING COUNT(e.organ) > 1\n)",
    "4455": "SELECT d.name\nFROM disabled d\nJOIN enlist e ON d.name = e.name\nWHERE e.organ = 'navy'",
    "4456": "SELECT COUNT(*) FROM enrolled WHERE school = 'smc' AND month = 7;",
    "4457": "SELECT person.name \nFROM person \nLEFT JOIN disabled ON person.name = disabled.name \nLEFT JOIN male ON person.name = male.name \nWHERE disabled.name IS NOT NULL \nAND male.name IS NULL;",
    "4458": "SELECT \n    (SELECT COUNT(*) FROM unemployed) * 1.0 / (SELECT COUNT(*) FROM disabled) AS ratio",
    "4459": "SELECT \n    IFNULL((SELECT CAST(COUNT(*) AS FLOAT) \n            FROM enlist \n            WHERE organ = 'fire_department' \n            AND name IN (SELECT name FROM male)) / \n           (SELECT CAST(COUNT(*) AS FLOAT) \n            FROM enrolled \n            WHERE name IN (SELECT name FROM male)), 0) AS percentage",
    "4460": "SELECT COUNT(*) FROM longest_absense_from_school WHERE month = 5;",
    "4461": "SELECT COUNT(DISTINCT e.name) AS students_enlisted_in_army\nFROM enlist e\nWHERE e.organ = 'army'",
    "4462": "SELECT COUNT(*) FROM enrolled WHERE school = 'ucla';",
    "4463": "SELECT name \nFROM longest_absense_from_school \nWHERE month = (SELECT MAX(month) FROM longest_absense_from_school)\nLIMIT 5",
    "4464": "SELECT COUNT(*) FROM (\n  SELECT name\n  FROM enlist\n  GROUP BY name\n  HAVING COUNT(organ) >= 2\n)",
    "4465": "SELECT COUNT(DISTINCT e.name) AS navy_students\nFROM enlist e\nJOIN enrolled r ON e.name = r.name\nWHERE e.organ = 'navy';",
    "4466": "SELECT COUNT(*) \nFROM male \nJOIN no_payment_due ON male.name = no_payment_due.name \nWHERE no_payment_due.bool = 'neg';",
    "4467": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e \nJOIN enrolled r ON e.name = r.name \nWHERE e.organ = 'peace_corps' AND r.school = 'ucsd';",
    "4468": "SELECT COUNT(*) \nFROM unemployed \nJOIN no_payment_due ON unemployed.name = no_payment_due.name \nWHERE no_payment_due.bool = 'neg';",
    "4469": "SELECT COUNT(DISTINCT enrolled.name) \nFROM enrolled \nJOIN no_payment_due ON enrolled.name = no_payment_due.name \nLEFT JOIN male ON enrolled.name = male.name \nWHERE male.name IS NULL AND no_payment_due.bool = 'neg';",
    "4470": "SELECT COUNT(DISTINCT e.name) \nFROM enrolled e\nJOIN unemployed u ON e.name = u.name\nJOIN longest_absense_from_school l ON e.name = l.name\nWHERE l.month = 0;",
    "4471": "SELECT e.name\nFROM enlist e\nJOIN no_payment_due npd ON e.name = npd.name\nWHERE e.organ = 'fire_department' AND npd.bool = 'neg'\nLIMIT 10",
    "4472": "SELECT COUNT(*) AS female_students_in_navy\nFROM enlist\nWHERE organ = 'navy' AND name NOT IN (SELECT name FROM male)",
    "4473": "SELECT COUNT(*) \nFROM unemployed \nJOIN enlist ON unemployed.name = enlist.name \nWHERE enlist.organ = 'army';",
    "4474": "SELECT COUNT(*) \nFROM unemployed \nWHERE name NOT IN (\n    SELECT name \n    FROM no_payment_due \n    WHERE bool = 'pos'\n)",
    "4475": "SELECT p.name\nFROM person p\nJOIN enlist e ON p.name = e.name AND e.organ = 'Peace Corps'\nJOIN no_payment_due npd ON p.name = npd.name\nJOIN bool b ON npd.bool = b.name AND b.name = 'pos'\nLIMIT 5",
    "4476": "SELECT COUNT(*) FROM disabled \nWHERE name NOT IN (SELECT name FROM male)",
    "4477": "SELECT COUNT(DISTINCT d.name) \nFROM disabled d\nJOIN no_payment_due npd ON d.name = npd.name\nWHERE npd.bool = 'pos';",
    "4478": "SELECT \n    AVG(CASE WHEN organ = 'foreign_legion' THEN 1 ELSE 0 END) AS average_female_students_disabled_foreign_legion\nFROM \n    disabled\nLEFT JOIN \n    male ON disabled.name = male.name\nLEFT JOIN \n    enlist ON disabled.name = enlist.name\nWHERE \n    male.name IS NULL;",
    "4479": "WITH FireDept AS (\n    SELECT\n        e.name,\n        CASE WHEN m.name IS NULL THEN 'Female' ELSE 'Male' END AS Gender\n    FROM enlist e\n    LEFT JOIN male m ON e.name = m.name\n    WHERE e.organ = 'fire_department'\n),\nGenderCounts AS (\n    SELECT\n        Gender,\n        COUNT(*) AS Count\n    FROM FireDept\n    GROUP BY Gender\n)\nSELECT\n    (SELECT Count FROM GenderCounts WHERE Gender = 'Female') * 100.0 / \n    (SELECT Count FROM GenderCounts WHERE Gender = 'Male') AS FemaleToMaleRatioPercentage\nFROM dual;",
    "4480": "SELECT COUNT(*) FROM enlist WHERE organ = 'navy';",
    "4481": "SELECT \n    CAST(SUM(CASE WHEN month = 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) * 100 || '%' AS percentage_never_been_absent\nFROM enrolled;",
    "4482": "SELECT \n    (SELECT COUNT(*) FROM no_payment_due WHERE bool = 'pos') * 1.0 / \n    (SELECT COUNT(*) FROM no_payment_due WHERE bool = 'neg') AS ratio",
    "4483": "SELECT name, school FROM enrolled WHERE month = 15;",
    "4484": "SELECT AVG(enlisted_per_organ) AS average_enlisted_per_organ FROM (\n  SELECT organ, COUNT(name) AS enlisted_per_organ\n  FROM enlist\n  GROUP BY organ\n)",
    "4485": "SELECT school, month FROM enrolled WHERE name = 'student214';",
    "4486": "SELECT \n    ROUND(\n        (CAST(COUNT(DISTINCT disabled.name) AS REAL) / \n        (SELECT COUNT(DISTINCT person.name) \n         FROM person \n         WHERE person.name NOT IN (SELECT name FROM disabled))) * 100, \n    2) || '%' AS percentage_disabled\nFROM disabled;",
    "4487": "SELECT COUNT(*) \nFROM disabled \nWHERE name IN (\n    SELECT name \n    FROM longest_absense_from_school \n    WHERE month = 9\n)",
    "4488": "SELECT p.name \nFROM person p \nLEFT JOIN filed_for_bankrupcy f ON p.name = f.name \nWHERE f.name IS NULL;",
    "4489": "SELECT enlist.name \nFROM enlist \nLEFT JOIN male ON enlist.name = male.name \nWHERE enlist.organ = 'air_force' AND male.name IS NULL \nLIMIT 5",
    "4490": "SELECT COUNT(*) FROM person WHERE name NOT IN (SELECT name FROM disabled)",
    "4491": "SELECT \n    CASE \n        WHEN male.name IS NOT NULL THEN 'male' \n        ELSE 'female' \n    END AS gender, \n    enrolled.school \nFROM \n    person \nLEFT JOIN \n    male ON person.name = male.name \nJOIN \n    enrolled ON person.name = enrolled.name \nWHERE \n    person.name = 'student995'",
    "4492": "SELECT disabled.name \nFROM disabled \nJOIN unemployed ON disabled.name = unemployed.name \nLIMIT 5",
    "4493": "SELECT COUNT(*) \nFROM unemployed \nWHERE name IN (SELECT name FROM filed_for_bankrupcy)",
    "4494": "SELECT e.name, e.organ\nFROM enlist e\nJOIN longest_absense_from_school las ON e.name = las.name\nWHERE las.month = 4\nLIMIT 5",
    "4495": "SELECT COUNT(*) \nFROM unemployed \nWHERE \"name\" IN (\n    SELECT \"name\" \n    FROM no_payment_due \n    WHERE bool = 'pos'\n)",
    "4496": "SELECT e.organ, npd.bool\nFROM enlist e\nLEFT JOIN no_payment_due npd ON e.name = npd.name\nWHERE e.name = 'student160'",
    "4497": "SELECT male.name \nFROM male \nJOIN enlist ON male.name = enlist.name \nWHERE enlist.organ = 'foreign_legion'\nLIMIT 10",
    "4498": "SELECT \n    ROUND(\n        (CAST(COUNT(DISTINCT person.name) AS FLOAT) - CAST(COUNT(DISTINCT male.name) AS FLOAT)) \n        / CAST(COUNT(DISTINCT person.name) AS FLOAT) \n        * 100, \n        2\n    ) || '%' AS percentage_female_students\nFROM person\nLEFT JOIN male ON person.name = male.name",
    "4499": "SELECT COUNT(*) FROM filed_for_bankrupcy WHERE name IN (SELECT name FROM enrolled)",
    "4500": "SELECT COUNT(*) FROM enrolled WHERE school = 'smc' AND month = 1;",
    "4501": "SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';",
    "4502": "SELECT organ FROM enlist WHERE name = 'student168';",
    "4503": "SELECT COUNT(DISTINCT enlist.name) \nFROM enlist \nJOIN disabled ON enlist.name = disabled.name \nJOIN male ON enlist.name = male.name",
    "4504": "SELECT enrolled.school, COUNT(disabled.name) AS disability_breakdown\nFROM enrolled\nLEFT JOIN disabled ON enrolled.name = disabled.name\nGROUP BY enrolled.school",
    "4505": "SELECT \n    organ AS organization,\n    SUM(CASE WHEN male.name IS NOT NULL THEN 1 ELSE 0 END) AS male_count,\n    SUM(CASE WHEN male.name IS NULL THEN 1 ELSE 0 END) AS female_count\nFROM \n    enlist\nLEFT JOIN \n    male ON enlist.name = male.name\nGROUP BY \n    organ",
    "4506": "SELECT e.name \nFROM enrolled e\nJOIN enlist l ON e.name = l.name\nGROUP BY e.name\nHAVING COUNT(DISTINCT e.school) = 2 AND COUNT(DISTINCT l.organ) = 2;",
    "4507": "SELECT \n    CONCAT(\n        ROUND(\n            (\n                (CAST(COUNT(name) FILTER (WHERE month = 0) AS REAL) - CAST(COUNT(name) FILTER (WHERE month = 9) AS REAL)) \n                / CAST(COUNT(name) FILTER (WHERE month = 0) AS REAL)\n            ) * 100, \n            2\n        ),\n        '%'\n    ) AS percentage_difference\nFROM longest_absense_from_school;",
    "4508": "WITH SchoolEnrollment AS (\n  SELECT\n    e.school,\n    COUNT(e.name) AS total_students,\n    COUNT(f.name) AS bankruptcy_filed\n  FROM enrolled e\n  LEFT JOIN filed_for_bankrupcy f ON e.name = f.name\n  GROUP BY e.school\n),\nMaxEnrollment AS (\n  SELECT\n    MAX(total_students) AS max_students\n  FROM SchoolEnrollment\n)\nSELECT\n  se.school,\n  se.total_students,\n  se.bankruptcy_filed\nFROM SchoolEnrollment se, MaxEnrollment me\nWHERE se.total_students = me.max_students;",
    "4509": "SELECT COUNT(*) \nFROM disabled \nJOIN unemployed ON disabled.name = unemployed.name;",
    "4510": "SELECT DISTINCT e.name\nFROM enrolled e\nJOIN enlist l ON e.name = l.name\nWHERE e.school = 'occ' AND l.organ = 'fire_department'",
    "4511": "SELECT male.name \nFROM male \nJOIN unemployed ON male.name = unemployed.name \nJOIN disabled ON male.name = disabled.name \nJOIN longest_absense_from_school ON male.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month = 5",
    "4512": "SELECT e.name\nFROM enrolled e\nLEFT JOIN male m ON e.name = m.name\nWHERE e.school IN ('occ', 'ulca') AND m.name IS NULL",
    "4513": "SELECT e.school, l.organ AS organization\nFROM enrolled e\nLEFT JOIN enlist l ON e.name = l.name\nWHERE e.name = 'student211'",
    "4514": "SELECT \n    (SELECT COUNT(*) FROM filed_for_bankrupcy WHERE name IN (SELECT name FROM male)) \n    - \n    (SELECT COUNT(*) FROM filed_for_bankrupcy WHERE name NOT IN (SELECT name FROM male)) \n    AS difference;",
    "4515": "SELECT AVG(month) AS average_absent_month\nFROM longest_absense_from_school\nWHERE name IN (\n    SELECT name\n    FROM unemployed\n    WHERE name IN (\n        SELECT name\n        FROM male\n    )\n)",
    "4516": "WITH DisabledAttendance AS (\n    SELECT COUNT(*) AS DisabledCount\n    FROM longest_absense_from_school\n    WHERE name IN (SELECT name FROM disabled)\n),\nNonDisabledAttendance AS (\n    SELECT COUNT(*) AS NonDisabledCount\n    FROM longest_absense_from_school\n    WHERE name NOT IN (SELECT name FROM disabled)\n)\nSELECT \n    CASE \n        WHEN DisabledCount < NonDisabledCount THEN 'Disabled students have better attendance than non-disabled students'\n        WHEN DisabledCount > NonDisabledCount THEN 'Disabled students do not have better attendance than non-disabled students'\n        ELSE 'Attendance is equal'\n    END AS AttendanceComparison,\n    (CAST(ABS(DisabledCount - NonDisabledCount) AS FLOAT) / GREATEST(DisabledCount, NonDisabledCount)) * 100 AS PercentageDifference\nFROM DisabledAttendance, NonDisabledAttendance;",
    "4517": "SELECT AVG(month) AS average_duration\nFROM longest_absense_from_school\nWHERE name IN (\n    SELECT disabled.name\n    FROM disabled\n    JOIN male ON disabled.name = male.name\n)",
    "4518": "SELECT \n    CAST(COUNT(DISTINCT u.name) AS FLOAT) / NULLIF(COUNT(DISTINCT e.name), 0) * 100 AS ratio\nFROM \n    enrolled e\nLEFT JOIN \n    unemployed u ON e.name = u.name AND e.month = 0",
    "4519": "SELECT COUNT(DISTINCT enrolled.name) \nFROM enrolled \nJOIN male ON enrolled.name = male.name \nJOIN no_payment_due ON enrolled.name = no_payment_due.name \nWHERE no_payment_due.bool = 'neg';",
    "4520": "SELECT COUNT(DISTINCT f.name) \nFROM filed_for_bankrupcy f \nJOIN no_payment_due n ON f.name = n.name \nWHERE n.bool = 'pos';",
    "4521": "SELECT CASE \n         WHEN bool = 'pos' THEN 'Payment Due' \n         WHEN bool = 'neg' THEN 'No Payment Due' \n       END AS payment_status\nFROM no_payment_due\nWHERE name = 'student124'",
    "4522": "SELECT COUNT(*) \nFROM disabled \nJOIN no_payment_due ON disabled.name = no_payment_due.name \nWHERE no_payment_due.bool = 'pos';",
    "4523": "SELECT l.name\nFROM longest_absense_from_school l\nJOIN no_payment_due npd ON l.name = npd.name\nWHERE l.month = (SELECT MAX(month) FROM longest_absense_from_school)\nAND npd.bool = 'neg'",
    "4524": "SELECT e.name \nFROM enrolled e\nJOIN longest_absense_from_school las ON e.name = las.name AND las.month = 5\nJOIN no_payment_due npd ON e.name = npd.name AND npd.bool = 'neg'",
    "4525": "SELECT COUNT(DISTINCT d.name) \nFROM disabled d \nJOIN enlist e ON d.name = e.name \nWHERE e.organ = 'marines';",
    "4526": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e\nJOIN longest_absense_from_school l ON e.name = l.name\nWHERE e.organ = 'peace_corps' AND l.month = (SELECT MAX(month) FROM longest_absense_from_school)",
    "4527": "SELECT COUNT(DISTINCT f.name) \nFROM filed_for_bankrupcy f \nJOIN enlist e ON f.name = e.name \nWHERE e.organ = 'navy';",
    "4528": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e \nJOIN no_payment_due npd ON e.name = npd.name \nWHERE e.organ = 'marines' AND npd.bool = 'pos';",
    "4529": "SELECT \n    (CAST(SUM(CASE WHEN l.month = 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(d.name)) * 100 AS ratio\nFROM \n    disabled d\nLEFT JOIN \n    longest_absense_from_school l ON d.name = l.name;",
    "4530": "SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';",
    "4531": "SELECT COUNT(*) FROM enrolled WHERE name NOT IN (SELECT name FROM longest_absense_from_school WHERE month >= 4)",
    "4532": "SELECT COUNT(DISTINCT enlist.name) AS female_students_in_marines\nFROM enlist\nLEFT JOIN male ON enlist.name = male.name\nWHERE enlist.organ = 'marines' AND male.name IS NULL;",
    "4533": "SELECT AVG(month) AS average_duration\nFROM longest_absense_from_school\nWHERE name NOT IN (SELECT name FROM male)",
    "4534": "SELECT f.name \nFROM filed_for_bankrupcy f \nLEFT JOIN male m ON f.name = m.name \nWHERE m.name IS NULL;",
    "4535": "SELECT \n    CASE \n        WHEN bool = 'pos' THEN 'Payment Due' \n        WHEN bool = 'neg' THEN 'No Payment Due' \n        ELSE 'Unknown' \n    END AS payment_status\nFROM no_payment_due\nWHERE name = 'student299'",
    "4536": "SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';",
    "4537": "SELECT COUNT(DISTINCT name) FROM longest_absense_from_school WHERE month > 1;",
    "4538": "SELECT enrolled.name\nFROM enrolled\nJOIN enlist ON enrolled.name = enlist.name\nWHERE enlist.organ = 'fire_department'",
    "4539": "SELECT COUNT(*) \nFROM disabled \nJOIN no_payment_due ON disabled.name = no_payment_due.name \nWHERE no_payment_due.bool = 'pos';",
    "4540": "SELECT COUNT(DISTINCT f.name) \nFROM filed_for_bankrupcy f\nJOIN enrolled e ON f.name = e.name\nWHERE e.school = 'occ';",
    "4541": "SELECT COUNT(*) FROM disabled\nJOIN male ON disabled.name = male.name",
    "4542": "SELECT disabled.name \nFROM disabled \nJOIN enlist ON disabled.name = enlist.name \nWHERE enlist.organ = 'navy';",
    "4543": "SELECT male.name \nFROM male \nJOIN no_payment_due ON male.name = no_payment_due.name \nWHERE no_payment_due.bool = 'pos';",
    "4544": "SELECT \n    CASE \n        WHEN u.name IS NOT NULL THEN 'Unemployed' \n        ELSE 'Employed' \n    END AS employment_status,\n    CASE \n        WHEN npd.bool = 'pos' THEN 'Payment Due' \n        WHEN npd.bool = 'neg' THEN 'No Payment Due' \n        ELSE 'Unknown Payment Status' \n    END AS payment_status\nFROM person p\nLEFT JOIN unemployed u ON p.name = u.name\nLEFT JOIN no_payment_due npd ON p.name = npd.name\nWHERE p.name = 'student110'",
    "4545": "SELECT \n    (CAST(COUNT(DISTINCT male.name) AS FLOAT) / CAST(COUNT(DISTINCT person.name) AS FLOAT)) * 100 AS percentage_of_male_students\nFROM \n    person\nLEFT JOIN \n    male ON person.name = male.name;",
    "4546": "SELECT enrolled.school, \n       CASE \n           WHEN male.name IS NOT NULL THEN 'male' \n           ELSE 'female' \n       END AS gender\nFROM enrolled\nLEFT JOIN male ON enrolled.name = male.name\nWHERE enrolled.name = 'student34'",
    "4547": "SELECT MAX(longest_absense_from_school.month) AS longest_duration_of_absence\nFROM longest_absense_from_school\nJOIN enlist ON longest_absense_from_school.name = enlist.name\nWHERE enlist.organ = 'fire_department'",
    "4548": "SELECT COUNT(DISTINCT e.name) \nFROM enlist e\nJOIN longest_absense_from_school lafs ON e.name = lafs.name\nWHERE lafs.month = 1 AND e.organ = 'air_force'",
    "4549": "SELECT d.name \nFROM disabled d \nJOIN male m ON d.name = m.name \nJOIN unemployed u ON d.name = u.name;",
    "4550": "SELECT COUNT(*) FROM enrolled\nJOIN male ON enrolled.name = male.name\nWHERE school = 'occ'",
    "4551": "SELECT \n    (CAST(COUNT(DISTINCT male.name) AS FLOAT) / CAST(COUNT(DISTINCT enrolled.name) AS FLOAT)) * 100 AS percentage_male_students_in_air_force\nFROM \n    enrolled\nLEFT JOIN \n    male ON enrolled.name = male.name\nLEFT JOIN \n    enlist ON enrolled.name = enlist.name AND enlist.organ = 'air_force'\nWHERE \n    enrolled.school = 'ucla'\nAND \n    enlist.organ IS NOT NULL;",
    "4552": "SELECT AVG(disabled_count) AS average_disabled_female_students\nFROM (\n  SELECT COUNT(DISTINCT d.name) AS disabled_count\n  FROM enrolled e\n  JOIN disabled d ON e.name = d.name\n  LEFT JOIN male m ON d.name = m.name\n  WHERE e.school = 'uci' AND m.name IS NULL\n)",
    "4553": "SELECT COUNT(DISTINCT enrolled.name) \nFROM enrolled \nJOIN longest_absense_from_school \nON enrolled.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month = 0;",
    "4554": "SELECT DISTINCT person.name\nFROM person\nJOIN enlist ON person.name = enlist.name\nWHERE enlist.organ = 'marines'",
    "4555": "SELECT COUNT(*) FROM enlist WHERE organ = 'navy';",
    "4556": "SELECT \"name\" FROM longest_absense_from_school ORDER BY \"month\" DESC LIMIT 1",
    "4557": "SELECT organ \nFROM enlist \nGROUP BY organ \nORDER BY COUNT(*) DESC \nLIMIT 1",
    "4558": "SELECT COUNT(*) FROM longest_absense_from_school WHERE month <= 3;",
    "4559": "SELECT COUNT(*) \nFROM unemployed \nWHERE name IN (\n    SELECT name \n    FROM no_payment_due \n    WHERE bool = 'pos'\n)",
    "4560": "SELECT COUNT(*) FROM enlist\nWHERE organ = 'army' AND name NOT IN (SELECT name FROM male)",
    "4561": "SELECT \n    enlist.organ, \n    COUNT(enlist.name) AS male_students_count\nFROM \n    enlist\nJOIN \n    male ON enlist.name = male.name\nGROUP BY \n    enlist.organ\nORDER BY \n    male_students_count ASC\nLIMIT 1;",
    "4562": "SELECT COUNT(*) \nFROM disabled \nJOIN longest_absense_from_school \nON disabled.name = longest_absense_from_school.name \nWHERE month = 0;",
    "4563": "SELECT COUNT(*) \nFROM unemployed \nJOIN disabled ON unemployed.name = disabled.name",
    "4564": "SELECT disabled.name \nFROM disabled \nJOIN longest_absense_from_school \nON disabled.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month > 5;",
    "4565": "SELECT COUNT(*) \nFROM filed_for_bankrupcy \nWHERE name IN (\n    SELECT name \n    FROM enlist \n    WHERE organ = 'marines'\n) AND name IN (\n    SELECT name \n    FROM enrolled\n)",
    "4566": "SELECT COUNT(*) \nFROM filed_for_bankrupcy \nJOIN disabled ON filed_for_bankrupcy.name = disabled.name;",
    "4567": "SELECT MAX(month) AS max_months_missed\nFROM enlisted\nJOIN longest_absence_from_school ON enlisted.name = longest_absence_from_school.name\nWHERE organ = 'air_force'",
    "4568": "SELECT COUNT(DISTINCT e.name)\nFROM enlist e\nJOIN filed_for_bankrupcy f ON e.name = f.name\nJOIN enrolled r ON e.name = r.name\nJOIN longest_absense_from_school l ON e.name = l.name\nWHERE e.organ = 'fire_department' AND l.month < 6",
    "4569": "SELECT COUNT(DISTINCT d.name) \nFROM disabled d\nJOIN enrolled e ON d.name = e.name\nLEFT JOIN unemployed u ON d.name = u.name\nJOIN longest_absense_from_school las ON d.name = las.name\nWHERE u.name IS NULL AND las.month = 0;",
    "4570": "WITH MaleEnrolled AS (\n    SELECT e.organ, COUNT(*) AS MaleCount\n    FROM enlist e\n    JOIN male m ON e.name = m.name\n    GROUP BY e.organ\n),\nTotalEnrolled AS (\n    SELECT e.organ, COUNT(*) AS TotalCount\n    FROM enlist e\n    GROUP BY e.organ\n),\nCombined AS (\n    SELECT \n        me.organ,\n        me.MaleCount,\n        te.TotalCount,\n        CAST(me.MaleCount AS FLOAT) / te.TotalCount AS MalePercentage\n    FROM MaleEnrolled me\n    JOIN TotalEnrolled te ON me.organ = te.organ\n)\nSELECT \n    organ,\n    MaleCount,\n    TotalCount,\n    MalePercentage\nFROM Combined\nORDER BY MaleCount DESC, MalePercentage DESC\nLIMIT 1",
    "4571": "SELECT COUNT(*) AS NumberOfUsers\nFROM Answer\nWHERE QuestionID = 19 AND AnswerText = 'No'",
    "4572": "SELECT SurveyID, COUNT(DISTINCT UserID) AS NumberOfUsers\nFROM Answer\nWHERE SurveyID BETWEEN 2016 AND 2019\nAND QuestionID = 13\nGROUP BY SurveyID",
    "4573": "SELECT COUNT(DISTINCT UserID) \nFROM Answer \nWHERE QuestionID = 1 \nAND AnswerText BETWEEN '27' AND '35' \nAND SurveyID IN (SELECT SurveyID FROM Survey WHERE Description LIKE '%2018%');",
    "4574": "SELECT COUNT(DISTINCT a.UserID) AS NumberOfUsers\nFROM Answer a\nJOIN Answer a2 ON a.UserID = a2.UserID AND a2.QuestionID = 6 AND a2.AnswerText = 'Yes'\nJOIN Survey s ON a.SurveyID = s.SurveyID\nWHERE a.QuestionID = 3 AND a.AnswerText = 'United States' AND s.SurveyID = 2019",
    "4575": "SELECT SurveyID, COUNT(*) as NumberOfPeopleWithMentalIllness\nFROM Answer\nWHERE SurveyID BETWEEN 2016 AND 2019\nAND QuestionID = 34\nAND AnswerText = 'Yes'\nGROUP BY SurveyID\nORDER BY NumberOfPeopleWithMentalIllness DESC\nLIMIT 1;",
    "4576": "SELECT COUNT(DISTINCT a.UserID) AS FemaleUsersInNebraska\nFROM Answer a\nJOIN Question q1 ON a.QuestionID = q1.questionid AND q1.questiontext = 'Do you have a family history of mental illness?'\nJOIN Answer a2 ON a.UserID = a2.UserID AND a2.AnswerText = 'Female'\nJOIN Question q2 ON a2.QuestionID = q2.questionid AND q2.questionid = 2\nJOIN Answer a3 ON a.UserID = a3.UserID AND a3.AnswerText = 'Nebraska'\nJOIN Question q3 ON a3.QuestionID = q3.questionid AND q3.questionid = 4\nWHERE a.AnswerText = 'Yes';",
    "4577": "SELECT COUNT(DISTINCT UserID) AS UsersBelievingProductivityAffected\nFROM Answer\nWHERE QuestionID = 54 AND AnswerText = 'Yes'",
    "4578": "SELECT \n    UserID,\n    CASE \n        WHEN AnswerText = (SELECT MAX(AnswerText) FROM Answer WHERE QuestionID = 1) THEN 'Oldest'\n        WHEN AnswerText = (SELECT MIN(AnswerText) FROM Answer WHERE QuestionID = 1) THEN 'Youngest'\n    END AS AgeGroup\nFROM Answer\nWHERE QuestionID = 1\nAND AnswerText IN (SELECT MAX(AnswerText) FROM Answer WHERE QuestionID = 1\n                   UNION\n                   SELECT MIN(AnswerText) FROM Answer WHERE QuestionID = 1)",
    "4579": "SELECT QuestionID, COUNT(*) AS NumberOfUsersAnswered\nFROM Answer\nWHERE QuestionID = 3\nGROUP BY QuestionID\nORDER BY NumberOfUsersAnswered ASC\nLIMIT 1;",
    "4580": "SELECT AVG(CAST(a1.AnswerText AS INTEGER)) AS AverageAge\nFROM Answer a1\nJOIN Answer a2 ON a1.UserID = a2.UserID\nWHERE a1.QuestionID = 1\n  AND a2.QuestionID = 3\n  AND a2.AnswerText = 'United States'",
    "4581": "SELECT \n    (SUM(CASE WHEN AnswerText IN ('Yes', 'Maybe') THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS Percentage\nFROM \n    Answer\nWHERE \n    QuestionID = 12;",
    "4582": "SELECT COUNT(DISTINCT QuestionID) AS NumberOfQuestions\nFROM Answer\nWHERE SurveyID = 2014\nGROUP BY QuestionID\nHAVING COUNT(AnswerText) > 200",
    "4583": "SELECT MAX(CAST(AnswerText AS INTEGER)) AS OldestAge\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nJOIN Survey ON Answer.SurveyID = Survey.SurveyID\nWHERE Question.questiontext = 'what is your age?' AND Survey.SurveyID = 2014",
    "4584": "SELECT COUNT(DISTINCT UserID) AS NumberOfUsers\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nJOIN Survey ON Answer.SurveyID = Survey.SurveyID\nWHERE AnswerText = 'No'\nAND questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?'\nAND Survey.SurveyID = 2014",
    "4585": "SELECT UserID\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nJOIN Survey ON Answer.SurveyID = Survey.SurveyID\nWHERE AnswerText = 'Yes'\n  AND questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?'\n  AND Survey.SurveyID = 2014",
    "4586": "SELECT COUNT(DISTINCT UserID) AS NumberOfParticipants\nFROM Answer\nWHERE SurveyID = 2014;",
    "4587": "SELECT a.AnswerText\nFROM Answer a\nJOIN Question q ON a.QuestionID = q.questionid\nJOIN Survey s ON a.SurveyID = s.SurveyID\nWHERE q.questiontext = 'Any additional notes or comments'\nAND s.Description LIKE '%2014%'\nAND a.AnswerText != '-1'",
    "4588": "SELECT DISTINCT\n    Q1.questionid,\n    Q1.questiontext\nFROM\n    Question AS Q1\nJOIN\n    Answer AS A1 ON Q1.questionid = A1.QuestionID\nJOIN\n    Answer AS A2 ON Q1.questionid = A2.QuestionID\nWHERE\n    A1.SurveyID = (SELECT SurveyID FROM Survey WHERE Description LIKE '%2014%')\n    AND A2.SurveyID = (SELECT SurveyID FROM Survey WHERE Description LIKE '%2016%');",
    "4589": "SELECT COUNT(DISTINCT a.UserID) AS UsersLivedInCanada\nFROM Answer a\nJOIN Question q ON a.QuestionID = q.questionid\nJOIN Survey s ON a.SurveyID = s.SurveyID\nWHERE q.questionid = 3 -- Assuming QuestionID 3 is about living in Canada\nAND a.AnswerText = 'Canada'\n-- AND s.Description LIKE '%2018%' -- Uncomment and adjust this line based on how 2018's survey is identified",
    "4590": "SELECT Question.questiontext\nFROM Question\nINNER JOIN Answer ON Question.questionid = Answer.QuestionID\nWHERE Answer.SurveyID = 2014\nGROUP BY Question.questionid;",
    "4591": "SELECT COUNT(DISTINCT UserID) AS NumberOfUsersWithMentalHealthDisorder\nFROM Answer\nWHERE SurveyID = X -- Replace X with the actual SurveyID for the 2016 survey\nAND QuestionID = 32\nAND AnswerText = 'Yes'",
    "4592": "SELECT COUNT(DISTINCT a1.UserID) AS Users\nFROM Answer a1\nJOIN Answer a2 ON a1.UserID = a2.UserID AND a2.SurveyID = a1.SurveyID + 1 AND a2.AnswerText = 'Yes'\nJOIN Answer a3 ON a1.UserID = a3.UserID AND a3.SurveyID = a2.SurveyID + 1 AND a3.AnswerText = 'Yes'\nJOIN Question q ON a1.QuestionID = q.questionid\nWHERE a1.SurveyID = 2016\nAND a1.AnswerText = 'Yes'\nAND q.questiontext = 'Have you had a mental health disorder in the past?'",
    "4593": "SELECT AVG(CAST(AnswerText AS INTEGER)) AS AverageAge\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nJOIN Survey ON Answer.SurveyID = Survey.SurveyID\nWHERE Survey.SurveyID = 2014 AND Question.questionid = 1",
    "4594": "SELECT \n    (CAST(SUM(CASE WHEN SurveyID = 2019 AND AnswerText = 'Yes' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SurveyID = 2019 THEN 1 ELSE 0 END)) - \n    (CAST(SUM(CASE WHEN SurveyID = 2016 AND AnswerText = 'Yes' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SurveyID = 2016 THEN 1 ELSE 0 END)) AS RateOfIncrease\nFROM Answer\nWHERE QuestionID = 33",
    "4595": "SELECT questionid FROM Question WHERE questiontext = 'Would you bring up a physical health issue with a potential employer in an interview?';",
    "4596": "SELECT COUNT(DISTINCT UserID) AS NumberOfUsers\nFROM Answer\nWHERE QuestionID = 20;",
    "4597": "SELECT COUNT(*) AS NumberOfQuestionsAnswered\nFROM Answer\nWHERE UserID = 5",
    "4598": "SELECT COUNT(DISTINCT UserID) AS NumberOfUsers\nFROM Answer\nWHERE SurveyID = 2016",
    "4599": "SELECT COUNT(DISTINCT QuestionID) AS NumberOfQuestions\nFROM Answer\nWHERE SurveyID = 2018",
    "4600": "SELECT COUNT(DISTINCT SurveyID) AS NumberOfSurveys\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nWHERE Question.questiontext = \"What country do you work in?\";",
    "4601": "SELECT AnswerText \nFROM Answer \nJOIN Question ON Answer.QuestionID = Question.questionid \nWHERE Question.questiontext = 'Do you currently have a mental health disorder?' \nAND Answer.UserID = 2681",
    "4602": "SELECT COUNT(DISTINCT UserID) AS NumberOfUsers\nFROM Answer\nWHERE SurveyID = 2016;",
    "4603": "SELECT AnswerText\nFROM Answer\nWHERE QuestionID = 3\nGROUP BY AnswerText\nORDER BY COUNT(AnswerText) DESC\nLIMIT 1",
    "4604": "SELECT COUNT(*) AS NumberOfDifferentAnswers\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nWHERE Question.questiontext = 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.'",
    "4605": "SELECT COUNT(*) AS NumberOfPeople\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nWHERE Question.questiontext = \"What US state or territory do you work in?\" AND Answer.AnswerText = \"Kansas\"",
    "4606": "SELECT COUNT(DISTINCT UserID) AS NumberOfPeople\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nWHERE Question.questiontext = 'Any additional notes or comments.'\n  AND AnswerText IS NOT NULL\n  AND AnswerText != '';",
    "4607": "SELECT COUNT(*) AS NumberOfYesResponses\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nWHERE Question.questiontext = 'Have you ever been diagnosed with a mental health disorder?'\nAND Answer.AnswerText = 'Yes'",
    "4608": "SELECT COUNT(DISTINCT UserID) AS NumberOfUsers\nFROM Answer\nWHERE SurveyID = 2018;",
    "4609": "SELECT COUNT(DISTINCT UserID) AS NumberOfUsers\nFROM Answer\nJOIN Question ON Answer.QuestionID = Question.questionid\nWHERE Question.questiontext = \"Overall, how much importance does your employer place on physical health?\"",
    "4610": "SELECT q.questiontext\nFROM Question q\nJOIN Answer a ON q.questionid = a.QuestionID\nWHERE a.UserID = 2183 AND a.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)'",
    "4611": "SELECT \n    (CAST(SUM(CASE WHEN AnswerText = 'Yes' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS PercentageYes\nFROM Answer\nWHERE QuestionID = 15",
    "4612": "WITH SurveyCounts AS (\n    SELECT\n        s.SurveyID,\n        s.Description,\n        COUNT(DISTINCT a.UserID) AS UserCount\n    FROM Survey s\n    JOIN Answer a ON s.SurveyID = a.SurveyID\n    WHERE s.Description LIKE '%mental health survey for 2017%'\n       OR s.Description LIKE '%mental health survey for 2018%'\n    GROUP BY s.SurveyID, s.Description\n)\nSELECT\n    (SELECT UserCount FROM SurveyCounts WHERE Description LIKE '%mental health survey for 2017%') -\n    (SELECT UserCount FROM SurveyCounts WHERE Description LIKE '%mental health survey for 2018%') AS DifferenceInUserCount",
    "4613": "SELECT \n    (CAST(SUM(CASE WHEN AnswerText = 'Yes' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS PercentageWithMentalHealthDisorder\nFROM Answer\nWHERE SurveyID = 2016 AND QuestionID = 32",
    "4614": "SELECT COUNT(DISTINCT UserID) AS YoungRespondents\nFROM Answer\nWHERE SurveyID = 2016 AND QuestionID = 1 AND AnswerText < '25'",
    "4615": "SELECT AVG(RespondentCount) AS AvgRespondents\nFROM (\n    SELECT SurveyID, COUNT(DISTINCT UserID) AS RespondentCount\n    FROM Answer\n    WHERE SurveyID IN (2014, 2019)\n    GROUP BY SurveyID\n)",
    "4616": "SELECT COUNT(DISTINCT UserID) AS RespondentsCount\nFROM Answer\nWHERE SurveyID = 2019 AND QuestionID = 7 AND AnswerText = '1'",
    "4617": "SELECT COUNT(DISTINCT UserID) AS RespondentsWorkingRemotely\nFROM Answer\nWHERE SurveyID = 2014 AND QuestionID = 93 AND AnswerText = 'Yes'",
    "4618": "SELECT SurveyID, COUNT(DISTINCT QuestionID) AS NumberOfQuestions\nFROM Answer\nGROUP BY SurveyID;",
    "4619": "SELECT COUNT(DISTINCT UserID) AS NumberOfRespondents\nFROM Answer\nJOIN Survey ON Answer.SurveyID = Survey.SurveyID\nWHERE Survey.Description LIKE '%Mental Health Survey%'\nAND Answer.AnswerText LIKE '%Substance Use Disorder%'",
    "4620": "SELECT AnswerText, COUNT(AnswerText) AS ResponseCount\nFROM Answer\nWHERE SurveyID = 2017 AND QuestionID = 85\nGROUP BY AnswerText\nORDER BY ResponseCount DESC\nLIMIT 3",
    "4621": "SELECT\n    (SELECT Total FROM revenue WHERE Year = 1998) - \n    (SELECT Total FROM revenue WHERE Year = 1997) AS revenue_difference",
    "4622": "SELECT CASE \n         WHEN \"Studio Entertainment[NI 1]\" > CAST(\"Disney Media Networks\" AS REAL) THEN 'Studio Entertainment'\n         ELSE 'Disney Media Networks'\n       END AS Bigger_Revenue_Segment\nFROM revenue\nWHERE Year = 1998;",
    "4623": "SELECT director FROM director WHERE name = 'Pinocchio';",
    "4624": "SELECT c.villian\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE d.director = 'Wolfgang Reitherman';",
    "4625": "SELECT COUNT(*) \nFROM characters \nJOIN director ON characters.movie_title = director.name \nWHERE director.director = 'Wolfgang Reitherman' \nAND substr(characters.release_date, instr(characters.release_date, '-') + 1, 3) = 'Dec';",
    "4626": "SELECT d.director\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE c.song = \"Once Upon a Dream\"",
    "4627": "SELECT \"voice-actor\"\nFROM \"voice-actors\"\nWHERE character LIKE (\n    SELECT '%' || villian || '%'\n    FROM characters\n    WHERE movie_title = 'Alice in Wonderland'\n)",
    "4628": "SELECT c.release_date\nFROM characters c\nJOIN \"voice-actors\" va ON c.movie_title = va.movie\nWHERE va.\"voice-actor\" = 'Alan Tudyk'",
    "4629": "SELECT COUNT(DISTINCT c.movie_title)\nFROM \"voice-actors\" va\nJOIN characters c ON va.movie = c.movie_title\nWHERE va.\"voice-actor\" = 'Alan Tudyk'\nAND (substr(c.release_date, instr(c.release_date, '-') + 1, 4) > '2012');",
    "4630": "SELECT COUNT(*) AS comedies_count\nFROM movies_total_gross\nJOIN director ON movies_total_gross.movie_title = director.name\nWHERE director.director = 'Wolfgang Reitherman' AND movies_total_gross.genre = 'Comedy';",
    "4631": "SELECT m.movie_title\nFROM movies_total_gross m\nJOIN director d ON m.movie_title = d.name\nWHERE d.director = 'Wolfgang Reitherman'\nORDER BY CAST(m.total_gross AS INTEGER) DESC\nLIMIT 1",
    "4632": "SELECT c.movie_title\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE d.director = 'Wolfgang Reitherman' AND m.MPAA_rating = 'G'",
    "4633": "SELECT villian \nFROM characters \nWHERE movie_title = (\n    SELECT movie_title \n    FROM movies_total_gross \n    ORDER BY CAST(total_gross AS INTEGER) DESC \n    LIMIT 1\n)",
    "4634": "SELECT genre\nFROM movies_total_gross\nJOIN characters ON movies_total_gross.movie_title = characters.movie_title\nWHERE villian = 'Commander Rourke'",
    "4635": "SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast';",
    "4636": "SELECT movie \nFROM \"voice-actors\" \nWHERE character = 'Robin Hood'",
    "4637": "SELECT movie_title FROM characters WHERE song = \"I Thought I Lost You\";",
    "4638": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE character = 'Binkie Muddlefoot';",
    "4639": "SELECT c.hero\nFROM characters c\nJOIN movies_total_gross mtg ON c.movie_title = mtg.movie_title\nWHERE mtg.total_gross = '$222,527,828'",
    "4640": "SELECT c.song\nFROM characters c\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE CAST(SUBSTR(m.release_date, INSTR(m.release_date, ', ') + 2) AS INTEGER) BETWEEN 1970 AND 1979\nORDER BY CAST(m.total_gross AS INTEGER) DESC\nLIMIT 1",
    "4641": "SELECT c.hero\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE d.director = 'Will Finn'",
    "4642": "SELECT \"voice-actor\"\nFROM \"voice-actors\"\nWHERE character = (\n    SELECT hero\n    FROM characters\n    WHERE movie_title = 'The Little Mermaid'\n)",
    "4643": "SELECT d.director\nFROM director d\nJOIN characters c ON d.name = c.movie_title\nJOIN \"voice-actors\" va ON c.movie_title = va.movie\nWHERE va.\"voice-actor\" = 'Verna Felton' AND va.character = 'Aunt Sarah';",
    "4644": "SELECT c.release_date\nFROM characters c\nJOIN \"voice-actors\" va ON c.movie_title = va.movie\nWHERE va.\"voice-actor\" = 'Tress MacNeille' AND va.character = 'Hyacinth Hippo'",
    "4645": "SELECT d.director\nFROM director d\nJOIN characters c ON d.name = c.movie_title\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE m.release_date = 'Mar 30, 2007' AND m.genre = 'Adventure'",
    "4646": "SELECT m.movie_title, m.inflation_adjusted_gross\nFROM movies_total_gross m\nJOIN director d ON m.movie_title = d.name\nWHERE d.director = 'Wolfgang Reitherman'\nORDER BY CAST(m.inflation_adjusted_gross AS REAL) DESC\nLIMIT 1",
    "4647": "SELECT hero \nFROM characters \nJOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title \nWHERE movies_total_gross.release_date = '4-Mar-16' AND movies_total_gross.genre = 'Adventure'",
    "4648": "SELECT movie_title\nFROM movies_total_gross\nJOIN characters ON movies_total_gross.movie_title = characters.movie_title\nWHERE hero = 'Donald Duck'\nORDER BY CAST(total_gross AS INTEGER) DESC\nLIMIT 1",
    "4649": "SELECT COUNT(*) AS number_of_movies_directed\nFROM director\nWHERE director = 'Wolfgang Reitherman';",
    "4650": "SELECT director, COUNT(name) AS movie_count\nFROM director\nGROUP BY director\nORDER BY movie_count DESC\nLIMIT 1;",
    "4651": "SELECT COUNT(*) AS Restricted_Horror_Movies\nFROM movies_total_gross\nWHERE genre = 'Horror'\nAND MPAA_rating = 'R'\nAND (CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 2) AS INTEGER) BETWEEN 1990 AND 2015);",
    "4652": "SELECT character \nFROM \"voice-actors\" \nWHERE \"voice-actor\" = 'Frank Welker';",
    "4653": "SELECT total_gross\nFROM movies_total_gross\nWHERE movie_title = (\n    SELECT movie_title\n    FROM characters\n    WHERE song = 'Little Wonders'\n)",
    "4654": "SELECT MPAA_rating\nFROM movies_total_gross\nJOIN characters ON movies_total_gross.movie_title = characters.movie_title\nWHERE villian = 'Turbo';",
    "4655": "SELECT COUNT(DISTINCT movies_total_gross.movie_title) AS MatureOrParentalGuidanceMovies\nFROM movies_total_gross\nJOIN \"voice-actors\" ON movies_total_gross.movie_title = \"voice-actors\".movie\nWHERE \"voice-actors\".\"voice-actor\" = 'Bill Thompson'\nAND movies_total_gross.MPAA_rating = 'PG';",
    "4656": "SELECT COUNT(*) \nFROM movies_total_gross \nJOIN director ON movies_total_gross.movie_title = director.name \nWHERE director.director = 'Gary Trousdale' AND movies_total_gross.genre = 'Adventure';",
    "4657": "SELECT director.name, COUNT(director.name) AS times_worked_with\nFROM director\nJOIN characters ON director.name = characters.movie_title\nJOIN \"voice-actors\" ON characters.movie_title = \"voice-actors\".movie\nWHERE \"voice-actors\".\"voice-actor\" = 'Bill Thompson'\nGROUP BY director.name\nORDER BY times_worked_with DESC\nLIMIT 1;",
    "4658": "SELECT m.movie_title\nFROM movies_total_gross m\nJOIN director d ON m.movie_title = d.name\nWHERE d.director = 'Ron Clements'\nORDER BY CAST(m.total_gross AS INTEGER) DESC\nLIMIT 1",
    "4659": "SELECT v.\"voice-actor\"\nFROM \"voice-actors\" v\nJOIN characters c ON v.movie = c.movie_title\nJOIN director d ON c.movie_title = d.name\nWHERE d.director = 'Ben Sharpsteen' AND c.release_date = 'Feb 9, 1940'",
    "4660": "SELECT COUNT(*) \nFROM movies_total_gross \nJOIN director ON movies_total_gross.movie_title = director.name \nWHERE genre = 'Adventure' \nAND MPAA_rating = 'PG' \nAND director = 'Ron Clements'",
    "4661": "SELECT COUNT(*) AS Horror_Movie_Count\nFROM movies_total_gross\nWHERE genre = 'Horror';",
    "4662": "SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective';",
    "4663": "SELECT \"voice-actor\" \nFROM \"voice-actors\" \nWHERE movie = 'Meet the Robinsons';",
    "4664": "SELECT director.name, COUNT(director.name) AS movie_count\nFROM director\nJOIN characters ON director.name = characters.movie_title\nGROUP BY director.name\nORDER BY movie_count DESC\nLIMIT 1;",
    "4665": "SELECT Year\nFROM revenue\nWHERE Year BETWEEN 2000 AND 2010\nORDER BY \"Studio Entertainment[NI 1]\" DESC\nLIMIT 1",
    "4666": "SELECT characters.song\nFROM characters\nJOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title\nWHERE movies_total_gross.genre = 'Drama';",
    "4667": "SELECT \"voice-actors\".\"voice-actor\"\nFROM \"voice-actors\"\nINNER JOIN characters ON \"voice-actors\".character = characters.hero",
    "4668": "SELECT d.director\nFROM director d\nJOIN characters c ON d.name = c.movie_title\nWHERE cast(SUBSTR(c.release_date, instr(c.release_date, ', ') + 2) as int) BETWEEN 1990 AND 1999;",
    "4669": "SELECT \"voice-actor\"\nFROM \"voice-actors\"\nJOIN characters ON \"voice-actors\".character = characters.villian\nWHERE characters.movie_title = 'The Rescuers'",
    "4670": "SELECT c.movie_title, va.character, va.\"voice-actor\"\nFROM characters c\nJOIN \"voice-actors\" va ON c.movie_title = va.movie\nJOIN director d ON c.movie_title = d.name\nWHERE d.director = 'Wolfgang Reitherman';",
    "4671": "SELECT c.hero, c.villian\nFROM characters c\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE m.MPAA_rating = 'PG'",
    "4672": "SELECT m.movie_title\nFROM movies_total_gross m\nJOIN characters c ON m.movie_title = c.movie_title\nWHERE c.song IS NULL OR c.song = ''\nORDER BY CAST(m.total_gross AS INTEGER) DESC\nLIMIT 1;",
    "4673": "SELECT d.director\nFROM \"voice-actors\" va\nJOIN characters c ON va.movie = c.movie_title\nJOIN director d ON c.movie_title = d.name\nGROUP BY c.movie_title\nORDER BY COUNT(va.character) DESC\nLIMIT 1;",
    "4674": "SELECT \"voice-actors\".\"voice-actor\"\nFROM \"voice-actors\"\nJOIN characters ON \"voice-actors\".movie = characters.movie_title\nWHERE characters.release_date = 'Nov 24, 2010';",
    "4675": "SELECT d.director\nFROM director d\nJOIN characters c ON d.name = c.movie_title\nWHERE c.song IS NOT NULL;",
    "4676": "SELECT m.movie_title, m.total_gross\nFROM movies_total_gross m\nJOIN characters c ON m.movie_title = c.movie_title\nJOIN \"voice-actors\" v ON c.movie_title = v.movie\nWHERE v.\"voice-actor\" = 'Jim Cummings'",
    "4677": "SELECT m.movie_title\nFROM movies_total_gross m\nJOIN director d ON m.movie_title = d.name\nWHERE d.director = 'Ron Clements'\nORDER BY CAST(m.total_gross AS INTEGER) DESC\nLIMIT 1",
    "4678": "SELECT \n    AVG(CAST(m.total_gross AS REAL)) AS average_total_gross\nFROM \n    movies_total_gross m\nJOIN \n    \"voice-actors\" v ON m.movie_title = v.movie\nWHERE \n    v.\"voice-actor\" = 'Sterling Holloway';",
    "4679": "SELECT \n    SUM(CASE WHEN song IS NOT NULL THEN CAST(total_gross AS REAL) ELSE 0 END) / SUM(CAST(total_gross AS REAL)) AS percentage\nFROM \n    movies_total_gross\nJOIN \n    characters ON movies_total_gross.movie_title = characters.movie_title",
    "4680": "SELECT movie_title, genre\nFROM movies_total_gross\nWHERE substr(release_date, length(release_date) - 3, length(release_date)) = '2016';",
    "4681": "SELECT villian FROM characters WHERE movie_title = 'Little Mermaid';",
    "4682": "SELECT characters.movie_title\nFROM characters\nJOIN director ON characters.movie_title = director.name\nWHERE director.director = 'Jack Kinney';",
    "4683": "SELECT \n    movie_title, \n    (CAST(inflation_adjusted_gross AS REAL) / CAST(total_gross AS REAL)) * 100 AS inflation_rate_percentage\nFROM \n    movies_total_gross\nWHERE \n    total_gross = (SELECT MAX(CAST(total_gross AS REAL)) FROM movies_total_gross)",
    "4684": "SELECT movie_title, release_date\nFROM movies_total_gross\nWHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy';",
    "4685": "SELECT c.movie_title, va.character\nFROM \"voice-actors\" va\nJOIN characters c ON va.movie = c.movie_title\nWHERE va.\"voice-actor\" = 'Bill Thompson'",
    "4686": "SELECT characters.movie_title, characters.song\nFROM characters\nJOIN director ON characters.movie_title = director.name\nWHERE director.director = 'Ron Clements'",
    "4687": "SELECT c.movie_title AS Title, c.hero AS Main_Character, c.song AS Song\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE d.director = 'Wolfgang Reitherman'\nAND substr(c.release_date, length(c.release_date) - 3, 4) = '1977';",
    "4688": "SELECT c.movie_title, d.director\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE c.hero = 'Donald Duck'",
    "4689": "SELECT c.hero, d.director, c.release_date\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE c.movie_title = 'Mulan';",
    "4690": "SELECT c.movie_title, m.total_gross, m.MPAA_rating\nFROM characters c\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE c.hero = 'Elsa'",
    "4691": "SELECT c.movie_title AS title, d.director, c.release_date\nFROM \"voice-actors\" va\nJOIN characters c ON va.movie = c.movie_title\nJOIN director d ON c.movie_title = d.name\nWHERE va.\"voice-actor\" = 'Freddie Jones'",
    "4692": "SELECT v.movie AS movie_title, m.total_gross\nFROM \"voice-actors\" v\nJOIN characters c ON v.movie = c.movie_title\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE v.\"voice-actor\" = 'Frank Welker'\nAND (CAST(m.inflation_adjusted_gross AS REAL) / CAST(m.total_gross AS REAL)) < 2;",
    "4693": "SELECT d.director\nFROM director d\nJOIN movies_total_gross mtg ON d.name = mtg.movie_title\nORDER BY CAST(mtg.total_gross AS INTEGER) DESC\nLIMIT 1",
    "4694": "SELECT \"voice-actors\".\"voice-actor\", characters.villian\nFROM \"voice-actors\"\nJOIN characters ON \"voice-actors\".movie = characters.movie_title\nWHERE characters.movie_title = 'Cinderella'",
    "4695": "SELECT \"voice-actor\"\nFROM \"voice-actors\"\nWHERE character = (\n    SELECT hero\n    FROM characters\n    WHERE movie_title = 'Lion King'\n)",
    "4696": "SELECT d.director, m.MPAA_rating\nFROM director AS d\nJOIN characters AS c ON d.name = c.movie_title\nJOIN movies_total_gross AS m ON c.movie_title = m.movie_title\nWHERE m.genre = 'Musical' AND substr(m.release_date, length(m.release_date) - 3, length(m.release_date)) = '1993'",
    "4697": "SELECT COUNT(*) AS total_movies\nFROM movies_total_gross\nWHERE substr(release_date, length(release_date) - 3, length(release_date)) BETWEEN '1991' AND '2000';",
    "4698": "WITH AverageGross AS (\n    SELECT \n        AVG(CAST(total_gross AS INTEGER)) AS avg_gross\n    FROM \n        movies_total_gross\n    WHERE \n        substr(release_date, length(release_date) - 3, length(release_date)) BETWEEN '2001' AND '2005'\n),\nHighGrossMovies AS (\n    SELECT \n        mtg.movie_title,\n        mtg.total_gross\n    FROM \n        movies_total_gross mtg, \n        AverageGross ag\n    WHERE \n        substr(mtg.release_date, length(mtg.release_date) - 3, length(mtg.release_date)) BETWEEN '2001' AND '2005'\n        AND CAST(mtg.total_gross AS INTEGER) > 2 * ag.avg_gross\n)\nSELECT \n    hgm.movie_title,\n    d.director\nFROM \n    HighGrossMovies hgm\n    JOIN director d ON hgm.movie_title = d.name",
    "4699": "SELECT \"voice-actor\"\nFROM \"voice-actors\"\nWHERE character = 'Calliope' AND movie = 'Hercules';",
    "4700": "SELECT COUNT(\"voice-actor\") AS voice_actor_count\nFROM \"voice-actors\"\nWHERE movie = 'Aladdin';",
    "4701": "SELECT movie\nFROM \"voice-actors\"\nWHERE \"voice-actor\" = 'Jeff Bennett'",
    "4702": "SELECT director FROM director WHERE name = 'Wreck-It Ralph';",
    "4703": "SELECT movie_title FROM director WHERE director = 'Jack Kinney';",
    "4704": "SELECT COUNT(*) AS movies_released_between_1937_and_1950\nFROM characters\nWHERE substr(release_date, length(release_date) - 3, 4) BETWEEN '1937' AND '1950';",
    "4705": "SELECT characters.song\nFROM characters\nJOIN director ON characters.movie_title = director.name\nWHERE director.director = 'Ben Sharpsteen';",
    "4706": "SELECT c.release_date\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE c.movie_title = 'The Lion King' AND d.director = 'Roger Allers';",
    "4707": "SELECT c.villian\nFROM characters c\nJOIN \"voice-actors\" va ON c.movie_title = va.movie\nWHERE va.\"voice-actor\" IN ('Scott Weinger', 'Brad Kane')",
    "4708": "SELECT c.movie_title\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE d.director = 'Wolfgang Reitherman' AND c.villian IS NULL;",
    "4709": "SELECT c.movie_title\nFROM characters c\nJOIN director d ON c.movie_title = d.name\nWHERE d.director = 'Jack Kinney' AND substr(c.release_date, length(c.release_date) - 1, length(c.release_date)) < '47'",
    "4710": "SELECT d.director\nFROM director d\nJOIN movies_total_gross m ON d.name = m.movie_title\nWHERE CAST(m.total_gross AS INTEGER) > 100000000;",
    "4711": "SELECT characters.song\nFROM characters\nJOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title\nORDER BY CAST(movies_total_gross.total_gross AS REAL) DESC\nLIMIT 1",
    "4712": "SELECT d.director\nFROM director d\nJOIN movies_total_gross mtg ON d.name = mtg.movie_title\nWHERE mtg.movie_title IN (\n    SELECT movie_title\n    FROM movies_total_gross\n    WHERE substr(release_date, length(release_date) - 3, length(release_date)) BETWEEN '1937' AND '1990'\n    ORDER BY CAST(total_gross AS REAL) DESC\n    LIMIT 1\n)",
    "4713": "SELECT c.hero\nFROM characters c\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE m.genre = 'Comedy'",
    "4714": "SELECT \"voice-actors\".\"voice-actor\"\nFROM \"voice-actors\"\nJOIN characters ON \"voice-actors\".movie = characters.movie_title\nJOIN director ON characters.movie_title = director.name\nWHERE director.director = 'Wolfgang Reitherman';",
    "4715": "SELECT genre\nFROM movies_total_gross\nJOIN characters ON movies_total_gross.movie_title = characters.movie_title\nWHERE hero = 'Taran';",
    "4716": "SELECT \"voice-actors\".\"voice-actor\", director.director\nFROM characters\nJOIN \"voice-actors\" ON characters.hero = \"voice-actors\".character\nJOIN director ON characters.movie_title = director.name\nWHERE characters.hero = 'Elsa'",
    "4717": "SELECT \n    (SELECT CAST(COUNT(DISTINCT d.name) AS FLOAT)\n     FROM director d\n     JOIN movies_total_gross m ON d.name = m.movie_title\n     WHERE CAST(m.total_gross AS INTEGER) > 100000000)\n    /\n    (SELECT CAST(COUNT(*) AS FLOAT) FROM director) \n    * 100 AS percentage;",
    "4718": "WITH DramaVoiceActors AS (\n    SELECT DISTINCT va.\"voice-actor\"\n    FROM \"voice-actors\" va\n    JOIN characters c ON va.movie = c.movie_title\n    JOIN movies_total_gross mtg ON c.movie_title = mtg.movie_title\n    WHERE mtg.genre = 'Drama'\n),\nTotalVoiceActors AS (\n    SELECT DISTINCT \"voice-actor\"\n    FROM \"voice-actors\"\n),\nDramaCount AS (\n    SELECT COUNT(*) AS DramaActorCount\n    FROM DramaVoiceActors\n),\nTotalCount AS (\n    SELECT COUNT(*) AS TotalActorCount\n    FROM TotalVoiceActors\n)\nSELECT (CAST(DramaActorCount AS REAL) / TotalActorCount) * 100 AS DramaVoiceActorPercentage\nFROM DramaCount, TotalCount;",
    "4719": "SELECT movie_title\nFROM characters\nORDER BY substr(release_date, length(release_date) - 3, 4) ASC\nLIMIT 1;",
    "4720": "SELECT COUNT(*) AS NumberOfMovies\nFROM characters\nWHERE substr(release_date, length(release_date) - 3, 4) BETWEEN '2010' AND '2016';",
    "4721": "SELECT villian \nFROM characters \nORDER BY substr(release_date, length(release_date) - 3, 4) ASC \nLIMIT 1;",
    "4722": "SELECT movie_title\nFROM movies_total_gross\nWHERE genre = 'Action'\nORDER BY CAST(total_gross AS INTEGER) DESC\nLIMIT 1",
    "4723": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE character = 'Akela' AND movie = 'The Jungle Book'",
    "4724": "SELECT SUM(Total) AS \"Disney's Total Box Office Gross (2010-2016)\"\nFROM revenue\nWHERE Year BETWEEN 2010 AND 2016",
    "4725": "SELECT c.hero\nFROM characters c\nJOIN movies_total_gross m ON c.movie_title = m.movie_title\nWHERE m.genre = 'Adventure'\nORDER BY CAST(m.inflation_adjusted_gross AS REAL) DESC\nLIMIT 1;",
    "4726": "SELECT d.director\nFROM director d\nJOIN (\n    SELECT movie_title\n    FROM movies_total_gross\n    ORDER BY CAST(total_gross AS INTEGER)\n    LIMIT 1\n) AS lowest_grossing_movie ON d.name = lowest_grossing_movie.movie_title;",
    "4727": "SELECT \n    \"Walt Disney Parks and Resorts\" / Total AS ParksAndResortsPercentage\nFROM \n    revenue\nWHERE \n    Year = 2010;",
    "4728": "SELECT \n    AVG(CAST(total_gross AS REAL)) AS average_gross\nFROM \n    movies_total_gross\nWHERE \n    genre = 'Action' \n    AND MPAA_rating = 'PG-13';",
    "4729": "SELECT COUNT(*) FROM \"voice-actors\" WHERE movie = 'Bambi';",
    "4730": "SELECT \n    inflation_adjusted_gross / total_gross AS estimated_inflation_rate\nFROM \n    movies_total_gross\nWHERE \n    substr(release_date, length(release_date) - 3, length(release_date)) = '1995';",
    "4731": "SELECT \n    (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars') - \n    (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars 2') AS difference,\n    (SELECT movie_title FROM movies_total_gross ORDER BY CAST(inflation_adjusted_gross AS INTEGER) DESC LIMIT 1) AS more_popular_movie",
    "4732": "WITH ChrisBuckMovies AS (\n    SELECT c.movie_title, c.release_date\n    FROM characters c\n    JOIN director d ON c.movie_title = d.name\n    WHERE d.director = 'Chris Buck'\n),\nMostRecentChrisBuckMovie AS (\n    SELECT movie_title\n    FROM ChrisBuckMovies\n    ORDER BY release_date DESC\n    LIMIT 1\n),\nGrossingInfo AS (\n    SELECT m.movie_title, m.inflation_adjusted_gross\n    FROM movies_total_gross m\n    JOIN ChrisBuckMovies cbm ON m.movie_title = cbm.movie_title\n),\nMostSuccessfulChrisBuckMovie AS (\n    SELECT movie_title\n    FROM GrossingInfo\n    ORDER BY inflation_adjusted_gross DESC\n    LIMIT 1\n)\nSELECT \n    (SELECT movie_title FROM MostRecentChrisBuckMovie) AS MostRecentMovie,\n    (SELECT movie_title FROM MostSuccessfulChrisBuckMovie) AS MostSuccessfulMovie",
    "4733": "SELECT \"voice-actor\"\nFROM \"voice-actors\"\nGROUP BY \"voice-actor\"\nHAVING COUNT(character) > 5",
    "4734": "WITH Top5 AS (\n    SELECT movie_title, inflation_adjusted_gross\n    FROM movies_total_gross\n    ORDER BY CAST(inflation_adjusted_gross AS REAL) DESC\n    LIMIT 5\n),\nTotalGross AS (\n    SELECT SUM(CAST(inflation_adjusted_gross AS REAL)) AS TotalGross\n    FROM movies_total_gross\n),\nTop5Total AS (\n    SELECT SUM(CAST(inflation_adjusted_gross AS REAL)) AS Top5Total\n    FROM Top5\n)\nSELECT Top5.movie_title, \n       (Top5Total.Top5Total / TotalGross.TotalGross) * 100 AS Percentage\nFROM Top5, TotalGross, Top5Total",
    "4735": "SELECT \n    (CAST(SUM(CASE WHEN CAST(total_gross AS INTEGER) > 100000000 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    movies_total_gross\nJOIN \n    director ON movies_total_gross.movie_title = director.name\nWHERE \n    director.director = 'Gary Trousdale'",
    "4736": "SELECT COUNT(*) \nFROM current \nWHERE ballotpedia_id IS NULL OR ballotpedia_id = '';",
    "4737": "SELECT official_full_name \nFROM current \nWHERE cspan_id IS NULL OR cspan_id = '';",
    "4738": "SELECT COUNT(*) FROM current WHERE birthday_bio > '1960-01-01';",
    "4739": "SELECT COUNT(*) \nFROM current \nWHERE gender_bio = 'F' AND fec_id IS NULL;",
    "4740": "SELECT google_entity_id_id FROM current WHERE official_full_name = 'Sherrod Brown';",
    "4741": "SELECT official_full_name\nFROM current\nWHERE official_full_name IN ('Sherrod Brown', 'Maria Cantwell')\nORDER BY birthday_bio\nLIMIT 1;",
    "4742": "SELECT facebook\nFROM \"social-media\"\nJOIN current ON \"social-media\".bioguide = current.bioguide_id\nWHERE current.official_full_name = 'Todd Young'",
    "4743": "SELECT COUNT(*) FROM current\nLEFT JOIN \"social-media\" ON current.bioguide_id = \"social-media\".bioguide\nWHERE \"social-media\".instagram IS NULL;",
    "4744": "SELECT c.official_full_name\nFROM \"social-media\" s\nJOIN current c ON s.bioguide = c.bioguide_id\nWHERE s.twitter_id = 234128524",
    "4745": "SELECT sm.youtube\nFROM \"social-media\" sm\nJOIN current c ON sm.bioguide = c.bioguide_id\nWHERE c.gender_bio = 'F'",
    "4746": "SELECT s.facebook\nFROM social-media s\nJOIN current c ON s.bioguide = c.bioguide_id\nORDER BY c.birthday_bio\nLIMIT 1",
    "4747": "SELECT COUNT(*) \nFROM current \nWHERE (opensecrets_id IS NULL OR opensecrets_id = '') \nAND bioguide_id NOT IN (\n    SELECT bioguide \n    FROM \"social-media\" \n    WHERE instagram IS NOT NULL\n)",
    "4748": "SELECT COUNT(*) AS terms_not_representative\nFROM \"current-terms\"\nWHERE bioguide = (SELECT bioguide_id FROM current WHERE official_full_name = 'Roger F. Wicker')\nAND (district IS NULL OR district = '')",
    "4749": "SELECT COUNT(*) AS terms_served\nFROM \"current-terms\"\nJOIN current ON \"current-terms\".bioguide = current.bioguide_id\nWHERE current.official_full_name = 'Sherrod Brown'",
    "4750": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE EXISTS (\n    SELECT 1\n    FROM \"current-terms\"\n    WHERE bioguide = ct.bioguide AND state_rank IS NOT NULL\n)\nUNION\nSELECT c.official_full_name\nFROM current c\nJOIN \"historical-terms\" ht ON c.bioguide_id = ht.bioguide\nWHERE EXISTS (\n    SELECT 1\n    FROM \"historical-terms\"\n    WHERE bioguide = ht.bioguide AND state_rank IS NOT NULL\n)",
    "4751": "SELECT state\nFROM \"current-terms\"\nWHERE start = '1993-01-05' AND bioguide IN (\n    SELECT bioguide_id\n    FROM current\n    WHERE official_full_name = 'Sherrod Brown'\n)",
    "4752": "SELECT COUNT(DISTINCT c.bioguide_id) AS female_legislators_served_more_than_4_terms\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.gender_bio = 'F'\nGROUP BY c.bioguide_id\nHAVING COUNT(ct.bioguide) > 4",
    "4753": "SELECT COUNT(DISTINCT c.bioguide_id)\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.birthday_bio >= '1960-01-01'\nAND c.bioguide_id IN (\n    SELECT bioguide\n    FROM \"current-terms\"\n    GROUP BY bioguide\n    HAVING COUNT(bioguide) > 6\n)",
    "4754": "SELECT AVG(term_count) AS average_terms\nFROM (\n    SELECT c.bioguide_id, COUNT(ct.bioguide) AS term_count\n    FROM current c\n    JOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\n    WHERE c.gender_bio = 'F'\n    GROUP BY c.bioguide_id\n)",
    "4755": "SELECT \n    (COUNT(DISTINCT CASE WHEN s.instagram IS NULL THEN c.bioguide_id END) * 1.0 / COUNT(DISTINCT c.bioguide_id)) * 100 AS percentage_without_instagram\nFROM \n    current c\nLEFT JOIN \n    \"social-media\" s ON c.bioguide_id = s.bioguide\nWHERE \n    c.religion_bio = 'Roman Catholic';",
    "4756": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'",
    "4757": "SELECT COUNT(*) FROM \"current-terms\" WHERE party = 'Republican'",
    "4758": "SELECT COUNT(*) FROM \"social-media\" WHERE instagram IS NOT NULL AND instagram <> '';",
    "4759": "SELECT COUNT(*) FROM historical WHERE gender_bio = 'F'",
    "4760": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M' AND religion_bio = 'Roman Catholic';",
    "4761": "SELECT party\nFROM \"current-terms\"\nWHERE name = 'Sherrod Brown' AND start <= '2005-01-01' AND end >= '2005-12-31'",
    "4762": "SELECT c.official_full_name\nFROM \"current-terms\" ct\nJOIN current c ON ct.bioguide = c.bioguide_id\nWHERE ct.state_rank = 'senior' AND ct.type = 'sen' AND ct.start LIKE '2013%'",
    "4763": "SELECT youtube\nFROM \"social-media\"\nJOIN current ON \"social-media\".bioguide = current.bioguide_id\nWHERE current.official_full_name = 'Chris Van Hollen'",
    "4764": "SELECT COUNT(*) AS official_social_media_count\nFROM \"social-media\"\nJOIN current ON \"social-media\".bioguide = current.bioguide_id\nWHERE current.official_full_name = 'Mark Warner'\nAND facebook IS NOT NULL\nAND instagram IS NOT NULL\nAND twitter IS NOT NULL\nAND youtube IS NOT NULL",
    "4765": "SELECT last_name\nFROM current\nJOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide\nWHERE state = 'CA'",
    "4766": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.gender_bio = 'F' AND ct.type = 'sen'",
    "4767": "SELECT govtrack_id FROM current WHERE official_full_name = 'Chris Van Hollen'",
    "4768": "SELECT twitter\nFROM \"social-media\" sm\nJOIN current c ON sm.bioguide = c.bioguide_id\nWHERE c.official_full_name = 'Roger F. Wicker'",
    "4769": "SELECT h.official_full_name\nFROM historical h\nJOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE ht.party = 'Pro-Administration' AND ht.start <= '1791-12-31' AND ht.end >= '1791-01-01'",
    "4770": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.gender_bio = 'F' AND ct.party = 'Republican' AND ct.end > date('now')",
    "4771": "SELECT district FROM \"current-terms\" WHERE bioguide IN (SELECT bioguide_id FROM current WHERE official_full_name = 'Chris Van Hollen')",
    "4772": "SELECT COUNT(*) FROM \"current-terms\" \nJOIN current ON current.bioguide_id = \"current-terms\".bioguide \nWHERE current.official_full_name = 'Richard Durbin' AND \"current-terms\".district = 20",
    "4773": "SELECT AVG(male_democrats_count) AS average_male_democrats\nFROM (\n    SELECT COUNT(DISTINCT c.bioguide_id) AS male_democrats_count\n    FROM current c\n    JOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\n    WHERE c.gender_bio = 'M'\n    AND ct.party = 'Democrat'\n    AND ct.start >= '2000-01-01'\n    AND ct.end <= '2021-12-31'\n    GROUP BY strftime('%Y', ct.start)\n)",
    "4774": "WITH FemaleCounts AS (\n    SELECT\n        (SELECT COUNT(*) FROM current WHERE gender_bio = 'F') AS CurrentFemale,\n        (SELECT COUNT(*) FROM historical WHERE gender_bio = 'F') AS HistoricalFemale\n),\nPercentages AS (\n    SELECT\n        CurrentFemale * 100.0 / (SELECT COUNT(*) FROM current) AS CurrentFemalePercentage,\n        HistoricalFemale * 100.0 / (SELECT COUNT(*) FROM historical) AS HistoricalFemalePercentage\n    FROM FemaleCounts\n)\nSELECT\n    CurrentFemalePercentage,\n    HistoricalFemalePercentage,\n    CASE\n        WHEN CurrentFemalePercentage > HistoricalFemalePercentage THEN 'Current'\n        ELSE 'Historical'\n    END AS HighestValue\nFROM Percentages;",
    "4775": "SELECT youtube_id FROM \"social-media\" WHERE youtube = 'RepWassermanSchultz';",
    "4776": "SELECT facebook, twitter, youtube\nFROM \"social-media\"\nWHERE bioguide IN (\n    SELECT bioguide_id\n    FROM current\n    WHERE official_full_name = 'Adam Kinzinger'\n)",
    "4777": "SELECT party\nFROM \"current-terms\"\nWHERE bioguide IN (\n    SELECT bioguide_id\n    FROM current\n    WHERE first_name = 'Christopher' AND middle_name = 'Henderson' AND last_name = 'Clark'\n)",
    "4778": "SELECT c.official_full_name\nFROM current c\nJOIN \"social-media\" sm ON c.bioguide_id = sm.bioguide\nWHERE sm.youtube IS NOT NULL AND (sm.instagram IS NULL OR sm.instagram = '')\nLIMIT 10",
    "4779": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.state = 'VA'",
    "4780": "SELECT first_name, last_name\nFROM historical\nJOIN \"historical-terms\" ON historical.bioguide_id = \"historical-terms\".bioguide\nWHERE party = 'National Greenbacker'",
    "4781": "SELECT official_full_name\nFROM current\nJOIN \"social-media\" ON current.bioguide_id = \"social-media\".bioguide\nWHERE youtube = 'RoskamIL06';",
    "4782": "SELECT official_full_name\nFROM current\nJOIN \"social-media\" ON current.bioguide_id = \"social-media\".bioguide\nWHERE (youtube IS NULL OR youtube = '') AND (instagram IS NULL OR instagram = '') AND (twitter IS NULL OR twitter = '') AND (facebook IS NOT NULL AND facebook != '')\nLIMIT 10",
    "4783": "SELECT c.official_full_name\nFROM \"current-terms\" ct\nJOIN current c ON ct.bioguide = c.bioguide_id\nWHERE ct.state_rank = 'junior' AND ct.party = 'Republican'",
    "4784": "SELECT contact_form FROM \"current-terms\" \nJOIN current ON \"current-terms\".bioguide = current.bioguide_id \nWHERE official_full_name = 'Claire McCaskill'",
    "4785": "SELECT h.wikipedia_id\nFROM historical h\nJOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE ht.party_affiliations LIKE '%Readjuster Democrat%'",
    "4786": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.nickname_name IS NOT NULL AND ct.party = 'Republican'",
    "4787": "SELECT state, party\nFROM historical h\nJOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE h.first_name = 'Veronica' AND h.middle_name = 'Grace' AND h.last_name = 'Boland'",
    "4788": "SELECT COUNT(*) FROM historical WHERE strftime('%Y', birthday_bio) = '1973';",
    "4789": "SELECT \n    SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS male_female_ratio\nFROM historical",
    "4790": "SELECT COUNT(*) \nFROM \"current-terms\" \nWHERE end LIKE '2009%' AND party = 'Republican'",
    "4791": "SELECT official_full_name, gender_bio\nFROM current\nWHERE last_name = 'Collins'",
    "4792": "SELECT \n    (COUNT(DISTINCT CASE WHEN class = 1 THEN bioguide END) * 1.0 / COUNT(DISTINCT bioguide)) * 100 AS percent_class_1_senators\nFROM \n    \"current-terms\"\nWHERE \n    type = 'sen';",
    "4793": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.party = 'Independent'",
    "4794": "SELECT SUM(strftime('%Y', end) - strftime('%Y', start)) AS total_years_served\nFROM \"current-terms\"\nJOIN current ON current.bioguide_id = \"current-terms\".bioguide\nWHERE current.official_full_name = 'Jr. John Conyers'\nUNION ALL\nSELECT SUM(strftime('%Y', end) - strftime('%Y', start)) AS total_years_served\nFROM \"historical-terms\"\nJOIN historical ON historical.bioguide_id = \"historical-terms\".bioguide\nWHERE historical.official_full_name = 'Jr. John Conyers'",
    "4795": "SELECT \n    (julianday(MIN(ct.start)) - julianday(c.birthday_bio)) / 365.25 AS age_at_start\nFROM \n    \"current-terms\" ct\nJOIN \n    current c ON ct.bioguide = c.bioguide_id\nWHERE \n    c.official_full_name = 'Jr. F. James Sensenbrenner';",
    "4796": "SELECT c.official_full_name, c.religion_bio, ct.party\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.state = \"ME\"\nUNION\nSELECT h.official_full_name, h.religion_bio, ht.party\nFROM historical h\nJOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE ht.state = \"ME\"",
    "4797": "SELECT c.official_full_name, c.nickname_name\nFROM \"social-media\" s\nJOIN current c ON s.bioguide = c.bioguide_id\nWHERE s.instagram IS NOT NULL AND c.thomas_id < 1000",
    "4798": "SELECT MAX(end) AS last_serving_date\nFROM \"current-terms\"\nJOIN current ON current.bioguide_id = \"current-terms\".bioguide\nWHERE current.official_full_name = 'Matt Salmon'",
    "4799": "SELECT c.party, c.state\nFROM \"current-terms\" c\nJOIN current cu ON c.bioguide = cu.bioguide_id\nWHERE cu.house_history_id IS NOT NULL AND strftime('%Y', cu.birthday_bio) = '1738'",
    "4800": "SELECT c.bioguide_id, c.first_name || ' ' || c.last_name AS full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.party = 'Liberal Republican'",
    "4801": "SELECT COUNT(*) \nFROM \"current-terms\" \nJOIN current ON \"current-terms\".bioguide = current.bioguide_id \nWHERE start = '1793-12-02' AND gender_bio = 'M'",
    "4802": "SELECT \n    (SELECT COUNT(*) FROM \"current-terms\" WHERE start LIKE '1875%') AS count_1875,\n    (SELECT COUNT(*) FROM \"current-terms\" WHERE start LIKE '2005%') AS count_2005",
    "4803": "SELECT c.official_full_name, sm.twitter_id, sm.youtube_id\nFROM current c\nJOIN \"social-media\" sm ON c.bioguide_id = sm.bioguide\nWHERE c.first_name = 'Richard'",
    "4804": "SELECT start, end, party\nFROM \"historical-terms\"\nJOIN historical ON \"historical-terms\".bioguide = historical.bioguide_id\nWHERE official_full_name = 'Pearl Peden Oldfield'",
    "4805": "SELECT birthday_bio FROM current WHERE first_name = 'Amy' AND last_name = 'Klobuchar'",
    "4806": "SELECT COUNT(*) \nFROM current \nWHERE fec_id IS NULL OR fec_id = '';",
    "4807": "SELECT COUNT(*) FROM current WHERE gender_bio = 'F'",
    "4808": "SELECT first_name || ' ' || last_name AS full_name\nFROM current\nWHERE opensecrets_id IS NOT NULL AND opensecrets_id <> '';",
    "4809": "SELECT middle_name FROM current WHERE birthday_bio = '1956-08-24';",
    "4810": "SELECT COUNT(*) FROM \"current-terms\" WHERE title = 'Majority Leader';",
    "4811": "SELECT ct.title\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.birthday_bio = '1942-02-20'",
    "4812": "SELECT c.gender_bio\nFROM \"current-terms\" ct\nJOIN current c ON ct.bioguide = c.bioguide_id\nWHERE ct.address = '317 Russell Senate Office Building Washington DC 20510'",
    "4813": "SELECT c.first_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.state_rank = 'senior' AND ct.title = 'Senator'",
    "4814": "SELECT COUNT(*) AS male_not_senators\nFROM current\nJOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide\nWHERE current.gender_bio = 'M' AND (\"current-terms\".class IS NULL OR \"current-terms\".class = '')",
    "4815": "SELECT \n    (COUNT(DISTINCT CASE WHEN c.class IS NOT NULL THEN c.bioguide_id END) * 1.0 / COUNT(DISTINCT c.bioguide_id)) * 100 AS percentage_senators_born_1964\nFROM \n    current c\nWHERE \n    strftime('%Y', c.birthday_bio) = '1964';",
    "4816": "SELECT \n    (COUNT(DISTINCT CASE WHEN c.class IS NULL AND h.birthday_bio < '1975-01-01' THEN h.bioguide_id END) * 1.0 / COUNT(DISTINCT h.bioguide_id)) * 100 AS percentage_not_senators_born_before_1975\nFROM \n    historical h\nLEFT JOIN \n    \"historical-terms\" c ON h.bioguide_id = c.bioguide",
    "4817": "SELECT twitter\nFROM \"social-media\"\nJOIN current ON \"social-media\".bioguide = current.bioguide_id\nWHERE current.birthday_bio = '1946-05-27'",
    "4818": "SELECT c.opensecrets_id\nFROM current c\nJOIN \"social-media\" sm ON c.bioguide_id = sm.bioguide\nWHERE sm.youtube = 'Bluetkemeyer'",
    "4819": "SELECT facebook FROM \"social-media\" \nJOIN current ON \"social-media\".bioguide = current.bioguide_id \nWHERE current.official_full_name = 'Ralph Abraham';",
    "4820": "SELECT ct.first_name\nFROM \"current-terms\" AS ctm\nJOIN current AS ct ON ctm.bioguide = ct.bioguide_id\nWHERE ctm.address = '1005 Longworth HOB; Washington DC 20515-1408'",
    "4821": "SELECT instagram\nFROM \"social-media\"\nJOIN current ON \"social-media\".bioguide = current.bioguide_id\nWHERE current.birthday_bio = '1952-08-24'",
    "4822": "SELECT COUNT(*) \nFROM current \nWHERE bioguide_id IN (\n    SELECT bioguide \n    FROM \"current-terms\" \n    WHERE (class IS NULL OR class = '') \n) AND gender_bio = 'F';",
    "4823": "SELECT c.religion_bio\nFROM current c\nJOIN \"social-media\" sm ON c.bioguide_id = sm.bioguide\nWHERE sm.youtube = 'MaxineWaters'",
    "4824": "SELECT COUNT(*) \nFROM \"current-terms\" \nJOIN current ON \"current-terms\".bioguide = current.bioguide_id \nWHERE title = 'minority leader' AND (current.fec_id IS NULL OR current.fec_id = '')",
    "4825": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M';",
    "4826": "SELECT facebook_id FROM \"social-media\" WHERE facebook = \"RepWilson\";",
    "4827": "SELECT COUNT(*) AS total_johns\nFROM (\n    SELECT first_name\n    FROM current\n    WHERE first_name = 'John'\n    UNION ALL\n    SELECT first_name\n    FROM historical\n    WHERE first_name = 'John'\n)",
    "4828": "SELECT district FROM \"current-terms\" WHERE party_affiliations = 'Anti-Administration'",
    "4829": "SELECT official_full_name \nFROM current \nWHERE birthday_bio LIKE '1960%'",
    "4830": "SELECT google_entity_id_id FROM historical WHERE first_name = 'Benjamin' AND last_name = 'Hawkins';",
    "4831": "SELECT name\nFROM \"current-terms\"\nWHERE party_affiliations = 'Pro-Administration' AND type = 'sen' AND start <= '1789-03-04' AND end >= '1791-12-31';",
    "4832": "SELECT c.first_name, c.last_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.district = 9 AND ct.type = 'rep';",
    "4833": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.party = 'Independent'",
    "4834": "SELECT c.opensecrets_id, c.thomas_id\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.party = 'Democrat' AND ct.type = 'sen' AND ct.state = 'NJ'",
    "4835": "SELECT c.google_entity_id_id\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.type = 'sen' AND ct.state = 'NY'",
    "4836": "SELECT c.religion_bio\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed'",
    "4837": "SELECT party\nFROM \"current-terms\"\nWHERE name = 'Susan M. Collins'",
    "4838": "SELECT district FROM \"current-terms\" WHERE name = 'Jonathan Grout' AND type = 'rep';",
    "4839": "SELECT c.party, c.state\nFROM \"current-terms\" c\nJOIN current ON c.bioguide = current.bioguide_id\nWHERE current.opensecrets_id = 'N00003689' AND current.thomas_id = 186;",
    "4840": "SELECT c.official_full_name, c.birthday_bio\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.contact_form = 'http://www.brown.senate.gov/contact/';",
    "4841": "SELECT ct.state, ct.type\nFROM \"current-terms\" ct\nJOIN current c ON ct.bioguide = c.bioguide_id\nWHERE c.google_entity_id_id = 'kg:/m/02pyzk';",
    "4842": "SELECT type, end FROM \"current-terms\" WHERE name = 'John Vining'",
    "4843": "WITH FemaleCounts AS (\n    SELECT\n        type,\n        COUNT(*) AS count\n    FROM \"current-terms\"\n    JOIN current ON current.bioguide_id = \"current-terms\".bioguide\n    WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) BETWEEN '1930' AND '1970'\n    GROUP BY type\n)\nSELECT\n    SUM(CASE WHEN type = 'sen' THEN count ELSE 0 END) -\n    SUM(CASE WHEN type = 'rep' THEN count ELSE 0 END) AS difference\nFROM FemaleCounts;",
    "4844": "SELECT \n    (CAST(SUM(CASE WHEN party = 'Independent' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100.0 AS percentage_independent\nFROM current\nJOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide\nWHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) BETWEEN '1955' AND '1965';",
    "4845": "SELECT first_name, last_name FROM current WHERE bioguide_id = 'W000059';",
    "4846": "SELECT \n    CASE \n        WHEN ballotpedia_id IS NULL THEN 'Thomas Carnes does not have an account on ballotpedia.org'\n        ELSE 'Thomas Carnes has an account on ballotpedia.org'\n    END AS ballotpedia_account_status\nFROM current\nWHERE first_name = 'Thomas' AND last_name = 'Carnes';",
    "4847": "SELECT COUNT(*) FROM current WHERE birthday_bio LIKE '1736%' UNION ALL SELECT COUNT(*) FROM historical WHERE birthday_bio LIKE '1736%';",
    "4848": "SELECT c.bioguide_id, c.first_name, c.last_name\nFROM current c\nWHERE c.gender_bio = 'F'",
    "4849": "SELECT COUNT(DISTINCT district) FROM \"current-terms\" WHERE state = 'ID';",
    "4850": "SELECT COUNT(*) FROM \"current-terms\" WHERE class IS NULL",
    "4851": "SELECT \n    SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) * 1.0 / \n    SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS ratio\nFROM current",
    "4852": "SELECT \n    (CAST(COUNT(DISTINCT c.bioguide_id) AS FLOAT) / CAST(COUNT(DISTINCT h.bioguide_id) + COUNT(DISTINCT c.bioguide_id) AS FLOAT)) * 100.0 AS percentage_famous_legislators\nFROM \n    current c\nLEFT JOIN \n    historical h ON c.bioguide_id = h.bioguide_id\nWHERE \n    c.wikipedia_id IS NOT NULL;",
    "4853": "SELECT bioguide\nFROM \"social-media\"\nWHERE instagram IS NULL;",
    "4854": "SELECT name, district, state\nFROM \"current-terms\"\nWHERE type = 'rep' AND start LIKE '1789%'",
    "4855": "SELECT district FROM \"historical-terms\" \nJOIN historical ON \"historical-terms\".bioguide = historical.bioguide_id \nWHERE historical.first_name = 'Benjamin' AND historical.last_name = 'Contee'",
    "4856": "SELECT address FROM \"current-terms\" WHERE name = 'Amy Klobuchar' AND start <= '2001-04-01' AND end >= '2001-04-01';",
    "4857": "SELECT ct.name, ct.state, ct.party\nFROM \"current-terms\" ct\nJOIN historical h ON ct.bioguide = h.bioguide_id\nJOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE ct.state_rank = 'junior' AND ht.start LIKE '1997%'",
    "4858": "SELECT COUNT(*) \nFROM \"current-terms\" \nJOIN current ON \"current-terms\".bioguide = current.bioguide_id \nWHERE current.gender_bio = 'F' \nAND \"current-terms\".type = 'rep' \nAND \"current-terms\".state = 'CA' \nAND strftime('%Y', \"current-terms\".start) = '2015';",
    "4859": "SELECT twitter_id FROM \"social-media\" WHERE bioguide IN (SELECT bioguide_id FROM current WHERE last_name = 'Cleaver' AND first_name = 'Emanuel')",
    "4860": "SELECT sm.facebook_id\nFROM \"social-media\" sm\nJOIN \"current-terms\" ct ON sm.bioguide = ct.bioguide\nWHERE ct.party = 'Democrat'",
    "4861": "SELECT h.first_name, h.last_name\nFROM historical h\nJOIN \"historical-terms\" ht ON h.bioguide_id = ht.bioguide\nWHERE h.gender_bio = 'F' AND ht.end = '1791-03-03';",
    "4862": "SELECT c.first_name, c.last_name, c.religion_bio, ct.state\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.religion_bio = 'Jewish' AND ct.state = 'FL'",
    "4863": "SELECT \n    (SELECT COUNT(*) FROM current WHERE wikipedia_id IS NOT NULL) * 1.0 / \n    (SELECT COUNT(*) FROM historical WHERE wikipedia_id IS NOT NULL) AS ratio",
    "4864": "SELECT \n    (COUNT(DISTINCT ct.bioguide) * 100.0) / COUNT(DISTINCT c.bioguide_id) AS percentage_21st_century\nFROM \n    current c\nLEFT JOIN \n    \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE \n    strftime('%Y', ct.start) BETWEEN '2000' AND '2017';",
    "4865": "SELECT COUNT(*) \nFROM current \nWHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL;",
    "4866": "SELECT COUNT(*) FROM \"current-terms\" WHERE type = 'sen' AND class = 1 AND party = 'Republican'",
    "4867": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM current c\nWHERE c.google_entity_id_id IS NULL\nAND c.gender_bio = 'F'\nAND c.fec_id IS NULL;",
    "4868": "SELECT COUNT(*) \nFROM \"current-terms\" \nWHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%'",
    "4869": "SELECT first_name || ' ' || last_name AS full_name\nFROM current\nORDER BY birthday_bio\nLIMIT 1;",
    "4870": "SELECT c.bioguide_id\nFROM \"current-terms\" ct\nJOIN current c ON ct.bioguide = c.bioguide_id\nWHERE ct.district = 13\nAND ct.party = 'Democrat'\nAND ct.end = '2019-01-03'\nAND ct.type = 'rep'",
    "4871": "SELECT twitter FROM \"social-media\" WHERE bioguide IN (SELECT bioguide_id FROM current WHERE first_name = 'Jason' AND last_name = 'Lewis')",
    "4872": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.party = 'Independent'\nAND ct.type = 'sen'\nAND strftime('%Y', ct.start) >= '2011'\nAND ct.caucus = 'Democrat'",
    "4873": "SELECT COUNT(*) \nFROM current \nWHERE religion_bio = 'Jewish' \nAND bioguide_id NOT IN (SELECT bioguide FROM \"social-media\" WHERE facebook IS NOT NULL);",
    "4874": "SELECT party, COUNT(*) as num_legislators\nFROM current\nJOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide\nWHERE religion_bio = 'Baptist'\nGROUP BY party\nORDER BY num_legislators DESC\nLIMIT 1;",
    "4875": "SELECT c.official_full_name\nFROM current c\nJOIN \"social-media\" sm ON c.bioguide_id = sm.bioguide\nWHERE sm.facebook IS NOT NULL \nAND sm.instagram IS NOT NULL \nAND sm.twitter IS NOT NULL \nAND sm.youtube IS NOT NULL;",
    "4876": "SELECT COUNT(DISTINCT district) \nFROM \"historical-terms\" \nWHERE name = 'John Conyers, Jr.'",
    "4877": "SELECT c.wikipedia_id\nFROM \"current-terms\" ct\nJOIN current c ON ct.bioguide = c.bioguide_id\nWHERE ct.party = 'Anti-Administration' AND ct.type = 'sen';",
    "4878": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.district = 13\nGROUP BY c.official_full_name\nHAVING SUM(strftime('%Y', ct.end) - strftime('%Y', ct.start) + 1) = 26",
    "4879": "SELECT COUNT(*)\nFROM current\nJOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide\nWHERE current.first_name = 'Benjamin' AND \"current-terms\".party = 'Federalist' AND \"current-terms\".type = 'rep';",
    "4880": "SELECT COUNT(DISTINCT ct.bioguide) AS female_representatives_served_10_years\nFROM \"current-terms\" ct\nJOIN current c ON ct.bioguide = c.bioguide_id\nWHERE c.gender_bio = 'F'\nAND ct.state = 'CA'\nAND ct.type = 'rep'\nAND (SELECT SUM(CAST(strftime('%Y', ht.end) AS INTEGER) - CAST(strftime('%Y', ht.start) AS INTEGER))\n     FROM \"historical-terms\" ht\n     WHERE ht.bioguide = ct.bioguide\n     GROUP BY ht.bioguide) >= 10;",
    "4881": "SELECT c.party\nFROM \"current-terms\" c\nJOIN current ON c.bioguide = current.bioguide_id\nWHERE current.birthday_bio = (SELECT MIN(birthday_bio) FROM current)",
    "4882": "SELECT h.name\nFROM \"historical-terms\" h\nJOIN historical hs ON h.bioguide = hs.bioguide_id\nWHERE hs.religion_bio = 'Lutheran'\nAND h.state = 'OH'\nAND h.type = 'rep'\nAND EXISTS (\n    SELECT 1\n    FROM \"historical-terms\" ht2\n    WHERE ht2.bioguide = h.bioguide\n    AND ht2.type = 'sen'\n)\nAND (\n    SELECT SUM(CAST(strftime('%Y', ht.end) AS INTEGER) - CAST(strftime('%Y', ht.start) AS INTEGER))\n    FROM \"historical-terms\" ht\n    WHERE ht.bioguide = h.bioguide\n    AND ht.type = 'rep'\n) = 14\nGROUP BY h.bioguide",
    "4883": "SELECT COUNT(*)\nFROM current\nWHERE strftime('%Y', birthday_bio) > '1960'\nAND google_entity_id_id IS NULL;",
    "4884": "SELECT official_full_name \nFROM current \nWHERE house_history_id IS NOT NULL;",
    "4885": "SELECT COUNT(*) \nFROM current \nWHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL;",
    "4886": "SELECT COUNT(*) \nFROM current \nWHERE gender_bio = 'F' AND lis_id IS NOT NULL;",
    "4887": "SELECT religion_bio FROM current WHERE last_name = 'Brown' AND first_name = 'Sherrod'",
    "4888": "SELECT religion_bio\nFROM current\nGROUP BY religion_bio\nORDER BY COUNT(religion_bio) DESC\nLIMIT 1;",
    "4889": "SELECT instagram\nFROM \"social-media\"\nJOIN current ON \"social-media\".bioguide = current.bioguide_id\nWHERE current.first_name = 'Bob' AND current.last_name = 'Corker'",
    "4890": "SELECT COUNT(*) \nFROM \"social-media\" \nWHERE thomas IS NOT NULL \nAND instagram IS NOT NULL \nAND bioguide IN (\n    SELECT bioguide_id \n    FROM current \n    WHERE thomas_id IS NOT NULL\n)",
    "4891": "SELECT sm.facebook\nFROM \"social-media\" sm\nJOIN current c ON sm.bioguide = c.bioguide_id\nWHERE c.wikipedia_id IS NOT NULL",
    "4892": "SELECT COUNT(*) AS terms_served\nFROM \"current-terms\"\nWHERE bioguide = (\n    SELECT bioguide_id\n    FROM current\n    ORDER BY birthday_bio\n    LIMIT 1\n)",
    "4893": "SELECT phone \nFROM \"current-terms\" \nWHERE name = 'Sherrod Brown' AND start = '2013-01-03'",
    "4894": "SELECT COUNT(*) AS Democrat_Terms\nFROM \"current-terms\"\nJOIN current ON \"current-terms\".bioguide = current.bioguide_id\nWHERE current.last_name = 'Brown' AND current.first_name = 'Sherrod' AND \"current-terms\".party = 'Democrat'",
    "4895": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.start = '2013-01-03'",
    "4896": "SELECT COUNT(*) \nFROM current \nJOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide \nWHERE \"current-terms\".start = '2013-01-03' AND current.gender_bio = 'F';",
    "4897": "SELECT c.official_full_name\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nGROUP BY ct.bioguide\nORDER BY COUNT(ct.bioguide) DESC\nLIMIT 1",
    "4898": "SELECT COUNT(*) FROM \"historical-terms\" \nWHERE bioguide IN (SELECT bioguide_id FROM historical WHERE last_name = 'Brown' AND first_name = 'Sherrod') \nAND district = 13;",
    "4899": "SELECT c.official_full_name\nFROM current c\nJOIN \"social-media\" sm ON c.bioguide_id = sm.bioguide\nWHERE sm.facebook = 'senjoniernst';",
    "4900": "SELECT \n    CASE \n        WHEN SUM(CASE WHEN official_full_name = 'Maria Cantwell' THEN 1 ELSE 0 END) > SUM(CASE WHEN official_full_name = 'Sherrod Brown' THEN 1 ELSE 0 END) THEN 'Maria Cantwell'\n        WHEN SUM(CASE WHEN official_full_name = 'Sherrod Brown' THEN 1 ELSE 0 END) > SUM(CASE WHEN official_full_name = 'Maria Cantwell' THEN 1 ELSE 0 END) THEN 'Sherrod Brown'\n        ELSE 'Equal Terms'\n    END AS legislator_with_more_terms\nFROM \n    (SELECT official_full_name FROM current\n     UNION ALL\n     SELECT official_full_name FROM historical)",
    "4901": "SELECT \n    (COUNT(DISTINCT CASE WHEN c.gender_bio = 'F' THEN c.bioguide_id END) * 100.0 / COUNT(DISTINCT c.bioguide_id)) AS percentage_female\nFROM \n    current c\nJOIN \n    \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nGROUP BY \n    c.bioguide_id\nHAVING \n    COUNT(ct.bioguide) > 4",
    "4902": "SELECT AVG(term_count) AS average_terms_served\nFROM (\n    SELECT COUNT(ct.bioguide) AS term_count\n    FROM \"current-terms\" ct\n    JOIN current c ON ct.bioguide = c.bioguide_id\n    WHERE c.wikipedia_id IS NOT NULL\n    GROUP BY ct.bioguide\n)",
    "4903": "SELECT COUNT(*) FROM current WHERE gender_bio = 'F';",
    "4904": "SELECT COUNT(*) AS total_senators\nFROM \"current-terms\"\nWHERE state = 'NJ' AND type = 'sen'",
    "4905": "SELECT address FROM \"current-terms\" WHERE contact_form = 'http://www.carper.senate.gov/contact/';",
    "4906": "SELECT instagram\nFROM \"social-media\"\nJOIN current ON \"social-media\".bioguide = current.bioguide_id\nWHERE first_name = 'Benjamin' AND last_name = 'Hawkins'",
    "4907": "SELECT c.bioguide_id\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE c.religion_bio = 'Catholic' AND ct.state = 'NE'",
    "4908": "SELECT c.maplight_id\nFROM current c\nJOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide\nWHERE ct.type = 'rep' AND ct.state = 'ME'",
    "4909": "SELECT type, start FROM historical\nJOIN historical-terms ON historical.bioguide_id = historical-terms.bioguide\nWHERE birthday_bio = '1727-11-26';",
    "4910": "SELECT contact_form FROM \"current-terms\" WHERE name = 'Rick Crawford'",
    "4911": "SELECT COUNT(*) \nFROM \"current-terms\" \nJOIN current ON \"current-terms\".bioguide = current.bioguide_id \nWHERE current.gender_bio = 'F' AND \"current-terms\".state = 'MI' AND \"current-terms\".type = 'rep';",
    "4912": "SELECT \n    (CAST(SUM(CASE WHEN type = 'sen' AND state = 'ME' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100.0 AS percentage_female_senators_maine\nFROM \n    \"current-terms\" \nJOIN \n    current ON \"current-terms\".bioguide = current.bioguide_id\nWHERE \n    current.gender_bio = 'F' AND current-terms.state = 'ME';",
    "4913": "SELECT DISTINCT g.games_name\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE p.full_name = 'John Aalberg'",
    "4914": "SELECT g.games_name\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE p.full_name = 'John Aalberg' AND gc.age = 31",
    "4915": "SELECT gc.age\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN games g ON gc.games_id = g.id\nWHERE p.full_name = 'John Aalberg' AND g.games_name = '1994 Winter'",
    "4916": "SELECT COUNT(DISTINCT gc.person_id) AS FinnishCompetitors\nFROM games_competitor gc\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Finland'",
    "4917": "SELECT p.full_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Finland'",
    "4918": "SELECT noc_region.region_name\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE person.full_name = 'John Aalberg'",
    "4919": "SELECT nr.noc\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE p.gender = 'M'\nORDER BY p.height DESC\nLIMIT 1",
    "4920": "SELECT COUNT(DISTINCT person.id) AS female_competitors_from_finland\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE noc_region.region_name = 'Finland' AND person.gender = 'F'",
    "4921": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_name = '1992 Summer'",
    "4922": "SELECT g.games_name\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'London'",
    "4923": "SELECT MIN(g.games_year) AS earliest_year\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'London'",
    "4924": "SELECT COUNT(DISTINCT gc.games_id) AS times_hosted\nFROM city c\nJOIN games_city gc ON c.id = gc.city_id\nWHERE c.city_name = 'London'",
    "4925": "SELECT AVG(p.height) AS average_height\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Finland' AND p.gender = 'M';",
    "4926": "SELECT \n    (SELECT CAST(COUNT(DISTINCT gc.person_id) AS FLOAT)\n     FROM games_competitor gc\n     JOIN games g ON gc.games_id = g.id\n     JOIN person_region pr ON gc.person_id = pr.person_id\n     JOIN noc_region nr ON pr.region_id = nr.id\n     WHERE g.games_name = '1994 Winter' AND nr.region_name = 'Finland') /\n    (SELECT CAST(COUNT(DISTINCT gc.person_id) AS FLOAT)\n     FROM games_competitor gc\n     JOIN games g ON gc.games_id = g.id\n     WHERE g.games_name = '1994 Winter') \n    AS percentage_of_finnish_competitors;",
    "4927": "SELECT sport.sport_name\nFROM sport\nJOIN event ON sport.id = event.sport_id\nWHERE event.event_name = 'Shooting Women''s Trap'",
    "4928": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_name = '1936 Winter'",
    "4929": "SELECT COUNT(DISTINCT g.id) AS london_olympics_hosted\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'London'",
    "4930": "SELECT COUNT(*) AS swimming_related_events\nFROM event\nJOIN sport ON event.sport_id = sport.id\nWHERE sport.sport_name = 'Swimming';",
    "4931": "SELECT noc_region.region_name\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE person.full_name = 'Peter Kohnke'",
    "4932": "SELECT gc.games_id\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nWHERE p.full_name = 'Jessica Carolina Aguilera Aguilera'",
    "4933": "SELECT sport_name\nFROM sport\nJOIN event ON sport.id = event.sport_id\nGROUP BY sport.id\nORDER BY COUNT(event.id) DESC\nLIMIT 1;",
    "4934": "SELECT p.full_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Sweden'\nORDER BY p.height DESC\nLIMIT 1",
    "4935": "SELECT COUNT(DISTINCT person.id) AS guatemalan_athletes\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE noc_region.region_name = 'Guatemala';",
    "4936": "SELECT p.full_name, COUNT(DISTINCT gc.games_id) AS num_games\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nGROUP BY p.id\nORDER BY num_games DESC\nLIMIT 1",
    "4937": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nWHERE gc.id = 90991",
    "4938": "SELECT COUNT(*) AS NumberOfCompetitorIDs\nFROM person\nJOIN games_competitor ON person.id = games_competitor.person_id\nWHERE person.full_name = 'Martina Kohlov';",
    "4939": "SELECT id, weight / (height * height / 10000.0) AS bmi\nFROM person\nWHERE id = 147420;",
    "4940": "SELECT \n    (CAST(SUM(CASE WHEN p.gender = 'M' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(p.id)) * 100 AS percentage_male_athletes\nFROM \n    person p\nJOIN \n    person_region pr ON p.id = pr.person_id\nJOIN \n    noc_region nr ON pr.region_id = nr.id\nWHERE \n    nr.region_name = 'Estonia';",
    "4941": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nWHERE gc.age = (SELECT MIN(age) FROM games_competitor)",
    "4942": "SELECT COUNT(DISTINCT gc.id) AS total_competitors\nFROM games_competitor gc\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN event e ON ce.event_id = e.id\nWHERE gc.age = 24 AND e.event_name = 'Basketball Men''s Basketball'",
    "4943": "SELECT event.event_name\nFROM event\nJOIN sport ON event.sport_id = sport.id\nWHERE sport.sport_name = 'Art Competitions'",
    "4944": "SELECT COUNT(*) AS gold_medals\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN medal m ON ce.medal_id = m.id\nWHERE p.full_name = 'Henk Jan Zwolle' AND m.medal_name = 'Gold'",
    "4945": "SELECT e.event_name\nFROM event e\nJOIN competitor_event ce ON e.id = ce.event_id\nJOIN medal m ON ce.medal_id = m.id\nWHERE m.medal_name = 'Gold'\nGROUP BY e.event_name\nORDER BY COUNT(m.medal_name) DESC\nLIMIT 1;",
    "4946": "SELECT COUNT(DISTINCT person.id) AS AustralianAthletes\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE noc_region.region_name = 'Australia';",
    "4947": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nGROUP BY city.city_name\nHAVING COUNT(DISTINCT games_city.games_id) >= 3",
    "4948": "SELECT COUNT(DISTINCT g.id) AS summer_games_in_stockholm\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE g.season = 'Summer' AND c.city_name = 'Stockholm';",
    "4949": "SELECT nr.region_name, COUNT(*) AS athlete_count\nFROM person_region pr\nJOIN noc_region nr ON pr.region_id = nr.id\nGROUP BY nr.region_name\nORDER BY athlete_count DESC\nLIMIT 1",
    "4950": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_year = (SELECT MIN(games_year) FROM games)",
    "4951": "SELECT g.games_name\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nWHERE gc.age = (SELECT MAX(age) FROM games_competitor)",
    "4952": "SELECT COUNT(DISTINCT gc.person_id) AS athletes_count\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '1992 Summer'",
    "4953": "SELECT \n    COUNT(DISTINCT ce.event_id) AS total_events,\n    SUM(CASE WHEN m.medal_name = 'Gold' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT ce.event_id) AS gold_medal_percentage\nFROM \n    person p\nJOIN \n    games_competitor gc ON p.id = gc.person_id\nJOIN \n    competitor_event ce ON gc.id = ce.competitor_id\nJOIN \n    event e ON ce.event_id = e.id\nLEFT JOIN \n    medal m ON ce.medal_id = m.id\nWHERE \n    p.full_name = 'Michael Fred Phelps, II';",
    "4954": "WITH CompetitorCounts AS (\n    SELECT \n        g.games_name,\n        COUNT(gc.person_id) AS num_competitors\n    FROM \n        games g\n    JOIN \n        games_competitor gc ON g.id = gc.games_id\n    WHERE \n        g.games_year = 1988\n    GROUP BY \n        g.games_name\n),\nMaxCompetitors AS (\n    SELECT \n        games_name,\n        num_competitors\n    FROM \n        CompetitorCounts\n    ORDER BY \n        num_competitors DESC\n    LIMIT 1\n),\nCounts AS (\n    SELECT \n        num_competitors\n    FROM \n        CompetitorCounts\n    WHERE \n        games_name = '1988 Summer'\n    UNION ALL\n    SELECT \n        -num_competitors\n    FROM \n        CompetitorCounts\n    WHERE \n        games_name = '1988 Winter'\n)\nSELECT \n    (SELECT games_name FROM MaxCompetitors) AS Most_Competitors_Game,\n    SUM(num_competitors) AS Difference\nFROM \n    Counts",
    "4955": "SELECT age, COUNT(*) as num_competitors\nFROM games_competitor\nGROUP BY age\nORDER BY num_competitors DESC\nLIMIT 1;",
    "4956": "SELECT DISTINCT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE city.city_name LIKE 'M%'",
    "4957": "SELECT c.city_name\nFROM city c\nJOIN games_city gc ON c.id = gc.city_id\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name IN ('1976 Winter', '1976 Summer')",
    "4958": "SELECT medal.medal_name\nFROM person\nJOIN games_competitor ON person.id = games_competitor.person_id\nJOIN competitor_event ON games_competitor.id = competitor_event.competitor_id\nJOIN medal ON competitor_event.medal_id = medal.id\nWHERE person.full_name = 'Coleen Dufresne';",
    "4959": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nWHERE ce.medal_id IS NOT NULL\nGROUP BY p.id\nORDER BY COUNT(ce.medal_id) DESC\nLIMIT 1",
    "4960": "SELECT nr.region_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE p.full_name = 'Estelle Nze Minko'",
    "4961": "SELECT DISTINCT sport.sport_name\nFROM sport\nJOIN event ON sport.id = event.sport_id\nJOIN competitor_event ON event.id = competitor_event.event_id\nJOIN games_competitor ON competitor_event.competitor_id = games_competitor.id\nJOIN person ON games_competitor.person_id = person.id\nWHERE person.full_name = 'Chin Eei Hui'",
    "4962": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nORDER BY gc.age DESC\nLIMIT 1",
    "4963": "SELECT g.games_year, COUNT(gc.person_id) AS women_participation\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE p.gender = 'F'\nGROUP BY g.games_year\nORDER BY women_participation DESC\nLIMIT 1",
    "4964": "SELECT COUNT(DISTINCT person.id) AS male_participants_from_belgium\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nJOIN games_competitor ON person.id = games_competitor.person_id\nWHERE person.gender = 'M' AND noc_region.region_name = 'Belgium'",
    "4965": "SELECT COUNT(DISTINCT person_id) AS participants\nFROM games_competitor\nWHERE games_id IN (\n    SELECT games.id\n    FROM games\n    JOIN games_city ON games.id = games_city.games_id\n    JOIN city ON games_city.city_id = city.id\n    WHERE city.city_name = 'Sapporo'\n)",
    "4966": "SELECT g.games_year, g.games_name\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE p.full_name = 'Morten Aleksander Djupvik'",
    "4967": "SELECT COUNT(DISTINCT person_id) AS total_participants\nFROM games_competitor\nJOIN competitor_event ON games_competitor.id = competitor_event.competitor_id\nJOIN event ON competitor_event.event_id = event.id\nWHERE event.event_name = 'Sailing Mixed 12 metres';",
    "4968": "SELECT COUNT(*) AS total_events\nFROM event\nJOIN sport ON event.sport_id = sport.id\nWHERE sport.sport_name = 'Modern Pentathlon'",
    "4969": "SELECT \n    (CAST(SUM(CASE WHEN p.gender = 'F' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(DISTINCT gc.person_id)) * 100 AS percentage\nFROM \n    competitor_event ce\nINNER JOIN \n    games_competitor gc ON ce.competitor_id = gc.id\nINNER JOIN \n    person p ON gc.person_id = p.id\nINNER JOIN \n    event e ON ce.event_id = e.id\nWHERE \n    e.event_name = 'Equestrianism Mixed Three-Day Event, Individual';",
    "4970": "SELECT AVG(gc.age) AS average_age\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '1992 Summer';",
    "4971": "SELECT g.games_year\nFROM games g\nGROUP BY g.games_year\nHAVING COUNT(DISTINCT g.games_name) = 1 AND MAX(g.season) = 'Summer'",
    "4972": "SELECT COUNT(*) AS olympics_in_90s\nFROM games\nWHERE games_year BETWEEN 1990 AND 1999;",
    "4973": "SELECT COUNT(DISTINCT gc.person_id) AS total_athletes\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '2014 Winter'",
    "4974": "SELECT COUNT(DISTINCT gc.person_id) AS athletes_with_medals\nFROM games_competitor gc\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nWHERE pr.region_id = 151 AND ce.medal_id <> 4",
    "4975": "SELECT COUNT(DISTINCT gc.person_id) AS ChineseAthletes\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE g.games_name = '2016 Summer' AND nr.region_name = 'China'",
    "4976": "SELECT COUNT(*) AS gold_medals_count\nFROM competitor_event ce\nJOIN medal m ON ce.medal_id = m.id\nJOIN event e ON ce.event_id = e.id\nWHERE m.medal_name = 'Gold' AND e.event_name = 'Ice Hockey Men''s Ice Hockey'",
    "4977": "SELECT nr.region_name, COUNT(ce.medal_id) AS medal_count\nFROM competitor_event ce\nJOIN games_competitor gc ON ce.competitor_id = gc.id\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE ce.medal_id <> 4 AND ce.medal_id IS NOT NULL\nGROUP BY nr.region_name\nORDER BY medal_count DESC\nLIMIT 1",
    "4978": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN event e ON ce.event_id = e.id\nJOIN sport s ON e.sport_id = s.id\nJOIN medal m ON ce.medal_id = m.id\nWHERE m.medal_name = 'Gold' AND s.sport_name = 'Cycling'",
    "4979": "SELECT medal.medal_name\nFROM medal\nJOIN competitor_event ON medal.id = competitor_event.medal_id\nJOIN games_competitor ON competitor_event.competitor_id = games_competitor.id\nJOIN person ON games_competitor.person_id = person.id\nWHERE person.full_name = 'Lee Chong Wei' AND medal.id <> 4;",
    "4980": "SELECT \n    (CAST(SUM(CASE WHEN p.gender = 'F' AND gc.age < 20 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(gc.person_id)) * 100 AS percentage\nFROM \n    games_competitor gc\nJOIN \n    games g ON gc.games_id = g.id\nJOIN \n    person p ON gc.person_id = p.id\nWHERE \n    g.games_name = '2002 Winter';",
    "4981": "SELECT \n    SUM(CASE WHEN p.gender = 'M' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN p.gender = 'F' THEN 1 ELSE 0 END) AS male_to_female_ratio\nFROM \n    person p\nJOIN \n    games_competitor gc ON p.id = gc.person_id\nJOIN \n    games g ON gc.games_id = g.id\nWHERE \n    g.games_name = '2012 Summer'",
    "4982": "WITH ParticipantCounts AS (\n    SELECT \n        g.id,\n        g.games_name,\n        COUNT(DISTINCT gc.person_id) AS participant_count\n    FROM \n        games g\n    JOIN \n        games_competitor gc ON g.id = gc.games_id\n    WHERE \n        g.season = 'Summer'\n    GROUP BY \n        g.id\n),\nMaxParticipants AS (\n    SELECT \n        games_name,\n        participant_count\n    FROM \n        ParticipantCounts\n    ORDER BY \n        participant_count DESC\n    LIMIT 1\n),\nMinParticipants AS (\n    SELECT \n        games_name,\n        participant_count\n    FROM \n        ParticipantCounts\n    ORDER BY \n        participant_count ASC\n    LIMIT 1\n)\nSELECT \n    'Highest Number of Participants' AS Description,\n    games_name,\n    participant_count\nFROM \n    MaxParticipants\nUNION ALL\nSELECT \n    'Lowest Number of Participants' AS Description,\n    games_name,\n    participant_count\nFROM \n    MinParticipants;",
    "4983": "SELECT COUNT(DISTINCT gc.person_id) AS Malaysian_Athletes_Won_Medal\nFROM person_region pr\nJOIN noc_region nr ON pr.region_id = nr.id\nJOIN games_competitor gc ON pr.person_id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nWHERE nr.region_name = 'Malaysia' AND ce.medal_id IS NOT NULL AND ce.medal_id <> 4",
    "4984": "SELECT COUNT(DISTINCT gc.person_id) AS overweight_athletes\nFROM games_competitor AS gc\nJOIN games ON gc.games_id = games.id\nJOIN competitor_event AS ce ON gc.id = ce.competitor_id\nJOIN event ON ce.event_id = event.id\nJOIN sport ON event.sport_id = sport.id\nJOIN person ON gc.person_id = person.id\nWHERE games.games_name = '2008 Summer'\nAND sport.sport_name = 'Canoeing'\nAND (person.weight / (person.height * person.height / 10000.0)) >= 25\nAND (person.weight / (person.height * person.height / 10000.0)) < 30",
    "4985": "SELECT AVG(p.height) AS average_height\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN event e ON ce.event_id = e.id\nJOIN sport s ON e.sport_id = s.id\nWHERE s.sport_name = 'Basketball' AND e.event_name = 'Basketball Men''s' AND p.gender = 'M'",
    "4986": "SELECT COUNT(DISTINCT person.id) AS female_athletes_from_philippines\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE person.gender = 'F' AND noc_region.region_name = 'Philippines';",
    "4987": "SELECT nr.region_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE p.full_name = 'Yao Ming'",
    "4988": "SELECT MIN(age) \nFROM games_competitor \nJOIN person ON games_competitor.person_id = person.id \nWHERE person.full_name = 'Michael Fred Phelps, II'",
    "4989": "SELECT COUNT(DISTINCT person.id) AS athlete_count\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE noc_region.region_name = (\n    SELECT noc_region.region_name\n    FROM person\n    JOIN person_region ON person.id = person_region.person_id\n    JOIN noc_region ON person_region.region_id = noc_region.id\n    WHERE person.full_name = 'Clara Hughes'\n)",
    "4990": "SELECT COUNT(DISTINCT ce.event_id) AS num_events\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN event e ON ce.event_id = e.id\nWHERE p.full_name = 'Ian James Thorpe' AND e.event_name = 'Swimming Men''s 200 metres Freestyle'",
    "4991": "SELECT COUNT(*) AS times_declared_champion\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN event e ON ce.event_id = e.id\nJOIN medal m ON ce.medal_id = m.id\nWHERE p.full_name = 'Larysa Semenivna Latynina (Diriy-)'\nAND e.event_name = 'Gymnastics Women''s Individual All-Around'\nAND m.medal_name = 'Gold'",
    "4992": "SELECT DISTINCT c.city_name\nFROM city c\nJOIN games_city gc ON c.id = gc.city_id\nJOIN games g ON gc.games_id = g.id\nJOIN games_competitor gc2 ON g.id = gc2.games_id\nJOIN person p ON gc2.person_id = p.id\nWHERE p.full_name = 'Carl Lewis Borack'",
    "4993": "SELECT COUNT(DISTINCT g.id) AS london_olympics\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'London';",
    "4994": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_name = '1992 Summer'",
    "4995": "SELECT COUNT(DISTINCT gc.person_id) AS athletes_over_59\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE gc.age > 59 AND g.games_name = '2016 Summer'",
    "4996": "SELECT g.games_name\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nJOIN games_competitor gc2 ON g.id = gc2.games_id\nWHERE c.city_name = 'Los Angeles'\nGROUP BY g.games_name\nORDER BY COUNT(gc2.id) DESC\nLIMIT 1",
    "4997": "SELECT COUNT(DISTINCT gc.person_id) AS ten_year_old_athletes\nFROM games_competitor gc\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN event e ON ce.event_id = e.id\nWHERE gc.age = 10 AND e.event_name = 'Gymnastics Men''s Parallel Bars, Teams'",
    "4998": "SELECT AVG(gc.age) AS average_age\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE g.games_name = '2016 Summer' AND nr.region_name = 'USA';",
    "4999": "SELECT region_name FROM noc_region WHERE noc = 'COL';",
    "5000": "SELECT sport_name FROM sport WHERE id = 19;",
    "5001": "SELECT id FROM event WHERE event_name = 'Shooting Mixed Skeet';",
    "5002": "SELECT id FROM sport WHERE sport_name = 'hockey';",
    "5003": "SELECT p.weight\nFROM person p\nWHERE p.full_name = 'Dagfinn Sverre Aarskog'",
    "5004": "SELECT id FROM city WHERE city_name = 'Rio de Janeiro';",
    "5005": "SELECT COUNT(DISTINCT gc.person_id) AS gold_medal_winners\nFROM competitor_event ce\nJOIN games_competitor gc ON ce.competitor_id = gc.id\nJOIN medal m ON ce.medal_id = m.id\nJOIN event e ON ce.event_id = e.id\nWHERE m.medal_name = 'Gold' AND e.event_name = 'Rowing Women''s Coxed Eights'",
    "5006": "SELECT COUNT(*) AS kinds_of_events\nFROM event\nJOIN sport ON event.sport_id = sport.id\nWHERE sport.sport_name = 'Cycling'",
    "5007": "SELECT nr.region_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE p.full_name = 'Vijay Singh Chauhan';",
    "5008": "SELECT g.games_year\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'Roma'",
    "5009": "SELECT COUNT(DISTINCT gc.person_id) AS total_20_year_old_athletes\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE gc.age = 20 AND g.games_name = '1984 Summer'",
    "5010": "SELECT COUNT(DISTINCT gc.games_id) AS games_count\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nWHERE p.full_name = 'Prithipal Singh'",
    "5011": "SELECT COUNT(DISTINCT gc.person_id) AS athletes_over_50\nFROM games_competitor AS gc\nJOIN games ON gc.games_id = games.id\nWHERE games.games_name = '1984 Summer'\nAND gc.age > 50;",
    "5012": "SELECT COUNT(event_name) AS athletics_event_count\nFROM event\nJOIN sport ON event.sport_id = sport.id\nWHERE sport.sport_name = 'Athletics'",
    "5013": "SELECT p.full_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Russia'\nORDER BY p.weight DESC\nLIMIT 1",
    "5014": "SELECT MAX(p.height) AS tallest_height\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Portugal'",
    "5015": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_name = '1968 Winter'",
    "5016": "SELECT nr.region_name, COUNT(*) AS athlete_count\nFROM person_region pr\nJOIN noc_region nr ON pr.region_id = nr.id\nGROUP BY nr.region_name\nORDER BY athlete_count DESC\nLIMIT 1",
    "5017": "SELECT\n    (CAST(SUM(CASE WHEN p.height > 175 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(p.id)) * 100 AS percentage\nFROM\n    person p\nJOIN\n    person_region pr ON p.id = pr.person_id\nJOIN\n    noc_region nr ON pr.region_id = nr.id\nWHERE\n    nr.region_name = 'Vanuatu';",
    "5018": "SELECT AVG(p.weight) AS average_weight\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Tonga' AND p.gender = 'M';",
    "5019": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_name = '1920 Summer'",
    "5020": "SELECT COUNT(DISTINCT g.id) AS london_games_count\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE g.games_year BETWEEN 1900 AND 1992\nAND c.city_name = 'London'",
    "5021": "SELECT COUNT(DISTINCT g.id) AS summer_games_in_paris\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE g.season = 'Summer' AND c.city_name = 'Paris';",
    "5022": "SELECT DISTINCT g.games_name\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'Los Angeles'",
    "5023": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nGROUP BY city.city_name\nORDER BY COUNT(games_city.games_id) DESC\nLIMIT 1",
    "5024": "SELECT g.games_name\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'Beijing' AND g.games_year = 2008",
    "5025": "SELECT \n    (CAST(SUM(CASE WHEN gc.age > 30 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(gc.id)) * 100 AS percentage_of_champions_over_30\nFROM \n    games_competitor gc\nJOIN \n    competitor_event ce ON gc.id = ce.competitor_id\nWHERE \n    ce.medal_id = 1;",
    "5026": "SELECT gc.age\nFROM games_competitor gc\nJOIN person p ON gc.person_id = p.id\nJOIN games g ON gc.games_id = g.id\nWHERE p.full_name = 'A Lamusi' AND g.games_name = '2012 Summer'",
    "5027": "SELECT COUNT(*) \nFROM games_competitor \nJOIN games ON games_competitor.games_id = games.id \nWHERE games.games_name = '2000 Summer' AND games_competitor.age = 31;",
    "5028": "SELECT COUNT(DISTINCT gc.person_id) AS male_competitors\nFROM games_competitor gc\nJOIN person p ON gc.person_id = p.id\nJOIN games g ON gc.games_id = g.id\nWHERE p.gender = 'M' AND g.games_name = '1948 Summer'",
    "5029": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '1936 Summer'",
    "5030": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '2014 Winter'\nORDER BY gc.age\nLIMIT 1",
    "5031": "SELECT AVG(gc.age) AS average_age\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '1988 Winter'",
    "5032": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM person p\n     JOIN games_competitor gc ON p.id = gc.person_id\n     JOIN games g ON gc.games_id = g.id\n     WHERE p.gender = 'F' AND p.height > 170 AND g.games_year = 1988)\n    /\n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM games_competitor gc\n     JOIN games g ON gc.games_id = g.id\n     WHERE g.games_year = 1988)\n    * 100 AS percentage",
    "5033": "SELECT sport_name \nFROM sport \nJOIN event ON sport.id = event.sport_id \nWHERE event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit'",
    "5034": "SELECT \n    (CAST(SUM(CASE WHEN g.season = 'Winter' AND gc.age > 24 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(DISTINCT gc.person_id)) * 100 AS percentage\nFROM \n    games_competitor gc\nJOIN \n    games g ON gc.games_id = g.id",
    "5035": "SELECT pr.region_id\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nWHERE p.full_name = 'Christine Jacoba Aaftink'",
    "5036": "SELECT p.height\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nWHERE pr.region_id = 7",
    "5037": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nWHERE games_city.games_id = 3",
    "5038": "SELECT games.id \nFROM games\nJOIN games_city ON games.id = games_city.games_id\nJOIN city ON games_city.city_id = city.id\nWHERE city.city_name = 'London'",
    "5039": "SELECT COUNT(DISTINCT gc.person_id)\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE gc.age < 30 AND g.season = 'Summer'",
    "5040": "SELECT g.games_name\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nWHERE gc.games_id = 13\nGROUP BY g.games_name",
    "5041": "SELECT AVG(gc.age) AS average_age\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE g.season = 'Winter';",
    "5042": "SELECT\n    (CAST(SUM(CASE WHEN gc.age < 35 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(gc.person_id)) * 100 AS percentage\nFROM\n    games_competitor gc\nJOIN\n    games g ON gc.games_id = g.id\nWHERE\n    g.season = 'Summer';",
    "5043": "SELECT event_name \nFROM event \nJOIN sport ON event.sport_id = sport.id \nWHERE sport.sport_name = 'Basketball'",
    "5044": "SELECT medal.medal_name \nFROM medal \nJOIN competitor_event ON medal.id = competitor_event.medal_id \nWHERE competitor_event.competitor_id = 9",
    "5045": "SELECT DISTINCT event_id\nFROM competitor_event\nJOIN medal ON competitor_event.medal_id = medal.id\nWHERE medal.medal_name = 'Gold'",
    "5046": "SELECT p.full_name\nFROM person p\nORDER BY p.weight DESC\nLIMIT 1",
    "5047": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_year = 1992",
    "5048": "SELECT region_name\nFROM (\n    SELECT nr.region_name, COUNT(*) AS athlete_count\n    FROM person_region pr\n    JOIN noc_region nr ON pr.region_id = nr.id\n    GROUP BY nr.region_name\n    ORDER BY athlete_count DESC\n    LIMIT 1\n)",
    "5049": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nORDER BY gc.age DESC\nLIMIT 1",
    "5050": "SELECT s.sport_name\nFROM sport s\nJOIN event e ON s.id = e.sport_id\nJOIN competitor_event ce ON e.id = ce.event_id\nJOIN games_competitor gc ON ce.competitor_id = gc.id\nJOIN person p ON gc.person_id = p.id\nWHERE p.full_name = 'John Aalberg'",
    "5051": "SELECT COUNT(DISTINCT person.id) AS Belgian_Men_Competed\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nJOIN games_competitor ON person.id = games_competitor.person_id\nWHERE person.gender = 'M' AND noc_region.region_name = 'Belgium'",
    "5052": "SELECT COUNT(DISTINCT gc.person_id) AS athletes_count\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nJOIN games_city gcit ON g.id = gcit.games_id\nJOIN city c ON gcit.city_id = c.id\nWHERE c.city_name = 'Barcelona';",
    "5053": "SELECT COUNT(DISTINCT event.event_name) AS football_event_count\nFROM event\nJOIN sport ON event.sport_id = sport.id\nWHERE sport.sport_name = 'Football'",
    "5054": "SELECT DISTINCT c.city_name\nFROM city c\nJOIN games_city gc ON c.id = gc.city_id\nJOIN games g ON gc.games_id = g.id\nJOIN games_competitor gc2 ON g.id = gc2.games_id\nJOIN person p ON gc2.person_id = p.id\nWHERE p.full_name = 'John Aalberg'",
    "5055": "SELECT COUNT(DISTINCT g.id) AS num_olympic_games_held\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'Barcelona';",
    "5056": "SELECT COUNT(DISTINCT gc.person_id) AS competitors_over_30\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE gc.age > 30 AND g.games_name = '1992 Winter'",
    "5057": "SELECT g.games_name\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nJOIN games_competitor gc2 ON g.id = gc2.games_id\nWHERE c.city_name = 'Barcelona'\nGROUP BY g.games_name\nORDER BY COUNT(gc2.id) DESC\nLIMIT 1",
    "5058": "SELECT p.full_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.region_name = 'Argentina'",
    "5059": "SELECT AVG(gc.age) AS average_age\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nJOIN person_region pr ON gc.person_id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE g.games_name = '2012 Summer' AND nr.region_name = 'Argentina';",
    "5060": "SELECT \n    (COUNT(DISTINCT CASE WHEN m.medal_name = 'Bronze' THEN ce.competitor_id END) * 1.0 / COUNT(DISTINCT ce.competitor_id)) * 100 AS percentage\nFROM \n    competitor_event ce\nINNER JOIN \n    event e ON ce.event_id = e.id\nINNER JOIN \n    medal m ON ce.medal_id = m.id\nWHERE \n    e.event_name = 'Basketball Men''s Basketball';",
    "5061": "SELECT g.games_name\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE p.full_name = 'Georgios Abaris'",
    "5062": "SELECT p.full_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nJOIN games_competitor gc ON p.id = gc.person_id\nWHERE nr.region_name = 'Greece'",
    "5063": "SELECT AVG(gc.age) AS average_age\nFROM games_competitor gc\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '1924 Winter'",
    "5064": "SELECT DISTINCT noc_region.noc\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nWHERE person.weight = 77",
    "5065": "SELECT g.games_name\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'Paris'",
    "5066": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN games g ON gc.games_id = g.id\nWHERE g.games_name = '2000 Summer'",
    "5067": "SELECT city_name \nFROM city \nJOIN games_city ON city.id = games_city.city_id \nJOIN games ON games_city.games_id = games.id \nJOIN games_competitor ON games.id = games_competitor.games_id \nORDER BY games_competitor.age DESC \nLIMIT 1;",
    "5068": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nWHERE gc.age = (SELECT MIN(age) FROM games_competitor)",
    "5069": "SELECT g.id \nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN city c ON gc.city_id = c.id\nWHERE c.city_name = 'Tokyo';",
    "5070": "SELECT nr.noc, nr.region_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE p.weight = (SELECT MAX(weight) FROM person)",
    "5071": "SELECT g.games_year, g.season\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE p.full_name = 'Sohail Abbas'",
    "5072": "SELECT AVG(p.weight) AS average_weight\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN medal m ON ce.medal_id = m.id\nWHERE m.medal_name = 'Silver'",
    "5073": "SELECT city.city_name\nFROM city\nJOIN games_city ON city.id = games_city.city_id\nJOIN games ON games_city.games_id = games.id\nWHERE games.games_name = '2004 Summer'",
    "5074": "SELECT g.season\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE p.height = 180 AND p.weight = 73",
    "5075": "SELECT p.full_name\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN medal m ON ce.medal_id = m.id\nWHERE m.medal_name = 'Gold'",
    "5076": "SELECT AVG(p.height) AS average_height\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nWHERE gc.age BETWEEN 22 AND 28;",
    "5077": "SELECT COUNT(DISTINCT gc.person_id) AS female_competitors_from_iran\nFROM games_competitor gc\nJOIN person p ON gc.person_id = p.id\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE p.gender = 'F' AND nr.region_name = 'Iran'",
    "5078": "SELECT gc.age\nFROM games_competitor gc\nJOIN person p ON gc.person_id = p.id\nWHERE p.height = (SELECT MAX(height) FROM person)",
    "5079": "SELECT \n    (SELECT COUNT(*) FROM person \n     JOIN games_competitor ON person.id = games_competitor.person_id \n     WHERE weight > 70 AND age <= 24) - \n    (SELECT COUNT(*) FROM person \n     JOIN games_competitor ON person.id = games_competitor.person_id \n     WHERE weight < 70 AND age <= 24) AS difference",
    "5080": "SELECT\n    (COUNT(CASE WHEN gc.age = 28 THEN 1 END) * 1.0 / COUNT(gc.id)) * 100 AS percentage\nFROM\n    games_competitor gc\nJOIN\n    games g ON gc.games_id = g.id\nWHERE\n    g.games_name = '2014 Winter';",
    "5081": "SELECT DISTINCT nr.region_name\nFROM person p\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE p.gender = 'M' AND p.height > (SELECT AVG(height) * 0.87 FROM person)",
    "5082": "SELECT SUM(households) AS total_households_in_arecibo\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE country.county = \"ARECIBO\"",
    "5083": "SELECT zip_code\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE country.county = \"ARECIBO\"\nORDER BY avg_house_value DESC\nLIMIT 1",
    "5084": "SELECT SUM(male_population) AS total_males_in_arecibo\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE country.county = \"ARECIBO\"",
    "5085": "SELECT COUNT(*) \nFROM zip_data \nJOIN country ON zip_data.zip_code = country.zip_code \nWHERE country.county = 'Delaware' AND zip_data.daylight_savings = 'Yes'",
    "5086": "SELECT zip_code\nFROM country\nJOIN zip_data ON country.zip_code = zip_data.zip_code\nWHERE county = 'ARECIBO'\nORDER BY white_population DESC\nLIMIT 1",
    "5087": "SELECT county\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nORDER BY avg_income_per_household DESC\nLIMIT 1",
    "5088": "SELECT DISTINCT country.county\nFROM country\nJOIN zip_data ON country.zip_code = zip_data.zip_code\nWHERE zip_data.daylight_savings = 'Yes'",
    "5089": "SELECT z.zip_code\nFROM zip_data z\nJOIN country c ON z.zip_code = c.zip_code\nWHERE c.county = 'HUNTINGDON' AND z.employees > 30 AND z.type = 'Residential'",
    "5090": "SELECT z.zip_code, z.city, z.asian_population\nFROM zip_data z\nJOIN avoid a ON z.zip_code = a.zip_code\nWHERE a.bad_alias = 'URB San Joaquin'",
    "5091": "SELECT COUNT(*) \nFROM avoid \nJOIN zip_data ON avoid.zip_code = zip_data.zip_code \nWHERE avoid.bad_alias = 'Internal Revenue Service' AND zip_data.time_zone = 'Eastern'",
    "5092": "SELECT avoid.bad_alias\nFROM avoid\nJOIN zip_data ON avoid.zip_code = zip_data.zip_code\nORDER BY zip_data.avg_house_value DESC\nLIMIT 1",
    "5093": "SELECT avoid.bad_alias\nFROM avoid\nJOIN zip_data ON avoid.zip_code = zip_data.zip_code\nWHERE zip_data.median_female_age > 32 AND zip_data.type = 'Residential'",
    "5094": "SELECT MAX(male_population * 1.0 / female_population) AS highest_gender_ratio\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE country.county = \"ARECIBO\"",
    "5095": "SELECT AVG(median_female_age) AS average_median_female_age\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE country.county = \"ARECIBO\"",
    "5096": "SELECT DISTINCT area_code.area_code\nFROM zip_data\nJOIN area_code ON zip_data.zip_code = area_code.zip_code\nWHERE zip_data.female_median_age > 32;",
    "5097": "SELECT alias.alias \nFROM alias \nJOIN zip_data ON alias.zip_code = zip_data.zip_code \nWHERE zip_data.city = 'Hartford';",
    "5098": "SELECT COUNT(DISTINCT county) \nFROM country \nWHERE state = (SELECT abbreviation FROM state WHERE name = 'Alabama')",
    "5099": "SELECT COUNT(*) AS post_offices_in_new_york\nFROM zip_data\nWHERE state = 'NY' AND type = 'Post Office'",
    "5100": "SELECT z.latitude, z.longitude\nFROM zip_data z\nJOIN area_code a ON z.zip_code = a.zip_code\nWHERE a.area_code = 787",
    "5101": "SELECT MAX(total_delivery_receptacles) AS max_delivery_receptacles\nFROM zip_data\nWHERE state = 'CA' AND type = 'Community Post Office'",
    "5102": "SELECT country.county\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nORDER BY zip_data.female_population DESC\nLIMIT 1",
    "5103": "SELECT DISTINCT s.name \nFROM state s \nJOIN zip_data zd ON s.abbreviation = zd.state \nWHERE zd.organization IS NULL AND zd.division IS NULL;",
    "5104": "SELECT MAX(population_2020) - MAX(population_2010) AS difference\nFROM zip_data\nJOIN CBSA ON zip_data.CBSA = CBSA.CBSA\nWHERE CBSA_name = \"Allentown-Bethlehem-Easton, PA-NJ\"",
    "5105": "SELECT zip_data.zip_code\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nJOIN state ON country.state = state.abbreviation\nWHERE country.county = 'NEW CASTLE' AND state.name = 'Delaware'",
    "5106": "SELECT COUNT(DISTINCT congress.cognress_rep_id) AS num_representatives\nFROM congress\nJOIN (\n    SELECT zip_data.state\n    FROM zip_data\n    GROUP BY zip_data.state\n    ORDER BY SUM(zip_data.monthly_benefits_retired_workers) DESC\n    LIMIT 1\n) AS state_with_highest_benefits ON congress.abbreviation = state_with_highest_benefits.state",
    "5107": "SELECT COUNT(DISTINCT z.city)\nFROM zip_data z\nJOIN congress c ON z.state = c.abbreviation\nWHERE c.last_name = 'Murkowski' AND z.employees = 0",
    "5108": "WITH StateAsianPopulation AS (\n    SELECT \n        z.state,\n        SUM(z.asian_population) AS total_asian_population\n    FROM \n        zip_data z\n    GROUP BY \n        z.state\n    ORDER BY \n        total_asian_population DESC\n    LIMIT 3\n),\nTopStatesReps AS (\n    SELECT \n        c.first_name,\n        c.last_name,\n        c.state\n    FROM \n        congress c\n    JOIN \n        StateAsianPopulation sap ON c.abbreviation = sap.state\n)\nSELECT \n    first_name || ' ' || last_name AS full_name,\n    state\nFROM \n    TopStatesReps\nORDER BY \n    state, full_name;",
    "5109": "SELECT s.name\nFROM country c\nJOIN state s ON c.state = s.abbreviation\nWHERE c.county = 'OUTAGAMIE'",
    "5110": "SELECT c.party\nFROM zip_congress zc\nJOIN congress c ON zc.district = c.cognress_rep_id\nWHERE zc.zip_code = 91701",
    "5111": "SELECT SUM(male_population) AS total_male_population\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE country.county = \"NEW HAVEN\"",
    "5112": "SELECT a.alias\nFROM alias a\nJOIN zip_data zd ON a.zip_code = zd.zip_code\nWHERE zd.latitude = 18.090875 AND zd.longitude = -66.867756",
    "5113": "SELECT area_code.area_code\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nWHERE zip_data.city = (\n    SELECT city\n    FROM zip_data\n    ORDER BY over_65 DESC\n    LIMIT 1\n)",
    "5114": "SELECT COUNT(DISTINCT a.bad_alias) AS bad_alias_count\nFROM congress c\nJOIN zip_congress zc ON c.cognress_rep_id = zc.district\nJOIN avoid a ON zc.zip_code = a.zip_code\nWHERE c.first_name = 'Bennie' AND c.last_name = 'Thompson' AND c.party = 'G';",
    "5115": "SELECT latitude, longitude \nFROM zip_data \nWHERE zip_code IN (SELECT zip_code FROM area_code WHERE area_code = 636)",
    "5116": "SELECT zip_congress.zip_code\nFROM zip_congress\nJOIN congress ON zip_congress.district = congress.cognress_rep_id\nWHERE congress.first_name = 'Buchanan' AND congress.last_name = 'Vernon'",
    "5117": "SELECT s.name \nFROM state s \nJOIN zip_data zd ON s.abbreviation = zd.state \nJOIN area_code ac ON zd.zip_code = ac.zip_code \nWHERE ac.area_code = 878",
    "5118": "SELECT COUNT(DISTINCT county) \nFROM country \nWHERE state = 'VA';",
    "5119": "SELECT CBSA.CBSA_name, zip_data.latitude, zip_data.longitude\nFROM zip_data\nJOIN CBSA ON zip_data.CBSA = CBSA.CBSA\nWHERE zip_data.zip_code = 45503;",
    "5120": "SELECT county\nFROM country\nJOIN zip_congress ON country.zip_code = zip_congress.zip_code\nJOIN congress ON zip_congress.district = congress.cognress_rep_id\nWHERE congress.first_name = 'Vicky' AND congress.last_name = 'Hartzler'",
    "5121": "SELECT AVG(male_median_age) AS avg_male_median_age\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE country.county = 'WINDHAM'",
    "5122": "SELECT AVG(female_median_age) AS average_female_median_age\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nJOIN congress ON country.state = congress.abbreviation\nWHERE congress.first_name = 'Ron' AND congress.last_name = 'DeSantis'",
    "5123": "SELECT area_code.area_code\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nWHERE zip_data.city = 'Bishopville' AND zip_data.state = 'SC'",
    "5124": "SELECT bad_alias FROM avoid\nJOIN zip_data ON avoid.zip_code = zip_data.zip_code\nWHERE city = 'Geneva' AND state = 'AL'",
    "5125": "SELECT z.city, z.state\nFROM zip_data z\nJOIN avoid a ON z.zip_code = a.zip_code\nWHERE a.bad_alias = 'Lawrenceville'",
    "5126": "SELECT a.alias, av.bad_alias\nFROM alias a\nJOIN avoid av ON a.zip_code = av.zip_code\nWHERE a.zip_code = 38015",
    "5127": "SELECT zip_congress.zip_code\nFROM congress\nJOIN zip_congress ON congress.cognress_rep_id = zip_congress.district\nWHERE congress.first_name = 'Steven' AND congress.last_name = 'King'",
    "5128": "SELECT CBSA.CBSA_name, CBSA.CBSA_type\nFROM CBSA\nJOIN zip_data ON CBSA.CBSA = zip_data.CBSA\nWHERE zip_data.city = 'York' AND zip_data.state = 'ME'",
    "5129": "SELECT zd.zip_code, zd.city, ac.area_code\nFROM zip_data zd\nJOIN area_code ac ON zd.zip_code = ac.zip_code\nWHERE zd.median_age > 40\nLIMIT 10",
    "5130": "SELECT county\nFROM avoid\nJOIN country ON avoid.zip_code = country.zip_code\nWHERE bad_alias = 'Druid Hills'",
    "5131": "SELECT ac.area_code\nFROM area_code ac\nJOIN country c ON ac.zip_code = c.zip_code\nJOIN state s ON c.state = s.abbreviation\nWHERE c.county = 'PHILLIPS' AND s.name = 'Montana';",
    "5132": "SELECT c.first_name || ' ' || c.last_name AS full_name, zd.zip_code\nFROM congress c\nJOIN zip_data zd ON c.abbreviation = zd.state\nJOIN state s ON zd.state = s.abbreviation\nWHERE s.name = 'Wisconsin'\nORDER BY zd.land_area DESC\nLIMIT 1",
    "5133": "SELECT COUNT(DISTINCT state.name) AS central_time_zone_states\nFROM zip_data\nJOIN state ON zip_data.state = state.abbreviation\nWHERE zip_data.time_zone = 'Central'",
    "5134": "SELECT city, state\nFROM hypothetical_city_cbsa_table\nJOIN CBSA ON hypothetical_city_cbsa_table.CBSA = CBSA.CBSA\nWHERE CBSA_name = 'Lexington-Fayette, KY'",
    "5135": "SELECT DISTINCT zd.zip_code\nFROM zip_data zd\nJOIN state s ON zd.state = s.abbreviation\nJOIN zip_congress zc ON zd.zip_code = zc.zip_code\nJOIN congress c ON zc.district = c.cognress_rep_id\nWHERE s.name = 'Indiana' AND c.party = 'Democrat'",
    "5136": "SELECT \n    (SELECT COUNT(*) FROM congress WHERE state = 'Alabama') * 1.0 / \n    (SELECT COUNT(*) FROM congress WHERE state = 'Illinois') AS ratio",
    "5137": "SELECT AVG(population_2020) AS average_population_2020 FROM zip_data",
    "5138": "SELECT SUM(zd.male_population) AS total_male_population\nFROM zip_data zd\nJOIN CBSA c ON zd.CBSA = c.CBSA\nWHERE c.CBSA_name = 'Berlin, NH'",
    "5139": "SELECT CBSA.CBSA, CBSA.CBSA_name\nFROM CBSA\nJOIN zip_data ON CBSA.CBSA = zip_data.CBSA\nGROUP BY CBSA.CBSA\nHAVING COUNT(zip_data.zip_code) > 10",
    "5140": "SELECT avoid.bad_alias\nFROM avoid\nJOIN zip_data ON avoid.zip_code = zip_data.zip_code\nWHERE zip_data.state = 'PR'",
    "5141": "SELECT longitude, latitude \nFROM zip_data \nJOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code \nJOIN congress ON zip_congress.district = congress.cognress_rep_id \nWHERE congress.first_name = 'Grayson' AND congress.last_name = 'Alan'",
    "5142": "SELECT DISTINCT s.name\nFROM area_code ac\nJOIN zip_data zd ON ac.zip_code = zd.zip_code\nJOIN state s ON zd.state = s.abbreviation\nWHERE ac.area_code = 787;",
    "5143": "SELECT congress.first_name, congress.last_name\nFROM congress\nJOIN zip_congress ON congress.cognress_rep_id = zip_congress.district\nJOIN zip_data ON zip_congress.zip_code = zip_data.zip_code\nWHERE zip_data.population_2020 > 30000\nGROUP BY congress.cognress_rep_id",
    "5144": "SELECT z.zip_code\nFROM zip_data z\nJOIN area_code ac ON z.zip_code = ac.zip_code\nJOIN state s ON z.state = s.abbreviation\nWHERE s.name = 'Massachusetts'\nGROUP BY z.zip_code\nHAVING COUNT(ac.area_code) > 1",
    "5145": "SELECT county FROM country\nJOIN zip_data ON country.zip_code = zip_data.zip_code\nWHERE city = 'Arecibo'",
    "5146": "SELECT COUNT(zip_code) \nFROM zip_data \nJOIN CBSA ON zip_data.CBSA = CBSA.CBSA \nWHERE CBSA_name = 'Barre, VT';",
    "5147": "SELECT zip_code\nFROM country\nJOIN zip_data ON country.zip_code = zip_data.zip_code\nWHERE county = \"SAINT CROIX\"\nORDER BY land_area DESC\nLIMIT 1",
    "5148": "SELECT \n    SUM(z.population_2020 - z.population_2010) AS population_difference\nFROM \n    congress c\nJOIN \n    zip_congress zc ON c.cognress_rep_id = zc.district\nJOIN \n    zip_data z ON zc.zip_code = z.zip_code\nWHERE \n    c.first_name = 'Griffin' AND c.last_name = 'Tim'",
    "5149": "SELECT \n    z.zip_code,\n    (CAST(z.asian_population AS REAL) / z.population_2020) * 100 AS asian_population_percentage\nFROM \n    zip_data z\nJOIN \n    CBSA c ON z.CBSA = c.CBSA\nWHERE \n    c.CBSA_name = 'Atmore, AL'",
    "5150": "SELECT z.city\nFROM zip_data z\nJOIN area_code a ON z.zip_code = a.zip_code\nWHERE a.area_code = 939\nORDER BY z.asian_population DESC\nLIMIT 1",
    "5151": "SELECT c.name AS country, s.name AS state\nFROM zip_data zd\nJOIN country c ON zd.zip_code = c.zip_code\nJOIN state s ON c.state = s.abbreviation\nWHERE zd.elevation = 1039",
    "5152": "SELECT alias.alias, zip_data.elevation\nFROM alias\nJOIN zip_data ON alias.zip_code = zip_data.zip_code\nWHERE zip_data.zip_code = 1028",
    "5153": "SELECT area_code.area_code\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nORDER BY zip_data.land_area DESC\nLIMIT 1",
    "5154": "SELECT area_code.area_code\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nWHERE zip_data.white_population BETWEEN 1700 AND 2000",
    "5155": "SELECT z.asian_population\nFROM zip_data z\nJOIN alias a ON z.zip_code = a.zip_code\nWHERE a.alias = 'Leeds'",
    "5156": "SELECT area_code.area_code, country.county\nFROM zip_data\nJOIN area_code ON zip_data.zip_code = area_code.zip_code\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE zip_data.city = 'Savoy'",
    "5157": "SELECT alias.alias\nFROM zip_data\nJOIN alias ON zip_data.zip_code = alias.zip_code\nWHERE zip_data.population_2010 = 0",
    "5158": "SELECT COUNT(DISTINCT city) \nFROM zip_data \nJOIN area_code ON zip_data.zip_code = area_code.zip_code \nWHERE area_code = 608 AND daylight_savings = 'Yes';",
    "5159": "SELECT AVG(elevation) AS average_elevation\nFROM zip_data\nJOIN alias ON zip_data.zip_code = alias.zip_code\nWHERE alias.alias = 'Amherst';",
    "5160": "SELECT DISTINCT country.county, zip_data.state\nFROM zip_data\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE zip_data.city = 'Dalton'",
    "5161": "SELECT alias.alias\nFROM alias\nJOIN zip_data ON alias.zip_code = zip_data.zip_code\nWHERE zip_data.type = 'Post Office'\nLIMIT 5;",
    "5162": "SELECT \n    (SELECT COUNT(DISTINCT city) FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE type = 'P.O. Box Only' AND area_code = 787) - \n    (SELECT COUNT(DISTINCT city) FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE type = 'Post Office' AND area_code = 787) AS difference;",
    "5163": "SELECT \n    (SUM(population_2020) - SUM(population_2010)) * 100.0 / SUM(population_2020) AS percentage_increase\nFROM \n    zip_data\nJOIN \n    country ON zip_data.zip_code = country.zip_code\nWHERE \n    county = 'Arroyo';",
    "5164": "SELECT z.zip_code, z.city\nFROM zip_data z\nJOIN state s ON z.state = s.abbreviation\nWHERE s.name = 'Texas' AND z.total_beneficiaries > 10000",
    "5165": "SELECT COUNT(zip_code) \nFROM zip_data \nJOIN country ON zip_data.zip_code = country.zip_code \nWHERE country.county = 'DISTRICT OF COLUMBIA' \nAND zip_data.black_population > 20000;",
    "5166": "SELECT z.city, a.alias\nFROM zip_data z\nJOIN alias a ON z.zip_code = a.zip_code\nWHERE z.zip_code = 19019",
    "5167": "SELECT avoid.bad_alias\nFROM avoid\nJOIN zip_data ON avoid.zip_code = zip_data.zip_code\nWHERE zip_data.city = 'Camuy'",
    "5168": "SELECT z.zip_code, z.city, c.first_name || ' ' || c.last_name AS representative_full_name\nFROM zip_data z\nJOIN zip_congress zc ON z.zip_code = zc.zip_code\nJOIN congress c ON zc.district = c.cognress_rep_id\nWHERE z.population_2020 = (SELECT MAX(population_2020) FROM zip_data)",
    "5169": "SELECT COUNT(zip_data.zip_code) AS postal_points_in_Illinois\nFROM zip_data\nJOIN state ON zip_data.state = state.abbreviation\nWHERE zip_data.daylight_savings = 'Yes'\nAND zip_data.region = 'Midwest'\nAND state.name = 'Illinois'",
    "5170": "SELECT country.zip_code, country.county\nFROM country\nJOIN state ON country.state = state.abbreviation\nWHERE state.name = 'Virgin Islands'",
    "5171": "SELECT z.zip_code, a.alias\nFROM zip_data z\nJOIN alias a ON z.zip_code = a.zip_code\nWHERE z.city = 'Greeneville'",
    "5172": "SELECT \n    (SELECT COUNT(*) FROM zip_congress JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.first_name = 'Smith' AND congress.last_name = 'Adrian') AS Smith_Adrian_Postal_Points,\n    (SELECT COUNT(*) FROM zip_congress JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.first_name = 'Heck' AND congress.last_name = 'Joe') AS Heck_Joe_Postal_Points",
    "5173": "SELECT zd.zip_code, c.CBSA_name\nFROM zip_data zd\nJOIN CBSA c ON zd.CBSA = c.CBSA\nWHERE zd.city = 'Oxford'",
    "5174": "SELECT zd.zip_code, zd.organization\nFROM zip_data zd\nJOIN CBSA ON zd.CBSA = CBSA.CBSA\nWHERE CBSA.CBSA_name = 'Kingsport-Bristol, TN-VA'",
    "5175": "SELECT zd.zip_code, c.first_name || ' ' || c.last_name AS representative_name\nFROM zip_data zd\nJOIN zip_congress zc ON zd.zip_code = zc.zip_code\nJOIN congress c ON zc.district = c.cognress_rep_id\nWHERE zd.organization = 'Readers Digest'",
    "5176": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM zip_data \n     JOIN state ON zip_data.state = state.abbreviation \n     WHERE state.name = 'California' AND zip_data.type = 'Post Office') / \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM zip_data \n     JOIN state ON zip_data.state = state.abbreviation \n     WHERE state.name = 'California') \n    AS percentage",
    "5177": "SELECT z.zip_code\nFROM zip_congress zc\nJOIN congress c ON zc.district = c.cognress_rep_id\nWHERE c.House = 'SpecificHouseValue';",
    "5178": "SELECT z.city\nFROM zip_data z\nJOIN avoid a ON z.zip_code = a.zip_code\nGROUP BY z.city\nORDER BY COUNT(a.bad_alias) DESC\nLIMIT 1",
    "5179": "SELECT DISTINCT county\nFROM country\nWHERE state = (SELECT abbreviation FROM state WHERE name = 'Georgia')",
    "5180": "SELECT z.zip_code, z.city, z.state, z.latitude, z.longitude\nFROM zip_data z\nJOIN area_code a ON z.zip_code = a.zip_code\nWHERE a.area_code = 410",
    "5181": "SELECT CBSA.CBSA_name\nFROM CBSA\nJOIN zip_data ON CBSA.CBSA = zip_data.CBSA\nORDER BY zip_data.avg_house_value DESC\nLIMIT 1",
    "5182": "SELECT avoid.bad_alias\nFROM avoid\nJOIN zip_data ON avoid.zip_code = zip_data.zip_code\nWHERE zip_data.city = 'East Setauket'",
    "5183": "SELECT SUM(population_2010) AS Wilcox_County_Population_2010\nFROM country\nJOIN zip_data ON country.zip_code = zip_data.zip_code\nWHERE county = 'WILCOX';",
    "5184": "SELECT area_code.area_code\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nORDER BY zip_data.asian_population DESC\nLIMIT 1",
    "5185": "SELECT DISTINCT zip_data.city\nFROM zip_data\nJOIN CBSA ON zip_data.CBSA = CBSA.CBSA\nWHERE CBSA.CBSA_type = 'Micro'",
    "5186": "SELECT s.name\nFROM state s\nJOIN country c ON s.abbreviation = c.state\nGROUP BY s.name\nORDER BY COUNT(c.county) DESC\nLIMIT 1;",
    "5187": "SELECT SUM(zd.households) AS total_households\nFROM zip_congress zc\nJOIN zip_data zd ON zc.zip_code = zd.zip_code\nWHERE zc.district = 'FL-10'",
    "5188": "SELECT avg_income_per_household\nFROM zip_data\nJOIN avoid ON zip_data.zip_code = avoid.zip_code\nWHERE bad_alias = 'Danzig'",
    "5189": "WITH StateFemalePopulation AS (\n    SELECT \n        z.state, \n        SUM(z.female_population) AS total_female_population\n    FROM \n        zip_data z\n    GROUP BY \n        z.state\n),\nAverageFemalePopulation AS (\n    SELECT \n        AVG(total_female_population) AS avg_female_population\n    FROM \n        StateFemalePopulation\n)\nSELECT \n    sfp.state\nFROM \n    StateFemalePopulation sfp, AverageFemalePopulation afp\nWHERE \n    sfp.total_female_population > afp.avg_female_population",
    "5190": "SELECT \n    (SELECT SUM(households) \n     FROM zip_data \n     JOIN country ON zip_data.zip_code = country.zip_code \n     WHERE county = 'CORYELL') * 100.0 / \n    (SELECT SUM(households) \n     FROM zip_data \n     JOIN country ON zip_data.zip_code = country.zip_code \n     WHERE state = (SELECT state \n                    FROM country \n                    WHERE county = 'CORYELL' \n                    LIMIT 1)) AS percentage;",
    "5191": "Given the structure of the tables provided and the external knowledge mentioned, it seems there might be a misunderstanding in the question. The tables defined do not contain any direct information about CBSA officers, their names, or positions. The `CBSA` table contains fields for `CBSA`, `CBSA_name`, and `CBSA_type`, which relate to Core Based Statistical Areas rather than individual officers. There is no direct link or field in the provided schema that mentions CBSA officers or their details such as names or positions within the context of cities like Cabo Rojo.\n\nThe tables focus on geographical and demographic data, congressional representation, and some relational data between ZIP codes, states, and CBSAs. There is no table or field explicitly designed to store information about individual CBSA officers.\n\nTherefore, based on the provided schema and the external knowledge note, it is not possible to write an SQL query to fetch the name and position of a CBSA officer in any city, including Cabo Rojo, as the required data and relationships are not present in the schema.\n\nIf the intention was to query information related to a CBSA (e.g., the name and type of a CBSA associated with Cabo Rojo), then additional context or correction in the database schema would be necessary to accurately address the question.",
    "5192": "SELECT county FROM county\nJOIN zip_data ON county.zip_code = zip_data.zip_code\nWHERE zip_data.city = 'Las Marias';",
    "5193": "SELECT COUNT(DISTINCT city)\nFROM zip_data\nJOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code\nJOIN congress ON zip_congress.district = congress.cognress_rep_id\nWHERE congress.first_name = 'Pedro' AND congress.last_name = 'Pierluisi';",
    "5194": "SELECT avoid.bad_alias\nFROM avoid\nJOIN zip_data ON avoid.zip_code = zip_data.zip_code\nWHERE zip_data.city = 'Aguadilla'",
    "5195": "SELECT c.first_name || ' ' || c.last_name AS congressman_name\nFROM congress c\nJOIN zip_congress zc ON c.cognress_rep_id = zc.district\nJOIN zip_data zd ON zc.zip_code = zd.zip_code\nWHERE zd.city = 'Guanica';",
    "5196": "SELECT country.state\nFROM avoid\nJOIN country ON avoid.zip_code = country.zip_code\nGROUP BY country.state\nORDER BY COUNT(avoid.bad_alias) DESC\nLIMIT 1;",
    "5197": "SELECT \n    (SELECT COUNT(*) FROM avoid JOIN zip_data ON avoid.zip_code = zip_data.zip_code WHERE city = 'Aguada') - \n    (SELECT COUNT(*) FROM avoid JOIN zip_data ON avoid.zip_code = zip_data.zip_code WHERE city = 'Aguadilla') AS difference_in_bad_alias",
    "5198": "SELECT state.name\nFROM state\nJOIN zip_data ON state.abbreviation = zip_data.state\nJOIN CBSA ON zip_data.CBSA = CBSA.CBSA\nWHERE CBSA.CBSA_type = 'Metro'\nGROUP BY state.name\nHAVING COUNT(DISTINCT CBSA.CBSA) > 50;",
    "5199": "SELECT SUM(population_2020) AS Arecibo_Population_2020\nFROM country\nJOIN zip_data ON country.zip_code = zip_data.zip_code\nWHERE county = 'ARECIBO';",
    "5200": "SELECT city, state, population_2010\nFROM zip_data\nWHERE population_2010 > 10000;",
    "5201": "SELECT 'USA' AS country\nFROM zip_data\nORDER BY households DESC\nLIMIT 1;",
    "5202": "SELECT \n    (CAST(SUM(CASE WHEN households > 10000 THEN 1 ELSE 0 END) AS REAL) / CAST(COUNT(*) AS REAL)) * 100 AS percentage\nFROM \n    zip_data",
    "5203": "SELECT \n    (COUNT(CASE WHEN type = 'Post Office' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS percentage\nFROM \n    zip_data\nJOIN \n    country ON zip_data.zip_code = country.zip_code\nWHERE \n    county = 'SAINT CROIX';",
    "5204": "SELECT country.county\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nJOIN country ON zip_data.zip_code = country.zip_code\nWHERE area_code.area_code = 787 AND zip_data.type = 'Unique Post Office'",
    "5205": "SELECT z.elevation\nFROM zip_data z\nJOIN alias a ON z.zip_code = a.zip_code\nWHERE a.alias = 'East Longmeadow'",
    "5206": "SELECT COUNT(DISTINCT city) AS total_cities_without_daylight_savings\nFROM zip_data\nWHERE daylight_savings = 'No';",
    "5207": "SELECT country.county, area_code.area_code\nFROM country\nJOIN area_code ON country.zip_code = area_code.zip_code\nWHERE country.zip_code = 1116",
    "5208": "SELECT z.city, z.type\nFROM zip_data z\nJOIN alias a ON z.zip_code = a.zip_code\nWHERE a.alias = 'St Thomas'",
    "5209": "SELECT city \nFROM zip_data \nJOIN country ON zip_data.zip_code = country.zip_code \nWHERE county = 'Noble' AND state = 'OK';",
    "5210": "SELECT area_code.area_code\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nORDER BY zip_data.water_area DESC\nLIMIT 1",
    "5211": "SELECT alias.alias \nFROM zip_data \nJOIN alias ON zip_data.zip_code = alias.zip_code \nWHERE zip_data.population_2020 = (SELECT MAX(population_2020) FROM zip_data);",
    "5212": "SELECT z.elevation\nFROM zip_data z\nJOIN country c ON z.zip_code = c.zip_code\nWHERE c.county = 'Hampden' AND c.state = 'MA'",
    "5213": "SELECT area_code.area_code\nFROM area_code\nJOIN zip_data ON area_code.zip_code = zip_data.zip_code\nWHERE zip_data.hispanic_population = (SELECT MAX(hispanic_population) FROM zip_data)",
    "5214": "SELECT alias.alias\nFROM zip_data\nJOIN alias ON zip_data.zip_code = alias.zip_code\nWHERE zip_data.asian_population = 7",
    "5215": "SELECT AVG(white_population) AS avg_white_population\nFROM zip_data\nJOIN area_code ON zip_data.zip_code = area_code.zip_code\nWHERE area_code.area_code = 920;",
    "5216": "SELECT \n    (CAST(SUM(CASE WHEN county_fips < 20 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    zip_data\nJOIN \n    alias ON zip_data.zip_code = alias.zip_code\nWHERE \n    alias.alias = 'Ponce';",
    "5217": "SELECT DISTINCT country.county\nFROM country\nJOIN zip_data ON country.zip_code = zip_data.zip_code\nWHERE zip_data.population_2020 > (\n    SELECT 0.97 * AVG(population_2020)\n    FROM zip_data\n);",
    "5218": "SELECT COUNT(*) \nFROM zip_congress \nJOIN congress ON zip_congress.district = congress.cognress_rep_id \nWHERE congress.first_name = 'Ann' AND congress.last_name = 'Kirkpatrick';",
    "5219": "SELECT zip_data.zip_code, zip_data.latitude, zip_data.longitude\nFROM zip_data\nJOIN CBSA ON zip_data.CBSA = CBSA.CBSA\nWHERE CBSA.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ'",
    "5220": "SELECT zd.zip_code, zd.city, zd.latitude, zd.longitude\nFROM zip_data zd\nJOIN avoid a ON zd.zip_code = a.zip_code\nWHERE a.bad_alias = 'Shared Reshipper'",
    "5221": "SELECT c.first_name, c.last_name\nFROM congress c\nJOIN zip_congress zc ON c.cognress_rep_id = zc.district\nJOIN zip_data zd ON zc.zip_code = zd.zip_code\nWHERE zd.city = 'Garfield'",
    "5222": "SELECT COUNT(*) AS postal_points_count\nFROM zip_data\nJOIN CBSA ON zip_data.CBSA = CBSA.CBSA\nWHERE CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';",
    "5223": "SELECT COUNT(DISTINCT z.zip_code)\nFROM zip_data z\nJOIN congress c ON z.state = c.abbreviation\nWHERE c.state = 'Puerto Rico'",
    "5224": "SELECT COUNT(DISTINCT zd.zip_code) AS postal_points, COUNT(DISTINCT c.county) AS countries\nFROM zip_data zd\nJOIN state s ON zd.state = s.abbreviation\nLEFT JOIN country c ON zd.zip_code = c.zip_code\nWHERE s.name = 'West Virginia'",
    "5225": "SELECT zd.zip_code, ac.area_code\nFROM zip_data zd\nJOIN area_code ac ON zd.zip_code = ac.zip_code\nWHERE zd.type = 'Community Post Office' AND zd.elevation > 6000",
    "5226": "SELECT COUNT(DISTINCT z.zip_code)\nFROM zip_data z\nJOIN state s ON z.state = s.abbreviation\nJOIN zip_congress zc ON z.zip_code = zc.zip_code\nJOIN congress c ON zc.district = c.cognress_rep_id\nWHERE s.name = 'Mississippi' AND c.House = 'House of Representatives'",
    "5227": "SELECT DISTINCT zc.district\nFROM zip_data zd\nJOIN zip_congress zc ON zd.zip_code = zc.zip_code\nWHERE zd.city = 'East Springfield';",
    "5228": "SELECT CBSA_name AS CBSA_officer\nFROM CBSA\nJOIN zip_data ON CBSA.CBSA = zip_data.CBSA\nORDER BY zip_data.employees DESC\nLIMIT 1;",
    "5229": "SELECT COUNT(*) \nFROM zip_data zd\nJOIN state s ON zd.state = s.abbreviation\nWHERE zd.type = 'Unique Post Office' AND s.name = 'Ohio';",
    "5230": "SELECT AVG(total_beneficiaries) AS avg_beneficiaries_per_postal_point\nFROM zip_data\nJOIN state ON zip_data.state = state.abbreviation\nWHERE state.name = 'Guam';",
    "5231": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) FROM congress WHERE party = 'Democrat') / (SELECT CAST(COUNT(*) AS REAL) FROM congress) * 100 AS percentage,\n    (SELECT COUNT(*) FROM zip_data zd JOIN congress c ON zd.state = c.abbreviation WHERE c.party = 'Democrat' AND zd.state = 'HI') AS hawaii_postal_points",
    "5232": "SELECT BrandName \nFROM rootbeerbrand \nORDER BY FirstBrewedYear \nLIMIT 1;",
    "5233": "SELECT COUNT(DISTINCT BreweryName) AS BreweriesInNorthAmerica\nFROM rootbeerbrand\nWHERE Country = 'United States'",
    "5234": "SELECT BrandName \nFROM rootbeerbrand \nWHERE FacebookPage IS NOT NULL;",
    "5235": "SELECT BrandName \nFROM rootbeerbrand \nORDER BY (CurrentRetailPrice - WholesaleCost) \nLIMIT 1;",
    "5236": "SELECT Description \nFROM rootbeerbrand \nWHERE BrandName = 'A&W';",
    "5237": "SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages';",
    "5238": "SELECT COUNT(*) AS NumberOfTransactions\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo'\nAND SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '07';",
    "5239": "SELECT COUNT(*) \nFROM \"transaction\" \nJOIN customers ON \"transaction\".CustomerID = customers.CustomerID \nWHERE SUBSTR(TransactionDate, 1, 4) = '2014' \nAND SUBSTR(TransactionDate, 6, 2) = '07' \nAND Gender = 'M';",
    "5240": "SELECT COUNT(DISTINCT c.CustomerID)\nFROM customers c\nJOIN \"transaction\" t ON c.CustomerID = t.CustomerID\nWHERE c.SubscribedToEmailList = 'TRUE'\nAND t.CreditCardType = 'Visa'\nAND SUBSTR(t.TransactionDate, 1, 4) = '2014'\nAND SUBSTR(t.TransactionDate, 6, 2) = '07';",
    "5241": "SELECT c.First || ' ' || c.Last AS FullName\nFROM customers c\nJOIN \"transaction\" t ON c.CustomerID = t.CustomerID\nWHERE SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '08'\nGROUP BY c.CustomerID\nORDER BY COUNT(t.TransactionID) DESC\nLIMIT 1;",
    "5242": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeer r ON rb.BrandID = r.BrandID\nJOIN \"transaction\" t ON r.RootBeerID = t.RootBeerID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07'",
    "5243": "SELECT COUNT(*) \nFROM transaction \nJOIN customers ON transaction.CustomerID = customers.CustomerID \nJOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID \nWHERE customers.First = 'Frank-Paul' \nAND customers.Last = 'Santangelo' \nAND transaction.TransactionDate = '2014-07-07' \nAND rootbeer.ContainerType = 'Can';",
    "5244": "SELECT COUNT(*) AS BulldogPurchasesInAugust2014\nFROM transaction\nJOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID\nJOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID\nWHERE rootbeerbrand.BrandName = 'Bulldog'\nAND SUBSTR(transaction.TransactionDate, 1, 4) = '2014'\nAND SUBSTR(transaction.TransactionDate, 6, 2) = '08';",
    "5245": "SELECT DISTINCT c.First || ' ' || c.Last AS FullName\nFROM customers c\nJOIN transaction t ON c.CustomerID = t.CustomerID\nJOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nWHERE rbb.BreweryName = 'AJ Stephans Beverages';",
    "5246": "SELECT COUNT(DISTINCT rb.BrandID)\nFROM rootbeer rb\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nJOIN \"transaction\" t ON rb.RootBeerID = t.RootBeerID\nWHERE rbb.Twitter IS NULL\nAND SUBSTR(t.TransactionDate, 1, 4) = '2014'\nAND SUBSTR(t.TransactionDate, 6, 2) = '08';",
    "5247": "SELECT t.CreditCardNumber\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07';",
    "5248": "SELECT COUNT(*) AS NonSweetenedRootBeers\nFROM rootbeer\nJOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID\nJOIN transaction ON rootbeer.RootBeerID = transaction.RootBeerID\nJOIN customers ON transaction.CustomerID = customers.CustomerID\nWHERE customers.First = 'Frank-Paul' AND customers.Last = 'Santangelo'\nAND rootbeerbrand.Honey = 'FALSE' AND rootbeerbrand.ArtificialSweetener = 'FALSE'",
    "5249": "SELECT t.TransactionDate\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Gender = 'M'\nGROUP BY t.TransactionDate, t.CustomerID\nHAVING COUNT(t.RootBeerID) > 3",
    "5250": "SELECT AVG(DailySales) AS AverageDailySales\nFROM (\n    SELECT COUNT(*) AS DailySales\n    FROM \"transaction\" t\n    JOIN rootbeer r ON t.RootBeerID = r.RootBeerID\n    JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID\n    WHERE rb.BrandName = 'A&W'\n    AND strftime('%Y', t.TransactionDate) = '2014'\n    AND strftime('%m', t.TransactionDate) = '08'\n    GROUP BY strftime('%Y-%m-%d', t.TransactionDate)\n)",
    "5251": "SELECT \n    (SELECT COUNT(*) \n     FROM \"transaction\" \n     JOIN rootbeer ON \"transaction\".RootBeerID = rootbeer.RootBeerID \n     JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID \n     WHERE SUBSTR(TransactionDate, 1, 4) = '2014' \n     AND BreweryName = 'AJ Stephans Beverages') * 100.0 / \n    (SELECT COUNT(*) \n     FROM \"transaction\" \n     WHERE SUBSTR(TransactionDate, 1, 4) = '2014') AS Percentage",
    "5252": "SELECT COUNT(*) AS NumberOfReviews\nFROM rootbeerreview\nJOIN customers ON rootbeerreview.CustomerID = customers.CustomerID\nWHERE customers.First = 'James' AND customers.Last = 'House'",
    "5253": "SELECT CreditCardNumber FROM \"transaction\"\nJOIN customers ON \"transaction\".CustomerID = customers.CustomerID\nWHERE customers.First = 'Lisa' AND customers.Last = 'Ling'",
    "5254": "SELECT Latitude, Longitude\nFROM geolocation\nJOIN location ON geolocation.LocationID = location.LocationID\nWHERE LocationName = 'Sac State American River Courtyard'",
    "5255": "SELECT location.LocationName\nFROM \"transaction\"\nJOIN location ON \"transaction\".LocationID = location.LocationID\nWHERE \"transaction\".TransactionID = 100885;",
    "5256": "SELECT City FROM customers WHERE CustomerID = (SELECT CustomerID FROM \"transaction\" WHERE TransactionID = 103545)",
    "5257": "SELECT PhoneNumber FROM customers WHERE CustomerID IN (SELECT CustomerID FROM \"transaction\" WHERE CreditCardNumber = 6011179359005380)",
    "5258": "SELECT c.First || ' ' || c.Last AS FullName\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nGROUP BY c.CustomerID\nORDER BY COUNT(rbr.BrandID) DESC\nLIMIT 1",
    "5259": "SELECT c.FirstPurchaseDate\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nWHERE rbr.Review = 'Tastes like Australia.';",
    "5260": "SELECT FirstPurchaseDate FROM customers WHERE First = 'Natalie' AND Last = 'Dorris'",
    "5261": "SELECT BreweryName\nFROM rootbeerbrand\nWHERE BrandID = (\n    SELECT BrandID\n    FROM rootbeerreview\n    WHERE StarRating = 5\n    GROUP BY BrandID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
    "5262": "SELECT SubscribedToEmailList\nFROM customers\nJOIN rootbeerreview ON customers.CustomerID = rootbeerreview.CustomerID\nJOIN rootbeerbrand ON rootbeerreview.BrandID = rootbeerbrand.BrandID\nWHERE rootbeerreview.StarRating = 3\nAND rootbeerbrand.BrandName = 'Frostie'\nAND rootbeerreview.ReviewDate = '2014-04-24'",
    "5263": "SELECT rbb.CurrentRetailPrice\nFROM rootbeerreview rbr\nJOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID\nWHERE rbr.Review = 'The quintessential dessert root beer. No ice cream required.';",
    "5264": "SELECT \n    (CAST(SUM(CASE WHEN rr.StarRating = 5 THEN 1 ELSE 0 END) AS REAL) / COUNT(rr.BrandID)) * 100 AS PercentageOf5StarRatings\nFROM \n    rootbeerreview rr\nJOIN \n    rootbeerbrand rb ON rr.BrandID = rb.BrandID\nWHERE \n    rb.BrandName = 'River City';",
    "5265": "SELECT AVG(ReviewCount) AS AverageReviews\nFROM (\n    SELECT rb.BrandID, COUNT(rbr.BrandID) AS ReviewCount\n    FROM rootbeerbrand rb\n    LEFT JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\n    WHERE rb.State = 'CA'\n    GROUP BY rb.BrandID\n)",
    "5266": "SELECT COUNT(*) FROM customers WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE';",
    "5267": "SELECT BrandName \nFROM rootbeerbrand \nORDER BY FirstBrewedYear DESC \nLIMIT 1",
    "5268": "SELECT First || ' ' || Last AS FullName\nFROM customers\nORDER BY FirstPurchaseDate\nLIMIT 10",
    "5269": "SELECT COUNT(DISTINCT BreweryName) AS NumberOfBreweriesInAustralia\nFROM rootbeerbrand\nWHERE Country = 'Australia';",
    "5270": "SELECT COUNT(*) AS CharlesInSacramento\nFROM customers\nWHERE First = 'Charles' AND City = 'Sacramento';",
    "5271": "SELECT COUNT(*) AS MasterCardTransactions2014\nFROM \"transaction\"\nWHERE CreditCardType = 'MasterCard'\nAND TransactionDate >= '2014-01-01'\nAND TransactionDate <= '2014-12-31';",
    "5272": "SELECT rb.BrandName\nFROM rootbeerreview rbr\nJOIN customers c ON rbr.CustomerID = c.CustomerID\nJOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID\nWHERE c.First = 'Jayne' AND c.Last = 'Collins'\nORDER BY rbr.StarRating ASC\nLIMIT 1",
    "5273": "SELECT COUNT(*) AS SweetBottledRootBeersPurchased\nFROM rootbeer rb\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nJOIN location l ON rb.LocationID = l.LocationID\nWHERE rbb.Honey = 'TRUE'\nAND rb.ContainerType = 'Bottle'\nAND rbb.CaneSugar = 'FALSE'\nAND rb.PurchaseDate <= '2015-12-31'\nAND l.LocationName = 'Sac State American River Courtyard'",
    "5274": "SELECT rb.BrandName, rb.BreweryName\nFROM rootbeerbrand rb\nJOIN rootbeer r ON rb.BrandID = r.BrandID\nJOIN \"transaction\" t ON r.RootBeerID = t.RootBeerID\nWHERE t.PurchaseDate >= '2016-01-01' AND t.PurchaseDate <= '2016-12-31'\nGROUP BY rb.BrandID\nORDER BY COUNT(t.RootBeerID) DESC\nLIMIT 1;",
    "5275": "SELECT c.First || ' ' || c.Last AS FullName\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nJOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID\nWHERE rbb.BrandName = 'River City' AND rbr.StarRating = 5",
    "5276": "SELECT COUNT(*) AS RootBeersPurchased\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.First = 'Tom' AND c.Last = 'Hanks'\nAND t.TransactionDate >= '2015-01-01' AND t.TransactionDate < '2017-01-01';",
    "5277": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rbr.StarRating = 5\nGROUP BY rb.BrandName\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "5278": "SELECT COUNT(*) AS HenryWeinhardsBought\nFROM transaction t\nJOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE rbb.BrandName = 'Henry Weinhard''s' AND c.First = 'Nicholas' AND c.Last = 'Sparks'",
    "5279": "SELECT rb.BrandID, rbb.BrandName, COUNT(rb.RootBeerID) AS NumberOfPurchases\nFROM rootbeer rb\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nWHERE rbb.FacebookPage IS NULL AND rbb.Twitter IS NULL\nGROUP BY rb.BrandID\nORDER BY NumberOfPurchases DESC\nLIMIT 1;",
    "5280": "SELECT l.LocationName, COUNT(t.RootBeerID) AS DogNSudsSales\nFROM \"transaction\" t\nJOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nJOIN location l ON t.LocationID = l.LocationID\nWHERE rbb.BrandName = 'Dog n Suds'\nAND l.LocationName IN ('Sac State American River Courtyard', 'Sac State Union')\nGROUP BY l.LocationName\nORDER BY DogNSudsSales DESC\nLIMIT 1;",
    "5281": "SELECT COUNT(*) AS CannedAWPurchasedIn2016\nFROM rootbeer rb\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nWHERE rb.ContainerType = 'Can'\nAND rbb.BrandName = 'A&W'\nAND rb.PurchaseDate >= '2016-01-01'\nAND rb.PurchaseDate <= '2016-12-31';",
    "5282": "SELECT Latitude, Longitude\nFROM geolocation\nJOIN location ON geolocation.LocationID = location.LocationID\nWHERE LocationName = 'Sac State Union'",
    "5283": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rbr.StarRating = 5\nGROUP BY rb.BrandName\nHAVING COUNT(DISTINCT rbr.CustomerID) >= 5",
    "5284": "WITH DrPepperBrands AS (\n    SELECT BrandID\n    FROM rootbeerbrand\n    WHERE BreweryName = 'Dr Pepper Snapple Group'\n),\nPurchases AS (\n    SELECT rb.BrandID, COUNT(*) AS PurchaseCount\n    FROM rootbeer rb\n    JOIN transaction t ON rb.RootBeerID = t.RootBeerID\n    WHERE t.PurchaseDate >= '2014-01-01' AND t.PurchaseDate <= '2016-12-31'\n    GROUP BY rb.BrandID\n),\nTotalPurchases AS (\n    SELECT SUM(PurchaseCount) AS Total\n    FROM Purchases\n),\nDrPepperPurchases AS (\n    SELECT p.BrandID, p.PurchaseCount\n    FROM Purchases p\n    JOIN DrPepperBrands dpb ON p.BrandID = dpb.BrandID\n),\nPercentage AS (\n    SELECT dpp.BrandID, dpp.PurchaseCount, (CAST(dpp.PurchaseCount AS REAL) / tp.Total) * 100 AS Percentage\n    FROM DrPepperPurchases dpp, TotalPurchases tp\n)\nSELECT rbb.BrandName, p.Percentage\nFROM Percentage p\nJOIN rootbeerbrand rbb ON p.BrandID = rbb.BrandID",
    "5285": "WITH BrandProfit AS (\n    SELECT \n        BrandID, \n        (CurrentRetailPrice - WholesaleCost) AS UnitProfit\n    FROM \n        rootbeerbrand\n),\nLowestProfitBrand AS (\n    SELECT \n        BrandID\n    FROM \n        BrandProfit\n    ORDER BY \n        UnitProfit ASC, \n        BrandID ASC -- In case of ties in unit profit, we'll consider the lowest BrandID\n    LIMIT 1\n),\nCustomerPurchases AS (\n    SELECT \n        t.CustomerID, \n        rb.BrandID, \n        COUNT(t.CustomerID) AS NumPurchases\n    FROM \n        \"transaction\" t\n    JOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID\n    JOIN LowestProfitBrand lpb ON rb.BrandID = lpb.BrandID\n    GROUP BY \n        t.CustomerID, \n        rb.BrandID\n),\nMaxPurchases AS (\n    SELECT \n        CustomerID, \n        MAX(NumPurchases) AS MaxNumPurchases\n    FROM \n        CustomerPurchases\n)\nSELECT \n    CustomerID\nFROM \n    MaxPurchases\nWHERE \n    MaxNumPurchases = (SELECT MAX(MaxNumPurchases) FROM MaxPurchases)",
    "5286": "SELECT First || ' ' || Last AS FullName, PhoneNumber\nFROM customers\nWHERE Gender = 'M' AND City = 'Fair Oaks' AND SubscribedToEmailList = 'TRUE'",
    "5287": "SELECT \n    (CAST(SUM(CASE WHEN ContainerType = 'Can' THEN 1 ELSE 0 END) AS REAL) / COUNT(RootBeerID)) * 100 AS PercentageSoldInCans\nFROM \n    rootbeer\nWHERE \n    PurchaseDate >= '2014-01-01' AND PurchaseDate <= '2014-12-31';",
    "5288": "SELECT BrandName\nFROM rootbeerbrand\nWHERE FirstBrewedYear >= 1996 AND FirstBrewedYear <= 2000\nORDER BY FirstBrewedYear DESC",
    "5289": "SELECT BrandID\nFROM rootbeerreview\nWHERE StarRating = 1\nGROUP BY BrandID\nORDER BY COUNT(CustomerID) DESC\nLIMIT 1;",
    "5290": "SELECT \n    (CAST(SUM(CASE WHEN CreditCardType = 'Visa' THEN 1 ELSE 0 END) AS REAL) / COUNT(TransactionID)) * 100 AS VisaTransactionPercentage\nFROM \n    \"transaction\"",
    "5291": "SELECT COUNT(*) \nFROM rootbeerbrand \nWHERE AvailableInCans = 'TRUE' \nAND CornSyrup = 'TRUE' \nAND ArtificialSweetener = 'TRUE';",
    "5292": "SELECT \n    (CAST(SUM(CASE WHEN l.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE 0 END) AS REAL) / COUNT(t.LocationID)) * 100 AS PercentageOfSales\nFROM \n    \"transaction\" t\nJOIN \n    location l ON t.LocationID = l.LocationID;",
    "5293": "SELECT AVG(CaffeinatedSales) AS AvgCaffeinatedSalesPerDay\nFROM (\n    SELECT COUNT(t.RootBeerID) AS CaffeinatedSales, t.TransactionDate\n    FROM \"transaction\" t\n    JOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID\n    JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\n    WHERE rbb.Caffeinated = 'TRUE'\n    GROUP BY t.TransactionDate\n)",
    "5294": "WITH ProfitPerUnit AS (\n    SELECT\n        BrandID,\n        (CurrentRetailPrice - WholesaleCost) AS Profit\n    FROM\n        rootbeerbrand\n),\nMaxProfit AS (\n    SELECT\n        BrandID,\n        MAX(Profit) AS MaxProfit\n    FROM\n        ProfitPerUnit\n),\nMinProfit AS (\n    SELECT\n        BrandID,\n        MIN(Profit) AS MinProfit\n    FROM\n        ProfitPerUnit\n),\nMaxProfitRootBeer AS (\n    SELECT\n        r.BrandID,\n        r.ContainerType\n    FROM\n        rootbeer r\n    JOIN\n        MaxProfit mp ON r.BrandID = mp.BrandID\n),\nMinProfitRootBeer AS (\n    SELECT\n        r.BrandID,\n        r.ContainerType\n    FROM\n        rootbeer r\n    JOIN\n        MinProfit mp ON r.BrandID = mp.BrandID\n)\nSELECT\n    'Max Profit' AS ProfitType,\n    ContainerType\nFROM\n    MaxProfitRootBeer\nUNION ALL\nSELECT\n    'Min Profit' AS ProfitType,\n    ContainerType\nFROM\n    MinProfitRootBeer;",
    "5295": "SELECT AVG(PurchasePrice) AS AverageCost\nFROM transaction\nJOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID\nWHERE PurchasePrice > 2 AND ContainerType = 'Bottle';",
    "5296": "SELECT COUNT(*) AS BottledRootBeersAtLocation\nFROM rootbeer\nJOIN geolocation ON rootbeer.LocationID = geolocation.LocationID\nWHERE ContainerType = 'Bottle' AND Latitude = 38.559615 AND Longitude = -121.42243;",
    "5297": "SELECT \n    (CAST(COUNT(DISTINCT rb.CustomerID) AS REAL) / CAST((SELECT COUNT(*) FROM customers WHERE SubscribedToEmailList = 'FALSE') AS REAL)) * 100 AS PercentageWithThreeOrMoreStars\nFROM \n    rootbeerreview rb\nINNER JOIN \n    customers c ON rb.CustomerID = c.CustomerID\nWHERE \n    rb.StarRating >= 3\nAND \n    c.SubscribedToEmailList = 'FALSE'",
    "5298": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rb.FirstBrewedYear = 2012 AND rbr.StarRating = 5\nGROUP BY rb.BrandID\nORDER BY COUNT(rbr.StarRating) DESC\nLIMIT 1",
    "5299": "SELECT COUNT(DISTINCT t.CustomerID) \nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nWHERE c.Gender = 'F' AND rbb.ArtificialSweetener = 'TRUE';",
    "5300": "SELECT \n    (SELECT COUNT(*) \n     FROM rootbeer rb\n     JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\n     WHERE rbb.CaneSugar = 'TRUE') \n    -\n    (SELECT COUNT(*) \n     FROM rootbeer rb\n     JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\n     WHERE rbb.CornSyrup = 'TRUE') AS difference",
    "5301": "SELECT rb.BrandName, rb.BreweryName\nFROM rootbeerbrand rb\nJOIN rootbeer r ON rb.BrandID = r.BrandID\nJOIN \"transaction\" t ON r.RootBeerID = t.RootBeerID\nWHERE t.TransactionDate >= '2015-01-01' AND t.TransactionDate <= '2015-12-31'\nGROUP BY rb.BrandID\nORDER BY COUNT(t.RootBeerID) DESC\nLIMIT 1",
    "5302": "WITH SacramentoMaleCustomers AS (\n    SELECT CustomerID\n    FROM customers\n    WHERE Gender = 'M' AND City = 'Sacramento'\n),\nDominionBrandID AS (\n    SELECT BrandID\n    FROM rootbeerbrand\n    WHERE BrandName = 'Dominion'\n),\nDominionPurchases2013 AS (\n    SELECT t.CustomerID\n    FROM \"transaction\" t\n    JOIN rootbeer r ON t.RootBeerID = r.RootBeerID\n    JOIN DominionBrandID d ON r.BrandID = d.BrandID\n    WHERE t.TransactionDate >= '2013-01-01' AND t.TransactionDate < '2014-01-01'\n),\nMaleCustomersBoughtDominion2013 AS (\n    SELECT COUNT(DISTINCT CustomerID) AS BoughtDominion\n    FROM DominionPurchases2013\n    WHERE CustomerID IN (SELECT CustomerID FROM SacramentoMaleCustomers)\n),\nTotalSacramentoMaleCustomers AS (\n    SELECT COUNT(*) AS TotalMaleCustomers\n    FROM SacramentoMaleCustomers\n)\nSELECT \n    (SELECT BoughtDominion FROM MaleCustomersBoughtDominion2013) * 1.0 / \n    (SELECT TotalMaleCustomers FROM TotalSacramentoMaleCustomers) AS PercentageBoughtDominion",
    "5303": "SELECT \n    SUBTRACT(\n        DIVIDE(\n            MULTIPLY(\n                SUM(CASE WHEN rb.Honey = 'TRUE' THEN 1 ELSE 0 END), \n                1.0\n            ), \n            COUNT(DISTINCT CASE WHEN rb.Honey = 'TRUE' THEN t.TransactionDate END)\n        ), \n        DIVIDE(\n            MULTIPLY(\n                SUM(CASE WHEN rb.Honey = 'FALSE' THEN 1 ELSE 0 END), \n                1.0\n            ), \n            COUNT(DISTINCT CASE WHEN rb.Honey = 'FALSE' THEN t.TransactionDate END)\n        )\n    ) AS DifferenceInAverageSales\nFROM \n    \"transaction\" t\nJOIN \n    rootbeer r ON t.RootBeerID = r.RootBeerID\nJOIN \n    rootbeerbrand rb ON r.BrandID = rb.BrandID",
    "5304": "SELECT c.First || ' ' || c.Last AS FullName, c.Email\nFROM customers c\nJOIN \"transaction\" t ON c.CustomerID = t.CustomerID\nJOIN location l ON t.LocationID = l.LocationID\nWHERE t.CreditCardType = 'American Express'\nAND l.LocationName = 'Sac State Union'",
    "5305": "SELECT rb.BrandName, MAX(rr.StarRating) AS HighestStarRating\nFROM rootbeerreview rr\nJOIN rootbeerbrand rb ON rr.BrandID = rb.BrandID\nWHERE rr.ReviewDate LIKE '2014-09%'\nGROUP BY rb.BrandName\nORDER BY HighestStarRating DESC\nLIMIT 1;",
    "5306": "SELECT g.Latitude, g.Longitude\nFROM geolocation g\nJOIN location l ON g.LocationID = l.LocationID\nJOIN \"transaction\" t ON l.LocationID = t.LocationID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.CreditCardType = 'American Express'\nGROUP BY g.Latitude, g.Longitude",
    "5307": "SELECT COUNT(DISTINCT t.CustomerID) AS FolsomVisaCustomers\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.City = 'Folsom' AND t.CreditCardType = 'Visa';",
    "5308": "SELECT DISTINCT c.City\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nWHERE rbr.StarRating = 5 AND rbr.ReviewDate LIKE '2012-11%'",
    "5309": "SELECT DISTINCT rb.BrandName\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nJOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID\nWHERE c.First = 'Peg' AND c.Last = 'Winchester'",
    "5310": "SELECT rb.BrandName\nFROM rootbeerreview rbr\nJOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID\nWHERE rbr.StarRating = 1\nGROUP BY rbr.BrandID\nORDER BY COUNT(rbr.StarRating) DESC\nLIMIT 1;",
    "5311": "SELECT CreditCardType\nFROM \"transaction\" \nJOIN rootbeer ON \"transaction\".RootBeerID = rootbeer.RootBeerID\nJOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID\nWHERE rootbeerbrand.Alcoholic = 'FALSE'\nGROUP BY CreditCardType\nORDER BY COUNT(CreditCardType) DESC\nLIMIT 1",
    "5312": "SELECT c.First, c.Last\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nWHERE rbr.StarRating = 5",
    "5313": "SELECT g.Latitude\nFROM geolocation g\nJOIN location l ON g.LocationID = l.LocationID\nJOIN rootbeer r ON l.LocationID = r.LocationID\nJOIN rootbeerbrand rb ON r.BrandID = rb.BrandID\nWHERE rb.BrandName = 'Thomas Kemper'\nGROUP BY g.Latitude\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "5314": "SELECT StarRating, COUNT(StarRating) AS RatingCount\nFROM rootbeerreview\nWHERE BrandID IN (\n    SELECT BrandID\n    FROM rootbeerbrand\n    WHERE CornSyrup = 'TRUE'\n)\nGROUP BY StarRating\nORDER BY RatingCount DESC\nLIMIT 1;",
    "5315": "SELECT g.Latitude, g.Longitude\nFROM geolocation g\nJOIN location l ON g.LocationID = l.LocationID\nWHERE l.ZipCode = 95819;",
    "5316": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN location l ON rb.City = l.City AND rb.State = l.State\nJOIN geolocation g ON l.LocationID = g.LocationID\nWHERE g.Latitude = 38.566129 AND g.Longitude = -121.426432;",
    "5317": "SELECT AVG(CurrentRetailPrice - WholesaleCost) AS AverageUnitProfit\nFROM rootbeerbrand\nJOIN rootbeer ON rootbeer.BrandID = rootbeerbrand.BrandID\nWHERE ContainerType = 'Can';",
    "5318": "SELECT \n    (CAST(SUM(CASE WHEN r.StarRating = 3 THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT t.CustomerID)) * 100 AS PercentageOf3StarRatings\nFROM \n    \"transaction\" t\nJOIN \n    rootbeerreview r ON t.CustomerID = r.CustomerID\nWHERE \n    t.CreditCardType = 'Discover'",
    "5319": "SELECT DISTINCT BrandID\nFROM rootbeerreview\nWHERE StarRating > 3",
    "5320": "SELECT COUNT(DISTINCT rb.BrandID)\nFROM rootbeer rb\nWHERE rb.ContainerType = 'Bottle'\nAND rb.PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26';",
    "5321": "SELECT c.First || ' ' || c.Last AS FullName\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nWHERE rbr.StarRating = 5 AND rbr.Review = 'The quintessential dessert root beer. No ice cream required';",
    "5322": "SELECT c.Email, c.PhoneNumber\nFROM customers c\nJOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID\nWHERE c.City = 'Sacramento'\nAND rbr.StarRating > 3\nAND rbr.ReviewDate LIKE '2014%'",
    "5323": "SELECT COUNT(DISTINCT rootbeerreview.CustomerID) AS FemaleMailingListSubscribers\nFROM rootbeerreview\nJOIN customers ON rootbeerreview.CustomerID = customers.CustomerID\nWHERE customers.Gender = 'F'\nAND customers.SubscribedToEmailList = 'TRUE'\nAND customers.City = 'Sacramento'\nAND rootbeerreview.StarRating = 4\nAND rootbeerreview.ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';",
    "5324": "SELECT rb.BrandName, rb.BreweryName\nFROM rootbeerbrand rb\nJOIN rootbeer r ON rb.BrandID = r.BrandID\nWHERE r.ContainerType = 'Can' AND r.PurchaseDate < '2015-06-06'\nGROUP BY rb.BrandName, rb.BreweryName",
    "5325": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeer r ON rb.BrandID = r.BrandID\nWHERE r.ContainerType = 'Bottle' AND rb.FirstBrewedYear < 1930\nGROUP BY rb.BrandName",
    "5326": "SELECT COUNT(*) AS MastercardUsageCount\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.First = 'Anna' AND c.Last = 'Himes'\nAND t.CreditCardType = 'MasterCard'\nAND t.TransactionDate BETWEEN '2014-12-25' AND '2016-05-20'",
    "5327": "SELECT AVG(StarRating) AS AverageStarRating\nFROM rootbeerreview\nJOIN customers ON rootbeerreview.CustomerID = customers.CustomerID\nWHERE rootbeerreview.BrandID = 10018\nAND customers.Gender = 'F'\nAND rootbeerreview.ReviewDate BETWEEN '2015-01-25' AND '2015-03-10'",
    "5328": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rbr.CustomerID = 331115\nAND rbr.StarRating = 1\nAND rbr.Review = 'Yuk, more like licorice soda';",
    "5329": "SELECT SUM(PurchasePrice) AS TotalPurchases\nFROM \"transaction\" \nJOIN location ON \"transaction\".LocationID = location.LocationID\nWHERE CreditCardType = 'Visa' \nAND LocationName = 'Sac State American River Courtyard' \nAND TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';",
    "5330": "SELECT COUNT(*) AS NumberOfTransactions\nFROM \"transaction\" t\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.LocationName = 'Sac State Union'\nAND t.CreditCardType = 'American Express'\nAND t.TransactionDate LIKE '2014%'",
    "5331": "SELECT Latitude, Longitude\nFROM geolocation\nJOIN location ON geolocation.LocationID = location.LocationID\nWHERE LocationName = 'Sac State Union'",
    "5332": "SELECT Review\nFROM rootbeerreview\nJOIN rootbeerbrand ON rootbeerreview.BrandID = rootbeerbrand.BrandID\nWHERE rootbeerbrand.BrandName = 'Bulldog' AND rootbeerreview.ReviewDate = '2013-07-26'",
    "5333": "SELECT rb.BrandName, \n       (rb.CurrentRetailPrice - rb.WholesaleCost) AS UnitProfit\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rbr.StarRating = 5 AND rbr.ReviewDate LIKE '2013%'\nGROUP BY rb.BrandName",
    "5334": "SELECT \n    c.First || ' ' || c.Last AS FullName,\n    julianday(r.ReviewDate) - julianday(c.FirstPurchaseDate) AS DaysSinceFirstPurchase\nFROM \n    customers c\nJOIN \n    rootbeerreview r ON c.CustomerID = r.CustomerID\nORDER BY \n    c.FirstPurchaseDate, r.ReviewDate\nLIMIT 1",
    "5335": "SELECT CreditCardType\nFROM \"transaction\"\nJOIN customers ON \"transaction\".CustomerID = customers.CustomerID\nWHERE customers.First = 'Kenneth' AND customers.Last = 'Walton';",
    "5336": "SELECT rb.ContainerType, rbb.BrandName, rbr.StarRating\nFROM rootbeer rb\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nLEFT JOIN rootbeerreview rbr ON rbb.BrandID = rbr.BrandID\nWHERE rb.RootBeerID = 10054",
    "5337": "SELECT rb.RootBeerID, rbb.BrandName\nFROM rootbeer rb\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nJOIN \"transaction\" t ON rb.RootBeerID = t.RootBeerID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE (c.First = 'Tim' AND c.Last = 'Ocel') OR (c.First = 'Dawn' AND c.Last = 'Childress')",
    "5338": "SELECT rb.RootBeerID\nFROM rootbeer rb\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nWHERE rbb.BrandName IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');",
    "5339": "SELECT COUNT(*) AS BottlesBoughtByJimBreech\nFROM transaction t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN rootbeer r ON t.RootBeerID = r.RootBeerID\nWHERE c.First = 'Jim' AND c.Last = 'Breech' AND r.ContainerType = 'Bottle';",
    "5340": "SELECT COUNT(*) AS NumberOfTransactions\nFROM \"transaction\" t\nJOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID\nJOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID\nWHERE rbb.State = 'CA';",
    "5341": "SELECT AVG(StarRating) AS AverageReview\nFROM rootbeerreview\nJOIN customers ON rootbeerreview.CustomerID = customers.CustomerID\nWHERE SubscribedToEmailList = 'TRUE'",
    "5342": "SELECT \n    (SELECT COUNT(*) FROM rootbeer \n     JOIN location ON rootbeer.LocationID = location.LocationID \n     WHERE ContainerType = 'Bottle' AND State = 'LA') \n    - \n    (SELECT COUNT(*) FROM rootbeer \n     JOIN location ON rootbeer.LocationID = location.LocationID \n     WHERE ContainerType = 'Bottle' AND State = 'MO') \nAS difference;",
    "5343": "SELECT\n    (SELECT SUM(TransactionID) FROM \"transaction\" JOIN location ON \"transaction\".LocationID = location.LocationID WHERE LocationName = 'Sac State American River Courtyard') /\n    (SELECT SUM(TransactionID) FROM \"transaction\" JOIN location ON \"transaction\".LocationID = location.LocationID WHERE LocationName = 'Sac State Union') AS TransactionRatio",
    "5344": "SELECT c.First, c.Last, t.CreditCardType\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nORDER BY t.PurchasePrice DESC\nLIMIT 10",
    "5345": "SELECT rbb.BrandName, SUM(t.PurchasePrice) AS TotalAmountSold\nFROM rootbeerbrand AS rbb\nJOIN rootbeer AS rb ON rbb.BrandID = rb.BrandID\nJOIN \"transaction\" AS t ON rb.RootBeerID = t.RootBeerID\nWHERE rbb.Caffeinated = 'FALSE' AND rbb.CaneSugar = 'FALSE'\nGROUP BY rbb.BrandName",
    "5346": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeer r ON rb.BrandID = r.BrandID\nJOIN \"transaction\" t ON r.RootBeerID = t.RootBeerID\nGROUP BY rb.BrandName\nORDER BY COUNT(t.TransactionID) ASC\nLIMIT 1;",
    "5347": "WITH BestSeller AS (\n    SELECT\n        BrandID,\n        COUNT(BrandID) AS TotalSales\n    FROM\n        rootbeer\n    GROUP BY\n        BrandID\n    ORDER BY\n        TotalSales DESC\n    LIMIT 1\n),\nAvgRating AS (\n    SELECT\n        r.BrandID,\n        AVG(rr.StarRating) AS AverageRating\n    FROM\n        rootbeer r\n    JOIN\n        rootbeerreview rr ON r.BrandID = rr.BrandID\n    WHERE\n        r.BrandID = (SELECT BrandID FROM BestSeller)\n)\nSELECT\n    rb.BrandName,\n    ar.AverageRating\nFROM\n    rootbeerbrand rb\nJOIN\n    AvgRating ar ON rb.BrandID = ar.BrandID",
    "5348": "SELECT \n    ((SUM(CASE WHEN rb.BrandName = 'River City' THEN t.PurchasePrice ELSE 0 END) - \n    SUM(CASE WHEN rb.BrandName = 'Frostie' THEN t.PurchasePrice ELSE 0 END)) / \n    SUM(CASE WHEN rb.BrandName = 'Frostie' THEN t.PurchasePrice ELSE 0 END)) * 100 AS PercentageDifference\nFROM \n    \"transaction\" t\nJOIN \n    rootbeer r ON t.RootBeerID = r.RootBeerID\nJOIN \n    rootbeerbrand rb ON r.BrandID = rb.BrandID",
    "5349": "SELECT DISTINCT City\nFROM location\nWHERE State = 'CA'\nUNION\nSELECT DISTINCT City\nFROM customers\nWHERE State = 'CA'\nUNION\nSELECT DISTINCT City\nFROM rootbeerbrand\nWHERE State = 'CA';",
    "5350": "SELECT \n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM customers WHERE SubscribedToEmailList = 'TRUE')) * 100 AS percentage\nFROM \n    customers\nWHERE \n    Gender = 'F' AND SubscribedToEmailList = 'TRUE';",
    "5351": "SELECT DISTINCT t.CreditCardType\nFROM \"transaction\" t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.First = 'Dick' AND c.Last = 'Ruthven'",
    "5352": "SELECT COUNT(*) AS TransactionsAtSacStateUnion\nFROM \"transaction\" t\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.LocationName = 'Sac State Union';",
    "5353": "SELECT StarRating\nFROM rootbeerreview\nJOIN customers ON rootbeerreview.CustomerID = customers.CustomerID\nJOIN rootbeerbrand ON rootbeerreview.BrandID = rootbeerbrand.BrandID\nWHERE customers.First = 'Urijah' AND customers.Last = 'Faber' AND rootbeerbrand.BrandName = 'Frostie'",
    "5354": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rbr.Review = 'Too spicy!'\nORDER BY rbr.StarRating ASC\nLIMIT 1;",
    "5355": "SELECT COUNT(*) AS MasterCardPurchases\nFROM \"transaction\" t\nJOIN location l ON t.LocationID = l.LocationID\nWHERE l.LocationName = 'Sac State American River Courtyard' AND t.CreditCardType = 'MasterCard'",
    "5356": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rbr.ReviewDate LIKE '2012%'\nAND rb.CaneSugar = 'TRUE'\nAND rb.Honey = 'TRUE'\nORDER BY rbr.StarRating ASC\nLIMIT 1;",
    "5357": "SELECT g.Latitude, g.Longitude\nFROM transaction t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN location l ON t.LocationID = l.LocationID\nJOIN geolocation g ON l.LocationID = g.LocationID\nWHERE c.First = 'Tommy' AND c.Last = 'Kono' AND t.TransactionDate LIKE '2014%'",
    "5358": "SELECT Email \nFROM customers \nJOIN \"transaction\" ON customers.CustomerID = \"transaction\".CustomerID \nWHERE TransactionID = 100016;",
    "5359": "SELECT COUNT(*) AS NumberOfTransactions\nFROM \"transaction\" t\nJOIN rootbeer r ON t.RootBeerID = r.RootBeerID\nWHERE r.ContainerType = 'Bottle' AND t.CreditCardType = 'American Express'",
    "5360": "SELECT l.LocationName, COUNT(*) AS BottleCount\nFROM location l\nJOIN rootbeer rb ON l.LocationID = rb.LocationID\nWHERE rb.ContainerType = 'Bottle'\nGROUP BY l.LocationName\nORDER BY BottleCount DESC\nLIMIT 1;",
    "5361": "SELECT rb.BrandName\nFROM rootbeerbrand rb\nJOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID\nWHERE rbr.StarRating = 5\nGROUP BY rb.BrandName\nORDER BY COUNT(rbr.StarRating) DESC\nLIMIT 3",
    "5362": "SELECT Latitude, Longitude\nFROM geolocation\nJOIN location ON geolocation.LocationID = location.LocationID\nWHERE LocationName = 'Sac State American River Courtyard'",
    "5363": "SELECT COUNT(SalesID) AS NumberOfSales\nFROM Sales\nWHERE CustomerID = 80",
    "5364": "SELECT SUM(Quantity) AS TotalQuantity\nFROM Sales\nWHERE SalesID BETWEEN 1 AND 10",
    "5365": "SELECT AVG(Quantity) AS AverageQuantity\nFROM Sales\nWHERE SalesID BETWEEN 20 AND 30",
    "5366": "SELECT ProductID\nFROM Sales\nGROUP BY ProductID\nORDER BY SUM(Quantity) DESC\nLIMIT 1",
    "5367": "SELECT COUNT(ProductID) AS NumberOfProductsWithLowestPrice\nFROM Products\nWHERE Price = (SELECT MIN(Price) FROM Products)",
    "5368": "SELECT Name FROM Products WHERE Price = 0;",
    "5369": "SELECT Name FROM Products WHERE ProductID BETWEEN 1 AND 10;",
    "5370": "SELECT Name \nFROM Products \nWHERE ProductID = (\n    SELECT ProductID \n    FROM Sales \n    ORDER BY Quantity ASC \n    LIMIT 1\n)",
    "5371": "SELECT COUNT(DISTINCT Sales.CustomerID) AS NumberOfCustomers\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Hex Nut 9'",
    "5372": "SELECT COUNT(Sales.SalesID) AS TotalSalesOfFlatWasher8\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Flat Washer 8'",
    "5373": "SELECT Products.Name\nFROM Products\nJOIN Sales ON Products.ProductID = Sales.ProductID\nWHERE Sales.SalesPersonID = 10",
    "5374": "SELECT Customers.FirstName\nFROM Customers\nJOIN Sales ON Customers.CustomerID = Sales.CustomerID\nWHERE Sales.ProductID = 1",
    "5375": "SELECT LastName \nFROM Customers \nJOIN Sales ON Customers.CustomerID = Sales.CustomerID \nWHERE Sales.SalesID = 178",
    "5376": "SELECT DISTINCT Sales.ProductID\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE Customers.FirstName = 'Abby'",
    "5377": "SELECT DISTINCT Sales.ProductID\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE Customers.FirstName = 'Meander'",
    "5378": "SELECT Employees.LastName\nFROM Sales\nJOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID\nWHERE Sales.SalesID = 100",
    "5379": "SELECT Employees.FirstName\nFROM Employees\nJOIN Sales ON Employees.EmployeeID = Sales.SalesPersonID\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE Customers.FirstName = 'Abigail'",
    "5380": "SELECT COUNT(*) AS FreeGiftsReceived\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Sales.CustomerID = 11782 AND Products.Price = 0;",
    "5381": "SELECT \n    c.FirstName || ' ' || COALESCE(c.MiddleInitial || ' ', '') || c.LastName AS FullName\nFROM \n    Customers c\nJOIN \n    Sales s ON c.CustomerID = s.CustomerID\nWHERE \n    s.SalesPersonID = 5",
    "5382": "SELECT Sales.SalesID\nFROM Sales\nJOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID\nWHERE Employees.FirstName LIKE 'S%'",
    "5383": "SELECT MAX(Price) AS HighestPrice\nFROM Products\nWHERE ProductID IN (\n    SELECT ProductID\n    FROM Sales\n    WHERE CustomerID BETWEEN 1 AND 100\n)",
    "5384": "SELECT c.FirstName, c.MiddleInitial, c.LastName, s.Quantity\nFROM Sales s\nJOIN Customers c ON s.CustomerID = c.CustomerID\nWHERE c.LastName = 'Valdez'\nORDER BY s.Quantity DESC\nLIMIT 1",
    "5385": "SELECT SUM(Sales.SalesID) AS TotalSalesIDSum\nFROM Sales\nJOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID\nWHERE Employees.FirstName IN ('Morningstar', 'Heather', 'Dean');",
    "5386": "SELECT EXISTS(\n    SELECT 1 \n    FROM Sales \n    JOIN Customers ON Sales.CustomerID = Customers.CustomerID\n    WHERE Customers.FirstName = 'Alex' AND Sales.ProductID = 498\n) AS HasAlexPurchasedProduct498;",
    "5387": "SELECT SUM(Products.Price * Sales.Quantity) AS TotalPrice\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Customers.FirstName = 'Adam'",
    "5388": "SELECT SUM(Price * Quantity) AS TotalPrice\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.ProductID BETWEEN 400 AND 500;",
    "5389": "SELECT SUM(Quantity) AS TotalQuantity\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name LIKE 'C%'",
    "5390": "SELECT SUM(Quantity) AS TotalQuantityPurchased\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE Customers.FirstName = 'Adrian'",
    "5391": "SELECT ProductID FROM Products ORDER BY Price DESC LIMIT 5;",
    "5392": "SELECT COUNT(*) AS FreebiesCount FROM Products WHERE Price = 0;",
    "5393": "SELECT Products.Name\nFROM Products\nJOIN Sales ON Products.ProductID = Sales.ProductID\nWHERE Sales.Quantity > 950",
    "5394": "SELECT \n    FirstName || ' ' || COALESCE(MiddleInitial || ' ', '') || LastName AS FullName\nFROM \n    Employees\nWHERE \n    EmployeeID IN (\n        SELECT \n            SalesPersonID\n        FROM \n            Sales\n        WHERE \n            Quantity = 1000\n    )",
    "5395": "SELECT Products.Name, SUM(Sales.Quantity) AS TotalQuantity\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Sales.SalesID BETWEEN 1 AND 10\nGROUP BY Products.Name",
    "5396": "SELECT SUM(Products.Price * Sales.Quantity) AS TotalSalesAmount\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Reflector'",
    "5397": "SELECT Name, SUM(Quantity) as TotalQuantity\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Name LIKE 'HL Mountain Frame - %, 42'\nGROUP BY Name\nORDER BY TotalQuantity DESC\nLIMIT 1",
    "5398": "SELECT\n    (SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42') -\n    (SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42') AS PriceDifference",
    "5399": "SELECT COUNT(*) AS TotalSales\nFROM Sales\nJOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID\nWHERE Employees.FirstName = 'Michel' AND Employees.MiddleInitial = 'E' AND Employees.LastName = 'DeFrance'",
    "5400": "SELECT AVG(CustomerCount) AS AvgCustomersPerSalesPerson\nFROM (\n    SELECT SalesPersonID, COUNT(DISTINCT CustomerID) AS CustomerCount\n    FROM Sales\n    GROUP BY SalesPersonID\n)",
    "5401": "SELECT COUNT(DISTINCT Sales.CustomerID) AS NumberOfCustomers\nFROM Sales\nJOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Employees.FirstName = 'Innes' AND Employees.MiddleInitial = 'E.' AND Employees.LastName = 'del Castillo'\nAND Products.Name = 'Short-Sleeve Classic Jersey, L'",
    "5402": "SELECT \n    Employees.FirstName || ' ' || COALESCE(Employees.MiddleInitial || '. ', '') || Employees.LastName AS SalesPersonName\nFROM \n    Sales\nJOIN \n    Customers ON Sales.CustomerID = Customers.CustomerID\nJOIN \n    Employees ON Sales.SalesPersonID = Employees.EmployeeID\nJOIN \n    Products ON Sales.ProductID = Products.ProductID\nWHERE \n    Customers.FirstName = 'Elizabeth' AND \n    Customers.MiddleInitial = 'A' AND \n    Customers.LastName = 'White' AND \n    Products.Name = 'Road-250 Black, 48'",
    "5403": "SELECT COUNT(DISTINCT Sales.SalesPersonID) AS NumberOfSalesPeople\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Headlights - Weatherproof'",
    "5404": "SELECT SUM(Sales.Quantity * Products.Price) AS Revenue\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'HL Road Frame - Red, 56'",
    "5405": "SELECT COUNT(*) AS NumberOfSalesTransactions\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE Customers.FirstName = 'Joe' AND Customers.MiddleInitial = 'L' AND Customers.LastName = 'Lopez'",
    "5406": "SELECT c.FirstName || ' ' || IFNULL(c.MiddleInitial || '. ', '') || c.LastName AS CustomerName\nFROM Customers c\nJOIN Sales s ON c.CustomerID = s.CustomerID\nJOIN Products p ON s.ProductID = p.ProductID\nWHERE p.Name = 'Touring Rim' AND s.Quantity = 0",
    "5407": "SELECT \n    Employees.EmployeeID, \n    Employees.FirstName || ' ' || Employees.LastName AS SalesPersonName, \n    COUNT(DISTINCT Sales.CustomerID) AS NumberOfCustomers\nFROM \n    Sales\nINNER JOIN \n    Employees ON Sales.SalesPersonID = Employees.EmployeeID\nGROUP BY \n    Sales.SalesPersonID",
    "5408": "To answer the question \"How many sales people are handling all the customers?\" using the provided table structures, we need to understand that the question is asking for the count of unique salespeople who have made sales to every customer in the database. This is a complex query because it involves determining the set of all customers and then finding which salespeople have transactions with each of those customers.\n\nGiven the complexity of the question and the limitations of SQL, especially in SQLite which does not support some of the more advanced SQL features found in other RDBMS systems, we need to approach this with a strategy that might involve multiple steps conceptually, but we aim to write it as a single SQL query as requested.\n\nOne way to approach this is to count the number of unique customers each salesperson has made sales to and compare that to the total number of customers. If the numbers match, it means the salesperson has handled all customers.\n\nHowever, it's important to note that directly writing a query to find \"salespeople who have made sales to every customer\" in a single SQL statement is complex and might not be straightforward due to the need for comparing sets of customers per salesperson against the total set of customers.\n\nGiven the constraints and the nature of the question, a direct SQL solution that fits all conditions perfectly might not be feasible without additional operations or temporary structures to hold intermediate results. SQL is generally not used for \"returning SQL\" to answer such questions directly but rather to execute the logic itself.\n\nThat said, a theoretical approach (not directly executable in a single SQL statement in SQLite due to its limitations and the complexity of the question) would involve:\n\n1. Counting the total number of unique customers.\n2. For each salesperson, count the number of unique customers they have made sales to.\n3. Compare these counts to determine if any salesperson has a count equal to the total number of customers.\n\nIn practice, this would likely require temporary tables, subqueries, or a programming language to orchestrate the SQL queries to achieve the desired result.\n\nFor educational purposes, here's a simplified and conceptual SQL-like approach to illustrate part of the process. This does not directly solve the problem as described due to the limitations mentioned but gives an idea of part of the process that could be involved:\n\n```sqlite\nSELECT COUNT(DISTINCT SalesPersonID) AS NumberOfSalesPeopleHandlingAllCustomers\nFROM Sales\nWHERE (SELECT COUNT(DISTINCT CustomerID) FROM Customers) = \n      (SELECT",
    "5409": "SELECT FirstName || ' ' || COALESCE(MiddleInitial || ' ', '') || LastName AS SalesPersonName\nFROM Employees\nWHERE EmployeeID = 7",
    "5410": "SELECT \n    MIN(Price) AS LeastExpensiveProductPrice,\n    (SELECT Name FROM Products WHERE Price = (SELECT MIN(Price) FROM Products WHERE Price > 0)) AS LeastExpensiveProductName,\n    MAX(Price) AS MostExpensiveProductPrice,\n    (SELECT Name FROM Products WHERE Price = (SELECT MAX(Price) FROM Products)) AS MostExpensiveProductName\nFROM Products\nWHERE Price > 0",
    "5411": "SELECT\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM Sales\n     JOIN Customers ON Sales.CustomerID = Customers.CustomerID\n     JOIN Products ON Sales.ProductID = Products.ProductID\n     WHERE Products.Name = 'ML Bottom Bracket' AND Customers.FirstName = 'Albert' AND Customers.MiddleInitial = 'I' AND Customers.LastName = 'Ringer')\n    /\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM Sales\n     JOIN Products ON Sales.ProductID = Products.ProductID\n     WHERE Products.Name = 'ML Bottom Bracket') * 100.0 AS Percentage",
    "5412": "SELECT COUNT(*) AS NumberOfAbigails\nFROM Customers\nWHERE FirstName = 'Abigail'",
    "5413": "SELECT SUM(Quantity) AS TotalBladeSold\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Blade'",
    "5414": "SELECT \n    e.FirstName || ' ' || e.LastName AS FullName\nFROM \n    Employees e\nJOIN \n    Sales s ON e.EmployeeID = s.SalesPersonID\nGROUP BY \n    e.EmployeeID\nORDER BY \n    SUM(s.Quantity) DESC\nLIMIT 1",
    "5415": "SELECT c.FirstName || ' ' || c.LastName AS FullName\nFROM Customers c\nJOIN Sales s ON c.CustomerID = s.CustomerID\nGROUP BY c.CustomerID\nORDER BY SUM(s.Quantity) DESC\nLIMIT 1",
    "5416": "SELECT p.Name\nFROM Sales s\nJOIN Products p ON s.ProductID = p.ProductID\nWHERE s.SalesPersonID = 20\nGROUP BY s.ProductID\nORDER BY SUM(s.Quantity) DESC\nLIMIT 1",
    "5417": "SELECT DISTINCT Employees.FirstName\nFROM Employees\nJOIN Sales ON Employees.EmployeeID = Sales.SalesPersonID\nWHERE Sales.Quantity > 500",
    "5418": "SELECT DISTINCT Customers.FirstName\nFROM Customers\nJOIN Sales ON Customers.CustomerID = Sales.CustomerID\nWHERE Sales.SalesPersonID = 1",
    "5419": "SELECT SUM(Sales.Quantity) AS TotalTradingQuantity\nFROM Sales\nJOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE Employees.FirstName = 'Abraham' AND Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander'",
    "5420": "SELECT DISTINCT c.FirstName || ' ' || c.LastName AS FullName\nFROM Customers c\nJOIN Sales s ON c.CustomerID = s.CustomerID\nWHERE s.Quantity > 600",
    "5421": "SELECT c.FirstName, c.LastName\nFROM Sales s\nJOIN Customers c ON s.CustomerID = c.CustomerID\nJOIN Products p ON s.ProductID = p.ProductID\nWHERE c.FirstName = 'Cameron'\nGROUP BY s.CustomerID\nORDER BY MAX(s.Quantity) DESC\nLIMIT 1",
    "5422": "SELECT Sales.SalesID\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Hex Nut' AND Products.Price > 100",
    "5423": "SELECT DISTINCT Sales.CustomerID\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Price BETWEEN 1000 AND 2000",
    "5424": "SELECT SUM(Quantity) AS TotalGiftQuantity\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Price = 0;",
    "5425": "SELECT \n    IFNULL((SUM(CASE WHEN Price = 0 THEN Quantity ELSE 0 END) * 1.0 / SUM(Quantity)) * 100, 0) AS GiftProductPercentage\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID",
    "5426": "SELECT \n    (SUM(CASE WHEN Products.Name = 'Blade' THEN Sales.Quantity ELSE 0 END) * 1.0 / SUM(Sales.Quantity)) * 100 AS PercentageOfBladesSold\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID",
    "5427": "SELECT COUNT(*) FROM Employees WHERE LastName = 'Ringer'",
    "5428": "SELECT COUNT(*) FROM Products WHERE ProductID < 15 AND Price <= 10;",
    "5429": "SELECT Products.Name\nFROM Products\nJOIN Sales ON Products.ProductID = Sales.ProductID\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander'",
    "5430": "SELECT p.ProductID, p.Name\nFROM Products p\nJOIN Sales s ON p.ProductID = s.ProductID\nWHERE s.Quantity BETWEEN 400 AND 500\nORDER BY p.Price DESC\nLIMIT 1",
    "5431": "SELECT c.FirstName, c.MiddleInitial, c.LastName, MAX(s.Quantity) as HighestQuantity\nFROM Customers c\nJOIN Sales s ON c.CustomerID = s.CustomerID\nWHERE c.FirstName = 'Kate'\nGROUP BY c.CustomerID\nORDER BY HighestQuantity DESC\nLIMIT 1",
    "5432": "SELECT Sales.CustomerID, Sales.SalesID\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Price BETWEEN 100 AND 150\nAND Sales.Quantity < 25",
    "5433": "SELECT Sales.Quantity, Products.Price\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Customers.FirstName = 'Abigail' AND Customers.LastName = 'Henderson'",
    "5434": "SELECT COUNT(*) \nFROM Sales \nJOIN Products ON Sales.ProductID = Products.ProductID \nWHERE Sales.Quantity = 60 AND Products.Price <= 500;",
    "5435": "SELECT COUNT(DISTINCT c.CustomerID) AS Erica_Customers_With_Quantity_Below_200\nFROM Customers c\nJOIN Sales s ON c.CustomerID = s.CustomerID\nWHERE c.FirstName = 'Erica' AND s.Quantity < 200",
    "5436": "SELECT p.Name\nFROM Products p\nJOIN Sales s ON p.ProductID = s.ProductID\nJOIN Customers c ON s.CustomerID = c.CustomerID\nWHERE c.FirstName = 'Kathryn' AND c.LastName = 'Ashe'\nORDER BY s.Quantity DESC\nLIMIT 1",
    "5437": "SELECT \n    p.Name, \n    p.Price, \n    s.Quantity\nFROM \n    Products p\nJOIN \n    Sales s ON p.ProductID = s.ProductID\nWHERE \n    p.Name = 'Seat Tube';",
    "5438": "SELECT Products.Name, Products.Price\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Customers.FirstName = 'Erica' AND Customers.LastName = 'Xu'",
    "5439": "SELECT Sales.SalesID\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'External Lock Washer 7'''\nAND Sales.Quantity = 590",
    "5440": "SELECT c.FirstName, c.LastName\nFROM Sales s\nJOIN Customers c ON s.CustomerID = c.CustomerID\nWHERE s.SalesID BETWEEN 30 AND 40\nGROUP BY s.CustomerID\nHAVING SUM(s.Quantity) = 403",
    "5441": "SELECT DISTINCT c.CustomerID, c.LastName\nFROM Customers c\nJOIN Sales s ON c.CustomerID = s.CustomerID\nWHERE s.Quantity > (SELECT AVG(Quantity) * 0.9 FROM Sales)",
    "5442": "SELECT \n    (COUNT(CASE WHEN p.Price BETWEEN 200 AND 300 THEN 1 END) * 1.0 / COUNT(*)) * 100 AS Percentage\nFROM \n    Sales s\nJOIN \n    Products p ON s.ProductID = p.ProductID\nWHERE \n    s.SalesID BETWEEN 1 AND 200;",
    "5443": "SELECT Name \nFROM Products \nWHERE Price = (SELECT MAX(Price) FROM Products);",
    "5444": "SELECT COUNT(*) AS NumberOfMadisons\nFROM Customers\nWHERE FirstName = 'Madison'",
    "5445": "SELECT COUNT(*) AS NumberOfHLTouringFrames\nFROM Products\nWHERE Name LIKE '%HL Touring Frame%'",
    "5446": "SELECT MAX(Count) AS NumberOfCustomersWithMostCommonLastName\nFROM (\n    SELECT LastName, COUNT(LastName) AS Count\n    FROM Customers\n    GROUP BY LastName\n)",
    "5447": "SELECT COUNT(*) FROM Products WHERE Price = 0;",
    "5448": "SELECT \n    E.FirstName || ' ' || COALESCE(E.MiddleInitial || ' ', '') || E.LastName AS SalesPersonName,\n    COUNT(S.SalesID) AS NumberOfSales\nFROM \n    Sales S\nJOIN \n    Employees E ON S.SalesPersonID = E.EmployeeID\nGROUP BY \n    S.SalesPersonID\nORDER BY \n    NumberOfSales DESC\nLIMIT 1",
    "5449": "SELECT \n    C.FirstName || ' ' || IFNULL(C.MiddleInitial || ' ', '') || C.LastName AS FullName\nFROM \n    Sales S\nJOIN \n    Customers C ON S.CustomerID = C.CustomerID\nJOIN \n    Products P ON S.ProductID = P.ProductID\nORDER BY \n    S.Quantity * P.Price DESC\nLIMIT 1",
    "5450": "SELECT SUM(Quantity) AS TotalSold\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Mountain-500 Black 42'",
    "5451": "SELECT SUM(s.Quantity * p.Price) AS TotalSalesAmount\nFROM Sales s\nJOIN Employees e ON s.SalesPersonID = e.EmployeeID\nJOIN Products p ON s.ProductID = p.ProductID\nWHERE e.FirstName = 'Heather' AND e.LastName = 'McBadden'",
    "5452": "SELECT SUM(S.Quantity) AS TotalSold\nFROM Sales S\nJOIN Employees E ON S.SalesPersonID = E.EmployeeID\nJOIN Products P ON S.ProductID = P.ProductID\nWHERE E.FirstName = 'Stearns' AND E.LastName = 'MacFeather'\nAND P.Name = 'Mountain-100 Silver, 38'",
    "5453": "SELECT COUNT(DISTINCT ProductID) AS NumberOfProductTypes\nFROM Sales\nJOIN Customers ON Sales.CustomerID = Customers.CustomerID\nWHERE FirstName = 'Dalton' AND MiddleInitial = 'M' AND LastName = 'Coleman'",
    "5454": "SELECT \n    e.FirstName || ' ' || COALESCE(e.MiddleInitial || ' ', '') || e.LastName AS FullName,\n    COUNT(s.SalesID) AS TotalSales\nFROM \n    Employees e\nJOIN \n    Sales s ON e.EmployeeID = s.SalesPersonID\nGROUP BY \n    e.EmployeeID\nORDER BY \n    TotalSales DESC\nLIMIT 3",
    "5455": "SELECT \n    Products.Name,\n    SUM(Sales.Quantity) AS TotalQuantity\nFROM \n    Sales\nJOIN \n    Products ON Sales.ProductID = Products.ProductID\nWHERE \n    Products.Name LIKE 'Mountain-500 Black%'\nGROUP BY \n    Products.Name\nORDER BY \n    TotalQuantity DESC\nLIMIT 1",
    "5456": "SELECT COUNT(DISTINCT Sales.SalesPersonID) AS NumberOfEmployees\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'ML Road Frame-W - Yellow, 40'",
    "5457": "SELECT Quantity FROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Sales.SalesID = 551971 AND Products.Name = 'Chainring Bolts'",
    "5458": "SELECT COUNT(DISTINCT Sales.SalesPersonID) AS NumberOfEmployees\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nWHERE Products.Name = 'Touring-2000 Blue, 50' AND Sales.Quantity > 20000",
    "5459": "SELECT SUM(s.Quantity * p.Price) AS TotalCost\nFROM Sales s\nJOIN Employees e ON s.SalesPersonID = e.EmployeeID\nJOIN Products p ON s.ProductID = p.ProductID\nWHERE e.FirstName = 'Abraham' AND e.MiddleInitial = 'E' AND e.LastName = 'Bennet'\nAND p.Name = 'Road-650, Red, 60'",
    "5460": "SELECT \n    Products.ProductID, \n    Products.Name, \n    SUM(Sales.Quantity) AS TotalQuantitySold,\n    SUM(Sales.Quantity * Products.Price) AS OverallTotalPrice\nFROM \n    Sales\nJOIN \n    Products ON Sales.ProductID = Products.ProductID\nGROUP BY \n    Products.ProductID\nORDER BY \n    TotalQuantitySold DESC\nLIMIT 1;",
    "5461": "SELECT FirstName FROM Customers WHERE LastName = 'Chen'",
    "5462": "SELECT MiddleInitial\nFROM Employees\nGROUP BY MiddleInitial\nORDER BY COUNT(MiddleInitial) DESC\nLIMIT 1",
    "5463": "SELECT AVG(Price) AS AveragePrice\nFROM Products\nWHERE Price BETWEEN 100 AND 200;",
    "5464": "SELECT c.FirstName || ' ' || COALESCE(c.MiddleInitial || ' ', '') || c.LastName AS FullName\nFROM Customers c\nJOIN Sales s ON c.CustomerID = s.CustomerID\nWHERE s.Quantity > (SELECT AVG(Quantity) FROM Sales)\nGROUP BY c.CustomerID",
    "5465": "SELECT \n    c.FirstName || ' ' || IFNULL(c.MiddleInitial || ' ', '') || c.LastName AS FullName\nFROM \n    Customers c\nJOIN \n    Sales s ON c.CustomerID = s.CustomerID\nJOIN \n    Products p ON s.ProductID = p.ProductID\nGROUP BY \n    c.CustomerID\nORDER BY \n    SUM(s.Quantity * p.Price) DESC\nLIMIT 1",
    "5466": "SELECT \n    e.FirstName, \n    e.MiddleInitial, \n    e.LastName, \n    SUM(s.Quantity * p.Price) AS TotalSales\nFROM \n    Sales s\nJOIN \n    Employees e ON s.SalesPersonID = e.EmployeeID\nJOIN \n    Products p ON s.ProductID = p.ProductID\nWHERE \n    p.Name = 'Blade'\nGROUP BY \n    s.SalesPersonID\nORDER BY \n    TotalSales DESC\nLIMIT 1",
    "5467": "SELECT \n    c.FirstName || ' ' || COALESCE(c.MiddleInitial || ' ', '') || c.LastName AS FullName,\n    SUM(s.Quantity * p.Price) AS TotalSpent\nFROM \n    Customers c\nJOIN \n    Sales s ON c.CustomerID = s.CustomerID\nJOIN \n    Products p ON s.ProductID = p.ProductID\nGROUP BY \n    c.CustomerID\nHAVING \n    TotalSpent > 50000\nORDER BY \n    TotalSpent DESC",
    "5468": "SELECT Products.Name\nFROM Sales\nJOIN Products ON Sales.ProductID = Products.ProductID\nGROUP BY Sales.ProductID\nORDER BY SUM(Sales.Quantity) DESC\nLIMIT 1",
    "5469": "SELECT p.ProductID, p.Name\nFROM Products p\nJOIN Sales s ON p.ProductID = s.ProductID\nGROUP BY p.ProductID, p.Name\nHAVING AVG(s.Quantity) < (SELECT AVG(Quantity) FROM Sales)",
    "5470": "SELECT COUNT(*) \nFROM Dish \nWHERE first_appeared < 1851 OR first_appeared > 2012;",
    "5471": "SELECT \n    CASE \n        WHEN (SELECT last_appeared - first_appeared FROM Dish WHERE name = 'Anchovies') > \n             (SELECT last_appeared - first_appeared FROM Dish WHERE name = 'Fresh lobsters in every style')\n        THEN 'Anchovies'\n        ELSE 'Fresh lobsters in every style'\n    END AS dish_lasted_longer",
    "5472": "SELECT name \nFROM Dish \nWHERE lowest_price = 0 \nORDER BY menus_appeared DESC \nLIMIT 1",
    "5473": "SELECT COUNT(*) \nFROM Menu \nWHERE name = \"Waldorf Astoria\" AND page_count = 4;",
    "5474": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nWHERE MenuItem.menu_page_id = 1389 AND MenuItem.xpos < 0.25 AND MenuItem.ypos < 0.25",
    "5475": "SELECT MenuItem.price, MenuItem.high_price\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Clear green turtle'",
    "5476": "SELECT COUNT(DISTINCT mp.id) AS StablePriceMenuPages\nFROM MenuPage mp\nJOIN MenuItem mi ON mp.id = mi.menu_page_id\nJOIN Dish d ON mi.dish_id = d.id\nWHERE d.name = 'Clear green turtle' AND mi.high_price IS NULL",
    "5477": "SELECT MAX(MenuItem.high_price) AS highest_price\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Clear green turtle'",
    "5478": "SELECT DISTINCT Menu.id\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nJOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Clear green turtle'",
    "5479": "SELECT COUNT(DISTINCT Menu.id) AS menus_with_dollar_currency\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nJOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Clear green turtle' AND Menu.currency = 'Dollars'",
    "5480": "SELECT COUNT(DISTINCT Menu.id) AS menus_without_takeout_or_booking\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nJOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Clear green turtle' AND Menu.call_number IS NULL;",
    "5481": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.name = 'Zentral Theater Terrace'",
    "5482": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.name = 'Zentral Theater Terrace'\nORDER BY MenuItem.price DESC\nLIMIT 1",
    "5483": "SELECT COUNT(DISTINCT MenuItem.dish_id) AS NumberOfDishes\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.name = 'Zentral Theater Terrace'",
    "5484": "SELECT COUNT(DISTINCT MenuItem.dish_id) AS total_dishes\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.name = \"Waldorf Astoria\"",
    "5485": "SELECT DISTINCT Menu.id\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nJOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Menu.sponsor IS NULL AND Dish.name = 'Clear green turtle'",
    "5486": "SELECT AVG(mp.page_number) AS average_page_number\nFROM MenuPage AS mp\nJOIN MenuItem AS mi ON mp.id = mi.menu_page_id\nJOIN Dish AS d ON mi.dish_id = d.id\nWHERE d.name = 'Clear green turtle'",
    "5487": "SELECT AVG(MenuItem.price) AS average_price\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.name = 'Zentral Theater Terrace'",
    "5488": "SELECT COUNT(*) FROM MenuItem WHERE created_at LIKE '2011-03-28%';",
    "5489": "SELECT COUNT(DISTINCT MenuItem.dish_id) AS dishes_included\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuPage.id = 144;",
    "5490": "SELECT COUNT(*) AS menus_used_in_dutcher_house\nFROM Menu\nWHERE location = 'Dutcher House';",
    "5491": "SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared;",
    "5492": "SELECT COUNT(*) AS steamship_menus_count\nFROM Menu\nWHERE venue = 'STEAMSHIP';",
    "5493": "SELECT COUNT(MenuPage.id) AS page_count\nFROM MenuPage\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.date = '1898-11-17';",
    "5494": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuPage.id = 174",
    "5495": "SELECT Dish.name, MenuItem.menu_page_id\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nWHERE Dish.first_appeared = 1861;",
    "5496": "SELECT Dish.name, MAX(MenuItem.price) AS highest_price\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE MenuItem.menu_page_id = 7610 AND MenuItem.created_at LIKE '2011-05-23%'\nGROUP BY Dish.name",
    "5497": "SELECT Dish.id, Dish.name, Dish.description, Dish.menus_appeared, Dish.times_appeared, Dish.first_appeared, Dish.last_appeared, Dish.lowest_price, Dish.highest_price\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuPage.page_number = 30 AND MenuPage.full_height = (\n    SELECT MIN(full_height)\n    FROM MenuPage\n    WHERE page_number = 30\n)",
    "5498": "SELECT \n    MenuPage.page_number AS page_IDs, \n    Menu.name \nFROM \n    Menu \nJOIN \n    MenuPage ON Menu.id = MenuPage.menu_id \nWHERE \n    Menu.page_count = (SELECT MAX(page_count) FROM Menu)",
    "5499": "SELECT COUNT(MenuItem.id) AS dishes_on_second_page\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE MenuPage.page_number = 2 AND Menu.id = (\n    SELECT id FROM Menu ORDER BY dish_count DESC LIMIT 1\n)",
    "5500": "SELECT MenuItem.id, MenuItem.xpos, MenuItem.ypos\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Fresh lobsters in every style'",
    "5501": "SELECT DISTINCT Dish.id, Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE xpos < 0.25 AND ypos < 0.25\nAND Menu.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM'",
    "5502": "SELECT Menu.sponsor, Menu.event\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nJOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Cerealine with Milk'",
    "5503": "SELECT \n    (CAST(SUM(CASE WHEN xpos BETWEEN 0.25 AND 0.75 AND ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percent_center\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name LIKE '%Bluefish%'",
    "5504": "SELECT sponsor FROM Menu WHERE id = 12463;",
    "5505": "SELECT DISTINCT event\nFROM Menu\nWHERE sponsor = 'REPUBLICAN HOUSE';",
    "5506": "SELECT place FROM Menu WHERE id = 12472;",
    "5507": "SELECT physical_description\nFROM Menu\nWHERE sponsor = 'Noviomagus';",
    "5508": "SELECT occasion FROM Menu WHERE id = 12463;",
    "5509": "SELECT DISTINCT location\nFROM Menu\nWHERE sponsor = 'Norddeutscher Lloyd Bremen';",
    "5510": "SELECT MenuPage.id\nFROM MenuPage\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.sponsor = 'Occidental & Oriental'",
    "5511": "SELECT DISTINCT MenuPage.image_id\nFROM MenuPage\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.location = 'Manhattan Hotel';",
    "5512": "SELECT mp.full_height, mp.full_width\nFROM MenuPage mp\nJOIN Menu m ON mp.menu_id = m.id\nWHERE m.name = 'El Fuerte Del Palmar'",
    "5513": "SELECT EXISTS(\n    SELECT 1 \n    FROM MenuPage \n    JOIN Menu ON MenuPage.menu_id = Menu.id \n    WHERE Menu.name = 'The Biltmore' \n    AND MenuPage.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa'\n) AS IsUUIDForTheBiltmore;",
    "5514": "SELECT Menu.name\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nWHERE MenuPage.full_height = (SELECT MAX(full_height) FROM MenuPage)",
    "5515": "SELECT Menu.page_count\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nWHERE MenuPage.id = 130",
    "5516": "SELECT \n    MenuItem.price\nFROM \n    MenuItem\nJOIN \n    MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE \n    MenuPage.image_id = 4000009194;",
    "5517": "SELECT DISTINCT MenuPage.page_number\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuItem.xpos > 0.75 AND MenuItem.ypos < 0.25",
    "5518": "SELECT DISTINCT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE SUBSTR(MenuItem.created_at, 6, 2) = '04';",
    "5519": "SELECT Dish.name \nFROM Dish \nJOIN MenuItem ON Dish.id = MenuItem.dish_id \nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id \nWHERE MenuPage.id = 1389;",
    "5520": "SELECT MAX(price) AS highest_price\nFROM MenuItem\nWHERE id BETWEEN 1 AND 5",
    "5521": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nWHERE MenuItem.xpos < 0.25 AND MenuItem.ypos < 0.25;",
    "5522": "SELECT \n    SUM(m.dish_count) AS total_dish_count,\n    mp.uuid\nFROM \n    MenuPage AS mp\nJOIN \n    Menu AS m ON mp.menu_id = m.id\nWHERE \n    mp.uuid IN ('510d47e4-2958-a3d9-e040-e00a18064a99', '510d47e4-295a-a3d9-e040-e00a18064a99')\nGROUP BY \n    mp.uuid",
    "5523": "SELECT SUM(MenuItem.price) AS total_price\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.id = 12882",
    "5524": "SELECT name, highest_price\nFROM Dish\nORDER BY highest_price DESC\nLIMIT 5",
    "5525": "SELECT COUNT(*) AS free_dishes\nFROM Dish\nWHERE lowest_price = 0;",
    "5526": "SELECT name, description\nFROM Dish\nWHERE first_appeared = 1855 AND last_appeared = 1900;",
    "5527": "SELECT * FROM Menu\nORDER BY dish_count DESC\nLIMIT 10",
    "5528": "SELECT COUNT(DISTINCT MenuItem.dish_id) AS dishes_in_right_upper_corner\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuItem.xpos > 0.75 AND MenuItem.ypos < 0.25;",
    "5529": "SELECT \n    (last_appeared - first_appeared) AS appearance_duration,\n    MAX(updated_at) AS latest_update\nFROM Dish\nWHERE name = 'Clear Green Turtle'",
    "5530": "SELECT COUNT(*) AS Dishes_Appeared_Over_100_Years\nFROM Dish\nWHERE (last_appeared - first_appeared) > 100;",
    "5531": "SELECT COUNT(*) \nFROM Dish \nWHERE (last_appeared - first_appeared) < 5;",
    "5532": "SELECT Dish.name, MenuItem.price\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nWHERE Dish.lowest_price = 0;",
    "5533": "SELECT MenuItem.price\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuPage.menu_id = 12474 AND MenuPage.page_number = 2",
    "5534": "SELECT COUNT(*) FROM Dish\nWHERE id IN (\n    SELECT DISTINCT dish_id FROM MenuItem\n    WHERE created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC'\n)",
    "5535": "SELECT DISTINCT Menu.sponsor\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nWHERE MenuPage.full_height > 10000;",
    "5536": "SELECT mp.image_id, mp.full_height, mp.full_width\nFROM MenuPage mp\nJOIN Menu m ON mp.menu_id = m.id\nWHERE m.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER'",
    "5537": "SELECT DISTINCT Menu.event\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nWHERE MenuPage.full_width < 2000",
    "5538": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nWHERE MenuItem.price = 180000;",
    "5539": "SELECT \n    MenuItem.xpos, \n    MenuItem.ypos, \n    (Dish.last_appeared - Dish.first_appeared) AS appearance_duration\nFROM \n    MenuItem\nJOIN \n    MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN \n    Dish ON MenuItem.dish_id = Dish.id\nWHERE \n    Dish.name = 'Small Hominy'",
    "5540": "SELECT \n    MenuPage.page_number,\n    MenuPage.image_id,\n    (MenuPage.full_height * MenuPage.full_width) AS image_area\nFROM \n    Dish\nJOIN \n    MenuItem ON Dish.id = MenuItem.dish_id\nJOIN \n    MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE \n    Dish.name = 'Baked Stuffed Mullet & Sauce Pomard'",
    "5541": "SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared;",
    "5542": "SELECT COUNT(*) \nFROM Menu \nWHERE sponsor = 'Krogs Fiskerestaurant' \nAND date LIKE '2015-04%';",
    "5543": "SELECT name, MAX(last_appeared - first_appeared) AS history_length\nFROM Dish\nWHERE first_appeared IS NOT NULL AND last_appeared IS NOT NULL",
    "5544": "SELECT event FROM Menu WHERE id = 21380;",
    "5545": "SELECT COUNT(MenuPage.id) AS NumberOfPages\nFROM MenuPage\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.name = 'Emil Kuehn'",
    "5546": "SELECT COUNT(DISTINCT Menu.id) AS menus_including_dish\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nJOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'puree of split peas aux croutons'",
    "5547": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nWHERE Dish.highest_price IS NULL\nAND SUBSTR(MenuItem.created_at, 1, 4) = '2011'\nAND SUBSTR(MenuItem.created_at, 6, 2) = '04'\nGROUP BY Dish.name",
    "5548": "SELECT Menu.name\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nGROUP BY Menu.id\nORDER BY COUNT(MenuPage.page_number) DESC\nLIMIT 1",
    "5549": "SELECT MenuItem.menu_page_id\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'mashed potatoes'",
    "5550": "SELECT COUNT(DISTINCT Menu.id) AS menus_with_no_more_than_2_pages\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nGROUP BY Menu.id\nHAVING Menu.sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY' AND COUNT(MenuPage.page_number) <= 2;",
    "5551": "SELECT MenuItem.menu_page_id\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'milk'\nORDER BY MenuItem.price DESC\nLIMIT 1",
    "5552": "SELECT menu_id\nFROM MenuPage\nWHERE menu_id IN (\n    SELECT id\n    FROM Menu\n    WHERE sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'\n)\nGROUP BY menu_id\nORDER BY COUNT(page_number) DESC\nLIMIT 1",
    "5553": "SELECT MenuItem.xpos, MenuItem.ypos\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'breaded veal cutlet with peas'",
    "5554": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuPage.id = 48706 AND MenuItem.xpos > 0.75 AND MenuItem.ypos > 0.75",
    "5555": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nJOIN Menu ON MenuPage.menu_id = Menu.id\nWHERE Menu.sponsor = 'THE SOCIETY OF THE CUMBERLAND'\nAND Menu.event = '19NTH REUNION'\nAND Menu.place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL'",
    "5556": "SELECT m.sponsor\nFROM Menu m\nJOIN MenuPage mp ON m.id = mp.menu_id\nJOIN MenuItem mi ON mp.id = mi.menu_page_id\nJOIN Dish d ON mi.dish_id = d.id\nWHERE d.name = 'baked apples with cream'\nORDER BY mi.price DESC\nLIMIT 1",
    "5557": "WITH SouperDeLuxeMenus AS (\n    SELECT m.id\n    FROM Menu m\n    WHERE m.name = 'Souper de Luxe'\n),\nMenuItemsInSouperDeLuxe AS (\n    SELECT mi.dish_id\n    FROM MenuItem mi\n    JOIN MenuPage mp ON mi.menu_page_id = mp.id\n    JOIN SouperDeLuxeMenus sdm ON mp.menu_id = sdm.id\n),\nDishAppearances AS (\n    SELECT dish_id, COUNT(dish_id) AS appearances\n    FROM MenuItemsInSouperDeLuxe\n    GROUP BY dish_id\n),\nMostAppearedDish AS (\n    SELECT dish_id\n    FROM DishAppearances\n    ORDER BY appearances DESC\n    LIMIT 1\n),\nAverageDishesPerMenu AS (\n    SELECT AVG(dish_count) AS average_dishes\n    FROM Menu\n    WHERE name = 'Souper de Luxe'\n)\nSELECT d.name AS Most_Appeared_Dish_Name, adpm.average_dishes AS Average_Dishes_Per_Menu\nFROM MostAppearedDish mad\nJOIN Dish d ON mad.dish_id = d.id,\nAverageDishesPerMenu adpm",
    "5558": "SELECT id FROM Menu WHERE sponsor IS NULL;",
    "5559": "SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH';",
    "5560": "SELECT COUNT(*) \nFROM Menu \nWHERE page_count > 10 AND dish_count > 20;",
    "5561": "SELECT id\nFROM Menu\nORDER BY dish_count DESC\nLIMIT 1",
    "5562": "SELECT COUNT(DISTINCT MenuItem.dish_id) AS NumberOfDishes\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nJOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id\nWHERE Menu.name = 'Zentral Theater Terrace'",
    "5563": "SELECT COUNT(*) \nFROM Menu \nWHERE call_number IS NULL \nAND strftime('%Y', date) < '1950';",
    "5564": "SELECT mp.image_id\nFROM MenuPage AS mp\nJOIN Menu AS m ON mp.menu_id = m.id\nWHERE m.name = 'Zentral Theater Terrace' AND mp.page_number = 1",
    "5565": "SELECT Menu.name\nFROM Menu\nJOIN MenuPage ON Menu.id = MenuPage.menu_id\nWHERE MenuPage.image_id = 5189412;",
    "5566": "SELECT \n    CASE \n        WHEN SUM(CASE WHEN m.name = 'Zentral Theater Terrace' THEN mp.full_width ELSE 0 END) > SUM(CASE WHEN m.name = 'Young''s Hotel' THEN mp.full_width ELSE 0 END) THEN 'Zentral Theater Terrace'\n        WHEN SUM(CASE WHEN m.name = 'Zentral Theater Terrace' THEN mp.full_width ELSE 0 END) < SUM(CASE WHEN m.name = 'Young''s Hotel' THEN mp.full_width ELSE 0 END) THEN 'Young''s Hotel'\n        ELSE 'Equal'\n    END AS BiggerWidthMenu\nFROM MenuPage mp\nJOIN Menu m ON mp.menu_id = m.id\nWHERE mp.page_number = 1 AND (m.name = 'Zentral Theater Terrace' OR m.name = 'Young''s Hotel')",
    "5567": "SELECT \n    MenuPage.id, MenuPage.full_height\nFROM \n    MenuPage\nJOIN \n    Menu ON MenuPage.menu_id = Menu.id\nWHERE \n    Menu.name = 'Ritz Carlton'\nORDER BY \n    MenuPage.full_height DESC\nLIMIT 1;",
    "5568": "SELECT COUNT(*) \nFROM MenuPage \nJOIN Menu ON MenuPage.menu_id = Menu.id \nWHERE Menu.name = 'Ritz Carlton' AND MenuPage.full_width > 1000;",
    "5569": "SELECT COUNT(DISTINCT MenuItem.dish_id) AS dishes_on_page_1\nFROM MenuItem\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuPage.menu_id = 12882 AND MenuPage.page_number = 1;",
    "5570": "SELECT Dish.name\nFROM Dish\nJOIN MenuItem ON Dish.id = MenuItem.dish_id\nJOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id\nWHERE MenuPage.menu_id = 12882 AND MenuPage.page_number = 1",
    "5571": "SELECT DISTINCT mp.page_number\nFROM MenuItem mi\nJOIN MenuPage mp ON mi.menu_page_id = mp.id\nJOIN Dish d ON mi.dish_id = d.id\nWHERE d.name = 'Chicken gumbo'",
    "5572": "SELECT mp.menu_id\nFROM MenuItem mi\nJOIN Dish d ON mi.dish_id = d.id\nJOIN MenuPage mp ON mi.menu_page_id = mp.id\nWHERE d.name = 'Chicken gumbo'\nORDER BY mp.full_width DESC\nLIMIT 1",
    "5573": "SELECT SUM(times_appeared) AS total_times_appeared\nFROM Dish\nWHERE name = 'Chicken gumbo'",
    "5574": "SELECT COUNT(DISTINCT mp.id) AS Stable_Price_Menu_Pages\nFROM MenuPage mp\nJOIN MenuItem mi ON mp.id = mi.menu_page_id\nJOIN Dish d ON mi.dish_id = d.id\nWHERE d.name = 'Paysanne Soup' AND mi.high_price IS NULL",
    "5575": "SELECT MAX(MenuItem.price) AS highest_price\nFROM MenuItem\nJOIN Dish ON MenuItem.dish_id = Dish.id\nWHERE Dish.name = 'Chicken gumbo'",
    "5576": "SELECT \n    MenuPage.full_height * MenuPage.full_width AS space\nFROM \n    MenuPage\nJOIN \n    Menu ON MenuPage.menu_id = Menu.id\nWHERE \n    Menu.name = 'Zentral Theater Terrace' AND MenuPage.page_number = 1",
    "5577": "SELECT AVG(dish_count_per_page) AS avg_dishes_per_page\nFROM (\n    SELECT COUNT(DISTINCT mi.dish_id) AS dish_count_per_page\n    FROM MenuItem mi\n    JOIN MenuPage mp ON mi.menu_page_id = mp.id\n    WHERE mp.menu_id = 12882\n    GROUP BY mi.menu_page_id\n)",
    "5578": "SELECT COUNT(*) AS shipments_ordered\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.cust_name = 'S K L Enterprises Inc' AND strftime('%Y', ship_date) = '2017'",
    "5579": "SELECT SUM(weight) AS total_pounds\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.cust_name = 'S K L Enterprises Inc'",
    "5580": "SELECT COUNT(*) \nFROM shipment \nJOIN customer ON shipment.cust_id = customer.cust_id \nJOIN driver ON shipment.driver_id = driver.driver_id \nWHERE customer.cust_name = 'S K L Enterprises Inc' \nAND driver.first_name = 'Sue' \nAND driver.last_name = 'Newell'",
    "5581": "SELECT COUNT(*) AS shipments_in_florida\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.state = 'FL'",
    "5582": "SELECT shipment.ship_id\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.cust_type = 'retailer'",
    "5583": "SELECT COUNT(DISTINCT customer.cust_id) AS high_revenue_customers\nFROM customer\nJOIN shipment ON customer.cust_id = shipment.cust_id\nWHERE customer.annual_revenue > 30000000\nAND strftime('%Y', shipment.ship_date) = '2017'",
    "5584": "SELECT COUNT(*) AS shipments_in_2017\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nWHERE driver.first_name = 'Sue' AND driver.last_name = 'Newell' AND strftime('%Y', ship_date) = '2017'",
    "5585": "SELECT d.first_name || ' ' || d.last_name AS full_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE strftime('%Y', s.ship_date) = '2017'\nGROUP BY d.driver_id\nORDER BY COUNT(s.ship_id) DESC\nLIMIT 1",
    "5586": "SELECT COUNT(*) AS shipments_to_new_jersey\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE city.state = 'New Jersey' AND strftime('%Y', ship_date) = '2017'",
    "5587": "SELECT MAX(weight) AS max_weight\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE city_name = 'New York'",
    "5588": "SELECT \n    (SELECT SUM(weight) FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city_name = 'New York') -\n    (SELECT SUM(weight) FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city_name = 'Chicago') AS difference_in_pounds",
    "5589": "SELECT city.city_name\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nJOIN city ON shipment.city_id = city.city_id\nWHERE customer.cust_name = 'S K L Enterprises Inc'\nORDER BY city.city_name;",
    "5590": "SELECT AVG(weight) AS average_weight\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.cust_name = 'S K L Enterprises Inc'",
    "5591": "SELECT \n    (SELECT COUNT(*) \n     FROM shipment s\n     JOIN city c ON s.city_id = c.city_id\n     WHERE c.state = 'Florida' AND c.city_name = 'Jacksonville') * 100.0 / \n    (SELECT COUNT(*) \n     FROM shipment s\n     JOIN city c ON s.city_id = c.city_id\n     WHERE c.state = 'Florida') AS percentage_shipment_to_jacksonville",
    "5592": "SELECT \n    CASE \n        WHEN make = 'Peterbit' THEN 'Texas (TX)'\n        WHEN make = 'Mack' THEN 'North Carolina (NC)'\n        WHEN make = 'Kenworth' THEN 'Washington (WA)'\n    END AS headquarter\nFROM truck\nJOIN shipment ON truck.truck_id = shipment.truck_id\nWHERE ship_id = 1045",
    "5593": "SELECT COUNT(*) AS shipments_by_oldest_truck\nFROM shipment\nWHERE truck_id IN (\n    SELECT truck_id\n    FROM truck\n    WHERE model_year = (\n        SELECT MIN(model_year)\n        FROM truck\n    )\n)",
    "5594": "SELECT cust_name\nFROM customer\nJOIN shipment ON customer.cust_id = shipment.cust_id\nWHERE ship_id = 1275",
    "5595": "SELECT city_name\nFROM city\nJOIN shipment ON city.city_id = shipment.city_id\nWHERE ship_id = 1701",
    "5596": "SELECT d.first_name, d.last_name\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nWHERE s.ship_id = 1021",
    "5597": "SELECT d.first_name, d.last_name\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nWHERE s.ship_date = '2017-11-05'",
    "5598": "SELECT city.population\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE shipment.ship_id = 1398",
    "5599": "SELECT MIN(ship_date) AS first_shipment_date\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.state = 'SC'",
    "5600": "SELECT weight\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nWHERE driver.first_name = 'Leszek' AND driver.last_name = 'Kieltyka' AND ship_date = '2017-09-25'",
    "5601": "SELECT area FROM city\nJOIN shipment ON city.city_id = shipment.city_id\nWHERE ship_id = 1346",
    "5602": "SELECT shipment.weight\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.cust_name = 'U-haul Center Of N Syracuse' AND shipment.ship_date = '2016/09/21'",
    "5603": "SELECT d.first_name || ' ' || d.last_name AS full_name\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nWHERE s.truck_id = 3 AND s.ship_date = '2016-09-19'",
    "5604": "SELECT \n    city.population / city.area AS population_density\nFROM \n    shipment\nJOIN \n    city ON shipment.city_id = city.city_id\nWHERE \n    shipment.ship_id = 1369",
    "5605": "SELECT AVG(shipment_count) AS average_shipments_per_kenworth_truck\nFROM (\n    SELECT t.truck_id, COUNT(s.ship_id) AS shipment_count\n    FROM truck t\n    LEFT JOIN shipment s ON t.truck_id = s.truck_id\n    WHERE t.make = 'Kenworth'\n    GROUP BY t.truck_id\n)",
    "5606": "SELECT s.weight\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nWHERE d.first_name = 'Sue' AND d.last_name = 'Newell'\nORDER BY s.ship_date\nLIMIT 1",
    "5607": "SELECT c.cust_name\nFROM shipment s\nJOIN customer c ON s.cust_id = c.cust_id\nORDER BY s.weight DESC\nLIMIT 1",
    "5608": "SELECT d.first_name || ' ' || d.last_name AS full_name\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nORDER BY s.ship_date\nLIMIT 1",
    "5609": "SELECT COUNT(*) AS total_shipments\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.cust_name = 'Olympic Camper Sales Inc'",
    "5610": "SELECT COUNT(*) AS shipments_to_harry_new_york\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE city.city_name = 'New York' AND customer.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories'",
    "5611": "SELECT COUNT(*) AS Mack_Shipments\nFROM (\n    SELECT s.ship_id\n    FROM shipment s\n    JOIN truck t ON s.truck_id = t.truck_id\n    WHERE t.make = 'Mack'\n    ORDER BY s.weight DESC\n    LIMIT 5\n)",
    "5612": "SELECT d.first_name || ' ' || d.last_name AS fullname\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nJOIN city c ON s.city_id = c.city_id\nWHERE c.population = (SELECT MIN(population) FROM city)\nGROUP BY d.driver_id\nORDER BY COUNT(s.ship_id) DESC\nLIMIT 1",
    "5613": "SELECT COUNT(*) \nFROM shipment \nWHERE weight <= 1000 \nAND truck_id = (\n    SELECT truck_id \n    FROM truck \n    ORDER BY model_year ASC \n    LIMIT 1\n)",
    "5614": "SELECT c.annual_revenue\nFROM customer c\nJOIN (\n    SELECT cust_id, COUNT(ship_id) AS total_shipments\n    FROM shipment\n    GROUP BY cust_id\n    ORDER BY total_shipments DESC\n    LIMIT 1\n) AS most_shipments ON c.cust_id = most_shipments.cust_id",
    "5615": "SELECT COUNT(*) AS shipments_to_downey_ca_2016\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE city.city_name = 'Downey'\nAND city.state = 'California'\nAND strftime('%Y', ship_date) = '2016'",
    "5616": "SELECT COUNT(*) AS shipments_to_north_las_vegas\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nJOIN city ON shipment.city_id = city.city_id\nWHERE city.city_name = 'North Las Vegas' AND (driver.first_name = 'Holger' AND driver.last_name = 'Nohr')",
    "5617": "SELECT COUNT(*) AS shipments_to_most_densely_populated_city\nFROM shipment\nWHERE city_id = (\n    SELECT city_id\n    FROM city\n    ORDER BY population / area DESC\n    LIMIT 1\n)",
    "5618": "SELECT \n    (SELECT COUNT(*) FROM customer WHERE state = 'TX' AND cust_type = 'manufacturer') * 100.0 / \n    (SELECT COUNT(*) FROM customer) AS percentage_of_manufacturers_from_texas",
    "5619": "SELECT SUM(weight) AS total_weight\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE city.city_name = 'San Mateo' AND city.state = 'California' AND strftime('%Y', ship_date) = '2016'",
    "5620": "SELECT SUM(s.weight) AS total_weight\nFROM shipment s\nJOIN truck t ON s.truck_id = t.truck_id\nWHERE t.make = 'Peterbilt'\nAND CAST(s.ship_date AS DATE) BETWEEN '2016-01-01' AND '2016-12-31'\nAND t.model_year = (SELECT MAX(model_year) FROM truck WHERE make = 'Peterbilt')",
    "5621": "SELECT MAX(shipment.weight) AS max_weight, customer.cust_name\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE city.city_name = 'Boston'",
    "5622": "SELECT city.city_name\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE shipment.ship_id = 1002",
    "5623": "SELECT AVG(s.weight) AS average_shipment_weight\nFROM shipment s\nJOIN truck t ON s.truck_id = t.truck_id\nWHERE t.make = 'Mack' AND t.model_year = (SELECT MIN(model_year) FROM truck WHERE make = 'Mack')",
    "5624": "SELECT d.first_name || ' ' || d.last_name AS full_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nJOIN city c ON s.city_id = c.city_id\nWHERE c.city_name = 'New York' AND s.ship_date LIKE '2016-02%'",
    "5625": "SELECT c.cust_name\nFROM customer c\nJOIN shipment s ON c.cust_id = s.cust_id\nJOIN city ci ON s.city_id = ci.city_id\nWHERE ci.city_name = 'Oak Park'",
    "5626": "SELECT COUNT(s.ship_id) AS number_of_shipments\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nJOIN city c ON s.city_id = c.city_id\nWHERE d.first_name = 'Andrea' AND d.last_name = 'Simons'\nAND c.city_name = 'Huntsville'\nAND strftime('%Y', s.ship_date) = '2016'",
    "5627": "SELECT driver_id, COUNT(ship_id) / 24.0 AS avg_shipments_per_month\nFROM shipment\nGROUP BY driver_id",
    "5628": "SELECT \n    (SUM(CASE WHEN weight >= 10000 THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 100) AS percentage\nFROM \n    shipment\nJOIN \n    customer ON shipment.cust_id = customer.cust_id\nWHERE \n    customer.cust_name = 'Sunguard Window Tinting & Truck Accessories'\n    AND strftime('%Y', ship_date) = '2017'",
    "5629": "SELECT \n    (SELECT COUNT(*) \n     FROM shipment s\n     JOIN customer c ON s.cust_id = c.cust_id\n     JOIN driver d ON s.driver_id = d.driver_id\n     WHERE c.cust_name = 'Autoware Inc' AND d.first_name = 'Sue' AND d.last_name = 'Newel') * 100.0 /\n    (SELECT COUNT(*) \n     FROM shipment s\n     JOIN driver d ON s.driver_id = d.driver_id\n     WHERE d.first_name = 'Sue' AND d.last_name = 'Newel') AS percentage",
    "5630": "SELECT COUNT(DISTINCT city.city_id) AS cities_with_high_transport\nFROM city\nJOIN shipment ON city.city_id = shipment.city_id\nWHERE city.state = 'New Jersey'\nGROUP BY city.city_id\nHAVING SUM(shipment.weight) > 20000",
    "5631": "SELECT COUNT(DISTINCT city.city_id)\nFROM city\nJOIN shipment ON city.city_id = shipment.city_id\nWHERE city.population > 50000 AND strftime('%Y', shipment.ship_date) = '2017'",
    "5632": "SELECT shipment.weight\nFROM shipment\nJOIN truck ON shipment.truck_id = truck.truck_id\nWHERE truck.make = 'Peterbilt'",
    "5633": "SELECT model_year\nFROM truck\nJOIN shipment ON truck.truck_id = shipment.truck_id\nWHERE ship_id = 1003",
    "5634": "SELECT make AS brand_of_truck\nFROM truck\nJOIN shipment ON truck.truck_id = shipment.truck_id\nWHERE shipment.ship_id = 1011",
    "5635": "SELECT first_name\nFROM driver\nWHERE driver_id = (\n    SELECT driver_id\n    FROM shipment\n    WHERE ship_id = 1028\n)",
    "5636": "SELECT d.state\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE s.ship_id = 1055",
    "5637": "SELECT DISTINCT d.address\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE s.weight > 50000",
    "5638": "SELECT d.first_name || ' ' || d.last_name AS full_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE s.ship_date = '2016-03-02'",
    "5639": "SELECT AVG(c.annual_revenue) AS avg_annual_revenue\nFROM customer c\nJOIN shipment s ON c.cust_id = s.cust_id\nWHERE s.weight < 65000",
    "5640": "SELECT \n    (SELECT CAST(COUNT(DISTINCT s.cust_id) AS FLOAT)\n     FROM shipment s\n     JOIN customer c ON s.cust_id = c.cust_id\n     WHERE c.cust_type = 'wholesaler' AND s.weight <= 70000)\n    /\n    (SELECT CAST(COUNT(DISTINCT cust_id) AS FLOAT)\n     FROM customer\n     WHERE cust_type = 'wholesaler') * 100 AS percentage_wholesaler_under_70000",
    "5641": "SELECT d.last_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE s.ship_id = 1088",
    "5642": "SELECT d.phone\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nGROUP BY d.driver_id\nHAVING SUM(s.weight) > 20000",
    "5643": "SELECT truck.make AS brand, truck.model_year AS model\nFROM shipment\nJOIN truck ON shipment.truck_id = truck.truck_id\nWHERE shipment.ship_id = 1055",
    "5644": "SELECT COUNT(*) AS trucks_manufactured_in_2009\nFROM truck\nWHERE model_year = 2009",
    "5645": "SELECT COUNT(*) AS manufacturer_count\nFROM customer\nWHERE cust_type = 'manufacturer'",
    "5646": "SELECT COUNT(*) \nFROM customer \nWHERE state = 'CA' AND cust_type = 'retailer';",
    "5647": "SELECT COUNT(*) AS cities_in_connecticut FROM city WHERE state = 'Connecticut';",
    "5648": "SELECT city_name\nFROM city\nWHERE state = 'CA'\nORDER BY population DESC\nLIMIT 1",
    "5649": "SELECT annual_revenue\nFROM customer\nWHERE cust_name = 'Klett & Sons Repair'",
    "5650": "SELECT d.first_name, d.last_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE s.weight = (SELECT MIN(weight) FROM shipment)",
    "5651": "SELECT COUNT(*) AS shipments_to_california_2016\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nJOIN city ON shipment.city_id = city.city_id\nWHERE customer.state = 'CA' AND strftime('%Y', ship_date) = '2016'",
    "5652": "SELECT truck.make AS truck_brand\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nJOIN truck ON shipment.truck_id = truck.truck_id\nWHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks'",
    "5653": "SELECT DISTINCT customer.cust_name\nFROM customer\nJOIN shipment ON customer.cust_id = shipment.cust_id\nWHERE shipment.ship_date LIKE '2017-02-%'",
    "5654": "SELECT truck.make AS truck_brand, driver.first_name || ' ' || driver.last_name AS driver_name\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nJOIN truck ON shipment.truck_id = truck.truck_id\nJOIN driver ON shipment.driver_id = driver.driver_id\nWHERE customer.cust_name = 'Klett & Sons Repair'",
    "5655": "SELECT ship_id\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nWHERE first_name = 'Zachery' AND last_name = 'Hicks'\nORDER BY weight DESC\nLIMIT 1",
    "5656": "SELECT COUNT(*) AS shipments_to_new_york_2016\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nJOIN city ON shipment.city_id = city.city_id\nWHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks'\nAND city.city_name = 'New York'\nAND strftime('%Y', ship_date) = '2016'",
    "5657": "SELECT \n    CASE \n        WHEN make = 'Peterbilt' THEN 'Texas (TX)'\n        WHEN make = 'Mack' THEN 'North Carolina (NC)'\n        WHEN make = 'Kenworth' THEN 'Washington (WA)'\n    END AS headquarter,\n    COUNT(ship_id) AS total_shipments\nFROM shipment\nJOIN truck ON shipment.truck_id = truck.truck_id\nWHERE strftime('%Y', ship_date) = '2016'\nGROUP BY headquarter\nORDER BY total_shipments DESC\nLIMIT 1",
    "5658": "SELECT COUNT(*) AS shipments_to_least_populated_city\nFROM shipment\nWHERE city_id = (\n    SELECT city_id\n    FROM city\n    WHERE state = 'California'\n    ORDER BY population ASC\n    LIMIT 1\n)",
    "5659": "SELECT city_name\nFROM city\nJOIN shipment ON city.city_id = shipment.city_id\nORDER BY weight DESC\nLIMIT 1",
    "5660": "SELECT DISTINCT city.city_name\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nJOIN city ON shipment.city_id = city.city_id\nWHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks'",
    "5661": "SELECT AVG(shipment_count) AS average_shipments\nFROM (\n    SELECT strftime('%Y', ship_date) AS year, COUNT(ship_id) AS shipment_count\n    FROM shipment\n    JOIN driver ON shipment.driver_id = driver.driver_id\n    WHERE first_name = 'Zachery' AND last_name = 'Hicks' AND strftime('%Y', ship_date) = '2017'\n    GROUP BY strftime('%Y', ship_date), driver.driver_id\n)",
    "5662": "SELECT \n    (SELECT SUM(weight) \n     FROM shipment \n     JOIN driver ON shipment.driver_id = driver.driver_id \n     JOIN city ON shipment.city_id = city.city_id \n     WHERE first_name = 'Zachery' AND last_name = 'Hicks' AND state = 'California' AND strftime('%Y', ship_date) = '2016') \n    / \n    (SELECT SUM(weight) \n     FROM shipment \n     JOIN city ON shipment.city_id = city.city_id \n     WHERE state = 'California' AND strftime('%Y', ship_date) = '2016') \n    * 100 AS percentage_weight",
    "5663": "SELECT COUNT(*) AS shipments_by_zachary_hicks\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nWHERE driver.first_name = 'Zachary' AND driver.last_name = 'Hicks'",
    "5664": "SELECT shipment.ship_id\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE city.area = (SELECT MAX(area) FROM city)",
    "5665": "SELECT d.first_name, d.last_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nJOIN city c ON s.city_id = c.city_id\nWHERE c.city_id = (\n    SELECT city_id\n    FROM city\n    ORDER BY population ASC\n    LIMIT 1\n)",
    "5666": "SELECT COUNT(*) AS shipments_count\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE city.city_name = 'Cicero'\nAND city.state = 'Illinois'\nAND shipment.weight BETWEEN 9000 AND 15000;",
    "5667": "SELECT model_year\nFROM truck\nJOIN shipment ON truck.truck_id = shipment.truck_id\nWHERE ship_id = 1233",
    "5668": "SELECT d.address\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nJOIN customer c ON s.cust_id = c.cust_id\nWHERE c.address = '7052 Carroll Road' AND c.city = 'San Diego' AND c.state = 'California'",
    "5669": "SELECT COUNT(*) AS shipments_in_2017\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nWHERE first_name = 'Maria' AND last_name = 'Craft' AND strftime('%Y', ship_date) = '2017'",
    "5670": "SELECT model_year FROM truck WHERE truck_id = (SELECT truck_id FROM shipment WHERE ship_id = 1245)",
    "5671": "SELECT d.address\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nWHERE s.ship_id = 1127",
    "5672": "SELECT annual_revenue\nFROM customer\nJOIN shipment ON customer.cust_id = shipment.cust_id\nWHERE ship_id = 1047",
    "5673": "SELECT shipment.weight\nFROM shipment\nJOIN driver ON shipment.driver_id = driver.driver_id\nWHERE driver.first_name = 'Andrea' AND driver.last_name = 'Simons' AND shipment.ship_date = '2016-03-07'",
    "5674": "SELECT city.city_name\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE ship_date = '2017-01-16'",
    "5675": "SELECT COUNT(*) AS shipments_to_ny_customers\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.state = 'NY'",
    "5676": "SELECT cust_name\nFROM customer\nJOIN shipment ON customer.cust_id = shipment.cust_id\nWHERE ship_id = 1147",
    "5677": "SELECT shipment.ship_id\nFROM shipment\nJOIN city ON shipment.city_id = city.city_id\nWHERE city.population = (SELECT MAX(population) FROM city)",
    "5678": "SELECT d.first_name, d.last_name\nFROM shipment s\nJOIN driver d ON s.driver_id = d.driver_id\nWHERE s.ship_date = '2016-02-22'",
    "5679": "SELECT shipment.weight\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE customer.annual_revenue = 39448581",
    "5680": "SELECT customer.address\nFROM shipment\nJOIN customer ON shipment.cust_id = customer.cust_id\nWHERE shipment.ship_id = 1117",
    "5681": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM shipment\n     JOIN customer ON shipment.cust_id = customer.cust_id\n     WHERE customer.state = 'TX' AND strftime('%Y', ship_date) = '2017') /\n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM shipment\n     JOIN customer ON shipment.cust_id = customer.cust_id\n     WHERE customer.state = 'TX') * 100 AS percentage_shipped_in_2017",
    "5682": "SELECT \n    (SELECT COUNT(*) FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.model_year = 2005) - \n    (SELECT COUNT(*) FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.model_year = 2006) AS difference",
    "5683": "SELECT d.first_name, d.last_name\nFROM driver d\nJOIN shipment s ON d.driver_id = s.driver_id\nWHERE s.weight > (SELECT AVG(weight) * 0.95 FROM shipment)",
    "5684": "SELECT title, words FROM pages\nJOIN langs ON pages.lid = langs.lid\nWHERE lang = 'Catalan'\nORDER BY LENGTH(title) DESC, words DESC\nLIMIT 1",
    "5685": "SELECT p.title \nFROM pages p\nJOIN langs l ON p.lid = l.lid\nWHERE l.lang = 'Catalan' AND p.words < 10",
    "5686": "SELECT pages.page\nFROM pages\nJOIN langs ON pages.lid = langs.lid\nWHERE langs.lang = 'Catalan' AND pages.title LIKE '% Art %';",
    "5687": "SELECT title FROM pages WHERE revision = 16203226",
    "5688": "SELECT p.title \nFROM pages p \nJOIN langs l ON p.lid = l.lid \nWHERE l.lang = 'Catalan' \nAND p.revision BETWEEN 106600 AND 106700;",
    "5689": "SELECT COUNT(*) \nFROM pages \nJOIN langs ON pages.lid = langs.lid \nWHERE langs.lang = 'Catalan' AND pages.words BETWEEN 1000 AND 2000;",
    "5690": "SELECT p.pid\nFROM pages p\nJOIN langs l ON p.lid = l.lid\nJOIN pages_words pw ON p.pid = pw.pid\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'decimal' AND l.lang = 'Catalan'",
    "5691": "SELECT w.word, pw.occurrences\nFROM words w\nJOIN pages_words pw ON w.wid = pw.wid\nJOIN pages p ON pw.pid = p.pid\nJOIN langs l ON p.lid = l.lid\nWHERE l.lang = 'Catalan'\nORDER BY pw.occurrences DESC\nLIMIT 1;",
    "5692": "SELECT w1.word AS first_word\nFROM biwords b\nJOIN words w1 ON b.w1st = w1.wid\nJOIN words w2 ON b.w2nd = w2.wid\nWHERE w2.word = 'antic'",
    "5693": "SELECT p.title, pw.occurrences\nFROM pages p\nJOIN pages_words pw ON p.pid = pw.pid\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'quipu'",
    "5694": "SELECT AVG(occurrences) AS avg_occurrences\nFROM biwords\nJOIN words ON biwords.w1st = words.wid\nWHERE words.word = 'system'",
    "5695": "SELECT pages FROM langs WHERE lang = 'ca';",
    "5696": "SELECT w1.word || ' ' || w2.word AS biword_pair\nFROM biwords\nJOIN words AS w1 ON biwords.w1st = w1.wid\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nJOIN langs ON biwords.lid = langs.lid\nWHERE langs.lang = 'Catalan'\nORDER BY biwords.occurrences DESC\nLIMIT 1;",
    "5697": "SELECT lw.wid \nFROM langs_words lw\nJOIN langs l ON lw.lid = l.lid\nWHERE l.lang = 'catalan' AND lw.occurrences <= 10",
    "5698": "SELECT title \nFROM pages \nJOIN langs ON pages.lid = langs.lid \nWHERE langs.lang = 'Catalan' \nORDER BY words DESC \nLIMIT 1",
    "5699": "SELECT page FROM pages WHERE title = 'Arqueozoologia';",
    "5700": "SELECT lw.wid, MAX(lw.occurrences) AS max_occurrences\nFROM langs l\nJOIN langs_words lw ON l.lid = lw.lid\nJOIN pages p ON l.lid = p.lid\nJOIN pages_words pw ON p.pid = pw.pid AND lw.wid = pw.wid\nWHERE l.lang = 'Catalan' AND p.title = 'Abadia'",
    "5701": "SELECT p.title, pw.wid\nFROM pages p\nJOIN langs l ON p.lid = l.lid\nLEFT JOIN pages_words pw ON p.pid = pw.pid\nWHERE l.lang = 'Catalan'\nGROUP BY p.pid\nORDER BY p.words ASC, pw.occurrences DESC\nLIMIT 5",
    "5702": "SELECT b.occurrences\nFROM biwords b\nJOIN words w1 ON b.w1st = w1.wid\nJOIN words w2 ON b.w2nd = w2.wid\nJOIN langs l ON b.lid = l.lid\nWHERE w1.word = 'i' AND w2.word = 'a' AND l.lang = 'Catalan'",
    "5703": "SELECT w1.word || ' ' || w2.word AS word_pair\nFROM biwords\nJOIN words AS w1 ON biwords.w1st = w1.wid\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nWHERE biwords.occurrences = 2",
    "5704": "SELECT w1.word || ' ' || w2.word AS word_pair, b.occurrences\nFROM biwords b\nJOIN words w1 ON b.w1st = w1.wid\nJOIN words w2 ON b.w2nd = w2.wid\nJOIN langs l ON b.lid = l.lid\nJOIN pages p ON l.lid = p.lid\nWHERE p.title = 'Addicio'\nORDER BY b.occurrences DESC\nLIMIT 1",
    "5705": "SELECT SUM(words) AS total_words\nFROM pages\nWHERE title IN('Adam','Acampada')",
    "5706": "SELECT revision FROM pages WHERE title LIKE 'Aigua dol\u00e7a%'",
    "5707": "SELECT title FROM pages ORDER BY words DESC LIMIT 1",
    "5708": "SELECT AVG(words) AS average_words\nFROM (\n  SELECT words\n  FROM pages\n  ORDER BY words ASC\n  LIMIT 10\n)",
    "5709": "SELECT revision FROM pages\nWHERE LENGTH(title) - LENGTH(REPLACE(title, ' ', '')) < 9\nLIMIT 5",
    "5710": "SELECT pid FROM pages WHERE title LIKE 'b%'",
    "5711": "SELECT p.title\nFROM words w\nJOIN pages_words pw ON w.wid = pw.wid\nJOIN pages p ON pw.pid = p.pid\nWHERE w.word = 'desena'",
    "5712": "SELECT wid FROM words WHERE word = 'Sometent'",
    "5713": "SELECT EXISTS(SELECT 1 FROM words WHERE wid = 88 AND word = 'Animals') AS IsWord88Animals;",
    "5714": "SELECT pw.occurrences\nFROM pages_words pw\nJOIN words w ON pw.wid = w.wid\nJOIN pages p ON pw.pid = p.pid\nWHERE w.word = 'del' AND p.title = 'Any anomal\u00edstic'",
    "5715": "SELECT w1.word || ' ' || w2.word AS biword_pair, b.occurrences\nFROM biwords b\nJOIN words w1 ON b.w1st = w1.wid\nJOIN words w2 ON b.w2nd = w2.wid\nWHERE b.occurrences = 4\nLIMIT 1;",
    "5716": "SELECT SUM(occurrences) AS total_occurrences\nFROM (\n    SELECT occurrences FROM biwords\n    JOIN words AS w1 ON biwords.w1st = w1.wid\n    WHERE w1.word = \"nombre\"\n    UNION ALL\n    SELECT occurrences FROM biwords\n    JOIN words AS w2 ON biwords.w2nd = w2.wid\n    WHERE w2.word = \"nombre\"\n)",
    "5717": "SELECT w.word\nFROM biwords b\nJOIN words w ON w.wid = b.w2nd OR w.wid = b.w1st\nJOIN words j ON (j.word = 'John' AND (j.wid = b.w1st OR j.wid = b.w2nd))\nWHERE w.word != 'John'\nLIMIT 10",
    "5718": "SELECT p.revision\nFROM pages p\nJOIN pages_words pw ON p.pid = pw.pid\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'fresc'",
    "5719": "SELECT w1.word, w2.word AS paired_word\nFROM words AS w1\nJOIN biwords ON w1.wid = biwords.w1st\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nWHERE w1.wid BETWEEN 1 AND 10\nGROUP BY w1.wid",
    "5720": "SELECT SUM(occurrences) AS total_occurrences\nFROM words\nJOIN pages_words ON words.wid = pages_words.wid\nJOIN pages ON pages_words.pid = pages.pid\nWHERE pages.title LIKE '%Atomium%'\nAND words.word IN ('word1', 'word2', 'word3')",
    "5721": "SELECT word \nFROM words \nWHERE occurrences = (SELECT MAX(occurrences) FROM words);",
    "5722": "SELECT page\nFROM pages\nJOIN langs ON pages.lid = langs.lid\nWHERE langs.lang = 'Catalan'\nAND title LIKE '%0%'\n   OR title LIKE '%1%'\n   OR title LIKE '%2%'\n   OR title LIKE '%3%'\n   OR title LIKE '%4%'\n   OR title LIKE '%5%'\n   OR title LIKE '%6%'\n   OR title LIKE '%7%'\n   OR title LIKE '%8%'\n   OR title LIKE '%9%'",
    "5723": "SELECT title FROM pages ORDER BY words ASC LIMIT 1",
    "5724": "SELECT w1st, w2nd FROM biwords ORDER BY occurrences DESC LIMIT 1",
    "5725": "SELECT SUM(occurrences) AS total_occurrences_of_three_letter_words\nFROM words\nWHERE LENGTH(word) = 3",
    "5726": "SELECT AVG(words) AS average_words\nFROM pages\nWHERE title LIKE 'A%'",
    "5727": "SELECT AVG(occurrences) AS average_repetitions\nFROM biwords\nWHERE w1st = 34",
    "5728": "SELECT (CAST(SUM(CASE WHEN words = 1500 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM pages;",
    "5729": "SELECT \n    (CAST(SUM(CASE WHEN w1st = w2nd THEN occurrences ELSE 0 END) AS FLOAT) / SUM(occurrences)) * 100 AS percentage\nFROM \n    biwords",
    "5730": "SELECT p.title\nFROM pages p\nJOIN pages_words pw ON p.pid = pw.pid\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'comunitat'",
    "5731": "SELECT COUNT(DISTINCT pw.pid) AS num_pages\nFROM pages_words pw\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'ripoll'",
    "5732": "SELECT SUM(pw.occurrences) - COUNT(pw.wid) AS total_repeated_occurrences\nFROM pages p\nJOIN pages_words pw ON p.pid = pw.pid\nWHERE p.title = 'Llista de conflictes armats'\nAND pw.occurrences > 1;",
    "5733": "SELECT COUNT(*) AS pair_count\nFROM biwords bw\nJOIN words w1 ON bw.w1st = w1.wid\nJOIN words w2 ON bw.w2nd = w2.wid\nWHERE (w1.word = 'fukunaga' AND w2.word = 'd''egees') OR (w1.word = 'd''egees' AND w2.word = 'fukunaga')",
    "5734": "SELECT AVG(occurrences) AS average_repetitions\nFROM pages_words\nWHERE pid IN (\n    SELECT pid\n    FROM pages\n    WHERE words = 100\n)",
    "5735": "SELECT p.page\nFROM pages p\nJOIN langs l ON p.lid = l.lid\nWHERE l.lang = 'Catalan' AND p.title = 'Acampada';",
    "5736": "SELECT title FROM pages WHERE words > 300 LIMIT 3;",
    "5737": "SELECT SUM(occurrences) AS total_occurrences FROM words WHERE wid = 8;",
    "5738": "SELECT wid, word, MAX(occurrences) AS max_occurrences\nFROM words\nORDER BY max_occurrences DESC\nLIMIT 3",
    "5739": "SELECT occurrences FROM biwords WHERE w1st = 1 AND w2nd = 25 OR w1st = 25 AND w2nd = 1",
    "5740": "SELECT SUM(occurrences) AS total_words\nFROM pages_words\nJOIN pages ON pages.pid = pages_words.pid\nWHERE pages.revision = 27457362",
    "5741": "SELECT \n    (CAST(COUNT(DISTINCT lw.wid) AS FLOAT) / (SELECT COUNT(DISTINCT wid) FROM langs_words WHERE lid = 1)) * 100 AS percentage\nFROM \n    langs_words lw\nJOIN \n    words w ON lw.wid = w.wid\nWHERE \n    lw.lid = 1 AND lw.occurrences > 16000",
    "5742": "SELECT p.page\nFROM pages p\nJOIN langs l ON p.lid = l.lid\nWHERE l.lang = 'Catalan'\nORDER BY p.words DESC\nLIMIT 1",
    "5743": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM biwords \n     JOIN langs ON biwords.lid = langs.lid \n     WHERE langs.lang = 'Catalan' AND biwords.occurrences < 80) / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM biwords \n     JOIN langs ON biwords.lid = langs.lid \n     WHERE langs.lang = 'Catalan') AS percentage",
    "5744": "SELECT COUNT(*) FROM pages\nJOIN langs ON pages.lid = langs.lid\nWHERE langs.lang = 'ca';",
    "5745": "SELECT page, title, revision FROM pages WHERE lid = 1;",
    "5746": "SELECT lang \nFROM langs \nJOIN biwords ON langs.lid = biwords.lid \nWHERE w1st = 1 AND w2nd = 616;",
    "5747": "SELECT occurrences FROM langs_words JOIN words ON langs_words.wid = words.wid WHERE langs_words.lid = 1 AND words.word = 'nombre'",
    "5748": "SELECT word FROM words WHERE wid = 8968;",
    "5749": "SELECT w.word \nFROM words w \nJOIN langs_words lw ON w.wid = lw.wid \nWHERE lw.lid = 1 \nORDER BY lw.occurrences DESC \nLIMIT 1",
    "5750": "SELECT occurrences FROM pages_words WHERE pid = 44 AND wid = (SELECT wid FROM words WHERE word = 'votives')",
    "5751": "SELECT occurrences FROM pages_words WHERE pid = 16 AND wid = 109",
    "5752": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM langs_words \n     JOIN words ON langs_words.wid = words.wid \n     JOIN langs ON langs_words.lid = langs.lid \n     WHERE langs.lang = 'ca' AND langs_words.occurrences < 180) / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM langs_words \n     JOIN words ON langs_words.wid = words.wid \n     JOIN langs ON langs_words.lid = langs.lid \n     WHERE langs.lang = 'ca') AS percentage;",
    "5753": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM pages \n     JOIN langs ON pages.lid = langs.lid \n     WHERE langs.lang = 'ca' AND pages.words > 10000) / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM pages \n     JOIN langs ON pages.lid = langs.lid \n     WHERE langs.lang = 'ca') \n    AS percentage",
    "5754": "SELECT SUM(lw.occurrences) AS total_occurrences\nFROM words w\nJOIN langs_words lw ON w.wid = lw.wid\nWHERE w.word = 'desena'",
    "5755": "SELECT COUNT(*) FROM words WHERE occurrences > 10",
    "5756": "SELECT pages FROM langs WHERE lang = 'Catalan';",
    "5757": "SELECT COUNT(*) FROM words WHERE occurrences > 2000 AND occurrences < 5000;",
    "5758": "SELECT p.title \nFROM pages p \nJOIN langs l ON p.lid = l.lid \nWHERE p.revision = 106601 AND l.lang = 'Catalan';",
    "5759": "SELECT title FROM pages WHERE revision = 28040864;",
    "5760": "SELECT occurrences \nFROM biwords \nWHERE (w1st = (SELECT wid FROM words WHERE word = 'barcelona') \n       AND w2nd = (SELECT wid FROM words WHERE word = 'precolombina'))\n   OR (w1st = (SELECT wid FROM words WHERE word = 'precolombina') \n       AND w2nd = (SELECT wid FROM words WHERE word = 'barcelona'))",
    "5761": "SELECT l.locale\nFROM langs l\nJOIN pages p ON l.lid = p.lid\nWHERE p.title = 'Anys 90'",
    "5762": "SELECT w.word\nFROM words w\nJOIN langs_words lw ON w.wid = lw.wid\nJOIN langs l ON lw.lid = l.lid\nWHERE l.lang = 'Catalan' AND lw.occurrences = 71303;",
    "5763": "SELECT l.locale\nFROM langs l\nJOIN pages p ON l.lid = p.lid\nWHERE p.title = 'Abril'",
    "5764": "SELECT SUM(pw.occurrences) AS total_words_in_page\nFROM pages_words pw\nJOIN biwords b ON pw.pid = b.lid\nWHERE b.w1st = 100 AND b.w2nd = 317",
    "5765": "SELECT SUM(p.pages) AS total_pages\nFROM words w\nJOIN langs_words lw ON w.wid = lw.wid\nJOIN langs l ON lw.lid = l.lid\nJOIN pages p ON p.lid = l.lid\nWHERE lw.occurrences = 2593",
    "5766": "SELECT title FROM pages\nJOIN pages_words ON pages.pid = pages_words.pid\nWHERE pages_words.wid < 20",
    "5767": "SELECT COUNT(*) FROM words WHERE wid IN (SELECT wid FROM pages_words GROUP BY wid HAVING COUNT(DISTINCT pid) = 3)",
    "5768": "SELECT COUNT(*) FROM words WHERE occurrences = 8;",
    "5769": "SELECT SUM(occurrences) * 1.0 / COUNT(occurrences) AS average_percentage\nFROM pages_words\nJOIN pages ON pages_words.pid = pages.pid\nWHERE pages.revision < 106680",
    "5770": "SELECT SUM(pages) AS total_pages\nFROM words\nJOIN langs_words ON words.wid = langs_words.wid\nJOIN langs ON langs.lid = langs_words.lid\nWHERE langs_words.occurrences > 3000",
    "5771": "SELECT w1.word AS FirstWord, w2.word AS SecondWord\nFROM biwords\nJOIN words AS w1 ON biwords.w1st = w1.wid\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nWHERE w1.wid = 20 AND w2.wid = 50",
    "5772": "SELECT pages FROM langs WHERE lang = 'ca';",
    "5773": "SELECT title \nFROM pages \nWHERE lid = 1 AND words > 4000;",
    "5774": "SELECT words FROM pages WHERE title = 'Asclepi'",
    "5775": "SELECT title, SUM(words) AS total_words FROM pages WHERE title IN ('Afluent', 'Asclepi') GROUP BY title ORDER BY total_words DESC LIMIT 1",
    "5776": "SELECT SUM(occurrences) AS total_occurrences FROM words WHERE word = 'nombre';",
    "5777": "SELECT w.word\nFROM words w\nJOIN langs_words lw ON w.wid = lw.wid\nJOIN langs l ON lw.lid = l.lid\nWHERE l.lang = 'Catalan' AND lw.occurrences > 200000",
    "5778": "SELECT l.locale\nFROM langs l\nJOIN pages p ON l.lid = p.lid\nWHERE p.title = 'Asclepi'",
    "5779": "SELECT pw.occurrences\nFROM pages_words pw\nJOIN pages p ON pw.pid = p.pid\nJOIN words w ON pw.wid = w.wid\nWHERE p.title = '\u00c0bac' AND w.word = 'grec'",
    "5780": "SELECT p.title\nFROM pages p\nJOIN pages_words pw ON p.pid = pw.pid\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'grec' AND pw.occurrences > 20",
    "5781": "SELECT SUM(pw.occurrences) AS total_words_on_page\nFROM pages_words pw\nJOIN words w ON pw.wid = w.wid\nJOIN (SELECT pid FROM pages_words WHERE wid = (SELECT wid FROM words WHERE word = 'grec') AND occurrences = 52) AS target_page ON pw.pid = target_page.pid",
    "5782": "SELECT b.occurrences \nFROM biwords b \nJOIN words w1 ON b.w1st = w1.wid \nJOIN words w2 ON b.w2nd = w2.wid \nWHERE w1.word = '\u00e0bac' AND w2.word = 'xin\u00e8s'",
    "5783": "SELECT \n    CASE \n        WHEN MAX(occurrences) IN (\n            SELECT occurrences \n            FROM biwords \n            JOIN words w1 ON biwords.w1st = w1.wid \n            JOIN words w2 ON biwords.w2nd = w2.wid \n            WHERE w1.word = '\u00e0bac' AND w2.word = 'xin\u00e8s'\n        ) THEN '\u00e0bac-xin\u00e8s'\n        WHEN MAX(occurrences) IN (\n            SELECT occurrences \n            FROM biwords \n            JOIN words w1 ON biwords.w1st = w1.wid \n            JOIN words w2 ON biwords.w2nd = w2.wid \n            WHERE w1.word = '\u00e0bac' AND w2.word = 'grec'\n        ) THEN '\u00e0bac-grec'\n    END AS biword_with_higher_occurrence\nFROM biwords;",
    "5784": "SELECT w.occurrences - bw.occurrences AS difference\nFROM biwords bw\nJOIN words w ON bw.w1st = w.wid\nJOIN words w2 ON bw.w2nd = w2.wid\nWHERE w.word = '\u00e0bac' AND w2.word = 'xin\u00e8s'",
    "5785": "SELECT w1.word AS first_word, w2.word AS second_word, biwords.occurrences\nFROM biwords\nJOIN words AS w1 ON biwords.w1st = w1.wid\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nWHERE w1.word = '\u00e0bac'",
    "5786": "SELECT SUM(occurrences) AS total_occurrences\nFROM biwords\nJOIN words ON biwords.w1st = words.wid\nWHERE words.word = '\u00e0bac'",
    "5787": "SELECT SUM(occurrences) AS total_occurrences\nFROM biwords\nJOIN words AS w1 ON biwords.w1st = w1.wid\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nWHERE w1.word = '\u00e0bac' AND w2.word = 'xin\u00e8s'",
    "5788": "SELECT \n    ((SELECT pw.occurrences \n      FROM pages_words pw \n      JOIN pages p ON pw.pid = p.pid \n      JOIN words w ON pw.wid = w.wid \n      WHERE p.title = '\u00c0bac' AND w.word = 'grec') \n    -\n    (SELECT pw.occurrences \n     FROM pages_words pw \n     JOIN pages p ON pw.pid = p.pid \n     JOIN words w ON pw.wid = w.wid \n     WHERE p.title = 'Astronomia' AND w.word = 'grec')) \n    * 100.0 / \n    (SELECT pw.occurrences \n     FROM pages_words pw \n     JOIN pages p ON pw.pid = p.pid \n     JOIN words w ON pw.wid = w.wid \n     WHERE p.title = 'Astronomia' AND w.word = 'grec') AS percentage_increase",
    "5789": "SELECT pages FROM langs WHERE lang = 'ca'",
    "5790": "SELECT w.wid \nFROM words w \nJOIN langs_words lw ON w.wid = lw.wid \nJOIN langs l ON lw.lid = l.lid \nWHERE l.lang = 'Catalan' \nORDER BY lw.occurrences DESC \nLIMIT 1",
    "5791": "SELECT w2nd FROM biwords ORDER BY occurrences DESC LIMIT 1",
    "5792": "SELECT occurrences FROM words WHERE word = 'panajot'",
    "5793": "SELECT word FROM words WHERE occurrences = 340691;",
    "5794": "SELECT wid FROM words WHERE word = 'periodograma'",
    "5795": "SELECT w.word \nFROM biwords b \nJOIN words w ON b.w2nd = w.wid \nWHERE b.occurrences = 116430",
    "5796": "SELECT SUM(occurrences) AS total_occurrences\nFROM biwords\nJOIN words AS w1 ON biwords.w1st = w1.wid\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nWHERE w1.word = 'riu' OR w2.word = 'riu'",
    "5797": "SELECT pw.wid \nFROM pages_words pw\nJOIN pages p ON pw.pid = p.pid\nWHERE p.title = 'Agricultura'\nORDER BY pw.occurrences DESC\nLIMIT 1",
    "5798": "SELECT occurrences \nFROM pages_words \nJOIN pages ON pages.pid = pages_words.pid \nJOIN words ON words.wid = pages_words.wid \nWHERE title = 'Astre' AND words.wid = 2823",
    "5799": "SELECT p.title\nFROM pages p\nJOIN pages_words pw ON p.pid = pw.pid\nWHERE pw.wid = 174\nORDER BY pw.occurrences DESC\nLIMIT 1",
    "5800": "SELECT SUM(occurrences) AS total_occurrences\nFROM pages_words\nJOIN words ON pages_words.wid = words.wid\nWHERE word = 'her\u00f2dot'",
    "5801": "SELECT wid \nFROM pages_words \nJOIN pages ON pages_words.pid = pages.pid \nWHERE revision = 28278070 \nORDER BY occurrences DESC \nLIMIT 1",
    "5802": "SELECT occurrences FROM biwords\nJOIN words AS w1 ON biwords.w1st = w1.wid\nJOIN words AS w2 ON biwords.w2nd = w2.wid\nWHERE w1.word = 'que' AND w2.word = 'gregorio'",
    "5803": "SELECT SUM(occurrences) AS total_occurrences_of_base_as_second_word\nFROM biwords\nJOIN words ON biwords.w2nd = words.wid\nWHERE words.word = 'base'",
    "5804": "SELECT lw.occurrences\nFROM langs_words lw\nJOIN words w ON lw.wid = w.wid\nJOIN langs l ON lw.lid = l.lid\nWHERE w.word = 'exemple' AND l.lid = 1",
    "5805": "SELECT w.word \nFROM words w \nJOIN langs_words lw ON w.wid = lw.wid \nWHERE lw.occurrences = 274499 AND lw.lid = 1",
    "5806": "SELECT (SELECT occurrences FROM biwords JOIN words w1 ON biwords.w1st = w1.wid JOIN words w2 ON biwords.w2nd = w2.wid WHERE w1.word = 'a' AND w2.word = 'base') / (SELECT occurrences FROM biwords JOIN words w1 ON biwords.w1st = w1.wid JOIN words w2 ON biwords.w2nd = w2.wid WHERE w1.word = 'a' AND w2.word = 'decimal') AS times_greater",
    "5807": "SELECT \n    (SELECT pw.occurrences\n     FROM pages p\n     JOIN pages_words pw ON p.pid = pw.pid\n     JOIN words w ON pw.wid = w.wid\n     WHERE w.word = 'grec' AND p.title = 'Art') * 100.0 /\n    (SELECT SUM(pw.occurrences)\n     FROM pages_words pw\n     JOIN words w ON pw.wid = w.wid\n     WHERE w.word = 'grec') AS percentage",
    "5808": "SELECT COUNT(*) FROM pages WHERE lid = 1 AND words > 4000",
    "5809": "SELECT title FROM pages \nJOIN langs ON pages.lid = langs.lid \nWHERE langs.lid = 1 AND pages.words = 10",
    "5810": "SELECT w.word\nFROM words w\nJOIN langs_words lw ON w.wid = lw.wid\nJOIN langs l ON lw.lid = l.lid\nWHERE l.lang = 'Catalan'\nORDER BY lw.occurrences DESC\nLIMIT 1",
    "5811": "SELECT title\nFROM pages\nWHERE lid = 1\nORDER BY words DESC\nLIMIT 3",
    "5812": "SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia';",
    "5813": "SELECT COUNT(*) \nFROM pages \nJOIN langs ON pages.lid = langs.lid \nWHERE langs.lid = 1 \nAND pages.words > 300 \nAND pages.revision > 28330000;",
    "5814": "SELECT pw.pid\nFROM pages_words pw\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'nombre'",
    "5815": "SELECT COUNT(DISTINCT p.pid) AS num_pages\nFROM pages p\nJOIN langs l ON p.lid = l.lid\nJOIN pages_words pw ON p.pid = pw.pid\nJOIN words w ON pw.wid = w.wid\nWHERE l.lang = 'Catalan' AND w.word = 'nombre' AND pw.occurrences > 5",
    "5816": "SELECT COUNT(*) FROM biwords WHERE w2nd = (SELECT wid FROM words WHERE word = 'grec')",
    "5817": "SELECT p.title\nFROM pages p\nJOIN pages_words pw ON p.pid = pw.pid\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'grec' AND pw.occurrences = 52",
    "5818": "SELECT COUNT(*) \nFROM biwords \nJOIN words ON biwords.w1st = words.wid \nWHERE words.word = '\u00e0bac' AND biwords.occurrences > 10",
    "5819": "SELECT AVG(pw.occurrences) AS avg_occurrences\nFROM pages_words pw\nJOIN words w ON pw.wid = w.wid\nWHERE w.word = 'grec'",
    "5820": "SELECT COUNT(*) AS NumberOfFlights\nFROM Airlines\nWHERE FL_DATE = '2018/8/1';",
    "5821": "SELECT COUNT(*) \nFROM Airlines \nWHERE FL_DATE = '2018/8/1' AND ORIGIN = 'JFK';",
    "5822": "SELECT DISTINCT Airports.Description AS Destination_City\nFROM Airlines\nJOIN Airports ON Airlines.DEST = Airports.Code\nWHERE Airlines.CANCELLED = 1 AND Airlines.FL_DATE = '2018/8/1'",
    "5823": "SELECT FL_DATE \nFROM Airlines \nWHERE CANCELLED = 1 AND CANCELLATION_CODE = 'A'",
    "5824": "SELECT DISTINCT Airports.Description\nFROM Airlines\nJOIN Airports ON Airlines.ORIGIN = Airports.Code\nWHERE Airlines.FL_DATE = '2018/8/1' AND Airlines.DEP_DELAY > 0",
    "5825": "SELECT COUNT(*) \nFROM Airlines \nJOIN Airports ON Airlines.ORIGIN = Airports.Code \nWHERE FL_DATE = '2018/8/1' AND Airports.Description = 'New York, NY: John F. Kennedy International'",
    "5826": "SELECT DEST \nFROM Airlines \nWHERE FL_DATE = '2018/8/1' \nORDER BY DEP_DELAY DESC \nLIMIT 1",
    "5827": "SELECT COUNT(*) \nFROM Airlines \nJOIN Airports ON Airlines.ORIGIN = Airports.Code \nWHERE Airports.Description = 'New York, NY: John F. Kennedy International' \nAND Airlines.ARR_DELAY < 0;",
    "5828": "SELECT MIN(CRS_DEP_TIME) AS EarliestDepartureTime\nFROM Airlines\nJOIN Airports ON Airlines.ORIGIN = Airports.Code\nWHERE Airports.Description = 'New York, NY: John F. Kennedy International'\nAND FL_DATE = '2018/8/1'",
    "5829": "SELECT COUNT(*) AS FlightsByAmericanAirlinesOn20180801\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE FL_DATE = '2018/8/1' AND \"Air Carriers\".Description = 'American Airlines Inc.'",
    "5830": "SELECT Airlines.OP_CARRIER_FL_NUM\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nJOIN Airports ON Airlines.ORIGIN = Airports.Code\nWHERE \"Air Carriers\".Description = 'American Airlines Inc.'\nAND Airports.Description = 'New York, NY: John F. Kennedy International'",
    "5831": "SELECT COUNT(*) AS FasterThanScheduledFlights\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'American Airlines Inc.'\nAND Airlines.FL_DATE = '2018/8/1'\nAND Airlines.ACTUAL_ELAPSED_TIME < Airlines.CRS_ELAPSED_TIME;",
    "5832": "SELECT OP_CARRIER_FL_NUM\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'American Airlines Inc.'\nORDER BY DEP_DELAY DESC\nLIMIT 1",
    "5833": "SELECT COUNT(*) \nFROM Airlines \nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code \nWHERE \"Air Carriers\".Description = 'American Airlines Inc.' AND Airlines.DEST = 'JFK';",
    "5834": "SELECT COUNT(*) AS CancelledFlights\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'American Airlines Inc.'\nAND Airlines.FL_DATE = '2018/8/1'\nAND Airlines.CANCELLED = 1",
    "5835": "SELECT\n    (SELECT COUNT(*) FROM Airlines\n     JOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\n     WHERE FL_DATE = '2018/8/1' AND \"Air Carriers\".Description = 'American Airlines Inc.: AA') AS American_Flights,\n    (SELECT COUNT(*) FROM Airlines\n     JOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\n     WHERE FL_DATE = '2018/8/1' AND \"Air Carriers\".Description = 'Endeavor Air Inc.: 9E') AS Endeavor_Flights,\n    CASE\n        WHEN (SELECT COUNT(*) FROM Airlines\n              JOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\n              WHERE FL_DATE = '2018/8/1' AND \"Air Carriers\".Description = 'American Airlines Inc.: AA') >\n             (SELECT COUNT(*) FROM Airlines\n              JOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\n              WHERE FL_DATE = '2018/8/1' AND \"Air Carriers\".Description = 'Endeavor Air Inc.: 9E')\n        THEN 'American Airlines Inc. operated more flights'\n        ELSE 'Endeavor Air Inc. operated more flights'\n    END AS Result",
    "5836": "SELECT AVG(DEP_DELAY) AS average_departure_delay\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'American Airlines Inc.: AA';",
    "5837": "SELECT AVG(DailyFlights) AS AvgDailyFlights\nFROM (\n    SELECT COUNT(*) AS DailyFlights\n    FROM Airlines\n    JOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\n    WHERE FL_DATE LIKE '2018-08%' AND \"Air Carriers\".Description = 'American Airlines Inc.'\n    GROUP BY FL_DATE\n)",
    "5838": "SELECT COUNT(*) FROM \"Air Carriers\"",
    "5839": "SELECT COUNT(DISTINCT TAIL_NUM) \nFROM Airlines \nJOIN Airports ON Airlines.ORIGIN = Airports.Code \nWHERE Airports.Description = 'Los Angeles, CA: Los Angeles International' \nAND FL_DATE = '2018/8/27'",
    "5840": "SELECT COUNT(DISTINCT TAIL_NUM) \nFROM Airlines \nJOIN Airports ON Airlines.DEST = Airports.Code \nWHERE Airports.Description LIKE '%Oakland%' \nAND FL_DATE = '2018/8/7'",
    "5841": "SELECT COUNT(*) AS DelayedFlights\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Alaska Airlines Inc.: AS'\nAND Airlines.FL_DATE = '2018/8/2'\nAND Airlines.DEP_DELAY > 0",
    "5842": "SELECT COUNT(*) AS FlightsLandedEarlier\nFROM Airlines\nWHERE DEST = 'MIA'\nAND FL_DATE = '2018/8/12'\nAND ARR_DELAY < 0",
    "5843": "SELECT COUNT(*) AS Cancelled_Flights\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'American Airlines Inc.: AA'\nAND Airlines.CANCELLED = 1\nAND Airlines.CANCELLATION_CODE = 'A'",
    "5844": "SELECT COUNT(*) AS FasterThanScheduledFlights\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Endeavor Air Inc.'\nAND Airlines.FL_DATE = '2018/8/31'\nAND Airlines.ACTUAL_ELAPSED_TIME < Airlines.CRS_ELAPSED_TIME",
    "5845": "SELECT COUNT(DISTINCT TAIL_NUM) \nFROM Airlines \nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code \nWHERE \"Air Carriers\".Description = 'Spirit Air Lines: NK' AND Airlines.FL_DATE = '2018/8/7';",
    "5846": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.TAIL_NUM = 'N702SK'",
    "5847": "SELECT a.Description\nFROM Airports a\nJOIN (\n    SELECT DEST, COUNT(*) AS FlightCount\n    FROM Airlines\n    WHERE FL_DATE = '2018/8/15'\n    GROUP BY DEST\n    ORDER BY FlightCount DESC\n    LIMIT 1\n) AS MostFlights\nON a.Code = MostFlights.DEST",
    "5848": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.ORIGIN = 'ATL'\nAND Airlines.DEST = 'PHL'\nAND Airlines.FL_DATE = '2018/8/1'\nAND Airlines.CRS_DEP_TIME = 2040",
    "5849": "SELECT COUNT(*) AS NumberOfFlights\nFROM Airlines\nJOIN Airports ON Airlines.DEST = Airports.Code\nWHERE Airports.Description = 'Lake Charles, LA: Lake Charles Regional'\nAND Airlines.FL_DATE = '2018/8/15'",
    "5850": "SELECT COUNT(*) AS FlightsCount\nFROM Airlines\nJOIN Airports AS OriginAirports ON Airlines.ORIGIN = OriginAirports.Code\nJOIN Airports AS DestAirports ON Airlines.DEST = DestAirports.Code\nWHERE OriginAirports.Description = 'San Diego, CA: San Diego International'\nAND DestAirports.Description = 'Los Angeles, CA: Los Angeles International'\nAND Airlines.FL_DATE LIKE '2018-08%'",
    "5851": "SELECT \n    (CAST(SUM(CASE WHEN CANCELLATION_CODE = 'C' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_cancelled_type_c\nFROM Airlines\nJOIN Airports ON Airports.Code = Airlines.ORIGIN\nWHERE Airports.Description = 'Los Angeles, CA: Los Angeles International'\nAND Airlines.CANCELLED = 1;",
    "5852": "SELECT \n    (CAST(SUM(CASE WHEN A.ACTUAL_ELAPSED_TIME < A.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS FLOAT) / COUNT(A.DEST)) * 100 AS percentage\nFROM \n    Airlines A\nJOIN \n    Airports P ON A.DEST = P.Code\nWHERE \n    P.Description LIKE '%Pittsburgh%'",
    "5853": "SELECT Description \nFROM \"Air Carriers\" \nWHERE Code = 19049;",
    "5854": "SELECT COUNT(*) AS Flights_Departed_On_Time\nFROM Airlines\nWHERE FL_DATE = '2018/8/1' AND DEP_DELAY <= 0;",
    "5855": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'",
    "5856": "SELECT MAX(WEATHER_DELAY) AS LongestWeatherDelay\nFROM Airlines\nWHERE ORIGIN_AIRPORT_ID = 12264;",
    "5857": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport';",
    "5858": "SELECT ORIGIN_AIRPORT_ID\nFROM Airlines\nORDER BY LATE_AIRCRAFT_DELAY DESC\nLIMIT 1",
    "5859": "SELECT COUNT(*) AS FlightsToAtlantaFromChicago\nFROM Airlines\nJOIN Airports AS OriginAirports ON Airlines.ORIGIN = OriginAirports.Code\nJOIN Airports AS DestAirports ON Airlines.DEST = DestAirports.Code\nWHERE OriginAirports.Description = 'Chicago, IL: Chicago O'Hare International'\nAND DestAirports.Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International'",
    "5860": "SELECT COUNT(DISTINCT TAIL_NUM) AS NumberOfPlanes\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Southwest Airlines Co.'",
    "5861": "SELECT FL_DATE, COUNT(*) AS CancelledFlights\nFROM Airlines\nJOIN Airports ON Airlines.ORIGIN = Airports.Code OR Airlines.DEST = Airports.Code\nWHERE FL_DATE LIKE '2018-08%' \nAND CANCELLED = 1 \nAND CANCELLATION_CODE = 'A' \nAND Airports.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International'\nGROUP BY FL_DATE\nORDER BY CancelledFlights DESC\nLIMIT 1;",
    "5862": "SELECT DISTINCT Airlines.TAIL_NUM\nFROM Airlines\nJOIN Airports ON Airlines.DEST = Airports.Code\nWHERE Airlines.ARR_DELAY <= 0\nAND Airports.Description = 'Bakersfield, CA: Meadows Field'\nAND Airlines.FL_DATE LIKE '2018-08%'",
    "5863": "SELECT OP_CARRIER_AIRLINE_ID\nFROM Airlines\nJOIN Airports ON Airlines.DEST = Airports.Code\nWHERE Airports.Description = 'Boston, MA: Logan International'\nORDER BY SECURITY_DELAY DESC\nLIMIT 1",
    "5864": "SELECT \"Air Carriers\".Description, COUNT(DISTINCT Airlines.TAIL_NUM) AS NumberOfAircraft\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nGROUP BY Airlines.OP_CARRIER_AIRLINE_ID\nORDER BY NumberOfAircraft DESC\nLIMIT 5",
    "5865": "SELECT \"Air Carriers\".Description AS Airline_Name\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE CANCELLED = 0\nGROUP BY OP_CARRIER_AIRLINE_ID\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "5866": "SELECT \"Air Carriers\".Description AS Airline_Name\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.TAIL_NUM = 'N202NN'",
    "5867": "SELECT \"Air Carriers\".Description AS Airline_Name\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nJOIN Airports ON Airlines.DEST = Airports.Code\nWHERE Airports.Description = 'Chicago, IL: Chicago Midway International'\nGROUP BY \"Air Carriers\".Description\nORDER BY COUNT(Airlines.DEST) DESC\nLIMIT 1",
    "5868": "SELECT TAIL_NUM\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Compass Airlines: CP' AND ORIGIN = 'LAX' AND DEST = 'ABQ'\nGROUP BY TAIL_NUM\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "5869": "SELECT ORIGIN, COUNT(ORIGIN) AS flights_from_origin\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Republic Airline: YX'\nGROUP BY ORIGIN\nORDER BY flights_from_origin DESC\nLIMIT 1;",
    "5870": "SELECT \"Air Carriers\".Description AS Airline\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE ACTUAL_ELAPSED_TIME - CRS_ELAPSED_TIME = (\n    SELECT MIN(ACTUAL_ELAPSED_TIME - CRS_ELAPSED_TIME)\n    FROM Airlines\n    WHERE ACTUAL_ELAPSED_TIME IS NOT NULL AND CRS_ELAPSED_TIME IS NOT NULL\n)\nLIMIT 1;",
    "5871": "SELECT \n    TAIL_NUM, \n    SUM(LATE_AIRCRAFT_DELAY) / 60.0 AS Total_Delayed_Hours\nFROM \n    Airlines\nJOIN \n    \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \n    \"Air Carriers\".Description = 'Delta Air Lines Inc.: DL'\n    AND FL_DATE LIKE '2018-08-%'\nGROUP BY \n    TAIL_NUM\nORDER BY \n    Total_Delayed_Hours DESC\nLIMIT 1;",
    "5872": "SELECT Code, Description FROM Airports LIMIT 3;",
    "5873": "SELECT Code FROM \"Air Carriers\" WHERE Description LIKE 'Mississippi Valley Airlines%';",
    "5874": "SELECT CRS_DEP_TIME, DEP_TIME\nFROM Airlines\nWHERE ORIGIN = 'PHL'\nAND DEST = 'MDT'\nAND TAIL_NUM = 'N627AE'\nAND FL_DATE = '2018/8/13'",
    "5875": "SELECT COUNT(*) AS Flights_From_Allentown\nFROM Airlines\nWHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE'",
    "5876": "SELECT DISTINCT DEST\nFROM Airlines\nWHERE ORIGIN = 'ABY'",
    "5877": "SELECT COUNT(*) AS FlightsDepartedOnTime\nFROM Airlines\nWHERE ORIGIN = 'DFW' AND DEST = 'SNA' AND DEP_DELAY = 0;",
    "5878": "SELECT COUNT(*) \nFROM Airlines \nJOIN Airports AS OriginAirports ON Airlines.ORIGIN = OriginAirports.Code \nJOIN Airports AS DestAirports ON Airlines.DEST = DestAirports.Code \nWHERE OriginAirports.Description = 'Charlotte, NC: Charlotte Douglas International' \nAND DestAirports.Description = 'Austin, TX: Austin - Bergstrom International' \nAND Airlines.CANCELLATION_CODE = 'A'",
    "5879": "SELECT OP_CARRIER_AIRLINE_ID, COUNT(*) AS CancelledFlights\nFROM Airlines\nWHERE CANCELLED = 1\nGROUP BY OP_CARRIER_AIRLINE_ID\nORDER BY CancelledFlights DESC\nLIMIT 1;",
    "5880": "SELECT DEP_TIME\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nJOIN Airports ON Airlines.DEST = Airports.Code\nWHERE \"Air Carriers\".Description LIKE '%JetBlue Airways%'\nAND Airlines.TAIL_NUM = 'N903JB'\nAND Airports.Description LIKE '%Fort Lauderdale-Hollywood%'\nAND Airlines.FL_DATE = '2018/8/20'",
    "5881": "SELECT DISTINCT AC.Description AS Carrier_Operator\nFROM Airlines AS A\nJOIN \"Air Carriers\" AS AC ON A.OP_CARRIER_AIRLINE_ID = AC.Code\nWHERE A.ORIGIN = 'ACY' AND A.DEST = 'FLL'",
    "5882": "SELECT Description\nFROM Airports\nWHERE Code = 'A11';",
    "5883": "SELECT COUNT(*) AS Total_Flights_From_Oklahoma\nFROM Airlines\nWHERE ORIGIN = 'OKC';",
    "5884": "SELECT COUNT(*) FROM Airports WHERE Code LIKE 'C%'",
    "5885": "SELECT DEST\nFROM Airlines\nWHERE OP_CARRIER_FL_NUM = 1596;",
    "5886": "SELECT Description FROM Airports WHERE Code LIKE '%3';",
    "5887": "SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport';",
    "5888": "SELECT COUNT(*) AS CancelledFlights\nFROM Airlines\nWHERE CANCELLED = 1;",
    "5889": "SELECT TAIL_NUM \nFROM Airlines \nWHERE FL_DATE = '2018/8/17';",
    "5890": "SELECT ORIGIN\nFROM Airlines\nWHERE ACTUAL_ELAPSED_TIME = (SELECT MIN(ACTUAL_ELAPSED_TIME) FROM Airlines)",
    "5891": "SELECT Airlines.FL_DATE, Airlines.TAIL_NUM\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Ross Aviation Inc.: GWE'",
    "5892": "SELECT \"Air Carriers\".Description, \"Air Carriers\".Code\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE ARR_TIME = (\n    SELECT MIN(ARR_TIME)\n    FROM Airlines\n    WHERE ARR_TIME IS NOT NULL\n)",
    "5893": "SELECT COUNT(*) AS JetBlue_Flights_With_No_New_Arrival_Delay\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description LIKE '%JetBlue Airway%'\nAND Airlines.ARR_DELAY_NEW = 0;",
    "5894": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.DEST = 'MIA'",
    "5895": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.CANCELLED = 1",
    "5896": "SELECT Airlines.ACTUAL_ELAPSED_TIME\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Semo Aviation Inc.: SEM';",
    "5897": "SELECT TAIL_NUM \nFROM Airlines \nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code \nWHERE \"Air Carriers\".Description = 'Asap Air Inc.: ASP' \nORDER BY DEP_DELAY DESC \nLIMIT 1",
    "5898": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.DEP_DELAY = 0",
    "5899": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nORDER BY Airlines.ACTUAL_ELAPSED_TIME DESC\nLIMIT 1",
    "5900": "SELECT DISTINCT Airlines.DEST\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Southeast Alaska Airlines: WEB'",
    "5901": "SELECT COUNT(*) AS CancelledFlights\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'\nAND CANCELLED = 1\nAND \"Air Carriers\".Description = 'Spirit Air Lines: NK'",
    "5902": "SELECT COUNT(*) AS Total_Flights\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE FL_DATE = '2018/8/2' AND \"Air Carriers\".Description LIKE '%Horizon Air%'",
    "5903": "SELECT Airlines.TAIL_NUM\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Iscargo Hf: ICQ' AND Airlines.ARR_TIME <= 1000",
    "5904": "SELECT Airlines.FL_DATE\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Profit Airlines Inc.: XBH' AND Airlines.ACTUAL_ELAPSED_TIME < 100",
    "5905": "SELECT COUNT(*) \nFROM Airlines \nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code \nWHERE \"Air Carriers\".Description LIKE '%Republic Airline%' \nAND Airlines.DEP_DELAY > 30;",
    "5906": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.FL_DATE = '2018/8/25' AND Airlines.DEP_DELAY = -5",
    "5907": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.TAIL_NUM = 'N922US' AND Airlines.ORIGIN = 'PHX'",
    "5908": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE ARR_DELAY < 0 AND DEP_DELAY < 0",
    "5909": "SELECT TAIL_NUM\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \"Air Carriers\".Description = 'Southwest Airlines Co.: WN'\nAND ACTUAL_ELAPSED_TIME < (\n    SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8\n    FROM Airlines\n    JOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\n    WHERE \"Air Carriers\".Description = 'Southwest Airlines Co.: WN'\n)",
    "5910": "SELECT \"Air Carriers\".Description\nFROM Airlines\nJOIN \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE Airlines.DEST = 'PHX'\nAND Airlines.ARR_TIME < (\n    SELECT AVG(ARR_TIME) * 0.4\n    FROM Airlines\n    WHERE DEST = 'PHX'\n)",
    "5911": "SELECT \n    (CAST(SUM(CASE WHEN DEP_DELAY < 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(DEP_DELAY)) * 100 AS percentage_earlier_departure\nFROM \n    Airlines\nJOIN \n    \"Air Carriers\" ON Airlines.OP_CARRIER_AIRLINE_ID = \"Air Carriers\".Code\nWHERE \n    \"Air Carriers\".Description LIKE '%American Airlines%'",
    "5912": "SELECT COUNT(*) AS books_over_500_pages\nFROM book\nWHERE publisher_id = 1929 AND num_pages > 500;",
    "5913": "SELECT publication_date \nFROM book \nWHERE num_pages = (SELECT MAX(num_pages) FROM book);",
    "5914": "SELECT publisher.publisher_name\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE book.title = 'The Illuminati'",
    "5915": "SELECT COUNT(*) AS books_published_by_thomas_nelson\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Thomas Nelson'",
    "5916": "SELECT publisher_name \nFROM publisher \nJOIN book ON publisher.publisher_id = book.publisher_id \nGROUP BY publisher.publisher_id \nORDER BY COUNT(book.book_id) DESC \nLIMIT 1",
    "5917": "SELECT title \nFROM book \nJOIN publisher ON book.publisher_id = publisher.publisher_id \nWHERE publisher_name = 'Thomas Nelson' \nORDER BY publication_date \nLIMIT 1;",
    "5918": "SELECT COUNT(*) AS books_over_300_pages\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Thomas Nelson' AND book.num_pages > 300",
    "5919": "SELECT publisher_name \nFROM publisher \nJOIN book ON publisher.publisher_id = book.publisher_id \nORDER BY num_pages DESC \nLIMIT 1",
    "5920": "SELECT COUNT(*) AS books_in_english\nFROM book\nJOIN book_language ON book.language_id = book_language.language_id\nWHERE book_language.language_name = 'English'",
    "5921": "SELECT b.title\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nWHERE bl.language_name = 'British English'",
    "5922": "SELECT MIN(ol.price) AS cheapest_order_price\nFROM \"order_line\" ol\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.title = \"The Little House\";",
    "5923": "SELECT b.title\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nJOIN cust_order co ON ol.order_id = co.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore' AND a.author_name = 'Lucas Wyldbore'",
    "5924": "SELECT COUNT(*) AS books_over_300_pages\nFROM book\nJOIN order_line ON book.book_id = order_line.book_id\nJOIN cust_order ON order_line.order_id = cust_order.order_id\nJOIN customer ON cust_order.customer_id = customer.customer_id\nWHERE customer.first_name = 'Lucas' AND customer.last_name = 'Wyldbore' AND book.num_pages > 300",
    "5925": "SELECT SUM(ol.price) AS total_price\nFROM \"cust_order\" co\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN \"order_line\" ol ON co.order_id = ol.order_id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore'",
    "5926": "SELECT AVG(ol.price) AS average_spend\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN order_line ol ON co.order_id = ol.order_id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore'",
    "5927": "SELECT \n    (CAST(SUM(CASE WHEN ol.price > 13 THEN 1 ELSE 0 END) AS REAL) / COUNT(ol.order_id)) * 100 AS percentage_over_13\nFROM \n    \"cust_order\" co\nINNER JOIN \n    customer c ON co.customer_id = c.customer_id\nINNER JOIN \n    \"order_line\" ol ON co.order_id = ol.order_id\nWHERE \n    c.first_name = 'Lucas' AND c.last_name = 'Wyldbore'",
    "5928": "SELECT city FROM address WHERE address_id = 547;",
    "5929": "SELECT COUNT(*) AS number_of_orders\nFROM cust_order\nJOIN customer ON cust_order.customer_id = customer.customer_id\nWHERE customer.first_name = 'Cordy' AND customer.last_name = 'Dumbarton';",
    "5930": "SELECT b.title\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nWHERE bl.language_name = 'Japanese'\nORDER BY b.publication_date\nLIMIT 1",
    "5931": "SELECT publisher_name\nFROM publisher\nWHERE publisher_id = (\n    SELECT publisher_id\n    FROM book\n    GROUP BY publisher_id\n    ORDER BY COUNT(book_id) DESC\n    LIMIT 1\n)",
    "5932": "SELECT COUNT(*) AS books_published_by_kensington\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Kensington'",
    "5933": "SELECT language_name \nFROM book_language \nJOIN book ON book.language_id = book_language.language_id \nWHERE book.book_id = 1405;",
    "5934": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(co.order_id) DESC\nLIMIT 1",
    "5935": "SELECT b.title\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nGROUP BY b.book_id\nORDER BY COUNT(ol.order_id) DESC\nLIMIT 1",
    "5936": "SELECT COUNT(book.book_id) AS number_of_books_written\nFROM author\nJOIN book_author ON author.author_id = book_author.author_id\nJOIN book ON book_author.book_id = book.book_id\nWHERE author.author_name = 'David Foster Wallace'",
    "5937": "SELECT COUNT(DISTINCT ol.order_id) AS total_orders\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nWHERE b.title = 'O Xar\u00e1'",
    "5938": "SELECT c.country_name\nFROM customer cu\nJOIN customer_address ca ON cu.customer_id = ca.customer_id\nJOIN address a ON ca.address_id = a.address_id\nJOIN country c ON a.country_id = c.country_id\nWHERE cu.first_name = 'Malina' AND cu.last_name = 'Johnson';",
    "5939": "SELECT COUNT(*) AS UkrainianAddresses\nFROM address\nJOIN country ON address.country_id = country.country_id\nWHERE country.country_name = 'Ukraine'",
    "5940": "SELECT country_name FROM country \nJOIN address ON country.country_id = address.country_id \nWHERE city = '\u017dirovnica'",
    "5941": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM cust_order\n     JOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id\n     WHERE shipping_method.method_name = 'International'\n     AND cust_order.order_date LIKE '2022-11-10%') / \n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM cust_order\n     WHERE order_date LIKE '2022-11-10%') * 100 AS percentage_international_orders",
    "5942": "SELECT AVG(b.num_pages) AS average_pages\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'David Coward'",
    "5943": "SELECT cost FROM shipping_method WHERE method_name = 'Standard'",
    "5944": "SELECT title \nFROM book \nWHERE publication_date LIKE '1900%' \nORDER BY publication_date ASC \nLIMIT 1",
    "5945": "SELECT first_name || ' ' || last_name AS full_name\nFROM customer\nWHERE email = 'aalleburtonkc@yellowbook.com'",
    "5946": "SELECT COUNT(DISTINCT co.order_id) AS orders_to_iran_2022\nFROM cust_order co\nJOIN address a ON co.dest_address_id = a.address_id\nJOIN country c ON a.country_id = c.country_id\nWHERE c.country_name = 'Iran' AND co.order_date LIKE '2022%'",
    "5947": "SELECT COUNT(*) AS InternationalOrders\nFROM \"cust_order\" co\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN shipping_method sm ON co.shipping_method_id = sm.method_id\nWHERE c.first_name = 'Daisey' AND c.last_name = 'Lamball' AND sm.method_name = 'International'",
    "5948": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN order_line ol ON co.order_id = ol.order_id\nGROUP BY c.customer_id\nORDER BY COUNT(ol.book_id) DESC\nLIMIT 1",
    "5949": "SELECT COUNT(DISTINCT oh.order_id) AS returned_orders\nFROM \"order_history\" oh\nJOIN cust_order co ON oh.order_id = co.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN order_status os ON oh.status_id = os.status_id\nWHERE c.first_name = 'Antonia' AND c.last_name = 'Poltun' AND os.status_value = 'Returned'",
    "5950": "SELECT method_name\nFROM shipping_method\nWHERE method_id = (\n    SELECT shipping_method_id\n    FROM cust_order\n    GROUP BY shipping_method_id\n    ORDER BY COUNT(shipping_method_id) DESC\n    LIMIT 1\n)",
    "5951": "SELECT COUNT(DISTINCT oh.order_id) AS delivered_orders_in_2021\nFROM order_history oh\nJOIN order_status os ON oh.status_id = os.status_id\nWHERE os.status_value = 'Delivered'\nAND strftime('%Y', oh.status_date) = '2021'",
    "5952": "SELECT b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'J.K Rowling'\nORDER BY b.publication_date\nLIMIT 1",
    "5953": "SELECT COUNT(book.book_id) AS books_written_by_ar_braunmuller\nFROM book\nJOIN book_author ON book.book_id = book_author.book_id\nJOIN author ON book_author.author_id = author.author_id\nWHERE author.author_name = 'A.R. Braunmuller'",
    "5954": "SELECT p.publisher_name\nFROM publisher p\nJOIN book b ON p.publisher_id = b.publisher_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Agatha Christie'\nORDER BY b.publication_date ASC\nLIMIT 1",
    "5955": "SELECT b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Danielle Steel'",
    "5956": "SELECT COUNT(*) AS num_books_by_shakespeare_published_by_penguin_classics\nFROM book\nJOIN author ON book.book_id IN (SELECT book_author.book_id FROM book_author JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'William Shakespeare')\nJOIN publisher ON book.publisher_id = publisher.publisher_id AND publisher.publisher_name = 'Penguin Classics'",
    "5957": "SELECT publisher_name \nFROM publisher \nJOIN book ON publisher.publisher_id = book.publisher_id \nGROUP BY publisher.publisher_id \nORDER BY COUNT(book.book_id) DESC \nLIMIT 1",
    "5958": "SELECT SUM(sm.cost) AS total_shipping_cost, COUNT(CASE WHEN co.order_date LIKE '2022%' THEN 1 END) AS orders_in_2022\nFROM \"cust_order\" co\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN shipping_method sm ON co.shipping_method_id = sm.method_id\nWHERE c.first_name = 'Page' AND c.last_name = 'Holsey'",
    "5959": "SELECT publisher_name FROM publisher WHERE publisher_id = 22",
    "5960": "SELECT COUNT(DISTINCT b.book_id) AS num_books\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'AI Gore' AND b.num_pages < 400",
    "5961": "SELECT a.author_name, p.publisher_name\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nJOIN publisher p ON b.publisher_id = p.publisher_id\nWHERE b.publication_date = '1997-07-10'",
    "5962": "SELECT language_name \nFROM book \nJOIN book_language ON book.language_id = book_language.language_id \nWHERE isbn13 = '23755004321'",
    "5963": "SELECT b.title\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nORDER BY ol.price DESC\nLIMIT 1",
    "5964": "SELECT SUM(ol.price) AS total_price\nFROM \"cust_order\" co\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN \"order_line\" ol ON co.order_id = ol.order_id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore'",
    "5965": "SELECT b.isbn13\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nWHERE bl.language_name = 'Spanish'",
    "5966": "SELECT COUNT(*) \nFROM book \nJOIN publisher ON book.publisher_id = publisher.publisher_id \nWHERE book.book_id IN (\n    SELECT book_id \n    FROM order_line \n    WHERE price < 1\n) \nAND publisher.publisher_name = 'Berkley Trade';",
    "5967": "SELECT b.title\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nJOIN cust_order co ON ol.order_id = co.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nWHERE c.first_name = 'Zia' AND c.last_name = 'Roizin'",
    "5968": "SELECT author.author_name\nFROM author\nJOIN book_author ON author.author_id = book_author.author_id\nJOIN book ON book.book_id = book_author.book_id\nWHERE book.num_pages = (SELECT MAX(num_pages) FROM book)",
    "5969": "SELECT c.email\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.title = 'Switch on the Night'",
    "5970": "SELECT DISTINCT author.author_name\nFROM author\nJOIN book_author ON author.author_id = book_author.author_id\nJOIN book ON book.book_id = book_author.book_id\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Abrams'",
    "5971": "SELECT publisher.publisher_name\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE book.title = 'The Illuminati'",
    "5972": "SELECT\n    (CAST(SUM(CASE WHEN strftime('%Y', b.publication_date) = '1992' THEN 1 ELSE 0 END) AS REAL) / COUNT(b.book_id)) * 100 AS percentage\nFROM\n    book b\nJOIN\n    book_author ba ON b.book_id = ba.book_id\nJOIN\n    author a ON ba.author_id = a.author_id\nWHERE\n    a.author_name = 'Abraham Lincoln'",
    "5973": "SELECT DISTINCT p.publisher_name\nFROM book b\nJOIN publisher p ON b.publisher_id = p.publisher_id\nWHERE b.publication_date LIKE '2004%'\nAND b.num_pages > (SELECT AVG(num_pages) * 0.7 FROM book)",
    "5974": "SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb'",
    "5975": "SELECT DISTINCT street_name FROM address WHERE city = 'Dallas';",
    "5976": "SELECT b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Orson Scott Card'\nAND b.publication_date LIKE '2001%'",
    "5977": "SELECT COUNT(book.book_id) AS NumberOfBooks\nFROM book\nJOIN book_author ON book.book_id = book_author.book_id\nJOIN author ON book_author.author_id = author.author_id\nWHERE author.author_name = 'Orson Scott Card'",
    "5978": "SELECT a.author_name, b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON a.author_id = ba.author_id\nWHERE b.num_pages > 3000",
    "5979": "SELECT author.author_name\nFROM author\nJOIN book_author ON author.author_id = book_author.author_id\nJOIN book ON book.book_id = book_author.book_id\nWHERE book.title = 'The Prophet'",
    "5980": "SELECT COUNT(*) AS books_published_by_ace_hardcover\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Ace Hardcover'",
    "5981": "SELECT p.publisher_name\nFROM publisher p\nJOIN book b ON p.publisher_id = b.publisher_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Barry Eisler'",
    "5982": "SELECT COUNT(*) AS books_published_in_japanese\nFROM book\nJOIN book_language ON book.language_id = book_language.language_id\nWHERE book_language.language_name = 'Japanese'",
    "5983": "SELECT SUM(ol.price) AS total_price\nFROM \"order_line\" ol\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.title = 'The Prophet'",
    "5984": "SELECT COUNT(*) AS number_of_orders_2021\nFROM cust_order\nJOIN customer ON cust_order.customer_id = customer.customer_id\nWHERE customer.first_name = 'Daisey' AND customer.last_name = 'Lamball' AND cust_order.order_date LIKE '2021%'",
    "5985": "SELECT COUNT(DISTINCT customer.customer_id) AS Australian_Customers\nFROM customer\nJOIN customer_address ON customer.customer_id = customer_address.customer_id\nJOIN address ON customer_address.address_id = address.address_id\nJOIN country ON address.country_id = country.country_id\nWHERE country.country_name = 'Australia'",
    "5986": "SELECT COUNT(DISTINCT oh.order_id) AS delivered_orders_in_december_2019\nFROM order_history oh\nJOIN order_status os ON oh.status_id = os.status_id\nWHERE os.status_value = 'Delivered'\nAND oh.status_date LIKE '2019-12%'",
    "5987": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.title = 'Fantasmas'",
    "5988": "SELECT \n    (SELECT COUNT(*) \n     FROM \"cust_order\" co \n     JOIN shipping_method sm ON co.shipping_method_id = sm.method_id \n     WHERE strftime('%Y', co.order_date) = '2020' \n     AND sm.method_name = 'International') * 100.0 / \n    (SELECT COUNT(*) \n     FROM \"cust_order\" \n     WHERE strftime('%Y', order_date) = '2020') AS percentage_of_international_orders",
    "5989": "SELECT author_name FROM author WHERE author_name LIKE 'George%'",
    "5990": "SELECT strftime('%Y', order_date) AS year, COUNT(order_id) AS total_orders\nFROM cust_order\nGROUP BY year\nORDER BY total_orders DESC\nLIMIT 1",
    "5991": "SELECT AVG(price) AS average_price FROM order_line",
    "5992": "SELECT title FROM book WHERE publication_date LIKE '1995%';",
    "5993": "SELECT SUBSTR(email, INSTR(email, '@') + 1) AS domain, COUNT(*) AS domain_count\nFROM customer\nGROUP BY domain\nORDER BY domain_count DESC\nLIMIT 1;",
    "5994": "SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%'",
    "5995": "SELECT language_name\nFROM book_language\nWHERE language_id = (\n    SELECT language_id\n    FROM book\n    GROUP BY language_id\n    ORDER BY COUNT(book_id) ASC\n    LIMIT 1\n)",
    "5996": "SELECT cust_order.order_date\nFROM cust_order\nJOIN customer ON cust_order.customer_id = customer.customer_id\nWHERE customer.first_name = 'Adrian' AND customer.last_name = 'Kunzelmann'",
    "5997": "SELECT COUNT(*) AS addresses_from_philippines\nFROM address\nJOIN country ON address.country_id = country.country_id\nWHERE country.country_name = 'Philippines'",
    "5998": "SELECT author.author_name\nFROM author\nJOIN book_author ON author.author_id = book_author.author_id\nGROUP BY author.author_id\nORDER BY COUNT(book_author.book_id) DESC\nLIMIT 1",
    "5999": "SELECT book.title\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = \"Harper Collins\"",
    "6000": "SELECT COUNT(DISTINCT oh.order_id) AS returned_orders\nFROM order_history oh\nJOIN order_status os ON oh.status_id = os.status_id\nWHERE os.status_value = 'Returned'\nAND strftime('%Y', oh.status_date) = '2020'",
    "6001": "SELECT method_name\nFROM shipping_method\nWHERE method_id IN (\n    SELECT method_id\n    FROM cust_order\n    GROUP BY shipping_method_id\n    ORDER BY COUNT(shipping_method_id) ASC\n    LIMIT 1 OFFSET 1\n)",
    "6002": "SELECT COUNT(*) AS inactive_addresses_count\nFROM customer_address ca\nJOIN address_status as ON ca.status_id = as.status_id\nWHERE as.address_status = 'Inactive'",
    "6003": "SELECT b.title\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nGROUP BY b.book_id\nORDER BY COUNT(ol.order_id) DESC\nLIMIT 1",
    "6004": "SELECT a.street_name, a.city, COUNT(co.dest_address_id) AS order_count\nFROM address a\nJOIN \"cust_order\" co ON a.address_id = co.dest_address_id\nGROUP BY co.dest_address_id\nORDER BY order_count DESC\nLIMIT 1;",
    "6005": "SELECT \n    order_id, \n    MAX(status_date) - MIN(order_date) AS time_to_update_status\nFROM \n    (SELECT \n        o.order_id, \n        o.order_date, \n        h.status_date \n     FROM \n        cust_order o \n     JOIN \n        order_history h ON o.order_id = h.order_id\n     WHERE \n        o.order_id = 2398)\nGROUP BY \n    order_id",
    "6006": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN customer_address ca ON c.customer_id = ca.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(ca.address_id) DESC\nLIMIT 1",
    "6007": "SELECT \n    (SUM(CASE WHEN sm.method_name = 'International' THEN ol.price ELSE 0 END) / SUM(ol.price)) * 100 AS percentage_international\nFROM \n    \"order_line\" ol\nJOIN \n    \"cust_order\" co ON ol.order_id = co.order_id\nJOIN \n    shipping_method sm ON co.shipping_method_id = sm.method_id",
    "6008": "SELECT DISTINCT a.author_name\nFROM author a\nJOIN book_author ba ON a.author_id = ba.author_id\nJOIN book b ON ba.book_id = b.book_id\nWHERE b.num_pages < (SELECT AVG(num_pages) FROM book)",
    "6009": "SELECT MIN(price) AS lowest_price_paid\nFROM order_line\nWHERE price > 0",
    "6010": "SELECT COUNT(DISTINCT customer.customer_id) AS customer_count\nFROM customer\nJOIN customer_address ON customer.customer_id = customer_address.customer_id\nJOIN address ON customer_address.address_id = address.address_id\nWHERE address.city = 'Villeneuve-la-Garenne';",
    "6011": "SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam%'",
    "6012": "SELECT COUNT(*) AS yahoo_mail_users\nFROM customer\nWHERE email LIKE '%@yahoo.com'",
    "6013": "SELECT DISTINCT a.city\nFROM address a\nJOIN country c ON a.country_id = c.country_id\nJOIN customer_address ca ON a.address_id = ca.address_id\nWHERE c.country_name = 'United States of America'",
    "6014": "SELECT COUNT(*) AS total_orders_2021_priority\nFROM cust_order\nJOIN customer ON cust_order.customer_id = customer.customer_id\nJOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id\nWHERE customer.first_name = 'Marcelia' AND customer.last_name = 'Goering'\nAND substr(cust_order.order_date, 1, 4) = '2021'\nAND shipping_method.method_name = 'Priority'",
    "6015": "SELECT b.book_id, b.title, ol.price\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nWHERE ol.price = (SELECT MAX(price) FROM order_line)",
    "6016": "SELECT COUNT(DISTINCT co.customer_id) AS number_of_customers\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.title = 'Anleitung zum Zickigsein'",
    "6017": "SELECT MAX(price) AS most_expensive_price\nFROM \"order_line\"\nJOIN book ON order_line.book_id = book.book_id\nWHERE title = 'Bite Me If You Can (Argeneau #6)'",
    "6018": "SELECT COUNT(DISTINCT co.customer_id) AS num_customers\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.publication_date = (SELECT MIN(publication_date) FROM book)",
    "6019": "SELECT b.title\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nJOIN publisher p ON b.publisher_id = p.publisher_id\nWHERE bl.language_name = 'Spanish' AND p.publisher_name = 'Alfaguara'",
    "6020": "SELECT COUNT(DISTINCT co.customer_id) AS customer_count\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Stephen King'\nAND b.publication_date = (\n    SELECT MIN(publication_date)\n    FROM book\n    JOIN book_author ON book.book_id = book_author.book_id\n    JOIN author ON book_author.author_id = author.author_id\n    WHERE author.author_name = 'Stephen King'\n)",
    "6021": "SELECT bl.language_name\nFROM book_language bl\nJOIN book b ON bl.language_id = b.language_id\nORDER BY b.publication_date\nLIMIT 2",
    "6022": "SELECT publisher_name \nFROM publisher \nJOIN book ON publisher.publisher_id = book.publisher_id \nWHERE title = 'The Secret Garden';",
    "6023": "SELECT COUNT(DISTINCT b.book_id) AS books_written_by_jk_rowling\nFROM book b\nJOIN publisher p ON b.publisher_id = p.publisher_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE p.publisher_name = 'Scholastic' AND a.author_name = 'J.K Rowling'",
    "6024": "SELECT publisher.publisher_name\nFROM publisher\nJOIN book ON publisher.publisher_id = book.publisher_id\nGROUP BY publisher.publisher_id\nHAVING COUNT(book.book_id) >= 30",
    "6025": "SELECT street_name, SUBSTR(street_number, -1) AS last_number_of_street\nFROM address",
    "6026": "SELECT c.first_name, c.last_name, a.street_number, a.street_name, a.city, co.country_name\nFROM customer c\nJOIN customer_address ca ON c.customer_id = ca.customer_id\nJOIN address a ON ca.address_id = a.address_id\nJOIN country co ON a.country_id = co.country_id\nWHERE a.city = 'Lazaro Cardenas'",
    "6027": "SELECT isbn13 FROM book WHERE num_pages > 135 AND num_pages < 140;",
    "6028": "SELECT title\nFROM book\nORDER BY publication_date ASC\nLIMIT 6",
    "6029": "SELECT COUNT(*) AS books_ordered_in_dec_2020\nFROM \"order_line\"\nJOIN \"cust_order\" ON \"order_line\".order_id = \"cust_order\".order_id\nWHERE SUBSTR(\"cust_order\".order_date, 1, 7) = '2020-12'",
    "6030": "SELECT first_name || ' ' || last_name AS full_name\nFROM customer\nWHERE last_name LIKE 'K%'",
    "6031": "SELECT DISTINCT a.city\nFROM customer c\nJOIN customer_address ca ON c.customer_id = ca.customer_id\nJOIN address a ON ca.address_id = a.address_id\nJOIN country co ON a.country_id = co.country_id\nWHERE co.country_name = 'Costa Rica'",
    "6032": "SELECT c.first_name, c.last_name, a.street_number, a.street_name, a.city\nFROM customer_address ca\nJOIN address a ON ca.address_id = a.address_id\nJOIN customer c ON ca.customer_id = c.customer_id\nJOIN address_status as ON ca.status_id = as.status_id\nWHERE as.address_status = 'Inactive'",
    "6033": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN customer_address ca ON c.customer_id = ca.customer_id\nJOIN address a ON ca.address_id = a.address_id\nWHERE a.city = 'Baiyin'",
    "6034": "SELECT c.email\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN shipping_method sm ON co.shipping_method_id = sm.method_id\nWHERE sm.method_name = 'Priority'",
    "6035": "SELECT o.order_date\nFROM cust_order o\nJOIN customer_address ca ON o.customer_id = ca.customer_id\nJOIN address a ON ca.address_id = a.address_id\nWHERE a.street_number = '460'",
    "6036": "SELECT cust_order.order_id\nFROM cust_order\nJOIN order_history ON cust_order.order_id = order_history.order_id\nJOIN order_status ON order_history.status_id = order_status.status_id\nWHERE order_status.status_value = 'cancelled'",
    "6037": "SELECT os.status_value\nFROM \"cust_order\" co\nJOIN \"order_history\" oh ON co.order_id = oh.order_id\nJOIN \"order_status\" os ON oh.status_id = os.status_id\nWHERE SUBSTR(co.order_date, 1, 10) = '2022-04-10'",
    "6038": "SELECT MAX(order_line.price) AS highest_price\nFROM order_line\nJOIN book ON order_line.book_id = book.book_id\nWHERE book.title = 'The Prophet'",
    "6039": "SELECT DISTINCT co.order_date\nFROM \"cust_order\" co\nJOIN \"order_line\" ol ON co.order_id = ol.order_id\nWHERE ol.price = 16.54",
    "6040": "SELECT book.title\nFROM book\nJOIN book_author ON book.book_id = book_author.book_id\nJOIN author ON book_author.author_id = author.author_id\nWHERE author.author_name = 'Peter H.Smit'",
    "6041": "SELECT COUNT(*) AS books_under_300_pages\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE num_pages < 300 AND publisher_name = 'HarperCollins Publishers'",
    "6042": "SELECT COUNT(*) AS Japanese_Books_Count\nFROM book\nJOIN book_language ON book.language_id = book_language.language_id\nWHERE book_language.language_name = 'Japanese'",
    "6043": "SELECT AVG(b.num_pages) AS avg_num_pages\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Jennifer Crusie'",
    "6044": "SELECT \n    (COUNT(DISTINCT CASE WHEN sm.method_name = 'International' THEN co.order_id END) * 1.0 / COUNT(co.order_id)) * 100 AS percentage_international\nFROM \n    \"cust_order\" co\nJOIN \n    customer c ON co.customer_id = c.customer_id\nJOIN \n    shipping_method sm ON co.shipping_method_id = sm.method_id\nWHERE \n    c.first_name = 'Kaleena'",
    "6045": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.title = 'The Sorrows of Young Werther'",
    "6046": "SELECT DISTINCT b.title\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nJOIN cust_order co ON ol.order_id = co.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE c.first_name = 'Ursola' AND c.last_name = 'Purdy' AND a.author_name = 'Ursola Purdy'",
    "6047": "SELECT a.author_name\nFROM author a\nJOIN book_author ba ON a.author_id = ba.author_id\nJOIN book b ON ba.book_id = b.book_id\nORDER BY b.num_pages DESC\nLIMIT 1",
    "6048": "SELECT COUNT(*) AS books_by_akira_watanabe\nFROM book\nJOIN book_author ON book.book_id = book_author.book_id\nJOIN author ON book_author.author_id = author.author_id\nWHERE author.author_name = 'Akira Watanabe'",
    "6049": "SELECT a.street_number, a.street_name, a.city, c.country_name\nFROM customer cu\nJOIN customer_address ca ON cu.customer_id = ca.customer_id\nJOIN address a ON ca.address_id = a.address_id\nJOIN country c ON a.country_id = c.country_id\nWHERE cu.first_name = 'Ursola' AND cu.last_name = 'Purdy'",
    "6050": "SELECT a.author_name\nFROM author a\nJOIN book_author ba ON a.author_id = ba.author_id\nJOIN book b ON ba.book_id = b.book_id\nWHERE b.title = 'The Mystery in the Rocky Mountains'",
    "6051": "SELECT publisher.publisher_name\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE book.title = 'Girls'' Night In';",
    "6052": "SELECT publisher_name \nFROM publisher \nJOIN book ON publisher.publisher_id = book.publisher_id \nORDER BY publication_date \nLIMIT 1;",
    "6053": "SELECT \n    ABS(SUM(CASE WHEN method_name = 'Express' THEN cost ELSE 0 END) - \n    SUM(CASE WHEN method_name = 'Priority' THEN cost ELSE 0 END)) AS cost_difference\nFROM shipping_method",
    "6054": "SELECT COUNT(DISTINCT oh.order_id) AS cancelled_orders_in_2022\nFROM order_history oh\nJOIN order_status os ON oh.status_id = os.status_id\nWHERE os.status_value = 'Cancelled'\nAND SUBSTR(oh.status_date, 1, 4) = '2022'",
    "6055": "SELECT book.title\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'BBC Audiobooks'",
    "6056": "SELECT COUNT(*) AS books_published_in_2017\nFROM book\nWHERE strftime('%Y', publication_date) = '2017'",
    "6057": "SELECT isbn13 FROM book WHERE title = 'The Mystery in the Rocky Mountains';",
    "6058": "SELECT \n    (CAST(SUM(CASE WHEN os.status_value = 'Returned' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_returned\nFROM \n    order_history oh\nJOIN \n    order_status os ON oh.status_id = os.status_id\nWHERE \n    SUBSTR(oh.status_date, 1, 4) = '2022';",
    "6059": "SELECT \n    (SELECT COUNT(*) \n     FROM customer_address \n     JOIN address_status ON customer_address.status_id = address_status.status_id \n     WHERE address_status.address_status = 'Inactive') * 100.0 / \n    (SELECT COUNT(*) \n     FROM customer_address) AS percentage_not_in_use",
    "6060": "SELECT num_pages FROM book WHERE title = 'Seaward'",
    "6061": "SELECT author.author_name\nFROM author\nJOIN book_author ON author.author_id = book_author.author_id\nJOIN book ON book.book_id = book_author.book_id\nWHERE book.title = 'First Things First'",
    "6062": "SELECT b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Tom Clancy'",
    "6063": "SELECT b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Hirohiko Araki' AND b.publication_date = '2006-06-06'",
    "6064": "SELECT p.publisher_name\nFROM book b\nJOIN publisher p ON b.publisher_id = p.publisher_id\nWHERE b.title = 'Hitchhiker''s Guide To The Galaxy: The Filming of the Douglas Adams classic'",
    "6065": "SELECT book.title\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'ADV Manga'",
    "6066": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN customer_address ca ON c.customer_id = ca.customer_id\nJOIN address a ON ca.address_id = a.address_id\nWHERE a.street_number = '55' AND a.street_name = 'Dorton Pass' AND a.city = 'Huangqiao'",
    "6067": "SELECT country_name \nFROM country \nJOIN address ON country.country_id = address.country_id \nWHERE street_number = '9' AND street_name = 'Green Ridge Point' AND city = 'Arendal'",
    "6068": "SELECT address.address_id, address.street_number, address.street_name, address.city\nFROM address\nJOIN country ON address.country_id = country.country_id\nWHERE country.country_name = 'Poland'\nLIMIT 10",
    "6069": "SELECT sm.method_name\nFROM \"cust_order\" co\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN shipping_method sm ON co.shipping_method_id = sm.method_id\nWHERE c.first_name = 'Nicolette' AND c.last_name = 'Sadler' AND co.order_date = '2020-06-29 19:40:07'",
    "6070": "SELECT book.title\nFROM book\nJOIN book_language ON book.language_id = book_language.language_id\nWHERE book_language.language_name = 'Arabic'",
    "6071": "SELECT bl.language_name\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nWHERE b.title = 'El plan infinito'",
    "6072": "SELECT \n    (SELECT CAST(COUNT(DISTINCT ba.book_id) AS FLOAT)\n     FROM book_author ba\n     JOIN author a ON ba.author_id = a.author_id\n     JOIN book b ON ba.book_id = b.book_id\n     JOIN publisher p ON b.publisher_id = p.publisher_id\n     WHERE a.author_name = 'Hirohiko Araki' AND p.publisher_name = 'Viz Media') /\n    (SELECT CAST(COUNT(b.book_id) AS FLOAT)\n     FROM book b\n     JOIN publisher p ON b.publisher_id = p.publisher_id\n     WHERE p.publisher_name = 'Viz Media') * 100 AS percentage;",
    "6073": "SELECT AVG(b.num_pages) AS average_pages\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Zilpha Keatley Snyder'",
    "6074": "SELECT first_name || ' ' || last_name AS full_name\nFROM customer\nWHERE email = 'ckupis4@tamu.edu'",
    "6075": "SELECT title, MAX(num_pages) AS max_pages\nFROM book;",
    "6076": "SELECT COUNT(book.book_id) AS books_written_by_aj_ayer\nFROM book\nJOIN book_author ON book.book_id = book_author.book_id\nJOIN author ON book_author.author_id = author.author_id\nWHERE author.author_name = 'A.J. Ayer'",
    "6077": "SELECT b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'A.J. Ayer'",
    "6078": "SELECT p.publisher_name\nFROM book b\nJOIN publisher p ON b.publisher_id = p.publisher_id\nWHERE b.title = \"The Season: A Candid Look at Broadway\"",
    "6079": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM book \n     JOIN book_language ON book.language_id = book_language.language_id \n     JOIN publisher ON book.publisher_id = publisher.publisher_id \n     WHERE book_language.language_name = 'English' \n     AND publisher.publisher_name = 'Carole Marsh Mysteries') \n    / \n    (SELECT COUNT(*) \n     FROM book \n     JOIN publisher ON book.publisher_id = publisher.publisher_id \n     WHERE publisher.publisher_name = 'Carole Marsh Mysteries') \n    AS average_english_books",
    "6080": "SELECT title \nFROM book \nJOIN publisher ON book.publisher_id = publisher.publisher_id \nWHERE SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000' \nAND publisher_name = 'Free Press' \nORDER BY num_pages DESC \nLIMIT 1",
    "6081": "SELECT ol.price\nFROM \"order_line\" ol\nJOIN book b ON ol.book_id = b.book_id\nWHERE b.title = 'The Servant Leader' AND SUBSTR(b.publication_date, 1, 4) = '2003'",
    "6082": "SELECT a.street_number, a.street_name, a.city\nFROM address a\nJOIN customer_address ca ON a.address_id = ca.address_id\nJOIN customer c ON ca.customer_id = c.customer_id\nWHERE c.first_name = 'Kandy' AND ca.status_id = 1",
    "6083": "SELECT COUNT(ol.book_id) AS books_ordered\nFROM \"cust_order\" co\nJOIN customer c ON co.customer_id = c.customer_id\nJOIN \"order_line\" ol ON co.order_id = ol.order_id\nWHERE c.first_name = 'Kandy' AND c.last_name = 'Adamec'",
    "6084": "SELECT COUNT(DISTINCT oh.order_id) AS returned_orders_in_2022\nFROM order_history oh\nJOIN order_status os ON oh.status_id = os.status_id\nWHERE os.status_value = 'Returned'\nAND SUBSTR(oh.status_date, 1, 4) = '2022'",
    "6085": "SELECT country_name \nFROM country \nJOIN address ON country.country_id = address.country_id \nJOIN customer_address ON address.address_id = customer_address.address_id \nJOIN customer ON customer_address.customer_id = customer.customer_id \nWHERE customer.email = 'rturbitt2@geocities.jp'",
    "6086": "SELECT publisher_name \nFROM publisher \nWHERE publisher_id = (\n    SELECT publisher_id \n    FROM book \n    GROUP BY publisher_id \n    ORDER BY COUNT(book_id) DESC \n    LIMIT 1\n)",
    "6087": "SELECT b.title\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'A.J. Ayer'\nORDER BY b.publication_date\nLIMIT 1",
    "6088": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN ol.price > 10 THEN ol.book_id END) AS REAL) / COUNT(DISTINCT ol.book_id)) * 100 AS percentage\nFROM \n    \"order_line\" ol\nJOIN \n    \"cust_order\" co ON ol.order_id = co.order_id\nJOIN \n    customer c ON co.customer_id = c.customer_id\nWHERE \n    c.first_name = 'Ruthanne' AND c.last_name = 'Vatini';",
    "6089": "SELECT book.title\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'AK Press'",
    "6090": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN order_line ol ON co.order_id = ol.order_id\nWHERE ol.price = (SELECT MIN(price) FROM order_line)",
    "6091": "SELECT b.isbn13\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nJOIN cust_order co ON ol.order_id = co.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nWHERE c.email = 'fsier3e@ihg.com'",
    "6092": "SELECT DISTINCT author.author_name\nFROM author\nJOIN book_author ON author.author_id = book_author.author_id\nJOIN book ON book_author.book_id = book.book_id\nJOIN order_line ON book.book_id = order_line.book_id\nWHERE order_line.price >= 19",
    "6093": "SELECT publisher.publisher_name\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE book.isbn13 = '76092025986'",
    "6094": "SELECT COUNT(*) AS books_count\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Birlinn'\nAND SUBSTR(book.publication_date, 1, 4) = '2008'\nAND book.num_pages BETWEEN 600 AND 700",
    "6095": "SELECT price FROM \"order_line\" JOIN book ON order_line.book_id = book.book_id WHERE book.isbn13 = '9780763628321';",
    "6096": "SELECT b.num_pages\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nJOIN cust_order co ON ol.order_id = co.order_id\nWHERE co.order_id = 1167",
    "6097": "SELECT b.title\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nWHERE bl.language_name = 'British English'",
    "6098": "SELECT COUNT(*) AS books_published_by_brava_in_2006\nFROM book\nJOIN publisher ON book.publisher_id = publisher.publisher_id\nWHERE publisher_name = 'Brava' AND SUBSTR(publication_date, 1, 4) = '2006'",
    "6099": "SELECT isbn13, price\nFROM book\nJOIN order_line ON book.book_id = order_line.book_id\nWHERE book.book_id = 7160;",
    "6100": "SELECT book.title \nFROM book \nJOIN order_line ON book.book_id = order_line.book_id \nJOIN cust_order ON order_line.order_id = cust_order.order_id \nWHERE cust_order.order_id = 931;",
    "6101": "SELECT bl.language_name\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nWHERE b.title = 'Zorro'",
    "6102": "SELECT DISTINCT c.email\nFROM customer c\nJOIN cust_order co ON c.customer_id = co.customer_id\nJOIN order_line ol ON co.order_id = ol.order_id\nWHERE ol.price BETWEEN 3 AND 5",
    "6103": "SELECT isbn13\nFROM book\nJOIN order_line ON book.book_id = order_line.book_id\nWHERE price = 7.5",
    "6104": "SELECT DISTINCT p.publisher_name\nFROM publisher p\nJOIN book b ON p.publisher_id = b.publisher_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Alan Lee'",
    "6105": "SELECT SUM(b.num_pages) AS total_pages\nFROM book b\nJOIN order_line ol ON b.book_id = ol.book_id\nJOIN cust_order co ON ol.order_id = co.order_id\nJOIN customer c ON co.customer_id = c.customer_id\nWHERE c.first_name = 'Mick' AND c.last_name = 'Sever'",
    "6106": "SELECT author_name \nFROM author \nJOIN book_author ON author.author_id = book_author.author_id \nJOIN book ON book_author.book_id = book.book_id \nORDER BY publication_date DESC \nLIMIT 1",
    "6107": "SELECT \n    (SELECT COUNT(*) \n     FROM book \n     JOIN publisher ON book.publisher_id = publisher.publisher_id \n     JOIN book_language ON book.language_id = book_language.language_id \n     WHERE publisher_name = 'Ace Book' AND language_name = 'English') * 100.0 /\n    (SELECT COUNT(*) \n     FROM book \n     JOIN publisher ON book.publisher_id = publisher.publisher_id \n     WHERE publisher_name = 'Ace Book') AS percentage_english_books",
    "6108": "SELECT \n    (SELECT COUNT(DISTINCT b.book_id) \n     FROM book b \n     JOIN order_line ol ON b.book_id = ol.book_id \n     WHERE ol.price < 1 AND b.num_pages < 500) - \n    (SELECT COUNT(DISTINCT b.book_id) \n     FROM book b \n     JOIN order_line ol ON b.book_id = ol.book_id \n     WHERE ol.price < 1 AND b.num_pages > 500) AS Difference",
    "6109": "SELECT bl.language_name, b.title\nFROM book b\nJOIN book_language bl ON b.language_id = bl.language_id\nJOIN order_line ol ON b.book_id = ol.book_id\nWHERE ol.price < (SELECT AVG(price) * 0.2 FROM order_line)",
    "6110": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN employee supervisor ON e.supervisor = supervisor.employee_id\nWHERE supervisor.first_name = 'Darlisha' AND supervisor.last_name = 'Jacobs'",
    "6111": "SELECT DISTINCT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE e.title = 'Sanitarian' AND i.inspection_date LIKE '2010-05%'",
    "6112": "SELECT COUNT(*) AS inspections_count\nFROM inspection\nJOIN employee ON inspection.employee_id = employee.employee_id\nWHERE employee.first_name = 'Joshua' AND employee.last_name = 'Rosa' AND inspection.inspection_date LIKE '2010%'",
    "6113": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN employee emp ON i.employee_id = emp.employee_id\nWHERE emp.first_name = 'Joshua' AND emp.last_name = 'Rosa'",
    "6114": "SELECT COUNT(DISTINCT e.license_no)\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.inspection_date LIKE '2010%'\nAND e.facility_type IN ('Restaurant', 'Cafeteria')",
    "6115": "SELECT e.latitude, e.longitude\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.inspection_date = '2010-05-11'",
    "6116": "SELECT COUNT(DISTINCT e.license_no)\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.inspection_date LIKE '2010%' AND e.ward = 42",
    "6117": "SELECT DISTINCT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE est.dba_name = 'Burbank'",
    "6118": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.results = 'Fail' AND i.inspection_date LIKE '2010%'",
    "6119": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE est.dba_name = 'AMUNDSEN HIGH SCHOOL' AND i.inspection_date = '2010-05-11'",
    "6120": "SELECT COUNT(*) AS pass_count\nFROM inspection\nJOIN employee ON inspection.employee_id = employee.employee_id\nWHERE employee.first_name = 'Joshua' AND employee.last_name = 'Rosa' AND inspection.results = 'Pass'",
    "6121": "SELECT i2.inspection_date\nFROM inspection i1\nJOIN establishment e ON i1.license_no = e.license_no\nJOIN inspection i2 ON i1.inspection_id = i2.followup_to\nWHERE e.dba_name = 'Azha Restaurant Inc.'\nAND i1.inspection_date = '2010-01-21'\nAND i1.results = 'Pass'",
    "6122": "SELECT COUNT(DISTINCT e.license_no)\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.inspection_date LIKE '2010%' AND e.risk_level = 3",
    "6123": "SELECT AVG(InspectionCount) AS AverageInspections\nFROM (\n    SELECT e.employee_id, COUNT(i.inspection_id) AS InspectionCount\n    FROM employee e\n    JOIN inspection i ON e.employee_id = i.employee_id\n    WHERE e.salary > 70000 AND i.inspection_date LIKE '2010%'\n    GROUP BY e.employee_id\n)",
    "6124": "SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous'",
    "6125": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_id = 48224",
    "6126": "SELECT COUNT(*) AS inspections_count\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.dba_name = 'All Style Buffet' AND establishment.facility_type = 'Restaurant'",
    "6127": "SELECT MIN(i.inspection_date) AS first_inspection_date\nFROM inspection i\nJOIN establishment e ON i.license_no = e.license_no\nWHERE e.aka_name = 'WING HUNG CHOP SUEY RESTAURANT'",
    "6128": "SELECT COUNT(DISTINCT e.license_no) AS restaurant_count\nFROM inspection i\nJOIN establishment e ON i.license_no = e.license_no\nWHERE i.inspection_date = '2015-05-08'\nAND e.facility_type = 'Restaurant'",
    "6129": "SELECT COUNT(*) AS food_maintenance_violations\nFROM violation v\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.category = 'Food Maintenance' AND v.inspection_id = 1454071",
    "6130": "SELECT COUNT(v.inspection_id) AS number_of_violations\nFROM violation v\nJOIN inspection i ON v.inspection_id = i.inspection_id\nJOIN establishment e ON i.license_no = e.license_no\nWHERE e.dba_name = 'ROYAL THAI CUISINE' AND i.inspection_date = '2015-05-08'",
    "6131": "SELECT COUNT(*) AS inspections_count\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.facility_type = 'Grocery Store' AND establishment.address = '3635 W DIVERSEY AVE'",
    "6132": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nGROUP BY e.employee_id\nORDER BY COUNT(i.inspection_id) DESC\nLIMIT 1",
    "6133": "SELECT COUNT(*) AS Inspections_Out_Of_Business\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nWHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman' AND i.results = 'Out of Business'",
    "6134": "SELECT COUNT(DISTINCT e.license_no) AS establishment_count\nFROM inspection i\nJOIN employee emp ON i.employee_id = emp.employee_id\nJOIN establishment e ON i.license_no = e.license_no\nWHERE emp.title = 'Sanitarian'\nAND emp.address = '5000 N Wolcott Ave'\nAND i.inspection_date BETWEEN '2011-05-01' AND '2011-05-31'",
    "6135": "SELECT e.phone\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_id = 634597 AND e.title = 'Sanitarian'",
    "6136": "SELECT e.salary\nFROM employee e\nJOIN (\n    SELECT employee_id, COUNT(employee_id) AS inspection_count\n    FROM inspection\n    GROUP BY employee_id\n    ORDER BY inspection_count DESC\n    LIMIT 1\n) AS most_inspections ON e.employee_id = most_inspections.employee_id",
    "6137": "SELECT AVG(inspection_count) AS average_inspections\nFROM (\n    SELECT e.license_no, COUNT(i.inspection_id) AS inspection_count\n    FROM establishment e\n    LEFT JOIN inspection i ON e.license_no = i.license_no\n    WHERE e.risk_level = 3 AND e.facility_type = 'TAVERN'\n    GROUP BY e.license_no\n)",
    "6138": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM inspection \n     JOIN establishment ON inspection.license_no = establishment.license_no \n     WHERE establishment.dba_name = 'POCKETS' \n     AND establishment.facility_type = 'Restaurant' \n     AND inspection.results = 'Pass') / \n    (SELECT COUNT(DISTINCT establishment.license_no) \n     FROM establishment \n     WHERE establishment.dba_name = 'POCKETS' \n     AND establishment.facility_type = 'Restaurant') AS pass_rate",
    "6139": "SELECT COUNT(*) AS sanitarian_count\nFROM employee\nWHERE title = 'Sanitarian'\nAND city = 'Chicago'\nAND zip = 60617",
    "6140": "SELECT dba_name\nFROM establishment\nWHERE address = '2903 W IRVING PARK RD'",
    "6141": "SELECT first_name || ' ' || last_name AS full_name\nFROM employee\nORDER BY salary ASC\nLIMIT 1",
    "6142": "SELECT COUNT(*) \nFROM establishment \nWHERE dba_name = 'HOMEMADE PIZZA' AND risk_level = 2;",
    "6143": "SELECT COUNT(*) AS critical_food_safety_problems\nFROM violation\nWHERE point_id = 3 AND fine = 500;",
    "6144": "SELECT COUNT(*) AS employees_under_gregory_cardenas\nFROM employee AS e1\nJOIN employee AS e2 ON e1.employee_id = e2.supervisor\nWHERE e1.first_name = 'Gregory' AND e1.last_name = 'Cardenas';",
    "6145": "SELECT MIN(inspection_date) AS first_inspection_date\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.dba_name = 'RENALDI''S PIZZA'",
    "6146": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_date LIKE '2016-03%'\nGROUP BY e.employee_id\nORDER BY COUNT(i.inspection_id) DESC\nLIMIT 1",
    "6147": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.results = 'Pass w/ Conditions'\nAND i.inspection_date LIKE '2012-05%'",
    "6148": "SELECT COUNT(DISTINCT e.license_no) AS passed_businesses\nFROM inspection i\nJOIN employee emp ON i.employee_id = emp.employee_id\nJOIN establishment e ON i.license_no = e.license_no\nWHERE i.inspection_type = 'Short Form Complaint'\nAND i.results = 'Pass'\nAND emp.first_name = 'David'\nAND emp.last_name = 'Hodges'",
    "6149": "SELECT COUNT(DISTINCT e.license_no) AS businesses_from_ward_42\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.ward = 42 AND i.results = 'Fail'\nAND i.inspection_date BETWEEN '2010-01-01' AND '2015-12-31'\nGROUP BY e.license_no\nHAVING COUNT(i.inspection_id) >= 5",
    "6150": "SELECT e.salary\nFROM employee e\nJOIN (\n    SELECT employee_id, COUNT(employee_id) AS inspection_count\n    FROM inspection\n    GROUP BY employee_id\n    ORDER BY inspection_count DESC\n    LIMIT 1\n) AS most_inspections\nON e.employee_id = most_inspections.employee_id",
    "6151": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN violation v ON i.inspection_id = v.inspection_id\nWHERE i.inspection_date LIKE '2014%'\nGROUP BY e.license_no\nORDER BY SUM(v.fine) DESC\nLIMIT 1",
    "6152": "SELECT e.latitude, e.longitude\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.results = 'Fail'\nGROUP BY e.license_no\nORDER BY COUNT(i.results) DESC\nLIMIT 1",
    "6153": "SELECT inspector_comment\nFROM violation\nJOIN inspection ON violation.inspection_id = inspection.inspection_id\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.dba_name = 'TAQUERIA LA FIESTA' AND inspection.inspection_date = '2010-01-25'",
    "6154": "SELECT SUM(v.fine) AS total_fine\nFROM violation v\nJOIN inspection i ON v.inspection_id = i.inspection_id\nJOIN establishment e ON i.license_no = e.license_no\nWHERE e.dba_name = 'RON OF JAPAN INC' AND i.inspection_date LIKE '2014-02%'",
    "6155": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE est.dba_name = 'TAQUERIA LA PAZ'",
    "6156": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nJOIN violation v ON i.inspection_id = v.inspection_id\nGROUP BY e.employee_id\nORDER BY SUM(v.fine) DESC\nLIMIT 1",
    "6157": "WITH TopSalaries AS (\n    SELECT employee_id\n    FROM employee\n    WHERE title = 'Sanitarian'\n    ORDER BY salary DESC\n    LIMIT 5\n)\nSELECT e.first_name, e.last_name, IFNULL(AVG(i.inspection_count), 0) AS average_inspections\nFROM (\n    SELECT employee_id, COUNT(*) AS inspection_count\n    FROM inspection\n    WHERE employee_id IN (SELECT employee_id FROM TopSalaries)\n    GROUP BY employee_id\n) i\nRIGHT JOIN TopSalaries ts ON i.employee_id = ts.employee_id\nJOIN employee e ON ts.employee_id = e.employee_id\nGROUP BY e.employee_id",
    "6158": "WITH InspectionCounts AS (\n    SELECT \n        e.license_no,\n        e.dba_name,\n        COUNT(i.inspection_id) AS total_inspections,\n        SUM(CASE WHEN i.results = 'Pass' THEN 1 ELSE 0 END) AS passed_inspections,\n        SUM(CASE WHEN i.results = 'Fail' THEN 1 ELSE 0 END) AS failed_inspections\n    FROM \n        establishment e\n    JOIN \n        inspection i ON e.license_no = i.license_no\n    GROUP BY \n        e.license_no\n),\nMaxInspection AS (\n    SELECT \n        MAX(total_inspections) AS max_inspections\n    FROM \n        InspectionCounts\n),\nTopBusiness AS (\n    SELECT \n        dba_name,\n        total_inspections,\n        passed_inspections,\n        failed_inspections\n    FROM \n        InspectionCounts,\n        MaxInspection\n    WHERE \n        total_inspections = max_inspections\n    LIMIT 1 -- Assuming there could be ties, we pick one for simplicity\n)\nSELECT \n    dba_name,\n    total_inspections,\n    (passed_inspections * 100.0 / total_inspections) AS percentage_passed,\n    (failed_inspections * 100.0 / total_inspections) AS percentage_failed\nFROM \n    TopBusiness",
    "6159": "SELECT last_name FROM employee WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL'",
    "6160": "SELECT e.dba_name AS establishment_name, emp.first_name || ' ' || emp.last_name AS employee_name\nFROM inspection i\nJOIN establishment e ON i.license_no = e.license_no\nJOIN employee emp ON i.employee_id = emp.employee_id\nWHERE i.inspection_id = 44256 AND i.inspection_date = '2010-05-05'",
    "6161": "SELECT e.address\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.facility_type = 'School'\nAND i.results = 'Pass'\nAND i.inspection_date LIKE '2010-03%'",
    "6162": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_type = 'Canvass' AND i.inspection_date = '2010-03-09'",
    "6163": "SELECT inspection.inspection_id\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.dba_name = 'PIZZA RUSTICA, INC'",
    "6164": "SELECT COUNT(DISTINCT e.license_no) AS Passed_High_Risk_Restaurants\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.facility_type = 'Restaurant'\nAND e.risk_level = (SELECT MAX(risk_level) FROM establishment WHERE facility_type = 'Restaurant')\nAND i.results = 'Pass'",
    "6165": "SELECT DISTINCT e.first_name, e.last_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nJOIN violation v ON i.inspection_id = v.inspection_id\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.category = 'Display of Inspection Report Summary'",
    "6166": "SELECT e.title\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_id = 60332",
    "6167": "SELECT COUNT(DISTINCT i.inspection_id) AS failed_restaurants\nFROM inspection i\nJOIN establishment e ON i.license_no = e.license_no\nWHERE e.facility_type = 'Restaurant'\nAND e.risk_level = (SELECT MIN(risk_level) FROM establishment WHERE facility_type = 'Restaurant')\nAND i.results = 'Fail'\nAND i.inspection_type = 'Complaint'",
    "6168": "SELECT v.fine, e.address, e.city, e.state\nFROM violation v\nJOIN inspection i ON v.inspection_id = i.inspection_id\nJOIN establishment e ON i.license_no = e.license_no\nWHERE i.inspection_id = 48216",
    "6169": "SELECT v.inspection_id\nFROM violation v\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.point_level = 'Critical' AND v.fine = 500 AND v.inspector_comment = 'CDI ON 5-17-10'",
    "6170": "SELECT ip.Description AS inspection_description, v.inspector_comment\nFROM violation v\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE v.inspection_id = 164795",
    "6171": "SELECT inspector_comment, code\nFROM violation\nJOIN inspection_point ON violation.point_id = inspection_point.point_id\nWHERE inspection_id = 54216 AND violation.point_id = 34",
    "6172": "WITH FailedInspections AS (\n    SELECT DISTINCT e.license_no, e.risk_level\n    FROM establishment e\n    JOIN inspection i ON e.license_no = i.license_no\n    WHERE i.results = 'Fail'\n),\nMaxRiskLevel AS (\n    SELECT MAX(risk_level) AS max_risk\n    FROM FailedInspections\n),\nCountMaxRiskLevel AS (\n    SELECT COUNT(*) AS count_max_risk\n    FROM FailedInspections, MaxRiskLevel\n    WHERE FailedInspections.risk_level = MaxRiskLevel.max_risk\n),\nTotalFailed AS (\n    SELECT COUNT(*) AS total_failed\n    FROM FailedInspections\n)\nSELECT (CAST(count_max_risk AS REAL) / CAST(total_failed AS REAL)) * 100 AS percentage\nFROM CountMaxRiskLevel, TotalFailed",
    "6173": "SELECT \n    (SELECT COUNT(DISTINCT i.employee_id)\n     FROM inspection i\n     JOIN violation v ON i.inspection_id = v.inspection_id\n     JOIN employee e ON i.employee_id = e.employee_id\n     WHERE v.fine = 100 AND e.salary BETWEEN 75000 AND 85000)\n    -\n    (SELECT COUNT(DISTINCT i.employee_id)\n     FROM inspection i\n     JOIN violation v ON i.inspection_id = v.inspection_id\n     JOIN employee e ON i.employee_id = e.employee_id\n     WHERE v.fine = 500 AND e.salary BETWEEN 75000 AND 85000) AS difference",
    "6174": "SELECT COUNT(*) AS inspections_in_january_2011\nFROM inspection\nWHERE inspection_date LIKE '2011-01%'",
    "6175": "SELECT COUNT(*) AS failed_inspections_2014\nFROM inspection\nWHERE results = 'Fail' AND inspection_date LIKE '2014%'",
    "6176": "SELECT \n    (SELECT CAST(COUNT(DISTINCT v.inspection_id) AS FLOAT)\n     FROM violation v\n     WHERE v.fine = 100) / \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM inspection) * 100 AS percentage_minor_fine",
    "6177": "SELECT violation.point_id, violation.fine\nFROM violation\nJOIN inspection ON violation.inspection_id = inspection.inspection_id\nWHERE inspection.inspection_date = '2010-08-07'",
    "6178": "SELECT COUNT(DISTINCT i.inspection_id) AS personnel_inspections\nFROM inspection i\nJOIN violation v ON i.inspection_id = v.inspection_id\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.category = 'Personnel'",
    "6179": "SELECT e.dba_name, i.results\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.city = 'BURNHAM'",
    "6180": "SELECT \n    SUM(CASE WHEN ip.category = 'Toxic Items' THEN 1 ELSE 0 END) AS Toxic_Items_Inspections,\n    SUM(CASE WHEN ip.category = 'No Smoking Regulations' THEN 1 ELSE 0 END) AS No_Smoking_Regulations_Inspections\nFROM \n    inspection i\nJOIN \n    violation v ON i.inspection_id = v.inspection_id\nJOIN \n    inspection_point ip ON v.point_id = ip.point_id",
    "6181": "SELECT e.first_name, e.last_name, est.dba_name, i.inspection_date\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE e.first_name = 'Sarah' AND e.last_name = 'Lindsey' AND i.inspection_date = '2012-11-20'",
    "6182": "SELECT ip.category, v.fine\nFROM violation v\nJOIN inspection i ON v.inspection_id = i.inspection_id\nJOIN employee e ON i.employee_id = e.employee_id\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman'\nAND i.inspection_date LIKE '2014-01%'",
    "6183": "SELECT COUNT(DISTINCT i.inspection_id) AS total_inspections\nFROM inspection i\nJOIN violation v ON i.inspection_id = v.inspection_id\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.category = 'Display of Inspection Report Summary'",
    "6184": "SELECT inspection.inspection_type, inspection.results\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.facility_type = 'RIVERWALK CAFE'",
    "6185": "SELECT e.first_name, e.last_name, i.results\nFROM inspection i\nJOIN establishment e2 ON i.license_no = e2.license_no\nJOIN employee e ON i.employee_id = e.employee_id\nWHERE e2.dba_name = 'JEAN SAMOCKI'",
    "6186": "SELECT SUM(v.fine) AS total_fine\nFROM violation v\nJOIN inspection i ON v.inspection_id = i.inspection_id\nJOIN establishment e ON i.license_no = e.license_no\nWHERE e.dba_name = 'HACIENDA LOS TORRES'\nAND e.ward = 36\nAND i.results = 'Fail'",
    "6187": "SELECT SUM(v.fine) AS total_fine\nFROM violation v\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.category = 'Food Equipment and Utensil'",
    "6188": "SELECT e.dba_name, e.latitude, e.longitude\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.results = 'Fail' AND i.inspection_date = '2013-07-29'",
    "6189": "WITH VerifiedQuality AS (\n    SELECT \n        COUNT(*) AS VerifiedCount,\n        SUM(CASE WHEN city = 'CHICAGO' THEN 1 ELSE 0 END) AS ChicagoCount\n    FROM inspection\n    JOIN establishment ON inspection.license_no = establishment.license_no\n    WHERE results LIKE 'Pass%'\n),\nTotalInspections AS (\n    SELECT \n        COUNT(*) AS TotalCount\n    FROM inspection\n)\nSELECT \n    (VerifiedQuality.VerifiedCount * 100.0 / TotalInspections.TotalCount) AS VerifiedQualityPercentage,\n    VerifiedQuality.ChicagoCount\nFROM VerifiedQuality, TotalInspections",
    "6190": "SELECT AVG(InspectionsPerYear) AS AverageInspectionsPerYear\nFROM (\n    SELECT COUNT(*) / 8.0 AS InspectionsPerYear\n    FROM inspection\n    JOIN employee ON inspection.employee_id = employee.employee_id\n    WHERE employee.first_name = 'Jessica' AND employee.last_name = 'Anthony'\n    AND inspection.inspection_date > '2010-01-01' AND inspection.inspection_date < '2018-01-01'\n)",
    "6191": "SELECT first_name \nFROM employee \nJOIN inspection ON employee.employee_id = inspection.employee_id \nWHERE inspection.inspection_id = 48225",
    "6192": "SELECT employee.address\nFROM employee\nJOIN inspection ON employee.employee_id = inspection.employee_id\nWHERE inspection.inspection_id = 52238",
    "6193": "SELECT e.last_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_id = 52238",
    "6194": "SELECT i.results\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nWHERE e.first_name = 'Thomas' AND e.last_name = 'Langley'",
    "6195": "SELECT e.address\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_date = '2010-11-05'",
    "6196": "SELECT e.phone\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_type = 'Canvass'",
    "6197": "SELECT e.title\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_id = 52269",
    "6198": "SELECT i.results\nFROM inspection i\nJOIN establishment e ON i.license_no = e.license_no\nWHERE e.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'",
    "6199": "SELECT inspection_type\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.dba_name = 'JOHN SCHALLER'",
    "6200": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.inspection_type = 'License'",
    "6201": "SELECT COUNT(*) AS inspections_in_2010_with_serious_issues\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE inspection.inspection_date LIKE '2010%'\nAND establishment.risk_level = 3",
    "6202": "SELECT DISTINCT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.results IN ('Pass', 'Pass w/Conditions')",
    "6203": "SELECT SUM(salary) AS total_salary\nFROM employee\nWHERE employee_id IN (\n    SELECT DISTINCT employee_id\n    FROM inspection\n    WHERE inspection_id BETWEEN 52270 AND 52272\n)",
    "6204": "SELECT AVG(e.salary) AS average_salary\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_type = 'License Re-Inspection'",
    "6205": "SELECT e.results, est.zip\nFROM inspection e\nJOIN establishment est ON e.license_no = est.license_no\nWHERE e.license_no = 1222441",
    "6206": "SELECT MIN(inspection_date) AS first_inspection_date\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE establishment.dba_name = 'JOHN SCHALLER'\nAND inspection.inspection_date LIKE '2010%'",
    "6207": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.license_no = 1334073",
    "6208": "SELECT DISTINCT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN employee emp ON i.employee_id = emp.employee_id\nWHERE emp.first_name = 'Joshua' AND emp.last_name = 'Rosa'",
    "6209": "SELECT COUNT(DISTINCT e.employee_id) AS employees_with_salary_over_70000_and_failed_inspections\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE e.salary > 70000 AND i.results = 'Fail'",
    "6210": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE i.results = 'Pass'\nAND i.inspection_date LIKE '2010%'\nAND e.facility_type = 'restaurant'",
    "6211": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN employee emp ON i.employee_id = emp.employee_id\nWHERE emp.first_name = 'Joshua' AND emp.last_name = 'Rosa'",
    "6212": "SELECT COUNT(DISTINCT e.license_no) AS failed_taverns_in_july_2010\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.facility_type = 'Tavern'\nAND i.results = 'Fail'\nAND i.inspection_date LIKE '2010-07%'",
    "6213": "SELECT e.risk_level\nFROM employee AS emp\nJOIN inspection AS i ON emp.employee_id = i.employee_id\nJOIN establishment AS e ON i.license_no = e.license_no\nWHERE emp.first_name = 'Bob' AND emp.last_name = 'Benson'",
    "6214": "SELECT e.dba_name, i.results\nFROM inspection i\nJOIN employee emp ON i.employee_id = emp.employee_id\nJOIN establishment e ON i.license_no = e.license_no\nWHERE emp.first_name = 'Bob' AND emp.last_name = 'Benson' AND i.inspection_date LIKE '2010%'",
    "6215": "SELECT e.title\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.license_no = 1576687",
    "6216": "SELECT COUNT(*) \nFROM inspection_point \nWHERE point_level = 'Serious' AND fine = 0;",
    "6217": "SELECT \n    (CAST(COUNT(DISTINCT establishment.license_no) AS REAL) / (SELECT COUNT(*) FROM establishment) * 100) AS percentage\nFROM \n    establishment\nJOIN \n    violation ON establishment.license_no = violation.license_no\nWHERE \n    violation.fine = 250",
    "6218": "SELECT \n    (SELECT COUNT(DISTINCT e.license_no) * 1.0 \n     FROM establishment e\n     JOIN inspection i ON e.license_no = i.license_no\n     WHERE e.risk_level = 1 AND i.results = 'Pass') / \n    (SELECT COUNT(DISTINCT e.license_no) \n     FROM establishment e\n     JOIN inspection i ON e.license_no = i.license_no\n     WHERE i.results = 'Pass') * 100 AS percentage_of_risk_level_1",
    "6219": "SELECT address, city, state\nFROM employee\nWHERE first_name = 'Standard' AND last_name = 'Murray'",
    "6220": "SELECT facility_type FROM establishment WHERE dba_name = 'Kinetic Playground'",
    "6221": "SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony'",
    "6222": "SELECT dba_name\nFROM establishment\nWHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant'",
    "6223": "SELECT COUNT(*) AS total_supervisors\nFROM employee\nWHERE title = 'Supervisor'",
    "6224": "SELECT address, city, state, zip\nFROM establishment\nWHERE city = 'CHICAGO' AND facility_type = 'Restaurant' AND dba_name = 'OLD TIMERS REST & LOUNGE'",
    "6225": "SELECT COUNT(*) FROM employee WHERE city = 'Hoffman Estates' AND state = 'IL';",
    "6226": "SELECT COUNT(*) AS total_establishments_with_highest_risk\nFROM establishment\nWHERE risk_level = (SELECT MAX(risk_level) FROM establishment)",
    "6227": "SELECT first_name, last_name FROM employee WHERE salary = 82700;",
    "6228": "SELECT e.last_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.inspection_id = 52256",
    "6229": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN violation v ON i.inspection_id = v.inspection_id\nWHERE e.facility_type = 'Tavern' AND v.fine = 100",
    "6230": "SELECT ip.point_level\nFROM violation v\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE v.fine = 0",
    "6231": "SELECT e.facility_type, e.license_no\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.risk_level = (SELECT MIN(risk_level) FROM establishment)\nAND i.results = 'Fail'",
    "6232": "SELECT i.inspection_id, i.inspection_date, i.results, v.point_id, v.fine, v.inspector_comment\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nLEFT JOIN violation v ON i.inspection_id = v.inspection_id\nWHERE i.inspection_date = '2010-02-24' AND e.first_name = 'Arnold' AND e.last_name = 'Holder'",
    "6233": "SELECT COUNT(DISTINCT i.inspection_id) AS failed_restaurants\nFROM inspection i\nJOIN establishment e ON i.license_no = e.license_no\nWHERE i.results = 'Fail'\nAND i.inspection_date LIKE '2010-04%'\nAND e.facility_type = 'Restaurant'",
    "6234": "SELECT inspection.inspection_id\nFROM inspection\nJOIN employee ON inspection.employee_id = employee.employee_id\nWHERE employee.first_name = 'Rosemary' AND employee.last_name = 'Kennedy'",
    "6235": "SELECT i.inspection_type\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nWHERE i.inspection_date = '2010-07-07' AND e.first_name = 'Lisa' AND e.last_name = 'Tillman'",
    "6236": "SELECT v.inspection_id\nFROM violation v\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE v.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA'\nAND ip.code = '7-38-030, 015, 010 (A), 005 (A)'",
    "6237": "SELECT DISTINCT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.risk_level = (SELECT MAX(risk_level) FROM establishment)\nAND i.results = 'Fail'",
    "6238": "SELECT i.inspection_id\nFROM inspection i\nJOIN employee e ON i.employee_id = e.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE e.first_name = 'David' AND e.last_name = 'Hodges' AND est.dba_name = 'KAMAYAN EXPRESS'",
    "6239": "SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary\nFROM employee\nWHERE employee_id IN (\n    SELECT employee_id\n    FROM inspection\n    WHERE inspection_id = 58424\n)",
    "6240": "SELECT v.inspection_id\nFROM violation v\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE v.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED'\nAND ip.category = 'Personnel'",
    "6241": "SELECT COUNT(DISTINCT e.license_no) AS GroceryStoresWith250Fine\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN violation v ON i.inspection_id = v.inspection_id\nWHERE e.facility_type = 'Grocery Store' AND v.fine = 250",
    "6242": "SELECT i.inspection_type\nFROM inspection i\nJOIN establishment e ON i.license_no = e.license_no\nWHERE e.dba_name = 'J & J FOOD'",
    "6243": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.facility_type = 'Tavern'\nAND i.results = 'Fail'\nAND i.inspection_date LIKE '2010-01%'",
    "6244": "SELECT COUNT(DISTINCT i.inspection_id) AS serious_no_fines\nFROM inspection i\nJOIN violation v ON i.inspection_id = v.inspection_id\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.point_level = 'Serious' AND v.fine = 0",
    "6245": "SELECT e.dba_name\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN violation v ON i.inspection_id = v.inspection_id\nJOIN inspection_point ip ON v.point_id = ip.point_id\nWHERE ip.category = 'No Smoking Regulations'",
    "6246": "SELECT \n    (SELECT COUNT(DISTINCT e.license_no)\n     FROM establishment e\n     JOIN inspection i ON e.license_no = i.license_no\n     WHERE e.facility_type = 'Restaurant'\n     AND i.inspection_type = 'Canvass'\n     AND i.results = 'Pass')\n    -\n    (SELECT COUNT(DISTINCT e.license_no)\n     FROM establishment e\n     JOIN inspection i ON e.license_no = i.license_no\n     WHERE e.facility_type = 'Restaurant'\n     AND i.inspection_type = 'Canvass'\n     AND i.results = 'Fail') AS difference",
    "6247": "SELECT e.first_name, e.last_name\nFROM employee e\nJOIN inspection i ON e.employee_id = i.employee_id\nWHERE i.results = 'Fail'\nAND i.inspection_date LIKE '2010-02%'\nAND e.salary > (SELECT AVG(salary) * 0.7 FROM employee)",
    "6248": "WITH RestaurantFines AS (\n    SELECT e.license_no\n    FROM establishment e\n    JOIN inspection i ON e.license_no = i.license_no\n    JOIN violation v ON i.inspection_id = v.inspection_id\n    WHERE e.facility_type = 'Restaurant' AND v.fine = 500\n),\nTotalFines AS (\n    SELECT e.license_no\n    FROM establishment e\n    JOIN inspection i ON e.license_no = i.license_no\n    JOIN violation v ON i.inspection_id = v.inspection_id\n    WHERE v.fine = 500\n)\nSELECT (CAST(COUNT(DISTINCT rf.license_no) AS REAL) / COUNT(DISTINCT tf.license_no)) * 100 AS percentage_of_restaurants\nFROM TotalFines tf\nLEFT JOIN RestaurantFines rf ON tf.license_no = rf.license_no",
    "6249": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE strftime('%Y', h.date) = '2018'\nORDER BY h.market_cap DESC\nLIMIT 1",
    "6250": "SELECT h.volume_24h\nFROM historical h\nJOIN coins c ON h.coin_id = c.id\nWHERE c.name = 'Argentum' AND h.date = '2016-11-10'",
    "6251": "SELECT \n    date, \n    price,\n    AVG(price) OVER () AS average_price\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE name = 'Zetacoin'\nAND date BETWEEN '2013-11-01' AND '2013-11-07';",
    "6252": "SELECT time_high, time_low\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'WRAP'\nAND strftime('%m', date) = '08'\nAND strftime('%Y', date) = '2016'",
    "6253": "SELECT date\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'DigixDAO'\nORDER BY price DESC\nLIMIT 1",
    "6254": "SELECT c.name, h.date, h.price\nFROM historical h\nJOIN coins c ON h.coin_id = c.id\nORDER BY h.percent_change_24h DESC\nLIMIT 1",
    "6255": "SELECT AVG(circulating_supply) AS average_monthly_circulating_supply\nFROM historical\nWHERE coin_id = (SELECT id FROM coins WHERE name = 'Frozen')\nAND date BETWEEN '2014-01-01' AND '2014-12-31';",
    "6256": "SELECT \n    coins.id,\n    coins.name,\n    MAX(historical.date) AS last_transaction_date\nFROM \n    coins\nJOIN \n    historical ON coins.id = historical.coin_id\nWHERE \n    coins.status = 'inactive'\nGROUP BY \n    coins.id",
    "6257": "SELECT AVG(price) AS average_price_2016\nFROM historical\nWHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC')\nAND strftime('%Y', date) = '2016';",
    "6258": "SELECT date, MIN(price) AS bottomed_price\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bitcoin'",
    "6259": "SELECT c.status\nFROM coins c\nJOIN (\n    SELECT coin_id\n    FROM historical\n    GROUP BY coin_id\n    HAVING AVG(price) > 1000\n) AS high_price_coins ON c.id = high_price_coins.coin_id",
    "6260": "SELECT c.name, h.date\nFROM historical h\nJOIN coins c ON h.coin_id = c.id\nORDER BY h.percent_change_1h ASC\nLIMIT 1",
    "6261": "SELECT c.name\nFROM coins c\nJOIN (\n    SELECT coin_id, MAX(high - low) AS max_profit\n    FROM historical\n    GROUP BY coin_id\n) h ON c.id = h.coin_id\nWHERE c.category = 'token'\nORDER BY h.max_profit DESC\nLIMIT 1",
    "6262": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.date = '2013-06-22'\nAND h.percent_change_24h > (\n    SELECT AVG(percent_change_24h)\n    FROM historical\n    WHERE date = '2013-06-22'\n)",
    "6263": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.cmc_rank = 1 AND h.date = '2013-04-28'",
    "6264": "SELECT price\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bitcoin' AND date = '2013-04-28'",
    "6265": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.date = '2013-05-03' AND h.open IS NULL",
    "6266": "SELECT close\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bitcoin' AND date = '2013-04-29'",
    "6267": "SELECT time_high\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bitcoin' AND date = '2013-04-29'",
    "6268": "SELECT (high - low) AS max_profit\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bitcoin' AND date = '2013-04-28'",
    "6269": "SELECT (max_supply - total_supply) AS bitcoins_burned\nFROM historical\nWHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC')\nAND date <= '2013-04-28'\nORDER BY date DESC\nLIMIT 1;",
    "6270": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.date = '2016-01-08'\nORDER BY h.volume_24h DESC\nLIMIT 1",
    "6271": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.total_supply > 10000000\nAND h.date = '2013-04-28'",
    "6272": "SELECT\n    CASE\n        WHEN percent_change_7d > 0 THEN 'increased'\n        WHEN percent_change_7d < 0 THEN 'decreased'\n        ELSE 'no change'\n    END AS price_change\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bitcoin' AND date = '2013-05-05'",
    "6273": "SELECT coin_id, MAX(circulating_supply) AS max_circulating_supply\nFROM historical\nWHERE date = '2013-04-28'\nGROUP BY coin_id\nORDER BY max_circulating_supply DESC\nLIMIT 1",
    "6274": "SELECT price\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bitcoin' AND date = '2013-04-28'",
    "6275": "SELECT AVG(h.price) AS average_price\nFROM historical h\nJOIN coins c ON h.coin_id = c.id\nWHERE c.name = 'Bitcoin' AND strftime('%Y', h.date) = '2013'",
    "6276": "SELECT \n    (SUM(max_supply) - SUM(total_supply)) / SUM(total_supply) * 100 AS percentage_burned\nFROM \n    historical\nJOIN \n    coins ON historical.coin_id = coins.id\nWHERE \n    coins.symbol = 'BTC'\n    AND date < '2013-04-29';",
    "6277": "SELECT name FROM coins WHERE status = 'extinct';",
    "6278": "SELECT description FROM coins WHERE name = 'BitBar';",
    "6279": "SELECT COUNT(*) AS total_coins_added, GROUP_CONCAT(name) AS coin_names\nFROM coins\nWHERE strftime('%Y', date_added) = '2013' AND strftime('%m', date_added) = '05'",
    "6280": "SELECT name, symbol\nFROM coins\nWHERE date_added LIKE '2013-06-14%'",
    "6281": "SELECT name \nFROM coins \nWHERE status = 'untracked' AND strftime('%Y', date_added) = '2014';",
    "6282": "SELECT name \nFROM coins \nWHERE length(tag_names) - length(replace(tag_names, ',', '')) = 2;",
    "6283": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nORDER BY h.price DESC\nLIMIT 1",
    "6284": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.date = '2013-04-29' AND h.cmc_rank = 1",
    "6285": "SELECT date AS best_time_to_purchase\nFROM historical\nWHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC')\nORDER BY low ASC\nLIMIT 1;",
    "6286": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nORDER BY h.volume_24h DESC\nLIMIT 1",
    "6287": "SELECT DISTINCT coins.name\nFROM coins\nJOIN historical ON coins.id = historical.coin_id\nWHERE year(historical.date) = 2013 AND month(historical.date) = 5 AND historical.open IS NULL",
    "6288": "SELECT h.date\nFROM historical h\nJOIN coins c ON h.coin_id = c.id\nWHERE c.symbol = 'CHNCoin'\nORDER BY h.close DESC\nLIMIT 1",
    "6289": "SELECT date\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Peercoin' AND cmc_rank = 5",
    "6290": "SELECT h.date\nFROM historical h\nJOIN coins c ON h.coin_id = c.id\nWHERE c.name = 'Devcoin'\nORDER BY h.market_cap DESC\nLIMIT 1",
    "6291": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.date = '2014-01-01' AND h.cmc_rank <= 5\nORDER BY h.cmc_rank ASC",
    "6292": "SELECT date\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Lebowskis' AND historical.open IS NULL",
    "6293": "SELECT date \nFROM historical \nJOIN coins ON historical.coin_id = coins.id \nWHERE coins.name = 'Terracoin' \nORDER BY price DESC \nLIMIT 1",
    "6294": "SELECT COUNT(*) AS trades_in_june_2013\nFROM historical\nJOIN coins ON historical.coin_id = coins.id\nWHERE coins.name = 'Bytecoin'\nAND strftime('%Y', historical.date) = '2013'\nAND strftime('%m', historical.date) = '06'",
    "6295": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.date = '2013-04-28' AND h.price > (\n    SELECT AVG(h2.price)\n    FROM historical h2\n    WHERE h2.date = '2013-04-28'\n)",
    "6296": "SELECT c.name\nFROM coins c\nJOIN historical h ON c.id = h.coin_id\nWHERE h.percent_change_1h > 0\nAND h.date = '2013-05-29'",
    "6297": "SELECT COUNT(*) AS DoctorateHolders\nFROM Employees\nWHERE Notes LIKE '%Dr.%' OR Notes LIKE '%Doctorate%';",
    "6298": "ALTER TABLE Employees ADD COLUMN ReportsTo INTEGER REFERENCES Employees(EmployeeID);",
    "6299": "Based on the tables provided, there is no direct table or column for \"HomePhone\" or any specific phone number related to Nancy Davolio. The tables focus on categories, customers, employees, shippers, suppliers, products, orders, and order details. There is no specific table or column for employee home phone numbers or any personal contact information beyond what is provided in the \"Employees\" table, which includes \"LastName\", \"FirstName\", \"BirthDate\", \"Photo\", and \"Notes\". The external knowledge mentioned refers to a \"HomePhone\" which does not exist in the given schema.\n\nTherefore, it's not possible to write an SQL query to fetch Nancy Davolio's home phone number based on the provided table structures and the information given.",
    "6300": "ALTER TABLE Employees ADD COLUMN ReportsTo INTEGER REFERENCES Employees(EmployeeID);",
    "6301": "Given the tables you've provided, there's no table that includes employee salaries, so it's impossible to determine which employee has the highest salary based on the provided schema. The tables related to employees (`Employees`) only include the fields `EmployeeID`, `LastName`, `FirstName`, `BirthDate`, `Photo`, and `Notes`, with no mention of a `Salary` field.\n\nTo answer a question about the highest salary, there would need to be a `Salary` field in the `Employees` table or another related table that includes salary information. Since such information is not present, we cannot construct an SQL query to find the employee with the highest salary.\n\nIf you have additional information or another table that includes employee salaries, please provide that for a more accurate answer.",
    "6302": "SELECT \n    (SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew') -\n    (SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy') AS SalaryDifference;",
    "6303": "SELECT COUNT(*) \nFROM Employees \nJOIN EmployeeDetails ON Employees.EmployeeID = EmployeeDetails.EmployeeID\nWHERE EmployeeDetails.Title = 'Sales Representative' \nAND EmployeeDetails.Country = 'UK';",
    "6304": "Given the tables and the structure provided, there is no direct information or table that links employees to territories or sales regions such as \"Hollis\". The tables defined do not include any references to territories or specific sales regions that employees might be in charge of. Therefore, based on the provided table structures and without additional data or tables linking employees to territories or sales regions, it is not possible to write an SQL query that would accurately answer the question about which employee is in charge of the sales in \"Hollis\".\n\nTo answer such a question, we would need a table that associates employees with territories or sales regions, something like an `EmployeeTerritories` table with `EmployeeID` and `TerritoryDescription` columns. Since such a table is not provided or defined in the given schema, and there's no mention of \"Hollis\" in the external knowledge within the context of the provided tables, it's not feasible to construct an SQL query to find the employee responsible for sales in \"Hollis\" based on the current database schema.\n\nIf you have more specific data or additional tables that were not included in your initial question, please provide them, and I would be happy to help construct an appropriate SQL query.",
    "6305": "Based on the tables provided, there is no direct information about territories or the specific assignment of employees (like Nancy Davolio) to territories. The tables focus on categories, customers, employees, shippers, suppliers, products, orders, and order details. There is no table or field explicitly mentioning territories or linking employees to territories.\n\nTherefore, it's impossible to answer the question about the sales territories Nancy Davolio is in charge of with the given table structures. The necessary data or table linking employees to territories is missing.\n\nIf you have any other questions or need further assistance with the existing tables, feel free to ask!",
    "6306": "SELECT TerritoryDescription\nFROM Territories\nJOIN EmployeeTerritories ON Territories.TerritoryID = EmployeeTerritories.TerritoryID\nJOIN Employees ON EmployeeTerritories.EmployeeID = Employees.EmployeeID\nWHERE Employees.FirstName = 'Nancy' AND Employees.LastName = 'Davolio';",
    "6307": "Based on the tables provided, there is no direct information or table related to \"territories\" that employees are in charge of. The tables focus on categories, customers, employees, shippers, suppliers, products, orders, and order details. There is no mention of territories or a table that links employees to territories. Therefore, it's not possible to answer the question about the sales of territories in London that employees take charge of with the given table structures and information.\n\nIf there were a table linking employees to territories, you would typically join that table with the `Employees` table, filter by the city (e.g., London), and count the distinct territories. However, since such a table does not exist in the provided schema, the question cannot be answered with the given data.",
    "6308": "Based on the tables you've provided, there is no direct information about territories, nor is there a table for territories or a direct link to an employee named Andrew Fuller. The tables you've created include `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`. There is no mention of a table for territories or any field that directly relates to territories within these tables. Additionally, there's no table or field that indicates a reporting structure among employees (e.g., who reports to whom).\n\nTo answer a question about territories and their relationship to employees, especially in terms of reporting to a specific person like Andrew Fuller, we would need additional tables or fields. Typically, this might involve tables such as `Territories`, `EmployeeTerritories`, and possibly an `EmployeeHierarchy` or `ReportsTo` field within the `Employees` table to establish the reporting structure.\n\nGiven the tables you have, it's not possible to construct an SQL query that would accurately answer the question about territories managed by employees reporting to Andrew Fuller. We would need more information or additional tables that include:\n\n1. A `Territories` table that lists territories.\n2. An `EmployeeTerritories` linking table that associates employees with territories.\n3. Information within the `Employees` table or an additional table that indicates the reporting structure among employees, to identify those who report to Andrew Fuller.\n\nIf such tables were available, the SQL query might involve joining these tables together to filter down to the relevant employees and their territories. However, with the current schema, the question cannot be answered.",
    "6309": "SELECT COUNT(DISTINCT e.EmployeeID)\nFROM Employees e\nJOIN EmployeeTerritories et ON e.EmployeeID = et.EmployeeID\nWHERE e.Country = 'UK'\nGROUP BY e.EmployeeID\nHAVING COUNT(et.TerritoryID) > 4;",
    "6310": "It appears there's a misunderstanding in the request. The SQL schema provided does not include tables for Regions or Territories, which would be necessary to answer a question about the number of territories in the Eastern Region. The tables defined are `sqlite_sequence`, `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`. None of these tables contain information about regions or territories.\n\nTo accurately answer a question about the number of territories in the Eastern Region, we would need a table that defines territories and another that possibly links territories to regions (assuming a many-to-many relationship, which is common for territories and regions). Without such tables, it's impossible to construct an SQL query that would provide the number of territories in the Eastern Region based on the schema provided.\n\nIf you have additional tables or information related to regions and territories that were not included in your initial schema, please provide them so that I can assist you more accurately.",
    "6311": "Based on the tables you've provided, there is no direct information about territories or regions within the schema. The tables focus on categories, customers, employees, shippers, suppliers, products, orders, and order details. There is no mention of a table for territories or regions, nor is there a direct link to such data from the tables you've described.\n\nTo answer questions about territories in the Eastern Region, we would need tables that define territories and regions, and a way to link territories to regions (usually through a foreign key relationship). Since such tables are not part of the schema you've provided, it's not possible to write an SQL query that would list all the territories in the Eastern Region based on the given tables.\n\nIf you have additional tables or information related to territories and regions that were not included in your initial schema, please provide them so that a more accurate SQL query can be constructed.",
    "6312": "SELECT COUNT(DISTINCT EmployeeID) \nFROM Employees \nJOIN SalesTerritories ON Employees.EmployeeID = SalesTerritories.EmployeeID \nJOIN Regions ON SalesTerritories.RegionID = Regions.RegionID \nWHERE Regions.RegionDescription = 'Eastern';",
    "6313": "It seems there's a misunderstanding in the question. The tables provided in the SQL schema do not include any information about employees' home phone numbers, sales territories, or regions (such as an \"Eastern Region\"). Specifically, there are no tables or fields related to \"HomePhone\", \"Sales\", \"Territories\", or \"RegionDescription\" in the schema you've provided. \n\nGiven the tables you've shared, it's not possible to directly answer the question about employees' home phone numbers related to sales in the Eastern Region, as the necessary data and relationships are not defined in the schema.\n\nIf you have additional tables or fields that were not included in your initial schema, please provide them so that a more accurate SQL query can be constructed. Otherwise, based on the provided schema, there's no way to formulate an SQL query that would answer the question as posed.",
    "6314": "It seems there's a misunderstanding in the question. The SQL schema provided does not include any tables related to \"Regions\" or \"Territories,\" which are necessary to answer the question about the difference in the number of territories between the Eastern and Southern Regions. The tables created are related to a typical business database, including categories, customers, employees, shippers, suppliers, products, orders, and order details, but there's no mention or creation of tables for \"Regions\" or \"Territories.\"\n\nGiven the tables and schema provided, it's not possible to directly answer the question about the number of territories in the Eastern Region compared to the Southern Region without the relevant tables and data. \n\nIf you have any other questions or need assistance with the existing tables, feel free to ask!",
    "6315": "SELECT Products.ProductName \nFROM Products \nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID \nWHERE OrderDetails.OrderID = 10248;",
    "6316": "SELECT od.Quantity\nFROM OrderDetails od\nJOIN Products p ON od.ProductID = p.ProductID\nWHERE p.ProductName = 'Ikura' AND od.OrderID = 10273",
    "6317": "SELECT SUM(Products.Price * OrderDetails.Quantity) AS TotalPrice\nFROM OrderDetails\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Products.ProductName = 'Ikura' AND OrderDetails.OrderID = 10273",
    "6318": "SELECT ProductID, MAX(Quantity) as MaxQuantity\nFROM OrderDetails\nWHERE OrderID = 10248\nGROUP BY ProductID\nORDER BY MaxQuantity DESC\nLIMIT 1;",
    "6319": "SELECT ProductID, Quantity\nFROM OrderDetails\nWHERE OrderID = 10248;",
    "6320": "SELECT COUNT(DISTINCT o.OrderID) AS NumberOfOrdersForTofu\nFROM Orders o\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nWHERE p.ProductName = 'Tofu'",
    "6321": "SELECT DISTINCT Orders.OrderID\nFROM Orders\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Products.Discontinued = 1;",
    "6322": "SELECT COUNT(DISTINCT od.OrderID)\nFROM OrderDetails od\nJOIN Products p ON od.ProductID = p.ProductID\nWHERE p.ProductName = 'Ikura' AND od.UnitPrice < p.Price;",
    "6323": "SELECT Suppliers.SupplierName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Products.ProductName = 'Aniseed Syrup'",
    "6324": "SELECT Products.ProductName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Suppliers.Country = 'Japan'",
    "6325": "SELECT Suppliers.Phone\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE Products.UnitsOnOrder > Products.UnitsInStock;",
    "6326": "SELECT COUNT(*) \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Products.Discontinued = 1 AND Suppliers.Country = 'USA';",
    "6327": "SELECT Suppliers.SupplierName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nORDER BY Products.Price DESC \nLIMIT 1",
    "6328": "Based on the tables you've provided, there's no table that includes information about salaries or territories directly linked to employees. The tables you've created are for a basic e-commerce or retail database, including categories, customers, employees, shippers, suppliers, products, orders, and order details. There's no mention of a table that includes employee salaries or territories they manage, which would be necessary to calculate the average salary of employees managing more than four territories.\n\nGiven the structure and information provided, it's not possible to write an SQL query to answer the question about the average salary of employees managing more than four territories. To perform such a query, we would need at least two additional tables: one for salaries (linked to employees) and another for territories (also linked to employees, possibly through a junction table if the relationship is many-to-many).\n\nIf you have more information or additional tables that were not included in your initial setup, please provide them so that a more accurate answer can be given.",
    "6329": "SELECT \n    ((Products.Price - OrderDetails.Quantity) / Products.Price) * 100 AS PercentageLower\nFROM \n    OrderDetails\nJOIN \n    Products ON OrderDetails.ProductID = Products.ProductID\nWHERE \n    Products.ProductName = 'Ikura' AND OrderDetails.OrderID = 10273;",
    "6330": "SELECT AVG(Quantity) AS AverageQuantity\nFROM OrderDetails\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Products.ProductName = 'Ikura'",
    "6331": "-- Hypothetical SQL assuming UnitsInStock exists in Products table and interpreting Quantity as UnitsOnOrder\nSELECT \n    Products.ProductID, \n    Products.ProductName, \n    (OrderDetails.Quantity / Products.UnitsInStock) AS Ratio\nFROM \n    OrderDetails\nJOIN \n    Products ON OrderDetails.ProductID = Products.ProductID\nWHERE \n    OrderDetails.OrderID = 10248\nORDER BY \n    Ratio DESC\nLIMIT 1;",
    "6332": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employees\nORDER BY BirthDate DESC\nLIMIT 1",
    "6333": "SELECT FirstName, LastName\nFROM Employees\nORDER BY BirthDate DESC\nLIMIT 1;",
    "6334": "SELECT COUNT(*) AS NumberOfOrdersHandledByMichaelSuyama\nFROM Orders\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Employees.FirstName = 'Michael' AND Employees.LastName = 'Suyama'",
    "6335": "The question you've asked involves retrieving information about the territory where a specific employee, Mr. Robert King, works. However, based on the table schemas provided in your question, there are no tables related to territories or any direct or indirect references to territories or a field that could be interpreted as \"TerritoryDescription\". Additionally, there's no table or field for \"TitleOfCourtesy\" to distinguish titles such as \"Mr.\".\n\nThe tables provided are `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`. None of these tables include information about territories or titles of courtesy. Therefore, it's not possible to construct an SQL query to answer your question based on the given table schemas.\n\nIf you're looking to retrieve information that involves territories or titles of courtesy, you would first need to ensure that your database schema includes tables that contain this information. For example, you might need a `Territories` table and a way to link employees to territories (often through a junction table in many-to-many relationships) and possibly an extension of the `Employees` table schema to include a `TitleOfCourtesy` field.\n\nGiven the current schema, there's no way to accurately answer the question about Mr. Robert King's territory with an SQL query. If you have additional tables or fields that were not included in your initial question, please provide them so that a more accurate answer can be formulated.",
    "6336": "The question you've asked involves understanding external knowledge and applying it to the database schema provided. However, based on the tables you've shared, there's no direct way to answer the question about territories and the hierarchical relationships between employees (such as Ms. Laura Callahan and her direct supervisor) because the necessary tables and columns (like `TitleOfCourtesy`, `ReportsTo`, and `TerritoryDescription`) are not defined in the schema you've provided.\n\nTo answer a question like \"Which territory does Ms. Laura Callahan's direct supervisor work in?\" in a real-world scenario, you would need tables that define employees' titles, their reporting structure, and territories they are responsible for. This might include tables or columns for:\n\n- Employee titles or courtesy titles (e.g., Mr., Ms., etc.)\n- Reporting structure (e.g., a column in the `Employees` table indicating who reports to whom)\n- Territories (a table listing territories and possibly linking them to employees or regions)\n\nSince these elements are not present in the schema you've provided, it's not possible to construct an SQL query that would accurately answer the question about Ms. Laura Callahan's direct supervisor's territory based on the given tables.\n\nIf you have a more detailed schema that includes the necessary information for titles, reporting structures, and territories, please provide that for a more accurate and helpful response.",
    "6337": "Given the tables and structure you've provided, there is no direct information or table related to territories (like a \"Territories\" table) or a direct link between employees and territories (such as an \"EmployeeTerritories\" table). Therefore, based on the schema you've shared, it's impossible to answer the question about who is in charge of the \"Santa Monica\" territory because there's no data or table structure that includes territories or links employees to specific territories.\n\nTo answer a question like \"Who is in charge of the 'Santa Monica' territory?\" with the provided schema, you would need additional tables or fields that link employees to territories. For example, a \"Territories\" table that includes TerritoryID, TerritoryDescription, etc., and an \"EmployeeTerritories\" table that links EmployeeID to TerritoryID.\n\nSince this information is not present in the schema you've provided, there's no SQL query that can be written against this schema to accurately answer the question about the \"Santa Monica\" territory.",
    "6338": "Based on the tables you've provided, there is no direct information or table related to territories (like a \"Territories\" table) or a direct link between employees and territories (like an \"EmployeeTerritories\" table). Additionally, there's no column for a home phone number in the \"Employees\" table or any other table mentioned. The external knowledge hint you've provided cannot be directly applied to the structure of the database as described.\n\nGiven the structure of the tables you've provided, it's not possible to accurately answer the question about the home phone number of the employee in charge of the \"Savannah\" territory because the necessary data and table relationships are not present in the schema you've shared.\n\nIf you have additional tables or columns that were not included in your initial description, please provide them so that a more accurate SQL query can be constructed.",
    "6339": "SELECT SUM(OrderDetails.Quantity) AS TotalQuantity\nFROM OrderDetails\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.CustomerName = 'HILAA' AND Orders.OrderDate = '1997-12-25';",
    "6340": "-- The provided schema does not include a Freight column in any of the tables, \n-- so it's impossible to directly answer the question based on the current schema.\n-- If there was a Freight column in the Orders table, for example, the query might look something like this:\n\nSELECT COUNT(DISTINCT ProductID) AS KindsOfProducts\nFROM OrderDetails\nWHERE OrderID = (\n    SELECT OrderID\n    FROM Orders\n    ORDER BY Freight DESC\n    LIMIT 1\n)",
    "6341": "SELECT ShipperName FROM Shippers\nJOIN Orders ON Shippers.ShipperID = Orders.ShipperID\nWHERE Orders.OrderID = 10585",
    "6342": "SELECT COUNT(*) AS NumberOfOrdersShippedByFederalShipping\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'Federal Shipping'",
    "6343": "SELECT COUNT(*) AS NumberOfDairyProducts\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nWHERE Categories.CategoryName = 'dairy products'",
    "6344": "SELECT CategoryName FROM Categories WHERE CategoryID = (SELECT CategoryID FROM Products WHERE ProductName = 'Tofu')",
    "6345": "SELECT COUNT(*) AS TotalProducts\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Escargots Nouveaux';",
    "6346": "SELECT p.ProductID, p.ProductName\nFROM Products p\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nWHERE s.SupplierName = 'Nord-Ost-Fisch Handelsgesellschaft mbH';",
    "6347": "SELECT COUNT(*) AS NumberOfProducts\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = \"Karkki Oy\"",
    "6348": "SELECT Suppliers.ContactName \nFROM Suppliers \nJOIN Products ON Suppliers.SupplierID = Products.SupplierID \nWHERE Products.ProductName = 'Gudbrandsdalsost'",
    "6349": "SELECT Suppliers.Country\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE Products.ProductName = 'Scottish Longbreads'",
    "6350": "Based on the tables you've provided, there is no table for regions or territories, and thus no direct way to answer the question regarding the number of territories in the \"Northern\" region using the given schema. The tables you've created include `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`, but none of these tables contain information about regions or territories.\n\nTo accurately answer a question about the number of territories in the \"Northern\" region, you would need a table that maps territories to regions, and another table (or field in an existing table) that defines what constitutes a \"region\" (including the \"Northern\" region). Since such tables or fields are not present in the schema you've provided, it's not possible to construct an SQL query to find the number of territories in the \"Northern\" region based on the current database schema.\n\nIf you have additional tables or fields related to regions and territories that were not included in your initial schema, please provide them so that a more accurate SQL query can be constructed.",
    "6351": "Given the tables and relationships you've provided, there is no direct reference to a \"Region\" or \"TerritoryDescription\" within the schema. The tables you've created include `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`. None of these tables contain fields for \"Region\" or \"TerritoryDescription\", and there is no table provided that directly relates to regions or territories, including \"Columbia\".\n\nTo answer a question about the region of \"Columbia\" based on the provided schema, we would need additional tables or fields that define regions or territories and their relationships to the entities you've defined (such as customers, suppliers, or employees being associated with a specific region). Without such information, it's not possible to construct an SQL query that would accurately answer the question about which region \"Columbia\" is in, based on the tables and fields you've provided.\n\nIf you have additional tables or fields that were not included in your initial schema that relate to regions or territories, please provide those details for a more accurate and helpful response.",
    "6352": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM Orders \n     JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID \n     JOIN Customers ON Orders.CustomerID = Customers.CustomerID \n     WHERE Customers.CustomerName = 'WHITC' AND Shippers.ShipperName = 'United Package') \n    / \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM Orders \n     JOIN Customers ON Orders.CustomerID = Customers.CustomerID \n     WHERE Customers.CustomerName = 'WHITC') \n    * 100 AS Percentage",
    "6353": "SELECT \n    ((CAST((SELECT COUNT(*) FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE ShipperName = 'United Package') AS REAL) - \n    CAST((SELECT COUNT(*) FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE ShipperName = 'Speedy Express') AS REAL)) / \n    (SELECT COUNT(*) FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE ShipperName = 'Speedy Express')) * 100 AS PercentageDifference",
    "6354": "CREATE TABLE Regions (\n    RegionID INTEGER PRIMARY KEY AUTOINCREMENT,\n    RegionDescription TEXT\n);\n\nCREATE TABLE Territories (\n    TerritoryID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TerritoryDescription TEXT,\n    RegionID INTEGER,\n    FOREIGN KEY (RegionID) REFERENCES Regions (RegionID)\n);",
    "6355": "SELECT COUNT(CustomerID) AS NumberOfCustomers\nFROM Customers\nWHERE Country = (\n    SELECT Country\n    FROM Customers\n    GROUP BY Country\n    ORDER BY COUNT(CustomerID) DESC\n    LIMIT 1\n)",
    "6356": "SELECT OrderID\nFROM Orders\nWHERE Freight > 800;",
    "6357": "SELECT Address, City, PostalCode, Country\nFROM Customers\nWHERE CustomerName = 'Island Trading'",
    "6358": "SELECT ProductName \nFROM Products \nORDER BY Price DESC \nLIMIT 1",
    "6359": "SELECT COUNT(*) AS NumberOfSuppliersInUSA\nFROM Suppliers\nWHERE Country = 'USA'",
    "6360": "The provided schema and the external knowledge note mention \"highest user satisfaction refers to max(ReorderLevel)\", but there's no `ReorderLevel` field in the `Products` table or any other table in the schema provided. It seems there might be a misunderstanding or a missing part of the schema related to tracking user satisfaction or product reorder levels.\n\nGiven the tables and fields you've provided, there's no direct way to determine which product has the highest user satisfaction because the necessary data (like a `ReorderLevel` or any user satisfaction metric) is not included in the schema.\n\nIf you're looking for a query based on the existing schema, we can't directly answer the question about user satisfaction without the relevant data field. If there's a specific metric or additional table that should be considered, please provide that information for a more accurate response.",
    "6361": "-- The provided schema does not include a table or column for employee salaries, so it's impossible to determine the employee with the highest salary based on the given information.",
    "6362": "The provided schema does not include any information or field related to whether a product is discontinued or not. Therefore, based on the given table structures, it is impossible to determine which products are discontinued as there is no 'Discontinued' field or any equivalent in the `Products` table or any other table. \n\nTo answer questions about discontinued products, a field indicating the discontinued status (e.g., a boolean `Discontinued` field) would need to be present in the `Products` table. Since such a field is not part of the provided schema, we cannot write an SQL query to fetch the names of discontinued products.\n\nIf you have any additional information or if there's a specific field that should be interpreted as indicating a product's discontinued status, please provide that for a more accurate response.",
    "6363": "Based on the tables provided, there is no table that includes both a \"Salary\" field and a \"Title\" or \"Country\" field that would allow us to directly answer the question about the average salary of sales representatives in the United Kingdom. It seems there might be a misunderstanding or a missing table that includes employee titles, salaries, and perhaps a link to their country of operation.\n\nGiven the tables you've provided, there's no way to directly query for the average salary of sales representatives in the United Kingdom because:\n\n1. There's no \"Salary\" column in any of the tables.\n2. There's no \"Title\" column that would indicate an employee's role as a \"Sales Representative\".\n3. The \"Country\" column exists in the \"Customers\" and \"Suppliers\" tables but not in a way that relates to where employees work or their salaries.\n\nIf there were a table named `EmployeeDetails` or similar, which included `EmployeeID`, `Title`, `Salary`, and `Country`, then we could construct a query to find the average salary of sales representatives in the UK. Without such information, it's not possible to fulfill the request with the provided schema.\n\nIf you have additional tables or fields not listed in your initial setup that include this information, please provide them so that a more accurate SQL query can be constructed.",
    "6364": "SELECT \n    Shippers.ShipperName, \n    COUNT(Orders.OrderID) AS TotalOrders\nFROM \n    Orders\nJOIN \n    Shippers ON Orders.ShipperID = Shippers.ShipperID\nGROUP BY \n    Orders.ShipperID\nORDER BY \n    TotalOrders DESC\nLIMIT 1;",
    "6365": "SELECT COUNT(*) AS NumberOfProducts\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Pavlova, Ltd.'",
    "6366": "SELECT COUNT(*) AS NumberOfOrders\nFROM Orders\nWHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'GREAL')\nAND ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'United Package');",
    "6367": "-- This is a hypothetical query and will not work with the provided schema as there's no UserSatisfaction or ReorderLevel field.\nSELECT Suppliers.SupplierName\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE Products.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);",
    "6368": "SELECT COUNT(*) AS NumberOfOrdersShippedByUnitedPackage\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'United Package';",
    "6369": "SELECT COUNT(DISTINCT SupplierID) \nFROM Suppliers \nWHERE Country = 'Australia' \nAND SupplierID IN (\n    SELECT SupplierID \n    FROM Products \n    WHERE Discontinued = 1\n);",
    "6370": "SELECT SUM(Price) AS TotalPurchasePrice\nFROM (\n    SELECT Price\n    FROM Products\n    ORDER BY Price DESC\n    LIMIT 2\n)",
    "6371": "SELECT s.SupplierName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nGROUP BY s.SupplierID\nORDER BY COUNT(p.ProductID) DESC\nLIMIT 1",
    "6372": "SELECT DISTINCT Products.ProductName\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nWHERE Products.Price <= 5",
    "6373": "It seems there's a misunderstanding in the question. The tables provided in the SQL schema do not include any information about territories or a direct way to count territories per employee. Specifically, there's no `Territories` table or any table that links employees to territories (like an `EmployeeTerritories` table that would typically contain `EmployeeID` and `TerritoryID` columns). Therefore, based on the given schema, it's impossible to answer the question about the title of the employee with the highest number of territories in charge.\n\nIf you have additional tables or information that includes territories and their relationship to employees, please provide that for a more accurate answer. Otherwise, based on the current schema, there's no way to construct an SQL query to find the title of the employee with the highest number of territories.",
    "6374": "SELECT ProductID, COUNT(ProductID) AS ProductCount\nFROM OrderDetails\nGROUP BY ProductID\nORDER BY ProductCount DESC\nLIMIT 1",
    "6375": "The provided SQL schema does not include any information about employee titles, territories, or a direct way to associate employees with territories (such as a TitleOfCourtesy field or a Territories table). Therefore, based on the given tables and fields, it's not possible to answer the question about the territories for which an employee with a doctorate (or any specific title) is responsible. \n\nTo accurately answer such a question, additional tables and fields would be needed, such as an `EmployeeTitles` table linking employees to their titles (including doctorates) and an `EmployeeTerritories` table linking employees to territories, along with a `Territories` table containing territory descriptions.\n\nSince the required information and tables are not present in the provided schema, the question cannot be answered with the given data.",
    "6376": "SELECT TerritoryDescription\nFROM Territories\nJOIN Regions ON Territories.RegionID = Regions.RegionID\nWHERE RegionDescription = 'Eastern';",
    "6377": "Given the tables and structure you've provided, there is no table for \"Territories\" or a field for \"Title\" within the \"Employees\" table or any other table. Therefore, it's not possible to directly answer the question about the average number of territories each sales representative is in charge of based on the provided schema. \n\nThe question seems to assume a more complex database schema than what has been shared. For the question to be answerable, we would need at least two additional tables: one to define the territories and another to link employees to territories (assuming a many-to-many relationship, which is common for sales territories). Additionally, we would need a \"Title\" field in the \"Employees\" table or another mechanism to identify an employee as a sales representative.\n\nGiven the current schema, there's no way to implement the SQL query for the requested information. If you have more details or if there's a specific schema you're working with that includes these elements, please provide that for further assistance.",
    "6378": "The provided schema and the question mention a term \"ReorderLevel\" which is not present in the schema provided. The schema includes tables for categories, customers, employees, shippers, suppliers, products, orders, and order details, but there is no direct mention or field related to \"customer satisfaction\" or \"ReorderLevel\" in the given tables.\n\nGiven the discrepancy, it's not possible to directly answer the question about which beverage product has the highest customer satisfaction based on \"ReorderLevel\" because the \"ReorderLevel\" field is not defined in any of the tables provided.\n\nHowever, if we were to assume that the \"ReorderLevel\" or a proxy for customer satisfaction could be inferred from the available data (e.g., by looking at the quantity of products ordered or similar), we would still lack the necessary field or data to make such an inference.\n\nIf the \"ReorderLevel\" was intended to be a part of the \"Products\" table or if there was another mechanism intended to measure customer satisfaction, it would be necessary to have that information included in the schema to accurately construct a SQL query to find the beverage product with the highest customer satisfaction.\n\nGiven the information provided, it's not feasible to construct a SQL query to accurately answer the question as posed. If additional information or clarification regarding the \"ReorderLevel\" or how customer satisfaction is measured within this schema is provided, it would be possible to attempt to construct a more accurate response.",
    "6379": "SELECT e.FirstName || ' ' || e.LastName AS FullName\nFROM Employees e\nJOIN Orders o ON e.EmployeeID = o.EmployeeID\nGROUP BY e.EmployeeID\nORDER BY COUNT(o.OrderID) DESC\nLIMIT 1",
    "6380": "SELECT COUNT(OrderDetails.ProductID) AS NumberOfProducts\nFROM OrderDetails\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nWHERE Orders.Freight = (SELECT MAX(Freight) FROM Orders);",
    "6381": "SELECT \n    Products.ProductID, \n    Products.ProductName, \n    (UnitsInStock + UnitsOnOrder) AS TotalProduction\nFROM \n    Products\n    JOIN Categories ON Products.CategoryID = Categories.CategoryID\nWHERE \n    Categories.CategoryName = 'Seafood'\nORDER BY \n    TotalProduction DESC\nLIMIT 1;",
    "6382": "It seems there's a misunderstanding in the question. The SQL schema provided does not include any tables related to salaries, territories, or any direct way to determine the number of territories an employee is in charge of. Specifically, there are no tables or fields named `Salary` or `TerritoryID`, and no explicit relationship between employees and territories is defined in the provided schema.\n\nGiven the tables you've provided (`Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, `OrderDetails`), there's no way to directly answer a question about the difference in salary of the top 2 employees with the highest number of territories in charge, as neither salaries nor territories are represented in the schema.\n\nIf you have a different question related to the provided schema or if there's additional information or tables not included in your initial message, please provide that for a more accurate response.",
    "6383": "SELECT AVG(Price) AS AveragePrice\nFROM Products\nWHERE UnitsInStock > 50;",
    "6384": "SELECT CustomerName \nFROM Customers \nWHERE City = (\n    SELECT City \n    FROM Customers \n    GROUP BY City \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
    "6385": "SELECT CustomerName AS CompanyName, ContactName, 'Customer' AS ContactTitle\nFROM Customers\nWHERE City = 'Madrid'",
    "6386": "SELECT FirstName || ' ' || LastName AS FullName, Phone AS ContactNumber\nFROM Employees\nORDER BY BirthDate ASC LIMIT 1",
    "6387": "SELECT AVG(Products.Price) AS AveragePrice\nFROM Orders\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.Country = 'UK';",
    "6388": "SELECT \n    ProductID, \n    SUM(Quantity) AS TotalQuantity\nFROM \n    OrderDetails\nGROUP BY \n    ProductID\nORDER BY \n    TotalQuantity DESC\nLIMIT 1;",
    "6389": "SELECT Suppliers.SupplierName, Suppliers.Address, Suppliers.Phone\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE Products.Price > 30",
    "6390": "SELECT DISTINCT c.CustomerName, c.Address\nFROM Customers c\nJOIN Orders o ON c.CustomerID = o.CustomerID\nWHERE o.Freight > (SELECT AVG(Freight) FROM Orders)",
    "6391": "SELECT e.FirstName || ' ' || e.LastName AS FullName\nFROM Employees e\nJOIN EmployeeTerritories et ON e.EmployeeID = et.EmployeeID\nJOIN Territories t ON et.TerritoryID = t.TerritoryID\nWHERE t.TerritoryDescription = 'Wilton';",
    "6392": "-- This is a hypothetical answer assuming there was a Discontinued column in the Products table.\nSELECT DISTINCT Suppliers.SupplierName\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE Suppliers.Country <> 'USA' AND Products.Discontinued = 1;",
    "6393": "SELECT \n    Products.ProductID, \n    Products.ProductName, \n    AVG(Products.Price) AS AveragePrice\nFROM \n    Products\nJOIN \n    OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN \n    Orders ON OrderDetails.OrderID = Orders.OrderID\nWHERE \n    Orders.OrderDate >= '1998-01-01 00:00:00' \n    AND Orders.OrderDate < '1999-01-01 00:00:00'\nGROUP BY \n    Products.ProductID, Products.ProductName\nORDER BY \n    AveragePrice DESC\nLIMIT 5;",
    "6394": "SELECT COUNT(DISTINCT Orders.OrderID) AS NumberOfOrders\nFROM Customers\nJOIN Orders ON Customers.CustomerID = Orders.CustomerID\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Customers.Country = 'Canada' AND Shippers.ShipperName = 'Federal Shipping'",
    "6395": "SELECT Products.ProductName, COUNT(OrderDetails.OrderID) AS NumberOfOrders\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nGROUP BY Products.ProductName\nORDER BY NumberOfOrders DESC\nLIMIT 10",
    "6396": "SELECT Suppliers.SupplierID, Suppliers.SupplierName, COUNT(Products.ProductID) AS ProductCount\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nGROUP BY Suppliers.SupplierID\nORDER BY ProductCount DESC\nLIMIT 1",
    "6397": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employees\nORDER BY FullName ASC;",
    "6398": "SELECT \n    e.FirstName || ' ' || e.LastName AS FullName,\n    COUNT(o.OrderID) AS TotalOrders\nFROM \n    Employees e\nJOIN \n    Orders o ON e.EmployeeID = o.EmployeeID\nWHERE \n    o.OrderDate >= '1996-01-01 00:00:00' AND o.OrderDate < '1997-01-01 00:00:00'\nGROUP BY \n    e.EmployeeID\nORDER BY \n    TotalOrders DESC\nLIMIT 1;",
    "6399": "SELECT AVG(Products.Price) AS AverageUnitPrice\nFROM Orders\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'United Package'\nAND Orders.OrderDate >= '1997-01-01 00:00:00' AND Orders.OrderDate < '1998-01-01 00:00:00';",
    "6400": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM Orders \n     WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express')) / \n    (SELECT CAST(COUNT(*) AS REAL) FROM Orders) * 100 AS PercentageShippedBySpeedyExpress",
    "6401": "-- The provided schema does not include a table or column for salaries or courtesy titles for employees. \n-- Therefore, it is impossible to write an SQL query to find the courtesy title of the 3 employees with the lowest salary based on the given schema.",
    "6402": "Given the tables and the structure provided, there is no direct way to determine the reporting hierarchy or the title of employees such as \"Vice President of Sales\" because the table `Employees` does not contain any column that indicates the employee's title or to whom they report. The `Employees` table only includes `EmployeeID`, `LastName`, `FirstName`, `BirthDate`, `Photo`, and `Notes`.\n\nTo accurately answer the question regarding the last name of employees who must report to the Vice President of Sales, additional information or tables that describe the organizational structure, job titles, or reporting lines would be required. \n\nFor example, a table that maps employees to their supervisors or a column in the `Employees` table that specifies the job title of each employee would be necessary. Since such information is not provided in the current schema, it's not possible to construct an SQL query that would accurately answer the question based on the existing tables.\n\nIf in the future, the database schema is updated to include this information, an SQL query could be constructed to find the desired information.",
    "6403": "SELECT MAX(TotalPrice) AS HighestTotalPrice\nFROM (\n    SELECT od.OrderID, SUM(p.Price * od.Quantity) AS TotalPrice\n    FROM OrderDetails od\n    INNER JOIN Products p ON od.ProductID = p.ProductID\n    GROUP BY od.OrderID\n)",
    "6404": "SELECT ProductID, SUM(Quantity) AS TotalQuantity\nFROM OrderDetails\nGROUP BY ProductID\nORDER BY TotalQuantity DESC\nLIMIT 3;",
    "6405": "SELECT p.ProductID\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nGROUP BY p.ProductID\nORDER BY p.Price DESC, COUNT(od.OrderID) ASC\nLIMIT 10",
    "6406": "SELECT COUNT(*) \nFROM Products \nJOIN Categories ON Products.CategoryID = Categories.CategoryID \nWHERE Categories.CategoryName = 'Dairy Products' AND Products.Discontinued = 0;",
    "6407": "Given the tables and relationships you've provided, there's no direct way to answer the question about territories for the \"Inside Sales Coordinator\" because the tables related to territories or job titles (such as an \"Employees\" table with a \"Title\" field or a \"Territories\" table) are not defined in the schema you've shared. \n\nTo answer a question about which territories an \"Inside Sales Coordinator\" is in charge of, we would need additional tables that link employees to their job titles and territories. Typically, this might involve tables like \"EmployeeTerritories\" linking employees to territories and perhaps an \"EmployeeTitles\" table or a \"Title\" field in the \"Employees\" table to specify job titles.\n\nSince these tables are not present in the schema you've provided, it's impossible to construct an SQL query that would accurately answer the question based on the existing tables alone. \n\nIf you have more information or additional tables that were not included in your initial schema, please provide them so that a more accurate answer can be given.",
    "6408": "SELECT c.CustomerName AS CompanyName, SUM(od.Quantity * p.Price) AS TotalOrderValue\nFROM Customers c\nJOIN Orders o ON c.CustomerID = o.CustomerID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nGROUP BY c.CustomerID\nHAVING TotalOrderValue > 2000000;",
    "6409": "SELECT ShipperName, COUNT(*) AS Shipments\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.City = 'Aachen'\nGROUP BY ShipperName\nORDER BY Shipments DESC\nLIMIT 1;",
    "6410": "Based on the tables you've provided, there is no table that directly contains information about regions (like a `Regions` table) or a direct link between employees and regions (such as an `EmployeeRegions` table or a `RegionID` column in the `Employees` table). Therefore, it's impossible to directly answer the question about listing the full names of all employees who work in the Northern region with the given schema.\n\nTo accurately answer such a question, additional information or tables linking employees to regions would be necessary. For example, a table that associates employees with regions or a column in the `Employees` table indicating the region each employee works in would be required.\n\nGiven the current schema, there's no way to determine the region where an employee works, hence no SQL query can be formulated to answer the question as requested.",
    "6411": "SELECT Suppliers.ContactName\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE Products.ProductName = 'Pavlova'",
    "6412": "SELECT DISTINCT Products.ProductName\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.City = 'Paris';",
    "6413": "SELECT p.ProductName\nFROM Products p\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nJOIN Orders o ON od.OrderID = o.OrderID\nJOIN Customers c ON o.CustomerID = c.CustomerID\nWHERE c.PostalCode = '28023'\nGROUP BY p.ProductName\nORDER BY SUM(od.Quantity) ASC\nLIMIT 1",
    "6414": "Given the tables and relationships you've provided, there's no direct way to answer the question about the \"Southern region\" and reporting structures (such as who reports to Andrew Fuller) because the tables you've shared do not include any information about regions or hierarchical reporting structures among employees. Specifically, there's no table for regions or a field linking employees to their supervisors or regions they are responsible for.\n\nTo accurately answer a question about an employee in charge of the Southern region who reports to Andrew Fuller, we would need additional tables or fields that capture:\n\n1. The relationship between employees (such as a supervisor ID field in the Employees table to indicate who reports to whom).\n2. Information about regions and which employees are responsible for them (this could be a Regions table and a field in the Employees table linking each employee to their region).\n\nWithout such information, it's impossible to construct an SQL query that would accurately answer the question based on the current database schema you've provided. \n\nIf you have more details or additional tables that were not included in your initial description, please share them, and I'd be happy to help construct the appropriate SQL query.",
    "6415": "SELECT Orders.OrderDate\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Customers.CustomerName = 'Du monde entier' AND Products.ProductName = 'Filo Mix' AND OrderDetails.Quantity = 9",
    "6416": "SELECT DISTINCT Categories.CategoryName\nFROM Categories\nJOIN Products ON Categories.CategoryID = Products.CategoryID\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nWHERE Orders.OrderID = 10933;",
    "6417": "Based on the tables and relationships you've provided, there is no direct way to answer the question regarding the employee in charge of the \"Portsmouth territory\" and their phone number. The tables you've shared do not include any information about territories or the specific relationship between employees and territories. Additionally, there is no \"HomePhone\" or similar field in the `Employees` table or any other table that could directly answer the question about the phone number for the employee in charge of a specific territory.\n\nTo accurately answer a question like this, we would need a table that links employees to territories (e.g., an `EmployeeTerritories` table) and possibly more explicit information on how to connect an employee's phone information (since the `Employees` table does not include a phone number field as per the schema you've provided).\n\nIf you have additional tables or fields that were not included in your initial schema, please provide them for a more accurate answer. Without such information, it's not possible to construct an SQL query that would fulfill the requirements of your question.",
    "6418": "SELECT AVG(OrderDetails.Quantity) AS AverageQuantity\nFROM OrderDetails\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'Federal Shipping'\nAND strftime('%Y-%m', Orders.OrderDate) = '1996-11';",
    "6419": "WITH SeptemberShipments AS (\n    SELECT COUNT(*) AS SeptCount\n    FROM Orders\n    JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n    WHERE ShipperName = 'United Package'\n    AND strftime('%Y-%m', OrderDate) = '1996-09'\n),\nYearlyShipments AS (\n    SELECT COUNT(*) AS YearlyCount\n    FROM Orders\n    JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n    WHERE ShipperName = 'United Package'\n    AND strftime('%Y', OrderDate) = '1996'\n)\nSELECT (CAST(SeptCount AS REAL) / YearlyCount) * 100 AS Percentage\nFROM SeptemberShipments, YearlyShipments;",
    "6420": "SELECT COUNT(*) AS OwnersInMexico\nFROM Customers\nWHERE Country = 'Mexico';",
    "6421": "SELECT Address || ', ' || City || ', ' || PostalCode || ', ' || Country AS FullAddress\nFROM Customers\nWHERE ContactName = 'Andr Fonseca'",
    "6422": "SELECT SupplierName AS CompanyName FROM Suppliers WHERE Phone LIKE '(171)%'\nUNION\nSELECT ShipperName AS CompanyName FROM Shippers WHERE Phone LIKE '(171)%';",
    "6423": "SELECT \n  (SELECT COUNT(*) FROM Employees WHERE Country = 'UK' AND Title = 'Sales Representative') -\n  (SELECT COUNT(*) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative') AS Difference;",
    "6424": "SELECT COUNT(*) AS NumberOfCustomersInSaoPaulo\nFROM Customers\nWHERE City = 'Sao Paulo' AND Country = 'Brazil';",
    "6425": "SELECT Employees.LastName\nFROM Orders\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Orders.OrderID = 10521;",
    "6426": "Given the structure of the tables you've provided, there's no direct column for shipping cost in any of the tables. Typically, shipping cost might be calculated based on various factors such as the weight of the products, the distance to the shipping address, or a flat rate. Since none of these details are provided in the table structures, and there's no explicit 'ShippingCost' field in the 'Orders' table or any related table, it's impossible to directly query for the shipping cost of order number 10692 for Alfreds Futterkiste or any other order based on the given schema.\n\nIf you're looking for a way to calculate or retrieve shipping costs, you would need additional information or a different table structure that includes shipping costs explicitly or the data necessary to calculate it.\n\nTherefore, based on the provided schema and information, the question about the shipping cost for order number 10692 from the company Alfreds Futterkiste cannot be answered with an SQL query.",
    "6427": "SELECT Shippers.ShipperName \nFROM Orders \nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID \nWHERE Orders.OrderID = 10558;",
    "6428": "SELECT Orders.OrderID\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'Speedy Express'\nLIMIT 3;",
    "6429": "SELECT Products.ProductName \nFROM Products \nJOIN Categories ON Products.CategoryID = Categories.CategoryID \nWHERE Categories.CategoryName = 'beverage';",
    "6430": "SELECT c.Description\nFROM Categories c\nJOIN Products p ON c.CategoryID = p.CategoryID\nWHERE p.ProductName = 'tofu'",
    "6431": "SELECT Suppliers.SupplierName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Products.ProductName = 'Gula Malacca'",
    "6432": "SELECT ProductName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Suppliers.SupplierName = 'Aux joyeux ecclsiastiques'",
    "6433": "SELECT Price FROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE ProductName = 'Konbu' AND SupplierName = \"Mayumi's\"",
    "6434": "SELECT Suppliers.ContactName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Products.ProductName = 'Camembert Pierrot'",
    "6435": "SELECT ProductName \nFROM Products \nJOIN Categories ON Products.CategoryID = Categories.CategoryID \nWHERE Categories.CategoryName = 'Meat/Poultry' AND Discontinued = 1 \nLIMIT 3;",
    "6436": "SELECT ProductName\nFROM Products\nJOIN CompanyPurchases ON Products.ProductID = CompanyPurchases.ProductID\nJOIN ProductReviews ON Products.ProductID = ProductReviews.ProductID\nWHERE CompanyName = 'Heli Swaren GmbH & Co. KG'\nORDER BY SatisfactionLevel DESC\nLIMIT 2;",
    "6437": "SELECT ContactName FROM Suppliers WHERE SupplierName = 'Heli Swaren GmbH & Co. KG';",
    "6438": "SELECT Country FROM Suppliers WHERE SupplierName = 'Drachenblut Delikatessen'",
    "6439": "SELECT 'There are no territories defined in the provided table schema.' AS Answer;",
    "6440": "SELECT MAX(TotalPrice) AS LargestTotalPrice\nFROM (\n    SELECT od.OrderID, SUM(p.Price * od.Quantity) AS TotalPrice\n    FROM OrderDetails od\n    JOIN Products p ON od.ProductID = p.ProductID\n    GROUP BY od.OrderID\n)",
    "6441": "SELECT ProductName \nFROM Products \nORDER BY Price DESC \nLIMIT 1",
    "6442": "SELECT COUNT(*) FROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.Country = 'France';",
    "6443": "SELECT RegionName\nFROM Regions\nWHERE City = 'Hoffman Estates';",
    "6444": "SELECT Suppliers.SupplierName, Suppliers.ContactName, Suppliers.Address, Suppliers.City, Suppliers.PostalCode, Suppliers.Country, Suppliers.Phone\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Products.ProductName = 'Thringer Rostbratwurst';",
    "6445": "SELECT DISTINCT Employees.FirstName\nFROM Employees\nJOIN Orders ON Employees.EmployeeID = Orders.EmployeeID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.City = 'Reims';",
    "6446": "SELECT MAX(Quantity) AS LargestQuantity\nFROM OrderDetails\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Products.ProductName = 'Manjimup Dried Apples'",
    "6447": "SELECT COUNT(*) AS NumberOfOrdersShippedBySpeedyExpress\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'Speedy Express'",
    "6448": "Based on the tables you've provided, there is no table for Regions or Territories, and thus no direct way to query territories in the Southern region from the given schema. The external knowledge you've mentioned cannot be applied directly to the tables you've created because there is no table or column related to TerritoryDescription or RegionDescription in the schema provided.\n\nTo answer questions about territories in the Southern region based on the schema you've given, you would first need a table that includes territories and their corresponding regions. If such a table existed, you could then write a SQL query to find all territories in the Southern region.\n\nHowever, since we're working with the tables you've provided, and there's no table related to territories or regions, it's not possible to write a SQL query to list all territories in the Southern region based on the current schema.\n\nIf you have any other questions or need further assistance with the existing tables, feel free to ask!",
    "6449": "SELECT Products.ProductName, Products.Price\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nWHERE Categories.Description = 'Cheeses';",
    "6450": "SELECT COUNT(*) AS NumberOfOrders\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.CustomerName = 'Laughing Bacchus Wine Cellars';",
    "6451": "SELECT Products.ProductName\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.Address = 'Starenweg 5'",
    "6452": "SELECT Products.ProductName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Suppliers.SupplierName = 'Bigfoot Breweries'",
    "6453": "Based on the tables provided in your question, there is no table that directly contains information about territories or the relationship between employees and territories. Therefore, it's not possible to write an SQL query to fetch the names of Robert King's territories from the given schema.\n\nTo answer such a question, we would need a table that links employees to territories, possibly named something like `EmployeeTerritories`, and a table named `Territories` that contains the names or descriptions of the territories. Since these tables are not present in the schema you've provided, we cannot construct an SQL query to fetch the territories associated with Robert King or any other employee.\n\nIf you have additional tables that were not included in your initial question, please provide them so that a more accurate SQL query can be constructed.",
    "6454": "SELECT DISTINCT Customers.ContactName\nFROM Customers\nJOIN Orders ON Customers.CustomerID = Orders.CustomerID\nWHERE Orders.ShipCountry = 'Switzerland';",
    "6455": "-- Hypothetical SQL assuming we can identify Sales Representatives\nSELECT\n    (SELECT CAST(COUNT(*) AS REAL) FROM Orders WHERE EmployeeID IN \n        (SELECT EmployeeID FROM Employees WHERE Notes LIKE '%Sales Representative%'))\n    /\n    (SELECT COUNT(*) FROM Orders) AS SalesRepOrderProportion;",
    "6456": "CREATE TABLE Employees\n(\n    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n    LastName TEXT,\n    FirstName TEXT,\n    BirthDate DATE,\n    Photo TEXT,\n    Notes TEXT\n)",
    "6457": "-- The provided schema does not include a table or column for storing employee salaries. Therefore, it is impossible to calculate the average salary for employees with IDs from 1 to 9 based on the given schema.",
    "6458": "SELECT SUM(Salary) AS TotalSalaryUK\nFROM Employees\nWHERE Country = 'UK';",
    "6459": "SELECT 'No' AS IsHomePhone\nWHERE NOT EXISTS (\n    SELECT 1 FROM Employees\n    WHERE FirstName = 'Laura' AND LastName = 'Callahan' AND Phone = '(206) 555-1189'\n)",
    "6460": "SELECT e.Notes\nFROM Employees e\nJOIN Salaries s ON e.EmployeeID = s.EmployeeID\nORDER BY s.Salary DESC\nLIMIT 1;",
    "6461": "SELECT DISTINCT o.CustomerID\nFROM Orders o\nJOIN Employees e ON o.EmployeeID = e.EmployeeID\nWHERE e.FirstName = 'Michael' AND e.LastName = 'Suyama'",
    "6462": "SELECT DISTINCT Customers.Country AS ShipCountry\nFROM Employees\nJOIN Orders ON Employees.EmployeeID = Orders.EmployeeID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Employees.FirstName = 'Janet' AND Employees.LastName = 'Leverling'",
    "6463": "SELECT COUNT(*) AS NumberOfOrders\nFROM Orders\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Employees.FirstName = 'Margaret' AND Employees.LastName = 'Peacock';",
    "6464": "The provided schema does not include a table with salary information for employees, including Andrew Fuller. Therefore, it's not possible to directly calculate the average salary per order for Andrew Fuller or any other employee based on the given tables. \n\nTo perform such a calculation, we would need a table that includes `EmployeeID` and `Salary` columns. If such a table existed, we could then join it with the `Orders` table on `EmployeeID` to calculate the average salary per order for a specific employee. \n\nGiven the absence of salary information in the schema, it's not feasible to provide an SQL query that accurately answers the question as posed. \n\nIf you have additional information or another question regarding the provided schema, feel free to ask!",
    "6465": "SELECT Products.ProductName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Suppliers.SupplierName = 'Exotic Liquids'",
    "6466": "SELECT Products.ProductName, Products.Unit, OrderDetails.Quantity\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nWHERE Suppliers.SupplierName = \"Tokyo Traders\"",
    "6467": "SELECT COUNT(*) AS DiscontinuedProducts\nFROM Products p\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nWHERE s.SupplierName = 'New Orleans Cajun Delights' AND p.Discontinued = 1;",
    "6468": "SELECT AVG(Price) AS AvgUnitPrice\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Formaggi Fortini s.r.l.'",
    "6469": "SELECT COUNT(p.ProductID) AS TotalProductsFromJapan\nFROM Products p\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nWHERE s.Country = 'Japan'",
    "6470": "SELECT Suppliers.ContactName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Products.ProductName = 'Teatime Chocolate Biscuits';",
    "6471": "The provided SQL schema does not include any information or a field named `ReorderLevel` for any of the tables. Therefore, it's impossible to directly answer the question about listing company names with the highest reorder level based on the given schema. \n\nThe tables `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails` do not contain a `ReorderLevel` attribute, which would be necessary to determine reorder levels for products or any other items.\n\nIf you're looking for information that is not present in the schema, you might need to revise the schema to include the necessary fields or provide the correct schema that includes a `ReorderLevel` field or any other relevant information that could lead to determining the highest reorder level.\n\nFor a question or task that involves determining the highest reorder level and listing company names (assuming companies are suppliers or manufacturers of products), you would need a `ReorderLevel` field in the `Products` table or a related table. Then, you could join the necessary tables (e.g., `Products` with `Suppliers`) to list the company names based on the highest reorder level. However, without such information in the schema, it's not feasible to construct an SQL query to accurately answer the question as posed.",
    "6472": "SELECT s.ContactName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE p.Unit = '10 boxes x 12 pieces';",
    "6473": "SELECT SUM(od.Quantity) AS TotalUnitsOnOrder\nFROM OrderDetails od\nJOIN Products p ON od.ProductID = p.ProductID\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nWHERE s.SupplierName = 'Exotic Liquids';",
    "6474": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM Products \n     WHERE SupplierID IN (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Gai pturage')) \n    / \n    (SELECT CAST(COUNT(*) AS REAL) FROM Products) * 100 AS PercentageSuppliedByGaiPturage",
    "6475": "SELECT ProductID\nFROM Products\nORDER BY UnitsInStock DESC\nLIMIT 5;",
    "6476": "SELECT COUNT(*) FROM Products WHERE Discontinued = 1;",
    "6477": "Based on the tables provided, there is no direct information about the title of employees (such as \"Sales Manager\"), their home phone numbers, or their salaries. The tables `Employees`, `Customers`, `Categories`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails` do not contain fields for an employee's title, home phone, or salary. Therefore, it is not possible to generate an SQL query to retrieve the address, home phone, and salary of the Sales Manager from the given table structures.\n\nTo answer such a query, additional tables or columns would be needed, such as an `EmployeeDetails` or `EmployeeRoles` table that includes columns for `Title`, `HomePhone`, and `Salary`. Without this information, we cannot fulfill the request with the current database schema.",
    "6478": "SELECT FirstName || ' ' || LastName AS FullName, Photo\nFROM Employees\nWHERE Notes LIKE '%Vice President, Sales%'",
    "6479": "SELECT \n    c.CustomerName AS CompanyName,\n    SUM(od.Quantity * p.Price) AS TotalSales\nFROM \n    Customers c\nJOIN \n    Orders o ON c.CustomerID = o.CustomerID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Products p ON od.ProductID = p.ProductID\nGROUP BY \n    c.CustomerID\nORDER BY \n    TotalSales DESC\nLIMIT 10;",
    "6480": "SELECT \n    c.CategoryName,\n    AVG(od.Quantity * p.Price) AS AverageSales\nFROM \n    Categories c\nJOIN \n    Products p ON c.CategoryID = p.CategoryID\nJOIN \n    OrderDetails od ON p.ProductID = od.ProductID\nGROUP BY \n    c.CategoryID, c.CategoryName",
    "6481": "SELECT SUM(OrderDetails.Quantity) AS TotalOrderQuantity\nFROM OrderDetails\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Products.ProductName = 'Uncle Bob''s Organic Dried Pears'",
    "6482": "SELECT COUNT(DISTINCT Products.ProductID) AS SeafoodCount\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nWHERE Categories.CategoryName = 'Seafood' AND OrderDetails.Quantity > 50",
    "6483": "SELECT Products.ProductID, Products.ProductName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Pavlova, Ltd'",
    "6484": "SELECT DISTINCT Suppliers.SupplierName\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE Products.Discontinued = 1;",
    "6485": "SELECT e.FirstName || ' ' || e.LastName AS FullName\nFROM Employees e\nJOIN EmployeeTerritories et ON e.EmployeeID = et.EmployeeID\nGROUP BY e.EmployeeID\nHAVING COUNT(et.TerritoryID) < 4",
    "6486": "Given the tables and relationships you've provided, there is no direct way to answer the question about the number of employees who have territories in the Eastern region because there are no tables or fields related to \"territories\" or \"regions\" in the schema you've shared. \n\nTo accurately answer a question like this, we would need additional tables that define territories and link employees to those territories, such as an `EmployeeTerritories` table linking `Employees` to `Territories`, and a `Territories` table that includes a `RegionDescription` or similar field. \n\nSince these tables are not present in the schema you've provided, it's not possible to construct an SQL query to find the number of employees in the Eastern region based on the information given. \n\nIf you have more details or additional tables that were not included in your initial schema, please provide them so that a more accurate answer can be formulated.",
    "6487": "SELECT COUNT(*) AS NumberOfOrders\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'Federal Shipping'\nAND OrderDate > '1997-03-01'\nAND OrderDate < '1997-10-08';",
    "6488": "SELECT o.CustomerID\nFROM Orders o\nJOIN Employees e ON o.EmployeeID = e.EmployeeID\nJOIN Customers c ON o.CustomerID = c.CustomerID\nWHERE e.FirstName = 'Margaret' AND e.LastName = 'Peacock'\nAND o.ShippedDate > '1997-03-31' AND o.ShippedDate < '1997-12-10'\nAND c.Country = 'Brazil'\nGROUP BY o.CustomerID;",
    "6489": "SELECT Products.ProductID, Products.ProductName, COUNT(OrderDetails.OrderID) AS TimesOrdered\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nGROUP BY Products.ProductID\nHAVING TimesOrdered = 1;",
    "6490": "SELECT \n    c.CategoryName, \n    SUM(p.Price * p.UnitInStock) AS StockValue\nFROM \n    Categories c\nJOIN \n    Products p ON c.CategoryID = p.CategoryID\nWHERE \n    c.CategoryName = 'Condiments'",
    "6491": "The database schema provided does not include any tables related to territories or any direct or indirect relationship between employees (like Anne Dodsworth) and territories. Therefore, based on the given schema, it is not possible to answer the question regarding the number of territories owned by Anne Dodsworth. The tables focus on categories, customers, employees, shippers, suppliers, products, orders, and order details without any mention of territories or ownership of territories by employees. \n\nIf you have a different schema that includes territories and their relationship to employees, please provide that for a more accurate answer.",
    "6492": "SELECT \n    Customers.CustomerID, \n    Customers.CustomerName, \n    MAX(julianday(Orders.RequiredDate) - julianday(Orders.ShippedDate)) AS LongestDelay\nFROM \n    Customers\nJOIN \n    Orders ON Customers.CustomerID = Orders.CustomerID\nWHERE \n    Customers.Country = 'USA' AND \n    Orders.ShippedDate > Orders.RequiredDate\nGROUP BY \n    Customers.CustomerID, \n    Customers.CustomerName",
    "6493": "SELECT \n    c.CustomerName, \n    c.ContactName, \n    c.Address -- Assuming phone number might be part of the address or another field\nFROM \n    Customers c\nJOIN \n    Orders o ON c.CustomerID = o.CustomerID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Products p ON od.ProductID = p.ProductID\nGROUP BY \n    c.CustomerID\nORDER BY \n    SUM(od.Quantity * p.Price) DESC\nLIMIT 1;",
    "6494": "SELECT \n    E.FirstName || ' ' || E.LastName AS EmployeeFullName,\n    Supervisor.FirstName || ' ' || Supervisor.LastName AS SupervisorFullName\nFROM Orders O\nJOIN Employees E ON O.EmployeeID = E.EmployeeID\nLEFT JOIN Employees Supervisor ON E.ReportsTo = Supervisor.EmployeeID\nJOIN OrderDetails OD ON O.OrderID = OD.OrderID\nJOIN Products P ON OD.ProductID = P.ProductID\nGROUP BY O.OrderID, E.EmployeeID, Supervisor.EmployeeID\nORDER BY SUM(OD.Quantity * P.Price) DESC\nLIMIT 1;",
    "6495": "SELECT COUNT(*) AS NumberOfCustomersInBerlin\nFROM Customers\nWHERE City = 'Berlin' AND Country = 'Germany';",
    "6496": "SELECT COUNT(*) AS NumberOfProducts\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Exotic Liquids'",
    "6497": "SELECT Suppliers.SupplierName, Products.ProductName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nORDER BY Products.Price ASC\nLIMIT 1;",
    "6498": "SELECT AVG(Price) AS AverageUnitPrice\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Tokyo Traders';",
    "6499": "It appears there's been a misunderstanding in the question. The SQL schema provided does not include any tables related to \"regions\" or \"territories,\" which are necessary to answer the question about the number of territories in the Eastern region. The tables defined are `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`. None of these tables contain information about regions or territories.\n\nTo accurately answer a question about the number of territories in the Eastern region, a table that includes territories and their associated regions would be required. Since such a table is not part of the provided schema, it's not possible to construct an SQL query to answer the question based on the given tables.\n\nIf you have additional tables or information related to regions and territories that were not included in your initial question, please provide them so that a more accurate answer can be given.",
    "6500": "Based on the tables you've provided, there are no tables related to regions or territories. The tables you've created are focused on categories, customers, employees, shippers, suppliers, products, orders, and order details. There's no direct information or data structure related to regions or territories within the SQL schema you've shared.\n\nTo answer a question about which region has the most territories, you would need tables that define regions and territories, and a relationship between them, typically through a foreign key in the territories table pointing to the regions table. Since such tables are not present in the schema you've provided, it's not possible to construct an SQL query to answer the question about regions and territories with the current database schema.\n\nIf you have or can provide the schema for regions and territories, I'd be happy to help construct the appropriate SQL query.",
    "6501": "The tables you've provided do not include any information about regions or territories, so it's impossible to answer the question about which region territory id 2116 belongs to based on the given schema. The tables focus on categories, customers, employees, shippers, suppliers, products, orders, and order details without any reference to regions or territories. \n\nIf you need information about regions or territories, you would need a table that includes territories and another that maps territories to regions, neither of which are present in the schema you've provided. \n\nTherefore, the correct response based on the provided schema is that it's not possible to answer the question about the region for territory id 2116 with the given data.",
    "6502": "SELECT \n    (SELECT CAST(COUNT(DISTINCT o.OrderID) AS FLOAT)\n     FROM Orders o\n     JOIN Customers c ON o.CustomerID = c.CustomerID\n     WHERE c.City = 'Madrid' AND strftime('%Y', o.OrderDate) = '1996') /\n    (SELECT CAST(COUNT(DISTINCT OrderID) AS FLOAT) FROM Orders WHERE strftime('%Y', OrderDate) = '1996') * 100 AS PercentageOfOrdersInMadrid1996",
    "6503": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employees",
    "6504": "Given the tables you've provided, there's no table that includes salary information for any of the entities (Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails). Therefore, it's impossible to determine who has the highest salary based on the provided schema. \n\nTo answer questions about salaries, a table containing salary information linked to an entity (most likely the Employees table) would be necessary. Since such a table or column is not present in the schema you've provided, we cannot construct an SQL query to find the highest salary or the first name of the person earning it.\n\nIf you have a table or column that includes salary information and need help constructing an SQL query to find the highest salary, please provide the relevant schema details.",
    "6505": "Based on the tables you've provided, there is no table that includes information about job titles (like \"Sales Representative\") or salaries. Therefore, it's impossible to answer the question about the number of sales representatives with salaries higher than 2000 using the given table structures. \n\nTo answer such a question, you would need a table that includes employee job titles and salaries, neither of which are present in the provided schema. If you have additional tables or fields that were not included in your initial setup, please provide them for a more accurate response.",
    "6506": "SELECT COUNT(*) AS NumberOfOrders\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE strftime('%Y', Orders.OrderDate) = '1996' AND Customers.Country = 'UK'",
    "6507": "SELECT c.CustomerName, COUNT(o.OrderID) AS NumberOfOrders\nFROM Orders o\nJOIN Customers c ON o.CustomerID = c.CustomerID\nWHERE strftime('%Y', o.OrderDate) = '1998'\nGROUP BY o.CustomerID\nORDER BY NumberOfOrders DESC\nLIMIT 1;",
    "6508": "SELECT \n    Customers.Country, \n    COUNT(Orders.OrderID) AS NumberOfOrders\nFROM \n    Orders\nINNER JOIN \n    Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE \n    strftime('%Y', Orders.OrderDate) = '1996'\nGROUP BY \n    Customers.Country",
    "6509": "SELECT COUNT(*) AS NumberOfOrders\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.CustomerName = 'Hanna Moos' AND strftime('%Y', Orders.OrderDate) = '1999';",
    "6510": "SELECT MIN(julianday(ShippedDate) - julianday(OrderDate)) AS FastestShippingDays\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.CustomerName = 'Berglunds snabbkp';",
    "6511": "SELECT Customers.CustomerName\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Orders.OrderID = 10257",
    "6512": "SELECT \n    strftime('%Y', OrderDate) AS Year, \n    COUNT(OrderID) AS NumberOfOrders\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.CustomerName = 'Around the Horn'\nGROUP BY Year\nORDER BY NumberOfOrders DESC\nLIMIT 1;",
    "6513": "SELECT COUNT(*) AS NumberOfEmployeesReportingToAndrewFuller\nFROM Employees\nWHERE ReportsTo = (\n    SELECT EmployeeID\n    FROM Employees\n    WHERE FirstName = 'Andrew' AND LastName = 'Fuller'\n);",
    "6514": "SELECT Country\nFROM Suppliers\nGROUP BY Country\nORDER BY COUNT(SupplierID) DESC\nLIMIT 1",
    "6515": "Based on the tables provided, there is no `Title` or `ReportsTo` column in the `Employees` table, which are necessary to directly answer the question regarding employees who report to a Sales Manager. Since the question involves external knowledge that isn't represented in the given table structures, it's not possible to accurately generate an SQL query to find the full name of employees who report to the Sales Manager without additional table modifications or assumptions.\n\nTo address the question as it stands, we would need a table structure that includes a `Title` field in the `Employees` table to identify the Sales Manager and a `ReportsTo` field to establish a reporting hierarchy. However, since these fields are not present, we cannot construct a valid SQL query to directly answer the question given the current table structures.\n\nIf you have any more details or if there's another aspect of the database you'd like to explore, please let me know!",
    "6516": "SELECT COUNT(OrderID) AS NumberOfOrders\nFROM Orders\nWHERE OrderDate LIKE '1996-08-%' AND CustomerID = (\n    SELECT CustomerID\n    FROM Orders\n    WHERE OrderDate LIKE '1996-08-%'\n    GROUP BY CustomerID\n    ORDER BY COUNT(OrderID) DESC\n    LIMIT 1\n)",
    "6517": "SELECT Salary FROM Employees ORDER BY HireDate ASC LIMIT 1;",
    "6518": "SELECT MAX((julianday(HireDate) - julianday(BirthDate)) / 365.25) AS OldestAgeAtHire\nFROM Employees;",
    "6519": "SELECT SUM(od.Quantity * p.Price) AS TotalSalesAmount\nFROM OrderDetails od\nJOIN Products p ON od.ProductID = p.ProductID\nWHERE p.Discontinued = 1;",
    "6520": "SELECT Categories.CategoryName\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nWHERE Products.Discontinued = 1\nGROUP BY Categories.CategoryName\nORDER BY COUNT(Products.ProductID) DESC\nLIMIT 1;",
    "6521": "SELECT SUM(OrderDetails.Quantity) AS TotalCondimentsSoldIn1997\nFROM OrderDetails\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nWHERE Categories.CategoryName = 'Condiments' AND strftime('%Y', Orders.OrderDate) = '1997'",
    "6522": "SELECT \n    c.CustomerName\nFROM \n    Customers c\nJOIN \n    Orders o ON c.CustomerID = o.CustomerID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nGROUP BY \n    o.OrderID\nORDER BY \n    SUM(od.Quantity) DESC\nLIMIT 1",
    "6523": "SELECT AVG(OrderCount) AS AvgMonthlyOrders\nFROM (\n    SELECT COUNT(*) AS OrderCount\n    FROM Orders\n    WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Federal Shipping')\n    AND strftime('%Y', OrderDate) = '1996'\n    GROUP BY strftime('%m', OrderDate)\n)",
    "6524": "SELECT Products.ProductName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'G''day, Mate'",
    "6525": "The provided SQL schema does not include tables or columns related to \"territories\" or \"regions.\" Therefore, it's impossible to answer the question about the number of territories in the region with the highest number of territories based on the given schema. The tables provided are related to a typical e-commerce or retail business database, including categories, customers, employees, shippers, suppliers, products, orders, and order details, but there is no mention of territories or regions in the schema provided. \n\nIf you have a different schema that includes territories and regions, please provide that for a more accurate answer.",
    "6526": "SELECT Suppliers.SupplierName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nORDER BY Products.Price DESC \nLIMIT 1",
    "6527": "The provided schema does not include information about employees' gender or the territories they manage. Specifically, there are no fields for `TitleOfCourtesy` or a table linking employees to territories (such as an `EmployeeTerritories` table or a `TerritoryID` field in the `Employees` table). Therefore, it's impossible to answer the question about the number of female employees in charge of 3 or more territories based on the given schema.\n\nTo perform such a query, additional tables and fields would need to be defined in the schema to track the gender of employees and their assigned territories. Without this information, any SQL query attempting to answer the question would be speculative and not based on the provided schema.\n\nIf you have a different schema or additional tables that include the necessary information (such as `TitleOfCourtesy` in the `Employees` table and a way to count territories per employee), please provide that for a more accurate SQL query.",
    "6528": "SELECT s.SupplierID, s.SupplierName, COUNT(p.ProductID) AS NumberOfProductsSupplied\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nGROUP BY s.SupplierID\nORDER BY NumberOfProductsSupplied DESC\nLIMIT 8;",
    "6529": "SELECT \n    Customers.CustomerName AS CompanyName,\n    Orders.OrderID,\n    SUM(OrderDetails.Quantity * Products.Price) AS TotalAmount\nFROM OrderDetails\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nGROUP BY Orders.OrderID\nORDER BY TotalAmount DESC\nLIMIT 1;",
    "6530": "SELECT SUM(od.Quantity * p.Price) AS TotalSales\nFROM Orders o\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nJOIN Employees e ON o.EmployeeID = e.EmployeeID\nWHERE e.EmployeeID = 1 -- Assuming Nancy Davolio's EmployeeID is 1\nAND strftime('%Y-%m', o.OrderDate) = '1996-12';",
    "6531": "SELECT SUM(Products.Price * OrderDetails.Quantity) AS TotalSales1997\nFROM Orders\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE strftime('%Y', Orders.OrderDate) = '1997'",
    "6532": "SELECT AVG(YearlySales.TotalAmount) AS AverageAnnualAmount\nFROM (\n    SELECT \n        strftime('%Y', ShippedDate) AS Year, \n        SUM((od.Quantity * p.Price) * (1 - od.Discount)) AS TotalAmount\n    FROM Orders o\n    JOIN OrderDetails od ON o.OrderID = od.OrderID\n    JOIN Products p ON od.ProductID = p.ProductID\n    WHERE o.ShippedDate > '1996-12-31' AND o.ShippedDate < '1999-01-01'\n    GROUP BY strftime('%Y', ShippedDate)\n) YearlySales",
    "6533": "SELECT COUNT(*) AS NumberOfOrdersShippedToVenezuelaIn1996\nFROM Orders\nWHERE strftime('%Y', ShippedDate) = '1996' AND ShipCountry = 'Venezuela';",
    "6534": "SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments'",
    "6535": "SELECT od.OrderID, od.ProductID, p.Price AS UnitPrice\nFROM OrderDetails od\nJOIN Products p ON od.ProductID = p.ProductID\nGROUP BY od.OrderID, od.ProductID\nHAVING SUM(od.Quantity * p.Price) > 15000",
    "6536": "It appears there's a misunderstanding in the question. Based on the table schemas provided, there is no table that includes territory IDs or any direct or indirect reference to territories. The tables defined are `sqlite_sequence`, `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`. None of these tables contain information about territories or a field that could be interpreted as a territory ID, especially in relation to an employee ID.\n\nIf you're looking for information directly related to the tables provided, please adjust your question accordingly. If you're inquiring about a different schema that includes territories, please provide the schema for that part of the database so I can assist you accurately.",
    "6537": "SELECT SupplierName\nFROM Suppliers\nWHERE City = 'Sydney';",
    "6538": "Given the tables and the structure provided, there is no direct way to answer the question about the Vice President of Sales' full name and age when hired because:\n\n1. There is no `Title` field in the `Employees` table to identify the Vice President of Sales.\n2. There is no `HireDate` field in the `Employees` table to calculate the age at the time of hiring.\n\nTherefore, it's not possible to construct an SQL query to directly answer the question based on the provided table structures. The necessary information (Title and HireDate) is missing from the `Employees` table.",
    "6539": "SELECT SupplierName FROM Suppliers WHERE Country = 'Germany';",
    "6540": "SELECT FirstName || ' ' || LastName AS FullName, 2022 - strftime('%Y', BirthDate) AS Age\nFROM Employees\nWHERE City = 'London'",
    "6541": "SELECT CustomerName, Address, City, PostalCode, Country\nFROM Customers\nWHERE City = 'London'",
    "6542": "SELECT e.FirstName || ' ' || e.LastName AS FullName, e.Title\nFROM Employees e\nJOIN Employees m ON e.ReportsTo = m.EmployeeID\nWHERE m.Title = 'Sales Manager';",
    "6543": "SELECT CustomerName, City FROM Customers WHERE Country = 'Canada'",
    "6544": "SELECT ProductName\nFROM Products\nWHERE Unit = '10 - 500 g pkgs.'",
    "6545": "-- Assuming a ReorderLevel column exists in the Products table\nSELECT \n    P.ProductName, \n    C.CategoryName\nFROM \n    Products P\nJOIN \n    Categories C ON P.CategoryID = C.CategoryID\nWHERE \n    P.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);",
    "6546": "SELECT \n    s.SupplierID, \n    s.SupplierName, \n    s.City, \n    p.ProductID, \n    p.ProductName,\n    SUM(od.Quantity) AS TotalOrdered\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nGROUP BY s.SupplierID, p.ProductID\nHAVING TotalOrdered > 120",
    "6547": "SELECT \n    Suppliers.ContactName AS ContactPerson,\n    Products.ProductName AS SuppliedProduct\nFROM \n    Suppliers\nJOIN \n    Products ON Suppliers.SupplierID = Products.SupplierID\nWHERE \n    Suppliers.SupplierName = 'Escargots Nouveaux';",
    "6548": "SELECT Territories.TerritoryID, Territories.Description, Regions.Description AS RegionDescription\nFROM Employees\nJOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID\nJOIN Territories ON EmployeeTerritories.TerritoryID = Territories.TerritoryID\nJOIN Regions ON Territories.RegionID = Regions.RegionID\nWHERE Employees.FirstName = 'Margaret' AND Employees.LastName = 'Peacock';",
    "6549": "SELECT Products.ProductName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.Country = 'Spain'",
    "6550": "SELECT Products.ProductName\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'WILMK') -- Assuming 'WILMK' is a CustomerName\nAND Orders.RequiredDate = '1998-03-26 00:00:00';",
    "6551": "SELECT Products.ProductID, Products.ProductName\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nWHERE Categories.CategoryName = 'Meat/Poultry'",
    "6552": "SELECT COUNT(*) AS NumberOfOrders\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.Country = 'Ireland';",
    "6553": "SELECT DISTINCT Products.ProductName\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE strftime('%Y', Orders.OrderDate) = '1996' AND Customers.Country = 'Norway'",
    "6554": "SELECT Suppliers.SupplierName\nFROM Orders\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Employees.FirstName = 'Anne' AND Employees.LastName = 'Dodsworth'\nAND Customers.Country = 'Brazil'\nAND strftime('%Y', Orders.OrderDate) = '1996' AND strftime('%m', Orders.OrderDate) = '12'",
    "6555": "-- Hypothetical SQL query assuming additional fields exist\nSELECT \n    e.FirstName || ' ' || e.LastName AS FullName,\n    e.Title,\n    e.Salary,\n    COUNT(o.OrderID) AS NumberOfOrdersShippedToUSA\nFROM Employees e\nLEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID\nLEFT JOIN [SomeTableThatContainsShipCountry] s ON o.OrderID = s.OrderID -- Hypothetical join\nWHERE s.ShipCountry = 'USA' -- Hypothetical condition\nAND e.BirthDate = (SELECT MIN(BirthDate) FROM Employees) -- Oldest employee\nGROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Title, e.Salary",
    "6556": "It seems there might be a misunderstanding in the question. Based on the table schemas provided, there is no table for regions or territories, nor is there any direct or indirect reference to a \"RegionDescription\" or \"Southern region\" within the given schemas. The tables defined are `sqlite_sequence`, `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`. None of these tables include information about regions or territories.\n\nTo query territory IDs and descriptions for a Southern region, there would need to be a table that includes territories, their descriptions, and possibly a linkage to regions (which might include a \"Southern\" region). Since such a table is not defined in the provided schemas, it's not possible to construct an SQL query to answer the question as posed with the given table structures.\n\nIf you have additional tables or fields that were not included in your initial question, please provide those details for a more accurate and helpful response.",
    "6557": "SELECT AVG(Price * Quantity) AS AvgPaymentPerProduct\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nWHERE Categories.CategoryName = 'Confections'",
    "6558": "SELECT SUM(od.Quantity * p.Price * (1 - IFNULL(od.Discount, 0))) AS TotalPayment\nFROM Orders o\nJOIN Customers c ON o.CustomerID = c.CustomerID\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nWHERE c.City = 'San Francisco';",
    "6559": "SELECT \n    Products.ProductID, \n    Products.ProductName, \n    Suppliers.SupplierName, \n    Suppliers.Country\nFROM \n    Products\nINNER JOIN \n    Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE \n    Suppliers.Country = 'Japan';",
    "6560": "SELECT \n    p.ProductName,\n    c.CategoryName\nFROM \n    Products p\nJOIN \n    Suppliers s ON p.SupplierID = s.SupplierID\nJOIN \n    Categories c ON p.CategoryID = c.CategoryID\nWHERE \n    s.Country = 'Australia' AND p.Discontinued = 1;",
    "6561": "SELECT \n    Suppliers.Country AS SupplierCountry, \n    OrderDetails.OrderID AS MaxPaymentOrderID\nFROM \n    Products\nJOIN \n    Suppliers ON Products.SupplierID = Suppliers.SupplierID\nJOIN \n    OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN \n    Orders ON OrderDetails.OrderID = Orders.OrderID\nWHERE \n    Products.ProductName = 'Ipoh Coffee'\nORDER BY \n    OrderDetails.Quantity * Products.Price DESC\nLIMIT 1;",
    "6562": "SELECT \n    Products.ProductName,\n    SUM(OrderDetails.Quantity * Products.Price) AS TotalPayment\nFROM \n    OrderDetails\nINNER JOIN \n    Products ON OrderDetails.ProductID = Products.ProductID\nWHERE \n    OrderDetails.OrderID = 10979",
    "6563": "SELECT Suppliers.ContactName, Suppliers.SupplierName\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Categories.CategoryName = 'Grains/Cereals' AND Suppliers.SupplierID BETWEEN 1 AND 9",
    "6564": "SELECT \n    s.ShipperName,\n    s.Phone,\n    COUNT(o.OrderID) AS NumberOfShippedOrders\nFROM \n    Shippers s\nJOIN \n    Orders o ON s.ShipperID = o.ShipperID\nWHERE \n    s.ShipperName = 'Speedy Express' AND\n    DATE(o.OrderDate) = '1998-01-30'",
    "6565": "SELECT \n    Products.ProductName,\n    Orders.OrderID,\n    Orders.ShippedDate,\n    Orders.RequiredDate,\n    (julianday(Orders.ShippedDate) - julianday(Orders.RequiredDate)) AS DaysOverdue\nFROM \n    OrderDetails\nJOIN \n    Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN \n    Products ON OrderDetails.ProductID = Products.ProductID\nWHERE \n    Orders.ShippedDate > Orders.RequiredDate\nORDER BY \n    DaysOverdue DESC\nLIMIT 1;",
    "6566": "SELECT Products.ProductName\nFROM Products\nJOIN Orders ON Products.ProductID = Orders.OrderID\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Orders.ShippedDate BETWEEN '1996-01-01' AND '1996-12-31'\nAND Orders.ShipCountry = 'Mexico'\nAND Employees.Title = 'Inside Sales Coordinator';",
    "6567": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity\nFROM Products p\nJOIN Categories c ON p.CategoryID = c.CategoryID\nJOIN OrderDetails od ON p.ProductID = od.ProductID\nWHERE c.CategoryName = 'dairy product'\nGROUP BY p.ProductID\nORDER BY TotalQuantity DESC\nLIMIT 1;",
    "6568": "Based on the tables provided and the external knowledge mentioned, there seems to be a misunderstanding or a mistake in the question. The tables defined in the SQL schema do not include fields for `UnitsInStock` or `UnitsOnOrder`, which are necessary for calculating the production volume of a product as mentioned in the external knowledge. The `Products` table does not contain these fields, and there's no direct way to calculate the production volume of 'Mascarpone Fabioli' or any product without this information.\n\nGiven the tables and fields provided, there's no direct SQL query that can calculate the production volume of 'Mascarpone Fabioli' based on the information provided in the question. To accurately answer the question, additional tables or fields that include `UnitsInStock` and `UnitsOnOrder` for products would be required.\n\nIf you have any more details or if there's another aspect of the database schema you'd like to explore, please let me know!",
    "6569": "SELECT \n    p.ProductName AS ProductName,\n    c.CategoryName AS CategoryCategory,\n    p.Price\nFROM \n    Products p\nJOIN \n    Categories c ON p.CategoryID = c.CategoryID\nWHERE \n    p.Price = (SELECT MAX(Price) FROM Products)\n    OR p.Price = (SELECT MIN(Price) FROM Products WHERE Price > 0)",
    "6570": "SELECT \n    Customers.CustomerName,\n    SUM(Products.Price * OrderDetails.Quantity) AS TotalOrderValue\nFROM \n    Orders\nJOIN \n    OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN \n    Products ON OrderDetails.ProductID = Products.ProductID\nJOIN \n    Customers ON Orders.CustomerID = Customers.CustomerID\nGROUP BY \n    Orders.OrderID\nORDER BY \n    TotalOrderValue DESC\nLIMIT 1;",
    "6571": "Based on the tables you've provided, there is no direct information or table related to sales regions or a link between employees and regions (such as a `RegionDescription` or a `Region` table). Therefore, it's impossible to directly answer the question about the number of employees in the Northern sales region with the given schema. \n\nTo accurately answer questions about sales regions, additional tables or columns that link employees to regions would be necessary. For example, a `Regions` table and an `EmployeeRegions` link table if employees can belong to multiple regions, or a `RegionID` column in the `Employees` table if each employee belongs to only one region.\n\nSince the required information or tables are not present in the provided schema, I cannot generate a valid SQL query to answer the question about the number of employees in the Northern sales region.",
    "6572": "SELECT AVG(TotalOrderValue) AS AverageOrderValue\nFROM (\n    SELECT o.OrderID, SUM(p.Price * od.Quantity) AS TotalOrderValue\n    FROM Orders o\n    INNER JOIN OrderDetails od ON o.OrderID = od.OrderID\n    INNER JOIN Products p ON od.ProductID = p.ProductID\n    GROUP BY o.OrderID\n)",
    "6573": "SELECT \n    (CAST(SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(ProductID)) * 100 AS PercentageOfDiscontinuedProducts\nFROM Products;",
    "6574": "SELECT Employees.FirstName || ' ' || Employees.LastName AS FullName\nFROM Employees\nJOIN Orders ON Employees.EmployeeID = Orders.EmployeeID\nWHERE Orders.OrderID = 10274",
    "6575": "SELECT COUNT(*) AS TotalOrders\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Customers.CustomerName = 'GROSELLA-Restaurante'",
    "6576": "SELECT Products.ProductName, OrderDetails.Quantity\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Customers.CustomerName = 'GROSELLA-Restaurante'\nAND Employees.FirstName = 'Nancy' AND Employees.LastName = 'Davolio'",
    "6577": "SELECT \n    COUNT(DISTINCT o.OrderID) AS TotalOrders,\n    IFNULL(SUM(pd.Price * od.Quantity) / COUNT(DISTINCT o.OrderID), 0) AS AverageOrderValue\nFROM \n    Orders o\nJOIN \n    Customers c ON o.CustomerID = c.CustomerID\nJOIN \n    OrderDetails od ON o.OrderID = od.OrderID\nJOIN \n    Products pd ON od.ProductID = pd.ProductID\nWHERE \n    c.CustomerName = 'Laughing Bacchus Wine Cellars';",
    "6578": "SELECT SUM(OrderDetails.Quantity) AS TotalBoxesSold\nFROM Products\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nWHERE Products.ProductName = 'Pavlova';",
    "6579": "-- The provided schema does not include a table for salaries or job titles (such as \"sales representative\").\n-- Therefore, it is not possible to directly answer the question regarding the salary range for sales representatives in Northwind\n-- based on the given tables. An additional table containing employee salaries and job titles would be required.",
    "6580": "SELECT COUNT(*) AS NumberOfSuppliersInUSA\nFROM Suppliers\nWHERE Country = 'USA'",
    "6581": "SELECT ProductName FROM Products WHERE Discontinued = 1;",
    "6582": "SELECT ContactName AS SalesAgent\nFROM Suppliers\nWHERE SupplierName = 'Eastern Connection';",
    "6583": "SELECT COUNT(DISTINCT ShipperID) AS NumberOfShippingCompanies FROM Shippers",
    "6584": "SELECT COUNT(*) AS TotalOrders\nFROM Orders\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Employees.FirstName = 'Andrew' AND Employees.LastName = 'Fuller';",
    "6585": "SELECT CategoryName \nFROM Categories \nWHERE Description LIKE '%soft drinks%' \nOR Description LIKE '%coffees%' \nOR Description LIKE '%teas%' \nOR Description LIKE '%beers%' \nOR Description LIKE '%ales%'",
    "6586": "SELECT Phone FROM Shippers WHERE ShipperName = 'Around the Horn'",
    "6587": "SELECT Phone FROM Suppliers\nWHERE SupplierName = 'Blondesddsl pre et fils' AND City = 'Strasbourg';",
    "6588": "SELECT COUNT(DISTINCT SupplierName) + COUNT(DISTINCT CustomerName) AS TotalCompaniesInLondon\nFROM Suppliers, Customers\nWHERE Suppliers.City = 'London' OR Customers.City = 'London'",
    "6589": "SELECT Address FROM Suppliers WHERE SupplierName = 'Eastern Connection' AND ContactName = 'Ann Devon'",
    "6590": "SELECT SupplierName AS CompanyName FROM Suppliers WHERE Country = 'France'\nUNION\nSELECT CustomerName AS CompanyName FROM Customers WHERE Country = 'France';",
    "6591": "SELECT COUNT(ProductName) \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Suppliers.SupplierName = 'Exotic Liquids'",
    "6592": "SELECT s.SupplierName AS CompanyName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nORDER BY p.Price DESC\nLIMIT 1",
    "6593": "SELECT s.SupplierName, COUNT(p.ProductID) AS NumberOfProducts\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE s.City = 'London'\nGROUP BY s.SupplierID\nORDER BY NumberOfProducts DESC\nLIMIT 1;",
    "6594": "-- This is a hypothetical query assuming there's a ReorderLevel field in the Products table\nSELECT ProductName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Exotic Liquids'\nORDER BY ReorderLevel DESC\nLIMIT 1;",
    "6595": "SELECT Categories.CategoryName\nFROM Categories\nJOIN Products ON Categories.CategoryID = Products.CategoryID\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Products.ProductName = 'Chef Anton''s Gumbo Mix' AND Suppliers.SupplierName = 'New Orleans Cajun Delights'",
    "6596": "SELECT s.Country\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nWHERE s.SupplierName = 'Leka Trading' AND p.ProductName = 'Ipoh Coffee'",
    "6597": "SELECT \n    c.CategoryName, \n    SUM(od.Quantity) as TotalQuantity\nFROM \n    OrderDetails od\nJOIN \n    Products p ON od.ProductID = p.ProductID\nJOIN \n    Categories c ON p.CategoryID = c.CategoryID\nGROUP BY \n    p.CategoryID\nORDER BY \n    TotalQuantity DESC\nLIMIT 1;",
    "6598": "SELECT \n    (SELECT Price FROM Products \n     JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \n     WHERE ProductName = 'Chef Anton''s Cajun Seasoning' \n     AND SupplierName = 'New Orleans Cajun Delights') \n    - \n    (SELECT Price FROM Products \n     JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \n     WHERE ProductName = 'Chef Anton''s Gumbo Mix' \n     AND SupplierName = 'New Orleans Cajun Delights') AS PriceDifference",
    "6599": "SELECT Products.ProductName, Products.Price\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Cooperativa de Quesos ''Las Cabras'''\nAND Products.Price > 20",
    "6600": "SELECT Products.ProductName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nWHERE Suppliers.SupplierName = 'Tokyo Traders' AND OrderDetails.Quantity > 40",
    "6601": "SELECT DISTINCT Categories.CategoryName\nFROM Categories\nJOIN Products ON Categories.CategoryID = Products.CategoryID\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Exotic Liquids';",
    "6602": "SELECT \n    COUNT(DISTINCT CASE WHEN od.Quantity < 50 THEN p.ProductID END) AS Products_Less_Than_50,\n    (SUM(CASE WHEN od.Quantity < 50 THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS Percentage_Less_Than_50\nFROM OrderDetails od\nJOIN Products p ON od.ProductID = p.ProductID",
    "6603": "WITH GeitostData AS (\n    SELECT\n        p.ProductID,\n        od.Quantity\n    FROM\n        Products p\n    JOIN OrderDetails od ON p.ProductID = od.ProductID\n    WHERE\n        p.ProductName = 'Geitost'\n),\nTotalQuantity AS (\n    SELECT\n        SUM(Quantity) AS TotalQuantity\n    FROM\n        OrderDetails\n),\nGeitostQuantity AS (\n    SELECT\n        SUM(Quantity) AS GeitostTotalQuantity\n    FROM\n        GeitostData\n)\nSELECT\n    GeitostTotalQuantity,\n    (GeitostTotalQuantity * 1.0 / TotalQuantity.TotalQuantity) * 100 AS PercentageOfGeitost\nFROM\n    GeitostQuantity,\n    TotalQuantity;",
    "6604": "-- The provided schema does not include a column for the employee's position or title in the Employees table. Therefore, it is not possible to retrieve the position of Robert King or any other employee from the given tables.",
    "6605": "SELECT ShipperName FROM Shippers WHERE Phone = '(503) 555-9931';",
    "6606": "SELECT EmployeeID, LastName, FirstName, BirthDate, Photo, Notes\nFROM Employees\nWHERE FirstName = 'Margaret' AND LastName = 'Peacock';",
    "6607": "SELECT Address, City, PostalCode, Country FROM Customers WHERE CustomerName = 'Rattlesnake Canyon Grocery'",
    "6608": "SELECT Products.ProductName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Suppliers.SupplierName = 'Confections'",
    "6609": "SELECT Suppliers.SupplierName, Suppliers.ContactName\nFROM Products\nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\nWHERE Products.ProductName = 'Sir Rodney''s Marmalade'",
    "6610": "-- Hypothetical SQL, does not work with the provided schema\nSELECT e.FirstName || ' ' || e.LastName AS FullName\nFROM Employees e\nJOIN EmployeeTerritories et ON e.EmployeeID = et.EmployeeID\nJOIN Territories t ON et.TerritoryID = t.TerritoryID\nWHERE t.TerritoryDescription = 'Denver';",
    "6611": "Based on the tables provided and the external knowledge mentioned, there is no direct information or table related to territories or a specific link between employees and territories. Therefore, it's not possible to directly answer the question about the territories where Laura Callahan is in charge using the given table structures and the SQL provided. \n\nTo accurately answer such a question, there would need to be a table or a relationship defined between employees and territories, which is not present in the provided schema. \n\nIf you have additional tables or relationships not listed here that connect employees to territories, please provide them for a more accurate SQL query.",
    "6612": "SELECT COUNT(*) AS NumberOfOrdersShippedByFederalShipping\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'Federal Shipping';",
    "6613": "SELECT Products.ProductName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Suppliers.Country = 'Finland'",
    "6614": "SELECT Categories.CategoryName, Categories.Description\nFROM Products\nINNER JOIN Categories ON Products.CategoryID = Categories.CategoryID\nWHERE Products.ProductName = 'Mozzarella di Giovanni'",
    "6615": "SELECT DISTINCT s.SupplierName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Categories c ON p.CategoryID = c.CategoryID\nWHERE c.Description = 'cheeses'",
    "6616": "SELECT Products.ProductName \nFROM Products \nJOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID \nWHERE Suppliers.SupplierName = 'Zaanse Snoepfabriek'",
    "6617": "SELECT p.ProductName, p.Price\nFROM Products p\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nWHERE s.SupplierName = 'Plutzer Lebensmittelgromrkte AG';",
    "6618": "SELECT DISTINCT Customers.City\nFROM Orders\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Products.ProductName = 'Mishi Kobe Niku'",
    "6619": "-- Assuming ShipperID for Speedy Express is known (e.g., 1)\n-- And assuming there's a ShipCountry field in Orders or a related table to filter by 'Sweden'\n\nSELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Orders \n     JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID \n     WHERE Shippers.ShipperName = 'Speedy Express' /* AND Orders.ShipCountry = 'Sweden' */\n    ) / \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM Orders) * 100 AS SpeedyExpressSwedenPercentage;",
    "6620": "It appears there's a misunderstanding in the question. The tables provided in the schema do not include any tables related to territories or regions, such as a \"Territories\" table or a \"Regions\" table. Therefore, based on the given schema, it's impossible to directly answer the question about the number of territories that fall into region 1, as there is no data or table structure provided that relates to territories or regions.\n\nIf you have a specific schema that includes territories and their relation to regions, please provide that for a more accurate answer. Otherwise, based on the tables you've provided (Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails), there's no way to query about territories or regions.",
    "6621": "It seems there might be a misunderstanding or a mistake in the question you've asked. The SQL schema you've provided does not include tables for \"Territories\" or \"Regions,\" which are necessary to answer a question about the total number of territories in each region. The tables you've created are related to a typical business database, including categories, customers, employees, shippers, suppliers, products, orders, and order details.\n\nIf you're looking to count territories within regions, you would need tables that define what a \"Territory\" is and what a \"Region\" is, including a way to link territories to regions (usually through a foreign key in the territories table pointing to an ID in the regions table).\n\nGiven the tables you've provided, there's no way to directly answer the question about territories and regions. If you have additional tables that you haven't included in your question, please provide those so I can help you construct the correct SQL query. If you're looking for help with a different query based on the tables you've provided, please let me know!",
    "6622": "SELECT COUNT(*) FROM Suppliers WHERE Country = 'UK'",
    "6623": "SELECT ContactName FROM Suppliers WHERE SupplierName = 'Tokyo Traders'",
    "6624": "Given the tables and the structure provided, there is no direct way to answer the question about the number of employees from the USA with a Sales Representative title because:\n\n1. The `Employees` table does not contain a column for the employee's country.\n2. There is no column for the employee's job title (e.g., Sales Representative).\n\nTherefore, based on the provided table structures, it is not possible to construct an SQL query that accurately answers the question as posed, due to the lack of necessary fields in the `Employees` table or any other table that could indirectly provide this information.\n\nIf the table structure included a `Country` and `Title` (or similar) column in the `Employees` table, then it would be possible to construct a query to find the number of employees from the USA with a Sales Representative title. However, with the current table structure, this specific query cannot be fulfilled.",
    "6625": "-- The provided schema does not include any table with salary or position (title) information for employees.\n-- Therefore, it is not possible to write an SQL query to find the highest salary and the position of the employee based on the given tables.",
    "6626": "SELECT COUNT(*)\nFROM Products p\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nWHERE s.SupplierName = 'Plutzer Lebensmittelgromrkte AG'\nAND p.UnitsInStock = 0\nAND p.UnitsOnOrder > 0;",
    "6627": "SELECT \n    Products.ProductName, \n    SUM(OrderDetails.Quantity) AS TotalQuantitySold\nFROM \n    Products\nJOIN \n    OrderDetails ON Products.ProductID = OrderDetails.ProductID\nWHERE \n    Products.Price = (SELECT MAX(Price) FROM Products)\nGROUP BY \n    Products.ProductName",
    "6628": "SELECT \n    Employees.EmployeeID, \n    Employees.FirstName, \n    Employees.LastName, \n    COUNT(Orders.OrderID) AS OrderCount\nFROM \n    Employees\nLEFT JOIN \n    Orders ON Employees.EmployeeID = Orders.EmployeeID\nGROUP BY \n    Employees.EmployeeID\nORDER BY \n    OrderCount ASC\nLIMIT 1;",
    "6629": "SELECT \n    Products.ProductID, \n    Products.ProductName, \n    COUNT(OrderDetails.ProductID) AS ProductCount\nFROM \n    Products\nJOIN \n    OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN \n    Orders ON OrderDetails.OrderID = Orders.OrderID\nJOIN \n    Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE \n    Customers.Country = 'Germany'\nGROUP BY \n    Products.ProductID\nORDER BY \n    ProductCount DESC\nLIMIT 1;",
    "6630": "-- Hypothetical SQL assuming we know ShipperID for \"Speedy Express Company\" and there's a ShipCountry field\nSELECT SUM(od.Quantity * p.Price) AS TotalProductsValue\nFROM Orders o\nJOIN OrderDetails od ON o.OrderID = od.OrderID\nJOIN Products p ON od.ProductID = p.ProductID\nJOIN Shippers s ON o.ShipperID = s.ShipperID\nWHERE s.ShipperID = 1 -- Assuming ShipperID = 1 is \"Speedy Express Company\"\nAND o.ShipCountry = 'Brazil';",
    "6631": "SELECT MAX(TotalOrderValue) AS BiggestOrderValue\nFROM (\n    SELECT o.OrderID, SUM(od.Quantity * p.Price) AS TotalOrderValue\n    FROM Orders o\n    JOIN OrderDetails od ON o.OrderID = od.OrderID\n    JOIN Products p ON od.ProductID = p.ProductID\n    JOIN Employees e ON o.EmployeeID = e.EmployeeID\n    WHERE e.ReportsTo = 2\n    GROUP BY o.OrderID\n)",
    "6632": "WITH SalesValues AS (\n    SELECT\n        e.EmployeeID,\n        e.FirstName || ' ' || e.LastName AS SalesRepName,\n        SUM(od.Quantity * p.Price) AS TotalSales\n    FROM\n        OrderDetails od\n    INNER JOIN Orders o ON od.OrderID = o.OrderID\n    INNER JOIN Employees e ON o.EmployeeID = e.EmployeeID\n    INNER JOIN Products p ON od.ProductID = p.ProductID\n    GROUP BY\n        e.EmployeeID\n)\n\nSELECT\n    SalesRepName,\n    TotalSales\nFROM\n    SalesValues\nWHERE\n    TotalSales = (SELECT MAX(TotalSales) FROM SalesValues)",
    "6633": "Given the structure of the tables you've provided, there's no direct way to determine if an employee is a UK citizen or if they cover any specific region because there's no column in the `Employees` table that indicates the employee's citizenship or the region they cover. The tables as defined do not include any information about the country or region associated with employees.\n\nHowever, if we were to assume that the concept of \"region\" might be indirectly inferred through other entities like customers or orders they handle (which is a stretch given the structure), we still wouldn't be able to directly correlate employees to being UK citizens or covering a specific region based on the provided schema.\n\nTo directly answer the question about the number of employees who are UK citizens and whether they cover the same region, we would need additional information or tables that link employees to a country or region, such as an `EmployeeCountry` or `Regions` table, or at least a `Country` column in the `Employees` table.\n\nGiven the current table structures, there's no SQL query that can accurately answer the question about the number of UK citizen employees and the regions they cover, as the necessary data points are not present.",
    "6634": "SELECT \n    Customers.CustomerName, \n    Customers.Country AS ShipToCountry, \n    Orders.OrderID, \n    SUM(OrderDetails.Quantity) AS TotalQuantity\nFROM Orders\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nGROUP BY Orders.OrderID\nORDER BY TotalQuantity DESC\nLIMIT 1;",
    "6635": "WITH CustomerOrderCounts AS (\n    SELECT\n        CustomerID,\n        COUNT(OrderID) AS OrderCount\n    FROM Orders\n    GROUP BY CustomerID\n    ORDER BY OrderCount DESC\n    LIMIT 1\n), MostBoughtCategories AS (\n    SELECT\n        C.CategoryName,\n        COUNT(C.CategoryName) AS CategoryCount\n    FROM Categories C\n    JOIN Products P ON C.CategoryID = P.CategoryID\n    JOIN OrderDetails OD ON P.ProductID = OD.ProductID\n    JOIN Orders O ON OD.OrderID = O.OrderID\n    JOIN CustomerOrderCounts COC ON O.CustomerID = COC.CustomerID\n    GROUP BY C.CategoryName\n    ORDER BY CategoryCount DESC\n    LIMIT 1\n)\nSELECT\n    (SELECT CustomerID FROM CustomerOrderCounts) AS RegularCustomerID,\n    (SELECT CategoryName FROM MostBoughtCategories) AS MostBoughtCategory",
    "6636": "WITH ConfectionsSales AS (\n    SELECT\n        p.ProductID,\n        p.ProductName,\n        SUM(od.Quantity) AS TotalQuantitySold,\n        SUM(od.Quantity * p.Price) AS TotalSales\n    FROM\n        Products p\n    JOIN Categories c ON p.CategoryID = c.CategoryID\n    JOIN OrderDetails od ON p.ProductID = od.ProductID\n    WHERE\n        c.CategoryName = 'Confections'\n    GROUP BY\n        p.ProductID\n),\nMaxSales AS (\n    SELECT\n        ProductID,\n        MAX(TotalQuantitySold) AS MaxQuantitySold\n    FROM\n        ConfectionsSales\n)\nSELECT\n    cs.ProductID,\n    cs.ProductName,\n    cs.TotalQuantitySold,\n    cs.TotalSales\nFROM\n    ConfectionsSales cs\nJOIN MaxSales ms ON cs.TotalQuantitySold = ms.MaxQuantitySold",
    "6637": "SELECT ProductName FROM Products WHERE ProductID = 77",
    "6638": "SELECT SupplierName FROM Suppliers WHERE Country = 'USA'",
    "6639": "The provided SQL schema does not include a table or column explicitly for storing position titles for employees, including Laura Callahan. Therefore, it's impossible to directly answer the question \"What is the position title for Laura Callahan?\" using the given schema alone. \n\nTo accurately answer this question, an additional table or column that stores employee titles or positions would be necessary. For example, an additional column in the `Employees` table or a new table that links employees to their positions would be required.\n\nGiven the current schema, there's no SQL query that can directly fetch the position title for Laura Callahan or any other employee, as that information is simply not present.",
    "6640": "SELECT Employees.FirstName\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Customers.CustomerName = 'Victuailles en stock'",
    "6641": "SELECT COUNT(*) AS NumberOfOrdersShippedByFederalShipping\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Shippers.ShipperName = 'Federal Shipping'",
    "6642": "Given the tables and relationships you've provided, there is no direct way to answer the question about who was taking charge of orders from Morristown because there is no table or column directly linking orders to territories or locations like \"Morristown\". The tables you've provided include `Categories`, `Customers`, `Employees`, `Shippers`, `Suppliers`, `Products`, `Orders`, and `OrderDetails`, but none of these tables contain a field for \"TerritoryDescription\" or a direct link to a territory or city name like \"Morristown\".\n\nTo accurately answer a question about orders from Morristown, we would need additional information or tables that link orders or customers to specific territories or cities. For example, a table that maps customers to territories or a field in the `Customers` table that specifies the territory or city for each customer could be used to trace orders back to Morristown and then to the employees who handled those orders.\n\nWithout such information, it's impossible to construct an SQL query that accurately answers the question based on the schema provided. If you have additional tables or fields that were not included in your initial schema, please provide them for a more accurate answer.",
    "6643": "Based on the tables you've provided, there are no tables related to territories or regions directly included in your schema. Therefore, it's not possible to directly answer the question regarding the names of all territories in the Northern region with the given tables. \n\nTo answer such a question, you would typically need tables that define territories and regions, and a way to link territories to regions (usually through foreign keys). For example, you might expect tables like `Territories` and `Regions`, with `Territories` having a foreign key that references `Regions`.\n\nSince these tables are not part of the schema you've provided, we cannot construct an SQL query to fetch the names of all territories in the Northern region based on the information given.\n\nIf you have or can provide the schema for the territories and regions, I'd be happy to help construct the appropriate SQL query.",
    "6644": "SELECT \n    Orders.OrderID\nFROM \n    Orders\nJOIN \n    Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE \n    Employees.FirstName = 'Michael' AND Employees.LastName = 'Suyama';",
    "6645": "CREATE TABLE Regions(\n    RegionID INTEGER PRIMARY KEY,\n    RegionName TEXT\n);\n\nCREATE TABLE Territories(\n    TerritoryID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TerritoryDescription TEXT,\n    RegionID INTEGER,\n    FOREIGN KEY (RegionID) REFERENCES Regions (RegionID)\n);",
    "6646": "Given the tables and relationships you've provided, there is no direct table or column that links employees to territories, nor is there a definition for territories or how they relate to the other entities in the schema you've provided. Without a table that explicitly defines territories and their relationship to employees, it's impossible to construct an SQL query that accurately answers the question based on the schema provided.\n\nTo answer a question like \"Provide employees' ID who are in-charge of territory ID from 1000 to 2000\" with the given schema, we would need an additional table or tables that link employees to territories, such as an `EmployeeTerritories` table that maps `EmployeeID` to `TerritoryID`. \n\nSince such a table does not exist in the schema you've provided, and based on the information given, it's not possible to accurately construct an SQL query to find employees in charge of a specific range of territory IDs.\n\nIf you have additional tables or relationships that were not included in your initial schema, please provide them so that a more accurate SQL query can be constructed.",
    "6647": "It seems there's a misunderstanding in the request. The SQL schema provided does not include tables or fields related to territories, territory descriptions, or regions, nor is there any mention of an individual named Nancy Davolio within the schema. The tables defined are focused on categories, customers, employees, shippers, suppliers, products, orders, and order details, without any direct reference to territories or regions.\n\nTo query territory IDs, descriptions, and region descriptions for an employee like Nancy Davolio, you would need tables that define territories, regions, and a link between employees and territories (usually through an employeeTerritories join table or similar). Since these tables are not present in the schema provided, it's not possible to construct a SQL query to retrieve the requested information based on the current schema.\n\nIf you have a different question related to the existing tables or if there's additional information or tables not included in your initial message, please provide that for further assistance.",
    "6648": "-- Assuming the Employees table includes Title and HireDate fields\nSELECT \n    e.FirstName || ' ' || e.LastName AS EmployeeName,\n    COUNT(o.OrderID) AS NumberOfOrders\nFROM \n    Employees e\nLEFT JOIN \n    Orders o ON e.EmployeeID = o.EmployeeID\nWHERE \n    e.Title = 'Sales Representative'\n    AND strftime('%Y', e.HireDate) = '1992'\nGROUP BY \n    e.EmployeeID\nORDER BY \n    NumberOfOrders DESC;",
    "6649": "SELECT SUM(Products.Price * OrderDetails.Quantity) AS TotalPayment\nFROM OrderDetails\nJOIN Products ON OrderDetails.ProductID = Products.ProductID\nWHERE Products.ProductName = 'Vegie-spread'",
    "6650": "SELECT DISTINCT Suppliers.SupplierName\nFROM Suppliers\nJOIN Products ON Suppliers.SupplierID = Products.SupplierID\nJOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID\nJOIN Orders ON OrderDetails.OrderID = Orders.OrderID\nWHERE Orders.OrderDate = '1996-08-14'",
    "6651": "SELECT p.ProductName, s.SupplierName\nFROM OrderDetails od\nJOIN Products p ON od.ProductID = p.ProductID\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nWHERE od.OrderID = 10337;",
    "6652": "SELECT \n    Shippers.ShipperName, \n    COUNT(Orders.OrderID) AS NumberOfShipments\nFROM \n    Orders\nJOIN \n    Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE \n    strftime('%Y-%m', Orders.OrderDate) BETWEEN '1998-01' AND '1998-03'\nGROUP BY \n    Shippers.ShipperID\nORDER BY \n    NumberOfShipments DESC\nLIMIT 1;",
    "6653": "SELECT COUNT(*) AS NumberOfCustomersInLondon\nFROM Customers\nWHERE City = 'London'",
    "6654": "SELECT BirthDate FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama';",
    "6655": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employees\nWHERE BirthDate = '1955-03-04 00:00:00'",
    "6656": "SELECT Employees.FirstName\nFROM Orders\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Orders.OrderID = 10250",
    "6657": "SELECT COUNT(DISTINCT o.OrderID) AS NumberOfOrders\nFROM Orders o\nJOIN Employees e ON o.EmployeeID = e.EmployeeID\nWHERE e.City = 'Tacoma'",
    "6658": "SELECT Customers.Country\nFROM Orders\nJOIN Customers ON Orders.CustomerID = Customers.CustomerID\nWHERE Orders.OrderID = 10257;",
    "6659": "SELECT Employees.FirstName, Employees.LastName\nFROM Orders\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Orders.OrderID = 10270;",
    "6660": "SELECT Customers.Phone\nFROM Customers\nJOIN Orders ON Customers.CustomerID = Orders.CustomerID\nWHERE Orders.OrderID = 10264",
    "6661": "SELECT c.City, c.Country\nFROM Customers c\nJOIN Orders o ON c.CustomerID = o.CustomerID\nWHERE o.OrderID = 10276",
    "6662": "-- Assuming there's a Salary field in Employees table and ShipCountry is inferred from Customers.Country\nSELECT \n    EmployeeID, \n    MAX(Salary) AS HighestSalary, \n    AVG(Salary) OVER () AS AverageSalary\nFROM \n    Employees\nWHERE \n    EmployeeID IN (\n        SELECT DISTINCT \n            Orders.EmployeeID\n        FROM \n            Orders\n        INNER JOIN \n            Customers ON Orders.CustomerID = Customers.CustomerID\n        WHERE \n            Customers.Country = 'Brazil'\n    )",
    "6663": "It seems there's a misunderstanding in the question provided. The tables created do not include a `ShippedDate` field in the `Orders` table or a `Salary` field in the `Employees` table. Therefore, it's not possible to directly calculate the percentage salary of employees who handled orders shipped in 1996 based on the given table structures.\n\nTo address the question as intended, we would need to modify the table structures to include a `ShippedDate` field in the `Orders` table and a `Salary` field in the `Employees` table. However, since the question asks to work with the provided tables and mentions using external knowledge, it seems there might be a confusion or error in the question setup.\n\nGiven the current table structures, there's no way to calculate the percentage salary of employees based on orders shipped in 1996, as neither the necessary date information nor salary information is present in the provided schema.\n\nIf you have any other questions or need further assistance with a different query or a corrected version of the current question, feel free to ask!",
    "6664": "SELECT Employees.HireDate\nFROM Employees\nJOIN Orders ON Employees.EmployeeID = Orders.EmployeeID\nWHERE Orders.OrderID = 10281",
    "6665": "Given the tables and relationships you've provided, there's no direct column in the `Employees` table or any other table that indicates who an employee reports to (i.e., there's no `ReportsTo` column or similar). Therefore, based on the schema you've provided, it's impossible to directly answer the question about how many orders were handled by employees who reported to employee id 5, as there's no data or relationship defined to track reporting structures between employees.\n\nHowever, if we were to assume that such a relationship exists but is not explicitly defined in the schema you've provided, we would typically need a column in the `Employees` table to indicate who each employee reports to. For example, adding a `ReportsTo INTEGER REFERENCES Employees(EmployeeID)` column to the `Employees` table would allow tracking of reporting structures.\n\nSince we can't directly answer the question with the provided schema and without making assumptions that alter the schema, the correct response is that it's not possible to generate an SQL query to accurately answer the question based on the given tables and relationships.",
    "6666": "SELECT Employees.FirstName || ' ' || Employees.LastName AS FullName\nFROM Orders\nJOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE Orders.OrderID = 10280",
    "6667": "SELECT ShipperName \nFROM Shippers \nJOIN Orders ON Shippers.ShipperID = Orders.ShipperID \nWHERE Orders.OrderID = 10260",
    "6668": "SELECT COUNT(*) AS NumberOfOrdersShippedThroughUnitedPackage\nFROM Orders o\nJOIN Shippers s ON o.ShipperID = s.ShipperID\nWHERE s.ShipperName = 'United Package'",
    "6669": "SELECT Shippers.Phone\nFROM Orders\nJOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nWHERE Orders.OrderID = 10296",
    "6670": "SELECT COUNT(l_linenumber) AS kinds_of_items_returned\nFROM lineitem\nWHERE l_orderkey = 5 AND l_returnflag = 'R';",
    "6671": "SELECT MAX(l_shipdate) AS latest_ship_date\nFROM lineitem\nWHERE l_orderkey = 1;",
    "6672": "SELECT o_orderkey AS 'Order Number', o_orderdate AS 'Order Date'\nFROM orders\nWHERE o_orderkey IN (4, 36)\nORDER BY o_orderdate ASC\nLIMIT 1;",
    "6673": "SELECT o_comment \nFROM orders \nWHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);",
    "6674": "SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001';",
    "6675": "SELECT COUNT(*) AS total_household_orders\nFROM orders\nJOIN customer ON orders.o_custkey = customer.c_custkey\nWHERE customer.c_mktsegment = 'HOUSEHOLD';",
    "6676": "SELECT MAX(o.o_totalprice) AS highest_total_price\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nWHERE c.c_mktsegment = 'HOUSEHOLD'",
    "6677": "SELECT o.o_comment\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nWHERE c.c_mktsegment = 'HOUSEHOLD'",
    "6678": "SELECT c.c_name\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nORDER BY o.o_totalprice DESC\nLIMIT 1;",
    "6679": "SELECT o_orderkey\nFROM orders\nJOIN customer ON orders.o_custkey = customer.c_custkey\nWHERE customer.c_acctbal < 0;",
    "6680": "SELECT COUNT(*) AS urgent_orders_in_household\nFROM orders\nJOIN customer ON orders.o_custkey = customer.c_custkey\nWHERE customer.c_mktsegment = 'HOUSEHOLD' AND orders.o_orderpriority = '1-URGENT'",
    "6681": "SELECT COUNT(*) AS customers_in_brazil\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'BRAZIL'",
    "6682": "SELECT c.c_phone\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE c.c_mktsegment = 'HOUSEHOLD' AND n.n_name = 'BRAZIL'",
    "6683": "SELECT COUNT(*) AS customers_with_high_balance\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'GERMANY' AND customer.c_acctbal > 1000;",
    "6684": "SELECT COUNT(*) AS total_orders\nFROM orders\nJOIN customer ON orders.o_custkey = customer.c_custkey\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'GERMANY'",
    "6685": "SELECT SUM(o.o_totalprice) AS total_price\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE n.n_name = 'GERMANY'",
    "6686": "SELECT o.o_orderkey\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE n.n_name = 'GERMANY'\nORDER BY o.o_orderdate\nLIMIT 1",
    "6687": "SELECT AVG(o_totalprice) AS average_order_price\nFROM orders\nJOIN customer ON orders.o_custkey = customer.c_custkey\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'GERMANY';",
    "6688": "SELECT \n    (COUNT(CASE WHEN n.n_name = 'GERMANY' THEN c.c_custkey END) * 1.0 / COUNT(c.c_custkey)) * 100 AS percentage\nFROM \n    customer c\nJOIN \n    nation n ON c.c_nationkey = n.n_nationkey;",
    "6689": "SELECT COUNT(*) AS countries_in_region_2\nFROM nation\nWHERE n_regionkey = 2;",
    "6690": "SELECT n_name AS country\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE s_suppkey = 34",
    "6691": "SELECT r.r_name\nFROM region r\nJOIN nation n ON r.r_regionkey = n.n_regionkey\nJOIN supplier s ON n.n_nationkey = s.s_nationkey\nWHERE s.s_name = 'Supplier#000000129'",
    "6692": "SELECT n.n_name AS nationality\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE c.c_name = 'Customer#000000055'",
    "6693": "SELECT r.r_name\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nJOIN region r ON n.n_regionkey = r.r_regionkey\nWHERE c.c_custkey = 106936",
    "6694": "SELECT COUNT(*) AS Moroccan_Customers_In_Debt\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'MOROCCO' AND customer.c_acctbal < 0;",
    "6695": "SELECT \n    l_extendedprice * (1 - l_discount) AS discounted_price\nFROM \n    lineitem\nJOIN \n    orders ON lineitem.l_orderkey = orders.o_orderkey\nWHERE \n    o_totalprice = 231499.38 \n    AND l_suppkey = 9397;",
    "6696": "SELECT l.l_suppkey AS supplier_id\nFROM lineitem l\nJOIN orders o ON l.l_orderkey = o.o_orderkey\nWHERE o.o_totalprice = 218195.43 AND l.l_returnflag = 'R'",
    "6697": "SELECT SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) AS total_charge\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nWHERE orders.o_clerk = 'Clerk#000000936'\nAND orders.o_orderstatus = '4-NOT SPECIFIED'\nAND orders.o_orderdate = '1995-03-13'\nAND lineitem.l_shipmode = 'TRUCK';",
    "6698": "SELECT \n    JULIANDAY(l_receiptdate) - JULIANDAY(l_commitdate) AS delivery_time\nFROM \n    orders\nJOIN \n    lineitem ON orders.o_orderkey = lineitem.l_orderkey\nWHERE \n    orders.o_orderdate = '1996-07-27' \n    AND orders.o_custkey = 129301\nORDER BY \n    lineitem.l_linenumber ASC\nLIMIT 1;",
    "6699": "SELECT c.c_name\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE o.o_clerk = 'Clerk#000000803' AND o.o_orderdate = '1997-12-10';",
    "6700": "SELECT \n    (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS profit\nFROM \n    lineitem\nJOIN \n    partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nWHERE \n    l_suppkey = 7414 AND l_orderkey = 817154;",
    "6701": "SELECT n.n_name AS country\nFROM supplier s\nJOIN nation n ON s.s_nationkey = n.n_nationkey\nWHERE s.s_acctbal < 0\nGROUP BY n.n_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "6702": "SELECT \n    (SELECT COUNT(*) FROM nation \n     INNER JOIN region ON nation.n_regionkey = region.r_regionkey \n     WHERE region.r_name = 'EUROPE') * 100.0 / \n    (SELECT COUNT(*) FROM nation) AS percentage;",
    "6703": "SELECT \n    (SUM(CASE WHEN s_acctbal < 0 THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS percentage\nFROM \n    supplier\nJOIN \n    nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE \n    nation.n_name = 'JAPAN'",
    "6704": "SELECT c_name \nFROM customer \nORDER BY c_acctbal ASC \nLIMIT 1;",
    "6705": "SELECT COUNT(DISTINCT l_orderkey) AS total_orders_shipped_in_1998\nFROM lineitem\nWHERE strftime('%Y', l_shipdate) = '1998';",
    "6706": "SELECT COUNT(*) AS customers_in_debt FROM customer WHERE c_acctbal < 0;",
    "6707": "SELECT COUNT(*) AS items_returned\nFROM lineitem\nWHERE l_shipmode = 'AIR'\nAND l_returnflag = 'R'\nAND strftime('%Y', l_shipdate) = '1994'",
    "6708": "SELECT COUNT(*) AS automobile_customers_count\nFROM customer\nWHERE c_mktsegment = 'AUTOMOBILE';",
    "6709": "SELECT l_orderkey\nFROM lineitem\nORDER BY l_extendedprice DESC\nLIMIT 2",
    "6710": "SELECT l_shipdate \nFROM lineitem \nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey \nWHERE orders.o_totalprice = (SELECT MAX(o_totalprice) FROM orders)",
    "6711": "SELECT n.n_name AS country, COUNT(c.c_custkey) AS customer_count\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nGROUP BY n.n_name\nORDER BY customer_count DESC\nLIMIT 1;",
    "6712": "SELECT COUNT(*) AS urgent_orders_shipped_next_day\nFROM orders\nJOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey\nWHERE orders.o_orderpriority = '1-URGENT'\nAND julianday(lineitem.l_shipdate) - julianday(orders.o_orderdate) = 1;",
    "6713": "SELECT COUNT(*) AS InDebtHouseholdCustomersFromRussia\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE customer.c_acctbal < 0\nAND customer.c_mktsegment = 'HOUSEHOLD'\nAND nation.n_name = 'RUSSIA'",
    "6714": "SELECT COUNT(*) AS suppliers_from_japan\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'JAPAN'",
    "6715": "SELECT COUNT(DISTINCT o_orderkey) AS medium_priority_ship_orders\nFROM orders\nJOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey\nWHERE o_orderpriority = '3-MEDIUM' AND l_shipmode = 'SHIP';",
    "6716": "SELECT c_mktsegment, COUNT(c_custkey) AS customer_count\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE n_name = 'UNITED STATES'\nGROUP BY c_mktsegment\nORDER BY customer_count DESC\nLIMIT 1",
    "6717": "SELECT n_name \nFROM nation \nJOIN region ON nation.n_regionkey = region.r_regionkey \nWHERE r_name = 'ASIA';",
    "6718": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nWHERE p.p_mfgr = 'Manufacturer#3' AND ps.ps_supplycost = 1000;",
    "6719": "SELECT COUNT(*) AS countries_in_region\nFROM nation\nJOIN region ON nation.n_regionkey = region.r_regionkey\nWHERE region.r_comment = 'asymptotes sublate after the r'",
    "6720": "SELECT COUNT(DISTINCT part.p_partkey) AS products_shipped_via_rail\nFROM part\nJOIN partsupp ON part.p_partkey = partsupp.ps_partkey\nJOIN lineitem ON partsupp.ps_partkey = lineitem.l_partkey AND partsupp.ps_suppkey = lineitem.l_suppkey\nWHERE part.p_mfgr = 'Manufacturer#5'\nAND part.p_retailprice <= 1000\nAND lineitem.l_shipmode = 'RAIL'",
    "6721": "SELECT \n    SUM((l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity)) AS profit\nFROM \n    lineitem\nJOIN \n    partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nJOIN \n    part ON partsupp.ps_partkey = part.p_partkey\nWHERE \n    part.p_name = 'smoke turquoise purple blue salmon' \n    AND lineitem.l_receiptdate = '1996-05-07' \n    AND lineitem.l_shipinstruct = 'DELIVER IN PERSON';",
    "6722": "SELECT AVG(l_extendedprice) AS avg_price_before_discount\nFROM (\n    SELECT l_extendedprice\n    FROM lineitem\n    JOIN orders ON lineitem.l_orderkey = orders.o_orderkey\n    ORDER BY orders.o_totalprice DESC\n    LIMIT 10\n)",
    "6723": "SELECT \n    c.c_name,\n    COUNT(o.o_orderkey) AS total_orders,\n    SUM(o.o_totalprice) / COUNT(o.o_orderkey) AS avg_total_price_per_order\nFROM \n    customer c\nJOIN \n    orders o ON c.c_custkey = o.o_custkey\nGROUP BY \n    c.c_name\nORDER BY \n    total_orders DESC, avg_total_price_per_order DESC\nLIMIT 3",
    "6724": "SELECT COUNT(*) AS items_shipped\nFROM lineitem\nWHERE l_shipdate = '1993-12-04';",
    "6725": "SELECT o_orderdate \nFROM orders \nWHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);",
    "6726": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) FROM customer WHERE c_acctbal < 0) / \n    (SELECT CAST(COUNT(*) AS REAL) FROM customer) * 100 AS percentage_in_debt",
    "6727": "SELECT COUNT(*) AS nearly_out_of_stock\nFROM partsupp\nWHERE ps_availqty < 10;",
    "6728": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) FROM part WHERE p_mfgr = 'Manufacturer#3') / \n    (SELECT CAST(COUNT(*) AS REAL) FROM part) AS percentage",
    "6729": "SELECT p_name \nFROM part \nWHERE p_type = 'MEDIUM PLATED BRASS'\nLIMIT 5;",
    "6730": "SELECT COUNT(DISTINCT o.o_orderkey) AS urgent_orders_count\nFROM orders o\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nWHERE l.l_shipdate LIKE '1998-11-%'\nAND l.l_shipmode = 'AIR'\nAND o.o_orderpriority = '1-URGENT'",
    "6731": "SELECT COUNT(*) AS customers_in_india\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'INDIA'",
    "6732": "SELECT COUNT(*) AS customers_in_debt\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'MOROCCO' AND customer.c_acctbal < 0;",
    "6733": "SELECT n.n_nationkey, n.n_name\nFROM nation n\nJOIN region r ON n.n_regionkey = r.r_regionkey\nWHERE r.r_name = 'Africa'",
    "6734": "SELECT SUM(o.o_totalprice) AS total_price\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE c.c_name = 'Customer#000000013'",
    "6735": "SELECT COUNT(*) AS items_ordered, \n       SUM((l_extendedprice * (1 - l_discount)) * (1 + l_tax)) AS total_charges\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nJOIN customer ON orders.o_custkey = customer.c_custkey\nWHERE customer.c_name = 'Customer#000021159';",
    "6736": "SELECT SUM(\n    (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity)\n) AS total_profit\nFROM lineitem\nJOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE p_name = 'chocolate floral blue coral cyan';",
    "6737": "SELECT \n    (SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY') * 100.0 / \n    (SELECT COUNT(*) FROM supplier) AS percentage;",
    "6738": "SELECT s.s_name\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_name = 'smoke red pale saddle plum'",
    "6739": "SELECT COUNT(*) AS suppliers_in_debt\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nJOIN region ON nation.n_regionkey = region.r_regionkey\nWHERE region.r_name = 'MIDDLE EAST' AND supplier.s_acctbal < 0;",
    "6740": "SELECT DISTINCT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nJOIN lineitem l ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey\nWHERE l.l_shipmode = 'RAIL' AND l.l_shipdate = '1995-12-01' AND l.l_discount = 0.1",
    "6741": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nJOIN supplier s ON ps.ps_suppkey = s.s_suppkey\nWHERE s.s_name = 'Supplier#000000018' AND ps.ps_supplycost > 900",
    "6742": "SELECT COUNT(DISTINCT l_orderkey) AS orders_shipped_in_1994\nFROM lineitem\nWHERE strftime('%Y', l_shipdate) = '1994';",
    "6743": "SELECT COUNT(*) FROM lineitem WHERE l_shipmode = 'RAIL' AND l_quantity < 30;",
    "6744": "SELECT COUNT(*) AS furniture_customers_with_nation_key_1\nFROM customer\nWHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1;",
    "6745": "SELECT c_phone FROM customer ORDER BY c_acctbal DESC LIMIT 1",
    "6746": "SELECT o_orderpriority\nFROM orders\nWHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)",
    "6747": "SELECT COUNT(*) AS total_orders\nFROM orders\nJOIN customer ON orders.o_custkey = customer.c_custkey\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'UNITED STATES'",
    "6748": "SELECT COUNT(*) AS automobile_customers_in_brazil\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'BRAZIL' AND customer.c_mktsegment = 'automobile';",
    "6749": "SELECT o.o_comment\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nWHERE c.c_mktsegment = 'Furniture'\nLIMIT 5",
    "6750": "SELECT n.n_name AS Country\nFROM nation AS n\nJOIN region AS r ON n.n_regionkey = r.r_regionkey\nWHERE r.r_name = 'ASIA'",
    "6751": "SELECT n_name \nFROM nation \nJOIN region ON nation.n_regionkey = region.r_regionkey \nWHERE r_comment = 'furiously express accounts wake sly';",
    "6752": "SELECT COUNT(*) AS total_suppliers_from_germany\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'GERMANY'",
    "6753": "SELECT COUNT(*) AS customers_in_debt_in_asia\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nJOIN region ON nation.n_regionkey = region.r_regionkey\nWHERE region.r_name = 'ASIA' AND customer.c_acctbal < 0;",
    "6754": "SELECT c.c_phone\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nORDER BY o.o_totalprice DESC\nLIMIT 1",
    "6755": "SELECT COUNT(DISTINCT part.p_partkey)\nFROM part\nJOIN partsupp ON part.p_partkey = partsupp.ps_partkey\nJOIN lineitem ON partsupp.ps_partkey = lineitem.l_partkey AND partsupp.ps_suppkey = lineitem.l_suppkey\nWHERE part.p_retailprice > 1000 AND lineitem.l_shipmode = 'SHIP'",
    "6756": "SELECT c.c_name, c.c_mktsegment\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE o.o_totalprice = 199180.63;",
    "6757": "SELECT n.n_name AS nation, r.r_name AS region\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nJOIN region r ON n.n_regionkey = r.r_regionkey\nWHERE c.c_address = 'wH55UnX7 VI'",
    "6758": "SELECT COUNT(*) AS customers_with_balance_less_than_1000\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'BRAZIL' AND customer.c_acctbal < 1000;",
    "6759": "SELECT n.n_name AS country_name\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE c.c_mktsegment = 'BUILDING'\nAND c.c_acctbal > (\n    SELECT AVG(c_acctbal) * 0.8\n    FROM customer\n)",
    "6760": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM customer \n     JOIN nation ON customer.c_nationkey = nation.n_nationkey \n     WHERE nation.n_name = 'United States' AND customer.c_acctbal < 4000) / \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM customer \n     WHERE c_acctbal < 4000) \n    AS percentage;",
    "6761": "SELECT c_name, c_phone\nFROM customer\nWHERE c_acctbal > 9000;",
    "6762": "SELECT AVG(daily_shipments) AS avg_daily_shipments\nFROM (\n    SELECT COUNT(*) AS daily_shipments\n    FROM lineitem\n    WHERE l_shipdate BETWEEN '1994-04-01' AND '1994-04-30'\n    GROUP BY l_shipdate\n)",
    "6763": "SELECT o_orderkey\nFROM orders\nWHERE o_totalprice BETWEEN 200000 AND 300000;",
    "6764": "SELECT p_partkey \nFROM part \nWHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part);",
    "6765": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) FROM partsupp WHERE ps_supplycost > 500) / \n    (SELECT CAST(COUNT(*) AS REAL) FROM partsupp) * 100 AS percentage",
    "6766": "SELECT s_suppkey, s_acctbal\nFROM supplier\nORDER BY s_acctbal DESC\nLIMIT 10",
    "6767": "SELECT COUNT(DISTINCT o.o_custkey) AS not_in_debt_urgent_orders\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nWHERE c.c_acctbal > 0 AND o.o_orderpriority = '1-URGENT'",
    "6768": "SELECT c_name, c_phone\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE n_name = 'INDIA' AND c_acctbal > (\n    SELECT AVG(c_acctbal)\n    FROM customer\n)",
    "6769": "SELECT p.p_partkey, p.p_name, ps.ps_supplycost\nFROM partsupp ps\nJOIN part p ON ps.ps_partkey = p.p_partkey\nJOIN supplier s ON ps.ps_suppkey = s.s_suppkey\nWHERE s.s_name = 'Supplier#000000654'\nORDER BY ps.ps_supplycost DESC\nLIMIT 5",
    "6770": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM customer \n     JOIN nation ON customer.c_nationkey = nation.n_nationkey \n     WHERE c_mktsegment = 'AUTOMOBILE' AND n_name = 'FRANCE') \n    / \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM customer \n     JOIN nation ON customer.c_nationkey = nation.n_nationkey \n     WHERE n_name = 'FRANCE') \n    AS percentage;",
    "6771": "SELECT p.p_name, MAX(profit) AS max_profit\nFROM (\n    SELECT \n        l.l_partkey,\n        SUM((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS profit\n    FROM lineitem l\n    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey\n    GROUP BY l.l_partkey\n) AS profit_table\nJOIN part p ON profit_table.l_partkey = p.p_partkey",
    "6772": "WITH CountryCustomerCounts AS (\n    SELECT \n        n.n_name AS country_name,\n        COUNT(c.c_custkey) AS customer_count\n    FROM nation n\n    LEFT JOIN customer c ON n.n_nationkey = c.c_nationkey\n    GROUP BY n.n_nationkey\n),\nAverageCustomerCount AS (\n    SELECT AVG(customer_count) AS avg_customer_count\n    FROM CountryCustomerCounts\n)\nSELECT \n    ccc.country_name\nFROM CountryCustomerCounts ccc, AverageCustomerCount acc\nWHERE ccc.customer_count < acc.avg_customer_count\nORDER BY ccc.customer_count ASC",
    "6773": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM customer \n     JOIN nation ON customer.c_nationkey = nation.n_nationkey\n     JOIN region ON nation.n_regionkey = region.r_regionkey\n     WHERE c_mktsegment = 'HOUSEHOLD' AND r_name = 'AFRICA') \n    /\n    (SELECT CAST(COUNT(*) AS REAL)\n     FROM customer \n     JOIN nation ON customer.c_nationkey = nation.n_nationkey\n     JOIN region ON nation.n_regionkey = region.r_regionkey\n     WHERE r_name = 'AFRICA') \n    AS percentage;",
    "6774": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nGROUP BY p.p_partkey\nORDER BY MAX(ps.ps_availqty) DESC\nLIMIT 10",
    "6775": "SELECT \n    (SUM(CASE WHEN l_shipmode = 'SHIP' THEN p_retailprice ELSE 0 END) / COUNT(CASE WHEN l_shipmode = 'SHIP' THEN 1 END)) -\n    (SUM(CASE WHEN l_shipmode = 'AIR' THEN p_retailprice ELSE 0 END) / COUNT(CASE WHEN l_shipmode = 'AIR' THEN 1 END)) AS price_difference\nFROM \n    lineitem\nJOIN \n    part ON lineitem.l_partkey = part.p_partkey",
    "6776": "SELECT AVG(l_discount) AS average_discount\nFROM lineitem\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE p_mfgr = 'Manufacturer#5';",
    "6777": "SELECT COUNT(DISTINCT l.l_partkey) AS medium_priority_parts_shipped_by_rail\nFROM lineitem l\nJOIN orders o ON l.l_orderkey = o.o_orderkey\nWHERE l.l_shipmode = 'RAIL' AND o.o_orderpriority = '3-MEDIUM';",
    "6778": "WITH EuropeSuppliers AS (\n    SELECT s.s_suppkey, s.s_acctbal\n    FROM supplier s\n    JOIN nation n ON s.s_nationkey = n.n_nationkey\n    JOIN region r ON n.n_regionkey = r.r_regionkey\n    WHERE r.r_name = 'EUROPE'\n),\nAvgAcctBal AS (\n    SELECT AVG(s_acctbal) AS avg_acctbal\n    FROM EuropeSuppliers\n)\nSELECT \n    (SELECT COUNT(*) FROM EuropeSuppliers WHERE s_acctbal < (SELECT avg_acctbal FROM AvgAcctBal)) * 1.0 / COUNT(*) AS percentage\nFROM EuropeSuppliers",
    "6779": "WITH Orders1995 AS (\n    SELECT\n        strftime('%m', l_shipdate) AS month,\n        COUNT(DISTINCT o_orderkey) AS num_orders\n    FROM\n        lineitem\n        JOIN orders ON lineitem.l_orderkey = orders.o_orderkey\n    WHERE\n        l_shipmode = 'TRUCK'\n        AND o_orderpriority = '5-LOW'\n        AND strftime('%Y', l_shipdate) = '1995'\n    GROUP BY\n        strftime('%m', l_shipdate)\n),\nOrders1996 AS (\n    SELECT\n        strftime('%m', l_shipdate) AS month,\n        COUNT(DISTINCT o_orderkey) AS num_orders\n    FROM\n        lineitem\n        JOIN orders ON lineitem.l_orderkey = orders.o_orderkey\n    WHERE\n        l_shipmode = 'TRUCK'\n        AND o_orderpriority = '5-LOW'\n        AND strftime('%Y', l_shipdate) = '1996'\n    GROUP BY\n        strftime('%m', l_shipdate)\n),\nMonthlyDifference AS (\n    SELECT\n        Orders1995.month,\n        COALESCE(Orders1995.num_orders, 0) AS orders_1995,\n        COALESCE(Orders1996.num_orders, 0) AS orders_1996,\n        (COALESCE(Orders1995.num_orders, 0) - COALESCE(Orders1996.num_orders, 0)) AS difference\n    FROM\n        Orders1995\n        FULL OUTER JOIN Orders1996 ON Orders1995.month = Orders1996.month\n)\nSELECT\n    month,\n    SUM(difference) AS total_difference\nFROM\n    MonthlyDifference\nGROUP BY\n    month",
    "6780": "SELECT c_custkey FROM customer WHERE c_acctbal < 0;",
    "6781": "SELECT l_orderkey AS order_number,\n       l_extendedprice * (1 - l_discount) AS price_after_discount\nFROM lineitem\nORDER BY price_after_discount ASC\nLIMIT 3",
    "6782": "SELECT COUNT(DISTINCT l_orderkey) AS orders_returned\nFROM lineitem\nWHERE l_returnflag = 'R' AND l_quantity > 10;",
    "6783": "SELECT SUM((l_extendedprice * (1 - l_discount)) * (1 + l_tax)) AS total_price_charged\nFROM lineitem\nWHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE';",
    "6784": "SELECT COUNT(*) AS urgent_priority_orders\nFROM orders\nWHERE o_orderpriority = '1-URGENT'\nAND o_orderdate = (SELECT MAX(o_orderdate) FROM orders)",
    "6785": "SELECT COUNT(*) AS suppliers_in_debt\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'EGYPT' AND supplier.s_acctbal < 0;",
    "6786": "SELECT COUNT(*) AS items_shipped_by_reg_air\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nWHERE lineitem.l_shipmode = 'REG AIR' AND orders.o_orderdate = '1995-03-22';",
    "6787": "SELECT COUNT(*) AS EuropeanSuppliersCount\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nJOIN region ON nation.n_regionkey = region.r_regionkey\nWHERE region.r_name = 'EUROPE';",
    "6788": "SELECT c.c_mktsegment\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE strftime('%Y-%m', o.o_orderdate) = '1994-04'\nGROUP BY c.c_custkey\nORDER BY COUNT(o.o_orderkey) DESC\nLIMIT 1;",
    "6789": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nJOIN supplier s ON ps.ps_suppkey = s.s_suppkey\nWHERE s.s_name = 'Supplier#000000034'",
    "6790": "SELECT ps.ps_supplycost\nFROM partsupp ps\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_type = 'LARGE BURNISHED COPPER'",
    "6791": "SELECT COUNT(DISTINCT o.o_custkey) AS low_priority_orders_from_mozambique\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE n.n_name = 'MOZAMBIQUE' AND o.o_orderpriority = '5-LOW'",
    "6792": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nWHERE ps.ps_availqty < 10\nORDER BY ps.ps_supplycost ASC\nLIMIT 1",
    "6793": "SELECT COUNT(DISTINCT o.o_clerk) AS distinct_clerks\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nWHERE c.c_address = 'uFTe2u518et8Q8UC'",
    "6794": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nJOIN lineitem l ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey\nWHERE l.l_discount = 0.0000\nGROUP BY p.p_name",
    "6795": "SELECT COUNT(*) AS GermanSuppliersWithSpecificComment\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'GERMANY' AND supplier.s_comment LIKE 'carefully regular packages%'",
    "6796": "SELECT COUNT(DISTINCT l_partkey) AS products_count\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nWHERE l_shipdate = '1994-11-19' AND o_orderdate = '1994-09-21'",
    "6797": "SELECT AVG(profit) AS avg_profit\nFROM (\n    SELECT \n        (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS profit\n    FROM lineitem\n    JOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\n    JOIN part ON lineitem.l_partkey = part.p_partkey\n    WHERE p_type = 'PROMO BRUSHED STEEL'\n)",
    "6798": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM customer\n     JOIN nation ON customer.c_nationkey = nation.n_nationkey\n     WHERE c_mktsegment = 'HOUSEHOLD' AND n_name = 'IRAN') /\n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM customer\n     WHERE c_mktsegment = 'HOUSEHOLD') * 100 AS percentage",
    "6799": "SELECT c_mktsegment AS segment, c_name AS name, c_address AS address, c_phone AS phone_number\nFROM customer\nWHERE c_custkey = 3",
    "6800": "SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3;",
    "6801": "SELECT COUNT(*) \nFROM lineitem \nWHERE l_quantity > 40 AND l_shipmode = 'AIR'",
    "6802": "SELECT l_shipmode, COUNT(*) AS deliver_in_person_count\nFROM lineitem\nWHERE l_shipinstruct = 'DELIVER IN PERSON' AND l_shipmode IN ('rail', 'mail')\nGROUP BY l_shipmode\nORDER BY deliver_in_person_count DESC\nLIMIT 1",
    "6803": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33",
    "6804": "SELECT COUNT(*) AS orders_count\nFROM orders\nWHERE strftime('%Y', o_orderdate) = '1998' AND o_totalprice < 950;",
    "6805": "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3;",
    "6806": "SELECT l_extendedprice * (1 - l_discount) AS discounted_price\nFROM lineitem\nWHERE l_linenumber = 1;",
    "6807": "SELECT \n    (SUM(CASE WHEN l_returnflag IN ('A', 'N') THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN l_returnflag = 'R' THEN 1 ELSE 0 END)) AS difference\nFROM \n    lineitem\nWHERE \n    l_extendedprice < 16947.7",
    "6808": "SELECT ps_supplycost\nFROM partsupp\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE p_type = 'large plated tin'",
    "6809": "SELECT p_name \nFROM part \nJOIN partsupp ON part.p_partkey = partsupp.ps_partkey \nWHERE ps_availqty > 9998;",
    "6810": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nWHERE p.p_container = 'WRAP BAG' AND ps.ps_supplycost < 10\nLIMIT 2",
    "6811": "SELECT n.n_name AS nationality\nFROM supplier s\nJOIN nation n ON s.s_nationkey = n.n_nationkey\nWHERE s.s_suppkey = 1",
    "6812": "SELECT n_name AS country\nFROM nation\nJOIN region ON nation.n_regionkey = region.r_regionkey\nWHERE r_name = 'Africa'",
    "6813": "SELECT r_name \nFROM region \nJOIN nation ON region.r_regionkey = nation.n_regionkey \nGROUP BY region.r_regionkey \nORDER BY COUNT(nation.n_nationkey) ASC \nLIMIT 1",
    "6814": "SELECT COUNT(*) AS furniture_customers_from_iraq\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE customer.c_mktsegment = 'FURNITURE' AND nation.n_name = 'Iraq'",
    "6815": "SELECT c_name \nFROM customer \nJOIN orders ON customer.c_custkey = orders.o_custkey \nWHERE orders.o_custkey = 93697 AND orders.o_totalprice = 191918.92;",
    "6816": "SELECT n.n_name AS nation_name, r.r_name AS region_name\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nJOIN region r ON n.n_regionkey = r.r_regionkey\nWHERE c.c_name = 'Customer#000000008'",
    "6817": "SELECT julianday(l_receiptdate) - julianday(l_commitdate) AS delivery_time, o_clerk\nFROM orders\nJOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey\nWHERE orders.o_orderkey = 6",
    "6818": "SELECT COUNT(*) AS JapaneseSuppliersInDebt\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'Japan' AND supplier.s_acctbal < 0",
    "6819": "SELECT c_name \nFROM customer \nORDER BY c_acctbal ASC \nLIMIT 1",
    "6820": "SELECT o_orderdate\nFROM orders\nWHERE o_orderpriority = '1-URGENT'",
    "6821": "SELECT COUNT(*) AS items_instructed_to_deliver_in_person\nFROM lineitem\nWHERE l_shipinstruct = 'DELIVER IN PERSON'",
    "6822": "SELECT MAX(s_acctbal) AS largest_supplier_account_balance FROM supplier",
    "6823": "SELECT COUNT(*) AS close_to_out_of_stock\nFROM partsupp\nWHERE ps_availqty < 10",
    "6824": "SELECT n.n_name \nFROM nation n \nJOIN region r ON n.n_regionkey = r.r_regionkey \nWHERE r.r_name = 'EUROPE'",
    "6825": "SELECT ps_supplycost \nFROM partsupp \nJOIN part ON partsupp.ps_partkey = part.p_partkey \nWHERE p_name = 'violet olive rose ivory sandy'",
    "6826": "SELECT c_phone\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE n_name = 'Ethiopia'",
    "6827": "SELECT SUM(o.o_totalprice) AS total_price\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nWHERE c.c_phone = '627-220-3983'",
    "6828": "SELECT DISTINCT l_shipmode\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nWHERE orders.o_orderdate = '1994-12-31'",
    "6829": "SELECT s.s_acctbal\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nGROUP BY s.s_suppkey\nORDER BY COUNT(ps.ps_partkey) DESC\nLIMIT 1",
    "6830": "SELECT n.n_name \nFROM nation n \nJOIN supplier s ON n.n_nationkey = s.s_nationkey \nWHERE s.s_acctbal = 4393.04",
    "6831": "SELECT r.r_name AS region_name\nFROM region r\nJOIN nation n ON r.r_regionkey = n.n_regionkey\nJOIN customer c ON n.n_nationkey = c.c_nationkey\nGROUP BY r.r_regionkey\nORDER BY COUNT(c.c_custkey) DESC\nLIMIT 1",
    "6832": "SELECT c.c_phone\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE o.o_totalprice > 300000",
    "6833": "SELECT DISTINCT o.o_clerk\nFROM orders o\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nWHERE l.l_shipmode = 'MAIL'",
    "6834": "SELECT n.n_name\nFROM nation n\nJOIN supplier s ON n.n_nationkey = s.s_nationkey\nORDER BY s.s_acctbal ASC\nLIMIT 5",
    "6835": "SELECT s.s_address\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_size = (SELECT MAX(p_size) FROM part)",
    "6836": "SELECT \n    p.p_name AS part_name, \n    s.s_name AS supplier_name, \n    MAX((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS max_profit\nFROM \n    lineitem l\nJOIN \n    partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey\nJOIN \n    part p ON ps.ps_partkey = p.p_partkey\nJOIN \n    supplier s ON ps.ps_suppkey = s.s_suppkey\nGROUP BY \n    p.p_name, s.s_name\nORDER BY \n    max_profit DESC\nLIMIT 1;",
    "6837": "SELECT \n    (SELECT COUNT(*) \n     FROM supplier \n     JOIN nation ON supplier.s_nationkey = nation.n_nationkey \n     JOIN region ON nation.n_regionkey = region.r_regionkey \n     WHERE region.r_name = 'ASIA') * 100.0 / \n    (SELECT COUNT(*) FROM supplier) AS proportion_of_suppliers_from_asia",
    "6838": "SELECT o_totalprice FROM orders WHERE o_orderkey = 32;",
    "6839": "SELECT COUNT(DISTINCT l_orderkey) AS order_keys_without_discount\nFROM lineitem\nWHERE l_discount = 0;",
    "6840": "SELECT * \nFROM lineitem \nWHERE l_shipmode = 'truck' \nAND strftime('%Y', l_shipdate) < '1997';",
    "6841": "SELECT COUNT(*) AS returned_items_in_1998\nFROM lineitem\nWHERE l_returnflag = 'R' AND strftime('%Y', l_shipdate) = '1998'",
    "6842": "SELECT * \nFROM lineitem \nWHERE l_quantity = (SELECT MAX(l_quantity) FROM lineitem) \nAND l_shipmode = 'AIR'",
    "6843": "SELECT c_name FROM customer WHERE c_acctbal < 0;",
    "6844": "SELECT COUNT(*) AS household_customers_in_germany\nFROM customer\nJOIN nation ON customer.c_nationkey = nation.n_nationkey\nWHERE c_mktsegment = 'household' AND n_name = 'Germany'",
    "6845": "SELECT c.c_phone\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE o.o_orderpriority = '1-URGENT'",
    "6846": "SELECT c.c_name\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nWHERE l.l_discount = (SELECT MAX(l_discount) FROM lineitem)\nLIMIT 1",
    "6847": "SELECT o.o_orderkey, MAX(o.o_totalprice) AS TotalPrice, l.l_shipdate AS DeliveryDate\nFROM orders o\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nGROUP BY o.o_orderkey\nORDER BY TotalPrice DESC\nLIMIT 5",
    "6848": "SELECT o.o_comment\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nWHERE c.c_mktsegment = 'FURNITURE'",
    "6849": "SELECT c.c_name\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE o.o_totalprice > 300000",
    "6850": "SELECT c_name \nFROM customer \nJOIN nation ON customer.c_nationkey = nation.n_nationkey \nWHERE n_name = 'INDIA' AND c_acctbal > 5000",
    "6851": "SELECT s_phone\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE n_name = 'JAPAN'",
    "6852": "SELECT s_name \nFROM supplier \nJOIN nation ON supplier.s_nationkey = nation.n_nationkey \nWHERE n_name = 'ARGENTINA' AND s_acctbal < 0",
    "6853": "SELECT COUNT(*) AS countries_in_algeria_region\nFROM nation\nJOIN region ON nation.n_regionkey = region.r_regionkey\nWHERE r_name = 'ALGERIA'",
    "6854": "SELECT DISTINCT c.c_name\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nWHERE l.l_discount = 0.1\nAND (\n    o.o_orderdate >= '1994-01-01'\n    AND o.o_orderdate < '1995-01-02'\n)",
    "6855": "SELECT \n    (SELECT COUNT(*) \n     FROM nation \n     JOIN region ON nation.n_regionkey = region.r_regionkey \n     WHERE region.r_name = 'America') * 100.0 / \n    (SELECT COUNT(*) FROM nation) AS percentage_of_countries_in_american_region",
    "6856": "SELECT \n    (COUNT(CASE WHEN c.c_mktsegment = 'HOUSEHOLD' THEN 1 END) * 100.0 / COUNT(*)) AS household_percentage\nFROM \n    customer c\nJOIN \n    nation n ON c.c_nationkey = n.n_nationkey\nWHERE \n    n.n_name = 'Indonesia'",
    "6857": "SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL'",
    "6858": "SELECT p_comment FROM part WHERE p_name = 'burlywood plum powder puff mint'",
    "6859": "SELECT COUNT(*) FROM part WHERE p_retailprice > 1900;",
    "6860": "SELECT COUNT(*) AS total\nFROM part\nWHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5'",
    "6861": "SELECT DISTINCT p_brand\nFROM part\nWHERE p_type = 'PROMO BRUSHED STEEL'",
    "6862": "SELECT p_name \nFROM part \nORDER BY p_retailprice DESC \nLIMIT 1",
    "6863": "SELECT p_name, p_size\nFROM part\nWHERE p_name IN ('pink powder drab lawn cyan', 'corniflower sky burlywood green beige')\nORDER BY p_size DESC\nLIMIT 1",
    "6864": "SELECT COUNT(*) FROM part WHERE p_container = 'JUMBO CASE'",
    "6865": "SELECT MIN(p_size) AS smallest_size\nFROM part\nWHERE p_container = 'JUMBO CASE'",
    "6866": "SELECT COUNT(*) AS suppliers_in_debt\nFROM supplier\nWHERE s_acctbal < 0;",
    "6867": "SELECT s_name \nFROM supplier \nORDER BY s_acctbal DESC \nLIMIT 3",
    "6868": "SELECT s_phone\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE n_name = 'Germany'",
    "6869": "SELECT s.s_name\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_name = 'hot spring dodger dim light'",
    "6870": "SELECT MIN(ps_supplycost) AS lowest_supply_cost\nFROM partsupp\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE part.p_name = 'hot spring dodger dim light'",
    "6871": "SELECT s.s_name\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_name = 'hot spring dodger dim light'\nORDER BY ps.ps_supplycost ASC\nLIMIT 1",
    "6872": "SELECT SUM(ps_availqty) AS total_quantity_available\nFROM partsupp\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE p_name = 'hot spring dodger dim light'",
    "6873": "SELECT s.s_phone\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_name = 'hot spring dodger dim light'\nORDER BY ps.ps_availqty DESC\nLIMIT 1",
    "6874": "SELECT s.s_name \nFROM supplier s \nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey \nJOIN part p ON ps.ps_partkey = p.p_partkey \nWHERE p.p_retailprice = (SELECT MAX(p_retailprice) FROM part)",
    "6875": "SELECT COUNT(DISTINCT s.s_suppkey) AS num_suppliers\nFROM supplier s\nJOIN nation n ON s.s_nationkey = n.n_nationkey\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_name = 'hot spring dodger dim light' AND n.n_name = 'VIETNAM'",
    "6876": "SELECT COUNT(DISTINCT s_suppkey) \nFROM supplier \nJOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey \nJOIN part ON partsupp.ps_partkey = part.p_partkey \nWHERE part.p_type = 'PROMO BRUSHED STEEL' AND supplier.s_acctbal < 0",
    "6877": "SELECT DISTINCT s.s_name\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_brand = 'Brand#55'",
    "6878": "SELECT COUNT(DISTINCT ps_partkey) AS parts_under_5000\nFROM partsupp\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE part.p_type = 'PROMO BRUSHED STEEL'\nGROUP BY partsupp.ps_partkey\nHAVING SUM(ps_availqty) < 5000",
    "6879": "SELECT COUNT(DISTINCT o_orderkey) AS total_orders\nFROM orders\nJOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE p_name = 'hot spring dodger dim light'",
    "6880": "SELECT SUM(l_quantity) AS total_quantity\nFROM lineitem\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE p_name = 'hot spring dodger dim light'",
    "6881": "SELECT l_orderkey\nFROM lineitem\nJOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE p_container = 'JUMBO CASE'\nGROUP BY l_orderkey\nHAVING COUNT(DISTINCT l_partkey) > 2",
    "6882": "SELECT COUNT(*) AS suppliers_in_debt_in_europe\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nJOIN region ON nation.n_regionkey = region.r_regionkey\nWHERE s_acctbal < 0 AND r_name = 'EUROPE'",
    "6883": "SELECT COUNT(DISTINCT s.s_suppkey) AS suppliers_in_europe\nFROM supplier s\nJOIN nation n ON s.s_nationkey = n.n_nationkey\nJOIN region r ON n.n_regionkey = r.r_regionkey\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN part p ON ps.ps_partkey = p.p_partkey\nWHERE p.p_name = 'hot spring dodger dim light' AND r.r_name = 'EUROPE'",
    "6884": "SELECT s.s_phone\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN lineitem l ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey\nWHERE l.l_orderkey = 1",
    "6885": "SELECT COUNT(DISTINCT s.s_suppkey)\nFROM supplier s\nJOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey\nJOIN lineitem l ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey\nWHERE l.l_orderkey = 4 AND s.s_acctbal < 0",
    "6886": "SELECT COUNT(DISTINCT l_partkey) AS parts_returned_by_supplier_in_debt\nFROM lineitem\nJOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nJOIN supplier ON partsupp.ps_suppkey = supplier.s_suppkey\nWHERE l_returnflag = 'R' AND s_acctbal < 0",
    "6887": "SELECT l_shipdate \nFROM lineitem \nJOIN part ON lineitem.l_partkey = part.p_partkey \nWHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' \nAND lineitem.l_orderkey = 1",
    "6888": "SELECT l_quantity\nFROM lineitem\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' AND lineitem.l_orderkey = 1",
    "6889": "SELECT \n    p_name, \n    SUM(l_quantity) as total_quantity\nFROM \n    lineitem \nJOIN \n    part ON lineitem.l_partkey = part.p_partkey\nWHERE \n    l_orderkey = 1 \n    AND p_name IN ('burnished seashell gainsboro navajo chocolate', 'salmon white grey tan navy')\nGROUP BY \n    p_name\nORDER BY \n    total_quantity DESC\nLIMIT 1;",
    "6890": "SELECT MAX(l_discount) AS biggest_discount\nFROM lineitem\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE p_name = 'burnished seashell gainsboro navajo chocolate'",
    "6891": "SELECT DISTINCT l_shipmode\nFROM lineitem\nJOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE part.p_name = 'burnished seashell gainsboro navajo chocolate'",
    "6892": "SELECT AVG(ps_supplycost) AS avg_supply_cost\nFROM partsupp\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE p_name = 'hot spring dodger dim light'",
    "6893": "SELECT \n    ((MAX(ps_supplycost) - MIN(ps_supplycost)) / MIN(ps_supplycost)) * 100 AS percentage_difference\nFROM \n    partsupp\nJOIN \n    part ON partsupp.ps_partkey = part.p_partkey\nWHERE \n    p_name = 'hot spring dodger dim light'",
    "6894": "SELECT \n    (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS profit\nFROM \n    lineitem\nJOIN \n    partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nWHERE \n    l_partkey = 98768 AND l_orderkey = 1",
    "6895": "SELECT \n    l_extendedprice * (1 - l_discount) AS discounted_price\nFROM \n    lineitem\nJOIN \n    part ON lineitem.l_partkey = part.p_partkey\nWHERE \n    part.p_name = 'burnished seashell gainsboro navajo chocolate'\n    AND lineitem.l_orderkey = 1",
    "6896": "SELECT c_mktsegment\nFROM customer\nORDER BY c_acctbal DESC\nLIMIT 1",
    "6897": "SELECT COUNT(DISTINCT l_orderkey) AS orders_shipped_via_mail\nFROM lineitem\nWHERE l_shipdate BETWEEN '1997-01-01' AND '1997-12-31'\nAND l_shipmode = 'MAIL'",
    "6898": "SELECT COUNT(*) AS furniture_segment_customers\nFROM customer\nWHERE c_mktsegment = 'FURNITURE'",
    "6899": "SELECT COUNT(*) AS returned_items_count\nFROM lineitem\nWHERE l_shipdate BETWEEN '1994-01-01' AND '1994-12-31'\nAND l_shipmode = 'TRUCK'\nAND l_returnflag = 'R'",
    "6900": "SELECT COUNT(*) AS customers_in_machinery_segment_in_debt\nFROM customer\nWHERE c_mktsegment = 'MACHINERY' AND c_acctbal < 0;",
    "6901": "SELECT COUNT(*) AS urgent_orders_handled\nFROM orders\nWHERE o_orderpriority = '1-URGENT'\nAND o_clerk = 'Clerk#000000001'\nAND strftime('%Y', o_orderdate) = '1997'",
    "6902": "SELECT c.c_name\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nORDER BY (julianday(l.l_receiptdate) - julianday(l.l_commitdate)) DESC\nLIMIT 1",
    "6903": "SELECT SUM(o.o_totalprice) AS total_price\nFROM orders o\nJOIN customer c ON o.o_custkey = c.c_custkey\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE n.n_name = 'Argentina'",
    "6904": "SELECT COUNT(DISTINCT c.c_custkey) AS building_segment_customers\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE c.c_mktsegment = 'BUILDING' AND o.o_totalprice >= 50000;",
    "6905": "SELECT n_name AS country\nFROM nation\nJOIN supplier ON nation.n_nationkey = supplier.s_nationkey\nGROUP BY n_name\nORDER BY COUNT(supplier.s_suppkey) ASC\nLIMIT 1",
    "6906": "SELECT ps_supplycost\nFROM partsupp\nJOIN part ON partsupp.ps_partkey = part.p_partkey\nWHERE p_name = 'medium metallic grey dodger linen'",
    "6907": "SELECT n.n_name AS country, COUNT(s.s_suppkey) AS indebted_suppliers\nFROM supplier s\nJOIN nation n ON s.s_nationkey = n.n_nationkey\nWHERE s.s_acctbal < 0\nGROUP BY n.n_name\nORDER BY COUNT(s.s_suppkey) DESC, country\nLIMIT 2",
    "6908": "SELECT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nWHERE ps.ps_supplycost >= 1000",
    "6909": "SELECT n.n_name AS country_name\nFROM supplier s\nJOIN nation n ON s.s_nationkey = n.n_nationkey\nORDER BY s.s_acctbal ASC\nLIMIT 1",
    "6910": "SELECT o_clerk\nFROM orders\nJOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey\nORDER BY l_extendedprice DESC\nLIMIT 1",
    "6911": "SELECT SUM(l.l_quantity) AS total_quantity\nFROM orders o\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nWHERE o.o_custkey = 101660 AND o.o_orderdate = '1995-10-05'",
    "6912": "SELECT SUM((l_extendedprice * (1 - l_discount)) * (1 + l_tax)) AS total_tax\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nWHERE orders.o_custkey = 88931 AND orders.o_orderdate = '1994-07-13'",
    "6913": "SELECT DISTINCT p.p_name\nFROM part p\nJOIN partsupp ps ON p.p_partkey = ps.ps_partkey\nJOIN lineitem l ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey\nJOIN orders o ON l.l_orderkey = o.o_orderkey\nWHERE o.o_custkey = 110942",
    "6914": "SELECT \n    p.p_name,\n    (l.l_extendedprice * (1 - l.l_discount)) AS discounted_price\nFROM \n    orders o\nJOIN \n    lineitem l ON o.o_orderkey = l.l_orderkey\nJOIN \n    part p ON l.l_partkey = p.p_partkey\nWHERE \n    o.o_custkey = 111511 AND o.o_orderkey = 53159",
    "6915": "SELECT height_in_inch FROM height_info \nJOIN PlayerInfo ON height_info.height_id = PlayerInfo.height \nWHERE PlayerName = 'David Bornhammar';",
    "6916": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE height_info.height_in_inch > '6''2\"'",
    "6917": "SELECT COUNT(*) \nFROM PlayerInfo \nJOIN height_info ON PlayerInfo.height = height_info.height_id \nWHERE height_info.height_in_inch > '6''2\"' AND PlayerInfo.nation = 'Sweden'",
    "6918": "SELECT PlayerName \nFROM PlayerInfo \nJOIN height_info ON PlayerInfo.height = height_info.height_id \nWHERE height_in_cm = (SELECT MAX(height_in_cm) FROM height_info)",
    "6919": "SELECT weight_info.weight_in_kg\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE PlayerInfo.PlayerName = 'David Bornhammar'",
    "6920": "SELECT COUNT(*) \nFROM PlayerInfo \nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id \nWHERE weight_info.weight_in_kg > 90;",
    "6921": "SELECT COUNT(*) \nFROM PlayerInfo \nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id \nWHERE weight_in_kg > 90 AND position_info = 'D'",
    "6922": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE weight_info.weight_in_kg > 90\nORDER BY PlayerInfo.sum_7yr_GP DESC\nLIMIT 1",
    "6923": "SELECT weight_info.weight_in_kg\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nORDER BY PlayerInfo.sum_7yr_TOI DESC\nLIMIT 1",
    "6924": "SELECT \n    (SELECT height_in_cm FROM height_info WHERE height_id = (SELECT height FROM PlayerInfo WHERE PlayerName = 'David Bornhammar')) -\n    (SELECT height_in_cm FROM height_info WHERE height_id = (SELECT height FROM PlayerInfo WHERE PlayerName = 'Pauli Levokari')) AS height_difference_in_cm",
    "6925": "SELECT COUNT(DISTINCT PlayerInfo.ELITEID) \nFROM PlayerInfo \nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id \nWHERE PlayerInfo.shoots = 'R' AND weight_info.weight_in_kg > 90",
    "6926": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE weight_info.weight_in_kg > 90 AND PlayerInfo.shoots = 'R'",
    "6927": "SELECT \n    PlayerInfo.PlayerName,\n    (weight_info.weight_in_kg / (height_info.height_in_cm / 100.0 * height_info.height_in_cm / 100.0)) AS BMI\nFROM \n    PlayerInfo\nJOIN \n    height_info ON PlayerInfo.height = height_info.height_id\nJOIN \n    weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE \n    PlayerInfo.PlayerName = 'David Bornhammar';",
    "6928": "SELECT AVG(height_info.height_in_cm) AS average_height_in_cm\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE PlayerInfo.position_info = 'D'",
    "6929": "SELECT MAX(weight_in_lbs) AS heaviest_weight_in_pounds\nFROM weight_info\nJOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight",
    "6930": "SELECT COUNT(*) \nFROM PlayerInfo \nJOIN height_info ON PlayerInfo.height = height_info.height_id \nWHERE shoots = 'R' AND height_in_inch = '5''7\"'",
    "6931": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE PlayerInfo.sum_7yr_GP >= 500\nGROUP BY PlayerInfo.ELITEID\nORDER BY SUM(SeasonStatus.PIM) DESC\nLIMIT 1",
    "6932": "SELECT MAX(height_info.height_in_cm) AS tallest_height_in_cm\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE PlayerInfo.birthplace = 'Edmonton, AB, CAN'",
    "6933": "SELECT COUNT(DISTINCT PlayerInfo.ELITEID) AS NumberOfPlayers\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE PlayerInfo.overallby = 'Anaheim Ducks'\nAND PlayerInfo.draftyear = 2008\nAND SeasonStatus.TEAM = 'U.S. National U18 Team'",
    "6934": "SELECT wi.weight_in_kg\nFROM weight_info wi\nJOIN PlayerInfo pi ON wi.weight_id = pi.weight\nJOIN SeasonStatus ss ON pi.ELITEID = ss.ELITEID\nGROUP BY pi.ELITEID\nORDER BY SUM(ss.PLUSMINUS) DESC\nLIMIT 1",
    "6935": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.LEAGUE = 'QMJHL' AND SeasonStatus.SEASON = '2004-2005'\nORDER BY SeasonStatus.P DESC\nLIMIT 1",
    "6936": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'Acadie-Bathurst Titan'\nAND SeasonStatus.GAMETYPE = 'Regular Season'\nAND SeasonStatus.SEASON = '1998-1999'",
    "6937": "SELECT SUM(GP) AS total_games_played\nFROM SeasonStatus\nWHERE ELITEID = (\n    SELECT ELITEID\n    FROM PlayerInfo\n    JOIN height_info ON PlayerInfo.height = height_info.height_id\n    ORDER BY height_in_cm DESC\n    LIMIT 1\n)",
    "6938": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.SEASON = '1997-1998' AND SeasonStatus.LEAGUE = 'OHL'\nORDER BY PlayerInfo.birthdate DESC\nLIMIT 1",
    "6939": "SELECT COUNT(*) \nFROM PlayerInfo \nWHERE ELITEID IN (\n    SELECT ELITEID \n    FROM SeasonStatus \n    WHERE GP = 72\n) \nAND shoots = 'L';",
    "6940": "SELECT \n    (SUM(CASE WHEN GAMETYPE = 'Regular Season' THEN G ELSE 0 END) - \n    SUM(CASE WHEN GAMETYPE = 'Playoffs' THEN G ELSE 0 END)) AS difference_in_goals\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE PlayerInfo.PlayerName = 'Pavel Brendl' AND SEASON = '1998-1999';",
    "6941": "SELECT AVG(weight_info.weight_in_lbs) AS average_weight_in_pounds\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE PlayerInfo.CSS_rank = (SELECT MAX(CSS_rank) FROM PlayerInfo)",
    "6942": "SELECT \n    (CAST(SUM(CASE WHEN GP > 20 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(DISTINCT TEAM)) * 100 AS percentage_teams_played_over_20_games\nFROM \n    SeasonStatus\nWHERE \n    SEASON = '2007-2008' AND GAMETYPE = 'Playoffs'",
    "6943": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.LEAGUE = 'WHL' AND SeasonStatus.SEASON = '2007-2008'\nORDER BY SeasonStatus.G DESC\nLIMIT 1",
    "6944": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'Chilliwack Chiefs' AND SeasonStatus.LEAGUE = 'NHL' AND SeasonStatus.P >= 100",
    "6945": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE weight_info.weight_in_kg = 120",
    "6946": "SELECT DISTINCT PI.PlayerName, HI.height_in_cm\nFROM PlayerInfo PI\nJOIN height_info HI ON PI.height = HI.height_id\nWHERE HI.height_in_cm = (\n    SELECT HI.height_in_cm\n    FROM PlayerInfo PI\n    JOIN height_info HI ON PI.height = HI.height_id\n    WHERE PI.PlayerName = 'Brian Gionta'\n)",
    "6947": "SELECT PlayerInfo.PlayerName, PlayerInfo.position_info\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nGROUP BY SeasonStatus.ELITEID\nORDER BY SUM(SeasonStatus.PIM) DESC\nLIMIT 1",
    "6948": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.LEAGUE = 'NHL' AND SeasonStatus.SEASON = PlayerInfo.draftyear\nORDER BY SeasonStatus.P DESC\nLIMIT 1",
    "6949": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN nation IN ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine') THEN PlayerInfo.ELITEID END) AS FLOAT) / COUNT(DISTINCT PlayerInfo.ELITEID)) * 100 AS percentage_eastern_european\nFROM \n    PlayerInfo\nWHERE \n    overallby = 'Toronto Maple Leafs'",
    "6950": "SELECT PlayerName\nFROM PlayerInfo\nWHERE draftyear = 2008 AND overallby = 'Toronto Maple Leafs'\nORDER BY CSS_rank ASC\nLIMIT 1",
    "6951": "SELECT \n    PlayerInfo.PlayerName, \n    SeasonStatus.TEAM\nFROM \n    SeasonStatus\nJOIN \n    PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE \n    SeasonStatus.GAMETYPE = 'Playoffs' \n    AND SeasonStatus.SEASON = '2006-2007' \n    AND SeasonStatus.LEAGUE = 'SuperElit'\nORDER BY \n    SeasonStatus.P DESC\nLIMIT 1;",
    "6952": "SELECT COUNT(*) \nFROM PlayerInfo \nWHERE overallby = 'Toronto Maple Leafs' \nAND sum_7yr_GP > 300;",
    "6953": "SELECT height_info.height_in_cm\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE SeasonStatus.TEAM = 'Yale Univ.' AND SeasonStatus.PIM = 28 AND SeasonStatus.SEASON = '2005-2006'",
    "6954": "SELECT \n    (CAST(SUM(CASE WHEN PlayerInfo.PlayerName = 'Ian Schultz' THEN SeasonStatus.G ELSE 0 END) AS FLOAT) / SUM(SeasonStatus.G)) * 100 AS percentage_goals_scored_by_Ian_Schultz\nFROM \n    SeasonStatus\nJOIN \n    PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE \n    SeasonStatus.TEAM = 'Calgary Hitmen'\n    AND SeasonStatus.SEASON = '2007-2008'",
    "6955": "SELECT \n    (SUM(CASE WHEN pi.PlayerName = 'Yevgeni Muratov' THEN ss.PIM ELSE 0 END) / CAST(SUM(ss.PIM) AS REAL)) * 100.0 AS percentage\nFROM \n    SeasonStatus ss\nJOIN \n    PlayerInfo pi ON ss.ELITEID = pi.ELITEID\nWHERE \n    ss.TEAM = 'Ak Bars Kazan' \n    AND ss.SEASON = '1999-2000'",
    "6956": "SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon';",
    "6957": "SELECT weight_in_kg FROM weight_info\nJOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight\nWHERE PlayerName = 'Tony Martensson';",
    "6958": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE weight_info.weight_in_lbs = 190",
    "6959": "SELECT PlayerName\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nORDER BY weight_in_kg DESC\nLIMIT 1",
    "6960": "SELECT \n    (CAST(SUM(CASE WHEN w.weight_in_lbs > 154 AND p.nation = 'Denmark' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT p.ELITEID)) * 100 AS percentage\nFROM \n    PlayerInfo p\nJOIN \n    weight_info w ON p.weight = w.weight_id",
    "6961": "SELECT TEAM FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Andreas Jamtin')",
    "6962": "SELECT SEASON\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE PlayerName = 'Niklas Eckerblom'",
    "6963": "SELECT GAMETYPE FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Matthias Trattnig')",
    "6964": "SELECT DISTINCT PlayerInfo.nation\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.SEASON = '1997-1998'",
    "6965": "SELECT MAX(P) AS highest_point\nFROM SeasonStatus\nWHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Per Mars')\nAND SEASON = (SELECT draftyear FROM PlayerInfo WHERE PlayerName = 'Per Mars');",
    "6966": "SELECT PlayerName\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE nation = 'Italy'\nORDER BY height_in_cm ASC\nLIMIT 1",
    "6967": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE height_info.height_in_inch = '5''8\"'",
    "6968": "SELECT COUNT(*) \nFROM PlayerInfo \nJOIN height_info ON PlayerInfo.height = height_info.height_id \nWHERE strftime('%Y', PlayerInfo.birthyear) = '1982' \nAND height_info.height_in_cm > 182;",
    "6969": "SELECT \n    (CAST(SUM(CASE WHEN nation = 'Russia' AND height_in_cm < 200 THEN 1 ELSE 0 END) AS REAL) / \n    CAST(SUM(CASE WHEN nation = 'Russia' THEN 1 ELSE 0 END) AS REAL)) * 100 AS percentage\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id",
    "6970": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE PlayerInfo.nation = 'USA'\nORDER BY weight_info.weight_in_lbs ASC\nLIMIT 1",
    "6971": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.SEASON = '2000-2001'\nORDER BY SeasonStatus.PIM DESC\nLIMIT 1",
    "6972": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.SEASON = '2000-2001'",
    "6973": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE PlayerInfo.draftyear = 2000 AND PlayerInfo.overallby = 'Arizona Coyotes'\nGROUP BY PlayerInfo.ELITEID\nORDER BY SUM(SeasonStatus.PIM) DESC\nLIMIT 1",
    "6974": "SELECT COUNT(DISTINCT PlayerInfo.ELITEID) AS NumberOfPlayers\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE PlayerInfo.overallby = 'Arizona Coyotes' AND height_info.height_in_cm = 195",
    "6975": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'Avangard Omsk'\nAND SeasonStatus.GAMETYPE = 'Playoffs'\nAND SeasonStatus.SEASON = '2000-2001'",
    "6976": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.SEASON = '2000-2001' AND SeasonStatus.LEAGUE = 'International'\nORDER BY SeasonStatus.P DESC\nLIMIT 1",
    "6977": "SELECT COUNT(DISTINCT PlayerInfo.ELITEID) AS NumberOfPlayers\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE strftime('%Y', PlayerInfo.birthyear) = '1980' AND weight_info.weight_in_lbs = 185;",
    "6978": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.SEASON = '2000-2001' AND SeasonStatus.LEAGUE = 'International'\nORDER BY SeasonStatus.GP DESC\nLIMIT 1",
    "6979": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'Avangard Omsk'\nAND SeasonStatus.SEASON = '2000-2001'\nAND SeasonStatus.LEAGUE = 'International'\nAND SeasonStatus.G = 0\nAND PlayerInfo.draftyear = 2000;",
    "6980": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'Avangard Omsk'\nAND SeasonStatus.GAMETYPE = 'Regular Season'\nAND SeasonStatus.SEASON = '2000-2001'\nORDER BY PlayerInfo.birthdate\nLIMIT 1",
    "6981": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.LEAGUE = 'OHL' \nAND SeasonStatus.GAMETYPE = 'Regular Season' \nAND SeasonStatus.SEASON = '2007-2008'\nORDER BY SeasonStatus.A DESC\nLIMIT 1",
    "6982": "SELECT COUNT(DISTINCT TEAM) \nFROM SeasonStatus \nWHERE ELITEID = (\n    SELECT ELITEID \n    FROM PlayerInfo \n    JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id \n    WHERE overallby = 'Arizona Coyotes' \n    ORDER BY weight_in_lbs DESC \n    LIMIT 1\n)",
    "6983": "SELECT AVG(weight_info.weight_in_lbs) AS avg_weight_pounds\nFROM PlayerInfo\nJOIN weight_info ON PlayerInfo.weight = weight_info.weight_id\nWHERE PlayerInfo.overallby = 'Arizona Coyotes'",
    "6984": "SELECT AVG(height_info.height_in_cm) AS avg_height_cm\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'Acadie-Bathurst Titan' AND SeasonStatus.GAMETYPE = 'Regular Season'",
    "6985": "SELECT GP\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE PlayerInfo.PlayerName = 'Per Mars' AND SeasonStatus.SEASON = '1997-1998'",
    "6986": "SELECT weight_in_kg\nFROM weight_info\nJOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight\nWHERE PlayerName = 'Matthias Trattnig';",
    "6987": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE height_info.height_in_inch > '5''9\"'",
    "6988": "SELECT TEAM \nFROM SeasonStatus \nWHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Niklas Eckerblom') \nAND SEASON = '1997-1998';",
    "6989": "SELECT TEAM\nFROM SeasonStatus\nWHERE ELITEID IN (SELECT ELITEID FROM PlayerInfo WHERE nation = 'Sweden')\nGROUP BY TEAM\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "6990": "SELECT COUNT(*) AS Playoffs_Participated\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE PlayerInfo.PlayerName = 'Per Mars' AND SeasonStatus.GAMETYPE = 'Playoffs'",
    "6991": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.TEAM = 'Rimouski Oceanic' AND SeasonStatus.GAMETYPE = 'Playoffs'\nORDER BY SeasonStatus.G DESC\nLIMIT 1",
    "6992": "SELECT nation\nFROM PlayerInfo\nWHERE ELITEID IN (\n    SELECT ELITEID\n    FROM SeasonStatus\n    WHERE TEAM = 'Plymouth Whalers'\n)\nGROUP BY nation\nORDER BY COUNT(nation) DESC\nLIMIT 1",
    "6993": "SELECT PlayerInfo.PlayerName\nFROM SeasonStatus\nJOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID\nWHERE SeasonStatus.TEAM = 'Plymouth Whalers' AND SeasonStatus.SEASON = '1999-2000'\nORDER BY SeasonStatus.A DESC\nLIMIT 1",
    "6994": "SELECT PlayerInfo.PlayerName, height_info.height_in_inch\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nWHERE SeasonStatus.TEAM = 'Oshawa Generals'",
    "6995": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.LEAGUE = 'OHL' AND SeasonStatus.SEASON = '1997-2000'\nORDER BY PlayerInfo.birthdate\nLIMIT 1",
    "6996": "SELECT PlayerInfo.PlayerName\nFROM PlayerInfo\nJOIN height_info ON PlayerInfo.height = height_info.height_id\nJOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID\nWHERE SeasonStatus.TEAM = 'USA U20'\nORDER BY height_info.height_in_cm DESC\nLIMIT 1",
    "6997": "WITH SwedishPlayers AS (\n    SELECT DISTINCT pi.ELITEID\n    FROM PlayerInfo pi\n    JOIN SeasonStatus ss ON pi.ELITEID = ss.ELITEID\n    WHERE pi.nation = 'Sweden'\n    AND ss.GAMETYPE = 'Playoffs'\n    AND ss.SEASON IN ('1997-1998', '1998-1999', '1999-2000')\n),\nTotalPlayers AS (\n    SELECT DISTINCT ELITEID\n    FROM SeasonStatus\n    WHERE GAMETYPE = 'Playoffs'\n    AND SEASON IN ('1997-1998', '1998-1999', '1999-2000')\n)\nSELECT (CAST(COUNT(DISTINCT sp.ELITEID) AS FLOAT) / COUNT(DISTINCT tp.ELITEID)) * 100 AS SwedishPlayersPercentage\nFROM TotalPlayers tp\nLEFT JOIN SwedishPlayers sp ON tp.ELITEID = sp.ELITEID;",
    "6998": "SELECT \n    (SUM(ss.PIM) * 1.0 / (SELECT COUNT(DISTINCT pi.ELITEID) FROM PlayerInfo pi JOIN SeasonStatus ss ON pi.ELITEID = ss.ELITEID WHERE ss.LEAGUE = 'OHL')) * 100 AS percentage\nFROM \n    PlayerInfo pi\nJOIN \n    SeasonStatus ss ON pi.ELITEID = ss.ELITEID\nWHERE \n    pi.nation = 'Sweden' AND ss.LEAGUE = 'OHL'",
    "6999": "SELECT AVG(StandardCost) AS AverageStandardCost\nFROM Product\nWHERE ProductNumber = 'CA-1098';",
    "7000": "SELECT P.Name, PH.StartDate\nFROM Product P\nJOIN ProductCostHistory PH ON P.ProductID = PH.ProductID\nWHERE PH.EndDate IS NULL;",
    "7001": "SELECT p.Name\nFROM Product p\nJOIN ProductCostHistory pch ON p.ProductID = pch.ProductID\nJOIN (\n    SELECT ProductID, MAX(StartDate) AS LatestStartDate\n    FROM ProductCostHistory\n    GROUP BY ProductID\n) AS latestCost ON pch.ProductID = latestCost.ProductID AND pch.StartDate = latestCost.LatestStartDate\nJOIN (\n    SELECT ProductID, MAX(StartDate) AS PreviousStartDate\n    FROM ProductCostHistory\n    WHERE StartDate < (SELECT MAX(StartDate) FROM ProductCostHistory WHERE ProductID = ProductCostHistory.ProductID)\n    GROUP BY ProductID\n) AS previousCost ON pch.ProductID = previousCost.ProductID\nJOIN ProductCostHistory pchPrev ON pchPrev.ProductID = previousCost.ProductID AND pchPrev.StartDate = previousCost.PreviousStartDate\nWHERE p.StandardCost - pchPrev.StandardCost > 80",
    "7002": "SELECT p.Name, SUM(sci.Quantity) AS TotalQuantity\nFROM ShoppingCartItem sci\nJOIN Product p ON sci.ProductID = p.ProductID\nWHERE sci.ShoppingCartID = '14951'\nGROUP BY p.Name",
    "7003": "SELECT p.Name\nFROM Product p\nJOIN ShoppingCartItem sci ON p.ProductID = sci.ProductID\nWHERE sci.Quantity > 5;",
    "7004": "SELECT DISTINCT P.Name\nFROM Product P\nJOIN PurchaseOrderDetail POD ON P.ProductID = POD.ProductID\nJOIN PurchaseOrderHeader POH ON POD.PurchaseOrderID = POH.PurchaseOrderID\nWHERE P.Class = 'L'",
    "7005": "SELECT P.Name AS ProductName, P.ListPrice AS SellingPrice\nFROM Product P\nJOIN TransactionHistory TH ON P.ProductID = TH.ProductID\nWHERE TH.Quantity > 10000",
    "7006": "SELECT P.Name AS ProductName\nFROM Product P\nJOIN SalesOrderDetail SOD ON P.ProductID = SOD.ProductID\nWHERE P.Class = 'H' AND SOD.OrderQty = 1\nORDER BY SOD.OrderQty ASC\nLIMIT 1;",
    "7007": "SELECT COUNT(*) AS MountainLineTransactions\nFROM TransactionHistory\nJOIN Product ON TransactionHistory.ProductID = Product.ProductID\nWHERE Product.ProductLine = 'M';",
    "7008": "SELECT SUM((p.ListPrice - p.StandardCost) * sci.Quantity) AS TotalSalesProfit\nFROM ShoppingCartItem sci\nJOIN Product p ON sci.ProductID = p.ProductID\nWHERE sci.ShoppingCartID = '20621';",
    "7009": "SELECT Name, ListPrice \nFROM Product \nWHERE Class = 'H';",
    "7010": "SELECT ProductLine, COUNT(*) AS ProductCount\nFROM Product\nWHERE FinishedGoodsFlag = 1\nGROUP BY ProductLine\nORDER BY ProductCount DESC\nLIMIT 1;",
    "7011": "SELECT ProductID, Rating, Comments\nFROM ProductReview\nWHERE ReviewerName LIKE 'J%'",
    "7012": "SELECT p.Name AS ProductName, p.ProductLine, pr.Rating, p.ListPrice\nFROM Product p\nJOIN ProductReview pr ON p.ProductID = pr.ProductID\nWHERE pr.Rating = 1\nORDER BY p.ListPrice DESC\nLIMIT 1;",
    "7013": "SELECT \n    ProductID, \n    Name, \n    ListPrice - StandardCost AS Profit\nFROM \n    Product\nWHERE \n    (ListPrice - StandardCost) > 100\nORDER BY \n    Profit DESC;",
    "7014": "SELECT P.Name AS ProductName, PR.ReviewerName, PR.Rating, PR.Comments\nFROM ProductReview PR\nJOIN Product P ON PR.ProductID = P.ProductID\nWHERE P.ProductLine = 'R'",
    "7015": "SELECT COUNT(ReviewerName) AS NumberOfReviews, AVG(Rating) AS AverageRating\nFROM ProductReview\nJOIN Product ON Product.ProductID = ProductReview.ProductID\nWHERE Product.Name = 'HL Mountain Pedal'",
    "7016": "SELECT poh.PurchaseOrderID, p.Name AS ProductName\nFROM PurchaseOrderHeader poh\nJOIN PurchaseOrderDetail pod ON poh.PurchaseOrderID = pod.PurchaseOrderID\nJOIN Product p ON pod.ProductID = p.ProductID\nWHERE pod.ReceivedQty = pod.RejectedQty AND pod.ReceivedQty > 0",
    "7017": "SELECT P.Name, POD.UnitPrice\nFROM Product P\nJOIN PurchaseOrderDetail POD ON P.ProductID = POD.ProductID\nWHERE POD.RejectedQty = 0\nORDER BY POD.LineTotal DESC\nLIMIT 1;",
    "7018": "SELECT P.Name AS ProductName, P.ProductLine\nFROM Product P\nJOIN PurchaseOrderDetail POD ON P.ProductID = POD.ProductID\nWHERE POD.OrderQty >= 5000",
    "7019": "SELECT SUM(SalesOrderDetail.OrderQty) AS TotalOrderedQuantity\nFROM SalesOrderDetail\nJOIN Product ON SalesOrderDetail.ProductID = Product.ProductID\nWHERE Product.ProductLine = 'T';",
    "7020": "SELECT p.Name AS ProductName, MAX(sod.LineTotal) AS HighestLineTotal\nFROM Product p\nJOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID\nWHERE p.Class = 'L'\nGROUP BY p.ProductID\nORDER BY HighestLineTotal DESC\nLIMIT 1;",
    "7021": "SELECT p.Name AS ProductName, (pv.LastReceiptCost - pv.StandardPrice) AS ProfitOnNet\nFROM ProductVendor pv\nJOIN Product p ON pv.ProductID = p.ProductID\nORDER BY ProfitOnNet DESC\nLIMIT 1;",
    "7022": "SELECT p.Name\nFROM Product p\nJOIN ProductVendor pv ON p.ProductID = pv.ProductID\nWHERE pv.MinOrderQty = 100\nORDER BY p.Name DESC;",
    "7023": "SELECT p.Name, (p.ListPrice - p.StandardCost) AS Profit\nFROM Product p\nJOIN ProductReview pr ON p.ProductID = pr.ProductID\nWHERE pr.Rating = 5\nORDER BY Profit DESC\nLIMIT 1;",
    "7024": "SELECT SUM((ListPrice - StandardCost) * Quantity) AS TotalProfit\nFROM Product\nJOIN SalesOrderDetail ON Product.ProductID = SalesOrderDetail.ProductID\nWHERE Product.ProductID = 827;",
    "7025": "SELECT FromCurrencyCode || '/' || ToCurrencyCode AS CurrencyPair, MAX(AverageRate) AS HighestAverageRate\nFROM CurrencyRate\nGROUP BY CurrencyRateDate\nORDER BY HighestAverageRate DESC\nLIMIT 1;",
    "7026": "SELECT SUM(OrderQty) AS TotalProductsOrdered\nFROM SalesOrderDetail\nWHERE ProductID = (\n    SELECT ProductID\n    FROM Product\n    ORDER BY ListPrice DESC\n    LIMIT 1\n)",
    "7027": "SELECT Name, SalesLastYear \nFROM SalesTerritory \nWHERE CountryRegionCode = 'US' AND (Name = 'Northwest' OR Name = 'Southeast') \nORDER BY SalesLastYear DESC \nLIMIT 1;",
    "7028": "SELECT P.FirstName || ' ' || IFNULL(P.MiddleName || ' ', '') || P.LastName AS FullName\nFROM Document D\nJOIN Employee E ON D.Owner = E.BusinessEntityID\nJOIN Person P ON E.BusinessEntityID = P.BusinessEntityID\nWHERE D.DocumentLevel = 1 AND D.Status = 2",
    "7029": "SELECT c.CustomerID\nFROM Customer c\nJOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID\nJOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID\nWHERE sp.Bonus = (SELECT MAX(Bonus) FROM SalesPerson)\nAND soh.SubTotal = (SELECT MAX(SubTotal) FROM SalesOrderHeader WHERE SalesPersonID = sp.BusinessEntityID)",
    "7030": "SELECT \n    SalesOrderID, \n    ProductID, \n    (UnitPrice * OrderQty) AS TotalPrice\nFROM \n    SalesOrderDetail\nWHERE \n    SalesOrderID = 46625 \n    AND ProductID = 716\n    AND UnitPriceDiscount BETWEEN 0.11 AND 0.14;",
    "7031": "SELECT COUNT(*) \nFROM Product \nJOIN BillOfMaterials ON Product.ProductID = BillOfMaterials.ComponentID \nWHERE Product.ReorderPoint <= 600 \nAND Product.MakeFlag = 1 \nAND Product.DaysToManufacture = 1 \nAND BillOfMaterials.BOMLevel = 4;",
    "7032": "SELECT MAX(Bonus) AS HighestBonus\nFROM SalesPerson\nJOIN SalesTerritory ON SalesPerson.TerritoryID = SalesTerritory.TerritoryID\nWHERE SalesTerritory.Name = 'Canada';",
    "7033": "SELECT Name \nFROM Product \nWHERE ProductID IN (\n    SELECT ProductID \n    FROM ProductReview \n    GROUP BY ProductID \n    HAVING MIN(Rating) = 1\n);",
    "7034": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS NumberOfWorkers\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nWHERE d.Name = 'Production'\nAND edh.StartDate BETWEEN '2009-01-01' AND '2009-12-31'\nAND (edh.EndDate IS NULL OR edh.EndDate > '2009-12-31');",
    "7035": "SELECT \n    P.FirstName || ' ' || IFNULL(P.MiddleName || ' ', '') || P.LastName AS FullName,\n    E.JobTitle\nFROM \n    Employee E\nJOIN \n    Person P ON E.BusinessEntityID = P.BusinessEntityID\nJOIN \n    EmployeePayHistory EPH ON E.BusinessEntityID = EPH.BusinessEntityID\nWHERE \n    E.MaritalStatus = 'S' AND E.Gender = 'F'\nORDER BY \n    EPH.Rate DESC\nLIMIT 1;",
    "7036": "SELECT \n    P.FirstName || ' ' || IFNULL(P.MiddleName || ' ', '') || P.LastName AS FullName,\n    E.HireDate\nFROM Employee E\nJOIN Person P ON E.BusinessEntityID = P.BusinessEntityID\nWHERE E.JobTitle = 'Vice President of Engineering'",
    "7037": "SELECT COUNT(*) AS ActiveEmployeesWithLowPay\nFROM Employee\nJOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID\nWHERE Employee.CurrentFlag = 1 AND EmployeePayHistory.Rate <= 30;",
    "7038": "SELECT d.Name AS DepartmentName\nFROM Department d\nJOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID\nORDER BY edh.StartDate DESC\nLIMIT 1;",
    "7039": "SELECT \n    P.FirstName || ' ' || P.LastName AS FullName,\n    E.Gender\nFROM \n    Employee E\nJOIN \n    Person P ON E.BusinessEntityID = P.BusinessEntityID\nJOIN \n    SalesPerson SP ON E.BusinessEntityID = SP.BusinessEntityID\nJOIN \n    Store S ON SP.BusinessEntityID = S.SalesPersonID\nWHERE \n    P.PersonType = 'SC'\nORDER BY \n    E.HireDate DESC\nLIMIT 1;",
    "7040": "SELECT PayFrequency\nFROM EmployeePayHistory\nWHERE BusinessEntityID = (\n    SELECT BusinessEntityID\n    FROM Employee\n    ORDER BY SickLeaveHours ASC\n    LIMIT 1\n)",
    "7041": "SELECT e.JobTitle\nFROM Employee e\nJOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID\nWHERE eph.Rate = (SELECT MIN(Rate) FROM EmployeePayHistory)\nLIMIT 1;",
    "7042": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS TotalEmployeesInFinance\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nWHERE d.Name = 'Finance'",
    "7043": "WITH RankedProducts AS (\n    SELECT \n        p.ProductID,\n        p.ListPrice,\n        p.StandardCost,\n        (p.ListPrice - p.StandardCost) AS Profit,\n        ROW_NUMBER() OVER (ORDER BY p.ListPrice DESC) AS HighPriceRank,\n        ROW_NUMBER() OVER (ORDER BY p.ListPrice) AS LowPriceRank\n    FROM Product p\n    WHERE p.ListPrice > 0\n),\nMaxProfit AS (\n    SELECT \n        ProductID,\n        Profit,\n        'Highest' AS PriceType\n    FROM RankedProducts\n    WHERE HighPriceRank = 1\n    UNION ALL\n    SELECT \n        ProductID,\n        Profit,\n        'Lowest' AS PriceType\n    FROM RankedProducts\n    WHERE LowPriceRank = 1\n),\nComponentDepth AS (\n    SELECT \n        b.ProductAssemblyID,\n        b.ComponentID,\n        b.BOMLevel\n    FROM BillOfMaterials b\n)\nSELECT \n    mp.ProductID,\n    mp.Profit,\n    mp.PriceType,\n    cd.BOMLevel AS Depth\nFROM MaxProfit mp\nLEFT JOIN ComponentDepth cd ON mp.ProductID = cd.ComponentID",
    "7044": "SELECT \n    v.Name AS VendorName,\n    SUM(pv.StandardPrice - pv.LastReceiptCost) AS NetProfit\nFROM \n    ProductVendor pv\nJOIN \n    Vendor v ON pv.BusinessEntityID = v.BusinessEntityID\nWHERE \n    v.CreditRating = 3 AND pv.LastReceiptCost IS NOT NULL\nGROUP BY \n    v.Name",
    "7045": "SELECT COUNT(DISTINCT Customer.AccountNumber) AS AccountsWithTooLongAddress\nFROM Customer\nJOIN SalesOrderHeader ON Customer.CustomerID = SalesOrderHeader.CustomerID\nJOIN Address ON SalesOrderHeader.ShipToAddressID = Address.AddressID\nWHERE Address.AddressLine2 IS NOT NULL;",
    "7046": "SELECT PostalCode\nFROM Address\nWHERE AddressID IN (\n    SELECT BillToAddressID\n    FROM SalesOrderHeader\n    WHERE strftime('%Y', ModifiedDate) = '2022' AND strftime('%m', ModifiedDate) = '10'\n    ORDER BY ModifiedDate DESC\n    LIMIT 1\n)",
    "7047": "SELECT MAX(julianday(EndDate) - julianday(StartDate)) AS LongestAssemblyItemDuration\nFROM \"BillOfMaterials\"\nWHERE ProductAssemblyID IN (\n    SELECT ProductID\n    FROM Product\n    WHERE ProductSubcategoryID IN (\n        SELECT ProductSubcategoryID\n        FROM ProductSubcategory\n        WHERE ProductCategoryID IN (\n            SELECT ProductCategoryID\n            FROM ProductCategory\n            WHERE Name = 'Bikes'\n        )\n    )\n);",
    "7048": "SELECT COUNT(*) AS UnfinishedBicycles\nFROM \"BillOfMaterials\" BOM\nJOIN \"Product\" P ON BOM.ProductAssemblyID = P.ProductID\nWHERE BOM.EndDate IS NULL AND P.Name LIKE '%Bicycle%'",
    "7049": "SELECT UnitMeasureCode\nFROM BillOfMaterials\nORDER BY PerAssemblyQty DESC\nLIMIT 1;",
    "7050": "SELECT COUNT(*) AS PrivateDocuments\nFROM Document\nWHERE DocumentSummary IS NULL;",
    "7051": "SELECT Title FROM Document WHERE Status = 1;",
    "7052": "SELECT DISTINCT E.JobTitle\nFROM Employee E\nJOIN Document D ON E.BusinessEntityID = D.Owner\nWHERE D.Status = 2;",
    "7053": "SELECT PayFrequency\nFROM EmployeePayHistory\nWHERE BusinessEntityID = (\n    SELECT BusinessEntityID\n    FROM Employee\n    ORDER BY BirthDate\n    LIMIT 1\n)\nORDER BY RateChangeDate DESC\nLIMIT 1",
    "7054": "SELECT COUNT(*) AS MarriedEmployeesWithHighestPayFrequency\nFROM Employee\nJOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID\nWHERE Employee.MaritalStatus = 'M' AND EmployeePayHistory.PayFrequency = 2;",
    "7055": "SELECT eph.Rate\nFROM EmployeePayHistory eph\nJOIN Employee e ON eph.BusinessEntityID = e.BusinessEntityID\nWHERE e.HireDate = (SELECT MAX(HireDate) FROM Employee)",
    "7056": "SELECT COUNT(*) \nFROM Employee \nJOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID \nWHERE EmployeePayHistory.Rate > 40 AND Employee.Gender = 'M';",
    "7057": "SELECT MAX(Rate) AS HighestPayRate\nFROM EmployeePayHistory\nWHERE BusinessEntityID IN (\n    SELECT BusinessEntityID\n    FROM Employee\n    WHERE SalariedFlag = 1\n)",
    "7058": "SELECT e.VacationHours\nFROM Employee e\nJOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID\nWHERE eph.PayFrequency = 2",
    "7059": "SELECT eph.Rate\nFROM EmployeePayHistory eph\nJOIN Employee e ON eph.BusinessEntityID = e.BusinessEntityID\nORDER BY e.VacationHours DESC\nLIMIT 1",
    "7060": "SELECT COUNT(*) \nFROM Employee e\nJOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID\nWHERE e.SickLeaveHours > 10 AND eph.Rate > 35;",
    "7061": "SELECT COUNT(*) AS ActiveMaleEmployeesWithHighestPayFrequency\nFROM Employee e\nJOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID\nWHERE e.CurrentFlag = 1 AND e.Gender = 'M' AND eph.PayFrequency = 2;",
    "7062": "SELECT COUNT(*) AS MaleSalesPersons\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.JobTitle = 'Sales Person' AND p.Gender = 'M';",
    "7063": "SELECT JobTitle FROM Employee WHERE BirthDate = (SELECT MIN(BirthDate) FROM Employee);",
    "7064": "SELECT p.NameStyle\nFROM Person p\nJOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID\nJOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID\nWHERE eph.Rate = (SELECT MIN(Rate) FROM EmployeePayHistory)\nLIMIT 1;",
    "7065": "SELECT COUNT(*) \nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.MaritalStatus = 'M' AND p.NameStyle = 0;",
    "7066": "SELECT COUNT(*) \nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.SickLeaveHours > 10 AND p.EmailPromotion IN (1, 2);",
    "7067": "SELECT e.BusinessEntityID, p.FirstName, p.LastName, e.VacationHours, p.EmailPromotion\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.VacationHours > 20 AND p.EmailPromotion IN (1, 2)",
    "7068": "SELECT p.AdditionalContactInfo\nFROM Person p\nJOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID\nWHERE p.PersonType = 'SP' AND e.JobTitle LIKE '%Sales%'\nORDER BY e.BirthDate\nLIMIT 1;",
    "7069": "SELECT FirstName \nFROM Employee \nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID \nWHERE Gender = 'M' AND NameStyle = 0 \nLIMIT 1;",
    "7070": "SELECT COUNT(*) AS NumberOfMr\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.CurrentFlag = 1 AND p.Title = 'Mr';",
    "7071": "SELECT \n    Person.FirstName,\n    Person.LastName,\n    Employee.NationalIDNumber,\n    Employee.JobTitle,\n    Employee.BirthDate,\n    Employee.Gender,\n    Employee.HireDate,\n    EmployeePayHistory.Rate AS PayRate\nFROM Employee\nJOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Employee.MaritalStatus = 'M'\nORDER BY EmployeePayHistory.Rate DESC\nLIMIT 1;",
    "7072": "SELECT p.Suffix\nFROM Person p\nJOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID\nJOIN BusinessEntityContact bec ON p.BusinessEntityID = bec.PersonID\nJOIN ContactType ct ON bec.ContactTypeID = ct.ContactTypeID\nWHERE p.PersonType = 'SC'\nAND ct.Name = 'Store Contact'\nORDER BY e.SickLeaveHours DESC\nLIMIT 1;",
    "7073": "SELECT COUNT(*) \nFROM Employee \nJOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID \nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID \nWHERE MaritalStatus = 'M' \nAND NameStyle = 1 \nAND PayFrequency = (SELECT MAX(PayFrequency) FROM EmployeePayHistory);",
    "7074": "SELECT COUNT(*) \nFROM Employee \nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID \nWHERE Employee.CurrentFlag = 1 AND Person.EmailPromotion = 0;",
    "7075": "SELECT DISTINCT cc.CreditCardID\nFROM CreditCard cc\nJOIN SalesOrderHeader soh ON cc.CreditCardID = soh.CreditCardID\nJOIN Customer c ON soh.CustomerID = c.CustomerID\nJOIN Store s ON c.StoreID = s.BusinessEntityID\nJOIN SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID\nJOIN Employee e ON sp.BusinessEntityID = e.BusinessEntityID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE p.PersonType = 'SC';",
    "7076": "SELECT AVG(VacationHours) AS AverageVacationHours\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Person.PersonType = 'EM' AND Employee.Gender = 'M';",
    "7077": "SELECT MAX(Rate - AverageRate) AS DifferenceFromAverage\nFROM (\n    SELECT E.Rate, AVG(E.Rate) OVER () AS AverageRate\n    FROM Employee E\n    JOIN EmployeePayHistory EPH ON E.BusinessEntityID = EPH.BusinessEntityID\n    JOIN Person P ON E.BusinessEntityID = P.BusinessEntityID\n    WHERE P.MaritalStatus = 'M' AND P.EmailPromotion = 1\n)",
    "7078": "SELECT \n    CAST(SUM(CASE WHEN p.PersonType = 'SC' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) AS Probability\nFROM \n    Person p\nJOIN \n    Employee e ON p.BusinessEntityID = e.BusinessEntityID\nWHERE \n    p.MaritalStatus = 'M' AND p.NameStyle = 0;",
    "7079": "SELECT \n    (CAST(COUNT(CASE WHEN VacationHours > 20 THEN 1 END) AS REAL) / COUNT(*)) * 100 AS Percentage\nFROM \n    Employee\nWHERE \n    CurrentFlag = 1 AND SickLeaveHours > 10;",
    "7080": "SELECT AVG(LastReceiptCost) AS AverageLastReceiptCost\nFROM ProductVendor\nWHERE AverageLeadTime = 60 AND LastReceiptCost IS NOT NULL;",
    "7081": "SELECT AVG(ActualCost) AS AverageCost\nFROM TransactionHistory\nWHERE TransactionType = 'P'\nAND TransactionDate BETWEEN '2012-01-01' AND '2012-06-30';",
    "7082": "SELECT \n    (CAST(SUM(CASE WHEN MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS MarriedMalePercentage\nFROM \n    Employee\nWHERE \n    Gender = 'M' AND \n    strftime('%Y', HireDate) = '2009'",
    "7083": "SELECT \n    (CAST(SUM(CASE WHEN p.FirstName = 'Mary' AND p.EmailPromotion = 2 THEN 1 ELSE 0 END) AS REAL) / \n    CAST(SUM(CASE WHEN p.FirstName = 'Mary' THEN 1 ELSE 0 END) AS REAL)) * 100 AS Percentage\nFROM \n    Person p\nWHERE \n    p.FirstName = 'Mary' AND \n    EXISTS (\n        SELECT 1 \n        FROM BusinessEntityContact bec\n        JOIN ContactType ct ON bec.ContactTypeID = ct.ContactTypeID\n        WHERE bec.PersonID = p.BusinessEntityID AND ct.Name = 'Store Contact'\n    );",
    "7084": "SELECT ProductID\nFROM ProductVendor\nWHERE StandardPrice - LastReceiptCost < 0",
    "7085": "SELECT AVG(TotalDue) AS AverageTotalDue\nFROM SalesOrderHeader\nWHERE Status = 2",
    "7086": "SELECT \n    (CAST(SUM(CASE WHEN OrderQty <= 3 AND UnitPriceDiscount = 0.2 THEN 1 ELSE 0 END) AS REAL) / CAST(COUNT(*) AS REAL)) * 100 AS Percentage\nFROM \n    SalesOrderDetail",
    "7087": "SELECT BusinessEntityID \nFROM SalesPerson \nWHERE ((SalesYTD - SalesLastYear) / SalesLastYear) > 0.6 \nAND Bonus > 3000;",
    "7088": "SELECT COUNT(DISTINCT BusinessEntityID) AS TotalBusinesses\nFROM BusinessEntityAddress\nWHERE AddressTypeID IN (2, 5);",
    "7089": "SELECT soh.CustomerID\nFROM SalesOrderDetail sod\nJOIN SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID\nWHERE sod.OrderQty = 32 AND sod.UnitPrice = 35;",
    "7090": "SELECT c.Name\nFROM Customer AS c\nJOIN SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID\nJOIN CreditCard AS cc ON soh.CreditCardID = cc.CreditCardID\nWHERE cc.CardType = 'ColonialVoice' AND cc.ExpMonth = 3 AND cc.ExpYear = 2005",
    "7091": "SELECT v.CreditRating\nFROM Vendor v\nJOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID\nWHERE pv.AverageLeadTime = 16\nAND pv.StandardPrice = 18.9900\nAND pv.LastReceiptDate >= '2011-08-27 00:00:00'\nAND pv.LastReceiptDate < '2011-08-28 00:00:00';",
    "7092": "SELECT COUNT(*) AS NumberOfProducts\nFROM Product\nWHERE ProductSubcategoryID IN (\n    SELECT ProductSubcategoryID\n    FROM ProductSubcategory\n    WHERE ProductCategoryID IN (\n        SELECT ProductCategoryID\n        FROM ProductCategory\n        WHERE Name IN ('Accessories', 'Components')\n    )\n)",
    "7093": "SELECT e.JobTitle\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nWHERE edh.DepartmentID = 12\nORDER BY edh.StartDate DESC\nLIMIT 1;",
    "7094": "SELECT FirstName, LastName\nFROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nWHERE MaritalStatus = 'S' AND Gender = 'M' AND JobTitle = 'Production Supervisor'",
    "7095": "SELECT COUNT(*) AS TotalProductsInSubassembly\nFROM Product\nJOIN ProductSubcategory ON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID\nJOIN ProductCategory ON ProductSubcategory.ProductCategoryID = ProductCategory.ProductCategoryID\nWHERE ProductCategory.Name = 'Subassembly'",
    "7096": "SELECT SUM(ScrappedQty) AS TotalProductsRejectedForTrimTooLong\nFROM WorkOrder\nJOIN ScrapReason ON WorkOrder.ScrapReasonID = ScrapReason.ScrapReasonID\nWHERE ScrapReason.Name = 'Trim length too long'",
    "7097": "SELECT SUM(pod.OrderQty) AS TotalQuantityPrepared\nFROM PurchaseOrderHeader poh\nJOIN PurchaseOrderDetail pod ON poh.PurchaseOrderID = pod.PurchaseOrderID\nWHERE poh.EmployeeID = 257 AND poh.Status = 3",
    "7098": "SELECT COUNT(DISTINCT sod.ProductID) AS ProductsSold\nFROM SalesOrderDetail sod\nJOIN SpecialOfferProduct sop ON sod.ProductID = sop.ProductID\nJOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID AND so.Description = 'No Discount'\nWHERE sod.OrderQty > 2;",
    "7099": "SELECT th.TransactionType\nFROM TransactionHistory th\nJOIN Product p ON th.ProductID = p.ProductID\nWHERE p.Color = 'Yellow' AND p.Size = '62' AND p.SafetyStockLevel = 500",
    "7100": "SELECT ps.Name AS SubcategoryName\nFROM ProductSubcategory ps\nJOIN Product p ON ps.ProductSubcategoryID = p.ProductSubcategoryID\nWHERE p.Color = 'gray'\nORDER BY p.SafetyStockLevel ASC\nLIMIT 1;",
    "7101": "SELECT MAX(p.EndDate) AS MaxEndDate\nFROM ProductCostHistory p\nJOIN Product pr ON p.ProductID = pr.ProductID\nWHERE pr.WeightUnitMeasureCode = 'G'",
    "7102": "SELECT\n    SUM(CASE WHEN s.Name IN ('Drill size too small', 'Drill size too large') THEN w.ScrappedQty ELSE 0 END) / CAST(SUM(w.OrderQty) AS REAL) AS PercentageRejectedByDrillSize\nFROM\n    WorkOrder w\nLEFT JOIN\n    ScrapReason s ON w.ScrapReasonID = s.ScrapReasonID",
    "7103": "SELECT AVG(OrderQty) AS AverageOrderQuantity\nFROM SalesOrderDetail\nJOIN SalesOrderHeader ON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID\nJOIN ShipMethod ON SalesOrderHeader.ShipMethodID = ShipMethod.ShipMethodID\nWHERE ShipMethod.Name = 'Cargo Transport 5'",
    "7104": "SELECT sr.Name\nFROM SalesTaxRate sr\nJOIN StateProvince sp ON sr.StateProvinceID = sp.StateProvinceID\nJOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID\nORDER BY (st.SalesYTD - st.SalesLastYear) / st.SalesLastYear DESC\nLIMIT 1;",
    "7105": "SELECT COUNT(*) \nFROM EmployeePayHistory \nWHERE PayFrequency = 1 AND Rate > 50;",
    "7106": "SELECT FirstName || ' ' || COALESCE(MiddleName || ' ', '') || LastName AS FullName\nFROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nWHERE Person.BusinessEntityID = 1 AND PersonType = 'EM'",
    "7107": "SELECT Name FROM Vendor WHERE BusinessEntityID = 1492;",
    "7108": "SELECT COUNT(*) AS VendorsConsentedForOrder\nFROM Vendor\nJOIN ProductVendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID\nWHERE MinOrderQty > 500 AND MaxOrderQty < 15000;",
    "7109": "SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration';",
    "7110": "SELECT LastName AS FamilyName\nFROM Person\nWHERE PersonType = 'EM' AND MiddleName LIKE 'C%'",
    "7111": "SELECT COUNT(DISTINCT pv.BusinessEntityID) AS NumberOfVendors\nFROM ProductVendor pv\nWHERE pv.AverageLeadTime = 25 AND pv.OnOrderQty > 0;",
    "7112": "SELECT ProductNumber\nFROM Product\nORDER BY StandardCost ASC\nLIMIT 3",
    "7113": "SELECT COUNT(*) AS BlackColoredProductsNotForSale\nFROM Product\nWHERE Color = 'Black' AND FinishedGoodsFlag = 0;",
    "7114": "SELECT e.JobTitle, e.BusinessEntityID, MAX(e.SickLeaveHours) as UnusedSickLeave\nFROM Employee e\nGROUP BY e.BusinessEntityID\nORDER BY UnusedSickLeave DESC\nLIMIT 3",
    "7115": "SELECT AddressLine1 || ' ' || IFNULL(AddressLine2, '') AS FullAddress\nFROM Address\nWHERE AddressID = 11906;",
    "7116": "SELECT \n    (LastReceiptCost - StandardPrice) AS NetProfit\nFROM \n    ProductVendor\nWHERE \n    BusinessEntityID = 1580;",
    "7117": "SELECT SUM(UnitPrice * OrderQty - UnitPriceDiscount) AS SalesRevenue\nFROM SalesOrderDetail\nWHERE ProductID = 740;",
    "7118": "SELECT DISTINCT p.ReviewerName\nFROM ProductReview p\nWHERE p.Rating = 5",
    "7119": "SELECT BusinessEntityID \nFROM Vendor \nWHERE CreditRating = 5;",
    "7120": "SELECT FirstName, BirthDate FROM Person JOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID WHERE Person.BusinessEntityID = 18;",
    "7121": "SELECT e.JobTitle\nFROM Employee e\nJOIN BusinessEntityContact bec ON e.BusinessEntityID = bec.BusinessEntityID\nJOIN ContactType ct ON bec.ContactTypeID = ct.ContactTypeID\nWHERE bec.PersonID = 18 AND ct.Name = 'job'",
    "7122": "SELECT BE.BusinessEntityID, BE.rowguid AS BusinessGUID, PNT.Name AS PhoneNumberType\nFROM BusinessEntity AS BE\nJOIN Person AS P ON BE.BusinessEntityID = P.BusinessEntityID\nJOIN PhoneNumberType AS PNT ON PNT.Name = 'Cell'\nLIMIT 3;",
    "7123": "SELECT Currency.Name \nFROM Currency \nJOIN CountryRegionCurrency ON Currency.CurrencyCode = CountryRegionCurrency.CurrencyCode \nJOIN CountryRegion ON CountryRegion.CountryRegionCode = CountryRegionCurrency.CountryRegionCode \nWHERE CountryRegion.Name = 'Brazil'",
    "7124": "SELECT COUNT(*) AS NumberOfPeopleInFinance\nFROM EmployeeDepartmentHistory edh\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nWHERE d.Name = 'Finance'\nAND edh.EndDate IS NULL;",
    "7125": "SELECT pv.AverageLeadTime, v.Name\nFROM ProductVendor pv\nJOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID\nWHERE pv.BusinessEntityID = 1496;",
    "7126": "SELECT \n    (SELECT COUNT(*) FROM \"Address\" WHERE City = 'Bothell') - \n    (SELECT COUNT(*) FROM \"Address\" WHERE City = 'Kenmore') AS AccountDifference,\n    sp.Name AS StateName\nFROM \"Address\" a\nJOIN \"StateProvince\" sp ON a.StateProvinceID = sp.StateProvinceID\nWHERE a.City IN ('Bothell', 'Kenmore')\nGROUP BY sp.Name",
    "7127": "SELECT pm.Name\nFROM ProductModel pm\nJOIN ProductModelProductDescriptionCulture pmpdc ON pm.ProductModelID = pmpdc.ProductModelID\nJOIN ProductDescription pd ON pmpdc.ProductDescriptionID = pd.ProductDescriptionID\nJOIN Culture c ON pmpdc.CultureID = c.CultureID\nWHERE pd.Description LIKE '%AdventureWorks%'\nAND c.Name = 'English'\nAND pm.Name LIKE '%chromoly steel%'",
    "7128": "SELECT COUNT(DISTINCT s.BusinessEntityID) AS TotalCompanies, t.\"Group\" AS GeographicalLocation\nFROM SalesPerson s\nJOIN SalesTerritory t ON s.TerritoryID = t.TerritoryID\nWHERE s.CommissionPct >= 0.018\nGROUP BY t.\"Group\"",
    "7129": "SELECT PhoneNumberType.Name, COUNT(*) AS Count\nFROM PhoneNumberType\nJOIN PersonPhone ON PhoneNumberType.PhoneNumberTypeID = PersonPhone.PhoneNumberTypeID\nJOIN BusinessEntityContact ON PersonPhone.BusinessEntityID = BusinessEntityContact.PersonID\nGROUP BY PhoneNumberType.PhoneNumberTypeID\nORDER BY Count DESC",
    "7130": "SELECT c.Name AS ContactType, COUNT(*) AS TotalContacts\nFROM BusinessEntityContact AS bec\nJOIN ContactType AS c ON bec.ContactTypeID = c.ContactTypeID\nGROUP BY bec.ContactTypeID\nORDER BY TotalContacts DESC\nLIMIT 1;",
    "7131": "SELECT EmailAddress.EmailAddress\nFROM Person\nJOIN EmailAddress ON Person.BusinessEntityID = EmailAddress.BusinessEntityID\nWHERE Person.PersonType = 'SP'",
    "7132": "SELECT JobTitle FROM Employee JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID WHERE FirstName = 'Suchitra';",
    "7133": "SELECT COUNT(*) AS SingleEmployees\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE p.MaritalStatus = 'S'",
    "7134": "SELECT \n    ABS(\n        (SELECT COUNT(*) FROM ProductModelProductDescriptionCulture WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'English')) - \n        (SELECT COUNT(*) FROM ProductModelProductDescriptionCulture WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'Arabic'))\n    ) AS Difference",
    "7135": "SELECT AddressLine1 \nFROM Address \nJOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID \nWHERE BusinessEntityAddress.BusinessEntityID = 1;",
    "7136": "SELECT BE.BusinessEntityID, BE.rowguid AS BusinessNumber\nFROM BusinessEntity AS BE\nJOIN BusinessEntityAddress AS BEA ON BE.BusinessEntityID = BEA.BusinessEntityID\nJOIN Address AS A ON BEA.AddressID = A.AddressID\nWHERE A.City = 'Duvall'",
    "7137": "SELECT \n    (CAST(SUM(CASE WHEN Culture.Name = 'Thai' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100) AS percentage\nFROM \n    Culture;",
    "7138": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Employee \n     JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID \n     WHERE Gender = 'M') / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Employee) * 100 AS PercentageOfMen",
    "7139": "SELECT a.City, sp.Name AS StateProvince, sp.IsOnlyStateProvinceFlag\nFROM \"Address\" a\nJOIN \"StateProvince\" sp ON a.StateProvinceID = sp.StateProvinceID\nWHERE a.AddressID = 15873",
    "7140": "SELECT AddressLine1 || ' ' || AddressLine2 AS FullAddress\nFROM Address\nJOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID\nWHERE BusinessEntityAddress.BusinessEntityID = 24;",
    "7141": "SELECT ExpYear FROM CreditCard WHERE CardNumber LIKE '%9648';",
    "7142": "SELECT BusinessEntityID\nFROM Person\nWHERE FirstName = 'Emma' AND MiddleName = 'H' AND LastName = 'Harris';",
    "7143": "SELECT LocationID FROM Location WHERE Name = 'Debur and Polish';",
    "7144": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing';",
    "7145": "SELECT SalesPersonID \nFROM SalesOrderHeader \nWHERE TotalDue = 1635823.3967 AND strftime('%Y', ShipDate) = '2022'",
    "7146": "SELECT StartTime FROM Shift WHERE ShiftID = 2;",
    "7147": "SELECT Name FROM ContactType WHERE ContactTypeID = 16;",
    "7148": "SELECT ShipBase FROM ShipMethod WHERE Name = \"OVERSEAS - DELUXE\";",
    "7149": "SELECT Name FROM Culture WHERE CultureID = 'fr';",
    "7150": "SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee';",
    "7151": "SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Cell'",
    "7152": "SELECT MIN(BirthDate) AS OldestBirthDate\nFROM Employee\nWHERE JobTitle = 'Production Technician'\nAND HireDate = '2008-12-07';",
    "7153": "SELECT pm.Name \nFROM ProductModel pm \nJOIN Product p ON pm.ProductModelID = p.ProductModelID \nWHERE p.ProductID = 793;",
    "7154": "SELECT DISTINCT UnitMeasureCode \nFROM ProductVendor \nWHERE ProductID = 762",
    "7155": "SELECT AddressLine1, AddressLine2, City\nFROM Address\nJOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID\nWHERE BusinessEntityAddress.BusinessEntityID = 4;",
    "7156": "SELECT UnitMeasure.Name\nFROM BillOfMaterials\nJOIN UnitMeasure ON BillOfMaterials.UnitMeasureCode = UnitMeasure.UnitMeasureCode\nWHERE ComponentID = 494 AND EndDate IS NULL",
    "7157": "SELECT COUNT(*) AS PrivateDocumentsCount\nFROM Document\nJOIN Employee ON Document.Owner = Employee.BusinessEntityID\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Employee.JobTitle = 'Document Control Assistant'\nAND Person.BirthDate = '1975-12-25'\nAND Document.DocumentSummary IS NULL;",
    "7158": "SELECT DISTINCT p.ListPrice\nFROM Product p\nJOIN ProductCostHistory pch ON p.ProductID = pch.ProductID\nWHERE (p.ListPrice - pch.StandardCost) = 21.9037\nAND pch.StartDate > '2012-10-31';",
    "7159": "SELECT LENGTH(LargePhoto) AS PhotoSize\nFROM ProductPhoto\nJOIN ProductProductPhoto ON ProductPhoto.ProductPhotoID = ProductProductPhoto.ProductPhotoID\nWHERE ProductProductPhoto.ProductID = 1;",
    "7160": "SELECT LENGTH(Password.PasswordHash) AS PasswordLength\nFROM Person\nJOIN Password ON Person.BusinessEntityID = Password.BusinessEntityID\nWHERE Person.FirstName = 'Catherine' AND Person.LastName = 'Ward'",
    "7161": "SELECT Rating \nFROM ProductReview \nJOIN Product ON ProductReview.ProductID = Product.ProductID \nWHERE ReviewerName = 'Jill' AND Product.Name = 'HL Mountain Pedal'",
    "7162": "SELECT (StandardPrice - LastReceiptCost) AS Profit\nFROM ProductVendor\nJOIN Product ON ProductVendor.ProductID = Product.ProductID\nWHERE Product.Name = 'Freewheel';",
    "7163": "SELECT \n    CASE \n        WHEN Bonus > 0 THEN 'Yes'\n        ELSE 'No'\n    END AS CompletedSalesTask\nFROM SalesPerson\nJOIN Employee ON SalesPerson.BusinessEntityID = Employee.BusinessEntityID\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Person.FirstName = 'Rachel' AND Person.LastName = 'Valdez';",
    "7164": "SELECT COUNT(DISTINCT TaxType) \nFROM SalesTaxRate \nJOIN StateProvince ON SalesTaxRate.StateProvinceID = StateProvince.StateProvinceID \nWHERE StateProvince.Name = \"Quebec\";",
    "7165": "SELECT EmailAddress.EmailAddress\nFROM Person\nJOIN EmailAddress ON Person.BusinessEntityID = EmailAddress.BusinessEntityID\nWHERE Person.FirstName = 'Kevin' AND Person.LastName = 'Wright'",
    "7166": "SELECT COUNT(*) AS NumberOfStateProvincesWithoutCode\nFROM StateProvince\nWHERE CountryRegionCode = 'FR'\nAND IsOnlyStateProvinceFlag = 1\nAND StateProvinceCode IS NULL OR StateProvinceCode = '';",
    "7167": "SELECT TransactionType \nFROM TransactionHistory \nJOIN Product ON TransactionHistory.ProductID = Product.ProductID \nWHERE Product.Name = 'HL Road Frame - Black, 48' \nAND TransactionDate = '2012-12-13'",
    "7168": "SELECT TransactionType \nFROM TransactionHistory \nJOIN Product ON TransactionHistory.ProductID = Product.ProductID \nWHERE Product.Name = 'LL Road Handlebars' \nAND TransactionDate = '2012-11-03'",
    "7169": "SELECT CreditRating \nFROM Vendor \nWHERE rowguid = \"33671A4E-DF2B-4879-807B-E3F930DD5C0C\";",
    "7170": "SELECT PreferredVendorStatus FROM Vendor WHERE rowguid = \"684F328D-C185-43B9-AF9A-37ACC680D2AF\";",
    "7171": "SELECT \n    CASE \n        WHEN v.ActiveFlag = 1 THEN 'Vendor no longer used'\n        WHEN v.ActiveFlag = 2 THEN 'Vendor is actively used'\n        ELSE 'Unknown status'\n    END AS VendorStatus\nFROM Person p\nJOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID\nJOIN PurchaseOrderHeader poh ON e.BusinessEntityID = poh.EmployeeID\nJOIN Vendor v ON poh.VendorID = v.BusinessEntityID\nWHERE p.BusinessEntityID = 2054",
    "7172": "SELECT PhoneNumber\nFROM PersonPhone\nJOIN Person ON Person.BusinessEntityID = PersonPhone.BusinessEntityID\nWHERE Person.FirstName = 'Gerald' AND Person.LastName = 'Patel'",
    "7173": "SELECT PhoneNumberType.Name \nFROM PhoneNumberType \nJOIN PersonPhone ON PhoneNumberType.PhoneNumberTypeID = PersonPhone.PhoneNumberTypeID \nWHERE PersonPhone.BusinessEntityID = 13626;",
    "7174": "SELECT JobTitle FROM Employee \nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID \nWHERE FirstName = 'Lynn' AND LastName = 'Tsoflias';",
    "7175": "SELECT COUNT(*) AS NumberOfSubCategoriesForBikes\nFROM ProductSubcategory\nWHERE ProductCategoryID = (\n    SELECT ProductCategoryID\n    FROM ProductCategory\n    WHERE Name = 'Bike'\n)",
    "7176": "SELECT \n    (CAST(SUM(CASE WHEN DocumentSummary IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS PercentageOfPrivateDocuments\nFROM \n    Document\nJOIN \n    Employee ON Document.Owner = Employee.BusinessEntityID\nWHERE \n    Employee.JobTitle = 'Document Control Assistant' \n    AND Employee.HireDate = '2009-01-22';",
    "7177": "SELECT \n    (LastReceiptCost - StandardPrice) / StandardPrice AS profit_ratio\nFROM \n    ProductVendor\nJOIN \n    Product ON Product.ProductID = ProductVendor.ProductID\nWHERE \n    Product.Name = 'HL Grip Tape';",
    "7178": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM PhoneNumberType WHERE Name = 'Cellphone') / \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM PhoneNumberType) * 100 AS percentage",
    "7179": "SELECT ProductAssemblyID \nFROM \"BillOfMaterials\" \nWHERE UnitMeasureCode = 'EA' \nAND BOMLevel = 2 \nAND PerAssemblyQty > 10;",
    "7180": "SELECT COUNT(DISTINCT LocationID) FROM WorkOrderRouting WHERE ActualResourceHrs = 2;",
    "7181": "SELECT SUM(StockedQty) AS TotalStockedQuantity\nFROM WorkOrder\nWHERE ProductID IN (\n    SELECT ProductID\n    FROM ProductInventory\n    WHERE LocationID = 40\n)",
    "7182": "SELECT \n    UnitMeasure.Name,\n    UnitMeasure.UnitMeasureCode,\n    SUM(BillOfMaterials.PerAssemblyQty) AS TotalPerAssemblyQty\nFROM \n    BillOfMaterials\nJOIN \n    UnitMeasure ON BillOfMaterials.UnitMeasureCode = UnitMeasure.UnitMeasureCode\nWHERE \n    UnitMeasure.UnitMeasureCode IN ('EA', 'IN', 'OZ')\nGROUP BY \n    UnitMeasure.UnitMeasureCode, UnitMeasure.Name",
    "7183": "SELECT p.ProductID\nFROM Product p\nLEFT JOIN WorkOrder wo ON p.ProductID = wo.ProductID\nWHERE wo.WorkOrderID IS NULL;",
    "7184": "SELECT p.Name \nFROM Product p \nJOIN TransactionHistory th ON p.ProductID = th.ProductID \nWHERE th.TransactionType = 'P'",
    "7185": "SELECT FirstName || ' ' || COALESCE(MiddleName || ' ', '') || LastName AS FullName\nFROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nWHERE JobTitle = 'Accountant';",
    "7186": "SELECT JobTitle \nFROM Employee \nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID \nWHERE FirstName = 'Ken' AND LastName = 'S\u00e1nchez'",
    "7187": "SELECT COUNT(*) AS MaleEmployeesNoEmailPromotion\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.Gender = 'M' AND p.EmailPromotion = 0;",
    "7188": "SELECT \n    sp.BusinessEntityID,\n    (sp.SalesLastYear / SUM(sq.SalesQuota)) * 100 AS SalesQuotaAchievementPercentage\nFROM \n    SalesPerson sp\nJOIN \n    SalesPersonQuotaHistory sq ON sp.BusinessEntityID = sq.BusinessEntityID\nWHERE \n    strftime('%Y', sq.QuotaDate) = '2013'\nGROUP BY \n    sp.BusinessEntityID\nORDER BY \n    SalesQuotaAchievementPercentage DESC\nLIMIT 1;",
    "7189": "SELECT COUNT(*) AS MarriedNonSalesEmployees\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.BusinessEntityID NOT IN (\n    SELECT BusinessEntityID\n    FROM SalesPerson\n)\nAND p.MaritalStatus = 'M'\nAND p.PersonType = 'EM';",
    "7190": "SELECT COUNT(*) \nFROM Employee \nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID \nWHERE Employee.JobTitle LIKE 'Production Technician%' \nAND Person.MaritalStatus = 'S' \nAND Person.PersonType = 'VC';",
    "7191": "SELECT SUM(SickLeaveHours) AS TotalSickLeaveHours\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE EmailPromotion = 0;",
    "7192": "SELECT p.FirstName, p.LastName, e.HireDate\nFROM Person p\nJOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID\nWHERE p.PersonType = 'SP' AND strftime('%Y', e.HireDate) < '2010'",
    "7193": "SELECT \n    p.FirstName || ' ' || p.LastName AS SalesPersonName, \n    sp.SalesYTD, \n    spq.SalesQuota AS ProjectedYearlySalesQuota2011\nFROM \n    SalesPerson sp\nJOIN \n    Person p ON sp.BusinessEntityID = p.BusinessEntityID\nJOIN \n    SalesPersonQuotaHistory spq ON sp.BusinessEntityID = spq.BusinessEntityID\nWHERE \n    p.PersonType = 'SP' AND \n    strftime('%Y', spq.QuotaDate) = '2011'\nORDER BY \n    sp.SalesYTD DESC\nLIMIT 1;",
    "7194": "SELECT COUNT(*) \nFROM Person p\nJOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID\nWHERE p.FirstName = 'Alex' AND p.MaritalStatus = 'S' AND e.OrganizationLevel = 1;",
    "7195": "SELECT AVG(VacationHours) AS AvgVacationHours\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Person.PersonType = 'SC';",
    "7196": "SELECT e.LastName, e.JobTitle\nFROM Document d\nJOIN Employee e ON d.Owner = e.BusinessEntityID\nWHERE d.Title = \"Crank Arm and Tire Maintenance\";",
    "7197": "SELECT COUNT(*) AS NumberOfEmployeesWithoutSuffix, OrganizationLevel\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Suffix IS NULL\nGROUP BY OrganizationLevel;",
    "7198": "SELECT sp.BusinessEntityID\nFROM SalesPersonQuotaHistory spqh\nJOIN SalesPerson sp ON spqh.BusinessEntityID = sp.BusinessEntityID\nWHERE sp.TerritoryID = 1 AND spqh.SalesQuota <= sp.SalesYTD AND strftime('%Y', spqh.QuotaDate) = '2013'",
    "7199": "SELECT p.LastName\nFROM Person p\nJOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID\nJOIN JobCandidate jc ON e.BusinessEntityID = jc.BusinessEntityID\nWHERE jc.Resume IS NOT NULL;",
    "7200": "SELECT EmailAddress.EmailAddress\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nJOIN EmailAddress ON Person.BusinessEntityID = EmailAddress.BusinessEntityID\nWHERE Employee.Gender = 'F' AND Employee.MaritalStatus = 'S'",
    "7201": "SELECT DISTINCT p.Color\nFROM ProductReview pr\nJOIN Product p ON pr.ProductID = p.ProductID\nWHERE p.Color IS NOT NULL;",
    "7202": "SELECT \n    (SELECT SUM(SalesQuota) \n     FROM SalesPersonQuotaHistory \n     WHERE BusinessEntityID = 275 AND strftime('%Y', QuotaDate) = '2013') AS ProjectedSalesQuota2013,\n    (SELECT SalesYTD \n     FROM SalesPerson \n     WHERE BusinessEntityID = 275) AS SalesYTDAmount",
    "7203": "SELECT sp.BusinessEntityID\nFROM SalesPerson sp\nJOIN SalesPersonQuotaHistory spqh ON sp.BusinessEntityID = spqh.BusinessEntityID\nWHERE spqh.SalesQuota > sp.SalesYTD\nAND strftime('%Y', spqh.QuotaDate) = '2013'",
    "7204": "SELECT \n    (CAST(SUM(CASE WHEN Gender = 'F' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_female\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE EmailPromotion = 1;",
    "7205": "SELECT \n    SUM(CASE WHEN e.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS MarriedNonSalesEmployees,\n    SUM(CASE WHEN e.MaritalStatus = 'S' THEN 1 ELSE 0 END) AS SingleNonSalesEmployees,\n    (CAST(SUM(CASE WHEN e.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN e.MaritalStatus = 'S' THEN 1 ELSE 0 END)) AS RatioMarriedToSingle\nFROM \n    Employee e\nJOIN \n    Person p ON e.BusinessEntityID = p.BusinessEntityID\nLEFT JOIN \n    SalesPerson sp ON e.BusinessEntityID = sp.BusinessEntityID\nWHERE \n    p.PersonType = 'EM' AND sp.BusinessEntityID IS NULL",
    "7206": "SELECT \n    SUM(Bonus) AS TotalBonus, \n    (SUM(Bonus) / SUM(SalesQuota)) * 100 AS PercentageOfProjectedYearlySalesQuota\nFROM \n    SalesPersonQuotaHistory\nJOIN \n    SalesPerson ON SalesPerson.BusinessEntityID = SalesPersonQuotaHistory.BusinessEntityID\nWHERE \n    strftime('%Y', QuotaDate) = '2013';",
    "7207": "SELECT COUNT(DISTINCT CardType) AS TotalCardTypes, SUM(CASE WHEN CardType = 'Vista' THEN 1 ELSE 0 END) AS VistaCards FROM CreditCard;",
    "7208": "SELECT Name FROM Product WHERE ProductID = 475;",
    "7209": "SELECT COUNT(*) AS SingleEmployeesBornBefore1980\nFROM Employee\nWHERE BirthDate < '1980-01-01' AND (MaritalStatus = 'S' OR MaritalStatus IS NULL);",
    "7210": "SELECT Store.Name \nFROM Store \nJOIN SalesPerson ON Store.SalesPersonID = SalesPerson.BusinessEntityID \nWHERE SalesPerson.BusinessEntityID = 277;",
    "7211": "SELECT SUM(Quantity) AS TotalSold\nFROM TransactionHistory\nWHERE ProductID = 989 AND TransactionType = 'S' AND TransactionDate BETWEEN '2013-08-01' AND '2013-08-30';",
    "7212": "SELECT * FROM CreditCard WHERE ExpYear < 2007;",
    "7213": "SELECT eph.Rate\nFROM EmployeePayHistory eph\nJOIN Employee e ON eph.BusinessEntityID = e.BusinessEntityID\nWHERE (strftime('%Y', e.HireDate) - strftime('%Y', e.BirthDate)) = 20;",
    "7214": "SELECT st.Name \nFROM SalesPerson sp \nJOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID \nWHERE sp.BusinessEntityID = 277;",
    "7215": "SELECT FirstName || ' ' || COALESCE(MiddleName || ' ', '') || LastName AS FullName\nFROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nWHERE JobTitle = 'Vice President of Production';",
    "7216": "SELECT COUNT(*) AS NumberOfEmployees\nFROM EmployeeDepartmentHistory edh\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nJOIN Shift s ON edh.ShiftID = s.ShiftID\nWHERE d.Name = 'Information Service' AND s.Name = 'Evening'",
    "7217": "SELECT PurchaseOrderID \nFROM PurchaseOrderHeader \nWHERE VendorID IN (\n    SELECT BusinessEntityID \n    FROM Vendor \n    WHERE CreditRating = 5\n);",
    "7218": "SELECT pnt.Name AS PhoneNumberType\nFROM PersonPhone pp\nJOIN PhoneNumberType pnt ON pp.PhoneNumberTypeID = pnt.PhoneNumberTypeID\nWHERE pp.PhoneNumber = '114-555-0100';",
    "7219": "SELECT SUM(Freight) AS TotalShipmentCost\nFROM PurchaseOrderHeader\nWHERE ShipMethodID = (\n    SELECT ShipMethodID\n    FROM ShipMethod\n    WHERE Name = 'Catgo Transport 5'\n) AND OrderDate = '2011-12-14';",
    "7220": "SELECT COUNT(*) AS SalesOrdersCreatedByDavidRCampbell\nFROM SalesOrderHeader\nJOIN SalesPerson ON SalesOrderHeader.SalesPersonID = SalesPerson.BusinessEntityID\nJOIN Employee ON SalesPerson.BusinessEntityID = Employee.BusinessEntityID\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Person.FirstName = 'David' AND Person.MiddleName = 'R.' AND Person.LastName = 'Campbell';",
    "7221": "SELECT EmailAddress.EmailAddress\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nJOIN EmailAddress ON Person.BusinessEntityID = EmailAddress.BusinessEntityID\nWHERE Employee.JobTitle = 'Facilities Manager'",
    "7222": "SELECT COUNT(*) AS NumberOfCustomersInCanada\nFROM Customer\nJOIN SalesTerritory ON Customer.TerritoryID = SalesTerritory.TerritoryID\nWHERE SalesTerritory.Name = 'Canada';",
    "7223": "SELECT A.AddressLine1 || A.AddressLine2 || A.City AS ShippingAddress\nFROM \"SalesOrderHeader\" SOH\nJOIN \"Address\" A ON SOH.ShipToAddressID = A.AddressID\nWHERE SOH.SalesOrderID = 43873;",
    "7224": "SELECT FirstName FROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nWHERE SickLeaveHours > 65;",
    "7225": "SELECT COUNT(*) AS BelowAveragePayTechnicians\nFROM EmployeePayHistory\nWHERE Rate < (SELECT AVG(Rate) FROM EmployeePayHistory\n              JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID\n              JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\n              WHERE JobTitle = 'production technician')\nAND BusinessEntityID IN (SELECT BusinessEntityID FROM Employee\n                         JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\n                         WHERE JobTitle = 'production technician');",
    "7226": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM SalesOrderHeader \n     JOIN Customer ON SalesOrderHeader.CustomerID = Customer.CustomerID\n     JOIN Address ON SalesOrderHeader.ShipToAddressID = Address.AddressID\n     JOIN StateProvince ON Address.StateProvinceID = StateProvince.StateProvinceID\n     JOIN CountryRegion ON StateProvince.CountryRegionCode = CountryRegion.CountryRegionCode\n     WHERE CountryRegion.Name = 'United Kingdom') \n    /\n    (SELECT CAST(COUNT(*) AS FLOAT) FROM SalesOrderHeader) \n    AS UKSalesOrderProportion;",
    "7227": "SELECT ModifiedDate FROM PhoneNumberType WHERE PhoneNumberTypeID = (\n    SELECT PhoneNumberTypeID FROM PersonPhone WHERE PhoneNumber = '1500 555-0143'\n);",
    "7228": "SELECT BusinessEntityID \nFROM SalesPerson \nORDER BY SalesYTD DESC \nLIMIT 1;",
    "7229": "SELECT * FROM Vendor WHERE ActiveFlag = 1 AND PurchasingWebServiceURL IS NOT NULL;",
    "7230": "SELECT st.Name, COUNT(c.CustomerID) AS NumberOfCustomers\nFROM SalesTerritory st\nJOIN Customer c ON st.TerritoryID = c.TerritoryID\nJOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID\nWHERE soh.OrderDate BETWEEN '2014-09-12 00:00:00' AND '2014-09-12 23:59:59'\nGROUP BY st.TerritoryID\nORDER BY NumberOfCustomers DESC\nLIMIT 1;",
    "7231": "SELECT SUM(TotalDue) AS TotalCost\nFROM SalesOrderHeader\nWHERE OrderDate = '2013-05-29';",
    "7232": "SELECT FirstName, COUNT(FirstName) AS Frequency\nFROM Person\nWHERE BusinessEntityID IN (\n    SELECT BusinessEntityID\n    FROM Vendor\n    INNER JOIN BusinessEntityContact ON Vendor.BusinessEntityID = BusinessEntityContact.BusinessEntityID\n    INNER JOIN Person ON BusinessEntityContact.PersonID = Person.BusinessEntityID\n    WHERE PersonType = 'VC'\n)\nGROUP BY FirstName\nORDER BY Frequency DESC\nLIMIT 1;",
    "7233": "SELECT FirstName || ' ' || IFNULL(MiddleName || ' ', '') || LastName AS FullName\nFROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nWHERE JobTitle = 'Production Technician - WC50'",
    "7234": "SELECT SUM(SOD.OrderQty) AS TotalMinipumpsSold\nFROM Product P\nJOIN SalesOrderDetail SOD ON P.ProductID = SOD.ProductID\nWHERE P.Name = 'Minipump';",
    "7235": "SELECT Customer.PersonID AS BusinessEntityID\nFROM CreditCard\nJOIN SalesOrderHeader ON CreditCard.CreditCardID = SalesOrderHeader.CreditCardID\nJOIN Customer ON SalesOrderHeader.CustomerID = Customer.CustomerID\nWHERE CreditCard.CardNumber = \"11113366963373\"",
    "7236": "SELECT a.AddressLine1, a.AddressLine2, a.City, a.StateProvinceID, a.PostalCode\nFROM Address a\nJOIN BusinessEntityAddress bea ON a.AddressID = bea.AddressID\nJOIN AddressType at ON bea.AddressTypeID = at.AddressTypeID\nWHERE bea.BusinessEntityID = 5555 AND at.Name = 'Home'",
    "7237": "SELECT p.Name \nFROM Product p \nJOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID \nJOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID \nWHERE so.Description = '15';",
    "7238": "SELECT CreditCard.CardNumber\nFROM CreditCard\nJOIN SalesOrderHeader ON CreditCard.CreditCardID = SalesOrderHeader.CreditCardID\nJOIN Customer ON SalesOrderHeader.CustomerID = Customer.CustomerID\nJOIN Person ON Customer.PersonID = Person.BusinessEntityID\nWHERE Person.FirstName = 'Michelle' AND Person.LastName = 'Cox'",
    "7239": "SELECT sr.ReasonType\nFROM SalesOrderHeader AS soh\nJOIN SalesOrderHeaderSalesReason AS sohsr ON soh.SalesOrderID = sohsr.SalesOrderID\nJOIN SalesReason AS sr ON sohsr.SalesReasonID = sr.SalesReasonID\nWHERE soh.SalesOrderID = 51883",
    "7240": "SELECT CreditCard.CardNumber\nFROM SalesOrderHeader\nJOIN CreditCard ON SalesOrderHeader.CreditCardID = CreditCard.CreditCardID\nWHERE SalesOrderHeader.SalesOrderID = 45793;",
    "7241": "SELECT e.BusinessEntityID, p.FirstName, p.LastName\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nJOIN SalesPerson sp ON e.BusinessEntityID = sp.BusinessEntityID\nJOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID\nWHERE st.Name = 'Northwest' AND st.CountryRegionCode = 'US'",
    "7242": "SELECT e.BusinessEntityID, p.FirstName, p.LastName, MAX(eh.Rate) AS HighestPayRate\nFROM Employee e\nJOIN EmployeePayHistory eh ON e.BusinessEntityID = eh.BusinessEntityID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE e.JobTitle = 'Production Technician'\nORDER BY HighestPayRate DESC\nLIMIT 1;",
    "7243": "SELECT P.FirstName || ' ' || IFNULL(P.MiddleName || ' ', '') || P.LastName AS FullName\nFROM SalesPerson SP\nJOIN Employee E ON SP.BusinessEntityID = E.BusinessEntityID\nJOIN Person P ON E.BusinessEntityID = P.BusinessEntityID\nWHERE SP.TerritoryID = 9;",
    "7244": "SELECT Description \nFROM SpecialOffer \nJOIN SpecialOfferProduct ON SpecialOffer.SpecialOfferID = SpecialOfferProduct.SpecialOfferID \nWHERE ProductID = 762;",
    "7245": "SELECT \n    (SELECT AVG(Rate) FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE Gender = 'F') AS AvgFemaleRate,\n    (SELECT AVG(Rate) FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE Gender = 'M') AS AvgMaleRate,\n    ((SELECT AVG(Rate) FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE Gender = 'F') - \n    (SELECT AVG(Rate) FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE Gender = 'M')) AS Difference",
    "7246": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM EmployeeDepartmentHistory WHERE ShiftID = (SELECT ShiftID FROM Shift WHERE Name = 'Night')) / \n    (SELECT CAST(COUNT(DISTINCT BusinessEntityID) AS FLOAT) FROM EmployeeDepartmentHistory) * 100 AS percentage",
    "7247": "SELECT COUNT(*) AS MarriedMaleEmployeesBornBefore1960\nFROM Employee\nWHERE MaritalStatus = 'M' AND Gender = 'M' AND BirthDate <= '1959-12-31';",
    "7248": "SELECT Name, MAX(ListPrice) AS HighestSellingPrice\nFROM Product\nGROUP BY ProductSubcategoryID\nORDER BY HighestSellingPrice DESC\nLIMIT 5;",
    "7249": "SELECT MIN(HireDate) AS FirstAccountantHireDate\nFROM Employee\nWHERE JobTitle = 'Accountant';",
    "7250": "SELECT JobTitle, COUNT(JobTitle) AS JobCount\nFROM Employee\nWHERE HireDate BETWEEN '2007-01-01' AND '2007-12-31'\nGROUP BY JobTitle\nORDER BY JobCount DESC\nLIMIT 1;",
    "7251": "SELECT MAX(StandardPrice - LastReceiptCost) AS ProfitOnNet\nFROM ProductVendor\nWHERE LastReceiptCost IS NOT NULL;",
    "7252": "SELECT COUNT(DISTINCT DepartmentID) AS NumberOfDepartments\nFROM EmployeeDepartmentHistory\nJOIN Employee ON EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID\nWHERE Employee.FirstName = 'Sheela' AND Employee.LastName = 'Ward'\nAND ((StartDate <= '2012-12-31' AND EndDate >= '2011-01-01') OR (StartDate BETWEEN '2011-01-01' AND '2012-12-31') OR (EndDate BETWEEN '2011-01-01' AND '2012-12-31'))",
    "7253": "SELECT AVG(2009 - strftime('%Y', BirthDate)) AS AverageAge\nFROM Employee\nJOIN SalesPerson ON Employee.BusinessEntityID = SalesPerson.BusinessEntityID",
    "7254": "SELECT d.Name AS DepartmentName, d.GroupName\nFROM Department d\nJOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID\nGROUP BY d.DepartmentID\nORDER BY COUNT(edh.BusinessEntityID) ASC\nLIMIT 1;",
    "7255": "SELECT \n    MAX(2015 - strftime('%Y', BirthDate)) AS OldestAge, \n    Rate AS HourlyRate\nFROM \n    Employee e\nJOIN \n    EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN \n    Department d ON edh.DepartmentID = d.DepartmentID\nJOIN \n    EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID\nWHERE \n    d.Name = 'Marketing' AND \n    e.JobTitle = 'Marketing Specialist' AND \n    edh.EndDate IS NULL AND \n    eph.RateChangeDate = (\n        SELECT MAX(RateChangeDate) \n        FROM EmployeePayHistory \n        WHERE BusinessEntityID = e.BusinessEntityID\n    )",
    "7256": "SELECT v.Name AS VendorName, SUM(poh.TotalDue) AS TotalAmountDue\nFROM Vendor v\nJOIN PurchaseOrderHeader poh ON v.BusinessEntityID = poh.VendorID\nJOIN PurchaseOrderDetail pod ON poh.PurchaseOrderID = pod.PurchaseOrderID\nJOIN (\n    SELECT pv.ProductID, pv.BusinessEntityID, MIN(pv.StandardPrice) AS MinPrice\n    FROM ProductVendor pv\n    GROUP BY pv.ProductID\n    ORDER BY MinPrice ASC\n    LIMIT 1\n) AS cheapest_product ON cheapest_product.BusinessEntityID = v.BusinessEntityID\nGROUP BY v.Name",
    "7257": "SELECT \n    E.BusinessEntityID AS EmployeeID, \n    (E.HireDate - strftime('%Y', E.BirthDate)) AS AgeAtHire\nFROM \n    PurchaseOrderHeader POH\nJOIN \n    Employee E ON POH.EmployeeID = E.BusinessEntityID\nWHERE \n    POH.TotalDue - POH.Freight = (SELECT MAX(TotalDue - Freight) FROM PurchaseOrderHeader)",
    "7258": "SELECT E.JobTitle AS Position, E.NationalIDNumber, (EPH.Rate / 26) AS Salary, (P.FirstName || ' ' || IFNULL(P.MiddleName || ' ', '') || P.LastName) AS FullName\nFROM Employee E\nJOIN EmployeePayHistory EPH ON E.BusinessEntityID = EPH.BusinessEntityID\nJOIN Person P ON E.BusinessEntityID = P.BusinessEntityID\nWHERE EPH.RateChangeDate = (\n    SELECT MAX(EPH2.RateChangeDate)\n    FROM EmployeePayHistory EPH2\n    WHERE EPH2.BusinessEntityID = E.BusinessEntityID\n)\nORDER BY EPH.Rate DESC\nLIMIT 1 OFFSET 9",
    "7259": "SELECT P.Name, (P.ListPrice - P.StandardCost) AS Profit\nFROM Product P\nJOIN ProductReview PR ON P.ProductID = PR.ProductID\nWHERE PR.Rating = 5 AND PR.ReviewerName = 'John Smith'",
    "7260": "SELECT Rate FROM EmployeePayHistory\nWHERE BusinessEntityID IN (\n    SELECT BusinessEntityID FROM Employee\n    ORDER BY HireDate\n    LIMIT 5\n)",
    "7261": "SELECT \n    V.Name,\n    (PV.LastReceiptCost - PV.StandardPrice) AS ProfitOnNet\nFROM \n    ProductVendor PV\nJOIN \n    Vendor V ON PV.BusinessEntityID = V.BusinessEntityID\nWHERE \n    PV.MaxOrderQty BETWEEN 500 AND 750\nORDER BY \n    ProfitOnNet DESC\nLIMIT 1 OFFSET 9;",
    "7262": "SELECT \n    E.HireDate, \n    (2011 - strftime('%Y', E.HireDate)) AS LengthOfStay\nFROM \n    Employee E\nJOIN \n    SalesOrderHeader SOH ON E.BusinessEntityID = SOH.SalesPersonID\nWHERE \n    SOH.Status = 1\nGROUP BY \n    E.BusinessEntityID, E.HireDate",
    "7263": "SELECT p.Name AS ProductName, p.DaysToManufacture\nFROM ProductReview pr\nJOIN Product p ON pr.ProductID = p.ProductID\nWHERE p.Class = 'M'\nORDER BY pr.Rating DESC, pr.ReviewDate DESC\nLIMIT 1;",
    "7264": "SELECT \n    e.JobTitle AS FirstJobPosition,\n    (p.FirstName || ' ' || IFNULL(p.MiddleName || ' ', '') || p.LastName) AS FullName\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nORDER BY e.HireDate\nLIMIT 1;",
    "7265": "SELECT COUNT(*) \nFROM WorkOrder \nJOIN Product ON WorkOrder.ProductID = Product.ProductID \nWHERE WorkOrder.Quantity BETWEEN 100 AND 250 \nAND Product.ReorderPoint <= 375;",
    "7266": "SELECT \n    (SELECT AVG(Rate) FROM EmployeePayHistory \n     JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID \n     WHERE Gender = 'F') - \n    (SELECT AVG(Rate) FROM EmployeePayHistory \n     JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID \n     WHERE Gender = 'M') AS AvgSalaryDifference",
    "7267": "SELECT DISTINCT v.Name\nFROM Vendor v\nJOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID\nJOIN Product p ON pv.ProductID = p.ProductID\nJOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID\nWHERE p.MakeFlag = 0 AND p.Style = 'W' AND ps.Name = 'Tights';",
    "7268": "SELECT CASE WHEN PayFrequency = 1 THEN 'Salary received monthly'\n            WHEN PayFrequency = 2 THEN 'Salary received biweekly'\n       END AS PayFrequency\nFROM EmployeePayHistory\nWHERE BusinessEntityID = (\n    SELECT BusinessEntityID\n    FROM EmployeeDepartmentHistory\n    WHERE DepartmentID = (\n        SELECT DepartmentID\n        FROM Department\n        WHERE Name = 'Scheduling Assistant'\n        ORDER BY ModifiedDate\n        LIMIT 1\n    )\n    ORDER BY StartDate\n    LIMIT 1\n)\nORDER BY RateChangeDate\nLIMIT 1",
    "7269": "SELECT \n    P.Class, \n    P.ProductLine AS LineOfBusiness, \n    P.ListPrice\nFROM \n    Product P\nJOIN \n    SalesOrderDetail SOD ON P.ProductID = SOD.ProductID\nJOIN \n    SalesOrderHeader SOH ON SOD.SalesOrderID = SOH.SalesOrderID\nWHERE \n    SOH.OnlineOrderFlag = 1\nGROUP BY \n    P.ProductID\nORDER BY \n    SUM(SOD.OrderQty) ASC\nLIMIT 1;",
    "7270": "SELECT FirstName || ' ' || IFNULL(MiddleName || ' ', '') || LastName AS FullName\nFROM Employee\nJOIN SalesPerson ON Employee.BusinessEntityID = SalesPerson.BusinessEntityID\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE CommissionPct = (SELECT MAX(CommissionPct) FROM SalesPerson);",
    "7271": "SELECT FirstName || ' ' || COALESCE(MiddleName || ' ', '') || LastName AS FullName\nFROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nORDER BY (julianday(HireDate) - julianday(BirthDate)) DESC\nLIMIT 1 OFFSET 1;",
    "7272": "SELECT \n    p.Name AS ProductName,\n    (SUM(sod.Quantity) * (p.ListPrice - p.StandardCost)) AS TotalProfit\nFROM \n    SalesOrderHeader soh\nINNER JOIN \n    SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID\nINNER JOIN \n    Product p ON sod.ProductID = p.ProductID\nWHERE \n    soh.OnlineOrderFlag = 1\nGROUP BY \n    p.ProductID\nORDER BY \n    SUM(sod.Quantity) DESC\nLIMIT 1;",
    "7273": "SELECT MAX(pod.OrderQty - pod.ReceivedQty) AS MaxDifference, v.Name AS VendorName\nFROM PurchaseOrderDetail pod\nJOIN PurchaseOrderHeader poh ON pod.PurchaseOrderID = poh.PurchaseOrderID\nJOIN Vendor v ON poh.VendorID = v.BusinessEntityID;",
    "7274": "SELECT \n    AVG(pv.AverageLeadTime) AS AverageLeadTime,\n    (pv.LastReceiptCost - pv.StandardPrice) AS ProfitOnNet,\n    (a.AddressLine1 || ' ' || IFNULL(a.AddressLine2, '') || ' ' || a.City || ' ' || a.PostalCode) AS FullLocation\nFROM \n    ProductVendor pv\n    JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID\n    JOIN BusinessEntityAddress bea ON v.BusinessEntityID = bea.BusinessEntityID\n    JOIN Address a ON bea.AddressID = a.AddressID\nWHERE \n    pv.ProductID = 843\nGROUP BY \n    pv.ProductID;",
    "7275": "SELECT COUNT(*) AS SalespersonsNotMetQuota FROM SalesPerson WHERE Bonus = 0;",
    "7276": "SELECT COUNT(DISTINCT s.SalesOrderID) AS MultipleTaxTypesCount\nFROM SalesOrderHeader s\nJOIN SalesTaxRate str ON s.TerritoryID = str.StateProvinceID\nWHERE str.TaxType = 1 AND str.Name LIKE '%+%';",
    "7277": "SELECT MAX(ActualCost) AS HighestProductCost\nFROM TransactionHistory\nWHERE TransactionType = 'P';",
    "7278": "SELECT Status \nFROM SalesOrderHeader \nORDER BY Freight DESC \nLIMIT 1;",
    "7279": "SELECT COUNT(*) AS OutOfStockProducts\nFROM Product\nWHERE ProductID NOT IN (\n    SELECT ProductID\n    FROM ProductInventory\n    WHERE Quantity > 0\n)",
    "7280": "SELECT MAX(StandardPrice - LastReceiptCost) AS HighestProfitOnNet\nFROM ProductVendor;",
    "7281": "SELECT ReviewerName\nFROM ProductReview\nWHERE Rating = (SELECT MAX(Rating) FROM ProductReview)\nGROUP BY ReviewerName\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "7282": "SELECT ProductID, COUNT(ProductID) AS ReviewCount\nFROM ProductReview\nGROUP BY ProductID\nORDER BY ReviewCount DESC\nLIMIT 1;",
    "7283": "SELECT COUNT(DISTINCT p.ProductID) AS ProductsNeverReceivedHighestRating\nFROM Product p\nLEFT JOIN ProductReview pr ON p.ProductID = pr.ProductID\nWHERE p.MakeFlag = 0 AND (pr.Rating IS NULL OR pr.Rating != 5);",
    "7284": "SELECT MAX(ReviewCount) AS BiggestAmountOfReviews\nFROM (\n    SELECT p.ProductID, COUNT(pr.ProductReviewID) AS ReviewCount\n    FROM Product p\n    LEFT JOIN ProductReview pr ON p.ProductID = pr.ProductID\n    WHERE p.FinishedGoodsFlag = 1\n    GROUP BY p.ProductID\n)",
    "7285": "SELECT COUNT(DISTINCT p.ProductID) AS ProductsWithOver10Reviews\nFROM Product p\nJOIN ProductReview pr ON p.ProductID = pr.ProductID\nWHERE p.MakeFlag = 1 AND p.FinishedGoodsFlag = 1\nGROUP BY p.ProductID\nHAVING COUNT(pr.ProductReviewID) > 10",
    "7286": "SELECT P.Name\nFROM Product P\nJOIN ProductReview PR ON P.ProductID = PR.ProductID\nWHERE P.FinishedGoodsFlag = 1\nGROUP BY P.ProductID\nHAVING COUNT(PR.ProductReviewID) > 10;",
    "7287": "SELECT pr.ReviewerName\nFROM ProductReview pr\nJOIN Product p ON pr.ProductID = p.ProductID\nWHERE p.Class = 'M' AND p.Style = 'W' AND pr.Rating = 5",
    "7288": "SELECT p.Class\nFROM Product p\nJOIN ProductReview pr ON p.ProductID = pr.ProductID\nGROUP BY p.ProductID\nORDER BY COUNT(pr.Comments) DESC\nLIMIT 1",
    "7289": "SELECT pr.EmailAddress\nFROM ProductReview pr\nJOIN Product p ON pr.ProductID = p.ProductID\nWHERE p.Class = 'H'",
    "7290": "SELECT p.Name\nFROM Product p\nJOIN ProductListPriceHistory plph ON p.ProductID = plph.ProductID\nGROUP BY p.ProductID\nHAVING COUNT(plph.ListPrice) > 3",
    "7291": "SELECT pd.Description\nFROM Product p\nJOIN ProductModelProductDescriptionCulture pmpdc ON p.ProductModelID = pmpdc.ProductModelID\nJOIN ProductDescription pd ON pmpdc.ProductDescriptionID = pd.ProductDescriptionID\nWHERE p.Name = 'Headset Ball Bearings';",
    "7292": "SELECT MAX(pv.StandardPrice) AS HighestSellingPrice\nFROM ProductVendor pv\nJOIN Product p ON pv.ProductID = p.ProductID\nWHERE p.Name = 'Hex Nut 5'",
    "7293": "SELECT pv.StandardPrice\nFROM ProductVendor pv\nJOIN Product p ON pv.ProductID = p.ProductID\nWHERE p.Name = 'Hex Nut 5'",
    "7294": "SELECT COUNT(DISTINCT pv.BusinessEntityID) AS GoodCreditVendors\nFROM ProductVendor pv\nJOIN Product p ON pv.ProductID = p.ProductID\nJOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID\nWHERE p.Name = 'Hex Nut 5' AND v.CreditRating BETWEEN 1 AND 3;",
    "7295": "SELECT V.PurchasingWebServiceURL\nFROM Vendor V\nJOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID\nJOIN Product P ON PV.ProductID = P.ProductID\nWHERE P.Name = 'Hex Nut 5'",
    "7296": "SELECT v.Name AS VendorName\nFROM ProductVendor pv\nJOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID\nJOIN Product p ON pv.ProductID = p.ProductID\nWHERE p.Name = 'Hex Nut 5'\nORDER BY pv.StandardPrice ASC\nLIMIT 1;",
    "7297": "SELECT COUNT(DISTINCT p.ProductID) AS HighClassProductsSoldByPreferredVendors\nFROM Product p\nJOIN ProductVendor pv ON p.ProductID = pv.ProductID\nJOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID\nWHERE p.Class = 'H' AND v.PreferredVendorStatus = 1;",
    "7298": "SELECT plph.ListPrice\nFROM ProductListPriceHistory plph\nJOIN Product p ON plph.ProductID = p.ProductID\nWHERE p.Name = 'LL Fork'",
    "7299": "SELECT COUNT(DISTINCT pv.ProductID) AS MountainProductsSoldByOver2Vendors\nFROM ProductVendor pv\nJOIN Product p ON pv.ProductID = p.ProductID\nWHERE p.ProductLine = 'M'\nGROUP BY pv.ProductID\nHAVING COUNT(pv.BusinessEntityID) > 2;",
    "7300": "SELECT COUNT(DISTINCT p.ProductID) AS MountainProductsWithReviews\nFROM Product p\nJOIN ProductReview pr ON p.ProductID = pr.ProductID\nWHERE p.ProductLine = 'M'",
    "7301": "SELECT EmailAddress\nFROM ProductReview\nWHERE Rating = 1 AND ProductID = (\n    SELECT ProductID\n    FROM Product\n    WHERE Name = 'HL Mountain Pedal'\n)",
    "7302": "SELECT COUNT(*) AS OutOfStockProducts\nFROM Product\nJOIN ProductVendor ON Product.ProductID = ProductVendor.ProductID\nWHERE DaysToManufacture > 2 AND (OnOrderQty = 0 OR OnOrderQty IS NULL);",
    "7303": "SELECT p.Name\nFROM Product p\nJOIN ProductVendor pv ON p.ProductID = pv.ProductID\nWHERE (pv.OnOrderQty = 0 OR pv.OnOrderQty IS NULL) AND p.MakeFlag = 1;",
    "7304": "SELECT p.ProductID, COUNT(pr.ProductReviewID) AS ReviewCount\nFROM Product p\nLEFT JOIN ProductReview pr ON p.ProductID = pr.ProductID\nWHERE p.FinishedGoodsFlag = 1 AND p.ProductLine = 'M'\nGROUP BY p.ProductID\nORDER BY ReviewCount DESC\nLIMIT 1",
    "7305": "SELECT AVG(p.StandardCost) AS AverageSellingPrice\nFROM ProductVendor pv\nJOIN Product p ON pv.ProductID = p.ProductID\nWHERE p.Name = 'Hex Nut 5';",
    "7306": "SELECT \n    p.Name AS ProductName,\n    AVG(pr.Rating) AS AverageRating\nFROM \n    ProductReview pr\nJOIN \n    Product p ON pr.ProductID = p.ProductID\nWHERE \n    p.ProductLine = 'M'\nGROUP BY \n    p.ProductID\nORDER BY \n    AverageRating DESC\nLIMIT 1;",
    "7307": "SELECT \n    p.Name AS ProductName,\n    AVG(pr.Rating) AS AverageRating\nFROM \n    Product p\nJOIN \n    ProductReview pr ON p.ProductID = pr.ProductID\nWHERE \n    p.MakeFlag = 1\nGROUP BY \n    p.ProductID\nORDER BY \n    AverageRating DESC\nLIMIT 3",
    "7308": "SELECT e.BusinessEntityID, p.FirstName, p.LastName\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE p.PersonType = 'EM' AND e.BusinessEntityID NOT IN (\n    SELECT BusinessEntityID FROM SalesPerson\n)\nORDER BY e.BusinessEntityID ASC;",
    "7309": "SELECT p.FirstName, p.LastName\nFROM Person p\nJOIN Customer c ON p.BusinessEntityID = c.PersonID\nJOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID\nJOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID\nWHERE p.LastName = 'Anderson' AND p.PersonType = 'IN'",
    "7310": "SELECT e.LoginID, e.HireDate\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nWHERE edh.EndDate IS NOT NULL\nGROUP BY e.LoginID, e.HireDate;",
    "7311": "SELECT FirstName, LastName\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE SalariedFlag = 1 AND strftime('%Y', HireDate) >= '2007'",
    "7312": "SELECT FirstName, LastName\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE MaritalStatus = 'M' AND VacationHours < 20;",
    "7313": "SELECT \n    E.FirstName || ' ' || E.LastName AS EmployeeName,\n    (2022 - strftime('%Y', E.BirthDate) + 1) AS Age\nFROM Employee E\nJOIN EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID\nWHERE EDH.ShiftID = 3 AND EDH.EndDate IS NULL\nORDER BY E.BirthDate\nLIMIT 1;",
    "7314": "SELECT e.BusinessEntityID, e.NationalIDNumber, e.LoginID, e.JobTitle, e.BirthDate, e.MaritalStatus, e.Gender, e.HireDate\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nWHERE d.Name = 'Shipping and Receiving'\nAND strftime('%Y', e.HireDate) = '2009'",
    "7315": "SELECT e.JobTitle, d.Name AS DepartmentName\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nWHERE e.BirthDate = (SELECT MIN(BirthDate) FROM Employee)\nAND edh.EndDate IS NULL",
    "7316": "SELECT \n    d.DepartmentID,\n    d.Name AS DepartmentName,\n    AVG(eh.Rate) AS AverageHourlyPayRate\nFROM \n    Department d\nJOIN \n    EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID\nJOIN \n    (\n        SELECT \n            BusinessEntityID, \n            MAX(RateChangeDate) AS LatestRateChangeDate\n        FROM \n            EmployeePayHistory\n        GROUP BY \n            BusinessEntityID\n    ) AS LatestPayRate ON edh.BusinessEntityID = LatestPayRate.BusinessEntityID\nJOIN \n    EmployeePayHistory eh ON LatestPayRate.BusinessEntityID = eh.BusinessEntityID \n    AND LatestPayRate.LatestRateChangeDate = eh.RateChangeDate\nGROUP BY \n    d.DepartmentID",
    "7317": "SELECT e.LoginID, MAX(ehp.Rate) AS HighestPayRate\nFROM Employee e\nJOIN EmployeePayHistory ehp ON e.BusinessEntityID = ehp.BusinessEntityID\nWHERE e.JobTitle != 'Chief Executive Officer'\nORDER BY ehp.Rate DESC\nLIMIT 1;",
    "7318": "SELECT v.Name \nFROM Vendor v \nJOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID \nWHERE pv.ProductID = 319 \nORDER BY pv.AverageLeadTime ASC \nLIMIT 1;",
    "7319": "SELECT p.Name\nFROM Product p\nJOIN PurchaseOrderDetail pod ON p.ProductID = pod.ProductID\nJOIN PurchaseOrderHeader poh ON pod.PurchaseOrderID = poh.PurchaseOrderID\nJOIN Vendor v ON poh.VendorID = v.BusinessEntityID\nWHERE v.Name = 'Australia Bike Retailer'\nORDER BY p.ProductID;",
    "7320": "SELECT BusinessEntityID AS VendorID, MAX(StandardPrice - LastReceiptCost) AS BestProfitOnNet\nFROM ProductVendor\nWHERE ProductID = 342",
    "7321": "SELECT \n    eph.Rate AS CurrentPayRate,\n    ((eph.Rate - MIN(eph2.Rate)) / MIN(eph2.Rate)) * 100 AS PercentageIncrement\nFROM \n    EmployeePayHistory eph\nINNER JOIN \n    Employee e ON eph.BusinessEntityID = e.BusinessEntityID\nINNER JOIN \n    Person p ON e.BusinessEntityID = p.BusinessEntityID\nINNER JOIN \n    EmployeePayHistory eph2 ON e.BusinessEntityID = eph2.BusinessEntityID\nWHERE \n    p.FirstName = 'Rob' AND p.LastName = 'Walters'\nGROUP BY \n    eph.BusinessEntityID\nHAVING \n    eph.Rate = MAX(eph.Rate)",
    "7322": "SELECT AVG(2022 - strftime('%Y', HireDate)) AS AvgLengthOfEmployment\nFROM Employee\nJOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID\nJOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID\nWHERE Department.Name = 'Research and Development'\nAND (EmployeeDepartmentHistory.EndDate IS NULL OR EmployeeDepartmentHistory.EndDate > '2022-01-01');",
    "7323": "SELECT AVG(CAST((strftime('%Y', 'now') - strftime('%Y', HireDate)) AS INTEGER)) AS AverageAge\nFROM Employee;",
    "7324": "SELECT \n    (CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS SalesRepresentativesPercentage\nFROM \n    Employee;",
    "7325": "SELECT P.FirstName || ' ' || P.LastName AS Name, PhoneNumber\nFROM Person AS P\nJOIN Employee AS E ON P.BusinessEntityID = E.BusinessEntityID\nJOIN PersonPhone ON P.BusinessEntityID = PersonPhone.BusinessEntityID\nWHERE E.JobTitle = 'Marketing Manager'",
    "7326": "SELECT p.FirstName, p.LastName\nFROM Person p\nJOIN Customer c ON p.BusinessEntityID = c.PersonID\nJOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID\nJOIN CreditCard cc ON soh.CreditCardID = cc.CreditCardID\nWHERE cc.CardType = 'Distinguish'",
    "7327": "SELECT sp.BusinessEntityID, p.FirstName, p.LastName, st.Name AS TerritoryName\nFROM SalesPerson sp\nJOIN Employee e ON sp.BusinessEntityID = e.BusinessEntityID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nJOIN Store s ON sp.BusinessEntityID = s.SalesPersonID\nJOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID\nWHERE s.Name = 'Area Bike Accessories'",
    "7328": "SELECT s.Name AS StoreName, p.FirstName || ' ' || p.LastName AS SalesRepresentativeName\nFROM Store s\nJOIN SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID\nJOIN Employee e ON sp.BusinessEntityID = e.BusinessEntityID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nJOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID\nWHERE st.Name = 'France'",
    "7329": "SELECT P.Name AS ProductName, V.Name AS VendorName\nFROM Product P\nJOIN ProductVendor PV ON P.ProductID = PV.ProductID\nJOIN Vendor V ON PV.BusinessEntityID = V.BusinessEntityID\nWHERE strftime('%Y', P.SellStartDate) = '2013'",
    "7330": "SELECT p.FirstName || ' ' || p.LastName AS SalesRepresentativeName\nFROM SalesPerson sp\nJOIN Employee e ON sp.BusinessEntityID = e.BusinessEntityID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nORDER BY sp.SalesYTD DESC\nLIMIT 1;",
    "7331": "SELECT *\nFROM Product\nWHERE ProductID IN (\n    SELECT ProductID\n    FROM ProductVendor\n    WHERE MinOrderQty = 1000 AND StandardPrice > 17\n)",
    "7332": "SELECT e.JobTitle\nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE p.Gender = 'M' AND e.MaritalStatus = 'M'\nORDER BY e.BirthDate\nLIMIT 1;",
    "7333": "SELECT v.Name AS VendorName\nFROM Vendor v\nJOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID\nJOIN Product p ON pv.ProductID = p.ProductID\nWHERE p.ProductNumber = 'WB-H098';",
    "7334": "SELECT pv.BusinessEntityID, MIN(pv.AverageLeadTime) AS MinAvgLeadTime\nFROM ProductVendor pv\nWHERE pv.ProductID = 348\nGROUP BY pv.BusinessEntityID\nORDER BY MinAvgLeadTime ASC\nLIMIT 1;",
    "7335": "SELECT \n    e.BusinessEntityID, \n    e.NationalIDNumber, \n    e.LoginID, \n    e.JobTitle, \n    e.BirthDate, \n    e.SickLeaveHours\nFROM \n    Employee e\nWHERE \n    e.BirthDate >= '1970-01-01'\nORDER BY \n    e.SickLeaveHours ASC\nLIMIT 1;",
    "7336": "WITH EmployeeAges AS (\n    SELECT \n        e.BusinessEntityID,\n        d.DepartmentID,\n        d.Name AS DepartmentName,\n        (strftime('%Y', 'now') - strftime('%Y', BirthDate)) AS Age\n    FROM Employee e\n    JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\n    JOIN Department d ON edh.DepartmentID = d.DepartmentID\n    WHERE edh.EndDate IS NULL OR edh.EndDate > DATE('now')\n),\nAverageAges AS (\n    SELECT \n        DepartmentID,\n        DepartmentName,\n        AVG(Age) AS AverageAge\n    FROM EmployeeAges\n    GROUP BY DepartmentID\n),\nYoungestDepartment AS (\n    SELECT \n        DepartmentName,\n        MIN(AverageAge) AS YoungestAvgAge\n    FROM AverageAges\n)\nSELECT \n    a.DepartmentName,\n    a.AverageAge\nFROM AverageAges a\nJOIN YoungestDepartment y ON a.AverageAge = y.YoungestAvgAge",
    "7337": "SELECT ProductSubcategoryID FROM ProductSubcategory LIMIT 3;",
    "7338": "SELECT \n    (SalesQuota - SalesYTD) AS Difference\nFROM \n    SalesPerson\nWHERE \n    BusinessEntityID = 288;",
    "7339": "SELECT Name\nFROM SalesTerritory\nORDER BY SalesLastYear ASC\nLIMIT 3;",
    "7340": "SELECT Name\nFROM SalesTerritory\nORDER BY SalesYTD DESC\nLIMIT 3;",
    "7341": "SELECT DISTINCT Category\nFROM SpecialOffer\nWHERE Description LIKE '%resellers%'",
    "7342": "SELECT MAX(DiscountPct) AS HighestPossibleDiscount\nFROM SpecialOffer\nWHERE Type = 'Excess Inventory'",
    "7343": "SELECT \n    (SELECT ActualCost FROM WorkOrderRouting WHERE ProductID = 818) - \n    (SELECT PlannedCost FROM WorkOrderRouting WHERE ProductID = 818) AS Difference\nFROM WorkOrderRouting\nWHERE ProductID = 818\nLIMIT 1;",
    "7344": "SELECT COUNT(*) AS MaterialsToBeAssembledWithDepth2\nFROM BillOfMaterials\nWHERE EndDate IS NULL AND BOMLevel = 2;",
    "7345": "SELECT COUNT(*) AS ConfidentialApprovedDocuments\nFROM Document\nWHERE Status = 2 AND DocumentSummary IS NULL;",
    "7346": "SELECT *\nFROM SalesTaxRate\nWHERE Name LIKE '%+%';",
    "7347": "SELECT TransactionID\nFROM TransactionHistory\nWHERE TransactionType = 'W'\nORDER BY Quantity DESC\nLIMIT 1;",
    "7348": "SELECT Name FROM Vendor WHERE PreferredVendorStatus = 0 LIMIT 3;",
    "7349": "SELECT COUNT(*) AS NonPreferableActiveVendors\nFROM Vendor\nWHERE PreferredVendorStatus = 0 AND ActiveFlag = 1;",
    "7350": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS NumberOfEmployees\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Shift s ON edh.ShiftID = s.ShiftID\nWHERE edh.StartDate >= '2009-01-01'\nAND s.Name = 'Night'",
    "7351": "SELECT Department.Name, COUNT(*) AS PersonnelCount\nFROM EmployeeDepartmentHistory\nJOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID\nJOIN Shift ON EmployeeDepartmentHistory.ShiftID = Shift.ShiftID\nWHERE Shift.Name = 'Night'\nGROUP BY Department.DepartmentID\nORDER BY PersonnelCount DESC\nLIMIT 1;",
    "7352": "SELECT COUNT(*) AS ShipmentsByTruck\nFROM SalesOrderHeader\nWHERE ShipMethodID = (SELECT ShipMethodID FROM ShipMethod WHERE Name = 'XRQ - TRUCK GROUND');",
    "7353": "SELECT sr.Name\nFROM SalesReason sr\nJOIN SalesOrderHeaderSalesReason sohsr ON sr.SalesReasonID = sohsr.SalesReasonID\nWHERE sohsr.SalesOrderID = 43718",
    "7354": "SELECT Name FROM ProductSubcategory\nWHERE ProductCategoryID = (\n    SELECT ProductCategoryID FROM ProductCategory\n    WHERE Name = 'bikes'\n)",
    "7355": "SELECT st.Name AS TerritoryName, MAX(sp.SalesQuota) AS HighestYearlySalesQuota\nFROM SalesPerson sp\nJOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID\nGROUP BY st.Name\nORDER BY HighestYearlySalesQuota DESC\nLIMIT 1;",
    "7356": "SELECT p.Name AS ProductName\nFROM Product p\nJOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID\nJOIN SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID\nWHERE soh.SalesOrderNumber = '43660'",
    "7357": "SELECT p.Name, SUM(sod.OrderQty) AS TotalQuantity\nFROM Product p\nJOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID\nGROUP BY p.ProductID\nORDER BY TotalQuantity DESC\nLIMIT 5;",
    "7358": "SELECT pi.Shelf\nFROM ProductInventory pi\nJOIN Product p ON pi.ProductID = p.ProductID\nWHERE p.Name = 'down tube'",
    "7359": "SELECT a.Name AS AddressType\nFROM \"AddressType\" a\nJOIN \"BusinessEntityAddress\" bea ON a.AddressTypeID = bea.AddressTypeID\nJOIN \"BusinessEntity\" be ON bea.BusinessEntityID = be.BusinessEntityID\nJOIN \"Store\" s ON be.BusinessEntityID = s.BusinessEntityID\nWHERE s.Name = 'Fun Toys and Bikes'",
    "7360": "SELECT p.FirstName, p.LastName, p.EmailPromotion, p.AdditionalContactInfo\nFROM Store s\nJOIN BusinessEntityContact bec ON s.BusinessEntityID = bec.BusinessEntityID\nJOIN Person p ON bec.PersonID = p.BusinessEntityID\nWHERE s.Name = 'Next-Door Bike Store'",
    "7361": "SELECT th.ReferenceOrderID\nFROM TransactionHistory th\nJOIN Product p ON th.ProductID = p.ProductID\nWHERE p.Name = 'Mountain End Caps'",
    "7362": "SELECT AddressLine1 FROM Address \nJOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID \nWHERE BusinessEntityAddress.BusinessEntityID = 12;",
    "7363": "SELECT b.BusinessEntityID, b.rowguid, a.City\nFROM \"BusinessEntity\" AS b\nJOIN \"BusinessEntityAddress\" AS bea ON b.BusinessEntityID = bea.BusinessEntityID\nJOIN \"Address\" AS a ON bea.AddressID = a.AddressID\nWHERE a.City = 'Dallas'\nLIMIT 3",
    "7364": "SELECT sp.Name AS StateName\nFROM \"Address\" a\nJOIN \"StateProvince\" sp ON a.StateProvinceID = sp.StateProvinceID\nWHERE a.City = 'Racine'",
    "7365": "SELECT\n    ABS(\n        (SELECT COUNT(*) FROM ProductModelProductDescriptionCulture WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'Arabic')) * 100.0 / (SELECT COUNT(*) FROM ProductModelProductDescriptionCulture) -\n        (SELECT COUNT(*) FROM ProductModelProductDescriptionCulture WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'Thai')) * 100.0 / (SELECT COUNT(*) FROM ProductModelProductDescriptionCulture)\n    ) AS PercentageDifference",
    "7366": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN sp.SalesQuota > 300000 THEN sp.TerritoryID END) AS REAL) / COUNT(DISTINCT sp.TerritoryID)) * 100 AS Percentage\nFROM \n    SalesPerson sp\nJOIN \n    SalesTerritory st ON sp.TerritoryID = st.TerritoryID\nJOIN \n    CountryRegion cr ON st.CountryRegionCode = cr.CountryRegionCode\nWHERE \n    st.Name = 'Northwest' AND cr.CountryRegionCode = 'US'",
    "7367": "SELECT \n    p.Name AS ProductName, \n    pv.LastReceiptCost, \n    pv.StandardPrice, \n    (pv.StandardPrice - pv.LastReceiptCost) AS NetProfit\nFROM ProductVendor pv\nJOIN Product p ON pv.ProductID = p.ProductID\nWHERE p.Name = 'Crankarm';",
    "7368": "SELECT p.Name \nFROM ProductReview pr \nJOIN Product p ON pr.ProductID = p.ProductID \nWHERE pr.Rating = 4 \nORDER BY pr.ReviewDate DESC \nLIMIT 1;",
    "7369": "SELECT MAX(Rate) AS SecondHighestSalaryPerHour\nFROM (\n  SELECT Rate\n  FROM EmployeePayHistory\n  WHERE PayFrequency = 1\n  ORDER BY Rate DESC\n  LIMIT 2\n) AS SubQuery\nWHERE Rate < (SELECT MAX(Rate) FROM EmployeePayHistory WHERE PayFrequency = 1)",
    "7370": "SELECT COUNT(*) AS ExpiredVistaCardsBefore2007 \nFROM CreditCard \nWHERE CardType = 'Vista' AND ExpYear <= 2006;",
    "7371": "SELECT StartTime FROM Shift WHERE Name = 'Night';",
    "7372": "SELECT P.Style, P.Name, P.Weight\nFROM Product P\nWHERE P.WeightUnitMeasureCode = 'LB' AND P.Style IN (\n    SELECT Style\n    FROM Product\n    WHERE Style IS NOT NULL\n    GROUP BY Style\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n) AND P.Weight IS NOT NULL\nORDER BY P.Weight DESC;",
    "7373": "SELECT \n    ST.Name AS TerritoryName, \n    CR.Name AS CountryName, \n    ABS(ST.SalesLastYear - ST.SalesYTD) AS SalesDifference\nFROM \n    SalesTerritory ST\nJOIN \n    CountryRegion CR ON ST.CountryRegionCode = CR.CountryRegionCode\nORDER BY \n    SalesDifference DESC\nLIMIT 1;",
    "7374": "SELECT Name, ReorderPoint\nFROM Product\nWHERE SizeUnitMeasureCode = 'CM'\nORDER BY CAST(Size AS REAL) DESC\nLIMIT 6;",
    "7375": "SELECT TotalDue\nFROM PurchaseOrderHeader\nORDER BY Freight DESC\nLIMIT 1 OFFSET 2",
    "7376": "SELECT (ListPrice - StandardCost) * 10 AS Profit\nFROM Product\nWHERE Weight = (SELECT MIN(Weight) FROM Product WHERE Weight IS NOT NULL);",
    "7377": "SELECT PurchaseOrderID, MAX(TaxAmt) AS BiggestTaxAmount\nFROM PurchaseOrderHeader;",
    "7378": "SELECT COUNT(*) \nFROM SalesPerson \nWHERE SalesQuota <= 50000;",
    "7379": "SELECT Shift.Name \nFROM Employee \nJOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID \nJOIN Shift ON EmployeeDepartmentHistory.ShiftID = Shift.ShiftID \nWHERE BirthDate < '1969-01-01' \nGROUP BY Employee.BusinessEntityID \nORDER BY BirthDate DESC \nLIMIT 1 OFFSET 5;",
    "7380": "SELECT \n    p.Name AS ProductName, \n    (p.ListPrice - p.StandardCost) AS Profit, \n    pr.Rating\nFROM \n    Product p\nLEFT JOIN \n    ProductReview pr ON p.ProductID = pr.ProductID\nWHERE \n    p.DaysToManufacture = (SELECT MIN(DaysToManufacture) FROM Product)\nORDER BY \n    Profit DESC, \n    pr.Rating DESC\nLIMIT 1;",
    "7381": "SELECT P.FirstName || ' ' || IFNULL(P.MiddleName || ' ', '') || P.LastName AS FullName\nFROM SalesPerson SP\nJOIN Employee E ON SP.BusinessEntityID = E.BusinessEntityID\nJOIN Person P ON E.BusinessEntityID = P.BusinessEntityID\nWHERE SP.Bonus < 1000;",
    "7382": "SELECT ehd.EndDate\nFROM Employee e\nJOIN EmployeeDepartmentHistory ehd ON e.BusinessEntityID = ehd.BusinessEntityID\nJOIN Department d ON ehd.DepartmentID = d.DepartmentID\nWHERE e.JobTitle = 'Senior Tool Designer'\nAND (strftime('%Y', e.HireDate) - strftime('%Y', e.BirthDate)) = 33\nAND d.Name = 'Engineering'",
    "7383": "SELECT SUM(ph.TotalDue) AS TotalDueAmount\nFROM PurchaseOrderHeader ph\nJOIN Vendor v ON ph.VendorID = v.BusinessEntityID\nWHERE v.CreditRating = 4 AND v.PreferredVendorStatus = 0;",
    "7384": "SELECT d.Name AS DepartmentName, COUNT(*) AS NightShiftCount\nFROM \"Department\" d\nJOIN \"EmployeeDepartmentHistory\" edh ON d.DepartmentID = edh.DepartmentID\nJOIN \"Shift\" s ON edh.ShiftID = s.ShiftID\nWHERE s.Name = 'Night'\nGROUP BY d.Name\nORDER BY NightShiftCount DESC\nLIMIT 1;",
    "7385": "SELECT \n    (p.ListPrice - p.StandardCost) * 2 AS Profit\nFROM \n    Product p\nJOIN \n    ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID\nWHERE \n    p.Class = 'H' \n    AND p.Color = 'Black' \n    AND ps.Name = 'Road Bikes' \n    AND p.Size = '58';",
    "7386": "SELECT FirstName || ' ' || COALESCE(MiddleName || ' ', '') || LastName AS FullName\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE MaritalStatus = 'M' AND Gender = 'M' AND JobTitle = 'Production Technician'\nORDER BY BirthDate DESC\nLIMIT 10;",
    "7387": "SELECT v.CreditRating\nFROM ProductVendor pv\nJOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID\nWHERE pv.AverageLeadTime = 60\nORDER BY (pv.LastReceiptCost - pv.StandardPrice) DESC\nLIMIT 1;",
    "7388": "SELECT \n    Vendor.Name AS VendorName, \n    ProductVendor.ProductID, \n    (ProductVendor.LastReceiptCost - ProductVendor.StandardPrice) AS NetProfit\nFROM \n    ProductVendor\nJOIN \n    Vendor ON ProductVendor.BusinessEntityID = Vendor.BusinessEntityID\nWHERE \n    ProductVendor.MaxOrderQty = 200;",
    "7389": "SELECT \n    P.FirstName || ' ' || P.LastName AS FullName\nFROM \n    PurchaseOrderHeader POH\nJOIN \n    Employee E ON POH.EmployeeID = E.BusinessEntityID\nJOIN \n    Person P ON E.BusinessEntityID = P.BusinessEntityID\nWHERE \n    POH.Status = 3 AND P.PersonType = 'EM'\nGROUP BY \n    P.BusinessEntityID\nORDER BY \n    COUNT(POH.PurchaseOrderID) DESC\nLIMIT 1;",
    "7390": "SELECT Name \nFROM Vendor \nJOIN ProductVendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID \nORDER BY ProductVendor.MinOrderQty ASC \nLIMIT 1 OFFSET 1;",
    "7391": "SELECT MIN(MinOrderQty) AS MinimumOrderQuantity\nFROM ProductVendor\nJOIN Vendor ON ProductVendor.BusinessEntityID = Vendor.BusinessEntityID\nWHERE Vendor.ActiveFlag = 0;",
    "7392": "SELECT \n    FirstName || ' ' || COALESCE(MiddleName || ' ', '') || LastName AS FullName,\n    (strftime('%Y', HireDate) - strftime('%Y', BirthDate)) AS AgeAtHire\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE VacationHours <= 10\nORDER BY AgeAtHire DESC\nLIMIT 1;",
    "7393": "SELECT DISTINCT Person.PersonType\nFROM Employee\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE Employee.Gender = 'F' \nAND Employee.MaritalStatus = 'S' \nAND Employee.HireDate BETWEEN '2008-01-01' AND '2008-12-31';",
    "7394": "SELECT (p.ListPrice - p.StandardCost) AS Profit\nFROM ProductReview pr\nJOIN Product p ON pr.ProductID = p.ProductID\nWHERE pr.ReviewerName = 'David' AND pr.Rating = 4\nORDER BY pr.ReviewDate DESC\nLIMIT 1;",
    "7395": "SELECT sp.Name AS StateProvinceName, st.Group AS GeographicArea\nFROM SalesTaxRate str\nJOIN StateProvince sp ON str.StateProvinceID = sp.StateProvinceID\nJOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID\nORDER BY str.TaxRate ASC\nLIMIT 1 OFFSET 1",
    "7396": "SELECT AVG(p.ListPrice - p.StandardCost) AS AverageProfit, COUNT(DISTINCT p.Size) AS VarietyOfSizes, GROUP_CONCAT(DISTINCT p.Color) AS AvailableColors\nFROM Product p\nJOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID\nJOIN ProductModel pm ON p.ProductModelID = pm.ProductModelID\nWHERE p.Class = 'L' AND p.Style = 'U' AND ps.Name = 'Road Frame'",
    "7397": "SELECT DiscountPct \nFROM SpecialOffer \nWHERE Description = 'LL Road Frame Sale';",
    "7398": "SELECT COUNT(*) AS ExcessInventoryDiscountCount\nFROM SpecialOffer\nWHERE Type = 'Excess Inventory';",
    "7399": "SELECT Description, MAX(DiscountPct) AS HighestDiscountPercentage\nFROM SpecialOffer\nWHERE Type = 'Seasonal'",
    "7400": "SELECT Description, DiscountPct\nFROM SpecialOffer\nWHERE Category = 'Reseller'\nORDER BY DiscountPct DESC\nLIMIT 3;",
    "7401": "SELECT s.Demographics\nFROM Store s\nJOIN BusinessEntity b ON s.BusinessEntityID = b.BusinessEntityID\nWHERE s.Name = 'Valley Bicycle Specialists';",
    "7402": "SELECT COUNT(*) AS SalableInHouseProducts\nFROM Product\nWHERE MakeFlag = 1 AND FinishedGoodsFlag = 1;",
    "7403": "SELECT SafetyStockLevel \nFROM Product \nWHERE Name = 'Chainring Bolts';",
    "7404": "SELECT Name, MAX(StandardCost) AS HighestStandardCost\nFROM Product;",
    "7405": "SELECT PersonType \nFROM Person \nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID \nWHERE FirstName = 'David' AND LastName = 'Bradley'",
    "7406": "SELECT COUNT(*) \nFROM Employee e\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE p.PersonType = 'SC' AND p.Title = 'Mr.';",
    "7407": "SELECT a.AddressLine1, a.AddressLine2, a.City, a.StateProvinceID, a.PostalCode\nFROM Store s\nJOIN BusinessEntityAddress bea ON s.BusinessEntityID = bea.BusinessEntityID\nJOIN Address a ON bea.AddressID = a.AddressID\nWHERE s.Name = 'Valley Bicycle Specialists'",
    "7408": "SELECT EmailAddress.EmailAddress\nFROM Person\nJOIN EmailAddress ON Person.BusinessEntityID = EmailAddress.BusinessEntityID\nWHERE Person.FirstName = 'David' AND Person.LastName = 'Bradley'",
    "7409": "SELECT PhoneNumber \nFROM PersonPhone \nJOIN Person ON Person.BusinessEntityID = PersonPhone.BusinessEntityID \nJOIN Store ON Store.BusinessEntityID = Person.BusinessEntityID \nWHERE Person.PersonType = 'SC';",
    "7410": "SELECT PasswordHash FROM Password\nJOIN Person ON Password.BusinessEntityID = Person.BusinessEntityID\nWHERE FirstName = 'David' AND LastName = 'Bradley'",
    "7411": "SELECT EmailAddress.EmailAddress\nFROM Person\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nJOIN EmailAddress ON Person.BusinessEntityID = EmailAddress.BusinessEntityID\nWHERE Person.EmailPromotion = 2;",
    "7412": "SELECT CreditCard.CardNumber\nFROM Person\nJOIN Customer ON Person.BusinessEntityID = Customer.PersonID\nJOIN SalesOrderHeader ON Customer.CustomerID = SalesOrderHeader.CustomerID\nJOIN CreditCard ON SalesOrderHeader.CreditCardID = CreditCard.CreditCardID\nWHERE Person.FirstName = 'David' AND Person.LastName = 'Bradley';",
    "7413": "SELECT ExpYear FROM CreditCard\nJOIN SalesOrderHeader ON CreditCard.CreditCardID = SalesOrderHeader.CreditCardID\nJOIN Customer ON SalesOrderHeader.CustomerID = Customer.CustomerID\nJOIN Person ON Customer.PersonID = Person.BusinessEntityID\nWHERE Person.FirstName = 'David' AND Person.LastName = 'Bradley'",
    "7414": "SELECT p.FirstName, p.LastName\nFROM Person p\nJOIN Customer c ON p.BusinessEntityID = c.PersonID\nJOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID\nJOIN CreditCard cc ON soh.CreditCardID = cc.CreditCardID\nWHERE p.PersonType = 'SC' AND cc.ExpYear = 2007;",
    "7415": "SELECT COUNT(DISTINCT sc.BusinessEntityID) AS VistaCardHolders\nFROM Person sc\nJOIN BusinessEntityContact bec ON sc.BusinessEntityID = bec.PersonID\nJOIN ContactType ct ON bec.ContactTypeID = ct.ContactTypeID\nJOIN Customer c ON sc.BusinessEntityID = c.PersonID\nJOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID\nJOIN CreditCard cc ON soh.CreditCardID = cc.CreditCardID\nWHERE sc.PersonType = 'SC' AND cc.CardType = 'Vista'",
    "7416": "SELECT COUNT(DISTINCT DepartmentID) AS NumberOfDepartments\nFROM EmployeeDepartmentHistory\nJOIN Employee ON EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID\nJOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID\nWHERE FirstName = 'David' AND LastName = 'Bradley'",
    "7417": "SELECT d.Name \nFROM Department d \nJOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID \nJOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID \nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID \nWHERE p.FirstName = 'David' AND p.LastName = 'Bradley';",
    "7418": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS NumberOfPeople\nFROM EmployeeDepartmentHistory e\nJOIN Department d ON e.DepartmentID = d.DepartmentID\nWHERE d.Name = 'Engineering'\nAND e.StartDate < '2010-01-01'\nAND (e.EndDate > '2009-01-01' OR e.EndDate IS NULL);",
    "7419": "SELECT p.FirstName, p.LastName\nFROM EmployeeDepartmentHistory edh\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nJOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE d.Name = 'Engineering'\nORDER BY edh.StartDate ASC\nLIMIT 1;",
    "7420": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS StoreContactsCount\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nJOIN BusinessEntityContact bec ON e.BusinessEntityID = bec.BusinessEntityID\nJOIN ContactType ct ON bec.ContactTypeID = ct.ContactTypeID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE d.GroupName = 'Manufacturing'\nAND p.PersonType = 'SC'\nAND edh.StartDate < '2008-01-01'\nAND (edh.EndDate > '2007-01-01' OR edh.EndDate IS NULL)\nAND ct.Name = 'Store Contact'",
    "7421": "SELECT CreditCard.CardNumber\nFROM CreditCard\nJOIN SalesOrderHeader ON CreditCard.CreditCardID = SalesOrderHeader.CreditCardID\nJOIN Customer ON SalesOrderHeader.CustomerID = Customer.CustomerID\nJOIN Person ON Customer.PersonID = Person.BusinessEntityID\nJOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID\nJOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID\nJOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID\nWHERE Department.Name = 'Finance'\nAND EmployeeDepartmentHistory.EndDate IS NOT NULL",
    "7422": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS ExpiredCreditCardsIn2007\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nJOIN BusinessEntityAddress bea ON p.BusinessEntityID = bea.BusinessEntityID\nJOIN Address a ON bea.AddressID = a.AddressID\nJOIN StateProvince sp ON a.StateProvinceID = sp.StateProvinceID\nJOIN CountryRegion cr ON sp.CountryRegionCode = cr.CountryRegionCode\nJOIN SalesOrderHeader soh ON p.BusinessEntityID = soh.SalesPersonID\nJOIN CreditCard cc ON soh.CreditCardID = cc.CreditCardID\nWHERE d.Name = 'Engineering'\nAND edh.StartDate <= '2007-12-31' AND (edh.EndDate >= '2007-01-01' OR edh.EndDate IS NULL)\nAND cc.ExpYear = 2007;",
    "7423": "SELECT EmailAddress.EmailAddress\nFROM (\n    SELECT BusinessEntityID, COUNT(DepartmentID) AS DeptChanges\n    FROM EmployeeDepartmentHistory\n    GROUP BY BusinessEntityID\n    ORDER BY DeptChanges DESC\n    LIMIT 1\n) AS MostDeptChanges\nJOIN EmailAddress ON EmailAddress.BusinessEntityID = MostDeptChanges.BusinessEntityID",
    "7424": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS NumberOfEmployees\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nJOIN Person p ON e.BusinessEntityID = p.BusinessEntityID\nWHERE p.EmailPromotion = 0 AND d.Name = 'Engineering'",
    "7425": "SELECT COUNT(DISTINCT e.BusinessEntityID) AS NumberOfEmployees\nFROM Employee e\nJOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nWHERE d.Name = 'Quality Assurance Group'\nAND strftime('%Y', edh.StartDate) = '2007'",
    "7426": "SELECT p.Name \nFROM Product p \nJOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID \nJOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID \nWHERE so.Description = 'LL Road Frame Sale';",
    "7427": "SELECT COUNT(*) AS NumberOfProductsOnSale\nFROM SpecialOffer SO\nJOIN SpecialOfferProduct SOP ON SO.SpecialOfferID = SOP.SpecialOfferID\nWHERE SO.Description = 'LL Road Frame Sale';",
    "7428": "SELECT EXISTS (\n    SELECT 1 \n    FROM Product \n    WHERE Name = 'Chainring Bolts' \n    AND SellStartDate IS NOT NULL\n) AS HasBeenOnSale;",
    "7429": "SELECT COUNT(DISTINCT p.ProductID) AS ClothingProductsOnSale\nFROM Product p\nJOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID\nJOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID\nJOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID\nJOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID\nWHERE pc.Name = 'Clothing' AND so.Description = 'LL Road Frame Sale'",
    "7430": "SELECT P.Name\nFROM Product AS P\nJOIN ProductSubcategory AS PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID\nJOIN ProductCategory AS PC ON PS.ProductCategoryID = PC.ProductCategoryID\nWHERE PC.Name = 'Clothing' AND P.MakeFlag = 1 AND P.FinishedGoodsFlag = 1;",
    "7431": "SELECT AVG(julianday(EndDate) - julianday(StartDate)) / 365 AS AverageStayYears\nFROM EmployeeDepartmentHistory edh\nJOIN Department d ON edh.DepartmentID = d.DepartmentID\nWHERE d.Name = 'Engineering' AND edh.EndDate IS NOT NULL;",
    "7432": "SELECT AVG(Rate) AS AveragePayRate\nFROM EmployeePayHistory\nWHERE BusinessEntityID IN (\n    SELECT BusinessEntityID\n    FROM EmployeeDepartmentHistory\n    WHERE DepartmentID = (\n        SELECT DepartmentID\n        FROM Department\n        WHERE Name = 'Engineering'\n    )\n    AND StartDate < '2008-01-01'\n    AND (EndDate > '2007-01-01' OR EndDate IS NULL)\n)",
    "7433": "SELECT \n    ((MAX(p.ListPrice) - MIN(p.ListPrice)) / MIN(p.ListPrice)) * 100 AS PercentageDifference\nFROM \n    Product p\nJOIN \n    ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID\nJOIN \n    ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID\nWHERE \n    pc.Name = 'Clothing';",
    "7434": "SELECT AVG(ListPrice - StandardCost) AS AverageProfit\nFROM Product\nJOIN ProductSubcategory ON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID\nJOIN ProductCategory ON ProductSubcategory.ProductCategoryID = ProductCategory.ProductCategoryID\nWHERE ProductCategory.Name = 'Clothing';",
    "7435": "SELECT Name, MIN(StandardCost) AS MinCost\nFROM Product\nWHERE ProductID IN (\n    SELECT ProductID\n    FROM ProductCostHistory\n    WHERE StartDate <= '2013-12-31' AND (EndDate >= '2013-01-01' OR EndDate IS NULL)\n)",
    "7436": "SELECT Name FROM Product WHERE Color = 'yellow';",
    "7437": "SELECT p.BusinessEntityID\nFROM Person p\nWHERE p.FirstName = 'Hung-Fu' AND p.LastName = 'Ting';",
    "7438": "SELECT PhoneNumber \nFROM PersonPhone \nWHERE BusinessEntityID = 12597;",
    "7439": "SELECT ListPrice AS price FROM Product WHERE ProductID = 912;",
    "7440": "SELECT * FROM WorkOrderRouting WHERE PlannedCost != ActualCost;",
    "7441": "SELECT ThumbnailPhotoFileName FROM ProductPhoto\nJOIN ProductProductPhoto ON ProductPhoto.ProductPhotoID = ProductProductPhoto.ProductPhotoID\nWHERE ProductProductPhoto.ProductID = 979;",
    "7442": "SELECT Name FROM Product WHERE ListPrice > 1000;",
    "7443": "SELECT Name, MAX(ListPrice - StandardCost) AS MaxProfit\nFROM Product;",
    "7444": "SELECT p.Name \nFROM Product p \nJOIN ProductInventory pi ON p.ProductID = pi.ProductID \nWHERE pi.LocationID = 1 AND pi.Shelf = 'L' AND pi.Bin = 6;",
    "7445": "SELECT Location.Name AS LocationName\nFROM WorkOrder\nJOIN WorkOrderRouting ON WorkOrder.WorkOrderID = WorkOrderRouting.WorkOrderID\nJOIN Location ON WorkOrderRouting.LocationID = Location.LocationID\nWHERE WorkOrder.WorkOrderID = 35493",
    "7446": "SELECT p.ProductID, p.Name\nFROM Product p\nJOIN ProductProductPhoto ppp ON p.ProductID = ppp.ProductID\nJOIN ProductPhoto pp ON ppp.ProductPhotoID = pp.ProductPhotoID\nWHERE pp.LargePhoto IS NOT NULL;",
    "7447": "SELECT p.Name AS ProductName\nFROM Product p\nJOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID\nJOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID\nWHERE ps.Name = 'Socks'",
    "7448": "SELECT CAST(100 / ListPrice AS INTEGER) AS NumberOfCableLocks\nFROM Product\nWHERE Name = 'Cable Lock';",
    "7449": "SELECT ScrapReason.Name \nFROM WorkOrder \nJOIN ScrapReason ON WorkOrder.ScrapReasonID = ScrapReason.ScrapReasonID \nWHERE WorkOrder.WorkOrderID = 57788;",
    "7450": "SELECT StandardCost AS cost\nFROM Product\nWHERE Name = 'Sports';",
    "7451": "SELECT Quantity FROM ProductInventory \nJOIN Location ON ProductInventory.LocationID = Location.LocationID \nWHERE ProductID = 476 AND Location.Name = 'Metal Storage';",
    "7452": "SELECT *\nFROM Product\nWHERE StandardCost < (SELECT AVG(StandardCost) FROM Product);",
    "7453": "SELECT \n    ProductID, \n    ((ListPrice - StandardCost) / StandardCost) * 100 AS ProfitPercentage\nFROM \n    Product\nWHERE \n    ProductID = 858;",
    "7454": "SELECT COUNT(DISTINCT pp.ProductID) AS NumberOfProductsWithThumbnail\nFROM ProductProductPhoto pp\nWHERE pp.ProductPhotoID != 1;",
    "7455": "SELECT \n    WorkOrderID, \n    (julianday(ActualEndDate) - julianday(ActualStartDate)) AS DaysToComplete\nFROM \n    WorkOrderRouting\nWHERE \n    WorkOrderID = 425;",
    "7456": "SELECT Name, MAX(ListPrice) AS HighestPrice\nFROM Product\nWHERE ProductID IN (\n    SELECT ProductID\n    FROM SalesOrderDetail\n    JOIN SalesOrderHeader ON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID\n    WHERE strftime('%Y', OrderDate) = '2012'\n)",
    "7457": "SELECT StandardCost AS cost\nFROM Product\nWHERE ProductID = 847;",
    "7458": "SELECT OrganizationLevel FROM Employee WHERE JobTitle = 'Human Resources Manager';",
    "7459": "SELECT COUNT(*) AS LateWorkOrders\nFROM WorkOrder\nWHERE EndDate > DueDate;",
    "7460": "SELECT StandardCost AS cost, ProductNumber\nFROM Product\nWHERE ProductID = 888;",
    "7461": "SELECT COUNT(*) AS NumberOfProducts\nFROM Product\nJOIN ProductProductPhoto ON Product.ProductID = ProductProductPhoto.ProductID\nJOIN ProductPhoto ON ProductProductPhoto.ProductPhotoID = ProductPhoto.ProductPhotoID\nWHERE ProductPhoto.ThumbnailPhotoFileName = 'roadster_black_small.gif';",
    "7462": "SELECT pi.LocationID, pi.Shelf AS compartments, pi.Bin AS containers\nFROM ProductInventory pi\nJOIN Product p ON pi.ProductID = p.ProductID\nWHERE p.Name = 'Lock Ring'",
    "7463": "SELECT pc.Name AS CategoryName\nFROM ProductCategory pc\nJOIN ProductSubcategory psc ON pc.ProductCategoryID = psc.ProductCategoryID\nWHERE psc.Name = 'Road Frames'",
    "7464": "SELECT WorkOrder.*\nFROM WorkOrder\nJOIN ScrapReason ON WorkOrder.ScrapReasonID = ScrapReason.ScrapReasonID\nWHERE ScrapReason.Name = 'handling damage'",
    "7465": "SELECT \n    (ListPrice - StandardCost) AS Profit\nFROM \n    Product\nWHERE \n    ProductID = 792;",
    "7466": "SELECT p.FirstName, p.LastName\nFROM Person p\nJOIN EmailAddress e ON p.BusinessEntityID = e.BusinessEntityID\nWHERE e.EmailAddress = 'regina7@adventure-works.com'",
    "7467": "SELECT Location.Name AS LocationName, ProductInventory.Shelf, ProductInventory.Bin, ProductInventory.Quantity\nFROM ProductInventory\nJOIN Location ON ProductInventory.LocationID = Location.LocationID\nWHERE ProductInventory.ProductID = 810;",
    "7468": "SELECT p.Name \nFROM Product p \nJOIN WorkOrder wo ON p.ProductID = wo.ProductID \nWHERE wo.WorkOrderID = 2540;",
    "7469": "SELECT ListPrice AS Price\nFROM Product\nWHERE Name = 'AWC Logo Cap';",
    "7470": "SELECT WorkOrder.*\nFROM WorkOrder\nJOIN Product ON WorkOrder.ProductID = Product.ProductID\nWHERE Product.Name = 'Down Tube'",
    "7471": "SELECT AVG((ListPrice - StandardCost) / StandardCost) * 100 AS AverageProfitPercentage\nFROM Product\nWHERE StandardCost > 0;",
    "7472": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM WorkOrder \n     JOIN Product ON WorkOrder.ProductID = Product.ProductID \n     WHERE Product.Name = 'Subassembly') / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM WorkOrder) AS proportion;",
    "7473": "SELECT COUNT(*) AS object_samples_in_image_1\nFROM IMG_OBJ\nWHERE IMG_ID = 1",
    "7474": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ\nGROUP BY IMG_ID\nHAVING COUNT(OBJ_SAMPLE_ID) > 20",
    "7475": "SELECT IMG_ID\nFROM IMG_OBJ\nGROUP BY IMG_ID\nORDER BY COUNT(OBJ_SAMPLE_ID) DESC\nLIMIT 1",
    "7476": "SELECT OBJ_SAMPLE_ID\nFROM IMG_OBJ\nWHERE IMG_ID = 1 AND OBJ_CLASS_ID = 297",
    "7477": "SELECT COUNT(*) AS self_relations_count\nFROM IMG_REL\nWHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;",
    "7478": "SELECT X, Y, W, H \nFROM IMG_OBJ \nWHERE IMG_ID = 5 \nAND OBJ_SAMPLE_ID IN (\n    SELECT OBJ1_SAMPLE_ID \n    FROM IMG_REL \n    WHERE IMG_ID = 5 \n    AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID\n)",
    "7479": "SELECT COUNT(*) \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE IMG_OBJ.IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 'man'",
    "7480": "SELECT COUNT(DISTINCT IMG_OBJ.IMG_ID)\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'man'",
    "7481": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 1",
    "7482": "SELECT PRED_CLASS\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nWHERE IMG_ID = 1 AND OBJ1_SAMPLE_ID = 8 AND OBJ2_SAMPLE_ID = 4",
    "7483": "SELECT COUNT(*) \nFROM IMG_REL \nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID \nWHERE IMG_REL.IMG_ID = 1 AND PRED_CLASSES.PRED_CLASS = 'parked on';",
    "7484": "SELECT PRED_CLASSES.PRED_CLASS\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nWHERE IMG_REL.IMG_ID = 1\nAND (IMG_REL.OBJ1_SAMPLE_ID = 14 OR IMG_REL.OBJ2_SAMPLE_ID = 14)",
    "7485": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_REL \nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID \nWHERE PRED_CLASSES.PRED_CLASS = 'parked on' AND OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID;",
    "7486": "SELECT IMG_ID\nFROM IMG_REL\nWHERE PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on')\nGROUP BY IMG_ID\nHAVING COUNT(DISTINCT OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) > 2",
    "7487": "SELECT PRED_CLASS\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nWHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID",
    "7488": "SELECT \n    IO1.X AS OBJ1_X, \n    IO1.Y AS OBJ1_Y, \n    IO1.W AS OBJ1_W, \n    IO1.H AS OBJ1_H, \n    IO2.X AS OBJ2_X, \n    IO2.Y AS OBJ2_Y, \n    IO2.W AS OBJ2_W, \n    IO2.H AS OBJ2_H\nFROM \n    IMG_REL IR\nJOIN \n    PRED_CLASSES PC ON IR.PRED_CLASS_ID = PC.PRED_CLASS_ID\nJOIN \n    IMG_OBJ IO1 ON IR.IMG_ID = IO1.IMG_ID AND IR.OBJ1_SAMPLE_ID = IO1.OBJ_SAMPLE_ID\nJOIN \n    IMG_OBJ IO2 ON IR.IMG_ID = IO2.IMG_ID AND IR.OBJ2_SAMPLE_ID = IO2.OBJ_SAMPLE_ID\nWHERE \n    PC.PRED_CLASS = 'by' AND IR.IMG_ID = 1",
    "7489": "SELECT AVG(ABS(o1.Y - o2.Y)) AS avg_y_difference\nFROM IMG_REL ir\nJOIN IMG_OBJ o1 ON ir.IMG_ID = o1.IMG_ID AND ir.OBJ1_SAMPLE_ID = o1.OBJ_SAMPLE_ID\nJOIN IMG_OBJ o2 ON ir.IMG_ID = o2.IMG_ID AND ir.OBJ2_SAMPLE_ID = o2.OBJ_SAMPLE_ID\nJOIN PRED_CLASSES pc ON ir.PRED_CLASS_ID = pc.PRED_CLASS_ID\nWHERE ir.IMG_ID = 1 AND pc.PRED_CLASS = 'parked on' AND o1.OBJ_SAMPLE_ID != o2.OBJ_SAMPLE_ID",
    "7490": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM IMG_OBJ \n     JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \n     WHERE OBJ_CLASSES.OBJ_CLASS = 'man' AND IMG_OBJ.IMG_ID = 1) / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM IMG_OBJ \n     WHERE IMG_ID = 1) \n    AS percentage;",
    "7491": "SELECT COUNT(*) AS total_attribute_classes FROM ATT_CLASSES",
    "7492": "SELECT COUNT(*) FROM OBJ_CLASSES",
    "7493": "SELECT COUNT(*) FROM PRED_CLASSES",
    "7494": "SELECT X, Y, W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASS = 'kite' AND IMG_ID = 2324765",
    "7495": "SELECT COUNT(*) AS white_objects_count\nFROM IMG_OBJ_ATT IOA\nJOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID\nWHERE AC.ATT_CLASS = 'white' AND IOA.IMG_ID = 2347915",
    "7496": "SELECT COUNT(*) AS NumberOfSamples\nFROM IMG_OBJ_ATT IOA\nJOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID\nWHERE IOA.IMG_ID = 2377985 AND AC.ATT_CLASS = 'electrical'",
    "7497": "SELECT PRED_CLASSES.PRED_CLASS\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nWHERE IMG_REL.IMG_ID = 2345511\nAND IMG_REL.OBJ1_SAMPLE_ID = 12\nAND IMG_REL.OBJ2_SAMPLE_ID = 8",
    "7498": "SELECT OBJ2_SAMPLE_ID \nFROM IMG_REL \nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID \nWHERE PRED_CLASSES.PRED_CLASS = 'lying on' \nAND IMG_ID = 2345524 \nAND OBJ1_SAMPLE_ID = 1",
    "7499": "SELECT COUNT(*) AS food_samples_in_image_6\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'food' AND IMG_OBJ.IMG_ID = 6",
    "7500": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASSES.OBJ_CLASS = 'suit';",
    "7501": "SELECT PC.PRED_CLASS\nFROM IMG_REL IR\nJOIN PRED_CLASSES PC ON IR.PRED_CLASS_ID = PC.PRED_CLASS_ID\nJOIN IMG_OBJ IO1 ON IR.IMG_ID = IO1.IMG_ID AND IR.OBJ1_SAMPLE_ID = IO1.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES OC1 ON IO1.OBJ_CLASS_ID = OC1.OBJ_CLASS_ID\nJOIN IMG_OBJ IO2 ON IR.IMG_ID = IO2.IMG_ID AND IR.OBJ2_SAMPLE_ID = IO2.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES OC2 ON IO2.OBJ_CLASS_ID = OC2.OBJ_CLASS_ID\nWHERE IR.IMG_ID = 2345528\nAND OC1.OBJ_CLASS = 'feathers'\nAND OC2.OBJ_CLASS = 'onion'",
    "7502": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 2377988 AND OBJ_CLASSES.OBJ_CLASS = 'weeds'",
    "7503": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE ATT_CLASSES.ATT_CLASS = 'blurry' AND IMG_OBJ_ATT.IMG_ID = 2377993",
    "7504": "SELECT COUNT(*) AS wall_samples_in_image\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'wall' AND IMG_OBJ.IMG_ID = 2353079",
    "7505": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 2320341 AND IMG_OBJ.OBJ_SAMPLE_ID = 10",
    "7506": "SELECT \n    (SELECT COUNT(DISTINCT IMG_ID) \n     FROM IMG_OBJ \n     JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \n     WHERE OBJ_CLASS = 'broccoli') \n    /\n    (SELECT COUNT(DISTINCT IMG_ID) \n     FROM IMG_OBJ \n     JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \n     WHERE OBJ_CLASS = 'tomato') AS times_broccoli_more_than_tomato",
    "7507": "SELECT COUNT(DISTINCT IMG_ID) \nFROM (\n    SELECT IMG_ID\n    FROM IMG_OBJ_ATT\n    GROUP BY IMG_ID\n    HAVING COUNT(DISTINCT ATT_CLASS_ID) >= 25\n)",
    "7508": "SELECT DISTINCT IMG_ID\nFROM IMG_REL\nWHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID",
    "7509": "SELECT COUNT(IMG_ID) AS object_count\nFROM IMG_OBJ_ATT\nWHERE ATT_CLASS_ID = (\n    SELECT ATT_CLASS_ID\n    FROM IMG_OBJ_ATT\n    GROUP BY ATT_CLASS_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
    "7510": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc.')",
    "7511": "SELECT DISTINCT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ_ATT\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ_ATT.ATT_CLASS_ID = YOUR_ATT_CLASS_ID_FOR_VERY_LARGE_BIKE;",
    "7512": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'",
    "7513": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE IMG_OBJ_ATT.IMG_ID = 8",
    "7514": "SELECT X, Y, W, H \nFROM IMG_OBJ \nWHERE IMG_ID = 4 \nAND OBJ_SAMPLE_ID IN (\n    SELECT OBJ1_SAMPLE_ID \n    FROM IMG_REL \n    WHERE IMG_ID = 4 AND PRED_CLASS_ID = 144\n    UNION \n    SELECT OBJ2_SAMPLE_ID \n    FROM IMG_REL \n    WHERE IMG_ID = 4 AND PRED_CLASS_ID = 144\n)",
    "7515": "SELECT COUNT(DISTINCT IMG_ID) \nFROM (\n    SELECT i.IMG_ID\n    FROM IMG_OBJ_ATT ioa\n    JOIN ATT_CLASSES ac ON ioa.ATT_CLASS_ID = ac.ATT_CLASS_ID\n    WHERE ac.ATT_CLASS = 'black'\n    GROUP BY i.IMG_ID\n    HAVING COUNT(DISTINCT ioa.ATT_CLASS_ID) >= 5\n)",
    "7516": "SELECT IR.PRED_CLASS_ID\nFROM IMG_REL IR\nJOIN IMG_OBJ IO1 ON IR.IMG_ID = IO1.IMG_ID AND IR.OBJ1_SAMPLE_ID = IO1.OBJ_SAMPLE_ID\nJOIN IMG_OBJ IO2 ON IR.IMG_ID = IO2.IMG_ID AND IR.OBJ2_SAMPLE_ID = IO2.OBJ_SAMPLE_ID\nORDER BY GREATEST(IO1.H, IO2.H) DESC\nLIMIT 1",
    "7517": "SELECT IMG_ID\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE ATT_CLASS = 'white'\nGROUP BY IMG_ID\nORDER BY COUNT(IMG_OBJ_ATT.ATT_CLASS_ID) DESC\nLIMIT 1",
    "7518": "SELECT IMG_OBJ.IMG_ID, IMG_OBJ.X, IMG_OBJ.Y\nFROM IMG_REL\nJOIN IMG_OBJ ON IMG_REL.IMG_ID = IMG_OBJ.IMG_ID\nWHERE IMG_REL.PRED_CLASS_ID = 98\nAND (IMG_OBJ.OBJ_SAMPLE_ID = IMG_REL.OBJ1_SAMPLE_ID OR IMG_OBJ.OBJ_SAMPLE_ID = IMG_REL.OBJ2_SAMPLE_ID)",
    "7519": "SELECT COUNT(DISTINCT PRED_CLASS_ID) AS has_captions_count\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nWHERE PRED_CLASSES.PRED_CLASS = 'has' AND IMG_REL.IMG_ID = 3050",
    "7520": "SELECT DISTINCT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nINNER JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE X = 0 AND Y = 0",
    "7521": "SELECT DISTINCT PRED_CLASS\nFROM PRED_CLASSES\nJOIN IMG_REL ON PRED_CLASSES.PRED_CLASS_ID = IMG_REL.PRED_CLASS_ID\nWHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID",
    "7522": "SELECT X, Y, W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE IMG_ID = 2222 AND OBJ_CLASS = 'feathers'",
    "7523": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_REL \nWHERE PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'on') \nAND IMG_ID IN (\n    SELECT IMG_ID \n    FROM IMG_REL \n    GROUP BY IMG_ID, OBJ1_SAMPLE_ID \n    HAVING COUNT(DISTINCT OBJ2_SAMPLE_ID) > 1\n)",
    "7524": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE X = 0 AND Y = 0 AND W = 135 AND H = 212",
    "7525": "SELECT W, H FROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_ID = 3 AND OBJ_CLASS = 'keyboard'",
    "7526": "SELECT X, Y, W, H\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASS = 'folk' AND IMG_ID = 6",
    "7527": "SELECT X, Y, W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASSES.OBJ_CLASS = 'onion' AND IMG_OBJ.IMG_ID = 285930",
    "7528": "SELECT COUNT(*) AS Total_Objects, GROUP_CONCAT(OBJ_CLASS) AS Identified_Objects\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_ID = 72 AND X = 341 AND Y = 27 AND W = 42 AND H = 51",
    "7529": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE IMG_OBJ_ATT.IMG_ID = 5\nGROUP BY IMG_OBJ_ATT.ATT_CLASS_ID\nHAVING COUNT(DISTINCT IMG_OBJ_ATT.OBJ_SAMPLE_ID) >= 2",
    "7530": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 27 AND OBJ_CLASSES.OBJ_CLASS = 'wall'",
    "7531": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ_ATT.IMG_ID = 10 AND ATT_CLASSES.ATT_CLASS = 'scattered'",
    "7532": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASSES.OBJ_CLASS = 'bridge'",
    "7533": "SELECT AVG(OBJ_COUNT) AS AVG_OBJ_PER_IMG\nFROM (\n  SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) AS OBJ_COUNT\n  FROM IMG_OBJ\n  GROUP BY IMG_ID\n)",
    "7534": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 'van'",
    "7535": "To answer the question accurately, we need to join several tables to retrieve the objects within the specified bounding box in image no. 1, their attributes, and any relationships they might have. However, it's important to note that the question specifically asks about the scene within a given bounding box, but the relationships (IMG_REL) do not directly relate to spatial information (like bounding boxes). Therefore, the relationships will be considered for the objects found within the bounding box, but not limited by another bounding box.\n\nThe SQL query will involve joining the `IMG_OBJ` table with `OBJ_CLASSES` to get the object classes, `IMG_OBJ_ATT` with `ATT_CLASSES` to get the attributes of these objects, and `IMG_REL` with `PRED_CLASSES` to find relationships between objects. Since the relationships don't directly tie to spatial constraints beyond being in the same image, we'll focus on relationships involving objects identified within the specified bounding box.\n\nHere's the SQL query:\n\n```sqlite\nSELECT \n    obj.OBJ_CLASS AS Object,\n    att.ATT_CLASS AS Attribute,\n    pred.PRED_CLASS AS Relationship,\n    rel_obj.OBJ_CLASS AS Related_Object\nFROM \n    IMG_OBJ AS img_obj\n    JOIN OBJ_CLASSES AS obj ON img_obj.OBJ_CLASS_ID = obj.OBJ_CLASS_ID\n    LEFT JOIN IMG_OBJ_ATT AS img_att ON img_obj.IMG_ID = img_att.IMG_ID AND img_obj.OBJ_SAMPLE_ID = img_att.OBJ_SAMPLE_ID\n    LEFT JOIN ATT_CLASSES AS att ON img_att.ATT_CLASS_ID = att.ATT_CLASS_ID\n    LEFT JOIN IMG_REL AS img_rel ON img_obj.IMG_ID = img_rel.IMG_ID AND (img_obj.OBJ_SAMPLE_ID = img_rel.OBJ1_SAMPLE_ID OR img_obj.OBJ_SAMPLE_ID = img_rel.OBJ2_SAMPLE_ID)\n    LEFT JOIN PRED_CLASSES AS pred ON img_rel.PRED_CLASS_ID = pred.PRED_CLASS_ID\n    LEFT JOIN IMG_OBJ AS rel_img_obj ON img_rel.IMG_ID = rel_img_obj.IMG_ID AND (img_rel.OBJ2_SAMPLE_ID = rel_img_obj.OBJ_SAMPLE_ID OR img_rel.OBJ1_SAMPLE_ID = rel_img_obj.OBJ_SAMPLE_ID)\n    LEFT JOIN OBJ_CLASSES AS rel_obj ON rel_img_obj.OBJ_CLASS_ID = rel_obj.OBJ_CLASS_ID\nWHERE \n    img_obj.IMG_ID = 1\n    AND img_obj.X = 388\n    AND img",
    "7536": "SELECT PRED_CLASS\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nWHERE IMG_ID = 1 AND OBJ1_SAMPLE_ID = 25 AND OBJ2_SAMPLE_ID = 2",
    "7537": "SELECT COUNT(*) AS attribute_count\nFROM IMG_OBJ_ATT\nWHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7",
    "7538": "SELECT COUNT(*) AS object_elements_count\nFROM IMG_OBJ\nWHERE IMG_ID = 31;",
    "7539": "SELECT ATT_CLASS_ID\nFROM IMG_OBJ_ATT\nWHERE IMG_ID = 20\nGROUP BY ATT_CLASS_ID\nORDER BY COUNT(OBJ_SAMPLE_ID) DESC\nLIMIT 1",
    "7540": "SELECT X, Y, W, H \nFROM IMG_OBJ \nWHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7;",
    "7541": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM IMG_OBJ_ATT IOA\n     JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID\n     WHERE AC.ATT_CLASS = 'white' AND IOA.IMG_ID = 99) / \n    (SELECT CAST(COUNT(DISTINCT OBJ_SAMPLE_ID) AS FLOAT) \n     FROM IMG_OBJ \n     WHERE IMG_ID = 99) AS percentage",
    "7542": "SELECT COUNT(DISTINCT ATT_CLASS_ID) AS num_attribute_classes\nFROM IMG_OBJ_ATT\nWHERE IMG_ID = 5",
    "7543": "SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10;",
    "7544": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE X = 422 AND Y = 63 AND W = 77 AND H = 363;",
    "7545": "SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12;",
    "7546": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8;",
    "7547": "SELECT COUNT(*) \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE IMG_OBJ.IMG_ID = 908 AND OBJ_CLASSES.OBJ_CLASS = 'tip';",
    "7548": "SELECT COUNT(*) AS kitchen_objects_in_image_41\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 41 AND OBJ_CLASSES.OBJ_CLASS = 'kitchen';",
    "7549": "SELECT COUNT(DISTINCT IMG_OBJ.IMG_ID) \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASSES.OBJ_CLASS = 'paint';",
    "7550": "SELECT COUNT(*) AS cloud_samples_in_image_2315533\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'cloud' AND IMG_OBJ.IMG_ID = 2315533",
    "7551": "SELECT OBJ_CLASS\nFROM OBJ_CLASSES\nWHERE OBJ_CLASS = 'onion';",
    "7552": "SELECT X, Y, W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE IMG_ID = 1344 AND OBJ_CLASS = 'spoon';",
    "7553": "SELECT \n    (CAST(SUM(CASE WHEN OC.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM \n    IMG_OBJ IO\nJOIN \n    OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID\nWHERE \n    IO.IMG_ID = 2654;",
    "7554": "SELECT COUNT(DISTINCT IMG_OBJ.IMG_ID) AS wood_images_count\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'wood'",
    "7555": "SELECT OBJ_CLASS\nFROM OBJ_CLASSES\nWHERE OBJ_CLASS_ID = (\n    SELECT OBJ_CLASS_ID\n    FROM IMG_OBJ\n    ORDER BY H DESC\n    LIMIT 1\n)",
    "7556": "SELECT \n    (CAST(SUM(CASE WHEN OC.OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage\nFROM \n    IMG_OBJ IO\nJOIN \n    OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID",
    "7557": "SELECT COUNT(*) AS animal_samples_in_image_660\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'animal' AND IMG_OBJ.IMG_ID = 660",
    "7558": "SELECT COUNT(*) AS bed_samples_in_image_1098\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'bed' AND IMG_OBJ.IMG_ID = 1098",
    "7559": "SELECT OBJ_CLASS\nFROM OBJ_CLASSES\nWHERE OBJ_CLASS_ID = (\n    SELECT OBJ_CLASS_ID\n    FROM IMG_OBJ\n    ORDER BY H ASC\n    LIMIT 1\n)",
    "7560": "SELECT X, Y, W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE IMG_ID = 250 AND OBJ_CLASS = 'kitchen';",
    "7561": "SELECT IMG_ID\nFROM IMG_OBJ\nGROUP BY IMG_ID\nHAVING COUNT(OBJ_SAMPLE_ID) > 20;",
    "7562": "SELECT OBJ_SAMPLE_ID\nFROM IMG_OBJ\nWHERE IMG_ID = 8\nORDER BY W DESC\nLIMIT 1",
    "7563": "SELECT * FROM IMG_OBJ WHERE IMG_ID = 5 AND X = 634 AND Y = 468;",
    "7564": "SELECT IMG_OBJ.OBJ_SAMPLE_ID, COUNT(IMG_OBJ_ATT.ATT_CLASS_ID) AS attribute_count\nFROM IMG_OBJ\nJOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID\nGROUP BY IMG_OBJ.OBJ_SAMPLE_ID\nORDER BY attribute_count DESC\nLIMIT 1;",
    "7565": "SELECT \n    (SELECT CAST(SUM(OBJ_SAMPLE_ID) AS FLOAT) FROM IMG_OBJ WHERE IMG_ID = 1) / \n    (SELECT SUM(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 6) AS ratio",
    "7566": "SELECT AVG(OBJ_COUNT) AS AVG_OBJ_PER_IMG\nFROM (\n    SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) AS OBJ_COUNT\n    FROM IMG_OBJ\n    GROUP BY IMG_ID\n)",
    "7567": "SELECT DISTINCT IMG_OBJ.IMG_ID\nFROM IMG_OBJ\nJOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE ATT_CLASSES.ATT_CLASS = 'wired'",
    "7568": "SELECT DISTINCT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nINNER JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 10",
    "7569": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 1314 AND OBJ_CLASSES.OBJ_CLASS = 'tip'",
    "7570": "SELECT PRED_CLASSES.PRED_CLASS\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nJOIN IMG_OBJ AS IMG_OBJ1 ON IMG_REL.IMG_ID = IMG_OBJ1.IMG_ID AND IMG_REL.OBJ1_SAMPLE_ID = IMG_OBJ1.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES AS OBJ_CLASSES1 ON IMG_OBJ1.OBJ_CLASS_ID = OBJ_CLASSES1.OBJ_CLASS_ID AND OBJ_CLASSES1.OBJ_CLASS = 'chain'\nJOIN IMG_OBJ AS IMG_OBJ2 ON IMG_REL.IMG_ID = IMG_OBJ2.IMG_ID AND IMG_REL.OBJ2_SAMPLE_ID = IMG_OBJ2.OBJ_SAMPLE_ID\nJOIN OBJ_CLASSES AS OBJ_CLASSES2 ON IMG_OBJ2.OBJ_CLASS_ID = OBJ_CLASSES2.OBJ_CLASS_ID AND OBJ_CLASSES2.OBJ_CLASS = 'label'\nWHERE IMG_REL.IMG_ID = 2360078",
    "7571": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ_ATT \nWHERE ATT_CLASS_ID = (SELECT ATT_CLASS_ID FROM ATT_CLASSES WHERE ATT_CLASS = 'polka dot')",
    "7572": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE IMG_OBJ_ATT.IMG_ID = 400 AND IMG_OBJ_ATT.OBJ_SAMPLE_ID IN (\n    SELECT OBJ_SAMPLE_ID\n    FROM IMG_OBJ\n    WHERE IMG_ID = 400\n    ORDER BY W DESC\n    LIMIT 1\n)",
    "7573": "SELECT OBJ_CLASS\nFROM OBJ_CLASSES\nWHERE OBJ_CLASS_ID = (\n    SELECT OBJ_CLASS_ID\n    FROM IMG_OBJ\n    GROUP BY OBJ_CLASS_ID\n    ORDER BY COUNT(DISTINCT IMG_ID) DESC\n    LIMIT 1\n)",
    "7574": "SELECT W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASSES.OBJ_CLASS = 'van' AND IMG_OBJ.IMG_ID = 1;",
    "7575": "SELECT IMG_OBJ.X, IMG_OBJ.Y\nFROM IMG_OBJ\nJOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 1 AND ATT_CLASSES.ATT_CLASS = 'sparse'",
    "7576": "SELECT \n    (COUNT(DISTINCT CASE WHEN OC.OBJ_CLASS = 'street lights' THEN IO.OBJ_SAMPLE_ID END) * 1.0 / COUNT(DISTINCT IO.OBJ_SAMPLE_ID)) * 100 AS percentage\nFROM \n    IMG_OBJ IO\nINNER JOIN \n    OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID",
    "7577": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM IMG_OBJ \n     JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \n     WHERE OBJ_CLASSES.OBJ_CLASS = 'windows' AND IMG_OBJ.IMG_ID = 5) \n    / \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM IMG_OBJ \n     WHERE IMG_ID = 5) \n    AS percentage;",
    "7578": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ \nWHERE X = 5 AND Y = 5;",
    "7579": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ \nGROUP BY IMG_ID \nHAVING COUNT(OBJ_SAMPLE_ID) < 15",
    "7580": "SELECT COUNT(DISTINCT IMG_ID) \nFROM (\n    SELECT IMG_ID\n    FROM IMG_OBJ_ATT\n    GROUP BY IMG_ID\n    HAVING COUNT(DISTINCT ATT_CLASS_ID) = 10\n)",
    "7581": "SELECT DISTINCT IMG_ID\nFROM IMG_REL\nGROUP BY IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID\nHAVING COUNT(DISTINCT PRED_CLASS_ID) > 1",
    "7582": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ \nWHERE OBJ_CLASS_ID IN \n    (SELECT OBJ_CLASS_ID \n     FROM OBJ_CLASSES \n     WHERE OBJ_CLASS = 'vegetable' OR OBJ_CLASS = 'fruits')",
    "7583": "SELECT IMG_ID \nFROM IMG_REL \nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID \nWHERE PRED_CLASSES.PRED_CLASS = 'parked on';",
    "7584": "SELECT DISTINCT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.X = 5 AND IMG_OBJ.Y = 5;",
    "7585": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASSES.OBJ_CLASS = 'keyboard';",
    "7586": "SELECT W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASS = 'keyboard' AND X = 5 AND Y = 647",
    "7587": "SELECT DISTINCT IMG_ID\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE ATT_CLASSES.ATT_CLASS = 'horse'",
    "7588": "SELECT IMG_OBJ.X, IMG_OBJ.Y\nFROM IMG_OBJ\nJOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE ATT_CLASSES.ATT_CLASS = 'horse' AND OBJ_CLASSES.OBJ_CLASS = 'fur'",
    "7589": "SELECT ATT_CLASSES.ATT_CLASS\nFROM IMG_OBJ_ATT\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE IMG_OBJ_ATT.IMG_ID = 15",
    "7590": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_REL \nWHERE PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'reading') \nAND (IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) IN \n    (SELECT IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID \n     FROM IMG_REL \n     GROUP BY IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID \n     HAVING COUNT(DISTINCT PRED_CLASS_ID) > 1)",
    "7591": "SELECT COUNT(DISTINCT IMG_ID) \nFROM IMG_OBJ_ATT \nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID \nWHERE ATT_CLASSES.ATT_CLASS = 'picture';",
    "7592": "SELECT COUNT(DISTINCT io.IMG_ID)\nFROM IMG_OBJ io\nJOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID\nJOIN ATT_CLASSES ac ON ioa.ATT_CLASS_ID = ac.ATT_CLASS_ID\nJOIN OBJ_CLASSES oc ON io.OBJ_CLASS_ID = oc.OBJ_CLASS_ID\nWHERE ac.ATT_CLASS = 'picture' AND oc.OBJ_CLASS = 'bear'",
    "7593": "SELECT ATT_CLASSES.ATT_CLASS\nFROM ATT_CLASSES\nJOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID\nJOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID\nWHERE IMG_OBJ.X = 5 AND IMG_OBJ.Y = 5",
    "7594": "SELECT AVG(IMG_ID) AS avg_img_id\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE OBJ_CLASSES.OBJ_CLASS = 'keyboard';",
    "7595": "SELECT \n    SUM(CASE WHEN OBJ_CLASS = 'man' THEN 1 ELSE 0 END) / CAST(SUM(CASE WHEN OBJ_CLASS = 'person' THEN 1 ELSE 0 END) AS REAL) AS ratio\nFROM \n    IMG_OBJ\nJOIN \n    OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID",
    "7596": "SELECT OBJ_SAMPLE_ID\nFROM IMG_OBJ\nWHERE IMG_ID = 17 AND X = 0 AND Y = 0;",
    "7597": "SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2;",
    "7598": "SELECT COUNT(*) \nFROM IMG_OBJ \nWHERE IMG_ID = 12 AND Y = 0;",
    "7599": "SELECT ATT_CLASSES.ATT_CLASS\nFROM ATT_CLASSES\nJOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID\nWHERE IMG_OBJ_ATT.IMG_ID = 22",
    "7600": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 36 AND IMG_OBJ.X = 0 AND IMG_OBJ.Y = 0",
    "7601": "SELECT X, Y, W, H \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASSES.OBJ_CLASS = 'pizza';",
    "7602": "SELECT OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE X = 126 AND Y = 363;",
    "7603": "SELECT OBJ_CLASS\nFROM OBJ_CLASSES\nWHERE OBJ_CLASS_ID = (\n    SELECT OBJ_CLASS_ID\n    FROM IMG_OBJ\n    WHERE IMG_ID = 56\n    GROUP BY OBJ_CLASS_ID\n    ORDER BY COUNT(OBJ_CLASS_ID) DESC\n    LIMIT 1\n)",
    "7604": "SELECT OBJ_CLASSES.OBJ_CLASS, IMG_OBJ.W, IMG_OBJ.H\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 22",
    "7605": "SELECT PRED_CLASS\nFROM PRED_CLASSES\nJOIN IMG_REL ON PRED_CLASSES.PRED_CLASS_ID = IMG_REL.PRED_CLASS_ID\nWHERE IMG_REL.IMG_ID = 68;",
    "7606": "SELECT COUNT(*) AS has_predicate_count\nFROM IMG_REL\nJOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID\nWHERE PRED_CLASSES.PRED_CLASS = 'has' AND IMG_REL.IMG_ID = 107",
    "7607": "SELECT PRED_CLASS\nFROM PRED_CLASSES\nJOIN IMG_REL ON PRED_CLASSES.PRED_CLASS_ID = IMG_REL.PRED_CLASS_ID\nWHERE IMG_ID = 4434\nGROUP BY IMG_REL.PRED_CLASS_ID\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "7608": "SELECT COUNT(*), X, Y \nFROM IMG_OBJ \nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID \nWHERE OBJ_CLASS = 'dress' AND IMG_ID = 1764",
    "7609": "SELECT IMG_OBJ.X, IMG_OBJ.Y\nFROM IMG_OBJ\nJOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID\nJOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID\nWHERE IMG_OBJ.IMG_ID = 23 AND ATT_CLASSES.ATT_CLASS = 'cast'",
    "7610": "SELECT COUNT(*) AS blue_attribute_count\nFROM IMG_OBJ_ATT IOA\nJOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID\nWHERE AC.ATT_CLASS = 'blue' AND IOA.IMG_ID = 2355735;",
    "7611": "SELECT AVG(W) AS average_width, AVG(H) AS average_height, OBJ_CLASSES.OBJ_CLASS\nFROM IMG_OBJ\nJOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID\nWHERE IMG_ID = 47\nGROUP BY IMG_OBJ.OBJ_CLASS_ID",
    "7612": "SELECT firstName, lastName \nFROM Master \nWHERE birthCountry != 'USA' AND birthYear = '1990'",
    "7613": "SELECT nameGiven\nFROM Master\nWHERE shootCatch IS NULL AND pos = 'F'",
    "7614": "SELECT Master.playerID, Master.firstName, Master.lastName\nFROM Master\nLEFT JOIN HOF ON Master.hofID = HOF.hofID\nWHERE HOF.hofID IS NULL AND Master.playerID IS NOT NULL;",
    "7615": "SELECT firstName, lastName, birthYear || '-' || birthMon || '-' || birthDay AS dateOfBirth\nFROM Master\nWHERE deathYear IS NULL\nORDER BY birthYear DESC, birthMon DESC, birthDay DESC\nLIMIT 1;",
    "7616": "SELECT \n    firstName || ' ' || lastName AS name, \n    CAST(deathYear AS INTEGER) - CAST(birthYear AS INTEGER) AS age_when_died\nFROM \n    Master\nWHERE \n    deathYear IS NOT NULL \n    AND shootCatch IS NULL;",
    "7617": "SELECT M.firstName, M.lastName\nFROM Master M\nJOIN Goalies G ON M.playerID = G.playerID\nWHERE G.year BETWEEN 2000 AND 2005\nGROUP BY G.playerID\nHAVING COUNT(DISTINCT G.tmID) > 2",
    "7618": "SELECT AVG(weight) AS average_weight\nFROM Master\nWHERE CAST(height AS INTEGER) > 72;",
    "7619": "SELECT DISTINCT Master.firstName, Master.birthCountry\nFROM Goalies\nJOIN Master ON Goalies.playerID = Master.playerID\nGROUP BY Goalies.playerID\nHAVING SUM(CAST(Goalies.Min AS INTEGER)) > 5000",
    "7620": "SELECT DISTINCT g1.playerID\nFROM Goalies g1\nJOIN Goalies g2 ON g1.playerID = g2.playerID\nWHERE g1.lgID = 'PCHA' AND g2.lgID = 'NHL'",
    "7621": "SELECT \n    Master.lastName, \n    Goalies.year, \n    MAX(Goalies.Min) AS MaxTimePlayed\nFROM \n    Master\nJOIN \n    Goalies ON Master.playerID = Goalies.playerID\nWHERE \n    Master.deathYear IS NOT NULL\nGROUP BY \n    Master.playerID\nORDER BY \n    Master.lastName;",
    "7622": "SELECT m.nameGiven, m.height, m.weight, (strftime('%Y', 'now') - m.birthYear) AS age_of_today\nFROM Goalies g\nJOIN Master m ON g.playerID = m.playerID\nWHERE g.year BETWEEN 2000 AND 2010 AND g.tmID = 'COL'",
    "7623": "SELECT Master.firstName, Master.lastName, Goalies.year\nFROM Goalies\nJOIN Master ON Goalies.playerID = Master.playerID\nWHERE CAST(Goalies.ENG AS INTEGER) >= 10",
    "7624": "SELECT \n    Master.firstName, \n    Master.lastName, \n    Goalies.year, \n    MIN((CAST(Goalies.GA AS FLOAT) / CAST(Goalies.SA AS FLOAT)) * 100) AS LowestPctGoalsAgainst\nFROM \n    Goalies\nJOIN \n    Master ON Goalies.playerID = Master.playerID\nGROUP BY \n    Goalies.playerID\nORDER BY \n    LowestPctGoalsAgainst ASC\nLIMIT 1;",
    "7625": "SELECT DISTINCT g.playerID, t.name\nFROM Goalies g\nJOIN Master m ON g.playerID = m.playerID\nJOIN Teams t ON g.year = t.year AND g.tmID = t.tmID\nWHERE g.year = 2005 AND CAST(m.height AS INTEGER) < 72",
    "7626": "SELECT Master.nameNick, Scoring.tmID, Scoring.year\nFROM Master\nJOIN Scoring ON Master.playerID = Scoring.playerID\nWHERE Master.playerID = 'aubinje01'",
    "7627": "WITH GoalieSeasons AS (\n    SELECT playerID, COUNT(DISTINCT year) AS seasons\n    FROM Goalies\n    GROUP BY playerID\n    ORDER BY seasons DESC\n    LIMIT 1\n),\nTotalMinutes AS (\n    SELECT G.playerID, SUM(CAST(Min AS INTEGER)) AS totalMinutes\n    FROM Goalies G\n    JOIN GoalieSeasons GS ON G.playerID = GS.playerID\n    GROUP BY G.playerID\n)\nSELECT M.firstName, M.lastName, GS.seasons, TM.totalMinutes / GS.seasons AS averageMinutesPerSeason\nFROM Master M\nJOIN GoalieSeasons GS ON M.playerID = GS.playerID\nJOIN TotalMinutes TM ON M.playerID = TM.playerID",
    "7628": "SELECT Master.firstName, Master.lastName, Goalies.year\nFROM Goalies\nJOIN Master ON Goalies.playerID = Master.playerID\nWHERE CAST(Goalies.SHO AS FLOAT) / CAST(Goalies.GA AS FLOAT) * 100 = 5.00;",
    "7629": "SELECT firstName, lastName, birthYear, birthCountry, deathCountry\nFROM Master\nWHERE deathCountry IS NOT NULL AND birthCountry != deathCountry\nORDER BY birthYear;",
    "7630": "SELECT nameGiven, firstNHL, firstWHA\nFROM Master\nWHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL",
    "7631": "SELECT M.firstName, M.pos\nFROM Master M\nWHERE M.deathYear IS NULL\nAND LENGTH(M.pos) - LENGTH(REPLACE(M.pos, '/', '')) = 1;",
    "7632": "SELECT M.nameNick, M.lastNHL\nFROM Master M\nWHERE M.height = (SELECT MAX(height) FROM Master)",
    "7633": "SELECT \n    AVG(CASE WHEN CAST(birthYear AS INTEGER) >= 1990 THEN height END) AS avg_height_1990_onwards,\n    AVG(CASE WHEN CAST(birthYear AS INTEGER) < 1990 THEN height END) AS avg_height_before_1990\nFROM Master\nWHERE height IS NOT NULL AND birthYear IS NOT NULL",
    "7634": "SELECT DISTINCT Master.playerID, Master.firstName, Master.lastName, Goalies.tmID\nFROM Master\nJOIN Goalies ON Master.playerID = Goalies.playerID\nJOIN Coaches ON Master.coachID = Coaches.coachID\nWHERE Master.shootCatch = 'L' AND Master.pos = 'G'\nORDER BY Master.playerID, Goalies.tmID",
    "7635": "SELECT Master.playerID, Master.firstName, Master.lastName, Goalies.tmID, Teams.name AS TeamName\nFROM Master\nJOIN Goalies ON Master.playerID = Goalies.playerID\nJOIN Teams ON Goalies.year = Teams.year AND Goalies.tmID = Teams.tmID\nWHERE Master.pos = 'G' AND Master.deathYear IS NOT NULL AND Master.birthCountry = 'Canada'",
    "7636": "SELECT Master.firstName, Master.lastName, Goalies.year\nFROM Goalies\nJOIN Master ON Goalies.playerID = Master.playerID\nJOIN Teams ON Goalies.year = Teams.year AND Goalies.tmID = Teams.tmID\nWHERE Teams.rank = 1 AND Teams.name = 'Boston Bruins' AND Master.pos = 'G'",
    "7637": "SELECT DISTINCT Teams.name\nFROM Master\nJOIN Goalies ON Master.playerID = Goalies.playerID\nJOIN Teams ON Goalies.year = Teams.year AND Goalies.tmID = Teams.tmID\nWHERE Master.deathYear IS NULL AND Master.firstNHL < '1950'",
    "7638": "SELECT M.nameGiven AS CoachName, C.tmID AS Team, C.year AS Year\nFROM Master M\nJOIN Coaches C ON M.coachID = C.coachID\nWHERE M.playerID IS NOT NULL\nAND M.coachID IS NOT NULL\nAND (M.lastNHL < C.year OR (M.lastNHL IS NULL AND M.lastWHA < C.year))\nORDER BY M.nameGiven, C.year",
    "7639": "WITH CoachWinPercentage AS (\n    SELECT \n        c.coachID,\n        c.tmID,\n        c.year,\n        (CAST(c.w AS FLOAT) / c.g) * 100 AS winPercentage\n    FROM Coaches c\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM Master m\n        WHERE m.coachID = c.coachID AND m.playerID IS NOT NULL\n    )\n)\nSELECT \n    m.nameGiven,\n    cwp.tmID\nFROM CoachWinPercentage cwp\nJOIN Master m ON cwp.coachID = m.coachID\nORDER BY cwp.winPercentage DESC\nLIMIT 1;",
    "7640": "SELECT c.coachID, c.year, MAX((CAST(c.w AS FLOAT) / CAST(c.g AS FLOAT)) * 100) AS winning_percentage\nFROM Coaches c\nJOIN Teams t ON c.year = t.year AND c.tmID = t.tmID\nWHERE t.tmID = 'DET'\nGROUP BY c.coachID\nORDER BY winning_percentage DESC\nLIMIT 1;",
    "7641": "WITH CoachSeasons AS (\n    SELECT \n        c.coachID,\n        COUNT(DISTINCT c.year) AS seasons,\n        m.firstName,\n        m.birthDay || '-' || m.birthMon || '-' || m.birthYear AS dob\n    FROM Coaches c\n    JOIN Master m ON c.coachID = m.coachID\n    WHERE c.tmID = 'MTL'\n    GROUP BY c.coachID\n    ORDER BY seasons DESC\n    LIMIT 1\n),\nPreviousTeams AS (\n    SELECT \n        c.coachID,\n        GROUP_CONCAT(DISTINCT c.tmID) AS previousTeams\n    FROM Coaches c\n    JOIN CoachSeasons cs ON c.coachID = cs.coachID\n    WHERE c.tmID != 'MTL'\n    GROUP BY c.coachID\n)\nSELECT \n    cs.firstName AS GivenName,\n    cs.dob AS DateOfBirth,\n    pt.previousTeams AS PreviousTeams\nFROM CoachSeasons cs\nLEFT JOIN PreviousTeams pt ON cs.coachID = pt.coachID",
    "7642": "SELECT M.firstName || ' ' || M.lastName AS PlayerName, T.name AS TeamName\nFROM Goalies G\nJOIN Master M ON G.playerID = M.playerID\nJOIN Teams T ON G.year = T.year AND G.tmID = T.tmID\nWHERE CAST(G.L AS INTEGER) > CAST(G.W AS INTEGER)\nGROUP BY G.playerID, G.tmID\nHAVING COUNT(DISTINCT G.year) >= 2",
    "7643": "SELECT g.year, g.playerID, (CAST(SUM(g.W) AS FLOAT) / SUM(g.GP)) * 100 AS winning_percentage\nFROM Goalies g\nJOIN Master m ON g.playerID = m.playerID\nWHERE m.birthYear = '1987' AND m.shootCatch IS NULL\nGROUP BY g.year, g.playerID\nHAVING SUM(g.GP) > 0",
    "7644": "SELECT \n    Master.nameGiven,\n    (SUM(CAST(Goalies.Min AS INTEGER)) / SUM(Goalies.GP)) AS avgTimeInMinutes\nFROM \n    Master\nJOIN \n    Goalies ON Master.playerID = Goalies.playerID\nWHERE \n    Master.playerID = 'aebisda01' AND Goalies.pos = 'G'",
    "7645": "SELECT m.lastName, m.firstName\nFROM Master m\nJOIN Goalies g ON m.playerID = g.playerID\nWHERE m.deathYear IS NULL\nGROUP BY m.playerID\nHAVING SUM(CAST(g.W AS INTEGER)) / SUM(CAST(g.GP AS INTEGER)) > 0.5",
    "7646": "SELECT COUNT(*) FROM (\n    SELECT playerID FROM AwardsPlayers WHERE note LIKE '%posthumous%'\n    UNION\n    SELECT coachID FROM AwardsCoaches WHERE note LIKE '%posthumous%'\n)",
    "7647": "SELECT COUNT(DISTINCT Master.playerID) AS GoalieAwardWinners\nFROM AwardsPlayers\nJOIN Master ON AwardsPlayers.playerID = Master.playerID\nWHERE AwardsPlayers.year = 1983 AND Master.pos = 'G'",
    "7648": "SELECT COUNT(*) AS TemporaryCoaches2007\nFROM Coaches\nWHERE year = 2007 AND notes LIKE '%interim%'",
    "7649": "SELECT COUNT(*) AS RegularSeasonShutouts\nFROM CombinedShutouts\nWHERE year = 1977 AND \"R/P\" = 'R'",
    "7650": "SELECT COUNT(DISTINCT tmID) \nFROM Goalies \nWHERE year = 2005 AND ENG IS NOT NULL AND ENG != '0';",
    "7651": "SELECT DISTINCT year\nFROM Goalies\nWHERE lgID = 'NHL' AND SA IS NOT NULL\nORDER BY year;",
    "7652": "SELECT COUNT(DISTINCT tmID) \nFROM TeamsPost \nWHERE W = L;",
    "7653": "SELECT name FROM HOF WHERE year = 1978;",
    "7654": "SELECT COUNT(*) FROM HOF WHERE category = 'Builder'",
    "7655": "SELECT COUNT(*) \nFROM HOF \nWHERE year > 1980 AND category = 'Player';",
    "7656": "SELECT Master.nameNick\nFROM Master\nJOIN HOF ON Master.hofID = HOF.hofID\nWHERE HOF.year = 2007",
    "7657": "SELECT HOF.year\nFROM Master\nJOIN HOF ON Master.hofID = HOF.hofID\nWHERE Master.playerID = (\n    SELECT playerID\n    FROM Master\n    ORDER BY height DESC\n    LIMIT 1\n)",
    "7658": "SELECT AwardsCoaches.award\nFROM AwardsCoaches\nJOIN Coaches ON AwardsCoaches.coachID = Coaches.coachID\nJOIN Master ON Coaches.coachID = Master.coachID\nWHERE Master.birthCountry = 'Canada'",
    "7659": "SELECT COUNT(DISTINCT c.coachID) \nFROM Coaches c \nJOIN Teams t ON c.year = t.year AND c.tmID = t.tmID \nJOIN Master m ON c.coachID = m.coachID \nWHERE t.W > 30 AND m.birthCountry = 'USA';",
    "7660": "SELECT COUNT(DISTINCT c.coachID) \nFROM Coaches c \nJOIN Teams t ON c.year = t.year AND c.tmID = t.tmID \nJOIN Master m ON c.coachID = m.coachID \nWHERE t.lgID = 'NHL' AND m.birthCountry = 'Canada';",
    "7661": "SELECT AwardsCoaches.award\nFROM AwardsCoaches\nJOIN Coaches ON AwardsCoaches.coachID = Coaches.coachID\nJOIN Master ON Coaches.coachID = Master.coachID\nWHERE Master.birthYear = '1952'",
    "7662": "SELECT COUNT(DISTINCT c.coachID) \nFROM Coaches c \nJOIN AwardsCoaches ac ON c.coachID = ac.coachID \nJOIN Master m ON c.coachID = m.coachID \nWHERE ac.year = 1940 AND m.birthCity = 'Toronto'",
    "7663": "SELECT COUNT(DISTINCT Master.coachID) \nFROM Master \nJOIN AwardsCoaches ON Master.coachID = AwardsCoaches.coachID \nWHERE AwardsCoaches.year > 1940 AND Master.deathYear IS NOT NULL;",
    "7664": "SELECT AwardsCoaches.award\nFROM AwardsCoaches\nJOIN Coaches ON AwardsCoaches.coachID = Coaches.coachID\nJOIN Master ON Coaches.coachID = Master.coachID\nWHERE Coaches.lgID = 'NHL' AND Master.deathYear IS NOT NULL",
    "7665": "SELECT COUNT(DISTINCT Master.coachID) \nFROM Master \nJOIN HOF ON Master.hofID = HOF.hofID \nWHERE Master.weight > '195' AND HOF.category = 'Coach';",
    "7666": "SELECT DISTINCT Master.firstName\nFROM Master\nJOIN Goalies ON Master.playerID = Goalies.playerID\nJOIN HOF ON Master.hofID = HOF.hofID\nWHERE Master.shootCatch IS NULL;",
    "7667": "SELECT COUNT(DISTINCT Master.hofID) \nFROM Master \nJOIN HOF ON Master.hofID = HOF.hofID \nWHERE Master.playerID IS NOT NULL AND Master.coachID IS NOT NULL;",
    "7668": "SELECT Master.birthCity\nFROM AwardsPlayers\nJOIN Master ON AwardsPlayers.playerID = Master.playerID\nWHERE AwardsPlayers.year = 1970",
    "7669": "SELECT COUNT(DISTINCT Master.playerID) AS TorontoAllRookieWinners\nFROM Master\nJOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID\nWHERE Master.birthCity = 'Toronto' AND AwardsPlayers.award = 'All-Rookie';",
    "7670": "SELECT COUNT(DISTINCT Master.playerID) AS deceased_all_rookie_winners\nFROM AwardsPlayers\nJOIN Master ON AwardsPlayers.playerID = Master.playerID\nWHERE AwardsPlayers.award = 'All-Rookie' AND Master.deathYear IS NOT NULL;",
    "7671": "SELECT COUNT(DISTINCT Master.playerID) \nFROM Master \nJOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID \nWHERE Master.deathState = 'Massachusetts';",
    "7672": "SELECT AwardsPlayers.award\nFROM AwardsPlayers\nJOIN Master ON AwardsPlayers.playerID = Master.playerID\nWHERE Master.deathCity = 'Arlington'",
    "7673": "SELECT Master.nameNick\nFROM AwardsPlayers\nJOIN Master ON AwardsPlayers.playerID = Master.playerID\nWHERE AwardsPlayers.award = 'All-Rookie' AND Master.birthMon = '3'",
    "7674": "SELECT COUNT(DISTINCT Master.hofID) \nFROM Master \nJOIN HOF ON Master.hofID = HOF.hofID \nWHERE Master.birthMon IN ('7', '8') AND Master.hofID IS NOT NULL;",
    "7675": "SELECT M.birthMon\nFROM Master M\nJOIN AwardsPlayers AP ON M.playerID = AP.playerID\nGROUP BY M.playerID\nORDER BY COUNT(AP.award) DESC\nLIMIT 1",
    "7676": "SELECT birthYear\nFROM Master\nJOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID\nGROUP BY birthYear\nORDER BY COUNT(AwardsPlayers.award) DESC\nLIMIT 1;",
    "7677": "SELECT birthCountry\nFROM Master\nWHERE playerID IN (\n    SELECT playerID\n    FROM AwardsPlayers\n    GROUP BY playerID\n    ORDER BY COUNT(award) DESC\n    LIMIT 1\n)",
    "7678": "SELECT birthCountry, COUNT(*) AS NumberOfPlayers\nFROM Master\nWHERE hofID IS NOT NULL\nGROUP BY birthCountry\nORDER BY NumberOfPlayers DESC\nLIMIT 1;",
    "7679": "SELECT DISTINCT Master.pos\nFROM Master\nJOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID\nWHERE Master.birthCountry = 'Canada' AND AwardsPlayers.award = 'All-Rookie'",
    "7680": "SELECT AVG(BMI) AS average_BMI\nFROM (\n    SELECT M.coachID, \n           (SUM(CAST(M.weight AS FLOAT)) / COUNT(M.coachID)) / \n           (SUM(CAST(M.height AS FLOAT) * CAST(M.height AS FLOAT)) / COUNT(M.coachID)) AS BMI\n    FROM Master M\n    JOIN HOF H ON M.coachID = H.hofID\n    WHERE M.coachID IS NOT NULL AND M.height IS NOT NULL AND M.weight IS NOT NULL\n    GROUP BY M.coachID\n)",
    "7681": "SELECT \n    (CAST(COUNT(CASE WHEN birthCountry = 'USA' THEN 1 END) AS REAL) / COUNT(*) * 100) AS percentage_of_American_players\nFROM \n    Master\nWHERE \n    hofID IS NOT NULL;",
    "7682": "SELECT MAX(year) - MIN(year) AS playing_years\nFROM (\n    SELECT year FROM Scoring WHERE playerID = 'healygl01'\n    UNION\n    SELECT year FROM Goalies WHERE playerID = 'healygl01'\n    UNION\n    SELECT year FROM ScoringSC WHERE playerID = 'healygl01'\n    UNION\n    SELECT year FROM GoaliesSC WHERE playerID = 'healygl01'\n    UNION\n    SELECT year FROM ScoringShootout WHERE playerID = 'healygl01'\n    UNION\n    SELECT year FROM GoaliesShootout WHERE playerID = 'healygl01'\n)",
    "7683": "SELECT tmID FROM Scoring WHERE playerID = 'roypa01' AND year = 1992",
    "7684": "SELECT SUM(GP) as total_games\nFROM Scoring\nWHERE playerID = 'rutlewa01' AND year = 1967",
    "7685": "SELECT Min FROM Goalies WHERE playerID = 'valiqst01' AND year = 2007;",
    "7686": "SELECT SUM(W) as total_wins\nFROM Goalies\nWHERE playerID = 'vanbijo01' AND year = 1990",
    "7687": "SELECT SUM(CAST(\"T/OL\" AS INTEGER)) AS TotalTiesAndOTLosses\nFROM Goalies\nWHERE playerID = 'vernomi01' AND year = 1998",
    "7688": "SELECT c.w\nFROM AwardsCoaches ac\nJOIN Coaches c ON ac.coachID = c.coachID\nWHERE ac.award = 'Second Team All-Star' AND ac.year = 1933",
    "7689": "SELECT CASE \n         WHEN EXISTS (SELECT 1 \n                      FROM Master m \n                      JOIN HOF h ON m.hofID = h.hofID \n                      WHERE m.legendsID = 'P194502' AND h.note != 'posthumous') \n         THEN 'Yes' \n         ELSE 'No' \n       END AS attended \nFROM dual;",
    "7690": "SELECT pos FROM Master WHERE firstName = 'Mike' AND lastName = 'Antonovich';",
    "7691": "SELECT M.birthCountry || '-' || M.birthState || '-' || M.birthCity AS birth_place\nFROM Coaches C\nJOIN Master M ON C.coachID = M.coachID\nWHERE C.year = 1998 AND C.notes = 'co-coach' AND C.coachID != (\n    SELECT C2.coachID\n    FROM Coaches C2\n    JOIN Master M2 ON C2.coachID = M2.coachID\n    WHERE C2.year = 1998 AND M2.firstName = 'Dave' AND M2.lastName = 'Lewis'\n)",
    "7692": "SELECT M.firstName || ' ' || M.lastName AS FullName\nFROM Master M\nJOIN Goalies G ON M.playerID = G.playerID\nWHERE G.stint = 3\nORDER BY CAST(M.weight AS INTEGER) DESC\nLIMIT 1;",
    "7693": "SELECT M.firstName || ' ' || M.lastName AS FullName\nFROM Master M\nJOIN Goalies G ON M.playerID = G.playerID\nWHERE G.ENG = '10'\nORDER BY CAST(M.height AS INTEGER) DESC\nLIMIT 1;",
    "7694": "SELECT M.shootCatch\nFROM Goalies G\nJOIN Master M ON G.playerID = M.playerID\nWHERE G.year = 2010 AND G.SHO IS NOT NULL\nORDER BY CAST(G.SHO AS INTEGER) DESC\nLIMIT 1",
    "7695": "SELECT Master.firstName, Master.lastName\nFROM Goalies\nJOIN Master ON Goalies.playerID = Master.playerID\nWHERE Goalies.year = 2002 AND CAST(Goalies.GA AS INTEGER) > 150\nORDER BY CAST(Master.birthYear AS INTEGER) DESC, CAST(Master.birthMon AS INTEGER) DESC, CAST(Master.birthDay AS INTEGER) DESC\nLIMIT 1;",
    "7696": "SELECT M.firstName || ' ' || M.lastName AS FullName\nFROM Goalies G\nJOIN Master M ON G.playerID = M.playerID\nWHERE G.tmID = 'NJD'\nGROUP BY G.playerID\nORDER BY MAX(CAST(G.SA AS INTEGER) - CAST(G.GA AS INTEGER)) DESC\nLIMIT 1;",
    "7697": "SELECT T.name\nFROM TeamsPost TP\nJOIN Teams T ON TP.tmID = T.tmID AND TP.year = T.year\nWHERE TP.year = 2010 AND TP.PostENG = (\n    SELECT MAX(PostENG)\n    FROM TeamsPost\n    WHERE year = 2010\n)",
    "7698": "SELECT T.Pts\nFROM Teams T\nJOIN Goalies G ON T.year = G.year AND T.tmID = G.tmID\nWHERE T.year = 1995\nGROUP BY T.tmID\nORDER BY SUM(CAST(G.PostSHO AS INTEGER)) DESC\nLIMIT 1",
    "7699": "SELECT c.coachID, m.nameNick, CAST(SUM(c.w) AS FLOAT) / (SUM(c.w) + SUM(c.l)) AS win_rate\nFROM Coaches c\nJOIN Master m ON c.coachID = m.coachID\nWHERE c.year = 2009\nGROUP BY c.coachID\nORDER BY win_rate DESC\nLIMIT 1;",
    "7700": "SELECT M.firstName || ' ' || M.lastName AS CoachFullName\nFROM Coaches C\nJOIN Master M ON C.coachID = M.coachID\nJOIN Teams T ON C.year = T.year AND C.tmID = T.tmID\nWHERE T.year = 2011 AND T.tmID = (\n    SELECT tmID\n    FROM Teams\n    WHERE year = 2011 AND PPC != '0' AND PPG != '0'\n    ORDER BY (CAST(PPG AS FLOAT) / CAST(PPC AS FLOAT)) DESC\n    LIMIT 1\n)",
    "7701": "SELECT GP FROM ScoringSC WHERE playerID = \"broadpu01\" AND year = 1922",
    "7702": "SELECT COUNT(DISTINCT year) AS StanleyCupFinalsYears\nFROM TeamsPost\nWHERE tmID IN (\n    SELECT tmID\n    FROM Scoring\n    WHERE playerID = \"cleghsp01\"\n)\nAND G >= 4",
    "7703": "SELECT G FROM ScoringSC WHERE playerID = \"dyeba01\" AND year = 1921",
    "7704": "SELECT Master.firstName, Master.lastName, ScoringSC.A AS assists\nFROM ScoringSC\nJOIN Master ON ScoringSC.playerID = Master.playerID\nWHERE ScoringSC.A = (SELECT MAX(A) FROM ScoringSC)",
    "7705": "SELECT lgID \nFROM Scoring \nWHERE playerID = 'adamsja01' AND year = 1920;",
    "7706": "SELECT pos FROM GoaliesSC WHERE playerID = \"hartgi01\"\nUNION\nSELECT pos FROM ScoringSC WHERE playerID = \"hartgi01\";",
    "7707": "SELECT T.W\nFROM Teams T\nJOIN Goalies G ON T.year = G.year AND T.tmID = G.tmID\nWHERE T.year = 2011 AND G.PostGP IS NOT NULL\nGROUP BY T.tmID\nHAVING COUNT(DISTINCT G.playerID) = 3;",
    "7708": "SELECT birthYear \nFROM Master \nWHERE playerID = (\n    SELECT playerID \n    FROM Goalies \n    WHERE year = 2008 \n    ORDER BY CAST(PostSA AS INTEGER) DESC \n    LIMIT 1\n)",
    "7709": "SELECT (MIN(Coaches.year) - MAX(Master.lastNHL)) AS years_between_retirement_and_coaching\nFROM Master\nJOIN Coaches ON Master.coachID = Coaches.coachID\nWHERE Master.firstName = 'Don' AND Master.lastName = 'Waddell'",
    "7710": "SELECT M.shootCatch\nFROM Master M\nJOIN Goalies G ON M.playerID = G.playerID\nWHERE G.year = 1996\nORDER BY CAST(G.SHO AS INTEGER) DESC\nLIMIT 1;",
    "7711": "SELECT M.birthYear || '/' || M.birthMon || '/' || M.birthDay AS Birthday\nFROM Goalies G\nJOIN Master M ON G.playerID = M.playerID\nWHERE G.year = 1965\nORDER BY G.GA DESC\nLIMIT 1;",
    "7712": "SELECT M.firstName || ' ' || M.lastName AS full_name\nFROM Scoring S\nJOIN Master M ON S.playerID = M.playerID\nWHERE S.year = 1981 AND S.\"+/-\" = (\n  SELECT MAX(S2.\"+/-\")\n  FROM Scoring S2\n  WHERE S2.year = 1981\n)",
    "7713": "SELECT M.weight\nFROM Master M\nJOIN Scoring S ON M.playerID = S.playerID\nWHERE S.year > 2000\nORDER BY CAST(S.PPG AS INTEGER) DESC\nLIMIT 1",
    "7714": "SELECT Master.shootCatch AS dominant_hand\nFROM Scoring\nJOIN Master ON Scoring.playerID = Master.playerID\nWHERE Scoring.year = 1989 AND Scoring.SHG = '7'",
    "7715": "SELECT Master.firstName || ' ' || Master.lastName AS FullName\nFROM Scoring\nJOIN Master ON Scoring.playerID = Master.playerID\nWHERE Scoring.year = 1986\nORDER BY CAST(Scoring.GWG AS INTEGER) DESC\nLIMIT 1;",
    "7716": "SELECT SOG FROM Scoring WHERE playerID = 'Cam Neely' AND year = 1990",
    "7717": "SELECT M.firstName, M.lastName\nFROM Master M\nJOIN Coaches C ON M.coachID = C.coachID\nJOIN TeamsPost TP ON C.year = TP.year AND C.tmID = TP.tmID\nWHERE TP.year = 2003\nORDER BY CAST(TP.BenchMinor AS INTEGER) DESC\nLIMIT 1;",
    "7718": "SELECT g.playerID, m.firstName, m.lastName, SUM(CAST(g.GA AS INTEGER)) AS totalGoalsAgainst\nFROM Goalies g\nJOIN Master m ON g.playerID = m.playerID\nWHERE g.year = 1978 AND CAST(m.weight AS INTEGER) > 190\nGROUP BY g.playerID\nORDER BY totalGoalsAgainst DESC\nLIMIT 1;",
    "7719": "WITH SeasonResults AS (\n    SELECT \n        year,\n        SUM(W) AS Wins,\n        SUM(L) AS Losses\n    FROM Teams\n    WHERE tmID = 'VAN'\n    GROUP BY year\n),\nWinRates AS (\n    SELECT \n        year,\n        Wins,\n        Losses,\n        (Wins * 1.0 / (Wins + Losses)) * 100 AS WinRate\n    FROM SeasonResults\n),\nVigneaultStart AS (\n    SELECT \n        WinRate AS StartWinRate\n    FROM WinRates\n    WHERE year = 2006\n),\nPreviousYear AS (\n    SELECT \n        WinRate AS PreviousWinRate\n    FROM WinRates\n    WHERE year = 2005\n)\nSELECT \n    (StartWinRate - PreviousWinRate) AS ImprovementPercentage\nFROM \n    VigneaultStart,\n    PreviousYear",
    "7720": "SELECT m.legendsID\nFROM Goalies g\nJOIN Master m ON g.playerID = m.playerID\nWHERE g.year = 2011 AND g.PostSA IS NOT NULL AND g.PostGA IS NOT NULL\nORDER BY (1 - (CAST(g.PostGA AS FLOAT) / CAST(g.PostSA AS FLOAT))) DESC\nLIMIT 1;",
    "7721": "SELECT COUNT(DISTINCT Master.coachID) \nFROM Master \nWHERE Master.coachID IS NOT NULL AND Master.playerID IS NOT NULL;",
    "7722": "SELECT T.name, SUM(CAST(T.BenchMinor AS INTEGER)) AS Penalties\nFROM Teams T\nWHERE T.T = (\n    SELECT MAX(T2.T)\n    FROM Teams T2\n)\nGROUP BY T.name\nORDER BY Penalties DESC\nLIMIT 1;",
    "7723": "SELECT a.award\nFROM AwardsCoaches a\nJOIN Coaches c ON a.coachID = c.coachID\nGROUP BY a.award\nORDER BY SUM(c.w) DESC\nLIMIT 1;",
    "7724": "SELECT CAST(PPG AS FLOAT) / CAST(PPC AS FLOAT) AS power_play_percentage\nFROM Teams\nWHERE L = (SELECT MAX(L) FROM Teams)",
    "7725": "SELECT AVG(Count) AS AverageHOF\nFROM (\n    SELECT year, COUNT(hofID) AS Count\n    FROM HOF\n    WHERE year BETWEEN 1950 AND 1980\n    GROUP BY year\n)",
    "7726": "SELECT birthCountry, birthYear, COUNT(*) AS num_players\nFROM Master\nGROUP BY birthCountry, birthYear\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "7727": "SELECT T.W\nFROM Teams T\nJOIN Goalies G ON T.year = G.year AND T.tmID = G.tmID\nGROUP BY G.playerID\nORDER BY SUM(CAST(G.SHO AS INTEGER)) DESC\nLIMIT 1",
    "7728": "SELECT tmID\nFROM TeamSplits\nWHERE year = 2005\nORDER BY rW DESC\nLIMIT 1;",
    "7729": "SELECT pos \nFROM Master \nWHERE birthYear IS NOT NULL AND birthMon IS NOT NULL AND birthDay IS NOT NULL \nORDER BY birthYear, birthMon, birthDay \nLIMIT 1 OFFSET 8;",
    "7730": "SELECT MAX(GA) AS MostGoalsAgainst\nFROM Goalies\nWHERE year = 1924 AND lgID = 'WCHL'",
    "7731": "SELECT tmID, MAX(OctL) AS MostOctoberDefeats\nFROM TeamSplits\nWHERE year = 2006\nGROUP BY tmID\nORDER BY MostOctoberDefeats DESC\nLIMIT 1;",
    "7732": "SELECT COUNT(*) \nFROM Master \nWHERE shootCatch IS NULL AND firstNHL = '2011';",
    "7733": "SELECT \n    S.year, \n    (S.year - CAST(M.birthYear AS INTEGER)) AS age \nFROM \n    Scoring S \nJOIN \n    Master M ON S.playerID = M.playerID \nGROUP BY \n    S.playerID \nORDER BY \n    MAX(S.G) DESC, \n    S.year ASC \nLIMIT 1;",
    "7734": "SELECT \n    AVG(CAST(m.height AS INTEGER)) AS avg_height,\n    (SELECT t.tmID\n     FROM Master m\n     JOIN Goalies g ON m.playerID = g.playerID\n     JOIN Teams t ON g.year = t.year AND g.tmID = t.tmID\n     WHERE m.birthYear BETWEEN '1970' AND '1979'\n       AND m.shootCatch = 'L'\n       AND m.pos = 'G'\n     ORDER BY CAST(m.height AS INTEGER) DESC, t.year DESC\n     LIMIT 1) AS team_of_tallest\nFROM Master m\nWHERE m.birthYear BETWEEN '1970' AND '1979'\n  AND m.shootCatch = 'L'\n  AND m.pos = 'G'",
    "7735": "SELECT \n    SUM(s.A) AS total_assists, \n    (m.nameGiven || ' ' || m.lastName) AS full_name\nFROM Scoring s\nJOIN Master m ON s.playerID = m.playerID\nWHERE s.lgID = 'NHL'\nGROUP BY s.playerID\nORDER BY total_assists DESC\nLIMIT 1;",
    "7736": "WITH PKC_Min AS (\n    SELECT year, tmID, MIN(CAST(PKC AS INTEGER)) AS MinPKC\n    FROM Teams\n    GROUP BY year\n    ORDER BY MinPKC ASC\n    LIMIT 1\n),\nPP_Percentage AS (\n    SELECT T.year, T.tmID, T.PPC, T.PPG, (CAST(T.PPG AS FLOAT) / CAST(T.PPC AS FLOAT)) * 100 AS PP_Percentage\n    FROM Teams T\n    JOIN PKC_Min ON T.year = PKC_Min.year AND T.tmID = PKC_Min.tmID\n),\nMatchup AS (\n    SELECT PP_Percentage.year, PP_Percentage.tmID, PP_Percentage.PP_Percentage, Tvt.tmID AS OpponentID,\n    CASE\n        WHEN SeriesPost.tmIDWinner = PP_Percentage.tmID THEN 'Victorious'\n        WHEN SeriesPost.tmIDLoser = PP_Percentage.tmID THEN 'Lost'\n        ELSE 'Unknown'\n    END AS Outcome\n    FROM PP_Percentage\n    LEFT JOIN TeamVsTeam Tvt ON PP_Percentage.tmID = Tvt.tmID AND PP_Percentage.year = Tvt.year\n    LEFT JOIN SeriesPost ON SeriesPost.year = PP_Percentage.year AND (SeriesPost.tmIDWinner = PP_Percentage.tmID OR SeriesPost.tmIDLoser = PP_Percentage.tmID)\n    WHERE Tvt.oppID IS NOT NULL\n    LIMIT 1\n)\nSELECT year, tmID AS Team, PP_Percentage AS \"Power Play Percentage\", OpponentID AS \"Opponent Team\", Outcome\nFROM Matchup;",
    "7737": "SELECT AwardsCoaches.award\nFROM AwardsCoaches\nJOIN Coaches ON AwardsCoaches.coachID = Coaches.coachID\nJOIN (\n    SELECT tmID, year, MAX(W) AS maxWins\n    FROM Teams\n) AS MaxWinsTeam ON Coaches.tmID = MaxWinsTeam.tmID AND Coaches.year = MaxWinsTeam.year\nWHERE Coaches.w = (\n    SELECT MAX(W)\n    FROM Teams\n)",
    "7738": "SELECT Teams.name \nFROM SeriesPost \nJOIN Teams ON SeriesPost.tmIDLoser = Teams.tmID AND SeriesPost.year = Teams.year\nWHERE SeriesPost.note = 'EX' AND SeriesPost.year = 1912;",
    "7739": "SELECT \n    M.nameGiven || ' ' || M.lastName AS FullName,\n    S.year - CAST(M.firstNHL AS INTEGER) AS Duration\nFROM Scoring S\nJOIN Master M ON S.playerID = M.playerID\nWHERE S.lgID = 'NHL' AND M.firstNHL IS NOT NULL\nORDER BY CAST(S.\"+/-\" AS INTEGER)\nLIMIT 1;",
    "7740": "SELECT m.firstName, m.lastName\nFROM Master m\nJOIN Scoring s ON m.playerID = s.playerID\nWHERE s.year BETWEEN 2003 AND 2005\nAND s.PIM BETWEEN 200 AND 250\nGROUP BY m.playerID\nORDER BY SUM(s.GP) DESC\nLIMIT 1;",
    "7741": "SELECT (CAST(lastNHL AS INTEGER) - CAST(birthYear AS INTEGER)) AS AgeAtRetirement\nFROM Master\nWHERE playerID = (\n    SELECT playerID\n    FROM Goalies\n    ORDER BY CAST(GA AS INTEGER)\n    LIMIT 1\n)",
    "7742": "WITH PositionAwards AS (\n    SELECT pos, COUNT(award) AS AwardCount\n    FROM AwardsPlayers\n    GROUP BY pos\n    ORDER BY AwardCount DESC\n    LIMIT 1\n), MostRecentAward AS (\n    SELECT a.pos, a.award, a.playerID, a.year\n    FROM AwardsPlayers a\n    INNER JOIN PositionAwards pa ON a.pos = pa.pos\n    ORDER BY a.year DESC, a.playerID\n    LIMIT 1\n), PlayerInfo AS (\n    SELECT m.playerID, m.nameGiven, m.lastName, mra.award, mra.year, mra.pos\n    FROM Master m\n    INNER JOIN MostRecentAward mra ON m.playerID = mra.playerID\n)\nSELECT pi.pos AS Position, pi.award AS Award, pi.year AS Year, pi.nameGiven || ' ' || pi.lastName AS FullName\nFROM PlayerInfo pi;",
    "7743": "SELECT SUM(g) AS games_before_award\nFROM Coaches\nWHERE coachID = (\n    SELECT coachID\n    FROM AwardsCoaches\n    WHERE award = 'Second Team All-Star'\n    ORDER BY year ASC\n    LIMIT 1\n)\nAND year < (\n    SELECT MIN(year)\n    FROM AwardsCoaches\n    WHERE award = 'Second Team All-Star'\n)",
    "7744": "WITH Victories AS (\n    SELECT \n        tmID, \n        COUNT(DISTINCT oppID) AS OpponentsCount\n    FROM TeamVsTeam\n    WHERE year = 1915\n    GROUP BY tmID\n    ORDER BY SUM(W) DESC\n    LIMIT 1\n)\nSELECT \n    Teams.name AS TeamName, \n    Opponents.name AS OpponentName\nFROM TeamVsTeam\nJOIN Teams ON TeamVsTeam.tmID = Teams.tmID AND TeamVsTeam.year = Teams.year\nJOIN Teams AS Opponents ON TeamVsTeam.oppID = Opponents.tmID AND TeamVsTeam.year = Opponents.year\nJOIN Victories ON TeamVsTeam.tmID = Victories.tmID\nWHERE TeamVsTeam.year = 1915",
    "7745": "SELECT \n    Scoring.playerID, \n    Master.firstName, \n    Master.lastName, \n    MAX(Scoring.GWG) AS MostTrustworthyGWG\nFROM \n    Scoring\nJOIN \n    Master ON Scoring.playerID = Master.playerID\nWHERE \n    Scoring.SHG BETWEEN 1 AND 5\nGROUP BY \n    Scoring.playerID\nORDER BY \n    MostTrustworthyGWG DESC\nLIMIT 1;",
    "7746": "SELECT c.l\nFROM Coaches c\nJOIN Teams t ON c.year = t.year AND c.tmID = t.tmID\nWHERE c.year = 1997 AND t.name LIKE '%Tampa Bay Lightning%' AND c.notes LIKE '%interim%'",
    "7747": "SELECT T.year, T.name, T.rank\nFROM Scoring S\nJOIN Teams T ON S.tmID = T.tmID AND S.year = T.year\nWHERE S.SHA >= 7\nGROUP BY S.playerID\nORDER BY SUM(S.A) DESC\nLIMIT 1",
    "7748": "SELECT Coaches.coachID\nFROM Coaches\nJOIN Teams ON Coaches.year = Teams.year AND Coaches.tmID = Teams.tmID\nWHERE Teams.rank = 4 AND Teams.year = 1969",
    "7749": "SELECT T.name\nFROM TeamsHalf TH\nINNER JOIN Teams T ON TH.tmID = T.tmID AND TH.year = T.year\nWHERE TH.rank = 1 AND TH.half = 1 AND TH.year BETWEEN 1917 AND 1920",
    "7750": "SELECT M.nameGiven || ' ' || M.lastName AS complete_name, S.year, T.name AS team_name\nFROM Master M\nJOIN Scoring S ON M.playerID = S.playerID\nJOIN Teams T ON S.tmID = T.tmID AND S.year = T.year\nWHERE M.birthCountry = 'Canada'\nAND CAST(M.firstNHL AS INTEGER) - CAST(M.birthYear AS INTEGER) BETWEEN 18 AND 24\nGROUP BY M.playerID\nHAVING SUM(S.G) <= 5",
    "7751": "SELECT SUM(CAST(BenchMinor AS INTEGER)) AS TotalBenchMinors\nFROM Teams\nWHERE name = 'St. Louis Blues'",
    "7752": "SELECT CAST(PPG AS REAL) / CAST(PPC AS REAL) AS PowerPlayChances\nFROM Teams\nWHERE name = 'New York Rangers' AND year = 2009;",
    "7753": "SELECT MAX(Pts) AS HighestTotalPoints FROM Teams",
    "7754": "SELECT COUNT(*) \nFROM Teams \nWHERE year = 2006 AND W > L AND Pts > 100;",
    "7755": "SELECT tmID, MAX(CAST(BenchMinor AS INTEGER)) AS MaxBenchMinors\nFROM Teams\nWHERE year = 2006;",
    "7756": "SELECT name \nFROM Teams \nWHERE year = 2006 \nORDER BY CAST(PIM AS INTEGER) DESC \nLIMIT 3;",
    "7757": "SELECT tmID, MAX(PKC) as HighestPKC\nFROM Teams\nWHERE year = 1995 AND tmID IN ('FLA', 'EDM', 'LAK')",
    "7758": "SELECT T.name\nFROM TeamsSC AS T\nWHERE T.year = 1917 AND T.W > T.L;",
    "7759": "SELECT tmID \nFROM TeamsSC \nWHERE year = 1922;",
    "7760": "SELECT COUNT(*) \nFROM TeamsSC \nWHERE year = 1922 AND Pts > 20;",
    "7761": "SELECT PIM \nFROM TeamsSC \nWHERE year = 1923 AND tmID IN (\n    SELECT tmID \n    FROM Teams \n    WHERE year = 1923 AND rank = 2\n)",
    "7762": "SELECT T.name, MAX(GSC.W) AS MostWins\nFROM TeamsSC GSC\nJOIN Teams T ON GSC.tmID = T.tmID AND GSC.year = T.year\nGROUP BY T.name\nORDER BY MostWins DESC\nLIMIT 1;",
    "7763": "SELECT W FROM TeamVsTeam WHERE year = 1985 AND tmID = (SELECT tmID FROM Teams WHERE name = 'Philadelphia Flyers' AND year = 1985) AND oppID = (SELECT tmID FROM Teams WHERE name = 'Boston Bruins' AND year = 1985)",
    "7764": "SELECT name FROM Teams WHERE year = 1909 AND T > 0;",
    "7765": "SELECT DISTINCT Master.firstName\nFROM Master\nJOIN Coaches ON Master.coachID = Coaches.coachID\nJOIN Teams ON Coaches.year = Teams.year AND Coaches.tmID = Teams.tmID\nWHERE Teams.name = \"Montreal Canadiens\"",
    "7766": "SELECT COUNT(DISTINCT Coaches.coachID) \nFROM Coaches \nJOIN Teams ON Coaches.year = Teams.year AND Coaches.tmID = Teams.tmID \nJOIN Master ON Coaches.coachID = Master.coachID \nWHERE Teams.name = 'Montreal Canadiens' AND Master.hofID IS NOT NULL;",
    "7767": "SELECT MAX(height) AS tallest_height\nFROM Master\nJOIN Coaches ON Master.coachID = Coaches.coachID\nJOIN Teams ON Coaches.year = Teams.year AND Coaches.tmID = Teams.tmID\nWHERE Teams.name = 'Montreal Canadiens'",
    "7768": "SELECT Master.firstName\nFROM Master\nJOIN Coaches ON Master.coachID = Coaches.coachID\nJOIN TeamsPost ON Coaches.year = TeamsPost.year AND Coaches.tmID = TeamsPost.tmID\nWHERE TeamsPost.year = 1922",
    "7769": "SELECT COUNT(DISTINCT c.coachID) \nFROM Coaches c \nJOIN Teams t ON c.year = t.year AND c.tmID = t.tmID \nJOIN Master m ON c.coachID = m.coachID \nWHERE t.name = 'Philadelphia Flyers' AND m.birthMon = '3'",
    "7770": "SELECT COUNT(DISTINCT Coaches.coachID) \nFROM Coaches \nJOIN Master ON Coaches.coachID = Master.coachID \nJOIN Teams ON Coaches.year = Teams.year AND Coaches.tmID = Teams.tmID \nWHERE Master.birthCountry = 'USA' AND Teams.name = 'Philadelphia Flyers';",
    "7771": "SELECT COUNT(DISTINCT c.coachID) \nFROM Coaches c \nJOIN Teams t ON c.year = t.year AND c.tmID = t.tmID \nJOIN Master m ON c.coachID = m.coachID \nWHERE t.name = 'Buffalo Sabres' AND m.deathYear IS NOT NULL;",
    "7772": "SELECT DISTINCT m.nameNick\nFROM Master m\nJOIN Coaches c ON m.coachID = c.coachID\nJOIN Teams t ON c.year = t.year AND c.tmID = t.tmID\nWHERE m.birthCountry = 'USA' AND t.name = 'Buffalo Sabres' AND m.nameNick IS NOT NULL;",
    "7773": "SELECT COUNT(DISTINCT c.coachID) \nFROM Coaches c \nJOIN Master m ON c.coachID = m.coachID \nJOIN TeamsPost tp ON c.year = tp.year AND c.tmID = tp.tmID \nWHERE tp.year = 1922 AND m.birthCountry = 'USA';",
    "7774": "SELECT tmID, SUM(G) AS total_games\nFROM TeamVsTeam\nWHERE year = 2000 AND oppID = (SELECT tmID FROM Teams WHERE name LIKE '%Buffalo Sabres%' AND year = 2000)\nGROUP BY tmID\nORDER BY total_games DESC\nLIMIT 1;",
    "7775": "SELECT DISTINCT Teams.name\nFROM TeamVsTeam\nJOIN Teams ON TeamVsTeam.oppID = Teams.tmID AND TeamVsTeam.year = Teams.year\nWHERE TeamVsTeam.tmID IN (\n    SELECT tmID\n    FROM Teams\n    WHERE name = 'Buffalo Sabres'\n)",
    "7776": "SELECT PIM FROM TeamsPost WHERE year = 1918 AND tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens' AND year = 1918)",
    "7777": "SELECT SUM(W) as total_wins\nFROM TeamsSC\nWHERE tmID = (SELECT tmID FROM TeamsSC WHERE PIM = '24' AND year IN (SELECT year FROM Teams WHERE name LIKE '%Montreal Canadiens%'))",
    "7778": "SELECT year FROM TeamsSC WHERE tmID = 'MTL' AND PIM = '49' AND (year = 1924 OR year = 1923 OR year = 1918);",
    "7779": "SELECT Master.firstName\nFROM Coaches\nJOIN Teams ON Coaches.year = Teams.year AND Coaches.tmID = Teams.tmID\nJOIN Master ON Coaches.coachID = Master.coachID\nWHERE Teams.tmID = 'MTL'\nORDER BY Coaches.year ASC\nLIMIT 1",
    "7780": "SELECT \n    AVG(W * 1.0 / G) AS avg_winning_rate\nFROM \n    TeamVsTeam\nWHERE \n    year = 2000 AND \n    tmID = (SELECT tmID FROM Teams WHERE name = 'Buffalo Sabres' AND year = 2000);",
    "7781": "SELECT AVG(PIM) AS AvgPenaltyMinutes\nFROM TeamsSC\nJOIN Teams ON TeamsSC.year = Teams.year AND TeamsSC.tmID = Teams.tmID\nWHERE Teams.name = \"Montreal Canadiens\"",
    "7782": "SELECT \n    AVG(WinRate) AS AvgWinRate\nFROM \n    (\n        SELECT \n            tmID, \n            year, \n            CAST(SUM(W) AS FLOAT) / SUM(G) AS WinRate\n        FROM \n            TeamsPost\n        WHERE \n            tmID = 'MTL'\n        GROUP BY \n            year\n    )",
    "7783": "SELECT \n    (SELECT CAST(COUNT(DISTINCT c.coachID) AS FLOAT)\n     FROM Coaches c\n     JOIN Teams t ON c.year = t.year AND c.tmID = t.tmID\n     JOIN Master m ON c.coachID = m.coachID\n     WHERE t.name = 'Montreal Canadiens' AND m.birthCountry = 'USA') /\n    (SELECT CAST(COUNT(DISTINCT c.coachID) AS FLOAT)\n     FROM Coaches c\n     JOIN Teams t ON c.year = t.year AND c.tmID = t.tmID\n     WHERE t.name = 'Montreal Canadiens') \n    AS percentage;",
    "7784": "SELECT M.firstName || ' ' || M.lastName AS FullName\nFROM HOF H\nJOIN Master M ON H.hofID = M.hofID\nWHERE H.category NOT IN ('player', 'builder')\nAND H.year = (SELECT MAX(year) FROM HOF WHERE category NOT IN ('player', 'builder'))",
    "7785": "SELECT hofID \nFROM HOF \nWHERE category = 'referee' \nAND year BETWEEN 1970 AND 1979",
    "7786": "SELECT COUNT(*) AS Total_Hall_of_Famers\nFROM HOF\nWHERE year = 1958 AND category = 'Player'",
    "7787": "SELECT COUNT(DISTINCT Master.hofID) \nFROM Master \nJOIN HOF ON Master.hofID = HOF.hofID \nWHERE Master.playerID IS NOT NULL AND Master.coachID IS NOT NULL;",
    "7788": "SELECT COUNT(*) \nFROM Master \nWHERE lastName = 'Green' AND playerID IS NOT NULL AND coachID IS NULL;",
    "7789": "SELECT T.BenchMinor\nFROM Teams T\nJOIN Coaches C ON T.year = C.year AND T.tmID = C.tmID\nJOIN Master M ON C.coachID = M.coachID\nWHERE M.firstName = 'Scotty' AND M.lastName = 'Bowman' AND C.year = 1982",
    "7790": "SELECT M.firstName || ' ' || M.lastName AS FullName\nFROM Master M\nJOIN Goalies G ON M.playerID = G.playerID\nWHERE G.ENG = '10'\nORDER BY CAST(M.height AS INTEGER) DESC\nLIMIT 1;",
    "7791": "SELECT Master.firstName || ' ' || Master.lastName AS FullName, Master.shootCatch AS DominantHand\nFROM Goalies\nJOIN Master ON Goalies.playerID = Master.playerID\nWHERE Goalies.year = 1973 AND Goalies.tmID = 'QUN' AND Goalies.GP = '32'",
    "7792": "SELECT COUNT(DISTINCT tmID) \nFROM Goalies \nJOIN Master ON Goalies.playerID = Master.playerID \nWHERE lastName = \"Young\";",
    "7793": "SELECT m.firstName, m.lastName\nFROM Master m\nJOIN Goalies g ON m.playerID = g.playerID\nJOIN Coaches c ON m.coachID = c.coachID\nJOIN HOF h ON m.hofID = h.hofID\nWHERE g.year = 1972 AND g.tmID = 'BOS' AND m.coachID IS NOT NULL AND m.hofID IS NOT NULL;",
    "7794": "SELECT SUM(GP) as TotalGamesPlayed\nFROM Goalies\nJOIN Master ON Goalies.playerID = Master.playerID\nWHERE Master.legendsID = \"P196402\"",
    "7795": "SELECT M.firstName || ' ' || M.lastName AS FullName\nFROM Goalies G\nJOIN Master M ON G.playerID = M.playerID\nJOIN Teams T ON G.year = T.year AND G.tmID = T.tmID\nWHERE T.name = 'Quebec Bulldogs' AND M.pos = 'G'\nORDER BY CAST(G.Min AS INTEGER) DESC\nLIMIT 1;",
    "7796": "SELECT COUNT(DISTINCT g.playerID) \nFROM Goalies g\nJOIN Teams t ON g.year = t.year AND g.tmID = t.tmID\nWHERE t.name = 'Calgary Flames';",
    "7797": "SELECT g.playerID, MAX(g.GA) AS MostGoalsAgainst\nFROM Goalies g\nJOIN Teams t ON g.year = t.year AND g.tmID = t.tmID\nWHERE t.name = 'Minnesota North Stars'\nGROUP BY g.playerID\nORDER BY MostGoalsAgainst DESC\nLIMIT 1;",
    "7798": "SELECT COUNT(DISTINCT g.playerID) AS HallOfFameGoalies\nFROM Goalies g\nJOIN Master m ON g.playerID = m.playerID\nJOIN HOF h ON m.hofID = h.hofID\nWHERE g.tmID = 'HAI' AND h.category = 'Player';",
    "7799": "SELECT M.shootCatch\nFROM Goalies G\nJOIN Master M ON G.playerID = M.playerID\nWHERE G.year = 2010\nORDER BY CAST(G.SHO AS INTEGER) DESC\nLIMIT 1;",
    "7800": "SELECT \n    ((SUM(CASE WHEN year = 2005 THEN GP ELSE 0 END) - SUM(CASE WHEN year = 2006 THEN GP ELSE 0 END)) * 1.0 / SUM(CASE WHEN year = 2005 THEN GP ELSE 0 END)) * 100 AS decrease_rate\nFROM \n    Goalies\nWHERE \n    playerID = (SELECT playerID FROM Master WHERE lastName = 'Aebischer' AND firstName = 'David');",
    "7801": "SELECT DISTINCT Master.playerID, Master.coachID\nFROM Master\nJOIN Coaches ON Master.coachID = Coaches.coachID\nWHERE Master.playerID IS NOT NULL AND Master.coachID IS NOT NULL;",
    "7802": "SELECT playerID FROM Master WHERE height = '75'",
    "7803": "SELECT playerID\nFROM Master\nORDER BY CAST(weight AS INTEGER) DESC\nLIMIT 5",
    "7804": "SELECT firstName || ' ' || lastName AS FullName\nFROM Master\nWHERE birthCountry = 'Finland';",
    "7805": "SELECT playerID FROM Master WHERE deathYear IS NOT NULL;",
    "7806": "SELECT DISTINCT Master.firstName\nFROM Coaches\nJOIN Master ON Coaches.coachID = Master.coachID\nWHERE Coaches.year > 2000",
    "7807": "SELECT M.height, M.weight\nFROM Master M\nJOIN Coaches C ON M.coachID = C.coachID\nJOIN AwardsCoaches AC ON C.coachID = AC.coachID\nWHERE AC.year = 1930",
    "7808": "SELECT \n    SUM(G) AS total_goals, \n    (strftime('%Y', 'now') - birthYear) AS age\nFROM \n    Scoring \nJOIN \n    Master ON Scoring.playerID = Master.playerID\nWHERE \n    Scoring.playerID = 'aaltoan01'",
    "7809": "SELECT a.coachID\nFROM AwardsCoaches a\nJOIN Master m ON a.coachID = m.coachID\nWHERE m.playerID IS NULL",
    "7810": "SELECT playerID \nFROM Master \nWHERE pos = 'L' AND weight > '200'",
    "7811": "SELECT SUM(GP) AS TotalGamesPlayed\nFROM Master\nJOIN Scoring ON Master.playerID = Scoring.playerID\nWHERE birthCountry = 'USA'",
    "7812": "SELECT SUM(Scoring.Pts) AS TotalPointsScored, GROUP_CONCAT(DISTINCT Coaches.coachID) AS Coaches\nFROM Scoring\nJOIN Teams ON Scoring.year = Teams.year AND Scoring.tmID = Teams.tmID\nLEFT JOIN Coaches ON Teams.year = Coaches.year AND Teams.tmID = Coaches.tmID\nWHERE Teams.tmID = 'ANA'",
    "7813": "SELECT G FROM Teams WHERE year = 1976 AND tmID = 'BIR' AND divID = 'EW';",
    "7814": "SELECT \n    Teams.L AS losses, \n    SUM(Scoring.A) AS assists\nFROM \n    Teams\nLEFT JOIN \n    Scoring ON Teams.year = Scoring.year AND Teams.tmID = Scoring.tmID\nWHERE \n    Teams.year = 2010 AND Teams.tmID = 'BOS'",
    "7815": "SELECT SUM(weight) AS total_weight\nFROM Master\nWHERE playerID IN (\n    SELECT playerID\n    FROM Scoring\n    WHERE tmID = 'ANA' AND year = 1997\n    UNION\n    SELECT playerID\n    FROM Goalies\n    WHERE tmID = 'ANA' AND year = 1997\n)",
    "7816": "SELECT M.playerID, M.height, S.tmID\nFROM Master M\nJOIN Scoring S ON M.playerID = S.playerID\nWHERE M.height IS NOT NULL AND S.year BETWEEN 1925 AND 1936\nORDER BY CAST(M.height AS INTEGER), S.year\nLIMIT 1;",
    "7817": "WITH TeamWinRates AS (\n    SELECT \n        tmID, \n        CAST(SUM(W) AS FLOAT) / (SUM(W) + SUM(L)) AS WinRate\n    FROM Teams\n    WHERE year = 2000\n    GROUP BY tmID\n    ORDER BY WinRate DESC\n    LIMIT 1\n),\nTopTeamPlayers AS (\n    SELECT \n        Master.playerID, \n        Master.birthCountry\n    FROM Master\n    JOIN Scoring ON Master.playerID = Scoring.playerID\n    WHERE Scoring.year = 2000 AND Scoring.tmID = (SELECT tmID FROM TeamWinRates)\n    GROUP BY Master.playerID\n)\nSELECT DISTINCT\n    birthCountry\nFROM TopTeamPlayers;",
    "7818": "SELECT \n    Teams.tmID,\n    CAST(Teams.W AS REAL) / Teams.G AS WinsPerGame,\n    (SELECT Scoring.playerID \n     FROM Scoring \n     WHERE Scoring.year = Teams.year AND Scoring.tmID = Teams.tmID \n     ORDER BY Scoring.G DESC LIMIT 1) AS TopGoalScorer\nFROM Teams\nWHERE Teams.year = 1998 AND Teams.tmID = 'CAR'",
    "7819": "SELECT Name FROM Country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country)",
    "7820": "SELECT Country.Name \nFROM Country \nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T' \nLIMIT 5;",
    "7821": "SELECT AVG(Population) AS AvgPopulationPerCity\nFROM City\nWHERE District = 'Karnataka'",
    "7822": "SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA';",
    "7823": "SELECT COUNT(*) AS NumberOfCountriesUsingPortuguese\nFROM CountryLanguage\nWHERE Language = 'Portuguese'",
    "7824": "SELECT COUNT(*) FROM City WHERE District = 'England';",
    "7825": "SELECT COUNT(*) AS NumberOfCities\nFROM City\nWHERE CountryCode = (\n  SELECT Code\n  FROM Country\n  ORDER BY SurfaceArea DESC\n  LIMIT 1\n)",
    "7826": "SELECT City.Name AS CapitalCity, City.Population AS Population\nFROM City\nJOIN Country ON City.ID = Country.Capital\nWHERE Country.Name = 'San Marino'",
    "7827": "SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Turkmenistan')",
    "7828": "SELECT \n    Country.Name AS CountryName, \n    City.Name AS CapitalCity, \n    CountryLanguage.Language AS OfficialLanguage\nFROM \n    Country\nJOIN \n    City ON Country.Capital = City.ID\nJOIN \n    CountryLanguage ON Country.Code = CountryLanguage.CountryCode\nWHERE \n    CountryLifeExpectancy = (\n        SELECT MAX(LifeExpectancy) \n        FROM Country\n    )\n    AND CountryLanguage.IsOfficial = 'T'",
    "7829": "SELECT Country.Name AS CountryName, CountryLanguage.Language AS OfficialLanguage\nFROM Country\nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode\nWHERE Country.Continent = 'Antarctica' AND CountryLanguage.IsOfficial = 'T'",
    "7830": "SELECT Country.Name \nFROM Country \nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T' \nLIMIT 5;",
    "7831": "SELECT cl.Language\nFROM CountryLanguage cl\nJOIN Country c ON cl.CountryCode = c.Code\nWHERE c.Region = 'Baltic Countries' AND cl.Percentage > 80",
    "7832": "SELECT cl.Language\nFROM CountryLanguage cl\nJOIN Country c ON cl.CountryCode = c.Code\nWHERE c.Region = 'Baltic Countries' AND cl.Percentage > 80",
    "7833": "SELECT City.Name AS CityName, Country.Name AS CountryName, Country.LifeExpectancy\nFROM City\nJOIN Country ON City.CountryCode = Country.Code\nORDER BY City.Population DESC\nLIMIT 1",
    "7834": "SELECT \n    City.Name AS CapitalCity, \n    CountryLanguage.Language, \n    CountryLanguage.IsOfficial, \n    CountryLanguage.Percentage\nFROM \n    Country\nJOIN \n    City ON Country.Capital = City.ID\nJOIN \n    CountryLanguage ON Country.Code = CountryLanguage.CountryCode\nWHERE \n    Country.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country)",
    "7835": "SELECT \n    Country.Name AS Country, \n    Country.Population, \n    City.Name AS CapitalCity, \n    CountryLanguage.Language AS OfficialLanguage\nFROM \n    Country\nJOIN \n    City ON Country.Capital = City.ID\nJOIN \n    CountryLanguage ON Country.Code = CountryLanguage.CountryCode\nWHERE \n    Country.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country)\n    AND CountryLanguage.IsOfficial = 'T'",
    "7836": "SELECT \n    (COUNT(DISTINCT CASE WHEN cl.Language = 'English' THEN c.Code END) * 1.0 / COUNT(DISTINCT c.Code)) * 100 AS PercentageOfCountriesUsingEnglish\nFROM \n    Country c\nJOIN \n    CountryLanguage cl ON c.Code = cl.CountryCode\nWHERE \n    c.Continent = 'North America';",
    "7837": "SELECT District FROM City WHERE Population = (SELECT MIN(Population) FROM City)",
    "7838": "SELECT Continent \nFROM Country \nWHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country)",
    "7839": "SELECT c.HeadOfState\nFROM Country c\nJOIN City ci ON c.Code = ci.CountryCode\nORDER BY ci.Population DESC\nLIMIT 1",
    "7840": "SELECT c.Name \nFROM Country c \nJOIN CountryLanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language = 'English' AND cl.IsOfficial = 'T' \nORDER BY c.Capital DESC \nLIMIT 1;",
    "7841": "SELECT City.Name \nFROM City \nJOIN Country ON City.CountryCode = Country.Code \nWHERE Country.LifeExpectancy = 66.4;",
    "7842": "SELECT c.HeadOfState \nFROM Country c \nJOIN CountryLanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language = 'English' \nORDER BY cl.Percentage ASC \nLIMIT 1",
    "7843": "SELECT Country.SurfaceArea\nFROM City\nJOIN Country ON City.CountryCode = Country.Code\nWHERE City.Name = 'Sutton Coldfield'",
    "7844": "SELECT CountryLanguage.Language\nFROM CountryLanguage\nJOIN Country ON CountryLanguage.CountryCode = Country.Code\nWHERE Country.Population < 8000",
    "7845": "SELECT Language \nFROM CountryLanguage \nWHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Belgium') AND IsOfficial = 'T'",
    "7846": "SELECT City.Name, City.District\nFROM City\nJOIN Country ON City.CountryCode = Country.Code\nWHERE Country.LocalName = 'Hajastan'",
    "7847": "SELECT COUNT(*) AS NumberOfLanguages FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Cyprus')",
    "7848": "SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Belize')",
    "7849": "SELECT District FROM City\nWHERE CountryCode IN (\n  SELECT Code FROM Country\n  WHERE HeadOfState = 'Adolf Ogi'\n)",
    "7850": "SELECT c.HeadOfState\nFROM City ci\nJOIN Country c ON ci.CountryCode = c.Code\nWHERE ci.District = 'Santa Catarina'",
    "7851": "SELECT \n    (CAST(SUM(CASE WHEN cl.Language = 'English' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    Country c\nJOIN \n    CountryLanguage cl ON c.Code = cl.CountryCode\nWHERE \n    c.GNP > 1500\n    AND cl.IsOfficial = 'T'\nGROUP BY \n    cl.IsOfficial",
    "7852": "SELECT \n  (SELECT COUNT(*) \n   FROM Country \n   JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \n   WHERE CountryLanguage.Language = 'English' AND Country.GovernmentForm = 'Republic') \n  -\n  (SELECT COUNT(*) \n   FROM Country \n   JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \n   WHERE CountryLanguage.Language = 'English' AND Country.GovernmentForm = 'Constitutional Monarchy') \nAS Difference;",
    "7853": "SELECT `Name` FROM `Country` WHERE `IndepYear` = 1994;",
    "7854": "SELECT Name FROM Country WHERE Continent = 'Asia';",
    "7855": "SELECT Name \nFROM Country \nWHERE Continent = 'Asia' \nORDER BY GNP DESC \nLIMIT 1",
    "7856": "SELECT COUNT(*) AS NumberOfCitiesInPhilippines FROM City WHERE CountryCode = 'PHL';",
    "7857": "SELECT LocalName FROM Country WHERE Name = 'Ukraine'",
    "7858": "SELECT COUNT(*) FROM Country WHERE GovernmentForm = 'Socialistic Republic';",
    "7859": "SELECT Language \nFROM CountryLanguage \nWHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'China') AND IsOfficial = 'T'",
    "7860": "SELECT Percentage FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'China') AND Language = 'Chinese'",
    "7861": "SELECT GovernmentForm \nFROM Country \nJOIN City ON Country.Code = City.CountryCode \nWHERE City.Name = 'Manila'",
    "7862": "SELECT City.Name \nFROM City \nJOIN Country ON City.ID = Country.Capital \nWHERE Country.Name = 'Philippines'",
    "7863": "SELECT DISTINCT CountryLanguage.Language\nFROM CountryLanguage\nJOIN Country ON CountryLanguage.CountryCode = Country.Code\nWHERE Country.Continent = 'Europe'",
    "7864": "SELECT Country.HeadOfState \nFROM Country \nJOIN City ON Country.Code = City.CountryCode \nWHERE City.Name = 'Pyongyang'",
    "7865": "SELECT COUNT(*) AS UnofficialLanguagesInItaly\nFROM CountryLanguage\nWHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Italy') AND IsOfficial = 'F'",
    "7866": "SELECT City.Name \nFROM City \nJOIN Country ON City.CountryCode = Country.Code \nWHERE Country.Name = 'Russia' \nORDER BY City.Population ASC \nLIMIT 1",
    "7867": "SELECT City.Name \nFROM City \nJOIN Country ON City.CountryCode = Country.Code \nWHERE Country.LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM Country)",
    "7868": "SELECT cl.Language, cl.IsOfficial\nFROM CountryLanguage cl\nJOIN Country c ON cl.CountryCode = c.Code\nWHERE c.IndepYear = 1830",
    "7869": "SELECT City.Name \nFROM City \nJOIN Country ON City.ID = Country.Capital \nWHERE Country.Population = (\n    SELECT MAX(Population) \n    FROM Country\n)",
    "7870": "SELECT Country.Name \nFROM Country \nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE Country.Continent = 'Asia' \nAND CountryLanguage.Language = 'English' \nAND CountryLanguage.IsOfficial = 'F';",
    "7871": "SELECT AVG(Country.GNP) AS AverageGNP\nFROM Country\nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode\nWHERE CountryLanguage.Language = 'Arabic'",
    "7872": "SELECT \n    (SUM(CASE WHEN cl.Language = 'Chinese' THEN c.SurfaceArea ELSE 0 END) / SUM(c.SurfaceArea)) * 100 AS PercentageSurfaceAreaChinese\nFROM \n    Country c\nJOIN \n    CountryLanguage cl ON c.Code = cl.CountryCode",
    "7873": "SELECT Name FROM Country WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);",
    "7874": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1",
    "7875": "SELECT CountryLanguage.Language \nFROM CountryLanguage \nJOIN Country ON CountryLanguage.CountryCode = Country.Code \nORDER BY Country.Population ASC \nLIMIT 1",
    "7876": "SELECT Country.Name \nFROM Country \nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T'",
    "7877": "SELECT cl.Language\nFROM CountryLanguage cl\nJOIN Country c ON cl.CountryCode = c.Code\nWHERE c.IndepYear > 1990 AND cl.IsOfficial = 'T'",
    "7878": "SELECT Percentage \nFROM CountryLanguage \nWHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Australia') \nAND Language = 'English'",
    "7879": "SELECT Language \nFROM CountryLanguage \nWHERE CountryCode = (\n  SELECT Code \n  FROM Country \n  WHERE Name = 'Malaysia'\n)",
    "7880": "SELECT Country.Name \nFROM City \nJOIN Country ON City.CountryCode = Country.Code \nORDER BY City.Population DESC \nLIMIT 1",
    "7881": "SELECT c.LifeExpectancy\nFROM Country c\nJOIN City ci ON c.Code = ci.CountryCode\nORDER BY ci.Population DESC\nLIMIT 1",
    "7882": "SELECT c.GNP\nFROM Country AS c\nJOIN City AS ci ON c.Code = ci.CountryCode\nORDER BY ci.Population ASC\nLIMIT 1;",
    "7883": "WITH CityRank AS (\n  SELECT CountryCode\n  FROM City\n  ORDER BY Population DESC\n  LIMIT 5\n),\nLangCount AS (\n  SELECT CountryCode, COUNT(Language) AS NumLanguages\n  FROM CountryLanguage\n  WHERE CountryCode IN (SELECT CountryCode FROM CityRank)\n  GROUP BY CountryCode\n)\nSELECT CountryCode\nFROM LangCount\nORDER BY NumLanguages DESC\nLIMIT 1",
    "7884": "SELECT \n    Country.Name AS CountryName, \n    City.Name AS CityName, \n    Country.SurfaceArea, \n    City.Population\nFROM Country\nJOIN City ON Country.Code = City.CountryCode\nWHERE Country.SurfaceArea = (\n    SELECT MIN(SurfaceArea) FROM Country\n) AND City.Population = (\n    SELECT MAX(Population) FROM City\n)",
    "7885": "SELECT City.Name \nFROM City \nJOIN Country ON City.CountryCode = Country.Code \nWHERE Country.Name = 'China'",
    "7886": "SELECT City.Name \nFROM City \nJOIN Country ON City.CountryCode = Country.Code \nWHERE Country.LocalName = '\u00c2\u00b4Uman'",
    "7887": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM Country\nWHERE Code IN (\n    SELECT CountryCode\n    FROM CountryLanguage\n    WHERE Language = 'Arabic'\n)",
    "7888": "SELECT \n    (GNP - GNPOld) / GNPOld AS GNPGrowthRate\nFROM \n    Country\nWHERE \n    Code = (SELECT CountryCode FROM City WHERE Name = 'Shanghai')",
    "7889": "SELECT District FROM City WHERE Name = 'Zaanstad';",
    "7890": "SELECT Name FROM City WHERE Population = (SELECT MAX(Population) FROM City)",
    "7891": "SELECT District FROM City WHERE Population = 201843;",
    "7892": "SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1",
    "7893": "SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1;",
    "7894": "SELECT IndepYear FROM Country WHERE Name = 'Brunei'",
    "7895": "SELECT COUNT(*) FROM Country WHERE GNP IS NULL OR GNP = 0;",
    "7896": "SELECT AVG(SurfaceArea) AS average_surface_area FROM Country;",
    "7897": "SELECT COUNT(*) AS NumberOfLanguages\nFROM CountryLanguage\nWHERE CountryCode = (\n    SELECT CountryCode\n    FROM City\n    WHERE District = 'Tocantins'\n)",
    "7898": "SELECT District \nFROM City \nWHERE CountryCode = (\n  SELECT Code \n  FROM Country \n  ORDER BY SurfaceArea DESC \n  LIMIT 1\n)",
    "7899": "SELECT COUNT(*) AS NumberOfCities\nFROM City\nJOIN Country ON City.CountryCode = Country.Code\nWHERE Country.HeadOfState = 'Kostis Stefanopoulos'",
    "7900": "SELECT Language \nFROM CountryLanguage \nWHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Greece') AND IsOfficial = 'T'",
    "7901": "SELECT Country.Population \nFROM Country \nJOIN City ON Country.Code = City.CountryCode \nWHERE City.Name = 'Queimados'",
    "7902": "SELECT cl.Language \nFROM CountryLanguage cl\nJOIN Country c ON cl.CountryCode = c.Code\nJOIN City ci ON c.Code = ci.CountryCode\nWHERE cl.IsOfficial = 'T' AND ci.Population = (\n    SELECT MIN(Population) \n    FROM City\n)",
    "7903": "SELECT c.SurfaceArea, c.GNP\nFROM Country c\nJOIN City ci ON c.Code = ci.CountryCode\nWHERE ci.District = 'Namibe'",
    "7904": "SELECT Country.Name \nFROM Country \nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T'",
    "7905": "SELECT District FROM City WHERE CountryCode = (\n  SELECT Code FROM Country ORDER BY SurfaceArea ASC LIMIT 1\n)",
    "7906": "SELECT Country.Name \nFROM Country \nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE Country.GNP < 1000 \nAND CountryLanguage.Language = 'Dutch'",
    "7907": "SELECT c.GNP\nFROM Country c\nJOIN City ci ON c.Code = ci.CountryCode\nWHERE ci.District = 'Entre Rios'",
    "7908": "SELECT Country.LocalName\nFROM City\nJOIN Country ON City.CountryCode = Country.Code\nWHERE City.Name = 'The Valley'",
    "7909": "SELECT City.Name \nFROM City \nJOIN Country ON City.CountryCode = Country.Code \nWHERE Country.SurfaceArea > 7000000;",
    "7910": "SELECT c.LifeExpectancy\nFROM Country c\nJOIN CountryLanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Japanese'",
    "7911": "SELECT COUNT(*) AS NumberOfCities\nFROM City\nJOIN Country ON City.CountryCode = Country.Code\nWHERE Country.SurfaceArea = 652090;",
    "7912": "SELECT CountryLanguage.Language\nFROM CountryLanguage\nJOIN Country ON CountryLanguage.CountryCode = Country.Code\nWHERE Country.IndepYear BETWEEN 1980 AND 1995",
    "7913": "SELECT c.LifeExpectancy\nFROM Country c\nJOIN City ci ON c.Code = ci.CountryCode\nWHERE ci.Name = 'Calama'",
    "7914": "SELECT Language \nFROM CountryLanguage \nWHERE CountryCode IN (\n    SELECT Code \n    FROM Country \n    WHERE HeadOfState = 'Pierre Buyoya'\n)",
    "7915": "SELECT \n  (CAST(SUM(CASE WHEN c.GovernmentForm = 'Constitutional Monarchy' AND ci.District = 'England' THEN 1 ELSE 0 END) AS REAL) / \n  CAST(SUM(CASE WHEN c.GovernmentForm = 'Constitutional Monarchy' THEN 1 ELSE 0 END) AS REAL)) * 100 AS Percentage\nFROM \n  City ci\nJOIN \n  Country c ON ci.CountryCode = c.Code\nWHERE \n  c.GovernmentForm = 'Constitutional Monarchy'",
    "7916": "SELECT DISTINCT Country.Name\nFROM City\nJOIN Country ON City.CountryCode = Country.Code\nWHERE City.Population BETWEEN 140000 AND 150000\nAND Country.LifeExpectancy > (\n  SELECT AVG(LifeExpectancy) * 0.8\n  FROM Country\n  WHERE LifeExpectancy IS NOT NULL\n)",
    "7917": "SELECT \n    (CAST(SUM(CASE WHEN c.GovernmentForm = 'Republic' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS PercentageOfRepublics\nFROM \n    CountryLanguage cl\nJOIN \n    Country c ON cl.CountryCode = c.Code\nWHERE \n    cl.Language = 'Italian'",
    "7918": "SELECT MAX(podcast_count) AS max_podcasts_in_category\nFROM (\n    SELECT category, COUNT(podcast_id) AS podcast_count\n    FROM categories\n    GROUP BY category\n)",
    "7919": "WITH categorized_podcasts AS (\n    SELECT \n        podcast_id,\n        COUNT(category) AS category_count\n    FROM categories\n    GROUP BY podcast_id\n),\npodcasts_in_four_or_more_categories AS (\n    SELECT \n        podcast_id\n    FROM categorized_podcasts\n    WHERE category_count >= 4\n),\ntotal_podcasts AS (\n    SELECT \n        COUNT(DISTINCT podcast_id) AS total\n    FROM categories\n),\npodcasts_in_four_or_more_total AS (\n    SELECT \n        COUNT(podcast_id) AS in_four_or_more\n    FROM podcasts_in_four_or_more_categories\n)\nSELECT \n    (CAST(in_four_or_more AS REAL) / total) * 100 AS percentage\nFROM \n    podcasts_in_four_or_more_total, total_podcasts;",
    "7920": "SELECT itunes_id, itunes_url FROM podcasts WHERE title = 'Brown Suga Diaries';",
    "7921": "SELECT title, itunes_url\nFROM podcasts\nWHERE title LIKE '%Dream%'",
    "7922": "SELECT c.category\nFROM categories c\nJOIN podcasts p ON c.podcast_id = p.podcast_id\nWHERE p.title = 'I Heart My Life Show'",
    "7923": "SELECT p.title, p.itunes_url\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'society-culture'",
    "7924": "SELECT COUNT(DISTINCT r.author_id) AS people_count\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE r.rating = 5\nAND r.title LIKE '%spoiler%'\nAND c.category = 'art'",
    "7925": "SELECT DISTINCT r.author_id\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE p.title = 'Pop Rocket'\nAND r.created_at LIKE '2016%'\nAND r.rating < 5",
    "7926": "SELECT p.title, c.category\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nJOIN reviews r ON p.podcast_id = r.podcast_id\nGROUP BY p.podcast_id, c.category\nHAVING AVG(r.rating) > 3.0",
    "7927": "SELECT r.content, p.title\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'fiction' AND r.rating = 5",
    "7928": "SELECT p.title AS podcast_title, r.content AS review_content, r.rating\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE r.title = 'Love it!'",
    "7929": "SELECT r.author_id AS author, r.rating, r.created_at AS review_creation_date\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE p.title = 'In The Thick'",
    "7930": "SELECT \n    p.title,\n    r.created_at,\n    r.rating\nFROM \n    reviews r\nJOIN \n    podcasts p ON r.podcast_id = p.podcast_id\nORDER BY \n    r.created_at DESC\nLIMIT 1;",
    "7931": "SELECT p.title, r.rating, r.content\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE r.author_id = '76A4C24B6038145'",
    "7932": "SELECT p.title AS podcast_title, r.title AS review_title, r.content\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE r.rating = 1",
    "7933": "SELECT p.title AS podcast_title, r.title AS review_title, r.rating\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE r.created_at LIKE '2019-05%'",
    "7934": "SELECT AVG(rating) AS average_rating\nFROM reviews\nWHERE podcast_id = (\n    SELECT podcast_id\n    FROM reviews\n    GROUP BY podcast_id\n    ORDER BY COUNT(podcast_id) DESC\n    LIMIT 1\n)",
    "7935": "SELECT category \nFROM categories \nJOIN podcasts ON categories.podcast_id = podcasts.podcast_id \nWHERE title = 'SciFi Tech Talk'",
    "7936": "SELECT p.title, p.itunes_url\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE r.title = 'Long time listener, calling it quits'",
    "7937": "SELECT p.title\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'true crime'",
    "7938": "SELECT reviews.content\nFROM reviews\nJOIN podcasts ON reviews.podcast_id = podcasts.podcast_id\nWHERE podcasts.title = 'StormCast: The Official Warhammer Age of Sigmar Podcast'",
    "7939": "SELECT title, content \nFROM reviews \nWHERE podcast_id = (\n    SELECT podcast_id \n    FROM podcasts \n    WHERE title = 'More Stupider: A 90-Day Fiance Podcast'\n) \nAND rating = 1",
    "7940": "SELECT COUNT(*) AS low_rating_reviews\nFROM reviews\nJOIN podcasts ON podcasts.podcast_id = reviews.podcast_id\nWHERE podcasts.title = 'LifeAfter/The Message' AND reviews.rating < 3",
    "7941": "SELECT c.category, AVG(r.rating) as average_rating\nFROM podcasts p\nJOIN reviews r ON p.podcast_id = r.podcast_id\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE p.title = 'More Stupider: A 90-Day Fiance Podcast'\nGROUP BY c.category",
    "7942": "SELECT \n    CASE \n        WHEN books_count > design_count THEN 'arts-books'\n        WHEN design_count > books_count THEN 'arts-design'\n        ELSE 'Equal'\n    END AS category_with_more_podcasts,\n    ABS(books_count - design_count) AS numerical_difference\nFROM (\n    SELECT \n        (SELECT COUNT(podcast_id) FROM categories WHERE category = 'arts-books') AS books_count,\n        (SELECT COUNT(podcast_id) FROM categories WHERE category = 'arts-design') AS design_count\n)",
    "7943": "SELECT SUM(reviews_added) AS total_reviews_june_2022\nFROM runs\nWHERE run_at BETWEEN '2022-06-01 00:00:00' AND '2022-06-30 23:59:59';",
    "7944": "SELECT COUNT(*) AS review_count\nFROM reviews\nWHERE rating = 3\nAND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'",
    "7945": "SELECT\n    (SELECT CAST(COUNT(DISTINCT p.podcast_id) AS FLOAT)\n     FROM podcasts p\n     JOIN categories c ON p.podcast_id = c.podcast_id\n     WHERE c.category = 'fiction-science-fiction') / \n    (SELECT CAST(COUNT(DISTINCT podcast_id) AS FLOAT) FROM podcasts) * 100 AS percentage_fiction_science_fiction",
    "7946": "SELECT AVG(rating) AS average_rating\nFROM reviews\nWHERE created_at BETWEEN '2019-01-01T00:00:00' AND '2019-12-31T23:59:59';",
    "7947": "SELECT \n    strftime('%Y', run_at) AS year,\n    SUM(reviews_added) AS yearly_reviews_added,\n    (SUM(reviews_added) * 100.0 / (SELECT SUM(reviews_added) FROM runs)) AS percentage_of_total_reviews\nFROM \n    runs\nGROUP BY \n    year",
    "7948": "SELECT p.title\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'fiction'",
    "7949": "SELECT r.rating, c.category\nFROM podcasts p\nJOIN reviews r ON p.podcast_id = r.podcast_id\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE p.title = 'Sitcomadon'",
    "7950": "SELECT DISTINCT r.author_id\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE p.itunes_id = 151665400;",
    "7951": "SELECT p.title\nFROM podcasts p\nJOIN reviews r ON p.podcast_id = r.podcast_id\nWHERE r.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00'",
    "7952": "SELECT DISTINCT c.category\nFROM categories c\nJOIN podcasts p ON c.podcast_id = p.podcast_id\nJOIN reviews r ON p.podcast_id = r.podcast_id\nWHERE r.author_id = 'EFB34EAC8E9397C'",
    "7953": "SELECT p.slug, p.itunes_url\nFROM podcasts p\nJOIN reviews r ON p.podcast_id = r.podcast_id\nWHERE r.content = 'Can't stop listening'",
    "7954": "SELECT reviews.created_at\nFROM reviews\nJOIN podcasts ON reviews.podcast_id = podcasts.podcast_id\nWHERE podcasts.title = 'Don't Lie To Your Life Coach'",
    "7955": "SELECT DISTINCT c.category\nFROM categories c\nJOIN reviews r ON c.podcast_id = r.podcast_id\nWHERE r.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00'",
    "7956": "SELECT AVG(rating) AS average_rating\nFROM reviews\nWHERE podcast_id IN (\n    SELECT podcast_id\n    FROM categories\n    WHERE category = 'true-crime'\n)",
    "7957": "SELECT p.title\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'arts'",
    "7958": "SELECT AVG(rating) AS average_rating\nFROM reviews\nWHERE podcast_id IN (\n    SELECT podcast_id\n    FROM categories\n    WHERE category = 'arts'\n)",
    "7959": "SELECT DISTINCT p.title\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nJOIN reviews r ON p.podcast_id = r.podcast_id\nWHERE c.category = 'arts'\nAND r.created_at LIKE '2018%'",
    "7960": "SELECT DISTINCT p.title\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nJOIN reviews r ON p.podcast_id = r.podcast_id\nWHERE c.category = 'music' AND r.rating > 3",
    "7961": "SELECT DISTINCT r.title\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE r.content LIKE '%love%'\nAND c.category = 'arts'\nAND strftime('%Y', r.created_at) BETWEEN '2018' AND '2019'",
    "7962": "SELECT p.itunes_url, c.category\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE p.title = 'Scaling Global'",
    "7963": "SELECT AVG(rating) AS average_rating\nFROM reviews\nWHERE podcast_id IN (\n    SELECT podcast_id\n    FROM categories\n    WHERE category = 'comedy'\n)",
    "7964": "SELECT category, COUNT(category) AS category_count\nFROM categories\nGROUP BY category\nORDER BY category_count ASC\nLIMIT 1;",
    "7965": "SELECT *, LENGTH(content) AS content_length\nFROM reviews\nORDER BY content_length DESC\nLIMIT 1;",
    "7966": "SELECT r.podcast_id, p.title AS podcast_title, r.title AS review_title, r.content, r.rating\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE r.title = 'Hosts bring the show down'",
    "7967": "SELECT p.podcast_id, p.title\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'music'\nORDER BY LENGTH(p.title) DESC\nLIMIT 1",
    "7968": "SELECT c.category\nFROM categories c\nJOIN podcasts p ON c.podcast_id = p.podcast_id\nWHERE p.title LIKE '%jessica%'",
    "7969": "SELECT category \nFROM categories \nJOIN podcasts ON categories.podcast_id = podcasts.podcast_id \nWHERE title = 'Moist Boys'",
    "7970": "SELECT r.podcast_id, r.title AS review_title, r.content, r.rating, c.category\nFROM reviews r\nJOIN categories c ON r.podcast_id = c.podcast_id\nWHERE r.rating = 2",
    "7971": "SELECT p.*\nFROM podcasts p\nJOIN reviews r ON p.podcast_id = r.podcast_id\nWHERE r.author_id IN (\n    SELECT author_id\n    FROM reviews\n    WHERE title = 'Inspired & On Fire!'\n)",
    "7972": "SELECT p.title, c.category\nFROM podcasts p\nJOIN reviews r ON p.podcast_id = r.podcast_id\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE r.content LIKE '%Absolutely fantastic%'\nGROUP BY p.title, c.category",
    "7973": "WITH PodcastReviewCounts AS (\n    SELECT\n        podcast_id,\n        COUNT(*) AS review_count\n    FROM\n        reviews\n    GROUP BY\n        podcast_id\n),\nCategoryReviewCounts AS (\n    SELECT\n        c.category,\n        SUM(prc.review_count) AS total_reviews\n    FROM\n        categories c\n    JOIN\n        PodcastReviewCounts prc ON c.podcast_id = prc.podcast_id\n    GROUP BY\n        c.category\n)\nSELECT\n    category,\n    MAX(total_reviews) AS most_reviews\nFROM\n    CategoryReviewCounts",
    "7974": "SELECT p.itunes_url\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'fiction-science-fiction'",
    "7975": "SELECT r.content\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE p.title = 'Stuff You Should Know'\nORDER BY r.created_at\nLIMIT 1",
    "7976": "SELECT COUNT(*) AS review_count\nFROM reviews\nJOIN podcasts ON podcasts.podcast_id = reviews.podcast_id\nWHERE podcasts.title = 'Planet Money'",
    "7977": "SELECT AVG(rating) AS average_rating\nFROM reviews\nJOIN podcasts ON podcasts.podcast_id = reviews.podcast_id\nWHERE title = 'crime-junkie'",
    "7978": "SELECT \n    (SELECT COUNT(DISTINCT podcast_id) \n     FROM categories \n     WHERE category = 'technology') * 100.0 / COUNT(DISTINCT podcast_id) AS percentage,\n    GROUP_CONCAT(podcast_id) AS technology_podcasts\nFROM categories;",
    "7979": "SELECT content \nFROM reviews \nWHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'",
    "7980": "SELECT c.category\nFROM categories c\nJOIN podcasts p ON c.podcast_id = p.podcast_id\nWHERE p.title = 'Scaling Global'",
    "7981": "SELECT p.title\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'arts-performing-arts'",
    "7982": "SELECT COUNT(*) AS review_count\nFROM reviews\nWHERE podcast_id = (\n    SELECT podcast_id\n    FROM podcasts\n    WHERE title = 'Scaling Global'\n)",
    "7983": "SELECT COUNT(*) AS reviews_in_2019\nFROM reviews\nJOIN podcasts ON reviews.podcast_id = podcasts.podcast_id\nWHERE podcasts.title = 'Please Excuse My Dead Aunt Sally'\nAND reviews.created_at LIKE '2019%'",
    "7984": "SELECT DISTINCT p.title\nFROM podcasts p\nJOIN reviews r ON p.podcast_id = r.podcast_id\nWHERE r.author_id = 'F7E5A318989779D'",
    "7985": "SELECT COUNT(*) AS ratings_of_5\nFROM reviews\nJOIN podcasts ON reviews.podcast_id = podcasts.podcast_id\nWHERE podcasts.title = 'Please Excuse My Dead Aunt Sally' AND reviews.rating = 5",
    "7986": "SELECT AVG(r.rating) AS average_rating\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE p.title = 'Please Excuse My Dead Aunt Sally'",
    "7987": "SELECT COUNT(DISTINCT university_id) AS universities_with_80000_students_in_2011\nFROM university_year\nWHERE num_students > 80000 AND year = 2011;",
    "7988": "SELECT ranking_system_id FROM ranking_criteria WHERE criteria_name = 'Award';",
    "7989": "SELECT COUNT(*) AS state_universities_count\nFROM university\nWHERE university_name LIKE '%State%'",
    "7990": "SELECT student_staff_ratio\nFROM university_year\nORDER BY student_staff_ratio DESC\nLIMIT 1",
    "7991": "SELECT COUNT(*) AS criteria_count\nFROM ranking_criteria\nWHERE ranking_system_id = 3",
    "7992": "SELECT university_id\nFROM university_year\nWHERE pct_international_students = 1\nAND year BETWEEN 2011 AND 2015",
    "7993": "SELECT country_name \nFROM country \nWHERE id = (\n    SELECT country_id \n    FROM university \n    GROUP BY country_id \n    ORDER BY COUNT(id) DESC \n    LIMIT 1\n)",
    "7994": "WITH RankedYears AS (\n    SELECT \n        u.id AS university_id,\n        u.university_name,\n        uy.year,\n        RANK() OVER(PARTITION BY uy.year ORDER BY uy.pct_international_students DESC) AS rank,\n        LEAD(uy.year, 1) OVER(PARTITION BY u.id ORDER BY uy.year) - uy.year AS next_year_diff\n    FROM university_year uy\n    JOIN university u ON uy.university_id = u.id\n),\nConsecutiveYears AS (\n    SELECT \n        university_id,\n        university_name,\n        year,\n        SUM(CASE WHEN next_year_diff = 1 THEN 0 ELSE 1 END) OVER(PARTITION BY university_id ORDER BY year) AS year_group\n    FROM RankedYears\n    WHERE rank = 1\n),\nConsecutiveCounts AS (\n    SELECT \n        university_id,\n        university_name,\n        year_group,\n        COUNT(*) AS consecutive_years\n    FROM ConsecutiveYears\n    GROUP BY university_id, year_group\n)\nSELECT \n    university_name\nFROM ConsecutiveCounts\nWHERE consecutive_years >= 6\nLIMIT 1;",
    "7995": "SELECT u.university_name\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE rc.criteria_name = 'Publications Rank'\nAND ury.year = 2014\nORDER BY ury.score DESC\nLIMIT 1",
    "7996": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nORDER BY uy.num_students ASC\nLIMIT 1",
    "7997": "SELECT COUNT(*) AS num_universities_in_usa\nFROM university u\nJOIN country c ON u.country_id = c.id\nWHERE c.country_name = 'United States of America'",
    "7998": "SELECT u.university_name\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nJOIN country c ON u.country_id = c.id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE ury.year = 2016\nAND c.country_name = 'Australia'\nAND rc.criteria_name = 'Citations'\nORDER BY ury.score DESC\nLIMIT 1",
    "7999": "SELECT COUNT(DISTINCT university_id) AS universities_scored_zero\nFROM university_ranking_year\nJOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id\nWHERE ranking_criteria.criteria_name = 'Award'\nAND university_ranking_year.score = 0\nAND university_ranking_year.year BETWEEN 2005 AND 2015",
    "8000": "SELECT country.country_name\nFROM country\nJOIN university ON country.id = university.country_id\nWHERE university.university_name = 'University of Oxford'",
    "8001": "SELECT COUNT(*) AS times_achieved\nFROM university_ranking_year ur\nJOIN university u ON ur.university_id = u.id\nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id\nWHERE u.university_name = 'Yale University'\nAND ur.score >= 10\nAND rc.criteria_name = 'Quality of Education Rank'",
    "8002": "SELECT rc.criteria_name\nFROM ranking_criteria rc\nJOIN ranking_system rs ON rc.ranking_system_id = rs.id\nWHERE rs.system_name = 'Center for World University Rankings'",
    "8003": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.num_students >= 50000\nAND uy.year = 2012",
    "8004": "SELECT DISTINCT c.country_name\nFROM country c\nJOIN university u ON c.id = u.country_id\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year BETWEEN 2011 AND 2016\nAND uy.pct_international_students > 50",
    "8005": "SELECT COUNT(DISTINCT u.id) AS total_universities, \n       COUNT(DISTINCT CASE WHEN c.country_name = 'United States of America' THEN u.id END) AS usa_universities\nFROM university_year uy\nJOIN university u ON uy.university_id = u.id\nJOIN country c ON u.country_id = c.id\nWHERE uy.year = 2016\nAND ((uy.pct_female_students * uy.num_students) / 100) >= 20000",
    "8006": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nORDER BY (uy.num_students * uy.pct_international_students / 100) DESC\nLIMIT 5",
    "8007": "SELECT university_id\nFROM university_year\nORDER BY student_staff_ratio DESC\nLIMIT 1",
    "8008": "SELECT year\nFROM university_year\nORDER BY num_students ASC\nLIMIT 1",
    "8009": "SELECT AVG(pct_female_students) AS avg_pct_female_students\nFROM university_year\nWHERE pct_female_students IS NOT NULL;",
    "8010": "SELECT \n    num_students AS number_of_students,\n    (pct_international_students * num_students / 100) AS number_of_international_students\nFROM \n    university_year\nWHERE \n    university_id = 20 AND \n    year = 2013",
    "8011": "SELECT id FROM university WHERE university_name = 'Harvard University';",
    "8012": "SELECT university_id\nFROM university_ranking_year\nWHERE year = 2011 AND score = 100",
    "8013": "SELECT rs.system_name\nFROM ranking_system rs\nJOIN ranking_criteria rc ON rs.id = rc.ranking_system_id\nWHERE rc.criteria_name = 'Quality of Education Rank'",
    "8014": "SELECT student_staff_ratio\nFROM university_year\nJOIN university ON university.id = university_year.university_id\nWHERE university.university_name = 'Harvard University' AND university_year.year = 2012",
    "8015": "SELECT country.country_name AS location\nFROM university\nJOIN country ON university.country_id = country.id\nWHERE university.id = 112;",
    "8016": "SELECT SUM(u_y.num_students) AS total_students_in_sweden\nFROM university_year u_y\nJOIN university u ON u_y.university_id = u.id\nJOIN country c ON u.country_id = c.id\nWHERE c.country_name = 'Sweden'",
    "8017": "SELECT ranking_criteria_id\nFROM university_ranking_year\nWHERE university_id = (SELECT id FROM university WHERE university_name = 'Brown University')\nAND year = 2014",
    "8018": "SELECT university.university_name\nFROM university\nJOIN country ON university.country_id = country.id\nWHERE country.country_name = 'Spain'",
    "8019": "SELECT rc.criteria_name\nFROM university_ranking_year ury\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE ury.university_id = 32 AND ury.year = 2015",
    "8020": "SELECT AVG(ury.score) AS average_score\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nJOIN country c ON u.country_id = c.id\nWHERE c.country_name = 'Brazil'",
    "8021": "SELECT c.country_name\nFROM country c\nJOIN university u ON c.id = u.country_id\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2014\nORDER BY uy.num_students DESC\nLIMIT 1",
    "8022": "SELECT \n    ur.year, \n    ur.score, \n    (uy.num_students * uy.pct_international_students / 100) AS num_international_students\nFROM \n    university_ranking_year ur\nJOIN \n    university_year uy ON ur.university_id = uy.university_id AND ur.year = uy.year\nWHERE \n    ur.university_id = 100 AND ur.year = 2015",
    "8023": "SELECT uyr.num_students\nFROM university_ranking_year ury\nJOIN university_year uyr ON ury.university_id = uyr.university_id AND ury.year = uyr.year\nWHERE ury.score = 98 AND ury.year = 2013",
    "8024": "SELECT rc.criteria_name\nFROM ranking_criteria rc\nJOIN ranking_system rs ON rc.ranking_system_id = rs.id\nWHERE rs.system_name = 'Center for World University Rankings';",
    "8025": "SELECT c.country_name\nFROM country c\nJOIN university u ON c.id = u.country_id\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2013 AND uy.num_students > (\n    SELECT AVG(num_students) * 0.98\n    FROM university_year\n    WHERE year = 2013\n)\nGROUP BY c.country_name",
    "8026": "SELECT \n    SUM(num_students * pct_international_students) / 100.0 AS total_intl_students,\n    SUM(num_students) AS total_students,\n    (SUM(num_students * pct_international_students) / SUM(num_students)) AS pct_international_students\nFROM \n    university_year\nWHERE \n    university_id IN (\n        SELECT \n            university_id\n        FROM \n            university_ranking_year\n        WHERE \n            year = 2015 AND score < 80\n    )\nAND year = 2015",
    "8027": "SELECT SUM(num_students) AS total_students_2011\nFROM university_year\nWHERE year = 2011;",
    "8028": "SELECT SUM((num_students * pct_female_students) / 100) AS total_female_students_2011\nFROM university_year\nWHERE year = 2011",
    "8029": "SELECT student_staff_ratio \nFROM university_year \nORDER BY student_staff_ratio DESC \nLIMIT 1",
    "8030": "SELECT university_id\nFROM university_year\nWHERE year = 2011\nORDER BY num_students DESC\nLIMIT 1",
    "8031": "SELECT COUNT(*) AS institutions_over_50k_students_with_10pct_international\nFROM university_year\nWHERE num_students > 50000\nAND year = 2011\nAND pct_international_students > 10;",
    "8032": "SELECT university_id\nFROM university_year\nWHERE year = 2012\nORDER BY pct_female_students DESC\nLIMIT 1",
    "8033": "SELECT u.university_name\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nWHERE ury.year = 2012\nORDER BY ury.score DESC\nLIMIT 1;",
    "8034": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2011\nORDER BY uy.num_students DESC\nLIMIT 1;",
    "8035": "SELECT u.university_name\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE rc.criteria_name = 'Teaching'\nORDER BY ury.score DESC\nLIMIT 1",
    "8036": "SELECT pct_international_students\nFROM university_year\nJOIN university ON university.id = university_year.university_id\nWHERE university.university_name = 'Harvard University' AND university_year.year = 2011",
    "8037": "SELECT \n    (num_students * pct_female_students / 100) AS female_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nWHERE \n    university.university_name = 'Stanford University'\n    AND year = 2011",
    "8038": "SELECT c.country_name\nFROM country c\nJOIN university u ON c.id = u.country_id\nWHERE u.university_name = 'Harvard University'",
    "8039": "SELECT rs.system_name\nFROM ranking_system rs\nJOIN ranking_criteria rc ON rs.id = rc.ranking_system_id\nWHERE rc.criteria_name = 'Teaching'",
    "8040": "SELECT u.university_name\nFROM university u\nJOIN country c ON u.country_id = c.id\nJOIN university_ranking_year ury ON u.id = ury.university_id\nWHERE c.country_name = 'Argentina'\nGROUP BY u.university_name\nORDER BY SUM(ury.score) DESC\nLIMIT 1",
    "8041": "SELECT COUNT(*) AS number_of_universities_in_argentina\nFROM university u\nJOIN country c ON u.country_id = c.id\nWHERE c.country_name = 'Argentina'",
    "8042": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2011 AND uy.num_students > 100000;",
    "8043": "SELECT COUNT(*) AS criteria_count\nFROM ranking_criteria\nJOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id\nWHERE ranking_system.system_name = 'Center for World University Rankings';",
    "8044": "SELECT u.university_name, ury.year, ury.score\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nWHERE ury.score = 90 AND ury.year = 2011",
    "8045": "SELECT u.university_name, SUM((uy.pct_international_students * uy.num_students) / 100) AS total_international_students\nFROM university_year uy\nJOIN university u ON uy.university_id = u.id\nGROUP BY uy.university_id\nORDER BY total_international_students DESC\nLIMIT 3",
    "8046": "SELECT SUM(num_students) - SUM((pct_international_students * num_students) / 100) AS difference\nFROM university_year\nJOIN university ON university.id = university_year.university_id\nWHERE university.university_name = 'Harvard University' AND year BETWEEN 2011 AND 2012",
    "8047": "SELECT COUNT(DISTINCT university_id) AS universities_over_30000_students\nFROM university_year\nWHERE year = 2011 AND num_students > 30000;",
    "8048": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo';",
    "8049": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';",
    "8050": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank';",
    "8051": "SELECT COUNT(DISTINCT university_id) AS universities_above_30pct_international_students\nFROM university_year\nWHERE pct_international_students > 30 AND year = 2013",
    "8052": "SELECT COUNT(DISTINCT university_id) AS universities_with_score_less_than_50\nFROM university_ranking_year\nWHERE ranking_criteria_id = 6\nAND year = 2011\nAND score < 50",
    "8053": "SELECT num_students \nFROM university_year \nJOIN university ON university.id = university_year.university_id \nWHERE university.university_name = 'Yale University' AND university_year.year = 2016",
    "8054": "SELECT u.university_name\nFROM university u\nJOIN country c ON u.country_id = c.id\nWHERE c.country_name = 'Denmark'",
    "8055": "SELECT \n    CAST(num_students / student_staff_ratio AS INTEGER) AS number_of_staff\nFROM \n    university\nJOIN \n    university_year ON university.id = university_year.university_id\nWHERE \n    university.university_name = 'University of Auckland'\n    AND university_year.year = 2015",
    "8056": "SELECT country.country_name\nFROM country\nJOIN university ON country.id = university.country_id\nWHERE university.university_name = 'University of S\u00e3o Paulo'",
    "8057": "SELECT \n    (num_students * pct_international_students / 100) AS international_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nWHERE \n    university.university_name = 'Harvard University'\n    AND university_year.year = 2012",
    "8058": "SELECT \n    (pct_female_students * num_students) / 100 AS num_female_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nWHERE \n    university.university_name = 'Arizona State University'\n    AND university_year.year = 2014",
    "8059": "SELECT u.university_name, SUM(ury.score) AS total_score\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nGROUP BY u.id\nORDER BY total_score DESC\nLIMIT 1",
    "8060": "SELECT rc.criteria_name\nFROM ranking_criteria rc\nJOIN ranking_system rs ON rc.ranking_system_id = rs.id\nWHERE rs.system_name = 'Shanghai Ranking'",
    "8061": "SELECT u.university_name\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE rc.criteria_name = 'Teaching'\nAND ury.year = 2011\nORDER BY ury.score ASC\nLIMIT 1",
    "8062": "SELECT rs.system_name\nFROM ranking_system rs\nJOIN ranking_criteria rc ON rs.id = rc.ranking_system_id\nWHERE rc.criteria_name = 'Quality of Education Rank'",
    "8063": "WITH InternationalCriteria AS (\n    SELECT rc.id AS criteria_id\n    FROM ranking_criteria rc\n    JOIN ranking_system rs ON rc.ranking_system_id = rs.id\n    WHERE rc.criteria_name = 'International'\n),\nUniversitiesScoreAbove80 AS (\n    SELECT ury.university_id, ury.score\n    FROM university_ranking_year ury\n    JOIN InternationalCriteria ic ON ury.ranking_criteria_id = ic.criteria_id\n    WHERE ury.score > 80 AND ury.year = 2016\n),\nTotalUniversitiesIn2016 AS (\n    SELECT COUNT(DISTINCT university_id) AS total_universities\n    FROM university_ranking_year ury\n    JOIN InternationalCriteria ic ON ury.ranking_criteria_id = ic.criteria_id\n    WHERE ury.year = 2016\n),\nHighestScoringUniversity AS (\n    SELECT u.university_name, usa80.score\n    FROM UniversitiesScoreAbove80 usa80\n    JOIN university u ON usa80.university_id = u.id\n    ORDER BY usa80.score DESC\n    LIMIT 1\n)\nSELECT \n    (CAST(COUNT(DISTINCT usa80.university_id) AS REAL) / (SELECT total_universities FROM TotalUniversitiesIn2016) * 100) AS pct_universities_above_80,\n    hsu.university_name,\n    hsu.score\nFROM UniversitiesScoreAbove80 usa80, HighestScoringUniversity hsu",
    "8064": "SELECT rc.criteria_name, ury.score\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE u.university_name = 'Harvard University' AND ury.year = 2005",
    "8065": "SELECT \n    u.university_name,\n    AVG(ury.score) AS average_score\nFROM \n    university_ranking_year ury\nINNER JOIN \n    university u ON ury.university_id = u.id\nINNER JOIN \n    ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE \n    rc.criteria_name = 'Alumni'\n    AND ury.year = 2008\nGROUP BY \n    u.university_name",
    "8066": "SELECT u.university_name, c.country_name\nFROM university u\nJOIN country c ON u.country_id = c.id\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2015\nORDER BY (uy.num_students * uy.pct_international_students / 100) DESC\nLIMIT 1;",
    "8067": "SELECT num_students \nFROM university_year \nWHERE university_id = 1 AND year = 2011;",
    "8068": "SELECT university_id\nFROM university_year\nWHERE year = 2011\nORDER BY num_students DESC\nLIMIT 1",
    "8069": "SELECT university_id\nFROM university_year\nWHERE year = 2011 AND student_staff_ratio > 15",
    "8070": "SELECT COUNT(*) \nFROM university_year \nWHERE year = 2011 \nAND num_students > 20000 \nAND pct_international_students > 25;",
    "8071": "SELECT university_id\nFROM university_year\nWHERE year = 2011\nORDER BY pct_female_students DESC\nLIMIT 3",
    "8072": "SELECT year\nFROM university_year\nWHERE university_id = 1\nORDER BY num_students DESC\nLIMIT 1",
    "8073": "SELECT num_students \nFROM university_year \nJOIN university ON university.id = university_year.university_id \nWHERE university.university_name = 'Harvard University' AND year = 2011",
    "8074": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2011\nORDER BY (uy.num_students * uy.pct_international_students / 100) DESC\nLIMIT 1",
    "8075": "SELECT university.university_name\nFROM university\nJOIN country ON university.country_id = country.id\nWHERE country.country_name = 'Australia'",
    "8076": "SELECT COUNT(DISTINCT u.id) AS universities_with_more_than_15000_students\nFROM university u\nJOIN country c ON u.country_id = c.id\nJOIN university_year uy ON u.id = uy.university_id\nWHERE c.country_name = 'Australia'\nAND uy.year = 2011\nAND uy.num_students > 15000",
    "8077": "SELECT country.country_name\nFROM country\nJOIN university ON country.id = university.country_id\nWHERE university.university_name = 'Harvard University'",
    "8078": "SELECT u.university_name\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE rc.criteria_name = 'Teaching'\nAND ury.year = 2011\nORDER BY ury.score DESC\nLIMIT 1",
    "8079": "SELECT u.university_name\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE rc.criteria_name = 'Teaching'\nAND ury.score > 90\nAND ury.year = 2011",
    "8080": "SELECT COUNT(DISTINCT u.id) AS universities_in_USA_with_high_teaching_score\nFROM university u\nJOIN country c ON u.country_id = c.id\nJOIN university_ranking_year ury ON u.id = ury.university_id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE c.country_name = 'United States of America'\nAND rc.criteria_name = 'Teaching'\nAND ury.score > 90\nAND ury.year = 2011",
    "8081": "SELECT DISTINCT rc.criteria_name\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE u.university_name = 'Harvard University' AND ury.year = 2011",
    "8082": "SELECT u.university_name\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE ury.score = 98\nAND ury.year = 2011\nAND rc.criteria_name = 'Teaching'",
    "8083": "SELECT u.university_name\nFROM university u\nJOIN country c ON u.country_id = c.id\nJOIN university_ranking_year ury ON u.id = ury.university_id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nJOIN ranking_system rs ON rc.ranking_system_id = rs.id\nWHERE c.country_name = 'United States of America'\nAND ury.year = 2011\nAND rc.criteria_name = 'Teaching'\nAND ury.score < 60",
    "8084": "SELECT COUNT(DISTINCT university.id) AS universities_with_ratio_over_15\nFROM university\nJOIN country ON university.country_id = country.id\nJOIN university_year ON university.id = university_year.university_id\nWHERE country.country_name = 'Australia'\nAND university_year.year = 2011\nAND university_year.student_staff_ratio > 15",
    "8085": "SELECT \n    (num_students * pct_female_students / 100) AS num_female_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nWHERE \n    university.university_name = 'Stanford University'\n    AND year = 2011",
    "8086": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN c.country_name = 'United States of America' THEN ur.university_id END) AS FLOAT) / \n    COUNT(DISTINCT ur.university_id)) * 100 AS percentage_usa\nFROM \n    university_ranking_year ur\nJOIN \n    ranking_criteria rc ON ur.ranking_criteria_id = rc.id\nJOIN \n    university u ON ur.university_id = u.id\nJOIN \n    country c ON u.country_id = c.id\nWHERE \n    rc.criteria_name = 'Teaching'\n    AND ur.score > 90\n    AND ur.year = 2011",
    "8087": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';",
    "8088": "SELECT country.id\nFROM country\nJOIN university ON country.id = university.country_id\nWHERE university.university_name = 'University of Veterinary Medicine Vienna'",
    "8089": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'",
    "8090": "SELECT id FROM university WHERE university_name = 'University of Orl\u00e9ans';",
    "8091": "SELECT num_students\nFROM university_year\nWHERE university_id = 268 AND year = 2013",
    "8092": "SELECT country_name FROM country WHERE id = 66;",
    "8093": "SELECT country.country_name\nFROM country\nJOIN university ON country.id = university.country_id\nWHERE university.university_name = 'McMaster University'",
    "8094": "SELECT COUNT(*) AS TurkishUniversitiesCount\nFROM university u\nJOIN country c ON u.country_id = c.id\nWHERE c.country_name = 'Turkey'",
    "8095": "SELECT u.university_name\nFROM university_year uy\nJOIN university u ON uy.university_id = u.id\nWHERE uy.year = 2011\nORDER BY uy.num_students DESC\nLIMIT 1",
    "8096": "SELECT num_students \nFROM university_year \nWHERE university_id = (SELECT id FROM university WHERE university_name = 'University of Michigan') \nAND year = 2011",
    "8097": "SELECT ur.year, ur.score\nFROM university_ranking_year ur\nJOIN university u ON ur.university_id = u.id\nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id\nWHERE u.university_name = 'Chosun University'\nAND rc.criteria_name = 'Influence Rank'\nAND ur.year = 2015",
    "8098": "SELECT pct_international_students\nFROM university_year\nJOIN university ON university.id = university_year.university_id\nWHERE university.university_name = 'University of Oslo' AND year = 2015",
    "8099": "SELECT rc.criteria_name\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE u.university_name = 'University of Southampton'\nAND ury.year = 2015\nORDER BY ury.score DESC\nLIMIT 1",
    "8100": "SELECT rs.system_name\nFROM ranking_system rs\nJOIN ranking_criteria rc ON rs.id = rc.ranking_system_id\nWHERE rc.criteria_name = 'Total Shanghai'",
    "8101": "SELECT \n    (num_students * pct_female_students / 100) AS num_female_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nWHERE \n    university.university_name = 'Pierre and Marie Curie University'\n    AND university_year.year = 2015",
    "8102": "SELECT ur.year, ur.score\nFROM university_ranking_year ur\nJOIN university u ON ur.university_id = u.id\nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id\nJOIN ranking_system rs ON rc.ranking_system_id = rs.id\nWHERE u.university_name = 'University of Florida'\nAND rc.criteria_name = 'N and S'\nAND ur.year = 2014",
    "8103": "SELECT \n    (num_students * pct_international_students / 100) AS num_international_students\nFROM \n    university_year\nJOIN \n    university ON university.id = university_year.university_id\nWHERE \n    university.university_name = 'University of Wisconsin-Madison'\n    AND university_year.year = 2013",
    "8104": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2015\nORDER BY uy.num_students ASC\nLIMIT 1",
    "8105": "SELECT \n    (SELECT SUM(num_students) FROM university_year \n     JOIN university ON university_year.university_id = university.id \n     WHERE university.university_name = 'University of Ottawa' AND university_year.year = 2013) \n    /\n    (SELECT SUM(num_students) FROM university_year \n     JOIN university ON university_year.university_id = university.id \n     WHERE university.university_name = 'Joseph Fourier University' AND university_year.year = 2013) \n    AS times_more",
    "8106": "SELECT AVG(criteria_count) AS average_number_of_criteria\nFROM (\n    SELECT rs.id, rs.system_name, COUNT(rc.id) AS criteria_count\n    FROM ranking_system rs\n    LEFT JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id\n    WHERE rs.system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings')\n    GROUP BY rs.id\n)",
    "8107": "SELECT AVG(num_students) AS avg_students_2012\nFROM university_year\nWHERE year = 2012",
    "8108": "SELECT score FROM university_ranking_year WHERE university_id = 68 AND year = 2015",
    "8109": "SELECT id FROM country WHERE country_name = 'Cyprus';",
    "8110": "SELECT university_id\nFROM university_year\nORDER BY pct_international_students DESC\nLIMIT 1",
    "8111": "SELECT criteria_name FROM ranking_criteria WHERE id = 13;",
    "8112": "SELECT AVG(score) AS average_score\nFROM university_ranking_year\nWHERE year = 2012",
    "8113": "SELECT SUM((pct_female_students * num_students) / 100) AS total_female_students\nFROM university_year\nWHERE university_id = 40 AND year BETWEEN 2011 AND 2013",
    "8114": "SELECT AVG(score) AS average_score\nFROM university_ranking_year\nWHERE university_id = 79 AND year BETWEEN 2013 AND 2015",
    "8115": "SELECT student_staff_ratio\nFROM university_year\nWHERE university_id = 35;",
    "8116": "SELECT ur.year, ur.score\nFROM university_ranking_year ur\nJOIN university_year uy ON ur.university_id = uy.university_id AND ur.year = uy.year\nJOIN (\n    SELECT university_id, MAX(num_students) AS max_students\n    FROM university_year\n    WHERE year = 2011\n) AS most_populated_university ON uy.university_id = most_populated_university.university_id\nWHERE ur.year = 2011",
    "8117": "SELECT rc.criteria_name\nFROM university_ranking_year ury\nJOIN university u ON ury.university_id = u.id\nJOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id\nWHERE u.university_name = 'Harvard University' AND ury.score = 100",
    "8118": "SELECT university.id, university.university_name\nFROM university\nJOIN country ON university.country_id = country.id\nWHERE country.country_name = 'Turkey'",
    "8119": "SELECT COUNT(*) AS total_ranking_criteria\nFROM ranking_criteria\nJOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id\nWHERE ranking_system.system_name = 'Shanghai Ranking';",
    "8120": "SELECT u.university_name, ur.score\nFROM university u\nJOIN university_ranking_year ur ON u.id = ur.university_id\nWHERE u.id = 124",
    "8121": "SELECT \n    (num_students * pct_female_students / 100) AS num_female_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nWHERE \n    university.university_name = 'University of Pennsylvania'\n    AND year = 2011",
    "8122": "SELECT DISTINCT u.university_name\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nWHERE ury.score < 50",
    "8123": "SELECT COUNT(*) AS universities_in_japan\nFROM university u\nJOIN country c ON u.country_id = c.id\nWHERE c.country_name = 'Japan'",
    "8124": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nORDER BY (uy.num_students - (uy.num_students * uy.pct_female_students / 100)) DESC\nLIMIT 1",
    "8125": "SELECT DISTINCT c.country_name\nFROM country c\nJOIN university u ON c.id = u.country_id\nJOIN university_ranking_year ury ON u.id = ury.university_id\nWHERE ury.score <= 70 AND ury.year = 2016",
    "8126": "SELECT \n    num_students - (num_students * pct_female_students / 100) AS num_male_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nWHERE \n    university.university_name = 'Emory University' \n    AND university_year.year = 2011",
    "8127": "SELECT country.country_name\nFROM country\nJOIN university ON country.id = university.country_id\nWHERE university.university_name = 'Johns Hopkins University'",
    "8128": "SELECT university_name \nFROM university \nJOIN university_year ON university.id = university_year.university_id \nWHERE num_students BETWEEN 400 AND 1000;",
    "8129": "SELECT year \nFROM university_ranking_year \nWHERE university_id = (SELECT id FROM university WHERE university_name = 'Brown University') \nORDER BY score DESC \nLIMIT 1",
    "8130": "SELECT AVG(score) AS average_score\nFROM university_ranking_year\nJOIN university ON university_ranking_year.university_id = university.id\nWHERE university.university_name = 'Emory University' AND year BETWEEN 2011 AND 2016",
    "8131": "SELECT u.university_name\nFROM university u\nJOIN university_year uy ON u.id = uy.university_id\nWHERE uy.year = 2015\nORDER BY uy.num_students DESC\nLIMIT 1",
    "8132": "SELECT c.country_name AS location, \n       (uy.num_students * uy.pct_female_students / 100) AS num_female_students\nFROM university_year uy\nJOIN university u ON uy.university_id = u.id\nJOIN country c ON u.country_id = c.id\nWHERE uy.university_id = 23 AND uy.year = 2011",
    "8133": "SELECT COUNT(DISTINCT university_id) AS universities_scored_40_in_teaching\nFROM university_ranking_year\nJOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id\nWHERE ranking_criteria.criteria_name = 'Teaching'\nAND university_ranking_year.score = 40",
    "8134": "SELECT \n    SUM(num_students * pct_female_students / 100.0) / SUM(num_students) * 100 AS percentage_female_students\nFROM \n    university_year\nJOIN \n    university ON university_year.university_id = university.id\nJOIN \n    country ON university.country_id = country.id\nWHERE \n    country.country_name = 'United States of America'\n    AND university_year.year = 2016",
    "8135": "SELECT \n    SUM(num_students) - SUM((num_students * pct_international_students) / 100) AS difference\nFROM \n    university_year\nJOIN \n    university ON university.id = university_year.university_id\nWHERE \n    university.university_name = 'University of Tokyo' \n    AND university_year.year BETWEEN 2011 AND 2014",
    "8136": "SELECT u.university_name\nFROM university u\nJOIN university_ranking_year ury ON u.id = ury.university_id\nWHERE ury.year = 2015 AND ury.score < (\n    SELECT 0.28 * AVG(score)\n    FROM university_ranking_year\n    WHERE year = 2015\n)",
    "8137": "SELECT units\nFROM sales_in_weather\nWHERE store_nbr = 1 AND item_nbr = 9 AND date = '2012-01-01'",
    "8138": "SELECT SUM(units) AS total_units_sold\nFROM sales_in_weather\nWHERE store_nbr = 1\nAND item_nbr = 9\nAND strftime('%Y-%m', date) = '2012-01'",
    "8139": "SELECT item_nbr\nFROM sales_in_weather\nWHERE store_nbr = 1 AND date = '2012-01-01'\nORDER BY units DESC\nLIMIT 1",
    "8140": "SELECT (tmax - tmin) AS temperature_range\nFROM weather\nWHERE station_nbr = 1 AND date = '2012-01-01'",
    "8141": "SELECT date \nFROM weather \nWHERE station_nbr = 2 AND depart > 0;",
    "8142": "SELECT date\nFROM weather\nWHERE station_nbr = 1 AND date IN ('2012-01-01', '2012-01-02')\nORDER BY avgspeed DESC\nLIMIT 1",
    "8143": "SELECT SUM(s.units) AS total_units\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 5\nAND s.store_nbr = 3\nAND SUBSTR(s.date, 1, 4) = '2012'\nAND w.depart < 0",
    "8144": "SELECT siw.units\nFROM sales_in_weather siw\nJOIN relation r ON siw.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND siw.date = w.date\nWHERE siw.item_nbr = 5 AND siw.store_nbr = 3 AND SUBSTR(siw.date, 1, 4) = '2012'\nORDER BY w.tmax DESC\nLIMIT 1",
    "8145": "SELECT w.dewpoint\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 5 AND s.store_nbr = 3 AND SUBSTR(s.date, 1, 4) = '2012'\nORDER BY s.units DESC\nLIMIT 1",
    "8146": "SELECT COUNT(DISTINCT s.date)\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 5 AND s.store_nbr = 3 AND s.units > 100 AND w.tmax > 90",
    "8147": "SELECT SUM(s.units) AS total_units\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 5 AND s.store_nbr = 3\nAND (w.tmax - w.tmin) = (\n    SELECT MAX(tmax - tmin)\n    FROM weather\n    JOIN relation ON weather.station_nbr = relation.station_nbr\n    WHERE relation.store_nbr = 3\n)",
    "8148": "SELECT s.date\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 5 AND s.store_nbr = 3 AND s.units > 100\nORDER BY (w.tmax - w.tmin) DESC\nLIMIT 1",
    "8149": "SELECT SUM(s.units) AS total_units_sold\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 5 AND s.store_nbr = 3 AND w.preciptotal > 0.05",
    "8150": "SELECT s.date\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 5 AND s.store_nbr = 3 AND s.units > 100 AND w.avgspeed > 10",
    "8151": "SELECT SUM(s.units) AS total_units_sold\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.store_nbr = 3 AND strftime('%Y', s.date) = '2012'\nAND w.tmax = (\n    SELECT MAX(w2.tmax)\n    FROM weather w2\n    JOIN relation r2 ON w2.station_nbr = r2.station_nbr\n    WHERE r2.store_nbr = 3 AND strftime('%Y', w2.date) = '2012'\n)",
    "8152": "SELECT\n    (SELECT SUM(units) FROM sales_in_weather\n     WHERE item_nbr = 16\n     AND store_nbr = 5\n     AND date IN (SELECT date FROM weather\n                  WHERE station_nbr IN (SELECT station_nbr FROM relation WHERE store_nbr = 5)\n                  AND SUBSTR(date, 1, 4) = '2012'\n                  ORDER BY tmax DESC\n                  LIMIT 1))\n    -\n    (SELECT SUM(units) FROM sales_in_weather\n     WHERE item_nbr = 16\n     AND store_nbr = 10\n     AND date IN (SELECT date FROM weather\n                  WHERE station_nbr IN (SELECT station_nbr FROM relation WHERE store_nbr = 10)\n                  AND SUBSTR(date, 1, 4) = '2012'\n                  ORDER BY tmax DESC\n                  LIMIT 1)) AS units_difference",
    "8153": "SELECT siw.item_nbr\nFROM sales_in_weather siw\nJOIN relation r ON siw.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND siw.date = w.date\nWHERE siw.store_nbr = 3 AND strftime('%Y', siw.date) = '2012'\nORDER BY w.tmax DESC, siw.units DESC\nLIMIT 1",
    "8154": "SELECT COUNT(DISTINCT item_nbr) AS items_with_no_sales\nFROM sales_in_weather\nWHERE store_nbr = 3\nAND date IN (\n    SELECT w.date\n    FROM weather w\n    JOIN relation r ON w.station_nbr = r.station_nbr\n    WHERE r.store_nbr = 3\n    AND SUBSTR(w.date, 1, 4) = '2012'\n    ORDER BY w.tmax DESC\n    LIMIT 1\n)\nAND units = 0",
    "8155": "SELECT AVG(units) AS average_units_sold\nFROM sales_in_weather\nJOIN relation ON sales_in_weather.store_nbr = relation.store_nbr\nJOIN weather ON relation.station_nbr = weather.station_nbr\nWHERE sales_in_weather.item_nbr = 5\nAND sales_in_weather.store_nbr = 3\nAND weather.tmax > 90",
    "8156": "SELECT \n    (SUM(CASE WHEN item_nbr = 5 THEN units ELSE 0 END) * 1.0 / SUM(units)) * 100 AS percentage\nFROM \n    sales_in_weather\nWHERE \n    store_nbr = 3\n    AND date IN (\n        SELECT \n            w.date\n        FROM \n            weather w\n            JOIN relation r ON w.station_nbr = r.station_nbr\n        WHERE \n            r.store_nbr = 3\n            AND SUBSTR(w.date, 1, 4) = '2012'\n        ORDER BY \n            w.tmax DESC\n        LIMIT 1\n    )",
    "8157": "SELECT item_nbr\nFROM sales_in_weather\nWHERE store_nbr = 1 AND date = '2012-01-01'\nORDER BY units DESC\nLIMIT 1",
    "8158": "SELECT units\nFROM sales_in_weather\nWHERE item_nbr = 9 AND store_nbr = 11 AND date = '2012-12-07'",
    "8159": "SELECT tavg\nFROM weather\nWHERE station_nbr = 20 AND date = '2014-10-17'",
    "8160": "SELECT resultspeed\nFROM weather\nWHERE station_nbr = 9 AND date = '2014-01-15'",
    "8161": "SELECT station_nbr\nFROM relation\nGROUP BY station_nbr\nORDER BY COUNT(store_nbr) DESC\nLIMIT 1",
    "8162": "SELECT station_nbr FROM relation WHERE store_nbr = 20;",
    "8163": "SELECT w.tmax - w.tmin AS temperature_range\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 7 AND w.date = '2014-04-28'",
    "8164": "SELECT COUNT(store_nbr) AS number_of_stores\nFROM relation\nWHERE station_nbr = (\n    SELECT station_nbr\n    FROM weather\n    ORDER BY depart DESC\n    LIMIT 1\n)",
    "8165": "SELECT w.dewpoint\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 15 AND w.date = '2012-02-18'",
    "8166": "SELECT w.wetbulb\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 6 AND w.date = '2012-02-15'",
    "8167": "SELECT COUNT(DISTINCT r.store_nbr) AS number_of_stores\nFROM relation r\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE w.avgspeed = (SELECT MAX(avgspeed) FROM weather)",
    "8168": "SELECT w.tmax\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 21 AND w.date = '2012-11-09'",
    "8169": "SELECT w.sunrise\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 30 AND w.date = '2014-02-21'",
    "8170": "SELECT COUNT(DISTINCT store_nbr) AS number_of_stores\nFROM relation\nWHERE station_nbr = (\n    SELECT station_nbr\n    FROM weather\n    ORDER BY snowfall DESC\n    LIMIT 1\n)",
    "8171": "SELECT w.codesum\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 2 AND w.date = '2013-02-12'",
    "8172": "SELECT w.sealevel\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 19 AND w.date = '2013-02-24'",
    "8173": "SELECT w.preciptotal\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 2 AND w.date = '2012-12-25'",
    "8174": "SELECT w.stnpressure\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 12 AND w.date = '2012-05-15'",
    "8175": "SELECT \n    (SUM(CASE WHEN s.store_nbr = 10 THEN s.units ELSE 0 END) / SUM(s.units) * 100) AS percentage\nFROM \n    sales_in_weather s\nJOIN \n    relation r ON s.store_nbr = r.store_nbr\nJOIN \n    weather w ON r.station_nbr = w.station_nbr\nWHERE \n    s.date = '2014-10-31'\n    AND w.date = '2014-10-31'\n    AND r.station_nbr = (SELECT station_nbr FROM relation WHERE store_nbr = 10)",
    "8176": "SELECT \n    ((tavg_feb3.tavg - tavg_feb2.tavg) * 1.0 / tavg_feb2.tavg) * 100 AS increase_percentage\nFROM \n    weather AS tavg_feb2\nJOIN \n    weather AS tavg_feb3 ON tavg_feb2.station_nbr = tavg_feb3.station_nbr\nJOIN \n    relation ON relation.station_nbr = tavg_feb2.station_nbr\nWHERE \n    tavg_feb2.date = '2012-02-02' \n    AND tavg_feb3.date = '2012-02-03' \n    AND relation.store_nbr = 9;",
    "8177": "SELECT item_nbr\nFROM sales_in_weather\nWHERE store_nbr = 1 AND date = '2012-01-01'\nORDER BY units DESC\nLIMIT 1",
    "8178": "SELECT COUNT(store_nbr) AS number_of_stores\nFROM relation\nWHERE station_nbr = 12",
    "8179": "SELECT COUNT(*) AS items_not_sold\nFROM sales_in_weather\nWHERE store_nbr = 2 AND date = '2012-01-01' AND units = 0;",
    "8180": "SELECT date \nFROM weather \nWHERE station_nbr = 1 \nAND SUBSTR(date, 1, 4) BETWEEN '2012' AND '2014' \nORDER BY tmax DESC \nLIMIT 1",
    "8181": "SELECT station_nbr, COUNT(store_nbr) AS store_count\nFROM relation\nGROUP BY station_nbr\nORDER BY store_count DESC\nLIMIT 1",
    "8182": "SELECT station_nbr, COUNT(date) AS days_below_normal\nFROM weather\nWHERE strftime('%Y', date) = '2014' AND strftime('%m', date) = '03' AND depart < 0\nGROUP BY station_nbr\nORDER BY days_below_normal DESC\nLIMIT 1",
    "8183": "SELECT r.station_nbr\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nWHERE s.item_nbr = 9\nGROUP BY s.store_nbr\nORDER BY SUM(s.units) DESC\nLIMIT 1",
    "8184": "SELECT COUNT(store_nbr) AS number_of_stores\nFROM relation\nWHERE station_nbr = (\n    SELECT station_nbr\n    FROM weather\n    GROUP BY station_nbr\n    ORDER BY AVG(avgspeed) DESC\n    LIMIT 1\n)",
    "8185": "SELECT DISTINCT s.store_nbr\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nWHERE r.station_nbr = 14\nAND strftime('%Y-%m', s.date) = '2014-02'\nAND s.item_nbr = 44\nAND s.units >= 300",
    "8186": "SELECT siw.item_nbr, SUM(siw.units) AS total_units\nFROM sales_in_weather siw\nJOIN relation r ON siw.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND siw.date = w.date\nWHERE w.station_nbr = 9\nAND w.codesum LIKE '%RA%'\nAND SUBSTR(siw.date, 1, 7) = '2013-06'\nGROUP BY siw.item_nbr\nORDER BY total_units DESC\nLIMIT 1",
    "8187": "SELECT r.station_nbr\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nWHERE s.item_nbr = 5\nGROUP BY r.station_nbr\nORDER BY SUM(s.units) DESC\nLIMIT 1",
    "8188": "SELECT MIN(sunrise) AS earliest_sunrise\nFROM weather\nWHERE station_nbr IN (\n    SELECT station_nbr\n    FROM relation\n    GROUP BY station_nbr\n    HAVING COUNT(store_nbr) = 1\n)\nAND SUBSTR(date, 1, 7) = '2012-02'\nAND sunrise != ' - '",
    "8189": "SELECT siw.store_nbr, SUM(siw.units) AS total_units\nFROM sales_in_weather siw\nJOIN relation r ON siw.store_nbr = r.store_nbr\nWHERE r.station_nbr = 17\nAND siw.item_nbr = 45\nAND SUBSTR(siw.date, 1, 7) = '2012-10'\nGROUP BY siw.store_nbr\nORDER BY total_units DESC\nLIMIT 1",
    "8190": "SELECT siw.item_nbr\nFROM sales_in_weather siw\nJOIN relation r ON siw.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE w.date = (\n    SELECT date\n    FROM weather\n    ORDER BY snowfall DESC\n    LIMIT 1\n)",
    "8191": "SELECT r.station_nbr, SUM(s.units) AS total_units\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nGROUP BY r.station_nbr\nORDER BY total_units DESC\nLIMIT 3",
    "8192": "SELECT COUNT(store_nbr) AS number_of_stores\nFROM relation\nWHERE station_nbr = (\n    SELECT station_nbr\n    FROM weather\n    ORDER BY heat DESC\n    LIMIT 1\n)",
    "8193": "SELECT w.tmin\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 29 AND w.date = '2014-02-08'",
    "8194": "SELECT COUNT(DISTINCT r.station_nbr) \nFROM relation r\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE w.date = '2014-02-18' AND w.stnpressure <= 30\nAND r.station_nbr IN (\n    SELECT station_nbr \n    FROM relation\n    GROUP BY station_nbr\n    HAVING COUNT(store_nbr) = 3\n)",
    "8195": "WITH StoreCounts AS (\n    SELECT station_nbr, COUNT(store_nbr) AS store_count\n    FROM relation\n    GROUP BY station_nbr\n    ORDER BY store_count DESC\n    LIMIT 1\n),\nFebruaryWeather AS (\n    SELECT w.station_nbr, AVG(w.tmax) AS avg_max_temp\n    FROM weather w\n    JOIN StoreCounts sc ON w.station_nbr = sc.station_nbr\n    WHERE strftime('%Y-%m', w.date) = '2012-02'\n    GROUP BY w.station_nbr\n)\nSELECT * FROM FebruaryWeather;",
    "8196": "SELECT \n    ROUND(\n        (SELECT SUM(units) \n         FROM sales_in_weather \n         WHERE store_nbr = 10 \n         AND item_nbr = 5 \n         AND SUBSTR(date, 1, 4) = '2014') \n        / \n        (SELECT SUM(sales_in_weather.units) \n         FROM sales_in_weather \n         JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr \n         WHERE relation.station_nbr = 12 \n         AND sales_in_weather.item_nbr = 5 \n         AND SUBSTR(sales_in_weather.date, 1, 4) = '2014') \n    * 100, 2) AS percentage_sold;",
    "8197": "SELECT MAX(avgspeed) AS maximum_average_speed FROM weather",
    "8198": "SELECT COUNT(DISTINCT date) AS days_with_snow_over_5_inches\nFROM weather\nWHERE snowfall > 5",
    "8199": "SELECT COUNT(DISTINCT w.date) \nFROM weather w\nWHERE time(w.sunrise) < time('05:00:00');",
    "8200": "SELECT MIN(dewpoint) AS minimum_dew_point FROM weather",
    "8201": "SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND date = '2012-01-15'",
    "8202": "SELECT COUNT(DISTINCT r.station_nbr)\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nWHERE s.item_nbr = 5 AND strftime('%Y-%m', s.date) = '2014-01'",
    "8203": "SELECT MIN(w.tmin) AS lowest_min_temp\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 16 AND strftime('%Y-%m', w.date) = '2012-01'",
    "8204": "SELECT SUM(s.units) AS total_units_sold\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 7 AND s.store_nbr = 7 AND w.snowfall < 5",
    "8205": "SELECT SUM(s.units) AS total_units_sold\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.store_nbr = 9 AND w.snowfall > 0 AND w.snowfall IS NOT NULL",
    "8206": "SELECT DISTINCT r.station_nbr, s.item_nbr\nFROM relation r\nJOIN sales_in_weather s ON r.store_nbr = s.store_nbr\nWHERE r.store_nbr = 17",
    "8207": "SELECT w.date\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 35 AND w.codesum LIKE '%HZ%'",
    "8208": "SELECT r.store_nbr, w.sealevel, w.avgspeed\nFROM relation r\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE r.store_nbr IN (3, 4)",
    "8209": "SELECT s.item_nbr, MAX(s.units) AS max_units_sold\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.store_nbr = 1 AND w.codesum LIKE '%RA%'\nGROUP BY s.item_nbr\nORDER BY max_units_sold DESC\nLIMIT 1;",
    "8210": "SELECT MAX(w.tmax) / MIN(w.tmin) AS temperature_ratio\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE r.store_nbr = 11",
    "8211": "SELECT\n    SUM(CASE WHEN r.station_nbr = 1 THEN s.units ELSE 0 END) -\n    SUM(CASE WHEN r.station_nbr = 2 THEN s.units ELSE 0 END) AS difference\nFROM\n    sales_in_weather s\nJOIN\n    relation r ON s.store_nbr = r.store_nbr\nWHERE\n    strftime('%Y', s.date) = '2012'",
    "8212": "SELECT\n    ABS(tavg_18 - tavg_19) AS avg_temp_difference\nFROM\n    (SELECT \n        w.tavg AS tavg_18\n    FROM \n        weather w\n    JOIN \n        relation r ON w.station_nbr = r.station_nbr\n    WHERE \n        r.store_nbr = 18\n        AND w.date = '2022-09-16') AS store_18,\n    (SELECT \n        w.tavg AS tavg_19\n    FROM \n        weather w\n    JOIN \n        relation r ON w.station_nbr = r.station_nbr\n    WHERE \n        r.store_nbr = 19\n        AND w.date = '2022-09-16') AS store_19",
    "8213": "SELECT SUM(s.units) AS total_units_sold\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 1 AND w.tavg = 83",
    "8214": "WITH SunsetTimes AS (\n    SELECT\n        MIN(sunset) AS EarliestSunset,\n        MAX(sunset) AS LatestSunset\n    FROM weather\n),\nEarliestSunsetSales AS (\n    SELECT\n        sw.store_nbr,\n        SUM(sw.units) AS TotalUnits\n    FROM sales_in_weather sw\n    JOIN relation r ON sw.store_nbr = r.store_nbr\n    JOIN weather w ON r.station_nbr = w.station_nbr AND w.date = sw.date\n    JOIN SunsetTimes st ON w.sunset = st.EarliestSunset\n    WHERE sw.item_nbr = 1\n    GROUP BY sw.store_nbr\n),\nLatestSunsetSales AS (\n    SELECT\n        sw.store_nbr,\n        SUM(sw.units) AS TotalUnits\n    FROM sales_in_weather sw\n    JOIN relation r ON sw.store_nbr = r.store_nbr\n    JOIN weather w ON r.station_nbr = w.station_nbr AND w.date = sw.date\n    JOIN SunsetTimes st ON w.sunset = st.LatestSunset\n    WHERE sw.item_nbr = 1\n    GROUP BY sw.store_nbr\n)\nSELECT\n    SUM(LatestSunsetSales.TotalUnits) - SUM(EarliestSunsetSales.TotalUnits) AS DifferenceInUnitsSold\nFROM EarliestSunsetSales\nJOIN LatestSunsetSales ON EarliestSunsetSales.store_nbr = LatestSunsetSales.store_nbr",
    "8215": "SELECT SUM(s.units) AS total_units_sold\nFROM sales_in_weather s\nJOIN relation r ON s.store_nbr = r.store_nbr\nJOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date\nWHERE s.item_nbr = 10\nAND w.tavg < (\n    SELECT AVG(tavg)\n    FROM (\n        SELECT tavg\n        FROM weather\n        ORDER BY tavg\n        LIMIT 2 - (SELECT COUNT(*) FROM weather) % 2    -- Adjust for odd or even number of rows\n        OFFSET (SELECT (COUNT(*) - 1) / 2 FROM weather)\n    )\n)",
    "8216": "SELECT \n    ABS(\n        (SELECT AVG(tavg) \n         FROM weather \n         JOIN relation ON weather.station_nbr = relation.station_nbr \n         WHERE SUBSTR(weather.date, 1, 7) = '2012-05' AND relation.store_nbr = 6) \n        - \n        (SELECT AVG(tavg) \n         FROM weather \n         JOIN relation ON weather.station_nbr = relation.station_nbr \n         WHERE SUBSTR(weather.date, 1, 7) = '2012-05' AND relation.store_nbr = 7)\n    ) AS avg_temp_difference",
    "8217": "SELECT Country, MIN(Percentage) AS MinPercentage\nFROM language\nWHERE Name = 'Polish'",
    "8218": "SELECT country.Name\nFROM country\nJOIN ethnicGroup ON country.Code = ethnicGroup.Country\nWHERE ethnicGroup.Name = 'African' AND ethnicGroup.Percentage > 90",
    "8219": "SELECT e.Name AS EthnicGroup, l.Percentage AS LanguagePercentage\nFROM ethnicGroup e\nJOIN language l ON e.Country = l.Country\nWHERE e.Country = (SELECT Code FROM country WHERE Name = 'Singapore')",
    "8220": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country)) AS percentage\nFROM \n    politics\nWHERE \n    Independence > '1970-01-01' AND Government = 'Republic'",
    "8221": "SELECT economy.GDP, politics.Government\nFROM economy\nJOIN politics ON economy.Country = politics.Country\nWHERE economy.Country = 'Bosnia and Herzegovina'",
    "8222": "SELECT c.Name AS Country, c.Population\nFROM country c\nJOIN population p ON c.Code = p.Country\nWHERE p.Population_Growth > 2 AND p.Infant_Mortality < 5;",
    "8223": "SELECT e.Country, e.Name AS EthnicGroup, MAX(e.Percentage) AS Percentage\nFROM ethnicGroup e\nJOIN country c ON e.Country = c.Code\nWHERE c.Population > 10000000\nGROUP BY e.Country",
    "8224": "SELECT \n    c.Name AS CountryName, \n    e.Name AS EthnicGroupName, \n    e.Percentage\nFROM \n    ethnicGroup e\nJOIN \n    country c ON e.Country = c.Code\nWHERE \n    c.Name = (\n        SELECT \n            c2.Name\n        FROM \n            ethnicGroup e2\n        JOIN \n            country c2 ON e2.Country = c2.Code\n        GROUP BY \n            c2.Name\n        ORDER BY \n            COUNT(e2.Name) DESC, c2.Name\n        LIMIT 1\n    )\nORDER BY \n    e.Percentage DESC;",
    "8225": "SELECT country.Name \nFROM country \nJOIN ethnicGroup ON country.Code = ethnicGroup.Country \nWHERE ethnicGroup.Name = 'African' AND ethnicGroup.Percentage = 100;",
    "8226": "SELECT p.Infant_Mortality\nFROM population p\nJOIN (\n    SELECT e.Country, MIN(e.Percentage) AS MinPercentage\n    FROM ethnicGroup e\n    WHERE e.Name = 'Amerindian'\n    GROUP BY e.Country\n    ORDER BY MinPercentage ASC\n    LIMIT 1\n) AS e_min ON p.Country = e_min.Country",
    "8227": "SELECT e.Country, e.Agriculture\nFROM economy e\nJOIN country c ON e.Country = c.Code\nWHERE c.Area > 600000",
    "8228": "SELECT p.Country\nFROM politics AS pol\nJOIN population AS p ON pol.Country = p.Country\nWHERE pol.Government = 'republic'\nORDER BY p.Population_Growth DESC\nLIMIT 1;",
    "8229": "SELECT Independence FROM politics WHERE Country = (SELECT Code FROM country WHERE Name = 'Bulgaria');",
    "8230": "SELECT \n    e.Country,\n    ROUND((e.Percentage / 100) * c.Population) AS ArabPopulation\nFROM \n    ethnicGroup e\nJOIN \n    country c ON e.Country = c.Code\nWHERE \n    e.Name = 'Arab'",
    "8231": "SELECT ROUND((e.Percentage / 100) * c.Population) AS AfricanPopulation\nFROM ethnicGroup e\nJOIN country c ON e.Country = c.Code\nWHERE e.Name = 'African' AND c.Name = 'Turks and Caicos Islands'",
    "8232": "SELECT \n    p.Country, \n    (p.Population_Growth / 100) * c.Population AS GrowthPopulation\nFROM \n    population p\nJOIN \n    country c ON p.Country = c.Code\nWHERE \n    p.Infant_Mortality = (\n        SELECT \n            MIN(Infant_Mortality) \n        FROM \n            population\n    )\nLIMIT 1;",
    "8233": "SELECT c.Capital, c.Population\nFROM country c\nJOIN economy e ON c.Code = e.Country\nWHERE e.GDP > 400000",
    "8234": "SELECT Service * GDP AS ServiceOfGDP\nFROM economy\nWHERE Country = 'Brazil';",
    "8235": "SELECT Country, Infant_Mortality, Population_Growth\nFROM population\nORDER BY Infant_Mortality DESC\nLIMIT 1;",
    "8236": "SELECT country.Name, country.Population, population.Population_Growth\nFROM country\nJOIN population ON country.Code = population.Country\nWHERE population.Population_Growth < 0;",
    "8237": "SELECT c.Name, p.Infant_Mortality\nFROM country c\nJOIN population p ON c.Code = p.Country\nWHERE c.Area BETWEEN 500000 AND 1000000",
    "8238": "SELECT country.Name, economy.GDP\nFROM population\nJOIN country ON population.Country = country.Code\nJOIN economy ON country.Code = economy.Country\nWHERE population.Population_Growth > 3",
    "8239": "SELECT Infant_Mortality FROM population WHERE Country = 'Ethiopia';",
    "8240": "SELECT GDP * Industry AS IndustrySectorGDP\nFROM economy\nWHERE Country = (SELECT Code FROM country WHERE Name = 'Singapore')",
    "8241": "SELECT e.Agriculture \nFROM economy e \nJOIN country c ON e.Country = c.Code \nORDER BY c.Area ASC \nLIMIT 1",
    "8242": "SELECT Country\nFROM ethnicGroup\nWHERE Name = 'Albanian'\nORDER BY Percentage DESC\nLIMIT 1;",
    "8243": "SELECT COUNT(DISTINCT e.Country) \nFROM ethnicGroup e \nJOIN country c ON e.Country = c.Code \nWHERE e.Name = 'African' AND c.Population > 10000000;",
    "8244": "SELECT Country\nFROM ethnicGroup\nGROUP BY Country\nHAVING COUNT(Name) > 5",
    "8245": "SELECT Country\nFROM economy\nORDER BY GDP DESC\nLIMIT 1;",
    "8246": "SELECT COUNT(*) \nFROM country \nJOIN economy ON country.Code = economy.Country \nWHERE country.Population > 10000000 AND economy.GDP > 500000;",
    "8247": "SELECT country.Capital\nFROM country\nJOIN economy ON country.Code = economy.Country\nWHERE economy.Inflation < 2;",
    "8248": "SELECT Country\nFROM economy\nORDER BY Inflation ASC\nLIMIT 1;",
    "8249": "SELECT COUNT(*) \nFROM country \nWHERE Code IN (\n    SELECT Country \n    FROM economy \n    WHERE Agriculture < 50\n) \nAND Area > 8000000;",
    "8250": "SELECT COUNT(DISTINCT city.Name) AS SaltLakeCities\nFROM city\nJOIN located ON city.Name = located.City AND city.Province = located.Province\nJOIN lake ON located.Lake = lake.Name\nWHERE lake.Type = 'salt'",
    "8251": "SELECT l.Depth\nFROM lake l\nJOIN geo_lake gl ON l.Name = gl.Lake\nWHERE gl.Province = 'Albania';",
    "8252": "SELECT c.Name AS City\nFROM lake l\nJOIN located loc ON l.Name = loc.Lake\nJOIN city c ON loc.City = c.Name AND loc.Province = c.Province\nORDER BY l.Altitude DESC\nLIMIT 1;",
    "8253": "SELECT COUNT(DISTINCT gl.Lake) AS NumberOfLakes\nFROM geo_lake gl\nJOIN province p ON gl.Province = p.Name AND gl.Country = p.Country\nJOIN lake l ON gl.Lake = l.Name\nWHERE p.Name = 'Canary Islands' AND l.Area > 1000000;",
    "8254": "SELECT Country, COUNT(Name) AS LanguageCount\nFROM language\nGROUP BY Country\nORDER BY LanguageCount DESC\nLIMIT 1;",
    "8255": "SELECT country.Capital \nFROM language \nJOIN country ON language.Country = country.Code \nWHERE language.Name = 'Armenian' AND language.Percentage > 90;",
    "8256": "SELECT COUNT(DISTINCT country.Name) AS CountriesWithOver2Languages\nFROM country\nJOIN language ON country.Code = language.Country\nWHERE country.Population < 1000000\nGROUP BY country.Code\nHAVING COUNT(language.Name) > 2;",
    "8257": "SELECT COUNT(*) \nFROM organization \nJOIN country ON organization.Country = country.Code \nWHERE country.Population < 1000000;",
    "8258": "SELECT COUNT(*) \nFROM organization \nJOIN country ON organization.Country = country.Code \nJOIN economy ON country.Code = economy.Country \nWHERE organization.Established > '1999-01-01' AND economy.GDP < 500000;",
    "8259": "SELECT COUNT(DISTINCT o.Country) \nFROM organization o \nJOIN economy e ON o.Country = e.Country \nWHERE e.Inflation > 5 \nGROUP BY o.Country \nHAVING COUNT(o.Abbreviation) > 3;",
    "8260": "SELECT COUNT(*) AS NumberOfOrganizations\nFROM organization\nWHERE Country = (\n    SELECT Country\n    FROM ethnicGroup\n    GROUP BY Country\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
    "8261": "SELECT o.Name\nFROM organization o\nJOIN country c ON o.Country = c.Code\nWHERE c.Code IN (\n    SELECT l.Country\n    FROM language l\n    WHERE l.Name = 'Dutch'\n)",
    "8262": "SELECT COUNT(DISTINCT o.Abbreviation) \nFROM organization o \nJOIN country c ON o.Country = c.Code \nJOIN language l ON c.Code = l.Country \nWHERE l.Name = 'Bosnian';",
    "8263": "SELECT MAX(population.Infant_Mortality) AS Highest_Infant_Mortality\nFROM population\nJOIN economy ON population.Country = economy.Country\nWHERE economy.Inflation < 3;",
    "8264": "SELECT COUNT(*) \nFROM economy \nJOIN population ON economy.Country = population.Country \nWHERE GDP > 1000000 AND Population_Growth > 3;",
    "8265": "SELECT e.Country, (e.GDP / c.Population) AS GDP_Per_Capita\nFROM economy e\nJOIN country c ON e.Country = c.Code\nORDER BY GDP_Per_Capita DESC\nLIMIT 1;",
    "8266": "SELECT country.Name, MAX(lakeCoverage) AS HighestLakeAreaCoverage\nFROM (\n  SELECT c.Name, (SUM(l.Area) / c.Area) * 100 AS lakeCoverage\n  FROM country c\n  JOIN geo_lake gl ON c.Code = gl.Country\n  JOIN lake l ON gl.Lake = l.Name\n  GROUP BY c.Name\n)",
    "8267": "SELECT AVG(Population_Growth) AS Average_Population_Growth\nFROM population\nWHERE Country IN (\n    SELECT Country\n    FROM language\n    GROUP BY Country\n    HAVING COUNT(Name) > 3\n)",
    "8268": "SELECT Country\nFROM economy\nWHERE Inflation > (SELECT AVG(Inflation) * 1.3 FROM economy)",
    "8269": "SELECT Country \nFROM province \nWHERE Name = 'Baghdad';",
    "8270": "SELECT \n    r.Name AS Religion,\n    (c.Population * r.Percentage / 100.0) AS Population\nFROM \n    religion r\nJOIN \n    country c ON r.Country = c.Code\nWHERE \n    c.Name = 'Martinique'\nORDER BY \n    Population DESC\nLIMIT 1;",
    "8271": "SELECT country.Name \nFROM country \nJOIN religion ON country.Code = religion.Country \nWHERE religion.Name = 'Christian' AND religion.Percentage = 41;",
    "8272": "SELECT DISTINCT country.Name \nFROM country \nJOIN geo_river ON country.Code = geo_river.Country \nJOIN river ON geo_river.River = river.Name \nWHERE river.Name = 'Detroit River'",
    "8273": "SELECT c1.Name AS Country1_Name, c2.Name AS Country2_Name, b.Length\nFROM borders b\nJOIN country c1 ON b.Country1 = c1.Code\nJOIN country c2 ON b.Country2 = c2.Code\nORDER BY b.Length DESC\nLIMIT 1",
    "8274": "SELECT c.Name, COUNT(*) AS NeighborCount\nFROM borders b\nJOIN country c ON b.Country1 = c.Code OR b.Country2 = c.Code\nGROUP BY c.Name\nORDER BY NeighborCount DESC\nLIMIT 1;",
    "8275": "SELECT country.Name \nFROM country \nJOIN geo_mountain ON country.Code = geo_mountain.Country \nWHERE geo_mountain.Mountain = 'Cerro Chirripo';",
    "8276": "SELECT COUNT(*) AS NumberOfMountains\nFROM geo_mountain\nWHERE Country = (SELECT Code FROM country WHERE Name = 'Indonesia');",
    "8277": "SELECT COUNT(*) AS QuantityOfMountains\nFROM geo_mountain\nWHERE Country = 'Japan';",
    "8278": "SELECT i.Latitude\nFROM island i\nJOIN mountainOnIsland moi ON i.Name = moi.Island\nJOIN mountain m ON moi.Mountain = m.Name\nWHERE m.Name = 'Andrinjitra'",
    "8279": "SELECT Country \nFROM geo_mountain \nWHERE Mountain = (\n    SELECT Name \n    FROM mountain \n    ORDER BY Height DESC \n    LIMIT 1 OFFSET 1\n)",
    "8280": "SELECT \n    (country.Area / continent.Area) * 100 AS EgyptAreaPercentageOfAsia\nFROM \n    country\nJOIN \n    encompasses ON country.Code = encompasses.Country\nJOIN \n    continent ON encompasses.Continent = continent.Name\nWHERE \n    country.Name = 'Egypt' AND continent.Name = 'Asia'",
    "8281": "SELECT \n    (country.Area / continent.Area) * 100 AS EgyptAreaPercentageOfAsia\nFROM \n    country\nJOIN \n    encompasses ON country.Code = encompasses.Country\nJOIN \n    continent ON encompasses.Continent = continent.Name\nWHERE \n    country.Name = 'Egypt' AND continent.Name = 'Asia'",
    "8282": "SELECT Name \nFROM city \nWHERE Country = 'Japan' \nORDER BY Population DESC \nLIMIT 1;",
    "8283": "SELECT country.Capital \nFROM country \nJOIN city ON country.Name = city.Country \nWHERE city.Name = 'Olsztyn';",
    "8284": "SELECT geo_mountain.Province\nFROM mountain\nJOIN geo_mountain ON mountain.Name = geo_mountain.Mountain\nWHERE mountain.Type = 'volcano'\nORDER BY mountain.Height DESC\nLIMIT 1;",
    "8285": "SELECT Independence FROM politics WHERE Country = (SELECT Code FROM country WHERE Name = 'Uganda');",
    "8286": "SELECT Government FROM politics WHERE Country = (SELECT Code FROM country WHERE Name = 'Iran');",
    "8287": "SELECT c.Name FROM country AS c\nJOIN encompasses ON c.Code = encompasses.Country\nJOIN continent ON encompasses.Continent = continent.Name\nWHERE c.Name = 'Bermuda'",
    "8288": "SELECT c.Capital \nFROM country c \nJOIN ethnicGroup e ON c.Name = e.Country \nWHERE e.Name = 'Malay' \nORDER BY e.Percentage DESC \nLIMIT 1;",
    "8289": "SELECT e.Name, MAX(e.Percentage * c.Population) AS Population\nFROM ethnicGroup e\nJOIN country c ON e.Country = c.Code\nWHERE c.Code = (\n    SELECT Code\n    FROM country\n    ORDER BY Area DESC\n    LIMIT 1 OFFSET 2\n)\nGROUP BY e.Name\nORDER BY Population DESC\nLIMIT 1;",
    "8290": "SELECT country.Name\nFROM city\nJOIN country ON city.Country = country.Code\nWHERE city.Population = 114339",
    "8291": "SELECT COUNT(DISTINCT river.Name) AS NumberOfRivers\nFROM river\nJOIN sea ON river.Sea = sea.Name\nWHERE sea.Depth = 459;",
    "8292": "SELECT Area FROM country WHERE Code = (SELECT Country FROM politics WHERE Independence = '1921-03-13')",
    "8293": "SELECT c.Population / c.Area AS Population_Density\nFROM country c\nJOIN city ci ON c.Name = ci.Country\nWHERE ci.Name = 'Petropavl'",
    "8294": "SELECT \n    (SELECT Percentage FROM language WHERE Country = 'United Kingdom' AND Name = 'English') * \n    (SELECT Population FROM country WHERE Name = 'United Kingdom') / 100\n    -\n    (SELECT Percentage FROM language WHERE Country = 'United Kingdom' AND Name = 'Scottish') * \n    (SELECT Population FROM country WHERE Name = 'United Kingdom') / 100\n    AS Difference",
    "8295": "WITH CountryDensity AS (\n    SELECT \n        c.Name AS CountryName,\n        c.Population / c.Area AS Density\n    FROM \n        country c\n    ORDER BY \n        Density DESC\n    LIMIT 1 OFFSET 11\n),\nMostPopulatedCity AS (\n    SELECT \n        ci.Name AS CityName,\n        ci.Population,\n        ci.Country\n    FROM \n        city ci\n    JOIN \n        CountryDensity cd ON ci.Country = cd.CountryName\n    ORDER BY \n        ci.Population DESC\n    LIMIT 1\n)\nSELECT \n    CityName\nFROM \n    MostPopulatedCity;",
    "8296": "SELECT MAX(Length) / MIN(Length) AS times_longer\nFROM borders\nWHERE Country1 = 'United States' OR Country2 = 'United States';",
    "8297": "SELECT c.Capital\nFROM country c\nJOIN geo_mountain gm ON c.Code = gm.Country\nGROUP BY c.Code\nHAVING COUNT(gm.Mountain) > 4",
    "8298": "SELECT COUNT(DISTINCT geo_mountain.Mountain) AS NumberOfMountains\nFROM geo_mountain\nJOIN country ON geo_mountain.Country = country.Code\nWHERE country.Population = (SELECT MAX(Population) FROM country);",
    "8299": "SELECT COUNT(DISTINCT e.Country) AS CountriesWithLessThan2Mountains\nFROM economy e\nJOIN country c ON e.Country = c.Code\nLEFT JOIN geo_mountain gm ON c.Code = gm.Country\nGROUP BY e.Country\nHAVING e.Agriculture > 40 AND COUNT(gm.Mountain) < 2",
    "8300": "SELECT m.Name \nFROM mountain m\nJOIN geo_mountain gm ON m.Name = gm.Mountain\nJOIN country c ON gm.Country = c.Code\nJOIN economy e ON c.Code = e.Country\nORDER BY e.Inflation ASC\nLIMIT 1;",
    "8301": "SELECT MAX(desert_count) AS max_deserts\nFROM (\n    SELECT c.Name, COUNT(d.Name) AS desert_count\n    FROM country c\n    LEFT JOIN geo_desert gd ON c.Code = gd.Country\n    LEFT JOIN desert d ON gd.Desert = d.Name\n    JOIN politics p ON c.Code = p.Country\n    WHERE p.Government = 'republic' AND p.Independent IS NOT NULL\n    GROUP BY c.Name\n)",
    "8302": "SELECT d.Name AS Desert\nFROM desert d\nJOIN geo_desert gd ON d.Name = gd.Desert\nJOIN country c ON gd.Country = c.Code\nWHERE c.Population > 100000 AND c.Area < 500000;",
    "8303": "SELECT COUNT(DISTINCT d.Name) AS NumberOfDeserts\nFROM desert d\nJOIN geo_desert gd ON d.Name = gd.Desert\nJOIN language l ON gd.Country = l.Country\nWHERE l.Name = 'Armenian' AND l.Percentage > 90;",
    "8304": "SELECT m.Name AS Mountain, m.Height\nFROM mountain m\nJOIN geo_mountain gm ON m.Name = gm.Mountain\nJOIN country c ON gm.Country = c.Code\nJOIN politics p ON c.Code = p.Country\nWHERE p.Independence IS NOT NULL\nORDER BY m.Height DESC\nLIMIT 1;",
    "8305": "SELECT COUNT(*) AS VolcanicMountainsCount\nFROM mountain\nJOIN geo_mountain ON mountain.Name = geo_mountain.Mountain\nJOIN country ON geo_mountain.Country = country.Code\nWHERE mountain.Type = 'volcanic' AND country.Population <= 5000000;",
    "8306": "SELECT COUNT(DISTINCT geo_mountain.Country) \nFROM geo_mountain \nJOIN mountain ON geo_mountain.Mountain = mountain.Name \nJOIN economy ON geo_mountain.Country = economy.Country \nWHERE economy.GDP > 1000000 AND mountain.Height > 1000;",
    "8307": "SELECT MAX(Length) AS MaxBorderLength\nFROM borders\nWHERE Country1 IN (SELECT Country FROM politics WHERE Dependent IS NULL)\nAND Country2 IN (SELECT Country FROM politics WHERE Dependent IS NULL)",
    "8308": "SELECT COUNT(DISTINCT b.Country1) \nFROM borders b\nJOIN politics p ON b.Country1 = p.Country OR b.Country2 = p.Country\nWHERE b.Length > 200 AND p.Government = 'republic'",
    "8309": "SELECT Country1, Country2, Length \nFROM borders \nORDER BY Length ASC \nLIMIT 1;",
    "8310": "SELECT SUM(e.GDP) AS Total_GDP_Europe\nFROM encompasses AS en\nJOIN economy AS e ON en.Country = e.Country\nWHERE en.Continent = 'Europe'",
    "8311": "SELECT COUNT(DISTINCT geo_mountain.Mountain) AS NumberOfMountainsOnAfricanContinent\nFROM geo_mountain\nJOIN province ON geo_mountain.Province = province.Name AND geo_mountain.Country = province.Country\nJOIN encompasses ON province.Country = encompasses.Country\nJOIN continent ON encompasses.Continent = continent.Name\nWHERE continent.Name = 'Africa';",
    "8312": "SELECT d.Name AS Desert, d.Area\nFROM desert d\nJOIN geo_desert gd ON d.Name = gd.Desert\nJOIN encompasses e ON gd.Country = e.Country\nJOIN continent c ON e.Continent = c.Name\nWHERE c.Name = 'America'\nORDER BY d.Area DESC\nLIMIT 1;",
    "8313": "SELECT c.Name\nFROM country c\nJOIN encompasses e ON c.Code = e.Country\nJOIN population p ON c.Code = p.Country\nWHERE e.Continent = 'Europe' AND p.Population_Growth > 3",
    "8314": "SELECT COUNT(*) \nFROM population \nJOIN encompasses ON population.Country = encompasses.Country \nWHERE encompasses.Continent = 'Europe' AND population.Infant_Mortality > 100;",
    "8315": "SELECT COUNT(DISTINCT l.Country)\nFROM language l\nJOIN population p ON l.Country = p.Country\nWHERE l.Name = 'Bosnian' AND (p.Population_Growth <= 0 OR p.Population_Growth IS NULL);",
    "8316": "SELECT AVG(Agriculture) AS AvgAgriculturePercentage\nFROM economy\nWHERE Country IN (\n    SELECT Country\n    FROM encompasses\n    WHERE Continent = 'Africa'\n)",
    "8317": "SELECT COUNT(*) \nFROM (\n    SELECT e.Country, (e.GDP / c.Population) AS GDP_Per_Capita\n    FROM economy e\n    JOIN country c ON e.Country = c.Code\n    LEFT JOIN politics p ON c.Code = p.Country\n    WHERE p.Independent IS NOT NULL AND (e.GDP / c.Population) > 5000\n)",
    "8318": "SELECT AVG(e.Inflation) AS AverageInflation\nFROM economy e\nJOIN encompasses ec ON e.Country = ec.Country\nJOIN (\n    SELECT c.Name\n    FROM continent c\n    ORDER BY c.Area DESC\n    LIMIT 1\n) AS biggest_continent ON ec.Continent = biggest_continent.Name",
    "8319": "SELECT i.Name, i.Area\nFROM island i\nJOIN locatedOn lo ON i.Name = lo.Island\nWHERE lo.City = 'Balikpapan';",
    "8320": "SELECT city.Name, city.Population\nFROM city\nJOIN locatedOn ON city.Name = locatedOn.City AND city.Province = locatedOn.Province\nWHERE locatedOn.Island = 'Sumatra'",
    "8321": "SELECT Island.Name, Island.Longitude, Island.Latitude\nFROM Island\nJOIN geo_island ON Island.Name = geo_island.Island\nJOIN province ON geo_island.Province = province.Name AND geo_island.Country = province.Country\nWHERE province.Name = 'South Yorkshire';",
    "8322": "SELECT i.Name \nFROM island i \nJOIN geo_island gi ON i.Name = gi.Island \nJOIN province p ON gi.Province = p.Name AND gi.Country = p.Country \nWHERE i.Area > (\n    SELECT i2.Area \n    FROM island i2 \n    JOIN geo_island gi2 ON i2.Name = gi2.Island \n    JOIN province p2 ON gi2.Province = p2.Name AND gi2.Country = p2.Country \n    WHERE p2.Name = 'Warwickshire'\n)",
    "8323": "SELECT i.Name AS IslandName, c.Name AS CityName\nFROM island i\nJOIN locatedOn l ON i.Name = l.Island\nJOIN city c ON l.City = c.Name AND l.Province = c.Province\nWHERE i.Area < 200",
    "8324": "SELECT c.Province, p.Capital \nFROM city c \nJOIN province p ON c.Province = p.Name AND c.Country = p.Country \nWHERE c.Name = 'Glenrothes';",
    "8325": "SELECT city.Name, city.Population\nFROM city\nJOIN province ON city.Province = province.Name AND city.Country = province.Country\nWHERE province.Population > 1000000;",
    "8326": "SELECT gi.Island, loc.City, loc.Province\nFROM geo_island gi\nJOIN island i ON gi.Island = i.Name\nLEFT JOIN locatedOn loc ON gi.Island = loc.Island AND gi.Country = loc.Country AND gi.Province = loc.Province\nWHERE i.Type = 'coral'",
    "8327": "SELECT AVG(Population) AS AveragePopulation\nFROM city\nJOIN located ON city.Name = located.City AND city.Province = located.Province\nWHERE located.Sea = 'Baltic Sea'",
    "8328": "SELECT \n    c.Name AS City, \n    p.Name AS Province, \n    (CAST(c.Population AS REAL) / p.Population) * 100 AS Population_Percentage\nFROM \n    city c\nJOIN \n    province p ON c.Province = p.Name AND c.Country = p.Country\nWHERE \n    c.Name = 'Edmonton'",
    "8329": "SELECT Name FROM river WHERE Sea = 'Black Sea';",
    "8330": "SELECT l.Name AS LakeName, c.Name AS CityName\nFROM lake l\nJOIN located loc ON l.Name = loc.Lake\nJOIN city c ON loc.City = c.Name AND loc.Province = c.Province\nJOIN province p ON c.Province = p.Name AND c.Country = p.Country\nWHERE p.Name = 'Albania' AND p.Country = loc.Country;",
    "8331": "SELECT Name, Height FROM mountain WHERE Mountains = 'Himalaya' ORDER BY Height DESC LIMIT 1;",
    "8332": "SELECT Name, Longitude, Latitude\nFROM mountain\nWHERE Type = 'volcanic';",
    "8333": "SELECT Name FROM mountain WHERE Type = 'volcano' AND Height BETWEEN 2000 AND 4000;",
    "8334": "SELECT Name, MAX(Length) as MaxLength\nFROM river\nWHERE Sea = 'Mediterranean'",
    "8335": "SELECT \n    (COUNT(CASE WHEN Type != 'volcano' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS PercentNonVolcanic\nFROM \n    mountain\nWHERE \n    Mountains = 'Andes';",
    "8336": "SELECT DISTINCT c.Name AS City, c.Province\nFROM city c\nJOIN located l ON c.Name = l.City AND c.Province = l.Province\nJOIN river r ON l.River = r.Name\nWHERE r.Sea = 'Atlantic Ocean'",
    "8337": "SELECT river.Name, river.Length\nFROM river\nJOIN located ON river.Name = located.River\nWHERE located.City = 'Orleans';",
    "8338": "SELECT mountain.Height, mountain.Longitude, mountain.Latitude\nFROM mountain\nJOIN river ON mountain.Name = river.Mountains\nWHERE river.Name = 'Lech'",
    "8339": "SELECT river.Name AS RiverName, river.Mountains AS SourceMountains\nFROM river\nJOIN geo_river ON river.Name = geo_river.River\nWHERE geo_river.Province = 'Lorraine';",
    "8340": "SELECT mountain.Name, mountain.Height\nFROM mountain\nJOIN river ON mountain.Name = river.Mountains\nWHERE river.Name = 'Blue Nile';",
    "8341": "SELECT r.Name, r.Length\nFROM river r\nJOIN located l ON r.Name = l.River\nWHERE l.City = 'Little Rock'",
    "8342": "SELECT r.Name AS River, gp.Province\nFROM river r\nJOIN geo_river gp ON r.Name = gp.River\nWHERE r.Length > 1000;",
    "8343": "SELECT g.Province, g.Country, m.Height\nFROM geo_mountain g\nJOIN mountain m ON g.Mountain = m.Name\nWHERE m.Name = 'Moldoveanu'",
    "8344": "SELECT river.Name, river.Length\nFROM river\nJOIN geo_river ON river.Name = geo_river.River\nWHERE geo_river.Country = 'USA'",
    "8345": "SELECT AVG(Height) AS AverageHeight\nFROM mountain\nJOIN geo_mountain ON mountain.Name = geo_mountain.Mountain\nJOIN province ON geo_mountain.Province = province.Name AND geo_mountain.Country = province.Country\nWHERE province.Name = 'Nepal'",
    "8346": "SELECT MAX(Population) - MIN(Population) AS PopulationDisparity\nFROM city\nWHERE Name IN (\n    SELECT City\n    FROM located\n    WHERE River = 'Seine'\n)",
    "8347": "SELECT r.Name, r.Length\nFROM river r\nJOIN located l ON r.Name = l.River\nWHERE l.City = 'Belgrade'\nORDER BY r.Length DESC",
    "8348": "SELECT Country\nFROM language\nWHERE Name = 'Spanish' AND Percentage = 100;",
    "8349": "SELECT Country \nFROM politics \nWHERE Dependent IN (SELECT Code FROM country WHERE Name = 'United Kingdom');",
    "8350": "SELECT river.Name \nFROM river\nJOIN geo_river ON river.Name = geo_river.River\nWHERE geo_river.Country = 'Canada'",
    "8351": "SELECT Country\nFROM economy\nORDER BY Inflation ASC\nLIMIT 1;",
    "8352": "SELECT c.Province, c.Population\nFROM city c\nJOIN country co ON c.Country = co.Code\nWHERE co.Name = 'United Kingdom'\nORDER BY c.Population DESC\nLIMIT 1 OFFSET 3;",
    "8353": "SELECT (Percentage / 100) * Population AS JewishResidents\nFROM religion\nJOIN country ON religion.Country = country.Code\nWHERE country.Name = 'Moldova' AND religion.Name = 'Jewish'",
    "8354": "SELECT AVG(c.Area) AS AverageArea\nFROM country c\nJOIN encompasses e ON c.Code = e.Country\nJOIN continent ct ON e.Continent = ct.Name\nWHERE ct.Name = 'Asia'",
    "8355": "SELECT g.Country, d.Longitude, d.Latitude\nFROM desert d\nJOIN geo_desert g ON d.Name = g.Desert\nORDER BY d.Area ASC\nLIMIT 1;",
    "8356": "SELECT (Population * Percentage / 100) AS Serbian_Speakers\nFROM country\nJOIN language ON country.Code = language.Country\nWHERE country.Name = 'Montenegro' AND language.Name = 'Serbian'",
    "8357": "SELECT COUNT(m.Name) AS NumberOfMountains\nFROM mountain m\nJOIN geo_mountain gm ON m.Name = gm.Mountain\nJOIN country c ON gm.Country = c.Code\nWHERE c.Area = (SELECT MAX(Area) FROM country)",
    "8358": "SELECT sea.Name AS ShallowestSea, geo_sea.Country\nFROM sea\nJOIN geo_sea ON sea.Name = geo_sea.Sea\nORDER BY sea.Depth ASC\nLIMIT 1;",
    "8359": "SELECT e.Country, e.GDP\nFROM economy e\nJOIN politics p ON e.Country = p.Country\nWHERE p.Government = 'Communist'\nORDER BY e.GDP ASC\nLIMIT 1;",
    "8360": "SELECT p.Government\nFROM politics p\nJOIN economy e ON p.Country = e.Country\nORDER BY e.Inflation DESC\nLIMIT 1",
    "8361": "SELECT p.Country, p.Infant_Mortality\nFROM politics AS po\nJOIN population AS p ON po.Country = p.Country\nWHERE po.Independence = '1960-01-01'\nORDER BY p.Infant_Mortality DESC\nLIMIT 1;",
    "8362": "SELECT \n    b.Length AS BorderLength, \n    p1.Government AS GovernmentCountry1, \n    p2.Government AS GovernmentCountry2\nFROM \n    borders b\nJOIN \n    politics p1 ON b.Country1 = p1.Country\nJOIN \n    politics p2 ON b.Country2 = p2.Country\nORDER BY \n    b.Length ASC\nLIMIT 1;",
    "8363": "SELECT country.Name\nFROM country\nJOIN language ON country.Code = language.Country\nWHERE language.Name = 'Arabic' AND language.Percentage = 100\nORDER BY country.Population ASC\nLIMIT 1;",
    "8364": "SELECT geo_desert.Province\nFROM desert\nJOIN geo_desert ON desert.Name = geo_desert.Desert\nWHERE desert.Area = (SELECT MAX(Area) FROM desert)",
    "8365": "SELECT COUNT(l.Name) AS NumberOfLakes\nFROM lake l\nJOIN geo_lake gl ON l.Name = gl.Lake\nJOIN country c ON gl.Country = c.Code\nJOIN encompasses e ON c.Code = e.Country\nJOIN continent ct ON e.Continent = ct.Name AND ct.Name = 'Africa'\nJOIN politics p ON c.Code = p.Country AND p.Government = 'republic'\nORDER BY c.Population DESC\nLIMIT 1 OFFSET 3",
    "8366": "SELECT r.Name AS Religion, MAX(r.Percentage) AS Percentage\nFROM religion r\nJOIN encompasses e ON r.Country = e.Country\nJOIN continent c ON e.Continent = c.Name\nWHERE c.Name = 'Asia'\nGROUP BY r.Country\nORDER BY Percentage DESC\nLIMIT 1;",
    "8367": "SELECT ABS(p1.Population - p2.Population) AS population_difference\nFROM mountain m\nJOIN mountainOnIsland moi ON m.Name = moi.Mountain\nJOIN island i ON moi.Island = i.Name\nJOIN geo_island gi ON i.Name = gi.Island\nJOIN country c1 ON gi.Country = c1.Code\nJOIN population p1 ON c1.Code = p1.Country\nJOIN (\n    SELECT m2.Name, c2.Code, p2.Population\n    FROM mountain m2\n    JOIN mountainOnIsland moi2 ON m2.Name = moi2.Mountain\n    JOIN island i2 ON moi2.Island = i2.Name\n    JOIN geo_island gi2 ON i2.Name = gi2.Island\n    JOIN country c2 ON gi2.Country = c2.Code\n    JOIN population p2 ON c2.Code = p2.Country\n) AS subquery ON m.Name = subquery.Name AND c1.Code != subquery.Code\nJOIN country c2 ON subquery.Code = c2.Code\nJOIN population p2 ON c2.Code = p2.Country\nWHERE m.Height = (SELECT MAX(Height) FROM mountain)\nLIMIT 1;",
    "8368": "SELECT DISTINCT sea.Name \nFROM sea \nJOIN islandIn ON sea.Name = islandIn.Sea \nJOIN island ON islandIn.Island = island.Name \nORDER BY island.Area DESC \nLIMIT 1;",
    "8369": "SELECT DISTINCT geo_river.Country\nFROM river\nJOIN geo_river ON river.Name = geo_river.River\nWHERE river.Sea = 'Atlantic Ocean'\nORDER BY river.Length DESC\nLIMIT 3",
    "8370": "SELECT c.Population\nFROM city c\nJOIN country co ON c.Country = co.Code\nWHERE co.Independence = '1947-08-15'\nAND c.Name = co.Capital",
    "8371": "SELECT \n    SUM((eg.Percentage / 100) * p.Population) AS Total_Afro_Asian_People\nFROM \n    ethnicGroup eg\nJOIN \n    country c ON eg.Country = c.Code\nJOIN \n    encompasses e ON c.Code = e.Country\nJOIN \n    politics po ON c.Code = po.Country\nJOIN \n    population p ON c.Code = p.Country\nWHERE \n    eg.Name = 'Afro-Asian'\n    AND e.Continent = 'Asia'\n    AND po.Government = 'Monarchy'\nORDER BY \n    p.Population DESC\nLIMIT 1;",
    "8372": "SELECT c.Name AS CityName, co.Capital AS CapitalCity\nFROM city c\nJOIN country co ON c.Country = co.Code\nJOIN located l ON c.Name = l.City AND c.Province = l.Province\nWHERE l.River = 'Euphrat'",
    "8373": "SELECT \n    SUM(CASE WHEN l.Name = 'English' THEN l.Percentage ELSE 0 END) / COUNT(DISTINCT e.Country) AS EnglishSpeakingProportion\nFROM \n    economy e\nJOIN \n    country c ON e.Country = c.Code\nJOIN \n    language l ON c.Code = l.Country\nWHERE \n    e.Country IN (SELECT Country FROM isMember WHERE Organization = 'United Nations' AND Type = 'member')\nGROUP BY \n    e.Country\nHAVING \n    SUM(CASE WHEN l.Name = 'English' THEN l.Percentage ELSE 0 END) > 0;",
    "8374": "SELECT c.Name AS Country, COUNT(p.Name) AS Provinces, e.Service AS Service_GDP_Percentage, (c.Population / c.Area) AS Population_Density\nFROM country c\nJOIN province p ON c.Code = p.Country\nJOIN encompasses ec ON c.Code = ec.Country\nJOIN continent ct ON ec.Continent = ct.Name AND ct.Name = 'Europe'\nJOIN economy e ON c.Code = e.Country\nJOIN politics po ON c.Code = po.Country\nWHERE po.Government = 'federal republic'\nGROUP BY c.Name\nORDER BY Provinces DESC, Service_GDP_Percentage DESC\nLIMIT 1;",
    "8375": "WITH AsianCountries AS (\n    SELECT c.Code, c.Name, c.Population, c.Capital\n    FROM country c\n    JOIN encompasses e ON c.Code = e.Country\n    WHERE e.Continent = 'Asia'\n),\nRankedCountries AS (\n    SELECT *, RANK() OVER (ORDER BY Population DESC) AS PopRank\n    FROM AsianCountries\n),\nCapitalInfo AS (\n    SELECT rc.Capital, rc.Population AS CountryPopulation, ci.Population AS CapitalPopulation\n    FROM RankedCountries rc\n    JOIN city ci ON rc.Capital = ci.Name\n    WHERE rc.PopRank = 3\n)\nSELECT Capital, (CapitalPopulation * 100.0 / CountryPopulation) AS CapitalPopulationPercentage\nFROM CapitalInfo;",
    "8376": "SELECT Name FROM desert ORDER BY Area DESC LIMIT 1 OFFSET 1;",
    "8377": "SELECT Name AS Main_Spoken_Language\nFROM language\nWHERE Country = (SELECT Code FROM country WHERE Name = 'MNE')\nORDER BY Percentage DESC\nLIMIT 1;",
    "8378": "SELECT Percentage \nFROM language \nWHERE Country = (SELECT Code FROM country WHERE Name = 'Cayman Islands') \nAND Name = 'English';",
    "8379": "SELECT c.Name \nFROM country AS c \nJOIN river AS r ON c.Code = r.Country \nWHERE r.Name = 'Pjandsh';",
    "8380": "SELECT c.Name\nFROM country c\nJOIN economy e ON c.Code = e.Country\nWHERE c.Population > 1000000000\nORDER BY e.GDP ASC\nLIMIT 1",
    "8381": "SELECT country.Capital \nFROM country \nJOIN geo_mountain ON country.Code = geo_mountain.Country \nJOIN mountain ON geo_mountain.Mountain = mountain.Name \nWHERE mountain.Name = 'Licancabur';",
    "8382": "SELECT sea.Name, sea.Depth\nFROM sea\nJOIN islandIn ON sea.Name = islandIn.Sea\nJOIN mountainOnIsland ON islandIn.Island = mountainOnIsland.Island\nJOIN mountain ON mountainOnIsland.Mountain = mountain.Name\nWHERE mountain.Name = 'Kerinci'",
    "8383": "SELECT country.Name \nFROM country \nJOIN geo_river ON country.Code = geo_river.Country \nJOIN river ON geo_river.River = river.Name \nWHERE river.Name = 'Amazonas'",
    "8384": "SELECT Name FROM country WHERE Code = (SELECT Country FROM politics WHERE Independence = '1492-01-01');",
    "8385": "SELECT COUNT(*) \nFROM city \nWHERE Country = (SELECT Code FROM country WHERE Name = 'France') \nAND Population > 100000;",
    "8386": "SELECT river.Name, MAX(river.Length) AS LongestLength\nFROM river\nJOIN sea ON river.Sea = sea.Name\nWHERE sea.Depth = 540",
    "8387": "SELECT Country \nFROM mountain \nWHERE Type = 'volcanic' \nORDER BY Height DESC \nLIMIT 1 OFFSET 1",
    "8388": "SELECT i.Longitude\nFROM island i\nJOIN mountainOnIsland moi ON i.Name = moi.Island\nJOIN mountain m ON moi.Mountain = m.Name\nWHERE m.Name = 'Mount Olympos'",
    "8389": "SELECT c.Name\nFROM country c\nJOIN economy e ON c.Code = e.Country\nWHERE c.Area < 100\nORDER BY e.GDP DESC\nLIMIT 1;",
    "8390": "SELECT COUNT(*) AS TotalCitiesInJapan\nFROM city\nWHERE Country = (SELECT Code FROM country WHERE Name = 'Japan');",
    "8391": "SELECT city.Name, MAX(city.Population) AS Population\nFROM city\nJOIN country ON city.Country = country.Code\nLEFT JOIN province ON city.Province = province.Name AND city.Country = province.Country\nWHERE country.Name = 'Bangladesh' AND city.Name != province.Capital\nGROUP BY city.Name\nORDER BY Population DESC\nLIMIT 1;",
    "8392": "SELECT Name, MAX(Population) as Population\nFROM city\nWHERE Name NOT IN (SELECT Capital FROM country)",
    "8393": "SELECT country.Name \nFROM city \nJOIN country ON city.Country = country.Code \nWHERE city.Province = 'Grozny';",
    "8394": "SELECT Name \nFROM religion \nWHERE Country = (SELECT Code FROM country WHERE Name = 'Japan') \nORDER BY Percentage DESC \nLIMIT 1;",
    "8395": "SELECT c1.Name AS Country1Name, c2.Name AS Country2Name, b.Length\nFROM borders b\nJOIN country c1 ON b.Country1 = c1.Code\nJOIN country c2 ON b.Country2 = c2.Code\nWHERE b.Length = 803",
    "8396": "SELECT (SUM(Percentage) / 100) * 100 AS PercentageOfRussiaInEurope\nFROM encompasses\nWHERE Country = 'RUS' AND Continent = 'Europe';",
    "8397": "SELECT country.Name\nFROM country\nJOIN encompasses ON country.Code = encompasses.Country\nGROUP BY country.Name\nHAVING COUNT(DISTINCT encompasses.Continent) > 1",
    "8398": "SELECT c.Population\nFROM city ci\nJOIN country c ON ci.Country = c.Code\nWHERE ci.Name = 'Fareham'",
    "8399": "SELECT \n    p.Infant_Mortality * c.Population * p.Population_Growth AS Number_of_Infant_Mortality\nFROM \n    population p\nJOIN \n    country c ON p.Country = c.Code\nWHERE \n    c.Name = 'Switzerland';",
    "8400": "SELECT COUNT(*) AS NumberOfMountains\nFROM geo_mountain\nWHERE Country = (SELECT Code FROM country WHERE Name = 'United States');",
    "8401": "SELECT Independence FROM politics WHERE Country = (SELECT Code FROM country WHERE Name = 'Equatorial Guinea');",
    "8402": "SELECT e.GDP / c.Population AS GDP_per_capita\nFROM economy e\nJOIN country c ON e.Country = c.Code\nWHERE c.Name = 'Switzerland';",
    "8403": "SELECT e.Service\nFROM economy e\nJOIN country c ON e.Country = c.Code\nJOIN city ci ON c.Name = ci.Country\nWHERE ci.Name = 'Fuenlabrada'",
    "8404": "SELECT MAX(Length) / MIN(Length) AS LengthRatio\nFROM river\nWHERE Name IN (SELECT River FROM geo_river WHERE Country = 'TJ')",
    "8405": "SELECT c.Population / c.Area AS population_density\nFROM country c\nJOIN city ci ON c.Name = ci.Country\nWHERE ci.Name = 'Hanoi'",
    "8406": "SELECT e.Country, e.Name AS EthnicGroup, MAX(e.Percentage) AS Presence\nFROM ethnicGroup e\nINNER JOIN (\n    SELECT Country, COUNT(*) AS EthnicGroupCount\n    FROM ethnicGroup\n    GROUP BY Country\n    HAVING COUNT(*) > 1\n) ec ON e.Country = ec.Country\nGROUP BY e.Country",
    "8407": "SELECT d.Name, COUNT(gd.Country) AS CountryCount\nFROM desert d\nJOIN geo_desert gd ON d.Name = gd.Desert\nGROUP BY d.Name\nHAVING CountryCount > 1;",
    "8408": "SELECT River, GROUP_CONCAT(Province) AS Provinces\nFROM geo_river\nGROUP BY River\nHAVING COUNT(DISTINCT Country) > 1;",
    "8409": "SELECT Country2 AS Bordering_Country, Length, \n       (Length / (SELECT SUM(Length) FROM borders WHERE Country1 = 'Angola') * 100) AS Percentage_Shared\nFROM borders\nWHERE Country1 = 'Angola'",
    "8410": "SELECT \n    (CAST(COUNT(CASE WHEN i.Area <= 300 THEN 1 END) AS REAL) / COUNT(*)) * 100 AS Percent\nFROM \n    island i\nJOIN \n    islandIn ii ON i.Name = ii.Island\nWHERE \n    i.Type = 'non volcanic' \n    AND ii.Sea = 'Lesser Antilles';",
    "8411": "WITH EnglishSpeakingCountries AS (\n    SELECT Country\n    FROM language\n    WHERE Name = 'English'\n),\nEnglishOnlyCountries AS (\n    SELECT Country\n    FROM language\n    WHERE Country IN (SELECT Country FROM EnglishSpeakingCountries)\n    GROUP BY Country\n    HAVING COUNT(*) = 1 AND MAX(Name) = 'English'\n)\nSELECT (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM EnglishSpeakingCountries)) * 100 AS Percentage\nFROM EnglishOnlyCountries",
    "8412": "WITH CountryPopulation AS (\n    SELECT \n        Name, \n        Population,\n        MAX(Population) OVER () AS MaxPopulation\n    FROM country\n),\nFilteredCountries AS (\n    SELECT \n        Name\n    FROM CountryPopulation\n    WHERE Population <= (MaxPopulation * 0.0005)\n)\nSELECT \n    c.Capital\nFROM country c\nJOIN FilteredCountries fc ON c.Name = fc.Name",
    "8413": "SELECT AVG(Length) AS Average_Length\nFROM river\nWHERE River = (SELECT Name FROM river WHERE Name = 'Donau')",
    "8414": "SELECT \n    (COUNT(DISTINCT t.Country) * 1.0 / (SELECT COUNT(*) FROM country)) * 100 AS Percentage_Non_Christian\nFROM \n    target t\nLEFT JOIN \n    religion r ON t.Country = r.Country AND r.Name = 'Christian'\nWHERE \n    r.Name IS NULL;",
    "8415": "SELECT DISTINCT c.Country\nFROM city c\nJOIN isMember im ON c.Country = im.Country\nJOIN organization o ON im.Organization = o.Abbreviation\nWHERE c.Population BETWEEN 50000 AND 300000\nAND o.Established BETWEEN '1991-03-01' AND '1991-04-30'\nAND EXISTS (\n    SELECT 1\n    FROM isMember im2\n    WHERE im2.Country = c.Country\n    AND im2.Organization = 'EBRD'\n)",
    "8416": "SELECT r.Name \nFROM river AS r \nJOIN geo_river AS gr ON r.Name = gr.River \nWHERE r.Sea = 'Donau' AND r.Length > 500 AND gr.Country = 'Slovenia';",
    "8417": "SELECT c.Name AS City\nFROM city c\nJOIN located l ON c.Name = l.City AND c.Province = l.Province\nJOIN sea s1 ON l.Sea = s1.Name\nWHERE s1.Depth < (SELECT Depth FROM sea WHERE Name = 'Bay of Bengal') - 4232;",
    "8418": "SELECT c.Name AS City\nFROM city c\nJOIN located l ON c.Name = l.City AND c.Province = l.Province\nJOIN lake lk ON l.Lake = lk.Name\nWHERE lk.Longitude = -85.35 AND lk.Latitude = 11.6;",
    "8419": "SELECT e.Country, c.Continent\nFROM economy e\nJOIN encompasses c ON e.Country = c.Country\nORDER BY e.Inflation DESC\nLIMIT 1;",
    "8420": "SELECT Country1, Country2 FROM borders\nJOIN encompasses ON borders.Country1 = encompasses.Country\nWHERE encompasses.Continent = 'Asia' AND Length = 1782",
    "8421": "SELECT Lake.Name, MAX(Lake.Depth) AS Deepest\nFROM Lake\nJOIN geo_lake ON Lake.Name = geo_lake.Lake\nWHERE geo_lake.Country = 'Bolivia'",
    "8422": "SELECT lake.Name\nFROM river AS manicouagan\nJOIN river ON river.River = manicouagan.Name\nJOIN lake ON lake.Name = river.Lake\nWHERE manicouagan.Name = 'Manicouagan';",
    "8423": "SELECT Island FROM mountainOnIsland WHERE Mountain = 'Rinjani';",
    "8424": "WITH DeepestSea AS (\n    SELECT Name\n    FROM sea\n    ORDER BY Depth DESC\n    LIMIT 1\n)\nSELECT m.Sea2 AS MergedSea\nFROM mergesWith m\nJOIN DeepestSea ds ON m.Sea1 = ds.Name\nUNION\nSELECT m.Sea1 AS MergedSea\nFROM mergesWith m\nJOIN DeepestSea ds ON m.Sea2 = ds.Name",
    "8425": "SELECT c.Name\nFROM country c\nJOIN encompasses e ON c.Code = e.Country\nGROUP BY c.Code\nHAVING COUNT(DISTINCT e.Continent) > 1 AND AVG(c.Population / c.Area) <= 10;",
    "8426": "SELECT c.Name, (c.Population / c.Area) AS PeoplePerSquareMeter\nFROM country c\nJOIN religion r ON c.Code = r.Country\nWHERE r.Name = 'Hindu'\nORDER BY PeoplePerSquareMeter ASC\nLIMIT 1;",
    "8427": "SELECT p.Independence\nFROM politics p\nJOIN economy e ON p.Country = e.Country\nJOIN economy e2 ON e2.Country = 'KNA'\nWHERE e.GDP > 4 * e2.GDP",
    "8428": "SELECT AVG(Population / Area) AS average_population_ratio\nFROM country\nWHERE Code IN (\n    SELECT Country\n    FROM organization\n    WHERE Established = '1947-01-01'\n)",
    "8429": "SELECT c.Capital, ci.Province\nFROM country AS c\nJOIN city AS ci ON c.Capital = ci.Name\nWHERE c.Name = 'Anguilla'",
    "8430": "SELECT c.Name AS Country, c.Capital, p.Name AS CapitalProvince, p.Country AS CapitalCountry\nFROM country c\nJOIN province p ON c.Capital = p.Capital AND c.Name = p.Country\nORDER BY c.Population ASC\nLIMIT 1;",
    "8431": "SELECT (Asia.Area - Europe.Area) AS AreaDifference\nFROM continent AS Asia, continent AS Europe\nWHERE Asia.Name = 'Asia' AND Europe.Name = 'Europe';",
    "8432": "SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus';",
    "8433": "SELECT ABS(\n    (SELECT Population FROM country WHERE Name = 'United Kingdom') - \n    (SELECT Population FROM country WHERE Name = 'Italy')\n) AS PopulationGap",
    "8434": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development';",
    "8435": "SELECT Name FROM lake ORDER BY Area DESC, Depth DESC LIMIT 1;",
    "8436": "SELECT Country1, Country2, Length FROM borders ORDER BY Length DESC LIMIT 1",
    "8437": "SELECT country.Name\nFROM economy\nJOIN country ON economy.Country = country.Code\nORDER BY economy.GDP DESC\nLIMIT 1;",
    "8438": "SELECT \n    country.Name AS Nation, \n    MIN(language.Percentage) AS LowestAfricanLanguagePercentage\nFROM \n    language\nJOIN \n    country ON language.Country = country.Code\nWHERE \n    language.Name LIKE '%African%'\nGROUP BY \n    language.Country\nORDER BY \n    LowestAfricanLanguagePercentage ASC\nLIMIT 1;",
    "8439": "SELECT r.Country\nFROM religion r\nJOIN language l ON r.Country = l.Country\nWHERE l.Name = 'English' AND l.Percentage = 100\nGROUP BY r.Country\nHAVING COUNT(DISTINCT r.Name) = 3 AND SUM(CASE WHEN r.Name IN ('Anglicanism', 'Christianity', 'Roman Catholicism') THEN 1 ELSE 0 END) = 3",
    "8440": "SELECT Country, Inflation\nFROM economy\nORDER BY Inflation DESC\nLIMIT 3",
    "8441": "SELECT country.Name\nFROM country\nJOIN language ON country.Code = language.Country\nWHERE language.Name = 'English' AND language.Percentage = 100;",
    "8442": "SELECT COUNT(DISTINCT o.Abbreviation) AS Businesses_Founded_After_1960\nFROM organization o\nJOIN politics p ON o.Country = p.Country\nWHERE o.Established > '1960-01-01' AND (p.Independence IS NULL OR p.Independence > o.Established);",
    "8443": "SELECT geo_river.Province, river.Length \nFROM geo_river \nJOIN river ON geo_river.River = river.Name \nWHERE river.Name = 'Klaeaelv';",
    "8444": "SELECT COUNT(DISTINCT p.Name) AS ItalianRegionsBorderedByMediterranean, s.Depth AS MediterraneanSeaDepth\nFROM province p\nJOIN country c ON p.Country = c.Code\nJOIN geo_sea gs ON gs.Province = p.Name AND gs.Country = c.Code\nJOIN sea s ON gs.Sea = s.Name\nWHERE c.Name = 'Italy' AND s.Name = 'Mediterranean Sea';",
    "8445": "SELECT Country\nFROM politics\nWHERE Government = 'British Overseas Territories'",
    "8446": "SELECT e.Country\nFROM economy e\nJOIN country c ON e.Country = c.Code\nORDER BY e.GDP DESC, e.Agriculture ASC\nLIMIT 1;",
    "8447": "SELECT c.Continent, SUM(c.Area) AS TotalArea, COUNT(DISTINCT e.Country) AS NumberOfNations\nFROM continent c\nJOIN encompasses e ON c.Name = e.Continent\nWHERE c.Name = 'Africa'",
    "8448": "SELECT Province, COUNT(*) AS NumberOfCorporations\nFROM organization\nWHERE Country = (SELECT Code FROM country WHERE Name = 'United States')\nGROUP BY Province\nORDER BY NumberOfCorporations DESC\nLIMIT 1;",
    "8449": "SELECT Country, Independence\nFROM politics\nWHERE Independence IS NOT NULL\nORDER BY Independence DESC\nLIMIT 3",
    "8450": "SELECT Country.Name\nFROM politics\nJOIN country ON politics.Country = country.Code\nWHERE politics.Government = 'republic' AND politics.Independence >= '1991-01-01';",
    "8451": "SELECT Name FROM organization WHERE Abbreviation IN (SELECT Organization FROM isMember WHERE Type = 'associated member');",
    "8452": "SELECT DISTINCT Country \nFROM geo_desert \nWHERE Desert = 'Kalahari'",
    "8453": "SELECT Desert.Name, MAX(Desert.Area) AS LargestArea\nFROM Desert\nJOIN geo_desert ON Desert.Name = geo_desert.Desert\nWHERE geo_desert.Country = 'Kazakhstan'\nGROUP BY geo_desert.Country;",
    "8454": "SELECT m.Sea2 AS Converged_With, s.Depth AS Baltic_Sea_Depth\nFROM mergesWith m\nJOIN sea s ON m.Sea1 = s.Name\nWHERE m.Sea1 = 'Baltic Sea'",
    "8455": "SELECT Country.Name, COUNT(organization.Abbreviation) AS NumberOfOrganizations\nFROM country\nJOIN politics ON country.Code = politics.Country\nJOIN organization ON country.Code = organization.Country\nWHERE politics.Government = 'Constitutional Monarchy' AND organization.Established > '1907-01-01'\nGROUP BY Country.Name\nORDER BY NumberOfOrganizations DESC\nLIMIT 1;",
    "8456": "SELECT g.Country AS Nation, g.Province, m.Type\nFROM geo_mountain g\nJOIN mountain m ON g.Mountain = m.Name\nWHERE m.Name = 'Ampato'",
    "8457": "SELECT geo_mountain.Mountain\nFROM geo_mountain\nJOIN province ON geo_mountain.Province = province.Name AND geo_mountain.Country = province.Country\nJOIN mountain ON geo_mountain.Mountain = mountain.Name\nWHERE province.Name = 'Ecuador' AND mountain.Type = 'volcano';",
    "8458": "SELECT \n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM country)) * 100 AS Percentage,\n    GROUP_CONCAT(CASE WHEN Government = 'parliamentary democracy' AND Independence > '1993-01-01' THEN Name ELSE NULL END) AS Examples\nFROM politics\nJOIN country ON politics.Country = country.Code\nWHERE Government = 'parliamentary democracy' AND Independence > '1993-01-01';",
    "8459": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) FROM river WHERE Length > 3000) / (SELECT CAST(COUNT(*) AS REAL) FROM river) * 100 AS Proportion,\n    (SELECT Name FROM river JOIN geo_river ON river.Name = geo_river.River WHERE Length > 3000 AND geo_river.Country = 'RUS' LIMIT 1) AS RussianRiverOver3000Miles",
    "8460": "SELECT Name, Established FROM organization WHERE Abbreviation = 'ABEDA';",
    "8461": "SELECT Name FROM organization WHERE Established BETWEEN '1970-01-01' AND '1980-12-31';",
    "8462": "SELECT o.Abbreviation, o.Name\nFROM organization o\nJOIN city c ON o.City = c.Name AND o.Province = c.Province AND o.Country = c.Country\nWHERE c.Name = 'London';",
    "8463": "SELECT o.Name AS Organization_Name, o.City AS Headquarters_City\nFROM organization o\nJOIN country c ON o.Country = c.Code\nWHERE c.Name = 'USA'",
    "8464": "SELECT Abbreviation, Name, Established \nFROM organization \nWHERE City = 'Paris' \nORDER BY Established ASC \nLIMIT 1;",
    "8465": "SELECT Name, City \nFROM organization \nWHERE Name LIKE '%United Nation%'",
    "8466": "SELECT Country1, Country2, Length FROM borders ORDER BY Length DESC LIMIT 1;",
    "8467": "SELECT CASE \n         WHEN Country1 = 'Bulgaria' THEN Country2 \n         ELSE Country1 \n       END AS BorderingCountry\nFROM borders\nWHERE 'Bulgaria' IN (Country1, Country2);",
    "8468": "SELECT DISTINCT c.Name\nFROM borders b\nJOIN country c ON b.Country1 = c.Code OR b.Country2 = c.Code\nWHERE b.Length > 4000",
    "8469": "SELECT c.Name\nFROM country c\nJOIN isMember im ON c.Code = im.Country\nWHERE im.Organization = 'IOC'\nORDER BY c.Population DESC\nLIMIT 1",
    "8470": "SELECT Country, Type \nFROM isMember \nWHERE Organization = 'Islamic Development Bank';",
    "8471": "SELECT c.Area, c.Population\nFROM country c\nJOIN organization o ON c.Code = o.Country\nWHERE o.Name = 'Asia Pacific Economic Cooperation'",
    "8472": "SELECT Organization \nFROM isMember \nWHERE Type = 'National Society'",
    "8473": "SELECT Country, COUNT(Organization) AS MembershipCount\nFROM isMember\nGROUP BY Country\nORDER BY MembershipCount ASC\nLIMIT 1;",
    "8474": "SELECT c.Name, c.Capital\nFROM country AS c\nJOIN isMember AS im ON c.Code = im.Country\nJOIN organization AS o ON im.Organization = o.Abbreviation\nWHERE o.Abbreviation = 'IFAD' AND im.Type = 'Category III'",
    "8475": "SELECT Organization, COUNT(Country) AS MemberCount\nFROM isMember\nGROUP BY Organization\nORDER BY MemberCount DESC\nLIMIT 1;",
    "8476": "SELECT c.Capital, o.Name AS Organization\nFROM country c\nLEFT JOIN organization o ON c.Capital = o.City AND c.Code = o.Country\nWHERE c.Name = 'Australia';",
    "8477": "SELECT \n    (COUNT(CASE WHEN City = 'Washington' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage\nFROM \n    organization\nWHERE \n    Country = 'USA';",
    "8478": "SELECT Length FROM borders WHERE (Country1 = 'USA' AND Country2 = 'MEX') OR (Country1 = 'MEX' AND Country2 = 'USA');",
    "8479": "SELECT o.Abbreviation, o.Name, o.Established\nFROM organization o\nJOIN isMember im ON o.Abbreviation = im.Organization\nJOIN country c ON im.Country = c.Code\nWHERE c.Name = 'Singapore'\nORDER BY o.Established DESC\nLIMIT 1;",
    "8480": "SELECT c.Population\nFROM city c\nJOIN organization o ON c.Name = o.City AND c.Province = o.Province\nWHERE o.Abbreviation = 'World Tourism Organization'",
    "8481": "SELECT mountain.Height, geo_mountain.Province\nFROM mountain\nJOIN geo_mountain ON mountain.Name = geo_mountain.Mountain\nWHERE mountain.Name = 'Dhaulagiri';",
    "8482": "SELECT mountain.Name, mountain.Height\nFROM mountain\nJOIN geo_mountain ON mountain.Name = geo_mountain.Mountain\nJOIN province ON geo_mountain.Province = province.Name AND geo_mountain.Country = province.Country\nWHERE province.Name = 'Alaska'",
    "8483": "SELECT c.Population\nFROM country c\nJOIN population p ON c.Code = p.Country\nORDER BY p.Infant_Mortality DESC\nLIMIT 1",
    "8484": "SELECT Inflation FROM economy WHERE Country = (SELECT Code FROM country WHERE Name = 'Greece')",
    "8485": "SELECT p.Government\nFROM politics p\nJOIN economy e ON p.Country = e.Country\nORDER BY e.Agriculture DESC\nLIMIT 1",
    "8486": "SELECT country.Name, country.Capital\nFROM country\nJOIN politics ON country.Code = politics.Country\nWHERE politics.Government = 'Parliamentary democracy'",
    "8487": "SELECT country.Name, country.Population\nFROM country\nJOIN ethnicGroup ON country.Code = ethnicGroup.Country\nWHERE ethnicGroup.Name = 'Chinese' AND ethnicGroup.Percentage > 70",
    "8488": "SELECT \n    c.Name AS CityName, \n    c.Population AS CityPopulation, \n    co.Population AS CountryPopulation, \n    (CAST(c.Population AS REAL) / co.Population) * 100 AS PercentageOfCountryPopulation\nFROM \n    city c\nJOIN \n    country co ON c.Country = co.Code\nORDER BY \n    c.Population DESC\nLIMIT 1;",
    "8489": "SELECT Independence FROM politics WHERE Country = (SELECT Code FROM country WHERE Name = 'United States of America');",
    "8490": "SELECT Name, MAX(Height) AS PeakHeight\nFROM mountain\nWHERE Type = 'volcanic';",
    "8491": "SELECT Name \nFROM organization \nWHERE Country = (SELECT Code FROM country WHERE Name = 'Saudi Arabia') \nORDER BY Established DESC \nLIMIT 1;",
    "8492": "SELECT Country\nFROM population\nORDER BY Infant_Mortality DESC\nLIMIT 1 OFFSET 4",
    "8493": "SELECT Country, COUNT(Name) AS NumberOfReligions\nFROM religion\nGROUP BY Country\nORDER BY NumberOfReligions DESC\nLIMIT 1;",
    "8494": "SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 1 OFFSET 16",
    "8495": "SELECT Independence \nFROM politics \nWHERE Country = (\n    SELECT Code \n    FROM country \n    WHERE Capital = 'Nouakchott'\n)",
    "8496": "SELECT country.Name, economy.GDP\nFROM country\nJOIN economy ON country.Code = economy.Country\nORDER BY country.Population ASC\nLIMIT 1;",
    "8497": "SELECT l.Name, l.Depth\nFROM lake l\nJOIN geo_lake gl ON l.Name = gl.Lake\nJOIN province p ON gl.Province = p.Name AND gl.Country = p.Country\nJOIN country c ON p.Country = c.Code\nWHERE c.Name = 'Zaire'\nORDER BY l.Depth DESC\nLIMIT 1;",
    "8498": "SELECT MAX(m.Height) AS MaxElevation, m.Type\nFROM mountain m\nJOIN mountainOnIsland moi ON m.Name = moi.Mountain\nJOIN island i ON moi.Island = i.Name\nWHERE i.Name = 'Madagaskar'\nORDER BY m.Height ASC\nLIMIT 1",
    "8499": "SELECT country.Name, economy.GDP\nFROM country\nJOIN economy ON country.Code = economy.Country\nWHERE country.Population BETWEEN 60000000 AND 99000000\nORDER BY economy.GDP DESC\nLIMIT 1;",
    "8500": "SELECT e.Country, e.Agriculture\nFROM economy e\nJOIN encompasses en ON e.Country = en.Country\nWHERE en.Continent = 'Asia'\nORDER BY e.Agriculture DESC\nLIMIT 1;",
    "8501": "SELECT politics.Government\nFROM economy\nJOIN politics ON economy.Country = politics.Country\nORDER BY economy.GDP ASC\nLIMIT 1",
    "8502": "SELECT strftime('%Y', Established) AS Year, COUNT(*) AS NumberOfOrganizations\nFROM organization\nJOIN country ON organization.Country = country.Code\nJOIN encompasses ON country.Code = encompasses.Country\nWHERE encompasses.Continent = 'Europe'\nGROUP BY Year\nORDER BY NumberOfOrganizations DESC\nLIMIT 1;",
    "8503": "SELECT b.Country2 AS Bordering_Country, b.Length AS Border_Length\nFROM borders b\nJOIN (\n    SELECT c.Code\n    FROM country c\n    ORDER BY c.Population DESC\n    LIMIT 1\n) AS most_populated_country ON b.Country1 = most_populated_country.Code\nORDER BY b.Length DESC\nLIMIT 1;",
    "8504": "SELECT \n    c.Population / c.Area AS Population_Density, \n    e.Industry AS GDP_Devoted_To_Industries\nFROM \n    country c\nJOIN \n    province p ON c.Code = p.Country\nJOIN \n    economy e ON c.Code = e.Country\nWHERE \n    p.Name = 'Distrito Federal' AND p.Capital = c.Capital;",
    "8505": "SELECT Country, Government, Independence\nFROM politics\nWHERE Government = 'parliamentary democracy'\nAND Independence BETWEEN '1950-01-01' AND '1999-12-31';",
    "8506": "SELECT \n    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM country) AS Percentage\nFROM \n    politics\nWHERE \n    Independence = '1960-01-01';",
    "8507": "SELECT Name FROM desert WHERE Latitude <= 30 OR Latitude >= 40;",
    "8508": "SELECT d.Name, d.Latitude, d.Longitude\nFROM desert d\nJOIN geo_desert gd ON d.Name = gd.Desert\nGROUP BY d.Name\nHAVING COUNT(DISTINCT gd.Country) > 1",
    "8509": "SELECT Capital \nFROM province \nWHERE Population < 80000 \nORDER BY (Population / Area) DESC \nLIMIT 1;",
    "8510": "SELECT COUNT(*) AS NeverMarriedCustomers\nFROM Customers\nWHERE MARITAL_STATUS = 'Never-married';",
    "8511": "SELECT COUNT(*) AS Teenagers\nFROM Customers\nWHERE age BETWEEN 13 AND 19;",
    "8512": "SELECT DISTINCT OCCUPATION\nFROM Customers\nWHERE EDUCATIONNUM = 11;",
    "8513": "SELECT COUNT(*) AS TrueResponses\nFROM mailings3\nWHERE RESPONSE = 'true'",
    "8514": "SELECT COUNT(*) AS MachineOpInspctOver30\nFROM Customers\nWHERE age > 30 AND OCCUPATION = 'Machine-op-inspct'",
    "8515": "SELECT COUNT(*) FROM Customers WHERE SEX = 'Female' AND EDUCATIONNUM > 11;",
    "8516": "SELECT COUNT(*) \nFROM Customers \nWHERE ID IN (\n    SELECT REFID \n    FROM mailings3 \n    WHERE RESPONSE = 'true' \n    LIMIT 60000\n) \nAND SEX = 'Female';",
    "8517": "SELECT DISTINCT c.OCCUPATION\nFROM Customers c\nJOIN Mailings1_2 m ON c.ID = m.REFID\nWHERE c.age > 40 AND m.RESPONSE = 'true'",
    "8518": "SELECT COUNT(DISTINCT Customers.ID) AS Male_Customers_From_Large_Places\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE Customers.SEX = 'Male' AND Demog.INHABITANTS_K > 30",
    "8519": "SELECT COUNT(*) AS NumberOfCustomers\nFROM Customers\nWHERE GEOID = (\n    SELECT GEOID\n    FROM Demog\n    ORDER BY INCOME_K DESC\n    LIMIT 1\n)",
    "8520": "SELECT COUNT(*) AS MachineOpInspctCount\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE INHABITANTS_K BETWEEN 20 AND 30\nAND OCCUPATION = 'Machine-op-inspct'",
    "8521": "SELECT \n    Customers.ID AS CustomerID,\n    Demog.INHABITANTS_K\nFROM \n    Customers\nJOIN \n    Demog ON Customers.GEOID = Demog.GEOID\nWHERE \n    Customers.ID IN (0, 1)\nORDER BY \n    Demog.INHABITANTS_K DESC\nLIMIT 1;",
    "8522": "SELECT COUNT(DISTINCT c.ID) AS NumberOfCustomers\nFROM Customers c\nJOIN mailings3 m ON c.ID = m.REFID\nJOIN Demog d ON c.GEOID = d.GEOID\nWHERE m.RESPONSE = 'true'\nAND d.INHABITANTS_K > 30\nLIMIT 60000;",
    "8523": "SELECT COUNT(*) \nFROM Customers \nWHERE ID IN (\n    SELECT REFID \n    FROM mailings3 \n    WHERE RESPONSE = 'true' \n    LIMIT 60000\n) \nAND SEX = 'Male' \nAND MARITAL_STATUS = 'Divorced';",
    "8524": "SELECT COUNT(*) AS TrueResponses\nFROM Customers\nJOIN (\n    SELECT GEOID\n    FROM Demog\n    ORDER BY INCOME_K DESC\n    LIMIT 1\n) AS HighestIncomePlace ON Customers.GEOID = HighestIncomePlace.GEOID\nJOIN mailings3 ON Customers.ID = mailings3.REFID\nWHERE Customers.ID <= 60000\nAND mailings3.RESPONSE = 'true'",
    "8525": "SELECT D.INHABITANTS_K\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nGROUP BY C.GEOID\nORDER BY COUNT(C.ID) DESC\nLIMIT 1",
    "8526": "SELECT COUNT(*) \nFROM Customers \nJOIN Demog ON Customers.GEOID = Demog.GEOID \nWHERE Demog.INHABITANTS_K = 25.746 AND Customers.SEX = 'Male'",
    "8527": "SELECT COUNT(*) \nFROM Customers \nWHERE ID IN (\n    SELECT REFID \n    FROM mailings3 \n    WHERE RESPONSE = 'true' \n    LIMIT 60000\n) \nAND age BETWEEN 13 AND 19;",
    "8528": "SELECT AVG(EDUCATIONNUM) AS average_education_level\nFROM Customers\nWHERE GEOID = (\n    SELECT GEOID\n    FROM Demog\n    ORDER BY INCOME_K DESC\n    LIMIT 1\n)",
    "8529": "SELECT AVG(age) AS average_age\nFROM Customers\nJOIN Mailings1_2 ON Customers.ID = Mailings1_2.REFID\nWHERE RESPONSE = 'true'\nORDER BY REF_DATE ASC\nLIMIT 60000",
    "8530": "SELECT COUNT(*) FROM Customers WHERE SEX = 'Male';",
    "8531": "SELECT DISTINCT GEOID\nFROM Customers\nWHERE OCCUPATION = 'Handlers-cleaners'",
    "8532": "SELECT COUNT(*) AS Total_Customers_Under_30\nFROM Customers\nWHERE age < 30;",
    "8533": "SELECT GEOID\nFROM Demog\nWHERE INCOME_K BETWEEN 2100 AND 2500;",
    "8534": "SELECT COUNT(*) \nFROM Demog \nWHERE GEOID BETWEEN 20 AND 50 \nAND INHABITANTS_K < 20;",
    "8535": "SELECT INHABITANTS_K, INCOME_K FROM Demog WHERE GEOID = 239;",
    "8536": "SELECT c.EDUCATIONNUM, c.OCCUPATION\nFROM Customers c\nJOIN Demog d ON c.GEOID = d.GEOID\nWHERE c.age BETWEEN 20 AND 35\nAND d.INCOME_K <= 2000",
    "8537": "SELECT SUM(D.INHABITANTS_K) AS Total_Inhabitants\nFROM Demog D\nJOIN Customers C ON D.GEOID = C.GEOID\nWHERE C.MARITAL_STATUS = 'Divorced' AND C.age > 50",
    "8538": "SELECT d.GEOID, d.INCOME_K\nFROM Demog d\nJOIN Customers c ON d.GEOID = c.GEOID\nWHERE c.age = (SELECT MAX(age) FROM Customers)",
    "8539": "SELECT d.INCOME_K\nFROM Customers c\nJOIN Demog d ON c.GEOID = d.GEOID\nWHERE c.SEX = 'Male' AND c.EDUCATIONNUM <= 4",
    "8540": "SELECT C.OCCUPATION, D.INCOME_K\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nWHERE C.SEX = 'Male' AND C.EDUCATIONNUM BETWEEN 4 AND 6",
    "8541": "SELECT COUNT(DISTINCT c.ID) AS widowed_male_customers_with_high_income\nFROM Customers c\nJOIN Demog d ON c.GEOID = d.GEOID\nWHERE c.SEX = 'Male'\nAND c.age BETWEEN 40 AND 60\nAND c.MARITAL_STATUS = 'Widowed'\nAND d.INCOME_K >= 3000;",
    "8542": "SELECT DISTINCT C.OCCUPATION\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nWHERE D.INHABITANTS_K BETWEEN 30 AND 40;",
    "8543": "SELECT D.INCOME_K\nFROM \"Customers\" C\nJOIN Demog D ON C.GEOID = D.GEOID\nWHERE C.SEX = 'Female' AND C.MARITAL_STATUS = 'Widowed' AND C.EDUCATIONNUM <= 5",
    "8544": "SELECT MARITAL_STATUS\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE age BETWEEN 40 AND 60\nAND INCOME_K = (\n    SELECT MAX(INCOME_K)\n    FROM Demog\n    JOIN Customers ON Demog.GEOID = Customers.GEOID\n    WHERE age BETWEEN 40 AND 60\n)",
    "8545": "SELECT SUM(D.INHABITANTS_K) AS total_inhabitants\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nWHERE C.SEX = 'Male'\nAND C.age BETWEEN 20 AND 30\nAND C.OCCUPATION IN ('farming', 'fishing')",
    "8546": "SELECT D.INHABITANTS_K, C.age\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nWHERE C.MARITAL_STATUS = 'married-civ-spouse' AND C.OCCUPATION = 'Machine-op-inspct'",
    "8547": "SELECT COUNT(DISTINCT Customers.ID) AS Female_Customers_Aged_50_to_60_In_Areas_19_to_24K\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE Customers.SEX = 'Female'\nAND Customers.age BETWEEN 50 AND 60\nAND Demog.INHABITANTS_K BETWEEN 19 AND 24",
    "8548": "SELECT D.INCOME_K, D.INHABITANTS_K\nFROM Demog D\nJOIN Customers C ON D.GEOID = C.GEOID\nWHERE C.age > (SELECT AVG(age) * 0.8 FROM Customers)",
    "8549": "SELECT \n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM Customers AS C\n     JOIN Demog AS D ON C.GEOID = D.GEOID\n     WHERE C.MARITAL_STATUS = 'Never-married' AND D.INCOME_K >= 2500)\n    /\n    (SELECT CAST(COUNT(*) AS REAL) \n     FROM Customers AS C\n     JOIN Demog AS D ON C.GEOID = D.GEOID\n     WHERE C.MARITAL_STATUS = 'Never-married') \n    AS percentage",
    "8550": "SELECT ID, GEOID\nFROM Customers\nWHERE age > 65 AND EDUCATIONNUM < 3",
    "8551": "SELECT GEOID\nFROM Demog\nWHERE INCOME_K > (SELECT AVG(INCOME_K) FROM Demog)",
    "8552": "SELECT COUNT(DISTINCT c.ID) AS NonResponders\nFROM Customers c\nJOIN Mailings1_2 m ON c.ID = m.REFID\nWHERE m.RESPONSE = 'false'\nAND m.REF_DATE BETWEEN '2007-02-01 12:00:00.0' AND '2007-02-28 12:00:00.0'",
    "8553": "SELECT COUNT(*) AS Teenagers_Working_As_Machine_op_inspct\nFROM Customers\nWHERE age BETWEEN 13 AND 19\nAND OCCUPATION = 'Machine-op-inspct'",
    "8554": "SELECT COUNT(DISTINCT Customers.ID) AS NumberOfCustomers\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE Customers.OCCUPATION = 'Other-service' AND Demog.INHABITANTS_K > 20;",
    "8555": "SELECT COUNT(DISTINCT Customers.ID) AS MaleCustomersInTwentiesFromWealthyAreas\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE Customers.SEX = 'Male'\nAND Customers.age BETWEEN 20 AND 29\nAND Demog.INCOME_K > 3000;",
    "8556": "SELECT \n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM Customers WHERE GEOID = 24)) * 100 AS percentage\nFROM \n    Customers\nWHERE \n    age > 65 \n    AND MARITAL_STATUS = 'never married' \n    AND GEOID = 24;",
    "8557": "SELECT \n    (CAST(SUM(CASE WHEN age BETWEEN 80 AND 89 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE INCOME_K > 3000",
    "8558": "SELECT COUNT(DISTINCT REFID) AS TrueResponseCount\nFROM (\n    SELECT REFID FROM mailings3 WHERE RESPONSE = 'TRUE'\n    UNION ALL\n    SELECT REFID FROM \"Mailings1_2\" WHERE RESPONSE = 'TRUE'\n)",
    "8559": "SELECT REFID\nFROM mailings3\nWHERE RESPONSE = 'true'\nUNION\nSELECT REFID\nFROM \"Mailings1_2\"\nWHERE RESPONSE = 'true'",
    "8560": "SELECT COUNT(*) AS Total_Widowed_Under_50\nFROM Customers\nWHERE MARITAL_STATUS = 'Widowed' AND age < 50;",
    "8561": "SELECT GEOID\nFROM Demog\nWHERE INHABITANTS_K < 30;",
    "8562": "SELECT COUNT(GEOID) \nFROM Demog \nWHERE GEOID BETWEEN 10 AND 30 \nAND INCOME_K < 2000;",
    "8563": "SELECT MARITAL_STATUS\nFROM Customers\nWHERE age = 62 AND EDUCATIONNUM = 7;",
    "8564": "SELECT SUM(D.INHABITANTS_K) AS Total_Inhabitants\nFROM Demog D\nJOIN Customers C ON D.GEOID = C.GEOID\nJOIN mailings3 M ON C.ID = M.REFID\nWHERE C.MARITAL_STATUS = 'widowed' AND M.RESPONSE = 'false'",
    "8565": "SELECT m.RESPONSE, d.INHABITANTS_K\nFROM Customers c\nJOIN Demog d ON c.GEOID = d.GEOID\nJOIN mailings3 m ON c.ID = m.REFID\nWHERE c.SEX = 'Female'\nORDER BY c.age DESC\nLIMIT 1",
    "8566": "SELECT d.INCOME_K\nFROM Customers c\nJOIN Demog d ON c.GEOID = d.GEOID\nWHERE c.SEX = 'Female' AND c.EDUCATIONNUM <= 3",
    "8567": "SELECT C.EDUCATIONNUM, D.INCOME_K\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nJOIN mailings3 M ON C.ID = M.REFID\nWHERE C.age BETWEEN 30 AND 55\nAND M.RESPONSE = 'true'",
    "8568": "SELECT COUNT(DISTINCT Customers.ID) AS Male_Customers_Income_2000_2300\nFROM Customers\nJOIN Demog ON Customers.GEOID = Demog.GEOID\nWHERE Customers.SEX = 'Male'\nAND Customers.age BETWEEN 30 AND 50\nAND Demog.INCOME_K BETWEEN 2000 AND 2300",
    "8569": "SELECT C.EDUCATIONNUM, M.RESPONSE\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nJOIN Mailings1_2 M ON C.ID = M.REFID\nWHERE C.age BETWEEN 20 AND 30\nAND D.INHABITANTS_K = (\n    SELECT MAX(INHABITANTS_K)\n    FROM Demog\n    JOIN Customers ON Demog.GEOID = Customers.GEOID\n    WHERE Customers.age BETWEEN 20 AND 30\n)",
    "8570": "SELECT SUM(D.INCOME_K) AS Total_Income\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nWHERE C.SEX = 'Female'\nAND C.age BETWEEN 30 AND 55\nAND C.OCCUPATION = 'machine-op-inspct'",
    "8571": "SELECT C.MARITAL_STATUS, M.RESPONSE\nFROM \"Customers\" C\nJOIN \"Mailings1_2\" M ON C.ID = M.REFID\nWHERE C.SEX = 'Female' AND C.EDUCATIONNUM >= 8",
    "8572": "SELECT c.age\nFROM Customers c\nJOIN Demog d ON c.GEOID = d.GEOID\nWHERE c.SEX = 'Female' AND d.INHABITANTS_K < 30;",
    "8573": "SELECT d.INCOME_K, m3.RESPONSE\nFROM Customers c\nJOIN Demog d ON c.GEOID = d.GEOID\nJOIN mailings3 m3 ON c.ID = m3.REFID\nWHERE c.SEX = 'Male' AND c.MARITAL_STATUS = 'Divorced' AND c.EDUCATIONNUM >= 6",
    "8574": "SELECT C.OCCUPATION, M.RESPONSE\nFROM Customers C\nJOIN Demog D ON C.GEOID = D.GEOID\nJOIN mailings3 M ON C.ID = M.REFID\nWHERE C.SEX = 'Female' AND D.INHABITANTS_K BETWEEN 20 AND 25;",
    "8575": "SELECT \n    SUM(CASE WHEN c.OCCUPATION = 'Handlers-cleaners' AND c.SEX = 'Male' AND m.RESPONSE = 'true' THEN 1 ELSE 0 END) * 1.0 / \n    SUM(CASE WHEN c.OCCUPATION = 'Handlers-cleaners' AND c.SEX = 'Male' THEN 1 ELSE 0 END) AS percentage\nFROM \n    Customers c\nLEFT JOIN \n    Mailings1_2 m ON c.ID = m.REFID\nWHERE \n    c.OCCUPATION = 'Handlers-cleaners' AND c.SEX = 'Male'",
    "8576": "WITH FalseResponseCount AS (\n    SELECT COUNT(*) AS FalseCount\n    FROM mailings3\n    WHERE RESPONSE = 'false'\n),\nHalfAverageFalseResponse AS (\n    SELECT (FalseCount * 0.5) / COUNT(*) AS HalfAvgFalse\n    FROM mailings3, FalseResponseCount\n),\nQualifiedRefIDs AS (\n    SELECT REFID\n    FROM mailings3, HalfAverageFalseResponse\n    WHERE REFID > HalfAvgFalse\n),\nQualifiedCustomers AS (\n    SELECT DISTINCT c.GEOID\n    FROM Customers c\n    JOIN QualifiedRefIDs q ON c.ID = q.REFID\n)\nSELECT d.INCOME_K AS income, d.INHABITANTS_K AS number_of_inhabitants\nFROM Demog d\nJOIN QualifiedCustomers qc ON d.GEOID = qc.GEOID;",
    "8577": "SELECT \n    SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS ratio\nFROM \n    Customers\nWHERE \n    age BETWEEN 13 AND 19 \n    AND EDUCATIONNUM > 10;",
    "8578": "SELECT \n    GEOID, \n    (INHABITANTS_K * INCOME_K * 12) AS Total_Income_Per_Year\nFROM \n    Demog\nWHERE \n    INCOME_K > 3300;",
    "8579": "SELECT \n    CASE \n        WHEN SUM(CASE WHEN RESPONSE = 'true' THEN 1 ELSE 0 END) > SUM(CASE WHEN RESPONSE = 'false' THEN 1 ELSE 0 END) THEN 'Responding'\n        WHEN SUM(CASE WHEN RESPONSE = 'true' THEN 1 ELSE 0 END) < SUM(CASE WHEN RESPONSE = 'false' THEN 1 ELSE 0 END) THEN 'Not Responding'\n        ELSE 'Equal'\n    END AS Result\nFROM (\n    SELECT RESPONSE FROM mailings3\n    UNION ALL\n    SELECT RESPONSE FROM \"Mailings1_2\"\n)",
    "8580": "SELECT \n    SUM(D.INHABITANTS_K * D.INCOME_K * 12) AS Yearly_Income\nFROM \n    Demog D\nJOIN \n    Customers C ON D.GEOID = C.GEOID\nWHERE \n    C.SEX = 'Female' AND C.OCCUPATION = 'Sales'",
    "8581": "SELECT EDUCATIONNUM, OCCUPATION, age\nFROM Customers\nWHERE GEOID IN (SELECT GEOID FROM Demog WHERE INHABITANTS_K = 33.658)\nAND SEX = 'Female' AND MARITAL_STATUS = 'Widowed'",
    "8582": "SELECT m3.RESPONSE\nFROM mailings3 m3\nJOIN Customers c ON m3.REFID = c.ID\nWHERE c.GEOID = 134\nUNION\nSELECT m12.RESPONSE\nFROM \"Mailings1_2\" m12\nJOIN Customers c ON m12.REFID = c.ID\nWHERE c.GEOID = 134;",
    "8583": "SELECT \n    d.GEOID,\n    d.INCOME_K AS Average_Income_Per_Month,\n    (d.INHABITANTS_K * d.INCOME_K * 12) AS Yearly_Income\nFROM \n    Customers c\nJOIN \n    Demog d ON c.GEOID = d.GEOID\nWHERE \n    c.ID IN (209556, 290135)",
    "8584": "SELECT m.REFID, c.EDUCATIONNUM\nFROM mailings3 m\nJOIN Customers c ON m.REFID = c.ID\nWHERE m.REFID < 10 AND m.RESPONSE = 'true'",
    "8585": "SELECT COUNT(*) AS Central_Chicago_Community_Areas\nFROM Community_Area\nWHERE side = 'Central'",
    "8586": "SELECT D.district_no, D.district_name\nFROM District D\nJOIN Crime C ON D.district_no = C.district_no\nJOIN Community_Area CA ON C.community_area_no = CA.community_area_no\nWHERE CA.community_area_name = 'Lincoln Square'\nGROUP BY D.district_no, D.district_name",
    "8587": "SELECT D.district_no, D.district_name, COUNT(CA.side) AS community_area_count\nFROM District D\nJOIN Community_Area CA ON D.side = CA.side\nGROUP BY D.district_no, D.district_name\nORDER BY community_area_count DESC\nLIMIT 1;",
    "8588": "SELECT community_area_name\nFROM Community_Area\nORDER BY CAST(population AS INTEGER)\nLIMIT 1",
    "8589": "SELECT commander\nFROM District\nWHERE district_name = 'Central'",
    "8590": "SELECT email FROM District WHERE district_name = 'Central'",
    "8591": "SELECT community_area_name\nFROM Community_Area\nJOIN Neighborhood ON Community_Area.community_area_no = Neighborhood.community_area_no\nWHERE Neighborhood.neighborhood_name = 'Albany Park'",
    "8592": "SELECT COUNT(*) AS number_of_neighborhoods\nFROM Neighborhood\nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Lincoln Square'",
    "8593": "SELECT Neighborhood.neighborhood_name\nFROM Neighborhood\nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.population = (\n    SELECT MAX(population)\n    FROM Community_Area\n)",
    "8594": "SELECT Neighborhood.neighborhood_name\nFROM Neighborhood\nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.side = 'Central'",
    "8595": "SELECT Crime.latitude, Crime.longitude\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.district_name = 'Central'",
    "8596": "SELECT COUNT(*) AS Crimes_In_Central_Chicago\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.district_name = 'Central'",
    "8597": "SELECT COUNT(*) AS domestic_violence_cases\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.district_name = 'Central' AND Crime.domestic = 'TRUE'",
    "8598": "SELECT Crime.case_number\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE Crime.arrest = 'FALSE' AND District.district_name = 'Central'",
    "8599": "SELECT COUNT(*) AS total_crimes\nFROM Crime\nWHERE community_area_no = (\n    SELECT community_area_no\n    FROM Community_Area\n    ORDER BY CAST(population AS INTEGER) DESC\n    LIMIT 1\n)",
    "8600": "SELECT COUNT(*) AS Crimes_In_Woodlawn_Jan_2018\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Woodlawn'\nAND Crime.date LIKE '1/__/2018%'",
    "8601": "SELECT community_area_name, COUNT(report_no) AS number_of_crimes\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE date LIKE '%1/2018%' AND community_area_name IN ('Woodlawn', 'Lincoln Square')\nGROUP BY community_area_name\nORDER BY number_of_crimes DESC\nLIMIT 1;",
    "8602": "SELECT d.fax\nFROM District d\nJOIN Crime c ON d.district_no = c.district_no\nWHERE c.date LIKE '%1/2018%'\nGROUP BY d.district_no\nORDER BY COUNT(c.case_number) DESC\nLIMIT 1",
    "8603": "SELECT AVG(crime_count) AS average_crimes_per_neighborhood\nFROM (\n    SELECT n.neighborhood_name, COUNT(c.report_no) AS crime_count\n    FROM Neighborhood n\n    JOIN Community_Area ca ON n.community_area_no = ca.community_area_no\n    JOIN Crime c ON ca.community_area_no = c.community_area_no\n    WHERE ca.side = 'Central'\n    GROUP BY n.neighborhood_name\n)",
    "8604": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM Crime \n     JOIN District ON Crime.district_no = District.district_no \n     WHERE District.district_name = 'Central') / \n    (SELECT CAST(COUNT(*) AS FLOAT) FROM Crime) * 100 AS percentage",
    "8605": "SELECT COUNT(*) AS Far_North_Community_Areas\nFROM Community_Area\nWHERE side = 'Far North'",
    "8606": "SELECT commander FROM District WHERE district_name = 'Morgan Park'",
    "8607": "SELECT d.district_name\nFROM Crime c\nJOIN District d ON c.district_no = d.district_no\nWHERE c.case_number = 'JB100065'",
    "8608": "SELECT d.district_name\nFROM Crime c\nJOIN District d ON c.district_no = d.district_no\nWHERE c.latitude = '41.66236555' AND c.longitude = '-87.63470194'",
    "8609": "SELECT commander\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE case_number = 'JB524952'",
    "8610": "SELECT COUNT(*) AS simple_assaults_on_2018_09_08\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE IUCR.primary_description = 'ASSAULT'\nAND IUCR.secondary_description = 'SIMPLE'\nAND Crime.date LIKE '%9/8/2018%'",
    "8611": "SELECT c.district_no\nFROM Crime c\nJOIN IUCR i ON c.iucr_no = i.iucr_no\nWHERE i.secondary_description = 'FIRST DEGREE MURDER'\nGROUP BY c.district_no\nORDER BY COUNT(c.case_number) DESC\nLIMIT 1",
    "8612": "SELECT I.index_code\nFROM Crime C\nJOIN IUCR I ON C.iucr_no = I.iucr_no\nWHERE C.case_number = 'JB296775'",
    "8613": "SELECT Community_Area.community_area_name\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE IUCR.primary_description = 'THEFT' AND IUCR.secondary_description = 'POCKET-PICKING'\nGROUP BY Community_Area.community_area_no\nORDER BY COUNT(Crime.report_no) DESC\nLIMIT 1",
    "8614": "SELECT alderman_first_name || ' ' || alderman_last_name AS full_name\nFROM Crime\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE case_number = 'JB103470'",
    "8615": "SELECT neighborhood_name \nFROM Neighborhood \nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no \nWHERE Community_Area.community_area_name = 'West Englewood'",
    "8616": "SELECT COUNT(*) AS number_of_neighborhoods\nFROM Neighborhood\nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Roseland'",
    "8617": "SELECT FBI_Code.description\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE Crime.case_number = 'JB134191'",
    "8618": "SELECT COUNT(c.case_number) AS number_of_cases_with_arrests\nFROM Crime c\nJOIN Community_Area ca ON c.community_area_no = ca.community_area_no\nWHERE ca.community_area_name = 'North Lawndale' AND c.arrest = 'TRUE'",
    "8619": "SELECT \n    (CAST(SUM(CASE WHEN C.secondary_description = '$500 AND UNDER' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(C.case_number)) * 100 AS percentage\nFROM \n    Crime C\nJOIN \n    IUCR I ON C.iucr_no = I.iucr_no\nJOIN \n    Community_Area CA ON C.community_area_no = CA.community_area_no\nWHERE \n    I.primary_description = 'THEFT'\n    AND CA.community_area_name = 'West Englewood';",
    "8620": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN f.title = 'Larceny' THEN c.case_number END) AS FLOAT) / COUNT(c.case_number)) * 100 AS larceny_percentage\nFROM \n    Crime c\nJOIN \n    Community_Area ca ON c.community_area_no = ca.community_area_no\nJOIN \n    FBI_Code f ON c.fbi_code_no = f.fbi_code_no\nWHERE \n    ca.community_area_name = 'Edgewater'",
    "8621": "SELECT COUNT(*) AS Crimes_Committed\nFROM Crime\nWHERE block = '018XX S KOMENSKY AVE' AND date LIKE '5/%/2018%'",
    "8622": "SELECT community_area_name\nFROM Community_Area\nORDER BY CAST(population AS INTEGER) DESC\nLIMIT 1",
    "8623": "SELECT COUNT(*) AS domestic_violence_incidents\nFROM Crime\nWHERE domestic = 'TRUE'\nAND location_description = 'ABANDONED BUILDING'\nAND date LIKE '%2018%'",
    "8624": "SELECT community_area_no, community_area_name, MIN(CAST(population AS INTEGER)) AS min_population\nFROM Community_Area",
    "8625": "SELECT COUNT(*) AS arrests_made\nFROM Crime\nWHERE arrest = 'TRUE'\nAND date LIKE '%2018%'\nAND location_description = 'ANIMAL HOSPITAL'\nAND fbi_code_no = '08B'",
    "8626": "SELECT FBI_Code.description\nFROM FBI_Code\nWHERE crime_against = 'Society'",
    "8627": "SELECT commander\nFROM District\nWHERE district_no = (\n    SELECT district_no\n    FROM Crime\n    JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\n    WHERE title = 'Disorderly Conduct'\n    GROUP BY district_no\n    ORDER BY COUNT(district_no) DESC\n    LIMIT 1\n)",
    "8628": "SELECT FBI_Code.title, COUNT(Crime.fbi_code_no) AS crime_count\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nGROUP BY Crime.fbi_code_no\nORDER BY crime_count DESC\nLIMIT 1;",
    "8629": "SELECT COUNT(*) AS arrest_count\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE District.district_name = 'Albany Park'\nAND Crime.location_description = 'APARTMENT'\nAND FBI_Code.title = 'Criminal Sexual Abuse'\nAND Crime.arrest = 'TRUE'",
    "8630": "SELECT latitude, longitude\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE Community_Area.community_area_name = 'Rogers Park' AND FBI_Code.title = 'Robbery'\nGROUP BY latitude, longitude\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "8631": "SELECT COUNT(*) AS solicit_prostitution_arrests\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE IUCR.primary_description = 'PROSTITUTION'\nAND IUCR.secondary_description = 'SOLICIT ON PUBLIC WAY'\nAND arrest = 'TRUE'\nAND Community_Area.community_area_name = 'West Garfield Park'",
    "8632": "SELECT COUNT(*) AS domestic_violence_incidents\nFROM Crime\nWHERE ward_no = (\n    SELECT ward_no\n    FROM Ward\n    ORDER BY Population DESC\n    LIMIT 1\n)\nAND domestic = 'TRUE'\nAND location_description = 'BAR OR TAVERN'",
    "8633": "SELECT COUNT(*) AS number_of_neighborhoods\nFROM Neighborhood\nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Near North Side'",
    "8634": "SELECT COUNT(*) AS Arrested_Domestic_Violence_Cases\nFROM Crime\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE Ward.alderman_first_name = 'Walter' AND Ward.alderman_last_name = 'Burnett' AND Ward.alderman_name_suffix = 'Jr.'\nAND Crime.domestic = 'TRUE' AND Crime.arrest = 'TRUE'",
    "8635": "WITH LeastPopulatedCommunity AS (\n    SELECT community_area_no\n    FROM Community_Area\n    ORDER BY CAST(population AS INTEGER) ASC\n    LIMIT 1\n), CrimeCounts AS (\n    SELECT fbi_code_no, COUNT(*) AS crime_count\n    FROM Crime\n    WHERE community_area_no IN (SELECT community_area_no FROM LeastPopulatedCommunity)\n    GROUP BY fbi_code_no\n    ORDER BY crime_count DESC\n    LIMIT 1\n)\nSELECT f.title AS short_description\nFROM FBI_Code f\nJOIN CrimeCounts cc ON f.fbi_code_no = cc.fbi_code_no;",
    "8636": "SELECT ward_office_address\nFROM Ward\nJOIN Crime ON Ward.ward_no = Crime.ward_no\nWHERE block = '010XX W LAKE ST'",
    "8637": "SELECT Community_Area.community_area_name\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE IUCR.primary_description = 'PROSTITUTION'\nGROUP BY Community_Area.community_area_name\nORDER BY COUNT(Crime.case_number) DESC\nLIMIT 1",
    "8638": "SELECT COUNT(*) AS Vandalisms_Arrested\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE FBI_Code.title = 'Vandalism'\nAND Crime.arrest = 'TRUE'\nAND Ward.alderman_last_name = 'Burke'",
    "8639": "SELECT COUNT(*) AS domestic_violence_cases\nFROM Crime\nWHERE domestic = 'TRUE' AND date LIKE '5/%/2018%'",
    "8640": "SELECT iucr_no, index_code\nFROM IUCR\nWHERE primary_description = 'HOMICIDE'",
    "8641": "SELECT commander, email\nFROM District\nWHERE district_name = 'Chicago Lawn'",
    "8642": "SELECT alderman_first_name || ' ' || alderman_last_name || ' ' || COALESCE(alderman_name_suffix, '') AS alderman_full_name\nFROM Ward\nORDER BY Population DESC\nLIMIT 1",
    "8643": "SELECT community_area_name\nFROM Community_Area\nWHERE side = 'Northwest'",
    "8644": "SELECT title, description\nFROM FBI_Code\nWHERE crime_against = 'Persons'",
    "8645": "SELECT C.secondary_description, C.latitude, C.longitude\nFROM Crime C\nJOIN IUCR I ON C.iucr_no = I.iucr_no\nWHERE I.iucr_no = '142'",
    "8646": "SELECT COUNT(*) AS crimes_handled_by_Brendan_Reilly\nFROM Crime\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE Ward.alderman_first_name = 'Brendan' AND Ward.alderman_last_name = 'Reilly'\nAND Crime.date LIKE '10/7/2018%'",
    "8647": "SELECT COUNT(*) AS arrested_cases\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE Crime.arrest = 'TRUE'\nAND Crime.location_description = 'RESTAURANT'\nAND District.district_name = 'Englewood'",
    "8648": "SELECT Crime.case_number, \n       Ward.alderman_first_name || ' ' || Ward.alderman_last_name || ' ' || COALESCE(Ward.alderman_name_suffix, '') AS alderman_full_name, \n       District.district_name\nFROM Crime\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nJOIN District ON Crime.district_no = District.district_no\nWHERE Crime.block = '0000X N FRANCISCO AVE'",
    "8649": "SELECT COUNT(*) AS Misc_Non_Index_Offense_Count\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.title = 'Misc Non-Index Offense'",
    "8650": "SELECT neighborhood_name \nFROM Neighborhood \nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no \nWHERE Community_Area.community_area_name = 'Douglas'",
    "8651": "WITH HighestPopulous AS (\n    SELECT \n        community_area_no\n    FROM \n        Community_Area\n    ORDER BY \n        CAST(population AS INTEGER) DESC\n    LIMIT 1\n),\nTotalCrimesInHighestPopulous AS (\n    SELECT \n        COUNT(report_no) AS total_crimes\n    FROM \n        Crime\n    WHERE \n        community_area_no IN (SELECT community_area_no FROM HighestPopulous)\n)\nSELECT \n    total_crimes / 12.0 AS average_crime_rate_per_month\nFROM \n    TotalCrimesInHighestPopulous;",
    "8652": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM Crime\n     JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\n     JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\n     WHERE Community_Area.side = 'Central' AND FBI_Code.title = 'Larceny') /\n    (SELECT CAST(COUNT(*) AS FLOAT)\n     FROM Crime\n     JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\n     WHERE Community_Area.side = 'Central') * 100 AS percentage_larceny",
    "8653": "SELECT Crime.location_description, \n       Ward.alderman_first_name || ' ' || Ward.alderman_last_name || ' ' || COALESCE(Ward.alderman_name_suffix, '') AS alderman_full_name\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE IUCR.primary_description = 'ARSON' AND IUCR.secondary_description = 'BY EXPLOSIVE'",
    "8654": "SELECT date, latitude, longitude\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE primary_description = 'DECEPTIVE PRACTICE'\nAND secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'",
    "8655": "SELECT COUNT(*) AS total_cases\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nJOIN District ON Crime.district_no = District.district_no\nWHERE FBI_Code.title = 'Criminal Sexual Assault'\nAND District.commander = 'Adnardo Gutierrez'\nAND Crime.location_description = 'RESIDENCE'",
    "8656": "SELECT \n    ROUND((CAST(SUM(CASE WHEN arrest = 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(report_no)) * 100, 2) AS percent_arrested\nFROM \n    Crime\nJOIN \n    Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE \n    domestic = 'TRUE' \n    AND community_area_name = 'West Pullman'",
    "8657": "SELECT \n    (CAST(COUNT(CASE WHEN C.domestic = 'TRUE' THEN 1 END) AS FLOAT) / COUNT(C.report_no)) * 100 AS percentage_domestic_violence,\n    GROUP_CONCAT(CASE WHEN C.location_description = 'BANK' THEN C.report_no END) AS bank_cases_report_numbers\nFROM \n    Crime C\nJOIN \n    Ward W ON C.ward_no = W.ward_no\nWHERE \n    W.alderman_first_name = 'Christopher' AND W.alderman_last_name = 'Taliaferro'",
    "8658": "SELECT COUNT(*) AS number_of_aldermen_named_james\nFROM Ward\nWHERE alderman_first_name = 'James'",
    "8659": "SELECT COUNT(*) AS crimes_on_jan_1_2018\nFROM Crime\nWHERE date LIKE '1/1/2018%'",
    "8660": "SELECT AVG(CAST(population AS INTEGER)) AS avg_population\nFROM Community_Area\nWHERE side = 'West'",
    "8661": "SELECT MAX(c.report_no) AS report_number\nFROM Crime c\nJOIN Ward w ON c.ward_no = w.ward_no\nJOIN Community_Area ca ON c.community_area_no = ca.community_area_no\nWHERE w.alderman_first_name = 'Edward' AND w.alderman_last_name = 'Burke'\nAND ca.population = (SELECT MAX(population) FROM Community_Area)\nAND c.beat = (SELECT MAX(beat) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Ward.alderman_first_name = 'Edward' AND Ward.alderman_last_name = 'Burke' AND Community_Area.population = (SELECT MAX(population) FROM Community_Area))",
    "8662": "SELECT COUNT(*) AS Homicide_In_The_Street\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE location_description = 'STREET'\nAND FBI_Code.title = 'Homicide 1st & 2nd Degree'",
    "8663": "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix\nFROM Ward\nJOIN Crime ON Ward.ward_no = Crime.ward_no\nWHERE report_no = 23769",
    "8664": "SELECT Crime.case_number\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Lincoln Square' AND Crime.domestic = 'TRUE'",
    "8665": "SELECT Crime.report_no\nFROM Crime\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE Ward.ward_office_address = '1958 N. Milwaukee Ave.'\nAND Crime.location_description = 'APARTMENT'",
    "8666": "SELECT COUNT(*) AS total_crimes_in_bridgeport_with_beat_less_than_1000\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Bridgeport' AND Crime.beat < 1000",
    "8667": "SELECT Crime.report_no\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.side = 'Far North' AND CAST(Community_Area.population AS INTEGER) > 60000",
    "8668": "SELECT Crime.report_no\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE FBI_Code.crime_against = 'Property' AND Community_Area.community_area_name = 'Riverdale'",
    "8669": "SELECT COUNT(*) AS domestic_violence_cases\nFROM Crime\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE domestic = 'TRUE' AND ward_email = 'ward13@cityofchicago.org'",
    "8670": "SELECT District.address\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE Crime.case_number = 'JB107731'",
    "8671": "SELECT SUM(Crime.beat) AS total_beat\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.side = 'Central' AND CAST(Community_Area.population AS INTEGER) > 50000",
    "8672": "SELECT Crime.case_number\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.crime_against = 'Society'\nAND Crime.date LIKE '6/%/2018%'",
    "8673": "SELECT \n    (CAST(SUM(CASE WHEN domestic = 'TRUE' THEN 1 ELSE 0 END) AS REAL) / COUNT(domestic)) * 100 AS percentage_domestic_violence\nFROM \n    Crime\nWHERE \n    community_area_no = (\n        SELECT \n            community_area_no\n        FROM \n            Community_Area\n        ORDER BY \n            CAST(population AS INTEGER) DESC\n        LIMIT 1\n    )",
    "8674": "SELECT c.case_number\nFROM Crime c\nJOIN Ward w ON c.ward_no = w.ward_no\nWHERE w.Population < 52000\nAND c.beat > (\n    SELECT AVG(beat) * 0.9\n    FROM Crime\n)",
    "8675": "SELECT community_area_name\nFROM Community_Area\nWHERE side = 'Far North' AND population > '50000' AND population < '70000'",
    "8676": "SELECT latitude, longitude\nFROM Crime\nWHERE location_description = 'ALLEY' AND arrest = 'TRUE'",
    "8677": "SELECT commander, email, phone\nFROM District\nWHERE district_name = 'Ogden'",
    "8678": "SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling'",
    "8679": "SELECT \n    (CAST(COUNT(CASE WHEN I.index_code = 'I' THEN 1 END) AS FLOAT) / COUNT(C.iucr_no)) * 100 AS percentage_severe\nFROM \n    Crime C\nJOIN \n    IUCR I ON C.iucr_no = I.iucr_no",
    "8680": "SELECT location_description, COUNT(case_number) AS crime_count\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.district_name = 'Austin'\nGROUP BY location_description\nORDER BY crime_count DESC\nLIMIT 1",
    "8681": "SELECT AVG(community_count) AS average_community_areas_per_side\nFROM (\n    SELECT side, COUNT(community_area_no) AS community_count\n    FROM Community_Area\n    GROUP BY side\n)",
    "8682": "SELECT community_area_no\nFROM Crime\nWHERE location_description = 'STREET'\nGROUP BY community_area_no\nORDER BY COUNT(report_no) DESC\nLIMIT 1",
    "8683": "SELECT AVG(Reckless_Homicide_Count) AS Average_Reckless_Homicides\nFROM (\n    SELECT d.district_name, COUNT(c.report_no) AS Reckless_Homicide_Count\n    FROM Crime c\n    JOIN IUCR i ON c.iucr_no = i.iucr_no\n    JOIN District d ON c.district_no = d.district_no\n    WHERE i.secondary_description = 'RECKLESS HOMICIDE'\n    GROUP BY d.district_name\n)",
    "8684": "SELECT \n    w.ward_office_address, \n    w.ward_office_phone\nFROM \n    Crime c\nJOIN \n    Ward w ON c.ward_no = w.ward_no\nWHERE \n    c.arrest = 'FALSE'\nGROUP BY \n    c.ward_no\nORDER BY \n    COUNT(*) DESC\nLIMIT 1",
    "8685": "SELECT Crime.case_number, Crime.latitude, Crime.longitude\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE IUCR.secondary_description = 'CHILD ABDUCTION'",
    "8686": "SELECT I.primary_description, I.secondary_description, COUNT(*) AS crime_count\nFROM Crime C\nJOIN IUCR I ON C.iucr_no = I.iucr_no\nJOIN Community_Area CA ON C.community_area_no = CA.community_area_no\nWHERE CA.side = 'Northwest'\nGROUP BY I.secondary_description\nORDER BY crime_count DESC\nLIMIT 1;",
    "8687": "SELECT community_area_no\nFROM Crime\nWHERE domestic = 'TRUE'\nGROUP BY community_area_no\nORDER BY COUNT(*) ASC\nLIMIT 1",
    "8688": "SELECT \n    (COUNT(CASE WHEN I.secondary_description LIKE '%CANNABIS%' THEN 1 END) * 1.0 / COUNT(*) * 100) AS percentage_cannabis\nFROM \n    Crime C\nJOIN \n    IUCR I ON C.iucr_no = I.iucr_no\nJOIN \n    FBI_Code F ON C.fbi_code_no = F.fbi_code_no\nWHERE \n    F.title = 'Drug Abuse'",
    "8689": "SELECT AVG(less_severe_crimes) AS average_less_severe_crimes_per_day\nFROM (\n    SELECT COUNT(case_number) AS less_severe_crimes\n    FROM Crime\n    JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\n    WHERE date LIKE '2/%/2018' AND index_code = 'N'\n    GROUP BY strftime('%d', date)\n)",
    "8690": "WITH SolicitCounts AS (\n    SELECT \n        c.community_area_no,\n        COUNT(*) AS solicit_count\n    FROM Crime cr\n    JOIN IUCR i ON cr.iucr_no = i.iucr_no\n    WHERE i.secondary_description = 'SOLICIT FOR PROSTITUTE'\n    GROUP BY c.community_area_no\n),\nTotalSolicit AS (\n    SELECT \n        SUM(solicit_count) AS total_solicit\n    FROM SolicitCounts\n),\nAverageSolicit AS (\n    SELECT \n        (total_solicit / (SELECT COUNT(DISTINCT community_area_no) FROM Crime)) AS avg_solicit\n    FROM TotalSolicit\n),\nCommunitiesAboveAverage AS (\n    SELECT \n        sc.community_area_no\n    FROM SolicitCounts sc, AverageSolicit av\n    WHERE sc.solicit_count > av.avg_solicit\n)\nSELECT \n    ca.community_area_name,\n    ca.population\nFROM Community_Area ca\nJOIN CommunitiesAboveAverage caa ON ca.community_area_no = caa.community_area_no",
    "8691": "SELECT \n    (COUNT(CASE WHEN f.title = 'Disorderly Conduct' THEN 1 END) * 1.0 / COUNT(c.report_no)) * 100 AS percentage_disorderly_conduct\nFROM \n    Crime c\nJOIN \n    District d ON c.district_no = d.district_no\nJOIN \n    FBI_Code f ON c.fbi_code_no = f.fbi_code_no\nWHERE \n    d.district_name = 'Harrison'",
    "8692": "SELECT \n    AVG(vehicular_hijacking_count) AS avg_vehicular_hijacking,\n    AVG(aggravated_vehicular_hijacking_count) AS avg_aggravated_vehicular_hijacking,\n    (AVG(vehicular_hijacking_count) - AVG(aggravated_vehicular_hijacking_count)) AS difference\nFROM (\n    SELECT \n        d.district_name,\n        SUM(CASE WHEN i.secondary_description = 'VEHICULAR HIJACKING' THEN 1 ELSE 0 END) AS vehicular_hijacking_count,\n        SUM(CASE WHEN i.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN 1 ELSE 0 END) AS aggravated_vehicular_hijacking_count\n    FROM \n        Crime c\n        JOIN IUCR i ON c.iucr_no = i.iucr_no\n        JOIN District d ON c.district_no = d.district_no\n    GROUP BY \n        d.district_name\n)",
    "8693": "SELECT COUNT(*) AS number_of_crimes\nFROM Crime\nWHERE longitude = '-8772658001'",
    "8694": "SELECT Crime.*, IUCR.primary_description, IUCR.secondary_description\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE IUCR.primary_description = 'NARCOTICS'",
    "8695": "SELECT alderman_first_name\nFROM Ward\nWHERE Population > 50000",
    "8696": "SELECT Crime.report_no\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.title = 'Drug Abuse'",
    "8697": "SELECT COUNT(*) AS weapons_violation_crimes\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nJOIN District ON Crime.district_no = District.district_no\nWHERE IUCR.primary_description = 'WEAPON VIOLATION'\nAND District.district_name = 'Calumet'",
    "8698": "SELECT latitude, longitude\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Belmont Cragin'",
    "8699": "SELECT COUNT(DISTINCT IUCR.primary_description) AS distinct_crime_types\nFROM Crime\nJOIN Neighborhood ON Crime.community_area_no = Neighborhood.community_area_no\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE Neighborhood.neighborhood_name = 'Hermosa'",
    "8700": "SELECT COUNT(*) AS domestic_crime_cases\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.commander = 'Ronald A. Pontecore Jr.' AND Crime.domestic = 'TRUE'",
    "8701": "SELECT COUNT(*) AS crimes_against_society\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nJOIN District ON Crime.district_no = District.district_no\nWHERE FBI_Code.crime_against = 'Society' AND District.district_name = 'Wentworth'",
    "8702": "SELECT d.phone\nFROM District d\nJOIN Crime c ON d.district_no = c.district_no\nJOIN Ward w ON c.ward_no = w.ward_no\nWHERE w.alderman_first_name = 'Emma' AND w.alderman_last_name = 'Mitts'\nLIMIT 1",
    "8703": "SELECT COUNT(*) AS total_crimes\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nWHERE FBI_Code.description = 'The theft of a motor vehicle'\nAND Community_Area.community_area_name = 'Lake View'",
    "8704": "SELECT d.district_name\nFROM Crime c\nJOIN IUCR i ON c.iucr_no = i.iucr_no\nJOIN District d ON c.district_no = d.district_no\nWHERE i.primary_description = 'INTIMIDATION'\nGROUP BY d.district_name\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "8705": "SELECT I.primary_description, COUNT(*) AS total_domestic_crimes\nFROM Crime C\nJOIN IUCR I ON C.iucr_no = I.iucr_no\nJOIN Community_Area CA ON C.community_area_no = CA.community_area_no\nWHERE CA.community_area_name = 'North Lawndale' AND C.domestic = 'TRUE'\nGROUP BY I.primary_description\nORDER BY total_domestic_crimes DESC",
    "8706": "SELECT \n    Ward.ward_no,\n    COUNT(Crime.report_no) AS crime_count\nFROM \n    Crime\nJOIN \n    Ward ON Crime.ward_no = Ward.ward_no\nJOIN \n    IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE \n    Ward.Population > 55000\n    AND IUCR.primary_description = 'INTIMIDATION'\n    AND IUCR.secondary_description = 'EXTORTION'\nGROUP BY \n    Ward.ward_no\nORDER BY \n    crime_count DESC\nLIMIT 1;",
    "8707": "SELECT D.commander, COUNT(*) AS total_cases\nFROM Crime C\nJOIN IUCR I ON C.iucr_no = I.iucr_no\nJOIN District D ON C.district_no = D.district_no\nWHERE I.secondary_description = 'CRIMINAL SEXUAL ABUSE'\nGROUP BY D.commander\nORDER BY total_cases DESC\nLIMIT 1;",
    "8708": "SELECT \n    (CAST(COUNT(CASE WHEN C.domestic = 'FALSE' THEN 1 END) AS FLOAT) / COUNT(C.case_number)) * 100 AS percentage_non_domestic\nFROM \n    Crime C\nJOIN \n    District D ON C.district_no = D.district_no\nWHERE \n    D.district_name = 'Jefferson Park'",
    "8709": "SELECT AVG(Population) AS average_population\nFROM Ward\nWHERE ward_no IN (\n    SELECT DISTINCT c.ward_no\n    FROM Crime c\n    JOIN Ward w ON c.ward_no = w.ward_no\n    WHERE c.location_description = 'APARTMENT' AND c.arrest = 'FALSE'\n)",
    "8710": "SELECT alderman_first_name || ' ' || alderman_last_name AS alderman_full_name\nFROM Ward\nORDER BY Population DESC\nLIMIT 5",
    "8711": "SELECT COUNT(*) AS Crimes_Against_Property\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.crime_against = 'Property';",
    "8712": "SELECT COUNT(*) AS number_of_districts\nFROM District\nWHERE zip_code = 60608",
    "8713": "SELECT crime_against FROM FBI_Code WHERE title = \"Criminal Sexual Abuse\"",
    "8714": "SELECT Community_Area.community_area_name\nFROM Neighborhood\nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no\nGROUP BY Community_Area.community_area_no\nORDER BY COUNT(Neighborhood.neighborhood_name) DESC\nLIMIT 1",
    "8715": "SELECT COUNT(*) AS severe_crime_incidents\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE latitude = '41.64820151' AND longitude = '-87.54430496' AND index_code = 'I'",
    "8716": "SELECT d.commander\nFROM District d\nJOIN Crime c ON d.district_no = c.district_no\nWHERE c.arrest = 'FALSE'\nGROUP BY d.district_no\nORDER BY COUNT(c.report_no) DESC\nLIMIT 1",
    "8717": "SELECT I.primary_description AS general_description, I.secondary_description AS specific_description\nFROM Crime C\nJOIN IUCR I ON C.iucr_no = I.iucr_no\nWHERE C.location_description = 'AIRCRAFT'\nGROUP BY C.iucr_no\nORDER BY COUNT(C.iucr_no) DESC\nLIMIT 1",
    "8718": "SELECT district_name, COUNT(*) AS crime_count\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE location_description = 'LIBRARY' AND district_name IN ('Deering', 'Near West')\nGROUP BY District.district_no\nORDER BY crime_count DESC\nLIMIT 1;",
    "8719": "SELECT COUNT(*) AS arrest_count\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE IUCR.primary_description = 'BURGLARY'\nAND IUCR.secondary_description = 'FORCIBLE ENTRY'\nAND Crime.location_description = 'DAY CARE CENTER'\nAND Crime.arrest = 'TRUE'",
    "8720": "SELECT d.district_name\nFROM District d\nJOIN Crime c ON d.district_no = c.district_no\nWHERE c.domestic = 'TRUE'\nGROUP BY d.district_no\nORDER BY COUNT(c.report_no) DESC\nLIMIT 1",
    "8721": "WITH LeastPopulatedCommunity AS (\n    SELECT community_area_no\n    FROM Community_Area\n    ORDER BY CAST(population AS INTEGER)\n    LIMIT 1\n)\nSELECT location_description\nFROM Crime\nWHERE community_area_no IN (SELECT community_area_no FROM LeastPopulatedCommunity)\nGROUP BY location_description\nORDER BY COUNT(location_description) DESC\nLIMIT 1",
    "8722": "SELECT COUNT(*) AS violations_no_arrest_made\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.description = \"The violation of laws\" AND Crime.arrest = 'FALSE'",
    "8723": "SELECT latitude, longitude\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE Community_Area.community_area_name = 'Chatham' AND IUCR.primary_description = 'Simple Assault'\nGROUP BY latitude, longitude\nORDER BY COUNT(*) DESC\nLIMIT 1",
    "8724": "SELECT Community_Area.community_area_name\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.description = \"unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person\"\nAND Community_Area.side = \"South\"\nGROUP BY Community_Area.community_area_name\nORDER BY COUNT(Crime.fbi_code_no) DESC\nLIMIT 1",
    "8725": "SELECT COUNT(*) AS crimes_against_society_in_englewood\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE Community_Area.community_area_name = 'Englewood' AND FBI_Code.crime_against = 'Society'",
    "8726": "SELECT \n    AVG(Count) AS weekly_average, \n    location_description \nFROM \n    (\n        SELECT \n            COUNT(report_no) AS Count, \n            location_description \n        FROM Crime \n        JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no \n        WHERE FBI_Code.title = 'Fraud' \n        AND SUBSTR(Crime.date, 6, 2) = '01' \n        AND SUBSTR(Crime.date, 1, 4) = '2018' \n        GROUP BY location_description \n        ORDER BY Count DESC\n    ) \nGROUP BY location_description \nORDER BY Count DESC \nLIMIT 1;",
    "8727": "SELECT community_area_name\nFROM Community_Area\nWHERE CAST(population AS INTEGER) > 50000\nLIMIT 3",
    "8728": "SELECT community_area_name\nFROM Community_Area\nWHERE side = 'Central'",
    "8729": "SELECT \n    ABS(\n        (SELECT COUNT(*) FROM Community_Area WHERE side = 'North' AND CAST(population AS INTEGER) > 30000) - \n        (SELECT COUNT(*) FROM Community_Area WHERE side = 'South' AND CAST(population AS INTEGER) > 30000)\n    ) AS difference",
    "8730": "SELECT phone, fax, tty, twitter\nFROM District\nWHERE district_name = 'Near West'",
    "8731": "SELECT commander FROM District WHERE district_name = 'Lincoln'",
    "8732": "SELECT primary_description AS general_description, secondary_description AS specific_description\nFROM IUCR\nWHERE iucr_no = '275'",
    "8733": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN I.primary_description = 'CRIME SEXUAL ASSAULT' AND I.index_code = 'I' THEN C.iucr_no END) AS FLOAT) / \n    COUNT(DISTINCT CASE WHEN I.index_code = 'I' THEN C.iucr_no END)) * 100 AS percentage_severe_sexual_assault\nFROM \n    Crime C\nJOIN \n    IUCR I ON C.iucr_no = I.iucr_no",
    "8734": "SELECT neighborhood_name \nFROM Neighborhood \nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no \nWHERE Community_Area.community_area_name = 'North Center'",
    "8735": "SELECT COUNT(*) AS number_of_neighborhoods\nFROM Neighborhood\nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no\nWHERE Community_Area.community_area_name = 'Forest Glen'",
    "8736": "SELECT SUM(Population) AS total_population\nFROM Ward\nJOIN Neighborhood ON Ward.ward_no = Neighborhood.community_area_no\nWHERE Neighborhood.neighborhood_name IN ('Avondale Gardens', 'Irving Park', 'Kilbourn Park', 'Merchant Park', 'Old Irving Park', 'The Villa')",
    "8737": "SELECT COUNT(*) AS Weapons_Violation_Cases\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.title = 'Weapons Violation'",
    "8738": "SELECT c.case_number\nFROM Crime c\nJOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no\nWHERE f.title = 'Criminal Sexual Assault'\nAND f.crime_against = 'Persons'\nAND c.arrest = 'TRUE'\nLIMIT 3",
    "8739": "SELECT District.district_name\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE Crime.case_number = 'JB106545'",
    "8740": "SELECT IUCR.primary_description AS general_description\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE Crime.case_number = 'JB106010'",
    "8741": "SELECT DISTINCT CA.community_area_name\nFROM Crime C\nJOIN FBI_Code F ON C.fbi_code_no = F.fbi_code_no\nJOIN Community_Area CA ON C.community_area_no = CA.community_area_no\nWHERE F.title = 'Fraud Incident'\nLIMIT 3;",
    "8742": "SELECT FBI_Code.title, COUNT(Crime.report_no) AS crime_count\nFROM Crime\nJOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE Community_Area.community_area_name = 'Rogers Park'\nGROUP BY FBI_Code.title\nORDER BY crime_count DESC",
    "8743": "SELECT d.district_name\nFROM Crime c\nJOIN District d ON c.district_no = d.district_no\nWHERE c.case_number = 'JB120039'\nGROUP BY c.case_number\nHAVING COUNT(c.case_number) > 1",
    "8744": "SELECT \n    (CAST(COUNT(CASE WHEN C.location_description = 'STREET' THEN 1 END) AS FLOAT) / COUNT(*) * 100) AS percentage\nFROM \n    Crime C\nJOIN \n    FBI_Code F ON C.fbi_code_no = F.fbi_code_no\nWHERE \n    F.title = 'Drug Abuse'",
    "8745": "SELECT ward_no\nFROM Ward\nORDER BY Population DESC\nLIMIT 1",
    "8746": "SELECT beat, location_description FROM Crime WHERE case_number = 'JB112212';",
    "8747": "SELECT fbi_code_no FROM FBI_Code WHERE description = \"The killing of one human being by another\";",
    "8748": "SELECT DISTINCT W.ward_office_address\nFROM Crime C\nJOIN Community_Area CA ON C.community_area_no = CA.community_area_no\nJOIN Ward W ON C.ward_no = W.ward_no\nWHERE CA.community_area_name = 'Montclare'\nLIMIT 5;",
    "8749": "SELECT d.commander\nFROM Crime c\nJOIN District d ON c.district_no = d.district_no\nWHERE c.location_description = 'YARD' AND c.beat = 532",
    "8750": "SELECT neighborhood_name \nFROM Neighborhood \nJOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no \nWHERE Community_Area.community_area_name = 'Lake View'",
    "8751": "SELECT Neighborhood.neighborhood_name\nFROM Crime\nJOIN Neighborhood ON Crime.community_area_no = Neighborhood.community_area_no\nWHERE Crime.report_no = 23843;",
    "8752": "SELECT FBI_Code.description\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE Crime.report_no = 23778",
    "8753": "SELECT Crime.report_no\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.commander = 'Jill M. Stevens'",
    "8754": "SELECT \n    ROUND(\n        (CAST(SUM(CASE WHEN C.location_description = 'HOUSE' THEN 1 ELSE 0 END) AS REAL) / COUNT(C.location_description)) * 100, \n        2\n    ) AS percentage_of_crimes_in_house\nFROM \n    Crime C\nJOIN \n    Neighborhood N ON C.community_area_no = N.community_area_no\nWHERE \n    N.neighborhood_name = 'Avalon Park'",
    "8755": "SELECT alderman_first_name || ' ' || alderman_last_name || ' ' || IFNULL(alderman_name_suffix, '') AS full_name\nFROM Ward\nWHERE ward_no = 21",
    "8756": "SELECT ward_no\nFROM Ward\nORDER BY Population DESC\nLIMIT 1",
    "8757": "SELECT COUNT(*) AS assault_incidents\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE IUCR.primary_description = 'ASSAULT'",
    "8758": "SELECT COUNT(*) AS severe_incidents\nFROM IUCR\nWHERE index_code = 'I'",
    "8759": "SELECT COUNT(*) \nFROM Crime \nJOIN Ward ON Crime.ward_no = Ward.ward_no \nWHERE arrest = 'FALSE' AND alderman_first_name = 'Pat' AND alderman_last_name = 'Dowell'",
    "8760": "SELECT \n    W.alderman_first_name || ' ' || W.alderman_last_name || ' ' || IFNULL(W.alderman_name_suffix, '') AS alderman_full_name\nFROM \n    Crime C\nJOIN \n    Ward W ON C.ward_no = W.ward_no\nWHERE \n    Substr(C.date, 1, 1) = '1' AND Substr(C.date, 5, 4) = '2018'\nGROUP BY \n    C.ward_no\nORDER BY \n    COUNT(C.ward_no) DESC\nLIMIT 1;",
    "8761": "SELECT COUNT(*) AS domestic_violence_cases\nFROM Crime\nWHERE ward_no = (\n    SELECT ward_no\n    FROM Ward\n    ORDER BY Population DESC\n    LIMIT 1\n)\nAND domestic = 'TRUE'",
    "8762": "SELECT Crime.latitude, Crime.longitude\nFROM Crime\nJOIN Ward ON Crime.ward_no = Ward.ward_no\nWHERE Ward.alderman_first_name = 'Pat' AND Ward.alderman_last_name = 'Dowell'",
    "8763": "SELECT \n    alderman_first_name, \n    alderman_last_name, \n    COUNT(report_no) AS incidents_count\nFROM \n    Crime \nJOIN \n    Ward ON Crime.ward_no = Ward.ward_no\nWHERE \n    (SUBSTR(date, 1, 1) = '1' AND SUBSTR(date, 5, 4) = '2018')\n    AND (alderman_first_name = 'Pat' AND alderman_last_name = 'Dowell'\n         OR alderman_first_name = 'Sophia' AND alderman_last_name = 'King')\nGROUP BY \n    Crime.ward_no\nORDER BY \n    incidents_count DESC\nLIMIT 1;",
    "8764": "SELECT Crime.case_number\nFROM Crime\nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no\nWHERE IUCR.primary_description = 'BATTERY'",
    "8765": "SELECT COUNT(*) \nFROM Crime \nJOIN IUCR ON Crime.iucr_no = IUCR.iucr_no \nWHERE IUCR.primary_description = 'BATTERY' AND Crime.arrest = 'FALSE'",
    "8766": "SELECT Crime.case_number\nFROM Crime\nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no\nWHERE FBI_Code.title = \"Homicide 1st & 2nd Degree\"",
    "8767": "SELECT COUNT(*) \nFROM Crime \nJOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no \nWHERE Substr(Crime.date, 1, 1) = '1' \nAND Substr(Crime.date, 5, 4) = '2018' \nAND FBI_Code.crime_against = 'Property'",
    "8768": "SELECT COUNT(*) AS incidents_in_january_2018\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.commander = 'Robert A. Rubio'\nAND Substr(Crime.date, 1, 1) = '1'\nAND Substr(Crime.date, 5, 4) = '2018'",
    "8769": "SELECT commander, COUNT(*) AS incident_count\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE (commander = 'Robert A. Rubio' OR commander = 'Glenn White')\nAND Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'\nGROUP BY commander\nORDER BY incident_count DESC\nLIMIT 1;",
    "8770": "SELECT Crime.block\nFROM Crime\nJOIN District ON Crime.district_no = District.district_no\nWHERE District.commander = 'Robert A. Rubio'",
    "8771": "SELECT AVG(IncidentsPerMonth) AS AverageIncidentsPerMonth\nFROM (\n    SELECT COUNT(report_no) / 12.0 AS IncidentsPerMonth\n    FROM Crime\n    WHERE date LIKE '%2018%'\n    AND ward_no = (\n        SELECT ward_no\n        FROM Ward\n        ORDER BY Population DESC\n        LIMIT 1\n    )\n)",
    "8772": "SELECT \n    (CAST(COUNT(DISTINCT CASE WHEN C.arrest = 'FALSE' AND I.primary_description = 'BATTERY' THEN C.report_no ELSE NULL END) AS FLOAT) / \n    CAST(COUNT(DISTINCT CASE WHEN C.arrest = 'FALSE' THEN C.report_no ELSE NULL END) AS FLOAT)) * 100 AS percentage_of_battery_no_arrest\nFROM \n    Crime C\nJOIN \n    IUCR I ON C.iucr_no = I.iucr_no",
    "8773": "SELECT COUNT(*) AS `Number of Restaurants' Owners in California`\nFROM businesses\nWHERE owner_state = 'CA';",
    "8774": "SELECT COUNT(DISTINCT business_id) AS restaurants_met_all_requirements\nFROM inspections\nWHERE score = 100;",
    "8775": "SELECT COUNT(*) AS routine_inspections_2016\nFROM inspections\nWHERE YEAR(date) = 2016 AND type = 'Routine - Unscheduled'",
    "8776": "SELECT DISTINCT b.name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.score = 100",
    "8777": "SELECT COUNT(DISTINCT b.business_id) AS total_san_francisco_restaurants\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.date BETWEEN '2016-01-01' AND '2016-12-31'\nAND b.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO')",
    "8778": "SELECT i.type\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.name = 'Tiramisu Kitchen' AND i.date = '2014-01-14'",
    "8779": "SELECT COUNT(*) AS low_risk_violations_count\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.name = 'Tiramisu Kitchen'\nAND v.date = '2014-01-14'\nAND v.risk_category = 'Low Risk'",
    "8780": "SELECT DISTINCT b.name\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'Low Risk'\nAND strftime('%Y', v.date) = '2014'",
    "8781": "SELECT v.description \nFROM violations v \nJOIN businesses b ON v.business_id = b.business_id \nWHERE b.name = 'Tiramisu Kitchen' \nAND v.date = '2014-01-14' \nAND v.risk_category = 'Low Risk'",
    "8782": "SELECT v.description\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.name = 'Tiramisu Kitchen' AND v.risk_category = 'High Risk'",
    "8783": "SELECT COUNT(*) AS routine_inspections_count\nFROM inspections\nJOIN businesses ON inspections.business_id = businesses.business_id\nWHERE businesses.name = 'Tiramisu Kitchen' AND inspections.type = 'Routine - Unscheduled'",
    "8784": "SELECT COUNT(*) AS NumberOfInspectionsOver70\nFROM inspections\nJOIN businesses ON inspections.business_id = businesses.business_id\nWHERE businesses.name = 'Tiramisu Kitchen'\nAND inspections.type = 'Routine - Unscheduled'\nAND inspections.score > 70",
    "8785": "SELECT \n    b.name,\n    COUNT(v.risk_category) AS low_risk_violations\nFROM \n    businesses b\nJOIN \n    violations v ON b.business_id = v.business_id\nWHERE \n    b.name IN ('Tiramisu Kitchen', 'OMNI S.F. Hotel - 2nd Floor Pantry')\n    AND v.risk_category = 'Low Risk'\nGROUP BY \n    b.name\nORDER BY \n    low_risk_violations DESC\nLIMIT 1;",
    "8786": "SELECT COUNT(*) AS total_high_risk_violations\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO')\nAND v.risk_category = 'High Risk'",
    "8787": "SELECT b.name\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'High Risk'\nGROUP BY b.business_id\nORDER BY COUNT(v.risk_category) DESC\nLIMIT 1",
    "8788": "SELECT AVG(i.score) AS average_score\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.name = 'Tiramisu Kitchen'",
    "8789": "SELECT business_id\nFROM inspections\nGROUP BY business_id\nORDER BY COUNT(business_id) DESC\nLIMIT 1",
    "8790": "SELECT business_id\nFROM violations\nGROUP BY business_id\nORDER BY COUNT(business_id) DESC\nLIMIT 1",
    "8791": "SELECT b.name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.score = 100 AND i.type = 'Routine - Unscheduled' AND i.date = '2016-09-28'",
    "8792": "SELECT b.name\nFROM businesses b\nJOIN (\n  SELECT v.business_id, COUNT(*) AS high_risk_count\n  FROM violations v\n  WHERE v.risk_category = 'High'\n  GROUP BY v.business_id\n  ORDER BY high_risk_count DESC\n  LIMIT 1\n) AS most_high_risk\nON b.business_id = most_high_risk.business_id",
    "8793": "SELECT COUNT(DISTINCT v.violation_type_id) AS violation_kinds\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE b.name = 'Stacks Restaurant' AND v.date = '2016-10-04'",
    "8794": "SELECT v.description\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.name = 'Chez Fayala, Inc.'\nAND v.risk_category = 'Moderate Risk'\nAND v.date = '2016-07-01'",
    "8795": "SELECT b.name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.type = 'Routine - Unscheduled' AND i.date = '2016-09-26'\nORDER BY i.score ASC\nLIMIT 1;",
    "8796": "SELECT b.name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.type = 'Complaint'\nGROUP BY b.business_id\nORDER BY COUNT(i.business_id) DESC\nLIMIT 1",
    "8797": "SELECT COUNT(*) AS unscheduled_routine_inspections\nFROM inspections\nJOIN businesses ON inspections.business_id = businesses.business_id\nWHERE businesses.name = 'Soma Restaurant And Bar' AND inspections.type = 'Routine - Unscheduled'",
    "8798": "SELECT b.address\nFROM businesses b\nJOIN (\n    SELECT v.business_id, COUNT(*) AS low_risk_count\n    FROM violations v\n    WHERE v.risk_category = 'Low Risk'\n    GROUP BY v.business_id\n    ORDER BY low_risk_count DESC\n    LIMIT 1\n) AS most_low_risk ON b.business_id = most_low_risk.business_id",
    "8799": "SELECT b.name\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'Low Risk' AND v.description = 'Permit license or inspection report not posted'\nORDER BY v.date ASC\nLIMIT 1;",
    "8800": "SELECT COUNT(i.business_id) AS inspection_count\nFROM inspections i\nINNER JOIN (\n    SELECT v.business_id\n    FROM violations v\n    GROUP BY v.business_id\n    ORDER BY COUNT(v.business_id) DESC\n    LIMIT 1\n) AS most_violated_business ON i.business_id = most_violated_business.business_id",
    "8801": "SELECT COUNT(*) AS violation_count\nFROM violations\nJOIN businesses ON violations.business_id = businesses.business_id\nWHERE businesses.business_certificate = 304977 AND violations.date = '2013-10-07'",
    "8802": "SELECT AVG(score) AS average_score\nFROM inspections\nJOIN businesses ON inspections.business_id = businesses.business_id\nWHERE type = 'Routine - Unscheduled' AND name = 'Chairman Bao';",
    "8803": "SELECT \n    (SELECT CAST(COUNT(*) AS FLOAT) \n     FROM violations \n     JOIN businesses ON violations.business_id = businesses.business_id \n     WHERE businesses.name = 'Melody Lounge' AND violations.risk_category = 'Moderate Risk') \n    / \n    (SELECT COUNT(*) \n     FROM violations \n     JOIN businesses ON violations.business_id = businesses.business_id \n     WHERE businesses.name = 'Melody Lounge') \n    AS percentage",
    "8804": "SELECT COUNT(*) FROM businesses WHERE city = 'HAYWARD';",
    "8805": "SELECT COUNT(DISTINCT businesses.business_id) AS establishments_with_low_score\nFROM businesses\nJOIN inspections ON businesses.business_id = inspections.business_id\nWHERE inspections.score < 50;",
    "8806": "SELECT COUNT(*) AS eateries_applied_in_2012\nFROM businesses\nWHERE application_date BETWEEN '2012-01-01' AND '2012-12-31';",
    "8807": "SELECT COUNT(*) AS foodborne_illness_investigations_2014\nFROM inspections\nWHERE type = 'Foodborne Illness Investigation'\nAND date BETWEEN '2014-01-01' AND '2014-12-31';",
    "8808": "SELECT COUNT(*) AS owners_with_5_or_more_establishments\nFROM (\n    SELECT owner_name\n    FROM businesses\n    GROUP BY owner_name\n    HAVING COUNT(business_id) >= 5\n)",
    "8809": "SELECT b.name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.score = 100 AND strftime('%Y', i.date) = '2013'",
    "8810": "SELECT b.city, COUNT(DISTINCT b.business_id) AS high_risk_establishments\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'High Risk' AND strftime('%Y', v.date) = '2016'\nGROUP BY b.city\nORDER BY high_risk_establishments DESC\nLIMIT 1;",
    "8811": "SELECT b.name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nORDER BY i.score ASC\nLIMIT 1",
    "8812": "SELECT COUNT(*) AS high_risk_violations\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.name = 'Tiramisu Kitchen' AND v.risk_category = 'High Risk'",
    "8813": "SELECT COUNT(DISTINCT b.business_id) AS establishments_with_5_or_more_complaints\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE b.tax_code = 'H24' AND i.type = 'Complaint'\nGROUP BY b.business_id\nHAVING COUNT(i.business_id) >= 5",
    "8814": "SELECT b.name\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.description = 'Contaminated or adulterated food'\nAND strftime('%Y', v.date) = '2013'",
    "8815": "SELECT COUNT(DISTINCT b.business_id) AS establishments_with_high_score\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE b.postal_code = '94102' AND i.score >= 90 AND strftime('%Y', i.date) = '2015'",
    "8816": "WITH ScoredYears AS (\n  SELECT \n    b.business_id, \n    b.name, \n    strftime('%Y', i.date) AS year,\n    i.score\n  FROM \n    businesses b\n  JOIN inspections i ON b.business_id = i.business_id\n  WHERE \n    i.score = 100\n  GROUP BY \n    b.business_id, year\n  HAVING \n    COUNT(*) >= 1\n),\nCountedYears AS (\n  SELECT \n    business_id, \n    name, \n    COUNT(year) AS years_with_score_100\n  FROM \n    ScoredYears\n  GROUP BY \n    business_id\n  HAVING \n    years_with_score_100 >= 4\n)\nSELECT \n  name\nFROM \n  CountedYears;",
    "8817": "SELECT AVG(i.score) AS average_score\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.owner_name = 'Yiu Tim Chan'\nAND b.address = '808 Pacific Ave'\nAND b.city = 'San Francisco'\nAND strftime('%Y', i.date) BETWEEN '2014' AND '2016'",
    "8818": "SELECT AVG(score) AS average_score\nFROM inspections\nWHERE business_id IN (\n    SELECT business_id\n    FROM businesses\n    WHERE owner_name = (\n        SELECT owner_name\n        FROM businesses\n        GROUP BY owner_name\n        ORDER BY COUNT(business_id) DESC\n        LIMIT 1\n    )\n)",
    "8819": "SELECT b.name\nFROM businesses b\nJOIN (\n  SELECT v.business_id, COUNT(*) AS low_risk_count\n  FROM violations v\n  WHERE v.risk_category = 'Low Risk' AND strftime('%Y', v.date) = '2014'\n  GROUP BY v.business_id\n  ORDER BY low_risk_count DESC\n  LIMIT 1\n) AS lr ON b.business_id = lr.business_id",
    "8820": "WITH OwnerBusinessCount AS (\n    SELECT \n        owner_name,\n        COUNT(business_id) AS establishment_count\n    FROM \n        businesses\n    GROUP BY \n        owner_name\n    ORDER BY \n        establishment_count DESC\n    LIMIT 5\n),\nHighRiskViolations AS (\n    SELECT \n        b.owner_name,\n        COUNT(v.violation_type_id) AS high_risk_violation_count\n    FROM \n        violations v\n    JOIN \n        businesses b ON v.business_id = b.business_id\n    WHERE \n        v.risk_category = 'High Risk'\n    GROUP BY \n        b.owner_name\n),\nTopOwnersHighRiskViolations AS (\n    SELECT \n        o.owner_name,\n        COALESCE(h.high_risk_violation_count, 0) AS high_risk_violation_count\n    FROM \n        OwnerBusinessCount o\n    LEFT JOIN \n        HighRiskViolations h ON o.owner_name = h.owner_name\n)\nSELECT \n    owner_name\nFROM \n    TopOwnersHighRiskViolations\nORDER BY \n    high_risk_violation_count DESC\nLIMIT 1;",
    "8821": "WITH InspectionCounts AS (\n  SELECT\n    business_id,\n    COUNT(business_id) AS inspection_count\n  FROM inspections\n  GROUP BY business_id\n),\nMaxInspection AS (\n  SELECT\n    MAX(inspection_count) AS max_inspection_count\n  FROM InspectionCounts\n),\nTopBusiness AS (\n  SELECT\n    IC.business_id\n  FROM InspectionCounts IC\n  JOIN MaxInspection MI ON IC.inspection_count = MI.max_inspection_count\n),\nAvgScore AS (\n  SELECT\n    I.business_id,\n    AVG(I.score) AS average_score\n  FROM inspections I\n  JOIN TopBusiness TB ON I.business_id = TB.business_id\n  GROUP BY I.business_id\n)\nSELECT\n  B.name,\n  AS.average_score\nFROM AvgScore AS\nJOIN businesses B ON AS.business_id = B.business_id",
    "8822": "SELECT COUNT(DISTINCT business_id) AS eateries_with_highest_score_in_2013\nFROM inspections\nWHERE score = 100 AND strftime('%Y', date) = '2013';",
    "8823": "SELECT DISTINCT i.business_id\nFROM inspections i\nWHERE i.type = 'Structural Inspection'\nAND strftime('%Y', i.date) = '2016'\nAND strftime('%m', i.date) = '02'",
    "8824": "SELECT COUNT(DISTINCT b.business_id) AS low_risk_unpermitted_eateries\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'Low Risk' AND v.description LIKE '%unpermitted food facility%'",
    "8825": "SELECT v.business_id, v.risk_category, v.description\nFROM violations v\nWHERE v.violation_type_id = '103101'",
    "8826": "SELECT i.date\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.city = 'San Bruno' AND i.score = 100",
    "8827": "SELECT i.type AS Inspection_Type, v.description AS Violation_Description\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nJOIN violations v ON b.business_id = v.business_id AND i.date = v.date\nWHERE b.name = 'ART''s CAF\u00c9' AND v.risk_category = 'Moderate Risk'",
    "8828": "SELECT v.violation_type_id, v.description\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.name = 'STARBUCKS' AND v.risk_category = 'High Risk'",
    "8829": "SELECT i.date, i.score, i.type\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.tax_code = 'AA'",
    "8830": "SELECT b.business_id, b.name, b.address\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.date = '2016-07-30'",
    "8831": "SELECT v.date, v.risk_category, v.description, b.name\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.owner_name = 'Jade Chocolates LLC'",
    "8832": "SELECT b.name, v.risk_category, v.description\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.violation_type_id = '103111'",
    "8833": "SELECT b.name, b.city, b.tax_code\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.date = '2014-06-03' AND v.risk_category = 'High Risk'\nLIMIT 5",
    "8834": "SELECT i.type\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.name = 'El Aji Peruvian Restaurant'\nORDER BY i.score DESC\nLIMIT 1",
    "8835": "SELECT DISTINCT b.owner_name\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'High Risk' AND v.description = 'Improper cooking time or temperatures'",
    "8836": "SELECT b.name, b.address\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.date = '2015-02-02' AND i.type = 'Reinspection/Followup'",
    "8837": "SELECT b.name, b.business_certificate\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.score < 50",
    "8838": "SELECT COUNT(*) AS number_of_businesses\nFROM businesses\nWHERE address = '1825 POST St #223' AND city = 'San Francisco';",
    "8839": "SELECT owner_name FROM businesses WHERE owner_zip = '94104';",
    "8840": "SELECT COUNT(*) AS total_businesses_with_tax_code_H25\nFROM businesses\nWHERE tax_code = 'H25'",
    "8841": "SELECT COUNT(*) AS low_risk_violations_2014\nFROM violations\nWHERE strftime('%Y', date) = '2014' AND risk_category = 'Low Risk'",
    "8842": "SELECT v.business_id, v.risk_category\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.owner_name = 'San Francisco Madeleine, Inc.'",
    "8843": "SELECT b.owner_name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE i.score = 100",
    "8844": "SELECT COUNT(DISTINCT b.business_id) AS total_high_risk_businesses\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE b.postal_code = '94117' AND v.risk_category = 'High Risk'",
    "8845": "SELECT v.violation_type_id, v.risk_category\nFROM violations v\nJOIN inspections i ON v.business_id = i.business_id\nWHERE i.score BETWEEN 70 AND 80",
    "8846": "SELECT b.tax_code, i.type\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE b.name = \"Rue Lepic\";",
    "8847": "SELECT b.name\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.violation_type_id = '103157'\nAND v.date = '2016-05-27'\nAND i.type = 'Routine - Unscheduled'\nAND i.date = '2016-05-27'",
    "8848": "SELECT b.owner_name\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'High Risk' \nAND v.violation_type_id = '103109' \nAND v.description = 'Unclean or unsanitary food contact surfaces';",
    "8849": "SELECT b.name \nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE b.owner_city = 'Cameron Park' AND i.score = 100",
    "8850": "SELECT v.violation_type_id\nFROM violations v\nJOIN businesses b ON v.business_id = b.business_id\nWHERE b.business_id BETWEEN 30 AND 50\nAND b.address = '747 IRVING St'\nAND b.city = 'San Francisco'",
    "8851": "SELECT b.owner_name\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.violation_type_id = '103156' AND v.date = '2014-06-12'",
    "8852": "SELECT i.type\nFROM inspections i\nJOIN businesses b ON i.business_id = b.business_id\nWHERE b.owner_address = '500 California St, 2nd Floor' AND b.city = 'SAN FRANCISCO'\nORDER BY i.score DESC\nLIMIT 1",
    "8853": "SELECT COUNT(*) \nFROM violations \nJOIN inspections ON violations.business_id = inspections.business_id \nAND violations.date = inspections.date\nWHERE inspections.type = 'Routine - Unscheduled' \nAND strftime('%Y', inspections.date) = '2016'",
    "8854": "SELECT b.name, v.risk_category\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nJOIN violations v ON b.business_id = v.business_id\nWHERE i.score > (\n    SELECT 0.8 * AVG(score)\n    FROM inspections\n)\nGROUP BY b.business_id, v.risk_category",
    "8855": "SELECT \n    (SELECT CAST(COUNT(DISTINCT b.business_id) AS FLOAT)\n     FROM businesses b\n     JOIN inspections i ON b.business_id = i.business_id\n     JOIN violations v ON b.business_id = v.business_id\n     WHERE i.score < 95 AND b.postal_code = '94110' AND v.risk_category = 'Low Risk'\n    ) / \n    (SELECT CAST(COUNT(DISTINCT b.business_id) AS FLOAT)\n     FROM businesses b\n     JOIN inspections i ON b.business_id = i.business_id\n     WHERE i.score < 95 AND b.postal_code = '94110'\n    ) AS percentage;",
    "8856": "SELECT state\nFROM breweries\nJOIN beers ON breweries.id = beers.brewery_id\nORDER BY ibu ASC\nLIMIT 1",
    "8857": "SELECT b.name AS brewery_name, b.city\nFROM breweries b\nJOIN beers ON b.id = beers.brewery_id\nWHERE b.state = 'New York'\nORDER BY beers.ibu DESC\nLIMIT 1",
    "8858": "SELECT AVG(abv) AS average_alcohol_content\nFROM beers\nJOIN breweries ON beers.brewery_id = breweries.id\nWHERE breweries.name = 'Boston Beer Company' AND ounces = 12.0",
    "8859": "SELECT \n    (COUNT(CASE WHEN style = 'American Adjunct Lager' THEN 1 END) * 100.0 / COUNT(style)) AS percent_allotted\nFROM beers\nJOIN breweries ON beers.brewery_id = breweries.id\nWHERE breweries.name = 'Stevens Point Brewery'",
    "8860": "WITH Bitterness AS (\n    SELECT\n        b.city,\n        b.state,\n        AVG(be.ibu) AS avg_ibu\n    FROM beers be\n    JOIN breweries b ON be.brewery_id = b.id\n    WHERE be.ibu IS NOT NULL\n    GROUP BY b.city, b.state\n),\nMaxBitterness AS (\n    SELECT\n        city,\n        state,\n        avg_ibu\n    FROM Bitterness\n    ORDER BY avg_ibu DESC\n    LIMIT 1\n),\nMinBitterness AS (\n    SELECT\n        city,\n        state,\n        avg_ibu\n    FROM Bitterness\n    ORDER BY avg_ibu ASC\n    LIMIT 1\n),\nMostBitterBeer AS (\n    SELECT\n        be.name AS beer_name,\n        b.city,\n        b.state,\n        be.ibu\n    FROM beers be\n    JOIN breweries b ON be.brewery_id = b.id\n    WHERE be.ibu IS NOT NULL\n    ORDER BY be.ibu DESC\n    LIMIT 1\n),\nLeastBitterBeer AS (\n    SELECT\n        be.name AS beer_name,\n        b.city,\n        b.state,\n        be.ibu\n    FROM beers be\n    JOIN breweries b ON be.brewery_id = b.id\n    WHERE be.ibu IS NOT NULL\n    ORDER BY be.ibu ASC\n    LIMIT 1\n)\nSELECT\n    'Most Bitter' AS Type,\n    mb.city,\n    mb.state,\n    mb.beer_name,\n    mb.ibu\nFROM MostBitterBeer mb\nUNION ALL\nSELECT\n    'Least Bitter' AS Type,\n    lb.city,\n    lb.state,\n    lb.beer_name,\n    lb.ibu\nFROM LeastBitterBeer lb",
    "8861": "SELECT \n    (SELECT CAST(COUNT(DISTINCT b.id) AS FLOAT)\n     FROM breweries b\n     JOIN beers br ON b.id = br.brewery_id\n     WHERE b.state = 'Wisconsin' AND br.style = 'American Blonde Ale') /\n    (SELECT CAST(COUNT(DISTINCT b.id) AS FLOAT)\n     FROM breweries b\n     JOIN beers br ON b.id = br.brewery_id\n     WHERE br.style = 'American Blonde Ale') * 100 AS percentage_wisconsin",
    "8862": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nORDER BY Nutrition.total_fat DESC\nLIMIT 1",
    "8863": "SELECT (total_fat - sat_fat) AS unsaturated_fat\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Raspberry Chiffon Pie'",
    "8864": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE Nutrition.sodium < 5;",
    "8865": "SELECT R.title\nFROM Recipe R\nJOIN Nutrition N ON R.recipe_id = N.recipe_id\nWHERE N.iron > 20",
    "8866": "SELECT title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE title IN ('Raspberry Chiffon Pie', 'Fresh Apricot Bavarian')\nORDER BY vitamin_c DESC\nLIMIT 1;",
    "8867": "SELECT R.title\nFROM Recipe R\nJOIN Nutrition N ON R.recipe_id = N.recipe_id\nWHERE R.prep_min > 10\nORDER BY N.calories DESC\nLIMIT 1",
    "8868": "SELECT Nutrition.calories\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Raspberry Chiffon Pie'",
    "8869": "SELECT optional\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Ingredient.name = 'graham cracker crumbs' AND Recipe.title = 'Raspberry Chiffon Pie'",
    "8870": "SELECT COUNT(*) AS rationed_ingredients\nFROM Quantity q\nJOIN Recipe r ON q.recipe_id = r.recipe_id\nWHERE r.title = 'Raspberry Chiffon Pie' AND q.max_qty = q.min_qty;",
    "8871": "SELECT Ingredient.name\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Raspberry Chiffon Pie' AND Quantity.preparation IS NULL",
    "8872": "SELECT COUNT(DISTINCT Quantity.recipe_id) AS recipes_with_graham_cracker_crumbs\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nWHERE Ingredient.name = 'graham cracker crumbs';",
    "8873": "SELECT min_qty AS cups\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Ingredient.name = 'graham cracker crumbs' AND Recipe.title = 'Raspberry Chiffon Pie' AND Quantity.unit = 'cups'",
    "8874": "SELECT calories * pcnt_cal_fat / 100 AS calories_from_fat\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Raspberry Chiffon Pie'",
    "8875": "SELECT AVG(calories) AS average_calories\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.source = 'Produce for Better Health Foundation and 5 a Day'",
    "8876": "SELECT calories\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'turkey tenderloin bundles'",
    "8877": "SELECT max_qty AS cups_of_milk\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nWHERE recipe_id = 1436 AND name = '1% lowfat milk'",
    "8878": "SELECT R.title\nFROM Recipe R\nJOIN Nutrition N ON R.recipe_id = N.recipe_id\nORDER BY N.total_fat DESC\nLIMIT 1",
    "8879": "SELECT COUNT(*) AS appearances\nFROM Quantity q\nJOIN Ingredient i ON q.ingredient_id = i.ingredient_id\nWHERE i.name = 'seedless red grapes'",
    "8880": "SELECT Ingredient.name\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nWHERE Quantity.recipe_id = 1397 AND Quantity.optional = 'TRUE'",
    "8881": "SELECT R.title\nFROM Recipe R\nJOIN Quantity Q ON R.recipe_id = Q.recipe_id\nJOIN Ingredient I ON Q.ingredient_id = I.ingredient_id\nWHERE I.name = 'frozen raspberries in light syrup'\nORDER BY Q.max_qty DESC\nLIMIT 1",
    "8882": "SELECT name\nFROM Ingredient\nWHERE ingredient_id = (\n    SELECT ingredient_id\n    FROM Quantity\n    GROUP BY ingredient_id\n    ORDER BY COUNT(ingredient_id) DESC\n    LIMIT 1\n)",
    "8883": "SELECT preparation\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Ingredient.name = 'apple juice' AND Recipe.title = 'raspberry-pear couscous cake'",
    "8884": "SELECT min_qty, max_qty, unit\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Ingredient.name = 'almonds' AND Recipe.title = 'chicken pocket sandwich' AND Quantity.unit = 'cups'",
    "8885": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nORDER BY Nutrition.vitamin_c DESC\nLIMIT 1",
    "8886": "SELECT vitamin_a\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Sherried Beef'",
    "8887": "SELECT R.title\nFROM Recipe R\nJOIN Quantity Q ON R.recipe_id = Q.recipe_id\nGROUP BY R.recipe_id\nORDER BY COUNT(DISTINCT Q.ingredient_id) DESC\nLIMIT 1",
    "8888": "SELECT \n    (SELECT Nutrition.sodium\n     FROM Nutrition\n     JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\n     WHERE Recipe.title = 'Lasagne-Spinach Spirals') /\n    (SELECT Nutrition.sodium\n     FROM Nutrition\n     JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\n     WHERE Recipe.title = 'Beef and Spinach Pita Pockets') AS sodium_ratio",
    "8889": "SELECT AVG(Nutrition.calories) AS avg_calories\nFROM Nutrition\nJOIN Quantity ON Nutrition.recipe_id = Quantity.recipe_id\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nWHERE Ingredient.name = 'coarsely ground black pepper'",
    "8890": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE Nutrition.iron > 20",
    "8891": "SELECT COUNT(DISTINCT Quantity.ingredient_id) AS ingredient_count\nFROM Quantity\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Apricot Yogurt Parfaits'",
    "8892": "SELECT Ingredient.name\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nWHERE Quantity.preparation = 'cook in beef broth'",
    "8893": "SELECT COUNT(DISTINCT Quantity.ingredient_id) AS ingredient_count\nFROM Quantity\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE Nutrition.vitamin_a = (SELECT MAX(vitamin_a) FROM Nutrition);",
    "8894": "SELECT R.title\nFROM Recipe R\nJOIN Nutrition N ON R.recipe_id = N.recipe_id\nORDER BY N.vitamin_c DESC\nLIMIT 5",
    "8895": "SELECT ingredient_id, COUNT(ingredient_id) AS appearance_count\nFROM Quantity\nGROUP BY ingredient_id\nORDER BY appearance_count ASC, ingredient_id ASC\nLIMIT 1",
    "8896": "SELECT COUNT(*) AS baking_product_count\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Ingredient.category = 'baking product' AND Recipe.title = 'No-Bake Chocolate Cheesecake';",
    "8897": "SELECT Ingredient.ingredient_id, Ingredient.category, Ingredient.name, Ingredient.plural\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Strawberry Sorbet'",
    "8898": "SELECT Ingredient.name\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Warm Chinese Chicken Salad' AND Quantity.optional = 'TRUE'",
    "8899": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE Nutrition.alcohol > 10\nORDER BY Recipe.prep_min DESC\nLIMIT 1",
    "8900": "SELECT r.servings\nFROM Recipe r\nJOIN Nutrition n ON r.recipe_id = n.recipe_id\nORDER BY (n.total_fat - n.sat_fat) DESC\nLIMIT 1",
    "8901": "SELECT r.recipe_id, r.title, n.calories\nFROM Recipe r\nJOIN Nutrition n ON r.recipe_id = n.recipe_id\nWHERE r.source = 'National Potato Board'\nORDER BY n.calories DESC\nLIMIT 1",
    "8902": "SELECT \n    q.recipe_id, \n    r.title, \n    (r.prep_min + r.cook_min + r.stnd_min) AS total_cooking_time\nFROM \n    Quantity q\nJOIN \n    Recipe r ON q.recipe_id = r.recipe_id\nGROUP BY \n    q.recipe_id\nORDER BY \n    COUNT(q.ingredient_id) DESC\nLIMIT 1;",
    "8903": "WITH IngredientCounts AS (\n    SELECT ingredient_id, COUNT(*) AS count\n    FROM Quantity\n    GROUP BY ingredient_id\n),\nMaxCount AS (\n    SELECT MAX(count) AS max_count\n    FROM IngredientCounts\n),\nTotalIngredients AS (\n    SELECT COUNT(*) AS total\n    FROM Quantity\n)\nSELECT I.ingredient_id, I.name, (CAST(MC.max_count AS REAL) / T.total) * 100 AS percentage\nFROM Ingredient I, IngredientCounts IC, MaxCount MC, TotalIngredients T\nWHERE I.ingredient_id = IC.ingredient_id AND IC.count = MC.max_count;",
    "8904": "SELECT \n    Recipe.title, \n    (Recipe.prep_min + Recipe.cook_min + Recipe.stnd_min) AS total_time\nFROM \n    Recipe\nJOIN \n    Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nORDER BY \n    Nutrition.total_fat DESC\nLIMIT 1;",
    "8905": "SELECT Recipe.recipe_id, Recipe.title\nFROM Recipe\nJOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nWHERE Ingredient.name = 'almond extract'",
    "8906": "SELECT Ingredient.ingredient_id, Ingredient.category, Ingredient.name, Ingredient.plural\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Tomato-Cucumber Relish'",
    "8907": "SELECT COUNT(*) AS ingredient_count\nFROM Quantity\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Idaho Potato Supreme'",
    "8908": "SELECT \n    Ingredient.ingredient_id,\n    Ingredient.category,\n    Ingredient.name,\n    Ingredient.plural\nFROM \n    Ingredient\nJOIN \n    Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN \n    Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE \n    Recipe.recipe_id = (\n        SELECT \n            Nutrition.recipe_id \n        FROM \n            Nutrition \n        ORDER BY \n            Nutrition.carbo DESC \n        LIMIT 1\n    )",
    "8909": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE Nutrition.iron > 20",
    "8910": "SELECT Ingredient.ingredient_id, Ingredient.category, Ingredient.name, Ingredient.plural\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.recipe_id = (\n    SELECT Nutrition.recipe_id\n    FROM Nutrition\n    ORDER BY Nutrition.vitamin_a DESC\n    LIMIT 1\n)",
    "8911": "SELECT Ingredient.name, Quantity.max_qty, Quantity.unit\nFROM Quantity\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.servings = 7",
    "8912": "SELECT \n    (COUNT(CASE WHEN n.sodium BETWEEN 0 AND 5 THEN 1 END) * 1.0 / COUNT(r.recipe_id)) * 100 AS percentage_sodium_free\nFROM \n    Recipe r\nJOIN \n    Nutrition n ON r.recipe_id = n.recipe_id\nWHERE \n    r.source = 'The California Tree Fruit Agreement'",
    "8913": "SELECT Ingredient.ingredient_id, Ingredient.category, Ingredient.name, Ingredient.plural\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nWHERE Quantity.unit = 'slice' OR Quantity.unit = 'slices'",
    "8914": "SELECT COUNT(DISTINCT q.recipe_id) AS recipes_with_canned_dairy\nFROM Quantity q\nJOIN Ingredient i ON q.ingredient_id = i.ingredient_id\nWHERE i.category = 'canned dairy';",
    "8915": "SELECT \n    Recipe.title, \n    (Recipe.prep_min + Recipe.cook_min + Recipe.stnd_min) AS total_time\nFROM \n    Recipe\nJOIN \n    Quantity ON Recipe.recipe_id = Quantity.recipe_id\nJOIN \n    Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nGROUP BY \n    Recipe.recipe_id\nHAVING \n    COUNT(DISTINCT Ingredient.ingredient_id) = 1\n    AND MAX(Ingredient.name = 'lima beans') = 1",
    "8916": "SELECT \n    (COUNT(DISTINCT CASE WHEN r.servings >= 10 THEN r.recipe_id END) * 1.0 / COUNT(DISTINCT r.recipe_id)) * 100 AS percent_recipes_with_sea_bass_for_10_or_more\nFROM \n    Recipe r\nJOIN \n    Quantity q ON r.recipe_id = q.recipe_id\nJOIN \n    Ingredient i ON q.ingredient_id = i.ingredient_id\nWHERE \n    i.name = 'sea bass'",
    "8917": "SELECT total_fat\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Raspberry Chiffon Pie'",
    "8918": "SELECT pcnt_cal_prot\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Raspberry Chiffon Pie'",
    "8919": "SELECT COUNT(ingredient_id) AS ingredient_count\nFROM Quantity\nWHERE recipe_id = (SELECT recipe_id FROM Recipe WHERE title = 'Raspberry Chiffon Pie')",
    "8920": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE Nutrition.alcohol = 0",
    "8921": "SELECT AVG(vitamin_c) AS average_vitamin_c\nFROM Nutrition\nJOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id\nWHERE Recipe.title LIKE '%cake%'",
    "8922": "SELECT COUNT(DISTINCT Recipe.recipe_id) AS dairy_recipes_serving_more_than_10\nFROM Recipe\nJOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id\nJOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id\nWHERE Ingredient.category = 'dairy' AND Recipe.servings > 10",
    "8923": "SELECT Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nWHERE Nutrition.iron > 20",
    "8924": "SELECT Recipe.recipe_id, Recipe.title\nFROM Recipe\nJOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id\nORDER BY Nutrition.calories DESC\nLIMIT 1",
    "8925": "SELECT COUNT(DISTINCT r.recipe_id)\nFROM Recipe r\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Quantity q\n    JOIN Ingredient i ON q.ingredient_id = i.ingredient_id\n    WHERE i.category LIKE '%dairy%'\n    AND q.recipe_id = r.recipe_id\n);",
    "8926": "SELECT Ingredient.ingredient_id, Ingredient.category, Ingredient.name, Ingredient.plural\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.title = 'Apricot Yogurt Parfaits'",
    "8927": "SELECT DISTINCT Recipe.recipe_id, Recipe.title\nFROM Recipe\nJOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id\nWHERE Quantity.max_qty <> Quantity.min_qty",
    "8928": "SELECT Ingredient.ingredient_id, Ingredient.category, Ingredient.name, Ingredient.plural\nFROM Ingredient\nJOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id\nJOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id\nWHERE Recipe.cook_min = (SELECT MAX(cook_min) FROM Recipe)",
    "8929": "SELECT \n    (COUNT(DISTINCT CASE WHEN cholestrl = 0 AND cook_min < 20 THEN Recipe.recipe_id END) * 1.0 / COUNT(DISTINCT Recipe.recipe_id)) * 100 AS percentage\nFROM \n    Recipe\nJOIN \n    Nutrition ON Recipe.recipe_id = Nutrition.recipe_id",
    "8930": "SELECT \n    (COUNT(DISTINCT CASE WHEN n.calories > 200 THEN r.recipe_id END) * 1.0 / COUNT(DISTINCT r.recipe_id)) * 100 AS percentage\nFROM \n    Recipe r\nJOIN \n    Quantity q ON r.recipe_id = q.recipe_id\nJOIN \n    Ingredient i ON q.ingredient_id = i.ingredient_id\nJOIN \n    Nutrition n ON r.recipe_id = n.recipe_id\nWHERE \n    i.category = 'cheese'",
    "8931": "SELECT firstname || ' ' || lastname AS fullname\nFROM employee\nORDER BY CAST(salary AS INTEGER) DESC\nLIMIT 1",
    "8932": "SELECT COUNT(*) AS GoodPerformanceEmployees\nFROM employee\nWHERE performance = 'Good'",
    "8933": "SELECT ssn\nFROM employee\nWHERE gender = 'M' AND salary > '70000'",
    "8934": "SELECT educationrequired\nFROM position\nWHERE positiontitle = 'Regional Manager'",
    "8935": "SELECT positiontitle\nFROM position\nWHERE positiontitle IN ('Account Representative', 'Trainee')\nORDER BY CAST(minsalary AS INTEGER)\nLIMIT 1",
    "8936": "SELECT locationcity\nFROM location\nJOIN employee ON location.locationID = employee.locationID\nWHERE firstname = 'Sandy' AND lastname = 'Adams'",
    "8937": "SELECT COUNT(*) \nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE l.state = 'NY' AND e.performance = 'Good'",
    "8938": "SELECT officephone\nFROM location\nJOIN employee ON location.locationID = employee.locationID\nWHERE firstname = 'Sandy' AND lastname = 'Adams'",
    "8939": "SELECT COUNT(*) AS male_employees\nFROM employee\nJOIN location ON employee.locationID = location.locationID\nWHERE location.address = '450 Peachtree Rd' AND employee.gender = 'M'",
    "8940": "SELECT COUNT(*) AS AccountRepresentativeCount\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE p.positiontitle = 'Account Representative'",
    "8941": "SELECT e.salary - p.minsalary AS salary_difference\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.firstname = 'James' AND e.lastname = 'Johnson'",
    "8942": "SELECT COUNT(*) AS NumberOfTraineesInNY\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nJOIN location l ON e.locationID = l.locationID\nWHERE p.positiontitle = 'Trainees' AND l.state = 'NY';",
    "8943": "SELECT e.firstname || ' ' || e.lastname AS fullname\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE p.positiontitle = 'Trainee'",
    "8944": "SELECT \n    e.firstname || ' ' || e.lastname AS fullname,\n    p.educationrequired\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.firstname || ' ' || e.lastname IN ('Jose Rodriguez', 'Sandy Adams')\nORDER BY p.educationrequired DESC\nLIMIT 1",
    "8945": "SELECT DISTINCT l.zipcode\nFROM location l\nJOIN employee e ON l.locationID = e.locationID\nWHERE e.gender = 'M' AND e.performance = 'Good'\nAND NOT EXISTS (\n    SELECT 1\n    FROM employee e2\n    WHERE e2.gender = 'M' AND e2.performance != 'Good' AND e2.locationID = e.locationID\n)",
    "8946": "SELECT employee.ssn\nFROM employee\nJOIN location ON employee.locationID = location.locationID\nWHERE location.state = 'CA'",
    "8947": "SELECT COUNT(*) \nFROM employee \nJOIN position ON employee.positionID = position.positionID \nWHERE position.positiontitle = 'Trainee' AND CAST(employee.salary AS INTEGER) > 20000",
    "8948": "SELECT AVG(CAST(salary AS INTEGER)) AS average_salary\nFROM employee\nJOIN position ON employee.positionID = position.positionID\nWHERE position.positiontitle = 'Trainee';",
    "8949": "SELECT \n    (AVG(CAST(employee.salary AS INTEGER)) - CAST(position.minsalary AS INTEGER)) / CAST(position.minsalary AS INTEGER) * 100 AS percentage_difference\nFROM \n    employee\nJOIN \n    position ON employee.positionID = position.positionID\nWHERE \n    position.positiontitle = 'Trainee'",
    "8950": "SELECT COUNT(*) AS NumberOfFemaleEmployees\nFROM employee\nWHERE gender = 'F'",
    "8951": "SELECT location.locationcity\nFROM employee\nJOIN location ON employee.locationID = location.locationID\nWHERE employee.firstname = 'Jose' AND employee.lastname = 'Rodriguez'",
    "8952": "SELECT state \nFROM location \nJOIN employee ON location.locationID = employee.locationID \nWHERE firstname = 'Emily' AND lastname = 'Wood'",
    "8953": "SELECT p.educationrequired\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.firstname = 'David' AND e.lastname = 'Whitehead'",
    "8954": "SELECT COUNT(*) AS NumberOfEmployeesInMiami\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE l.locationcity = 'Miami'",
    "8955": "SELECT e.firstname || ' ' || e.lastname AS fullname\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE l.locationcity = 'Boston'\nORDER BY CAST(e.salary AS INTEGER) DESC\nLIMIT 1",
    "8956": "SELECT e.ssn\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE l.locationcity = 'New York City' AND e.performance = 'Good'",
    "8957": "SELECT COUNT(*) AS NumberOfAccountRepresentatives\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nJOIN location l ON e.locationID = l.locationID\nWHERE p.positiontitle = 'account representatives'\nAND l.locationcity = 'Chicago'\nAND e.performance = 'Good'",
    "8958": "SELECT position.positiontitle\nFROM employee\nJOIN position ON employee.positionID = position.positionID\nWHERE employee.firstname = 'Kenneth' AND employee.lastname = 'Charles'",
    "8959": "SELECT l.address, l.state, l.zipcode\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nJOIN location l ON e.locationID = l.locationID\nWHERE p.positiontitle = 'manager'\nORDER BY CAST(e.salary AS INTEGER) DESC\nLIMIT 1",
    "8960": "SELECT p.maxsalary\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.firstname = 'Tracy' AND e.lastname = 'Coulter'",
    "8961": "SELECT ((CAST(maxsalary AS REAL) - CAST(salary AS REAL)) / CAST(salary AS REAL)) * 100 AS salary_raise_percentage\nFROM employee\nJOIN position ON employee.positionID = position.positionID\nWHERE firstname = 'Jose' AND lastname = 'Rodriguez'",
    "8962": "SELECT COUNT(*) \nFROM employee \nWHERE performance = 'Poor' AND salary > '50000'",
    "8963": "SELECT firstname || ' ' || lastname AS fullname\nFROM employee\nORDER BY CAST(salary AS INTEGER) DESC\nLIMIT 1",
    "8964": "SELECT COUNT(*) FROM position WHERE CAST(maxsalary AS INTEGER) <= 1000000;",
    "8965": "SELECT salary\nFROM employee\nORDER BY hiredate\nLIMIT 1",
    "8966": "SELECT MIN(minsalary) AS minimum_salary\nFROM position\nWHERE educationrequired = (\n    SELECT educationrequired\n    FROM position\n    ORDER BY LENGTH(educationrequired) DESC, educationrequired DESC\n    LIMIT 1\n)",
    "8967": "SELECT address || ', ' || locationcity || ', ' || state || ' ' || zipcode AS full_office_location_address\nFROM location\nWHERE locationID = (\n    SELECT locationID\n    FROM employee\n    GROUP BY locationID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
    "8968": "SELECT AVG(CAST(salary AS INTEGER)) AS average_salary\nFROM employee\nJOIN position ON employee.positionID = position.positionID\nWHERE position.educationrequired = '2 year degree'",
    "8969": "SELECT COUNT(*) AS Male_Regional_Managers\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.gender = 'M' AND p.positiontitle = 'Regional Managers'",
    "8970": "SELECT position.positiontitle, COUNT(employee.ssn) AS PoorPerformingEmployees\nFROM employee\nJOIN position ON employee.positionID = position.positionID\nWHERE employee.performance = 'Poor'\nGROUP BY position.positiontitle\nORDER BY PoorPerformingEmployees DESC\nLIMIT 1;",
    "8971": "SELECT p.positiontitle\nFROM position p\nJOIN employee e ON p.positionID = e.positionID\nWHERE e.gender = 'F' AND p.educationrequired = '2 year degree'\nGROUP BY p.positionID\nORDER BY COUNT(e.ssn) DESC\nLIMIT 1",
    "8972": "SELECT COUNT(*) AS NumberOfAccountRepresentatives\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nJOIN location l ON e.locationID = l.locationID\nWHERE p.positiontitle = 'Account Representatives'\nAND l.state = 'Illinois'\nAND e.performance = 'Good'",
    "8973": "SELECT AVG(CAST(e.salary AS INTEGER)) AS average_salary\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.performance = 'Poor' AND p.positiontitle = 'manager'",
    "8974": "SELECT state, COUNT(*) AS num_good_performing\nFROM employee\nJOIN position ON employee.positionID = position.positionID\nJOIN location ON employee.locationID = location.locationID\nWHERE performance = 'Good' AND positiontitle = 'Account Representatives'\nGROUP BY state\nORDER BY num_good_performing DESC\nLIMIT 1",
    "8975": "SELECT \n    e.firstname || ' ' || e.lastname AS fullname, \n    e.performance \nFROM \n    employee e \nWHERE \n    e.salary = (SELECT MIN(salary) FROM employee)",
    "8976": "SELECT locationcity\nFROM location\nWHERE state IN ('CO', 'UT', 'CA')",
    "8977": "SELECT locationcity, address FROM location WHERE zipcode > 90000;",
    "8978": "SELECT positiontitle\nFROM position\nWHERE educationrequired = '4 year degree'",
    "8979": "SELECT maxsalary FROM position WHERE positiontitle = 'Trainer';",
    "8980": "SELECT e.firstname || ' ' || e.lastname AS fullname, e.ssn\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE p.positiontitle = 'account representative' AND e.performance = 'Average'",
    "8981": "SELECT e.hiredate, p.positiontitle, e.salary\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.firstname = 'Emily' AND e.lastname = 'Wood'",
    "8982": "SELECT p.minsalary, p.maxsalary, p.positiontitle\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.firstname = 'Bill' AND e.lastname = 'Marlin'",
    "8983": "SELECT e.firstname || ' ' || e.lastname AS fullname, e.gender, p.positiontitle\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nJOIN position p ON e.positionID = p.positionID\nWHERE l.locationcity = 'New York City'",
    "8984": "SELECT e.firstname || ' ' || e.lastname AS full_name, e.hiredate, e.performance\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE l.state = 'UT'",
    "8985": "SELECT e.firstname || ' ' || e.lastname AS fullname, l.locationcity, l.address, l.zipcode\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nJOIN location l ON e.locationID = l.locationID\nWHERE e.performance = 'Poor' AND p.positiontitle = 'managers'",
    "8986": "SELECT p.educationrequired, e.firstname || ' ' || e.lastname AS fullname, e.salary\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE p.positiontitle = 'account representative'\nAND e.performance = 'Poor'",
    "8987": "SELECT e.firstname || ' ' || e.lastname AS fullname, e.performance, l.locationcity\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE e.ssn = '767-74-7373'",
    "8988": "SELECT e.firstname || ' ' || e.lastname AS full_name, \n       p.positiontitle AS positions, \n       l.locationcity AS located_city, \n       l.officephone AS office_phone_number\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nJOIN location l ON e.locationID = l.locationID\nWHERE l.state = 'CO'",
    "8989": "SELECT \n    e.firstname || ' ' || e.lastname AS name, \n    p.positiontitle, \n    l.locationcity, \n    CAST(MAX(e.salary) AS REAL) / 12 AS monthly_average_salary\nFROM \n    employee e\nJOIN \n    position p ON e.positionID = p.positionID\nJOIN \n    location l ON e.locationID = l.locationID\nGROUP BY \n    e.ssn\nORDER BY \n    e.salary DESC\nLIMIT 1",
    "8990": "SELECT id, duration, start_station_name, end_station_name\nFROM trip\nORDER BY duration DESC\nLIMIT 1;",
    "8991": "SELECT \n    (CAST(SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage\nFROM \n    trip;",
    "8992": "SELECT s.city, t.end_station_name\nFROM trip t\nJOIN station s ON t.end_station_id = s.id\nWHERE t.bike_id = 13\nORDER BY datetime(t.end_date) DESC\nLIMIT 1;",
    "8993": "SELECT trip.id, trip.end_station_name, station.city\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nWHERE DATE(trip.start_date) != DATE(trip.end_date)",
    "8994": "SELECT station.name, station.lat, station.long\nFROM station\nJOIN status ON station.id = status.station_id\nWHERE status.bikes_available = 0 AND status.time = '2013/11/03 02:01:01'",
    "8995": "SELECT station.name, station.city\nFROM station\nJOIN trip ON station.id = trip.start_station_id\nGROUP BY station.id\nORDER BY COUNT(trip.id) DESC\nLIMIT 1;",
    "8996": "SELECT w.max_temperature_f\nFROM weather w\nJOIN trip t ON w.date = t.start_date\nWHERE t.id = 4080",
    "8997": "SELECT s.name, st.time\nFROM status st\nJOIN station s ON st.station_id = s.id\nWHERE s.name = 'San Jose Diridon Caltrain Station'\nORDER BY st.bikes_available DESC\nLIMIT 1",
    "8998": "SELECT trip.id, trip.duration\nFROM trip\nJOIN weather ON strftime('%Y-%m-%d', trip.start_date) = weather.date\nWHERE weather.events = 'Rain'",
    "8999": "SELECT start_date\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nWHERE station.lat = 37.331415 AND station.long = -121.8932",
    "9000": "SELECT COUNT(*) AS bikes_borrowed\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.city = 'Redwood City' AND trip.start_date LIKE '8-%-2013%'",
    "9001": "SELECT \n    t.start_station_name, \n    t.end_station_name, \n    w.mean_temperature_f\nFROM \n    trip t\nJOIN \n    weather w ON strftime('%Y-%m-%d', t.start_date) = w.date\nWHERE \n    t.duration < 300",
    "9002": "SELECT \n    T.start_date, \n    AVG(W.min_temperature_f) AS avg_coldest_temperature\nFROM \n    (SELECT \n        start_date, \n        COUNT(id) AS total_trips \n     FROM \n        trip \n     GROUP BY \n        start_date \n     ORDER BY \n        total_trips DESC \n     LIMIT 1) AS T\nJOIN \n    weather W \nON \n    strftime('%Y-%m-%d', T.start_date) = W.date\nGROUP BY \n    T.start_date",
    "9003": "SELECT \n    AVG(bike_usage) AS avg_bike_usage,\n    AVG(wind_dir_degrees) AS avg_wind_direction\nFROM \n    (SELECT \n        SUM(duration) / COUNT(DISTINCT bike_id) AS bike_usage\n     FROM \n        trip\n     WHERE \n        start_date BETWEEN '2013-07-01' AND '2013-09-30'),\n    (SELECT \n        SUM(wind_dir_degrees) / COUNT(date) AS wind_dir_degrees\n     FROM \n        weather\n     WHERE \n        date BETWEEN '2013-07-01' AND '2013-09-30')",
    "9004": "SELECT COUNT(id) AS station_count, GROUP_CONCAT(name, '; ') AS station_names\nFROM station\nWHERE city = 'San Jose' AND installation_date BETWEEN '1/1/2014' AND '12/31/2014'",
    "9005": "SELECT MAX(duration) AS longest_duration\nFROM trip\nWHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'",
    "9006": "SELECT duration / 60 AS duration_minutes\nFROM trip\nWHERE bike_id = 426\nAND start_station_name = 'Market at 4th'\nAND end_station_name = '2nd at South Park'\nAND start_date LIKE '8/29/2013%'\nAND end_date LIKE '8/29/2013%'",
    "9007": "SELECT bike_id\nFROM trip\nWHERE start_date = '8/29/2013'\nAND end_date = '8/29/2013'\nAND start_station_name = 'University and Emerson'\nAND end_station_name = 'California Ave Caltrain Station'\nORDER BY duration DESC\nLIMIT 1",
    "9008": "SELECT COUNT(*) FROM station WHERE city = 'San Francico' AND dock_count > 20;",
    "9009": "SELECT date \nFROM weather \nWHERE max_temperature_f = (SELECT MAX(max_temperature_f) FROM weather)",
    "9010": "SELECT max_dew_point_f \nFROM weather \nWHERE date = '7/15/2014' AND zip_code = '94301';",
    "9011": "SELECT strftime('%Y', date) AS year, COUNT(*) AS rain_days\nFROM weather\nWHERE events = 'Rain'\nGROUP BY year\nORDER BY rain_days DESC\nLIMIT 1;",
    "9012": "SELECT MIN(t.duration) AS fastest_duration, t.bike_id\nFROM trip t\nJOIN station s ON t.start_station_id = s.id\nWHERE s.lat = 37.789625 AND s.long = -122.400811 AND t.start_date LIKE '10/20/2014%'",
    "9013": "SELECT t.end_station_name, s.dock_count\nFROM trip t\nJOIN station s ON t.start_station_id = s.id\nWHERE t.start_station_name = 'South Van Ness at Market'\nAND t.start_date = '12/1/2013'\nAND t.subscription_type = 'subscriber'\nORDER BY t.duration ASC\nLIMIT 1",
    "9014": "SELECT MAX(w.max_humidity)\nFROM weather w\nJOIN trip t ON w.date = t.start_date\nWHERE t.start_station_name = 'Powell Street BART' \nAND t.bike_id = 496 \nAND t.start_date = '8/29/2013'",
    "9015": "SELECT w.date, COUNT(t.id) AS total_bikes_borrowed\nFROM weather w\nJOIN trip t ON w.date = t.start_date\nWHERE w.events = 'Fog'\nAND w.zip_code = '94301'\nAND t.subscription_type = 'Subscriber'\nAND t.start_date BETWEEN '11/1/2014' AND '11/30/2014'\nGROUP BY w.date",
    "9016": "SELECT \n    station.name, \n    station.installation_date\nFROM \n    station\nJOIN \n    trip ON station.id = trip.start_station_id\nWHERE \n    trip.subscription_type = 'Customer'\nGROUP BY \n    station.name\nORDER BY \n    COUNT(trip.id) ASC\nLIMIT 1;",
    "9017": "SELECT station.name\nFROM station\nJOIN status ON station.id = status.station_id\nWHERE status.bikes_available = 0\nAND strftime('%m/%d/%Y', status.time) = '11/3/2013'\nGROUP BY station.name",
    "9018": "SELECT AVG(duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.city = 'Palo Alto';",
    "9019": "SELECT \n    t.start_station_name, \n    t.end_station_name, \n    s1.city AS start_city, \n    s2.city AS end_city, \n    MAX(t.duration) AS longest_duration\nFROM \n    trip t\nJOIN \n    station s1 ON t.start_station_id = s1.id\nJOIN \n    station s2 ON t.end_station_id = s2.id\nGROUP BY \n    t.start_station_name, t.end_station_name\nORDER BY \n    longest_duration DESC\nLIMIT 1;",
    "9020": "SELECT name, installation_date, city\nFROM station\nWHERE installation_date BETWEEN '8/5/2013' AND '12/31/2013'\nORDER BY installation_date ASC;",
    "9021": "SELECT AVG(duration) AS average_duration\nFROM trip\nWHERE start_station_name = 'Adobe on Almaden' AND end_station_name = 'Ryland Park';",
    "9022": "SELECT s.name, s.lat, s.long, st.time\nFROM status st\nJOIN station s ON st.station_id = s.id\nWHERE st.bikes_available = 0",
    "9023": "SELECT \n    trip.id AS trip_id, \n    station.lat AS latitude, \n    station.long AS longitude\nFROM \n    trip\nJOIN \n    station ON trip.start_station_id = station.id\nWHERE \n    trip.start_station_name = trip.end_station_name;",
    "9024": "SELECT \n    (SELECT dock_count FROM station WHERE name = 'San Jose Diridon Caltrain Station') - \n    (SELECT bikes_available FROM status WHERE station_id = \n        (SELECT id FROM station WHERE name = 'San Jose Diridon Caltrain Station') \n     AND time = '2013/08/29 18:14:01') AS bikes_borrowed",
    "9025": "SELECT trip.id\nFROM trip\nJOIN weather ON DATE(trip.start_date) = weather.date\nWHERE trip.bike_id = 10\nAND trip.subscription_type = 'Subscriber'\nAND weather.mean_temperature_f >= 62",
    "9026": "SELECT w.max_gust_speed_mph, w.cloud_cover\nFROM trip t\nJOIN weather w ON w.date = substr(t.start_date, 1, 10)\nWHERE t.bike_id = 10\nAND t.duration = 386\nAND t.start_station_name = 'MLK Library'\nAND t.end_station_name = 'San Salvador at 1st'\nAND t.subscription_type = 'Customer'",
    "9027": "SELECT COUNT(*) AS subscriber_count\nFROM trip t\nJOIN weather w ON t.start_date LIKE w.date || '%'\nWHERE t.subscription_type = 'Subscriber'\nAND t.duration < 490\nAND t.start_station_name = '2nd at Folsom'\nAND t.end_station_name = 'Civic Center BART (7th at Market)'\nAND w.min_visibility_miles >= 4",
    "9028": "SELECT\n    s.docks_available\nFROM\n    status s\nJOIN\n    (SELECT\n        start_station_id,\n        start_date\n     FROM\n        trip\n     WHERE\n        id = 912900) AS t\nON\n    s.station_id = t.start_station_id\nWHERE\n    s.time <= t.start_date\nORDER BY\n    s.time DESC\nLIMIT 1;",
    "9029": "SELECT trip.id\nFROM trip\nJOIN weather ON strftime('%Y-%m-%d', trip.end_date) = weather.date\nWHERE weather.min_temperature_f < 45;",
    "9030": "SELECT \n    MIN(t.duration) AS shortest_duration,\n    (SELECT AVG(duration) FROM trip WHERE subscription_type = 'Subscriber' AND start_station_name = '2nd at Folsom' AND end_station_name = '5th at Howard' AND start_date BETWEEN '1/1/2014 0:00' AND '12/31/2014 11:59') - MIN(t.duration) AS difference_from_average,\n    w.min_temperature_f,\n    w.max_gust_speed_mph,\n    w.events\nFROM \n    trip t\nJOIN \n    weather w ON SUBSTR(t.start_date, 1, LENGTH(t.start_date) - 6) = w.date\nWHERE \n    t.subscription_type = 'Subscriber' \n    AND t.start_station_name = '2nd at Folsom' \n    AND t.end_station_name = '5th at Howard' \n    AND t.start_date BETWEEN '1/1/2014 0:00' AND '12/31/2014 11:59'\nGROUP BY \n    w.date, w.min_temperature_f, w.max_gust_speed_mph, w.events\nORDER BY \n    shortest_duration ASC\nLIMIT 1;",
    "9031": "SELECT AVG(duration) AS average_ride_time\nFROM trip\nWHERE start_station_name = 'Steuart at Market'\nAND end_station_name = 'Embarcadero at Sansome'\nAND start_date >= '7/1/2014 0:00'\nAND end_date <= '7/31/2014 12:59'",
    "9032": "SELECT \n    AVG(max_temperature_f) AS average_maximum_temperature, \n    AVG(min_temperature_f) AS average_minimum_temperature\nFROM \n    weather\nWHERE \n    date BETWEEN '2015-05-01' AND '2015-05-31'\n    AND mean_humidity BETWEEN 65 AND 75;",
    "9033": "SELECT\n    SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) -\n    SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) AS difference\nFROM\n    trip\nWHERE\n    start_date BETWEEN '2013-06-01 00:00' AND '2013-06-30 23:59';",
    "9034": "SELECT DISTINCT trip.bike_id\nFROM trip\nJOIN weather ON strftime('%Y-%m-%d', trip.start_date) = weather.date\nWHERE strftime('%Y', trip.start_date) = '2013'\nAND weather.events = 'Fog-Rain'",
    "9035": "SELECT \n    t.duration, \n    w.mean_visibility_miles, \n    w.mean_wind_speed_mph, \n    w.events AS weather_event, \n    ss.lat AS start_station_lat, \n    ss.long AS start_station_long, \n    ss.name AS start_station_name, \n    es.lat AS end_station_lat, \n    es.long AS end_station_long, \n    es.name AS end_station_name\nFROM \n    trip t\nJOIN \n    weather w ON w.date = t.start_date\nJOIN \n    station ss ON t.start_station_id = ss.id\nJOIN \n    station es ON t.end_station_id = es.id\nWHERE \n    w.events = 'fog'\nORDER BY \n    t.duration DESC\nLIMIT 1;",
    "9036": "SELECT w.date\nFROM weather w\nJOIN trip t ON w.date = strftime('%m/%d/%Y', t.start_date)\nWHERE t.start_station_name = 'Market at 10th'\nAND t.end_station_name = 'South Van Ness at Market'\nAND t.start_date BETWEEN '8/1/2013 0:00' AND '8/31/2013 12:59'\nORDER BY w.min_temperature_f ASC\nLIMIT 1;",
    "9037": "SELECT \n    t.start_station_name, \n    t.end_station_name, \n    t.duration \nFROM \n    trip t\nJOIN \n    weather w ON DATE(t.start_date) = w.date\nWHERE \n    w.events = 'rain'\nORDER BY \n    t.duration DESC\nLIMIT 1;",
    "9038": "SELECT AVG(duration) AS average_ride_duration\nFROM trip\nJOIN weather ON trip.start_date = weather.date\nWHERE weather.events = 'rain' AND CAST(weather.precipitation_inches AS REAL) > 0.8;",
    "9039": "SELECT DISTINCT s.name, s.city\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nWHERE t.duration > (SELECT AVG(duration) FROM trip)",
    "9040": "SELECT COUNT(*) AS stations_in_san_francisco_2014\nFROM station\nWHERE city = 'San Francisco' AND installation_date LIKE '%2014';",
    "9041": "SELECT COUNT(*) AS trips_ended_in_mountain_view_2006\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nWHERE trip.start_date LIKE '%2006%'\nAND station.city = 'Mountain View';",
    "9042": "SELECT id \nFROM trip \nWHERE duration = (SELECT MAX(duration) FROM trip WHERE start_station_name LIKE '%Redwood City%');",
    "9043": "SELECT DISTINCT trip.bike_id\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.installation_date LIKE '%2013%'",
    "9044": "SELECT COUNT(*) \nFROM trip \nWHERE subscription_type = 'Subscriber' AND end_station_name IN \n    (SELECT name FROM station WHERE city = 'San Jose');",
    "9045": "SELECT trip.id, trip.duration, trip.start_station_name\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.dock_count = 15\nORDER BY trip.duration ASC\nLIMIT 1;",
    "9046": "SELECT \n    strftime('%Y', start_date) AS year,\n    COUNT(*) AS num_trips\nFROM \n    trip\nJOIN \n    station ON trip.start_station_id = station.id\nWHERE \n    station.city = 'San Francisco'\nGROUP BY \n    year\nORDER BY \n    num_trips DESC\nLIMIT 1;",
    "9047": "SELECT \n    100.0 * SUM(CASE WHEN duration > 800 THEN 1 ELSE 0 END) / COUNT(*) AS percentage\nFROM \n    trip\nJOIN \n    station ON trip.start_station_id = station.id\nWHERE \n    station.city = 'San Jose';",
    "9048": "SELECT COUNT(*) AS long_trips_2013\nFROM trip\nWHERE start_date LIKE '%2013%' AND duration > 1000;",
    "9049": "SELECT AVG(duration) AS average_duration\nFROM trip\nWHERE start_station_name = 'South Van Ness at Market'\nAND start_date LIKE '2015%'",
    "9050": "SELECT COUNT(*) AS same_station_trips\nFROM trip\nWHERE start_station_id = end_station_id;",
    "9051": "SELECT trip.id\nFROM trip\nJOIN weather ON strftime('%Y-%m-%d', trip.start_date) = weather.date\nWHERE weather.max_temperature_f = (SELECT MAX(max_temperature_f) FROM weather)",
    "9052": "SELECT trip.*\nFROM trip\nJOIN weather ON date(trip.end_date) = date(weather.date)\nWHERE trip.start_station_name = 'Mountain View City Hall'\nAND weather.events LIKE '%rain%'",
    "9053": "SELECT AVG(duration) AS average_duration\nFROM trip\nJOIN weather ON trip.end_date = weather.date\nWHERE weather.events = 'fog'",
    "9054": "SELECT MAX(t.duration) AS longest_trip_duration\nFROM trip t\nJOIN weather w ON t.start_date = w.date\nWHERE w.max_wind_speed_mph = 30",
    "9055": "SELECT AVG(mean_temperature_f) AS average_temperature\nFROM weather\nWHERE date IN (\n    SELECT DISTINCT start_date\n    FROM trip\n    WHERE start_station_name = 'Market at 4th'\n    AND start_date LIKE '%2013%'\n)",
    "9056": "SELECT w.mean_humidity\nFROM weather w\nJOIN trip t ON w.date = t.start_date\nWHERE t.id = 4275",
    "9057": "SELECT \n    (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM trip WHERE end_date LIKE '%2015%' AND subscription_type = 'Customer')) * 100 AS percentage_rainy_days\nFROM \n    trip \nJOIN \n    weather ON trip.end_date = weather.date\nWHERE \n    trip.end_date LIKE '%2015%' \n    AND trip.subscription_type = 'Customer' \n    AND weather.events LIKE '%Rain%'",
    "9058": "SELECT COUNT(*) AS stations_count\nFROM station\nWHERE city = 'San Jose' AND strftime('%Y-%m', installation_date) > '2013-08'",
    "9059": "SELECT mean_temperature_f\nFROM weather\nWHERE date = '8/29/2013' AND zip_code = '94107'",
    "9060": "SELECT \n    max_temperature_f - min_temperature_f AS temperature_difference\nFROM \n    weather\nWHERE \n    date = '8/29/2013' AND zip_code = '94107';",
    "9061": "SELECT bikes_available\nFROM status\nJOIN station ON status.station_id = station.id\nWHERE station.name = 'San Jose Diridon Caltrain Station' AND time = '2013/8/29 12:06:01'",
    "9062": "SELECT city \nFROM station \nWHERE id = (\n    SELECT start_station_id \n    FROM trip \n    WHERE id = 4069\n)",
    "9063": "SELECT COUNT(*) AS trip_count\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date\nWHERE trip.start_date LIKE '2013-09%' \nAND weather.max_temperature_f > 70\nAND weather.zip_code = '94107';",
    "9064": "SELECT DISTINCT t.start_station_name\nFROM trip t\nJOIN weather w ON t.start_date LIKE w.date || '%'\nWHERE w.max_humidity > 80\nAND w.date LIKE '%2013%'\nAND w.zip_code = '94107'",
    "9065": "SELECT COUNT(*) AS trips_by_subscriber\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE subscription_type = 'Subscriber'\nAND start_date LIKE '8/%/2013%'\nAND dock_count > 20;",
    "9066": "SELECT s.lat, s.long\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nORDER BY t.duration DESC\nLIMIT 1",
    "9067": "SELECT docks_available\nFROM status\nWHERE station_id = (\n    SELECT end_station_id\n    FROM trip\n    WHERE id = 4069\n)\nAND time = (\n    SELECT end_date\n    FROM trip\n    WHERE id = 4069\n)",
    "9068": "SELECT COUNT(*) AS foggy_trips_from_2nd_at_Townsend\nFROM trip\nWHERE start_station_name = '2nd at Townsend'\nAND start_date IN (\n    SELECT date\n    FROM weather\n    WHERE events = 'fog'\n    AND date LIKE '%2013'\n)",
    "9069": "SELECT MAX(t.duration) AS longest_duration\nFROM trip t\nJOIN weather w ON t.start_date LIKE w.date || '%'\nWHERE w.events LIKE '%fog%'\nAND t.start_date LIKE '2013%'",
    "9070": "SELECT installation_date\nFROM station\nWHERE id = (\n    SELECT start_station_id\n    FROM trip\n    WHERE id = 4069\n)",
    "9071": "SELECT COUNT(*) AS trips_by_subscriber\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.city = 'San Francisco' AND trip.subscription_type = 'Subscriber'",
    "9072": "SELECT COUNT(*) AS trips_from_2nd_at_Folsom\nFROM trip\nWHERE start_station_name = '2nd at Folsom'\nAND start_date LIKE (\n    SELECT date || '%'\n    FROM weather\n    WHERE date LIKE '%2014'\n    ORDER BY max_temperature_f DESC\n    LIMIT 1\n)",
    "9073": "SELECT AVG(duration) AS average_duration\nFROM trip\nWHERE start_date LIKE '%2014%'\nAND DATE(start_date) = (\n    SELECT DATE(date)\n    FROM weather\n    WHERE date LIKE '%2014%'\n    ORDER BY max_temperature_f DESC\n    LIMIT 1\n)",
    "9074": "SELECT DISTINCT end_station_name\nFROM trip\nWHERE start_station_name = '2nd at South Park'",
    "9075": "SELECT COUNT(*) AS rainy_days_in_mountain_view\nFROM weather\nWHERE events = 'rain' AND zip_code = '94041';",
    "9076": "SELECT SUM(dock_count) AS total_bikes_capacity\nFROM station\nWHERE city = 'Redwood City' AND strftime('%Y', installation_date) < '2014'",
    "9077": "SELECT MAX(duration) / 86400.0 AS longest_trip_duration_days FROM trip;",
    "9078": "SELECT \n    date,\n    (max_temperature_f - 32) * 1.800 AS max_temperature_c,\n    (mean_temperature_f - 32) * 1.800 AS mean_temperature_c,\n    (min_temperature_f - 32) * 1.800 AS min_temperature_c\nFROM \n    weather\nWHERE \n    date LIKE '2013-08-%' AND\n    zip_code = '94107'",
    "9079": "SELECT\n    SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) AS subscriber_count,\n    SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) AS customer_count,\n    (SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN subscription_type = 'Customer' THEN 1.0 ELSE 0 END)) AS subscriber_to_customer_ratio\nFROM\n    trip\nWHERE\n    start_station_name = '2nd at South Park'\n    AND end_station_name = '2nd at South Park'",
    "9080": "SELECT DISTINCT city\nFROM station\nWHERE zip_code = '94107'",
    "9081": "SELECT DISTINCT s.name\nFROM station s\nJOIN weather w ON s.zip_code = w.zip_code\nWHERE (w.mean_temperature_f - 32) / 1.8 = 20\nAND w.date LIKE '2014%'",
    "9082": "SELECT COUNT(*) AS trip_count\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.city = 'San Jose' AND trip.start_date LIKE '8/%/2013%'",
    "9083": "SELECT DISTINCT s1.city AS start_city, s2.city AS end_city\nFROM trip t\nJOIN station s1 ON t.start_station_id = s1.id\nJOIN station s2 ON t.end_station_id = s2.id\nWHERE t.start_date LIKE '%2014%'\nAND s1.city != s2.city;",
    "9084": "SELECT \n    SUM(duration)/3600 AS total_travel_duration_hours\nFROM \n    trip\nWHERE \n    bike_id = 16 AND start_station_name != end_station_name;",
    "9085": "SELECT \n    SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) * 1.0 / \n    SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) AS ratio\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE city = 'Mountain View'",
    "9086": "SELECT SUM(duration) / 3600.0 AS total_trip_duration_hours\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE station.city = 'Palo Alto';",
    "9087": "WITH BikeUsage AS (\n    SELECT\n        bike_id,\n        COUNT(id) AS trip_count\n    FROM\n        trip\n    GROUP BY\n        bike_id\n),\nLeastUsedBike AS (\n    SELECT\n        bike_id\n    FROM\n        BikeUsage\n    ORDER BY\n        trip_count ASC\n    LIMIT 1\n),\nTripsSameCity AS (\n    SELECT\n        t.bike_id,\n        t.start_station_id,\n        t.end_station_id,\n        t.duration\n    FROM\n        trip t\n        JOIN station s1 ON t.start_station_id = s1.id\n        JOIN station s2 ON t.end_station_id = s2.id\n    WHERE\n        s1.city = s2.city\n),\nDurationSameCity AS (\n    SELECT\n        bike_id,\n        SUM(duration) / 3600.0 AS total_duration_hours\n    FROM\n        TripsSameCity\n    GROUP BY\n        bike_id\n)\nSELECT\n    l.bike_id,\n    IFNULL(d.total_duration_hours, 0) AS total_duration_hours\nFROM\n    LeastUsedBike l\n    LEFT JOIN DurationSameCity d ON l.bike_id = d.bike_id",
    "9088": "SELECT COUNT(*) AS subscriber_count\nFROM trip\nWHERE subscription_type = 'Subscriber'\nAND start_station_name = 'Market at 4th';",
    "9089": "SELECT name \nFROM station \nWHERE city = 'Mountain View' AND installation_date = '12/31/2013';",
    "9090": "SELECT city, SUM(dock_count) AS total_bikes_can_hold\nFROM station\nWHERE name = 'Townsend at 7th Station'",
    "9091": "SELECT \n    s.dock_count AS bikes_can_hold, \n    COUNT(t.id) AS subscriber_starts\nFROM \n    station s\nLEFT JOIN \n    trip t ON s.id = t.start_station_id AND t.subscription_type = 'Subscriber'\nWHERE \n    s.name = 'Evelyn Park and Ride'",
    "9092": "SELECT COUNT(*) AS subscriber_count, MAX(max_temperature_f) AS hottest_temperature\nFROM trip\nJOIN weather ON trip.zip_code = weather.zip_code\nWHERE trip.subscription_type = 'Subscriber' AND trip.zip_code = 94301;",
    "9093": "SELECT\n    (CAST(SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END)) * 100 AS percentage_ratio\nFROM\n    trip\nJOIN\n    station ON trip.start_station_id = station.id\nWHERE\n    station.city = 'San Francisco'",
    "9094": "SELECT \n    AVG(t.duration) AS average_duration, \n    s.lat, \n    s.long \nFROM \n    trip t \nJOIN \n    station s ON t.start_station_id = s.id \nWHERE \n    t.start_station_name = 'Santa Clara at Almaden'",
    "9095": "SELECT MIN(t.duration) AS shortest_trip_duration, MAX(w.max_wind_Speed_mph) AS maximum_wind_speed\nFROM trip t\nJOIN weather w ON w.date = t.start_date\nWHERE t.start_station_name = 'Franklin at Maple'",
    "9096": "SELECT \n    s.lat, \n    s.long, \n    (s.dock_count - st.bikes_available) AS bikes_borrowed\nFROM \n    station s\nJOIN \n    status st ON s.id = st.station_id\nWHERE \n    s.name = 'San Jose Diridon Caltrain Station'\n    AND st.time = '10/20/2013 8:11:01 AM'",
    "9097": "SELECT station.city, station.installation_date\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nWHERE trip.id = 585842",
    "9098": "SELECT \n    COUNT(DISTINCT s.id) AS stations_installed, \n    (SELECT COUNT(*) \n     FROM trip t \n     WHERE t.subscription_type = 'Customer' \n     AND t.start_station_id IN (SELECT id FROM station WHERE installation_date = '8/16/2013')) AS customer_users\nFROM \n    station s\nWHERE \n    s.installation_date = '8/16/2013';",
    "9099": "SELECT t.end_station_name, s.lat, s.long\nFROM trip t\nJOIN station s ON t.end_station_id = s.id\nWHERE t.start_station_name = 'Market at 4th'\nAND t.start_date LIKE '8/29/2013 12:45:00 PM'",
    "9100": "SELECT COUNT(t.id) AS subscriber_count, s.dock_count\nFROM trip t\nJOIN station s ON t.end_station_id = s.id\nWHERE t.subscription_type = 'Subscriber' AND s.name = 'MLK Library'",
    "9101": "SELECT AVG(w.min_temperature_f) AS average_coldest_temperature, s.name, s.lat, s.long\nFROM weather w\nJOIN station s ON w.zip_code = s.city\nWHERE w.zip_code = '94301'\nGROUP BY s.name, s.lat, s.long",
    "9102": "SELECT \n    AVG(t.duration) AS average_duration, \n    s.installation_date\nFROM \n    trip t\nJOIN \n    station s ON t.start_station_id = s.id AND t.end_station_id = s.id\nWHERE \n    t.subscription_type = 'Subscriber' AND \n    t.start_station_name = 'Mountain View City Hall' AND \n    t.end_station_name = 'Mountain View City Hall'\nGROUP BY \n    s.installation_date",
    "9103": "SELECT description FROM film WHERE title = 'ACADEMY DINOSAUR';",
    "9104": "SELECT COUNT(*) FROM film WHERE rental_duration > 6;",
    "9105": "SELECT title \nFROM film \nWHERE release_year = '2006' AND rental_rate = 2.99;",
    "9106": "SELECT title \nFROM film \nWHERE length = (SELECT MAX(length) FROM film);",
    "9107": "SELECT title, replacement_cost \nFROM film \nWHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') \nORDER BY replacement_cost DESC \nLIMIT 1;",
    "9108": "SELECT COUNT(*) AS Adults_Only_Films_2006\nFROM film\nWHERE release_year = '2006' AND rating = 'NC-17'",
    "9109": "SELECT COUNT(*) AS films_with_deleted_scenes_and_299_rental_rate\nFROM film\nWHERE rental_rate = 2.99\nAND special_features LIKE '%Deleted Scenes%'",
    "9110": "SELECT title\nFROM film\nWHERE (LENGTH(special_features) - LENGTH(REPLACE(special_features, ',', ''))) > 1;",
    "9111": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens';",
    "9112": "SELECT first_name || ' ' || last_name AS full_name\nFROM staff\nWHERE active = 1",
    "9113": "SELECT release_year\nFROM film\nORDER BY replacement_cost DESC\nLIMIT 1;",
    "9114": "SELECT title \nFROM film \nORDER BY replacement_cost DESC \nLIMIT 3",
    "9115": "SELECT language.name AS language\nFROM film\nJOIN language ON film.language_id = language.language_id\nWHERE film.title = 'ACADEMY DINOSAUR'",
    "9116": "SELECT COUNT(*) AS English_Films_Count\nFROM film\nJOIN language ON film.language_id = language.language_id\nWHERE language.name = 'English'",
    "9117": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINNESS';",
    "9118": "SELECT COUNT(actor.actor_id) AS number_of_actors\nFROM actor\nJOIN film_actor ON actor.actor_id = film_actor.actor_id\nJOIN film ON film.film_id = film_actor.film_id\nWHERE film.title = 'ACADEMY DINOSAUR'",
    "9119": "SELECT a.first_name || ' ' || a.last_name AS full_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'ACADEMY DINOSAUR'",
    "9120": "SELECT COUNT(f.film_id) AS films_released_in_2006\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' AND f.release_year = '2006'",
    "9121": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS'\nORDER BY f.replacement_cost DESC\nLIMIT 1;",
    "9122": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film);",
    "9123": "SELECT COUNT(film.film_id) AS English_Films_Starring_Penelope_Guiness\nFROM film\nJOIN film_actor ON film.film_id = film_actor.film_id\nJOIN actor ON film_actor.actor_id = actor.actor_id\nJOIN language ON film.language_id = language.language_id\nWHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS' AND language.name = 'English'",
    "9124": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS'\nORDER BY f.length DESC\nLIMIT 1;",
    "9125": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Horror'",
    "9126": "SELECT COUNT(film.film_id) AS Horror_Film_Count\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'Horror'",
    "9127": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Horror' AND f.rental_rate = 2.99;",
    "9128": "SELECT COUNT(rental.rental_id) AS times_rented\nFROM rental\nJOIN customer ON rental.customer_id = customer.customer_id\nWHERE customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ'",
    "9129": "SELECT DISTINCT f.title\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ';",
    "9130": "SELECT COUNT(DISTINCT f.film_id) AS films_released_in_2006\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ' AND f.release_year = '2006'",
    "9131": "SELECT f.title\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ'\nORDER BY f.replacement_cost DESC\nLIMIT 1;",
    "9132": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film)\nGROUP BY c.customer_id;",
    "9133": "SELECT COUNT(DISTINCT r.rental_id) AS films_returned_in_august_2005\nFROM rental r\nJOIN customer c ON r.customer_id = c.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ'\nAND strftime('%Y', r.return_date) = '2005'\nAND strftime('%m', r.return_date) = '08'",
    "9134": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(r.rental_id) DESC\nLIMIT 1;",
    "9135": "SELECT COUNT(DISTINCT c.customer_id) AS active_customers\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.title = 'ACADEMY DINOSAUR' AND c.active = 1;",
    "9136": "SELECT f.title\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nGROUP BY f.film_id\nORDER BY COUNT(r.rental_id) DESC\nLIMIT 1;",
    "9137": "SELECT \n    c.first_name || ' ' || c.last_name AS full_name, \n    COUNT(r.rental_id) AS total_rentals\nFROM \n    customer c\nJOIN \n    rental r ON c.customer_id = r.customer_id\nWHERE \n    c.first_name || ' ' || c.last_name IN ('RUTH MARTINEZ', 'LINDA WILLIAMS')\nGROUP BY \n    c.customer_id\nORDER BY \n    total_rentals DESC\nLIMIT 1;",
    "9138": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS'\nORDER BY (f.rental_rate / f.rental_duration) DESC\nLIMIT 1",
    "9139": "SELECT AVG(f.replacement_cost) AS avg_replacement_cost\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Horror'",
    "9140": "WITH MusicFilms AS (\n    SELECT f.film_id\n    FROM film f\n    JOIN film_category fc ON f.film_id = fc.film_id\n    JOIN category c ON fc.category_id = c.category_id\n    WHERE c.name = 'Music'\n),\nRuthRentals AS (\n    SELECT r.rental_id, i.film_id\n    FROM rental r\n    JOIN inventory i ON r.inventory_id = i.inventory_id\n    JOIN customer cu ON r.customer_id = cu.customer_id\n    WHERE cu.first_name = 'RUTH' AND cu.last_name = 'MARTINEZ'\n),\nRuthMusicRentals AS (\n    SELECT rr.rental_id\n    FROM RuthRentals rr\n    JOIN MusicFilms mf ON rr.film_id = mf.film_id\n)\nSELECT \n    (CAST(COUNT(DISTINCT rmr.rental_id) AS REAL) / COUNT(DISTINCT rr.rental_id)) * 100 AS percentage_music\nFROM RuthRentals rr\nLEFT JOIN RuthMusicRentals rmr ON rr.rental_id = rmr.rental_id;",
    "9141": "SELECT AVG(f.length) AS average_duration_time\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS'",
    "9142": "SELECT email\nFROM customer\nWHERE first_name = 'Diane' AND last_name = 'Collins';",
    "9143": "SELECT COUNT(*) AS inactive_customers FROM customer WHERE active = 0;",
    "9144": "SELECT first_name, last_name FROM customer WHERE email = \"JEREMY.HURTADO@sakilacustomer.org\";",
    "9145": "SELECT postal_code FROM address WHERE address_id = 65;",
    "9146": "SELECT COUNT(*) AS number_of_addresses\nFROM address\nWHERE district = 'Nordrhein-Westfalen';",
    "9147": "SELECT phone FROM address WHERE address_id = 72;",
    "9148": "SELECT COUNT(*) FROM film WHERE length = 178;",
    "9149": "SELECT special_features FROM film WHERE title = 'Uprising Uptown';",
    "9150": "SELECT description FROM film WHERE title = 'Artist Coldblooded';",
    "9151": "SELECT address, address2, district FROM address WHERE address_id = (SELECT address_id FROM store WHERE store_id = 2);",
    "9152": "SELECT country.country\nFROM country\nJOIN city ON city.country_id = country.country_id\nWHERE city.city = 'Clarksville';",
    "9153": "SELECT COUNT(DISTINCT fa.actor_id) AS number_of_actors\nFROM film_actor fa\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.release_year = '2006'\nAND f.rental_duration = 7\nAND f.rental_rate = 4.99\nAND f.length = 98",
    "9154": "SELECT f.rating\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Dan' AND a.last_name = 'Harris'\nAND f.length = 77 AND f.replacement_cost = 9.99",
    "9155": "SELECT COUNT(film_actor.film_id) AS number_of_films\nFROM actor\nJOIN film_actor ON actor.actor_id = film_actor.actor_id\nWHERE actor.first_name = 'Daryl' AND actor.last_name = 'Wahlberg';",
    "9156": "SELECT return_date \nFROM rental \nJOIN customer ON rental.customer_id = customer.customer_id \nWHERE rental_date = '2005-07-28 12:27:27' \nAND (customer.first_name = 'Sherri' AND customer.last_name = 'Rhodes');",
    "9157": "SELECT first_name, last_name \nFROM staff \nWHERE staff_id = (SELECT manager_staff_id FROM store WHERE store_id = 1);",
    "9158": "SELECT address, address2, district\nFROM address\nWHERE address_id = (\n    SELECT address_id\n    FROM store\n    WHERE store_id = 1\n)",
    "9159": "SELECT address, address2, district\nFROM address\nJOIN staff ON address.address_id = staff.address_id\nWHERE staff.first_name = 'Jon' AND staff.last_name = 'Stephens'",
    "9160": "SELECT COUNT(*) AS addresses_in_woodridge\nFROM address\nJOIN city ON address.city_id = city.city_id\nWHERE city.city = 'Woodridge';",
    "9161": "SELECT COUNT(*) AS English_Films_Count\nFROM film\nJOIN language ON film.language_id = language.language_id\nWHERE language.name = 'English'",
    "9162": "SELECT a.address \nFROM address a \nJOIN customer c ON a.address_id = c.address_id \nJOIN staff s ON a.address_id = s.address_id \nWHERE c.first_name = 'Heather' AND c.last_name = 'Morris'\nUNION\nSELECT a.address \nFROM address a \nJOIN staff s ON a.address_id = s.address_id \nWHERE s.first_name = 'Heather' AND s.last_name = 'Morris';",
    "9163": "SELECT email \nFROM staff \nJOIN address ON staff.address_id = address.address_id \nWHERE address.address = \"1411 Lillydale Drive\"\nUNION\nSELECT email \nFROM customer \nJOIN address ON customer.address_id = address.address_id \nWHERE address.address = \"1411 Lillydale Drive\";",
    "9164": "SELECT amount\nFROM payment\nJOIN rental ON payment.rental_id = rental.rental_id\nWHERE customer_id = 297 AND rental_date = '2005-07-28 12:27:27'",
    "9165": "SELECT c.name AS category\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE f.title = 'Working Microcosmos'",
    "9166": "SELECT COUNT(film.film_id) AS number_of_documentary_films\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'Documentary';",
    "9167": "SELECT \n    c.name \nFROM \n    category c\nJOIN \n    film_category fc ON c.category_id = fc.category_id\nGROUP BY \n    c.category_id\nORDER BY \n    COUNT(fc.film_id) DESC\nLIMIT 1;",
    "9168": "SELECT f.title\nFROM film AS f\nJOIN inventory AS i ON f.film_id = i.film_id\nWHERE i.inventory_id = 3479;",
    "9169": "SELECT \n    ((SUM(CASE WHEN store_id = 2 THEN amount ELSE 0 END) - SUM(CASE WHEN store_id = 1 THEN amount ELSE 0 END)) / SUM(CASE WHEN store_id = 1 THEN amount ELSE 0 END)) * 100 AS percent_more\nFROM payment\nJOIN rental ON payment.rental_id = rental.rental_id\nJOIN inventory ON rental.inventory_id = inventory.inventory_id",
    "9170": "SELECT \n    (SELECT COUNT(*) FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = 'India') \n    /\n    (SELECT COUNT(*) FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = 'Italy') AS times;",
    "9171": "SELECT \n    (SELECT COUNT(fa.film_id) \n     FROM film_actor fa \n     JOIN actor a ON fa.actor_id = a.actor_id \n     WHERE a.first_name = 'Gina' AND a.last_name = 'DeGeneres') \n    /\n    (SELECT COUNT(fa.film_id) \n     FROM film_actor fa \n     JOIN actor a ON fa.actor_id = a.actor_id \n     WHERE a.first_name = 'Penelope' AND a.last_name = 'Guinness') AS times_number",
    "9172": "SELECT COUNT(*) AS restricted_films_released_in_2006\nFROM film\nWHERE rating = 'R' AND release_year = '2006';",
    "9173": "SELECT COUNT(actor_id) AS total_actors\nFROM film_actor\nWHERE film_id = 508;",
    "9174": "SELECT special_features FROM film WHERE title = 'Smoochy Control';",
    "9175": "SELECT COUNT(DISTINCT customer_id) AS customers_paid_over_10\nFROM payment\nWHERE amount > 10 AND strftime('%Y-%m', payment_date) = '2005-08'",
    "9176": "SELECT title FROM film WHERE length > 180;",
    "9177": "SELECT SUM(amount) AS total_rental_payment\nFROM payment\nWHERE rental_id BETWEEN 1 AND 10",
    "9178": "SELECT first_name, last_name FROM staff WHERE active = 1;",
    "9179": "SELECT s.first_name, s.last_name\nFROM staff s\nJOIN store st ON s.staff_id = st.manager_staff_id\nWHERE st.store_id = 2;",
    "9180": "SELECT COUNT(*) AS rentals_returned_on_20230527\nFROM rental\nWHERE return_date = '2005-05-27';",
    "9181": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Laura' AND a.last_name = 'Brody';",
    "9182": "SELECT DISTINCT f.title\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nWHERE i.store_id = 2\nAND NOT EXISTS (\n    SELECT 1\n    FROM inventory i2\n    WHERE i2.film_id = i.film_id AND i2.store_id != 2\n)",
    "9183": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nWHERE julianday(r.return_date) - julianday(r.rental_date) = 7;",
    "9184": "SELECT COUNT(film_id) AS horror_film_count\nFROM film_category\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'Horror';",
    "9185": "SELECT title \nFROM film \nWHERE film_id = (\n    SELECT film_id \n    FROM rental \n    JOIN inventory ON rental.inventory_id = inventory.inventory_id \n    GROUP BY film_id \n    ORDER BY COUNT(rental_id) DESC \n    LIMIT 1\n)",
    "9186": "SELECT special_features, COUNT(*) AS frequency\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'science fiction'\nGROUP BY special_features\nORDER BY frequency DESC\nLIMIT 1;",
    "9187": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nGROUP BY a.actor_id\nORDER BY COUNT(fa.film_id) DESC\nLIMIT 1",
    "9188": "SELECT COUNT(*) AS comedy_count\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE film.rental_duration = 7 AND category.name = 'Comedy'",
    "9189": "SELECT s.manager_staff_id, st.first_name, st.last_name\nFROM store s\nJOIN staff st ON s.manager_staff_id = st.staff_id\nWHERE s.store_id = (\n    SELECT c.store_id\n    FROM customer c\n    WHERE c.active = 0\n    GROUP BY c.store_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
    "9190": "SELECT MAX(rental_rate / rental_duration) AS MaxPricePerDay\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'Children'",
    "9191": "SELECT address || ', ' || COALESCE(address2 || ', ', '') || district AS complete_address\nFROM address\nJOIN store ON address.address_id = store.address_id\nWHERE store.store_id = 1;",
    "9192": "SELECT COUNT(*) AS customers_from_lethbridge\nFROM customer\nJOIN address ON customer.address_id = address.address_id\nJOIN city ON address.city_id = city.city_id\nWHERE city.city = 'Lethbridge';",
    "9193": "SELECT COUNT(city.city_id) AS number_of_cities_in_us\nFROM city\nJOIN country ON city.country_id = country.country_id\nWHERE country.country = 'United States';",
    "9194": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nJOIN country co ON ci.country_id = co.country_id\nWHERE co.country = 'India'",
    "9195": "SELECT COUNT(film.film_id) AS classic_movies_with_low_rental_rate\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'Classics' AND film.rental_rate < 1;",
    "9196": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(r.rental_id) DESC\nLIMIT 1;",
    "9197": "SELECT COUNT(rental.rental_id) AS rented_times\nFROM rental\nJOIN inventory ON rental.inventory_id = inventory.inventory_id\nJOIN film ON inventory.film_id = film.film_id\nWHERE film.title = 'BLANKET BEVERLY'",
    "9198": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.rating = 'R'\nGROUP BY a.actor_id\nORDER BY COUNT(f.film_id) DESC\nLIMIT 1;",
    "9199": "SELECT \n    a.first_name || ' ' || a.last_name AS full_name, \n    COUNT(fa.film_id) AS total_films, \n    COUNT(fa.film_id) / 5.0 AS average_films\nFROM \n    actor a\nJOIN \n    film_actor fa ON a.actor_id = fa.actor_id\nGROUP BY \n    a.actor_id\nORDER BY \n    total_films DESC\nLIMIT 5",
    "9200": "SELECT actor_id FROM actor WHERE last_name = 'KILMER';",
    "9201": "SELECT title \nFROM film \nWHERE replacement_cost = (\n    SELECT MIN(replacement_cost) \n    FROM film \n    WHERE rating = 'G'\n) \nAND rating = 'G'",
    "9202": "SELECT title, description, special_features\nFROM film\nWHERE length = (SELECT MAX(length) FROM film)\nLIMIT 5;",
    "9203": "SELECT COUNT(DISTINCT rental.rental_id) AS number_of_rented_films\nFROM rental\nWHERE rental.rental_date = '2005-05-26'\nAND rental.return_date = '2005-05-30';",
    "9204": "SELECT customer_id, AVG(amount) AS average_payment\nFROM payment\nGROUP BY customer_id",
    "9205": "SELECT s.first_name, s.last_name, s.email\nFROM staff s\nJOIN store st ON s.store_id = st.store_id\nWHERE st.store_id = 2;",
    "9206": "SELECT \n    (CAST(SUM(CASE WHEN active = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(customer_id)) * 100 AS percent_inactive\nFROM \n    customer;",
    "9207": "SELECT title, description FROM film WHERE film_id = 996;",
    "9208": "SELECT \n    customer_id, \n    SUM(amount) AS total_payment_amount\nFROM \n    payment\nWHERE \n    payment_date LIKE '2005-08%'\nGROUP BY \n    customer_id",
    "9209": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Emily' AND a.last_name = 'Dee'",
    "9210": "SELECT a.first_name || ' ' || a.last_name AS full_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'CHOCOLATE DUCK'",
    "9211": "SELECT COUNT(film.film_id) AS horror_pg_13_count\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'Horror' AND film.rating = 'PG-13'",
    "9212": "SELECT c.name AS category_name, f.title AS film_title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE a.first_name = 'Judy' AND a.last_name = 'Dean'\nORDER BY c.name, f.title;",
    "9213": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Documentary'\nLIMIT 5;",
    "9214": "SELECT \n    l.name AS language, \n    (f.rental_rate / f.rental_duration) AS rental_cost_per_day\nFROM \n    film f\nJOIN \n    language l ON f.language_id = l.language_id\nWHERE \n    f.title = 'UNTOUCHABLES SUNRISE'",
    "9215": "SELECT f.title\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nWHERE r.rental_date LIKE '2005-05-24%'",
    "9216": "SELECT f.title\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'Brian' AND c.last_name = 'Wyman'\nAND strftime('%Y', r.rental_date) = '2005'\nAND strftime('%m', r.rental_date) = '07'",
    "9217": "SELECT i.inventory_id, a.first_name, a.last_name\nFROM inventory i\nJOIN film f ON i.film_id = f.film_id\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE f.title = 'STREETCAR INTENTIONS'",
    "9218": "SELECT f.title, c.name AS category\nFROM rental r\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nJOIN customer cu ON r.customer_id = cu.customer_id\nWHERE cu.first_name = 'Natalie' AND cu.last_name = 'Meyer'\nAND strftime('%Y', r.rental_date) = '2006' AND strftime('%m', r.rental_date) = '02'",
    "9219": "SELECT COUNT(rental.rental_id) AS rental_count\nFROM rental\nJOIN customer ON rental.customer_id = customer.customer_id\nWHERE customer.first_name = 'Eleanor' AND customer.last_name = 'Hunt'",
    "9220": "SELECT c.first_name || ' ' || c.last_name AS full_name, ci.city\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.title = 'DREAM PICKUP'",
    "9221": "SELECT \n    (COUNT(DISTINCT CASE WHEN c.country = 'India' THEN cu.customer_id END) * 1.0 / COUNT(cu.customer_id)) * 100 AS percent_customers_in_india\nFROM customer cu\nJOIN address a ON cu.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nJOIN country c ON ci.country_id = c.country_id;",
    "9222": "SELECT \n    (SUM(CASE WHEN a.first_name || ' ' || a.last_name = 'Mary Keitel' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN a.first_name || ' ' || a.last_name = 'Angela Witherspoon' THEN 1 ELSE 0 END)) * 1.0 / \n    SUM(CASE WHEN a.first_name || ' ' || a.last_name = 'Angela Witherspoon' THEN 1 ELSE 0 END) * 100 AS percentage_difference\nFROM \n    film_actor fa\nJOIN \n    actor a ON fa.actor_id = a.actor_id",
    "9223": "SELECT customer.email, address.address, city.city, country.country\nFROM customer\nJOIN address ON customer.address_id = address.address_id\nJOIN city ON address.city_id = city.city_id\nJOIN country ON city.country_id = country.country_id\nWHERE customer.first_name = 'Lillie' AND customer.last_name = 'Kim'",
    "9224": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN store s ON i.store_id = s.store_id\nJOIN staff st ON s.manager_staff_id = st.staff_id\nWHERE st.first_name || ' ' || st.last_name = 'Mike Hillyer'\nLIMIT 5",
    "9225": "SELECT SUM(p.amount) AS total_payment_amount\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE c.first_name = 'Diane' AND c.last_name = 'Collins'",
    "9226": "SELECT c.first_name || ' ' || c.last_name AS full_name, c.email\nFROM customer c\nJOIN payment p ON c.customer_id = p.customer_id\nGROUP BY c.customer_id\nHAVING AVG(p.amount) > (SELECT AVG(amount) * 0.7 FROM payment)",
    "9227": "SELECT COUNT(*) FROM film WHERE rental_rate = 0.99;",
    "9228": "SELECT COUNT(*) AS Thomas_Last_Name_Count\nFROM customer\nWHERE last_name = 'Thomas' AND customer_id <= 100;",
    "9229": "SELECT a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.description = \"A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies\";",
    "9230": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Liza' AND a.last_name = 'Bergman'\nORDER BY f.replacement_cost DESC\nLIMIT 1",
    "9231": "SELECT f.title\nFROM film AS f\nJOIN inventory AS i ON f.film_id = i.film_id\nWHERE i.store_id = 2 AND f.rental_rate = (\n    SELECT MAX(f.rental_rate)\n    FROM film AS f\n    JOIN inventory AS i ON f.film_id = i.film_id\n    WHERE i.store_id = 2\n)",
    "9232": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Angelina' AND a.last_name = 'Astaire' AND f.replacement_cost = 27.99;",
    "9233": "SELECT inventory.inventory_id\nFROM inventory\nJOIN film ON inventory.film_id = film.film_id\nWHERE film.title = 'African Egg';",
    "9234": "SELECT COUNT(DISTINCT fa.film_id) AS NumberOfFilms\nFROM film_actor fa\nJOIN actor a ON fa.actor_id = a.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.length = 113 AND a.first_name = 'Kirk' AND a.last_name = 'Jovovich';",
    "9235": "SELECT COUNT(DISTINCT film.film_id) AS G_rated_films\nFROM film\nJOIN inventory ON film.film_id = inventory.film_id\nWHERE inventory.inventory_id BETWEEN 20 AND 60\nAND film.rating = 'G'",
    "9236": "SELECT COUNT(DISTINCT f.film_id) AS total_films_starred_by_Bob_Fawcett\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE f.rental_rate = 4.99\nAND a.first_name = 'Bob' AND a.last_name = 'Fawcett'",
    "9237": "SELECT i.inventory_id\nFROM inventory i\nJOIN film f ON i.film_id = f.film_id\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Russell' AND a.last_name = 'Close'\nAND f.length BETWEEN 110 AND 150",
    "9238": "SELECT \n    i.store_id, \n    i.inventory_id \nFROM \n    inventory i \nJOIN \n    film f ON i.film_id = f.film_id \nWHERE \n    f.length = (SELECT MAX(length) FROM film);",
    "9239": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Elvis' AND a.last_name = 'Marx';",
    "9240": "SELECT i.inventory_id\nFROM inventory i\nJOIN film f ON i.film_id = f.film_id\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE f.rental_rate = 4.99\nAND a.first_name = 'Lucille' AND a.last_name = 'Dee'",
    "9241": "SELECT DISTINCT s.store_id\nFROM store s\nJOIN inventory i ON s.store_id = i.store_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.rental_rate > (SELECT AVG(rental_rate) * 0.6 FROM film);",
    "9242": "SELECT \n    IFNULL((SUM(CASE WHEN f.rating = 'G' THEN 1 ELSE 0 END) / CAST(COUNT(f.film_id) AS FLOAT)) * 100, 0) AS percentage_of_G_rated_films\nFROM \n    film f\nJOIN \n    film_actor fa ON f.film_id = fa.film_id\nJOIN \n    actor a ON fa.actor_id = a.actor_id\nWHERE \n    a.first_name = 'Nick' AND a.last_name = 'Wahlberg'",
    "9243": "SELECT address.address\nFROM address\nJOIN city ON address.city_id = city.city_id\nJOIN country ON city.country_id = country.country_id\nWHERE address.district = 'Texas'\nORDER BY city.city_id ASC;",
    "9244": "SELECT first_name || ' ' || last_name AS full_name, email\nFROM customer\nWHERE active = 0 AND strftime('%Y', create_date) = '2006'",
    "9245": "SELECT \n    (CAST(SUM(CASE WHEN rating = 'PG-13' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100) AS percentage_PG_13\nFROM \n    film;",
    "9246": "SELECT title, rental_rate\nFROM film\nORDER BY rental_rate DESC\nLIMIT 10;",
    "9247": "SELECT AVG(amount) AS average_rent_amount\nFROM payment\nWHERE customer_id = 15;",
    "9248": "WITH RentalPeriods AS (\n    SELECT\n        rental_id,\n        customer_id,\n        julianday(return_date) - julianday(rental_date) AS rented_days\n    FROM\n        rental\n    WHERE\n        return_date IS NOT NULL\n),\nAverageRentalPeriod AS (\n    SELECT\n        AVG(rented_days) AS avg_rented_days\n    FROM\n        RentalPeriods\n)\nSELECT\n    COUNT(DISTINCT rp.customer_id) AS above_average_renters\nFROM\n    RentalPeriods rp, AverageRentalPeriod arp\nWHERE\n    rp.rented_days > arp.avg_rented_days",
    "9249": "SELECT \n    (SELECT COUNT(*) \n     FROM film_category \n     JOIN category ON film_category.category_id = category.category_id \n     WHERE category.name = 'horror') * 100.0 / COUNT(DISTINCT film.film_id) AS horror_percentage\nFROM \n    film\nJOIN \n    film_category ON film.film_id = film_category.film_id\nJOIN \n    category ON film_category.category_id = category.category_id;",
    "9250": "SELECT \n    a.first_name || ' ' || a.last_name AS full_name\nFROM \n    actor a\nJOIN \n    film_actor fa ON a.actor_id = fa.actor_id\nGROUP BY \n    a.actor_id\nORDER BY \n    COUNT(fa.film_id) DESC\nLIMIT 1;",
    "9251": "SELECT \n    a.first_name || ' ' || a.last_name AS full_name\nFROM \n    actor a\nJOIN \n    film_actor fa ON a.actor_id = fa.actor_id\nJOIN \n    film f ON fa.film_id = f.film_id\nJOIN \n    film_category fc ON f.film_id = fc.film_id\nJOIN \n    category c ON fc.category_id = c.category_id\nWHERE \n    c.name = 'Drama'\nGROUP BY \n    a.actor_id\nORDER BY \n    COUNT(f.film_id) DESC\nLIMIT 1;",
    "9252": "Given the structure of the tables provided and the external knowledge that we need to calculate the difference in the average number of films rented each day in Australia and Canada, we need to acknowledge that the provided schema does not directly store information about countries in relation to rentals or films. Therefore, the question as posed cannot be directly answered with the given schema and the information provided. \n\nThe schema focuses on the structure of a movie rental database, including tables for films, actors, customers, rentals, and more, but it does not include a direct link between rentals and countries. To calculate the average number of films rented each day in Australia and Canada, we would need additional information or assumptions, such as linking customers or stores to countries and then aggregating rental data based on that linkage.\n\nHowever, since we cannot directly answer the question with the provided schema and information, here's a hypothetical approach to how one might structure a query if we had the necessary data:\n\n1. Assume there's a way to link rentals to countries (e.g., through customer addresses or store locations).\n2. Aggregate rental data by country.\n3. Calculate the average number of rentals per day for each country.\n4. Subtract the average number of rentals per day in Canada from that in Australia.\n\nA hypothetical SQL might look like this if we had a `country` field in a relevant table (which we do not, based on the provided schema):\n\n```sqlite\n-- Hypothetical SQL, does not work with the provided schema as there's no direct link to countries in rentals\nWITH Rental_Country AS (\n    SELECT\n        c.country,\n        COUNT(r.rental_id) AS total_rentals,\n        (julianday(MAX(r.rental_date)) - julianday(MIN(r.rental_date))) AS days_diff\n    FROM rental r\n    JOIN customer cu ON r.customer_id = cu.customer_id\n    JOIN address a ON cu.address_id = a.address_id\n    JOIN city ci ON a.city_id = ci.city_id\n    JOIN country c ON ci.country_id = c.country_id\n    WHERE c.country IN ('Australia', 'Canada')\n    GROUP BY c.country\n),\nAverage_Rentals AS (\n    SELECT\n        country,\n        total_rentals / days_diff AS avg_rentals_per_day\n    FROM Rental_Country\n)\nSELECT\n    (SELECT avg_rentals_per_day FROM Average_Rentals WHERE country = 'Australia') -\n    (SELECT avg",
    "9253": "SELECT \n    (COUNT(DISTINCT fc.film_id) * 100.0 / (SELECT COUNT(DISTINCT fa.film_id) \n                                           FROM film_actor fa\n                                           JOIN actor a ON fa.actor_id = a.actor_id\n                                           WHERE a.first_name = 'Reese' AND a.last_name = 'Kilmer')) AS action_movie_percentage\nFROM film_category fc\nJOIN category c ON fc.category_id = c.category_id\nJOIN film_actor fa ON fc.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE c.name = 'action'\nAND a.first_name = 'Reese' AND a.last_name = 'Kilmer'",
    "9254": "SELECT SUM(p.amount) AS total_rent\nFROM payment p\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE f.title = 'Clockwork Paradice';",
    "9255": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN film_category fc ON f.film_id = fc.film_id\nGROUP BY c.customer_id\nHAVING COUNT(DISTINCT fc.category_id) > 5",
    "9256": "SELECT AVG(actor_count) AS average_number_of_actors\nFROM (\n    SELECT f.film_id, COUNT(fa.actor_id) AS actor_count\n    FROM film f\n    JOIN film_category fc ON f.film_id = fc.film_id\n    JOIN category c ON fc.category_id = c.category_id\n    LEFT JOIN film_actor fa ON f.film_id = fa.film_id\n    WHERE c.name = 'Comedy'\n    GROUP BY f.film_id\n)",
    "9257": "SELECT \n    f.title,\n    COUNT(r.rental_id) AS rental_count\nFROM \n    film f\nJOIN \n    film_category fc ON f.film_id = fc.film_id\nJOIN \n    category c ON fc.category_id = c.category_id\nJOIN \n    inventory i ON f.film_id = i.film_id\nJOIN \n    rental r ON i.inventory_id = r.inventory_id\nWHERE \n    c.name = 'children'\nGROUP BY \n    f.title\nORDER BY \n    rental_count DESC\nLIMIT 1;",
    "9258": "WITH AverageRent AS (\n    SELECT AVG(amount) AS avg_amount\n    FROM payment\n    JOIN rental ON payment.rental_id = rental.rental_id\n    JOIN inventory ON rental.inventory_id = inventory.inventory_id\n    WHERE inventory.store_id = 1\n),\nCustomersAboveAverage AS (\n    SELECT customer_id\n    FROM payment\n    JOIN rental ON payment.rental_id = rental.rental_id\n    JOIN inventory ON rental.inventory_id = inventory.inventory_id\n    CROSS JOIN AverageRent\n    WHERE inventory.store_id = 1 AND payment.amount > AverageRent.avg_amount\n    GROUP BY customer_id\n),\nTotalCustomers AS (\n    SELECT COUNT(DISTINCT customer_id) AS total_customers\n    FROM rental\n    JOIN inventory ON rental.inventory_id = inventory.inventory_id\n    WHERE inventory.store_id = 1\n)\nSELECT (COUNT(*) * 100.0 / TotalCustomers.total_customers) AS percentage_above_average\nFROM CustomersAboveAverage, TotalCustomers;",
    "9259": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category cat ON fc.category_id = cat.category_id\nGROUP BY c.customer_id\nHAVING SUM(CASE WHEN cat.name = 'Family' THEN 1 ELSE 0 END) > SUM(CASE WHEN cat.name = 'Sci-Fi' THEN 1 ELSE 0 END)",
    "9260": "SELECT title FROM film WHERE rating = 'NC-17';",
    "9261": "SELECT COUNT(*) AS KilmerCount FROM actor WHERE last_name = 'Kilmer';",
    "9262": "SELECT COUNT(*) FROM film WHERE length > 100;",
    "9263": "SELECT COUNT(*) AS payments_made\nFROM payment\nWHERE payment_date LIKE '2005-08%'",
    "9264": "SELECT country.country \nFROM country \nJOIN city ON country.country_id = city.country_id \nJOIN address ON city.city_id = address.city_id \nWHERE address.address = '1386 Nakhon Sawan Boulevard'",
    "9265": "SELECT l.name AS most_used_language\nFROM language l\nJOIN film f ON l.language_id = f.language_id\nWHERE f.release_year = '2006'\nGROUP BY l.language_id\nORDER BY COUNT(f.film_id) DESC\nLIMIT 1;",
    "9266": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'classics'",
    "9267": "SELECT COUNT(*) AS rentals_in_june_2016\nFROM rental\nJOIN customer ON rental.customer_id = customer.customer_id\nWHERE customer.first_name = 'Ella' AND customer.last_name = 'Oliver'\nAND rental.rental_date BETWEEN '2016-06-01' AND '2016-06-30';",
    "9268": "SELECT COUNT(DISTINCT c.customer_id) AS distinct_clients\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN store s ON i.store_id = s.store_id\nJOIN staff st ON s.store_id = st.store_id\nJOIN customer c2 ON st.staff_id = c2.store_id\nWHERE c2.first_name = 'Jon' AND c2.last_name = 'Stephens';",
    "9269": "SELECT SUM(amount) AS total_amount_paid\nFROM payment\nJOIN rental ON payment.rental_id = rental.rental_id\nWHERE DATE(rental.rental_date) = '2005-07-29'",
    "9270": "SELECT c.first_name\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nWHERE a.postal_code LIKE '76%'",
    "9271": "SELECT return_date FROM rental\nJOIN inventory ON rental.inventory_id = inventory.inventory_id\nJOIN film ON inventory.film_id = film.film_id\nWHERE film.title = 'BLOOD ARGONAUTS'",
    "9272": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Cuba' AND a.last_name = 'Allen'",
    "9273": "SELECT COUNT(DISTINCT fa.actor_id) AS total_actors_in_music_movies\nFROM film_actor fa\nJOIN film_category fc ON fa.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Music'",
    "9274": "SELECT a.first_name, a.last_name, COUNT(*) AS comedy_film_count\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Comedy'\nGROUP BY a.actor_id\nORDER BY comedy_film_count DESC\nLIMIT 1;",
    "9275": "SELECT COUNT(DISTINCT c.customer_id) AS customers_not_rented_at_mikes\nFROM customer c\nLEFT JOIN rental r ON c.customer_id = r.customer_id\nLEFT JOIN inventory i ON r.inventory_id = i.inventory_id\nLEFT JOIN store s ON i.store_id = s.store_id\nLEFT JOIN staff st ON s.manager_staff_id = st.staff_id\nWHERE st.first_name != 'Mike' OR st.first_name IS NULL;",
    "9276": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.rating = 'PG-13' AND f.replacement_cost = (\n    SELECT MAX(replacement_cost)\n    FROM film\n    WHERE rating = 'PG-13'\n)",
    "9277": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nWHERE r.return_date IS NULL\nGROUP BY c.customer_id\nORDER BY COUNT(r.rental_id) DESC\nLIMIT 1;",
    "9278": "SELECT COUNT(customer.customer_id) AS customer_count\nFROM customer\nJOIN address ON customer.address_id = address.address_id\nJOIN city ON address.city_id = city.city_id\nWHERE city.city = 'Miyakonojo';",
    "9279": "SELECT COUNT(DISTINCT c.customer_id) AS non_active_clients_with_unreturned_rentals\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nLEFT JOIN payment p ON r.rental_id = p.rental_id\nWHERE c.active = 0 AND r.return_date IS NULL;",
    "9280": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Animation'\nORDER BY f.length ASC\nLIMIT 1",
    "9281": "SELECT country.country \nFROM country \nJOIN city ON country.country_id = city.country_id \nJOIN address ON city.city_id = address.city_id \nJOIN store ON address.address_id = store.address_id \nJOIN customer ON store.store_id = customer.store_id \nJOIN rental ON customer.customer_id = rental.customer_id \nWHERE customer.first_name = 'Hector' AND customer.last_name = 'Poinexter'",
    "9282": "SELECT AVG(p.amount) AS avg_rental_payment\nFROM payment p\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Horror'",
    "9283": "SELECT AVG(amount) AS average_rent\nFROM payment\nJOIN customer ON payment.customer_id = customer.customer_id\nWHERE first_name = 'Christy' AND last_name = 'Vargas'",
    "9284": "SELECT \n    (CAST(SUM(CASE WHEN f.length < 100 AND c.name = 'Drama' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT f.film_id)) * 100 AS percentage\nFROM \n    film f\nJOIN \n    film_category fc ON f.film_id = fc.film_id\nJOIN \n    category c ON fc.category_id = c.category_id;",
    "9285": "SELECT first_name, last_name FROM actor WHERE first_name = (SELECT first_name FROM actor WHERE first_name = 'Johnny')",
    "9286": "SELECT address_id\nFROM address\nWHERE district = 'Gansu';",
    "9287": "SELECT name AS type_of_film, category_id AS ID, last_update AS latest_update FROM category LIMIT 3;",
    "9288": "SELECT first_name || ' ' || last_name AS full_name\nFROM customer\nWHERE active = 0\nLIMIT 3;",
    "9289": "SELECT title, rental_rate / rental_duration AS rental_price_per_day\nFROM film\nWHERE title = 'Airplane Sierra'",
    "9290": "SELECT address, address2, district FROM address\nJOIN store ON address.address_id = store.address_id\nWHERE store.store_id = 2;",
    "9291": "SELECT city.city \nFROM address \nJOIN city ON address.city_id = city.city_id \nWHERE address.address = '1623 Kingstown Drive';",
    "9292": "INSERT INTO country (country) VALUES ('Algeria');\n\nINSERT INTO city (city, country_id) VALUES \n('Algiers', (SELECT country_id FROM country WHERE country = 'Algeria')),\n('Oran', (SELECT country_id FROM country WHERE country = 'Algeria')),\n('Constantine', (SELECT country_id FROM country WHERE country = 'Algeria'));\n\nSELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Algeria');",
    "9293": "SELECT c.name AS category\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE f.title = 'Agent Truman'",
    "9294": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'action'\nLIMIT 3;",
    "9295": "SELECT \n    (SELECT AVG(length) FROM film \n     INNER JOIN film_category ON film.film_id = film_category.film_id \n     INNER JOIN category ON film_category.category_id = category.category_id \n     WHERE category.name = 'children') \n    -\n    (SELECT AVG(length) FROM film \n     INNER JOIN film_category ON film.film_id = film_category.film_id \n     INNER JOIN category ON film_category.category_id = category.category_id \n     WHERE category.name = 'action') AS difference_in_avg_length;",
    "9296": "SELECT district FROM address\nJOIN customer ON address.address_id = customer.address_id\nWHERE first_name = 'Maria' AND last_name = 'Miller'",
    "9297": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nWHERE c.active = 1 AND a.address = '1795 Santiago de Compostela Way' AND a.district = 'Texas'",
    "9298": "SELECT COUNT(*) \nFROM film \nJOIN language ON film.language_id = language.language_id \nWHERE language.name = 'English' \nAND film.length > 50 \nAND film.replacement_cost < 10.99;",
    "9299": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'ACADEMY DINOSAUR'",
    "9300": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Penelope' AND a.last_name = 'Guiness';",
    "9301": "SELECT \n    (COUNT(DISTINCT CASE WHEN c.name = 'Documentary' THEN f.film_id END) * 1.0 / COUNT(DISTINCT f.film_id)) * 100 AS documentary_percentage\nFROM \n    film f\nLEFT JOIN \n    film_category fc ON f.film_id = fc.film_id\nLEFT JOIN \n    category c ON fc.category_id = c.category_id;",
    "9302": "SELECT COUNT(film.film_id) AS adult_english_films_count\nFROM film\nJOIN language ON film.language_id = language.language_id\nWHERE language.name = 'English' AND film.rating = 'NC-17'",
    "9303": "SELECT title \nFROM film \nORDER BY length DESC \nLIMIT 1;",
    "9304": "SELECT COUNT(*) AS number_of_dans FROM actor WHERE first_name = 'Dan';",
    "9305": "SELECT first_name\nFROM customer\nGROUP BY first_name\nORDER BY COUNT(first_name) DESC\nLIMIT 1",
    "9306": "SELECT DISTINCT rating\nFROM film\nWHERE special_features LIKE '%Behind the Scenes%'",
    "9307": "SELECT MAX(film_count) AS largest_number_of_films_rented\nFROM (\n    SELECT customer_id, COUNT(film_id) AS film_count\n    FROM rental\n    INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id\n    GROUP BY customer_id\n)",
    "9308": "SELECT title FROM film WHERE description LIKE '%Lacklusture%'",
    "9309": "SELECT COUNT(DISTINCT rental.film_id) AS films_rented\nFROM rental\nJOIN inventory ON rental.inventory_id = inventory.inventory_id\nJOIN customer ON rental.customer_id = customer.customer_id\nWHERE customer.first_name = 'Francis' AND customer.last_name = 'Sikes'",
    "9310": "SELECT \n    s.store_id,\n    st.first_name,\n    st.last_name\nFROM \n    store s\nJOIN \n    staff st ON s.manager_staff_id = st.staff_id\nJOIN \n    inventory i ON s.store_id = i.store_id\nGROUP BY \n    s.store_id\nORDER BY \n    COUNT(i.film_id) DESC\nLIMIT 1;",
    "9311": "SELECT a.address \nFROM address a \nJOIN customer c ON a.address_id = c.address_id \nWHERE c.active = 0;",
    "9312": "SELECT category.name\nFROM category\nJOIN film_category ON category.category_id = film_category.category_id\nGROUP BY category.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "9313": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'Jason trap'",
    "9314": "SELECT \n    c.first_name, \n    c.last_name \nFROM \n    customer c \nJOIN \n    payment p ON c.customer_id = p.customer_id \nGROUP BY \n    c.customer_id \nORDER BY \n    SUM(p.amount) DESC \nLIMIT 1;",
    "9315": "SELECT f.title, COUNT(r.inventory_id) AS rental_count\nFROM film AS f\nJOIN inventory AS i ON f.film_id = i.film_id\nJOIN rental AS r ON i.inventory_id = r.inventory_id\nGROUP BY f.film_id\nORDER BY rental_count DESC\nLIMIT 5;",
    "9316": "SELECT country.country \nFROM country \nJOIN city ON country.country_id = city.country_id \nWHERE city.city = 'Sasebo';",
    "9317": "SELECT address.address, address.address2, address.district, city.city, country.country\nFROM address\nJOIN store ON address.address_id = store.address_id\nJOIN city ON address.city_id = city.city_id\nJOIN country ON city.country_id = country.country_id",
    "9318": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'animation'",
    "9319": "SELECT city.city\nFROM customer\nJOIN address ON customer.address_id = address.address_id\nJOIN city ON address.city_id = city.city_id\nGROUP BY city.city\nORDER BY COUNT(customer.customer_id) DESC\nLIMIT 1;",
    "9320": "SELECT \n    a.actor_id, \n    a.first_name, \n    a.last_name, \n    COUNT(fa.film_id) AS film_count\nFROM \n    actor a\nJOIN \n    film_actor fa ON a.actor_id = fa.actor_id\nGROUP BY \n    a.actor_id\nORDER BY \n    film_count DESC\nLIMIT 1;",
    "9321": "SELECT \n    (CAST(SUM(CASE WHEN c.name = 'Horror' THEN 1 ELSE 0 END) AS REAL) / COUNT(f.film_id)) * 100 AS horror_film_percentage\nFROM \n    film f\nLEFT JOIN \n    film_category fc ON f.film_id = fc.film_id\nLEFT JOIN \n    category c ON fc.category_id = c.category_id;",
    "9322": "SELECT first_name || ' ' || last_name AS full_name FROM actor WHERE actor_id = 5;",
    "9323": "SELECT COUNT(film_id) AS total_movies_with_category_11\nFROM film_category\nWHERE category_id = 11;",
    "9324": "SELECT c.name AS category_name\nFROM category c\nJOIN film_category fc ON c.category_id = fc.category_id\nJOIN film f ON fc.film_id = f.film_id\nWHERE f.title = 'BABY HALL'",
    "9325": "SELECT a.first_name || ' ' || a.last_name AS full_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nORDER BY f.rental_rate DESC\nLIMIT 1;",
    "9326": "SELECT f.title, f.description\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'JENNIFER' AND a.last_name = 'DAVIS';",
    "9327": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN payment p ON c.customer_id = p.customer_id\nWHERE p.amount > 10",
    "9328": "SELECT a.address\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nWHERE c.first_name = 'SUSAN' AND a.postal_code = '77948';",
    "9329": "SELECT c.first_name, c.last_name\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nWHERE ci.city = 'Abu Dhabi'",
    "9330": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nWHERE a.address = '692 Joliet Street'",
    "9331": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE f.length > 120 AND c.name = 'action'",
    "9332": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'ANONYMOUS HUMAN'",
    "9333": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Horror'\nORDER BY f.rental_rate ASC\nLIMIT 1;",
    "9334": "SELECT f.description\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Travel'",
    "9335": "SELECT SUM(p.amount) AS total_payment_amount\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nJOIN country co ON ci.country_id = co.country_id\nWHERE a.district = 'Nagasaki'",
    "9336": "SELECT \n    (SELECT SUM(amount) \n     FROM payment \n     JOIN customer ON payment.customer_id = customer.customer_id \n     WHERE first_name = 'MARGARET' AND last_name = 'MOORE') / \n    (SELECT SUM(amount) FROM payment) * 100 AS percentage_total_payment",
    "9337": "SELECT \n    (COUNT(DISTINCT CASE WHEN fc.category_id = c.category_id AND f.length > 120 THEN f.film_id END) * 1.0 / COUNT(DISTINCT f.film_id)) * 100 AS percentage_of_horror_movies_over_120_minutes\nFROM \n    film f\nJOIN \n    film_category fc ON f.film_id = fc.film_id\nJOIN \n    category c ON fc.category_id = c.category_id\nWHERE \n    c.name = 'Horror';",
    "9338": "SELECT COUNT(*) AS total_films_released_in_2006\nFROM film\nWHERE release_year = '2006'",
    "9339": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10;",
    "9340": "SELECT film_id \nFROM film \nWHERE rental_duration = (SELECT MAX(rental_duration) FROM film);",
    "9341": "SELECT title \nFROM film \nWHERE rental_rate = (SELECT MAX(rental_rate) FROM film);",
    "9342": "SELECT title FROM film WHERE rating = 'G';",
    "9343": "SELECT language.name AS language\nFROM film\nJOIN language ON film.language_id = language.language_id\nWHERE film.title = 'CHILL LUCK';",
    "9344": "SELECT f.last_update\nFROM film f\nJOIN language l ON f.language_id = l.language_id\nWHERE f.release_year = '2006' AND l.name = 'English'",
    "9345": "SELECT COUNT(f.title) AS Italian_Films_With_Deleted_Scenes\nFROM film f\nJOIN language l ON f.language_id = l.language_id\nWHERE l.name = 'Italian' AND f.special_features LIKE '%deleted scenes%'",
    "9346": "SELECT COUNT(film.title) AS animation_adults_only_count\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'animation' AND film.rating = 'NC-17'",
    "9347": "SELECT DISTINCT f.rating\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'action'",
    "9348": "SELECT film.film_id\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'comedy'",
    "9349": "SELECT f.title \nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'documentary' AND f.length = (\n    SELECT MAX(length) \n    FROM film f\n    JOIN film_category fc ON f.film_id = fc.film_id\n    JOIN category c ON fc.category_id = c.category_id\n    WHERE c.name = 'documentary'\n)",
    "9350": "SELECT c.name AS category\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE f.title = 'BLADE POLISH';",
    "9351": "SELECT r.rental_id\nFROM rental r\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'Mary' AND c.last_name = 'Smith';",
    "9352": "SELECT customer.first_name\nFROM customer\nJOIN rental ON customer.customer_id = rental.customer_id\nJOIN staff ON rental.staff_id = staff.staff_id\nWHERE staff.staff_id = 1",
    "9353": "SELECT customer.email\nFROM customer\nJOIN rental ON customer.customer_id = rental.customer_id\nJOIN staff ON rental.staff_id = staff.staff_id\nWHERE staff.staff_id = 2\nGROUP BY customer.email;",
    "9354": "SELECT actor_id \nFROM film_actor \nJOIN film ON film_actor.film_id = film.film_id \nWHERE title = 'BOUND CHEAPER';",
    "9355": "SELECT r.inventory_id\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nWHERE c.first_name = 'Karen' AND c.last_name = 'Jackson';",
    "9356": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Jane' AND a.last_name = 'Jackman';",
    "9357": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'BIRD INDEPENDENCE'",
    "9358": "SELECT SUM(f.rental_rate) AS total_rental_rate_for_animation_films\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Animation'",
    "9359": "SELECT AVG(f.rental_rate) AS avg_rental_rate\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Sci-Fi'",
    "9360": "SELECT \n    (COUNT(DISTINCT CASE WHEN c.name = 'Horror' THEN f.film_id END) * 1.0 / COUNT(DISTINCT f.film_id)) * 100 AS percentage_of_horror_in_english\nFROM \n    film f\nJOIN \n    language l ON f.language_id = l.language_id\nLEFT JOIN \n    film_category fc ON f.film_id = fc.film_id\nLEFT JOIN \n    category c ON fc.category_id = c.category_id\nWHERE \n    l.name = 'English';",
    "9361": "SELECT COUNT(*) AS adult_films_with_short_rental\nFROM film\nWHERE rating = 'NC-17' AND rental_duration < 4;",
    "9362": "SELECT title \nFROM film \nWHERE rating = 'R' \nAND length = 71 \nAND replacement_cost = 29.99;",
    "9363": "SELECT c.email\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nWHERE c.active = 1\nAND r.rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49'",
    "9364": "SELECT SUM(amount) AS total_payment\nFROM payment\nJOIN customer ON payment.customer_id = customer.customer_id\nWHERE customer.first_name = 'Sarah' AND customer.last_name = 'Lewis'",
    "9365": "SELECT COUNT(payment_id) AS payments_by_susan_wilson\nFROM payment\nJOIN customer ON payment.customer_id = customer.customer_id\nWHERE customer.first_name = 'Susan' AND customer.last_name = 'Wilson'\nAND payment.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'",
    "9366": "SELECT a.first_name || ' ' || a.last_name AS full_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'Alabama Devil'",
    "9367": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Sandra' AND a.last_name = 'Kilmer';",
    "9368": "SELECT COUNT(film.film_id) AS documentary_pg13_count\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'documentary' AND film.rating = 'PG-13'",
    "9369": "SELECT f.title, c.name AS category_name, f.special_features\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE (f.rental_duration * f.rental_rate) > 30",
    "9370": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'African Egg'",
    "9371": "SELECT COUNT(DISTINCT rental.rental_id) AS number_of_movies_rented\nFROM customer\nJOIN rental ON customer.customer_id = rental.customer_id\nWHERE customer.first_name = 'Maria' AND customer.last_name = 'Miller';",
    "9372": "SELECT f.title\nFROM film AS f\nJOIN inventory AS i ON f.film_id = i.film_id\nJOIN rental AS r ON i.inventory_id = r.inventory_id\nJOIN customer AS c ON r.customer_id = c.customer_id\nWHERE c.first_name = 'Dorothy' AND c.last_name = 'Taylor'\nORDER BY r.rental_date DESC\nLIMIT 1;",
    "9373": "SELECT COUNT(film.film_id) AS action_movie_count\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE category.name = 'Action'",
    "9374": "SELECT a.address, f.rental_rate\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN store s ON i.store_id = s.store_id\nJOIN address a ON s.address_id = a.address_id\nWHERE f.title = 'WYOMING STORM'",
    "9375": "SELECT \n    (julianday(r.return_date) - julianday(r.rental_date)) * 24 * 60 AS minutes\nFROM \n    rental r\nJOIN \n    inventory i ON r.inventory_id = i.inventory_id\nJOIN \n    film f ON i.film_id = f.film_id\nJOIN \n    customer c ON r.customer_id = c.customer_id\nWHERE \n    f.title = 'Destiny Saturday'\nAND \n    c.first_name = 'Austin'\nAND \n    c.last_name = 'Cintron';",
    "9376": "SELECT COUNT(DISTINCT fa.film_id) AS NumberOfMovies\nFROM film_actor fa\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Nick' AND a.last_name = 'Stallone';",
    "9377": "WITH ShortestFilms AS (\n    SELECT film_id, title, length\n    FROM film\n    WHERE length = (SELECT MIN(length) FROM film)\n),\nRentalRevenue AS (\n    SELECT f.film_id, f.title, (f.rental_duration * f.rental_rate) AS revenue\n    FROM ShortestFilms f\n)\nSELECT title\nFROM RentalRevenue\nWHERE revenue = (SELECT MAX(revenue) FROM RentalRevenue)",
    "9378": "SELECT SUM(p.amount) AS total_amount_paid\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE c.first_name = 'Stephanie' AND c.last_name = 'Mitchell'\nAND strftime('%Y-%m', p.payment_date) = '2005-06'",
    "9379": "SELECT AVG(replacement_cost) AS avg_replacement_cost\nFROM film\nWHERE rental_rate = 4.99;",
    "9380": "SELECT AVG(rental_rate) AS average_rental_rate_for_PG13\nFROM film\nWHERE rating = 'PG-13'",
    "9381": "SELECT \n    (CAST(SUM(CASE WHEN active = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(customer_id)) * 100 AS percentage_inactive_customers\nFROM \n    customer\nWHERE \n    store_id = 1;",
    "9382": "SELECT rental_duration FROM film WHERE title = 'Dirty Ace'",
    "9383": "SELECT first_name || ' ' || last_name AS full_name\nFROM customer\nWHERE email = 'SHEILA.WELLS@sakilacustomer.org';",
    "9384": "SELECT title\nFROM film\nWHERE length = (SELECT MAX(length) FROM film)\nORDER BY title ASC;",
    "9385": "SELECT COUNT(*) AS total_categories FROM category;",
    "9386": "WITH RentalsIn2005 AS (\n    SELECT \n        c.first_name, \n        c.last_name, \n        COUNT(DISTINCT f.film_id) AS titles_rented\n    FROM rental r\n    JOIN inventory i ON r.inventory_id = i.inventory_id\n    JOIN film f ON i.film_id = f.film_id\n    JOIN customer c ON r.customer_id = c.customer_id\n    WHERE strftime('%Y', r.rental_date) = '2005'\n    GROUP BY c.customer_id\n),\nRentalsInJune2005 AS (\n    SELECT \n        c.first_name, \n        c.last_name, \n        COUNT(DISTINCT f.film_id) AS titles_rented_in_june\n    FROM rental r\n    JOIN inventory i ON r.inventory_id = i.inventory_id\n    JOIN film f ON i.film_id = f.film_id\n    JOIN customer c ON r.customer_id = c.customer_id\n    WHERE strftime('%Y', r.rental_date) = '2005' AND strftime('%m', r.rental_date) = '06'\n    GROUP BY c.customer_id\n),\nCombinedRentals AS (\n    SELECT \n        r2005.first_name,\n        r2005.last_name,\n        r2005.titles_rented,\n        IFNULL(rJune2005.titles_rented_in_june, 0) AS titles_rented_in_june\n    FROM RentalsIn2005 r2005\n    LEFT JOIN RentalsInJune2005 rJune2005 ON r2005.first_name = rJune2005.first_name AND r2005.last_name = rJune2005.last_name\n    WHERE r2005.first_name = 'Mary' AND r2005.last_name = 'Smith'\n)\nSELECT \n    first_name,\n    last_name,\n    titles_rented,\n    titles_rented_in_june,\n    (CAST(titles_rented_in_june AS REAL) / titles_rented) * 100 AS percentage_rented_in_june\nFROM CombinedRentals;",
    "9387": "SELECT COUNT(*) AS active_customers\nFROM customer\nWHERE active = 1;",
    "9388": "SELECT title FROM film WHERE rating = 'PG-13';",
    "9389": "SELECT title\nFROM film\nWHERE rental_duration > 5\nLIMIT 10;",
    "9390": "SELECT city.city\nFROM city\nJOIN country ON city.country_id = country.country_id\nWHERE country.country = 'United Arab Emirates'",
    "9391": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN payment p ON c.customer_id = p.customer_id\nWHERE p.amount > 10\nGROUP BY c.customer_id\nLIMIT 5",
    "9392": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Burt' AND a.last_name = 'Dukakis';",
    "9393": "SELECT a.first_name || ' ' || a.last_name AS full_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'Ending Crowds'",
    "9394": "SELECT a.first_name, a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.title = 'Bound Cheaper'",
    "9395": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Karl' AND a.last_name = 'Berr' AND f.rating = 'PG'",
    "9396": "SELECT city.city \nFROM city \nJOIN country ON city.country_id = country.country_id \nWHERE country.country = 'Philippines';",
    "9397": "WITH RentalCounts AS (\n    SELECT\n        f.film_id,\n        f.title,\n        COUNT(r.rental_id) AS rental_count\n    FROM\n        film f\n    JOIN inventory i ON f.film_id = i.film_id\n    LEFT JOIN rental r ON i.inventory_id = r.inventory_id\n    GROUP BY\n        f.film_id\n),\nMinRentalCount AS (\n    SELECT\n        MIN(rental_count) AS min_rental_count\n    FROM\n        RentalCounts\n)\nSELECT\n    rc.film_id,\n    rc.title,\n    rc.rental_count\nFROM\n    RentalCounts rc\nJOIN MinRentalCount mrc ON rc.rental_count = mrc.min_rental_count;",
    "9398": "SELECT f.description\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Lucille' AND a.last_name = 'Tracy'",
    "9399": "SELECT c.name AS category_name\nFROM category c\nJOIN film_category fc ON c.category_id = fc.category_id\nJOIN film f ON fc.film_id = f.film_id\nWHERE f.title = 'Beach Heartbreakers'",
    "9400": "SELECT f.title\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE c.name = 'Horror'\nLIMIT 10;",
    "9401": "SELECT DISTINCT a.last_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nWHERE f.rating = 'NC-17'",
    "9402": "SELECT AVG(f.rental_rate) AS average_rental_rate\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Lucille' AND a.last_name = 'Tracy';",
    "9403": "SELECT COUNT(*) AS NumberOfFilms\nFROM film\nWHERE length BETWEEN 100 AND 110;",
    "9404": "SELECT actor_id FROM actor WHERE last_name = 'Dee'",
    "9405": "SELECT COUNT(*) AS NumberOfNinas\nFROM customer\nWHERE first_name = 'Nina' AND active = 1;",
    "9406": "SELECT COUNT(film.film_id) AS R_rated_films_in_store_2\nFROM film\nJOIN inventory ON film.film_id = inventory.film_id\nWHERE film.rating = 'R' AND inventory.store_id = 2;",
    "9407": "SELECT DISTINCT s.store_id\nFROM store s\nJOIN inventory i ON s.store_id = i.store_id\nJOIN film f ON i.film_id = f.film_id\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Reese' AND a.last_name = 'West' AND f.length <= 100;",
    "9408": "SELECT f.length AS duration\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Nick' AND a.last_name = 'Wahlberg'\nORDER BY f.rental_rate DESC\nLIMIT 1;",
    "9409": "SELECT f.title\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Russell' AND a.last_name = 'Close';",
    "9410": "SELECT store.store_id\nFROM store\nJOIN inventory ON store.store_id = inventory.store_id\nJOIN film ON inventory.film_id = film.film_id\nWHERE film.title = 'Amadeus Holy';",
    "9411": "SELECT COUNT(DISTINCT f.film_id) AS num_films_starred_by_nina_soto\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE f.rental_rate = 2.99\nAND a.first_name = 'Nina'\nAND a.last_name = 'Soto';",
    "9412": "WITH ReeseWestFilms AS (\n    SELECT fa.film_id\n    FROM actor a\n    JOIN film_actor fa ON a.actor_id = fa.actor_id\n    WHERE a.first_name = 'Reese' AND a.last_name = 'West'\n),\nStore1Films AS (\n    SELECT COUNT(DISTINCT film_id) AS Store1Count\n    FROM inventory\n    WHERE store_id = 1 AND film_id IN (SELECT film_id FROM ReeseWestFilms)\n),\nStore2Films AS (\n    SELECT COUNT(DISTINCT film_id) AS Store2Count\n    FROM inventory\n    WHERE store_id = 2 AND film_id IN (SELECT film_id FROM ReeseWestFilms)\n)\nSELECT (SELECT Store1Count FROM Store1Films) - (SELECT Store2Count FROM Store2Films) AS Difference",
    "9413": "SELECT postal_code FROM address WHERE address = '692 Joliet Street';",
    "9414": "SELECT COUNT(*) AS active_customers FROM customer WHERE active = 1;",
    "9415": "SELECT COUNT(*) AS active_customers\nFROM customer\nWHERE store_id = 1 AND active = 1;",
    "9416": "SELECT a.address, a.address2\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nWHERE c.first_name = 'Mary' AND c.last_name = 'Smith';",
    "9417": "SELECT COUNT(DISTINCT customer.customer_id) AS active_customers_in_arlington\nFROM customer\nJOIN address ON customer.address_id = address.address_id\nJOIN city ON address.city_id = city.city_id\nWHERE customer.active = 1 AND city.city = 'Arlington'",
    "9418": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nJOIN country co ON ci.country_id = co.country_id\nWHERE co.country = 'Italy'",
    "9419": "SELECT country.country\nFROM country\nJOIN city ON country.country_id = city.country_id\nJOIN address ON city.city_id = address.city_id\nJOIN customer ON address.address_id = customer.address_id\nWHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';",
    "9420": "SELECT MAX(p.amount) AS biggest_amount\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE c.first_name = 'Mary' AND c.last_name = 'Smith'",
    "9421": "SELECT COUNT(*) AS number_of_rentals\nFROM rental\nJOIN customer ON rental.customer_id = customer.customer_id\nWHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';",
    "9422": "SELECT SUM(amount) AS total_spent\nFROM payment\nJOIN customer ON payment.customer_id = customer.customer_id\nWHERE first_name = 'Mary' AND last_name = 'Smith'",
    "9423": "SELECT COUNT(*) AS rentals_in_june_2005\nFROM rental\nJOIN customer ON rental.customer_id = customer.customer_id\nJOIN payment ON rental.rental_id = payment.rental_id\nWHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith'\nAND strftime('%Y', payment.payment_date) = '2005'\nAND strftime('%m', payment.payment_date) = '06'",
    "9424": "SELECT c.first_name || ' ' || c.last_name AS full_name\nFROM customer c\nJOIN payment p ON c.customer_id = p.customer_id\nORDER BY p.amount DESC\nLIMIT 1;",
    "9425": "SELECT SUM(p.amount) AS total_spent_in_Italy\nFROM payment p\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN customer c ON p.customer_id = c.customer_id\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nJOIN country co ON ci.country_id = co.country_id\nWHERE co.country = 'Italy';",
    "9426": "SELECT COUNT(*) \nFROM payment \nJOIN customer ON payment.customer_id = customer.customer_id \nWHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith' AND payment.amount > 4.99;",
    "9427": "SELECT AVG(amount) AS average_spent_per_rental\nFROM payment\nJOIN customer ON payment.customer_id = customer.customer_id\nJOIN address ON customer.address_id = address.address_id\nJOIN city ON address.city_id = city.city_id\nJOIN country ON city.country_id = country.country_id\nWHERE country = 'Italy'"
}